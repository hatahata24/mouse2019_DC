
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08012664  08012664  00022664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d2c  08012d2c  00030124  2**0
                  CONTENTS
  4 .ARM          00000008  08012d2c  08012d2c  00022d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d34  08012d34  00030124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d34  08012d34  00022d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d38  08012d38  00022d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08012d3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000124  08012e60  00030124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012fc  08012e60  000312fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001676a  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  000468be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  00049908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  0004ada0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022609  00000000  00000000  0004c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116b2  00000000  00000000  0006e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7445  00000000  00000000  0007fda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001471e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee8  00000000  00000000  00147264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000124 	.word	0x20000124
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801264c 	.word	0x0801264c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000128 	.word	0x20000128
 80001cc:	0801264c 	.word	0x0801264c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f00f feae 	bl	8010ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000b8 	.word	0x200000b8
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000158 	.word	0x20000158

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000158 	.word	0x20000158

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f00f fe4c 	bl	8010d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200000b8 	.word	0x200000b8
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000015c 	.word	0x2000015c
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000015c 	.word	0x2000015c
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	2000015c 	.word	0x2000015c

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000015c 	.word	0x2000015c
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08012c78 	.word	0x08012c78
 800297c:	200000b8 	.word	0x200000b8

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200000b8 	.word	0x200000b8

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08012c88 	.word	0x08012c88

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08012c88 	.word	0x08012c88

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00e f913 	bl	8010da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200000b8 	.word	0x200000b8
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00d fc0a 	bl	8010e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00d fb41 	bl	8010ed8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f007 ffa1 	bl	800ba80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00c fd5e 	bl	80110d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <drive_init+0x14>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000fa8 	.word	0x20000fa8

08004c74 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c78:	e00f      	b.n	8004c9a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f00b fe04 	bl	801088c <led_write>
		  HAL_Delay(200);
 8004c84:	20c8      	movs	r0, #200	; 0xc8
 8004c86:	f7fc f9c9 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f00b fdfc 	bl	801088c <led_write>
		  HAL_Delay(200);
 8004c94:	20c8      	movs	r0, #200	; 0xc8
 8004c96:	f7fc f9c1 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <drive_ready+0x48>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2bc8      	cmp	r3, #200	; 0xc8
 8004ca0:	d9eb      	bls.n	8004c7a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <drive_ready+0x4c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cac:	f7fc f9b6 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <drive_ready+0x50>)
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000d98 	.word	0x20000d98
 8004cc0:	20000adc 	.word	0x20000adc
 8004cc4:	20000b9c 	.word	0x20000b9c

08004cc8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <drive_start+0x44>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <drive_start+0x48>)
 8004cd6:	6013      	str	r3, [r2, #0]
	if(H_accel_flag == 0) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <drive_start+0x4c>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <drive_start+0x24>
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <drive_start+0x50>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <drive_start+0x54>)
 8004cea:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <drive_start+0x58>)
 8004cee:	8813      	ldrh	r3, [r2, #0]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <drive_start+0x58>)
 8004cf8:	8813      	ldrh	r3, [r2, #0]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	8013      	strh	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000b2c 	.word	0x20000b2c
 8004d10:	200012e4 	.word	0x200012e4
 8004d14:	20000301 	.word	0x20000301
 8004d18:	200001d8 	.word	0x200001d8
 8004d1c:	20000c40 	.word	0x20000c40
 8004d20:	20000fa8 	.word	0x20000fa8

08004d24 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <drive_stop+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <drive_stop+0x40>)
 8004d32:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <drive_stop+0x44>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <drive_stop+0x48>)
 8004d3e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <drive_stop+0x4c>)
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f36f 0341 	bfc	r3, #1, #1
 8004d48:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <drive_stop+0x4c>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f36f 0382 	bfc	r3, #2, #1
 8004d52:	8013      	strh	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000b2c 	.word	0x20000b2c
 8004d64:	200012e4 	.word	0x200012e4
 8004d68:	200007b8 	.word	0x200007b8
 8004d6c:	20000be8 	.word	0x20000be8
 8004d70:	20000fa8 	.word	0x20000fa8

08004d74 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <control_start+0x24>)
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <control_start+0x24>)
 8004d84:	8813      	ldrh	r3, [r2, #0]
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	8013      	strh	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000fa8 	.word	0x20000fa8

08004d9c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <control_stop+0x24>)
 8004da2:	8813      	ldrh	r3, [r2, #0]
 8004da4:	f36f 03c3 	bfc	r3, #3, #1
 8004da8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <control_stop+0x24>)
 8004dac:	8813      	ldrh	r3, [r2, #0]
 8004dae:	f36f 1304 	bfc	r3, #4, #1
 8004db2:	8013      	strh	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000fa8 	.word	0x20000fa8

08004dc4 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d13e      	bne.n	8004e58 <drive_dir+0x94>
		if(dir == 0){
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004de0:	2201      	movs	r2, #1
 8004de2:	2120      	movs	r1, #32
 8004de4:	483f      	ldr	r0, [pc, #252]	; (8004ee4 <drive_dir+0x120>)
 8004de6:	f7fd fa8d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dea:	2200      	movs	r2, #0
 8004dec:	2110      	movs	r1, #16
 8004dee:	483d      	ldr	r0, [pc, #244]	; (8004ee4 <drive_dir+0x120>)
 8004df0:	f7fd fa88 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	483b      	ldr	r0, [pc, #236]	; (8004ee8 <drive_dir+0x124>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dfe:	e06c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e06:	2200      	movs	r2, #0
 8004e08:	2120      	movs	r1, #32
 8004e0a:	4836      	ldr	r0, [pc, #216]	; (8004ee4 <drive_dir+0x120>)
 8004e0c:	f7fd fa7a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	4833      	ldr	r0, [pc, #204]	; (8004ee4 <drive_dir+0x120>)
 8004e16:	f7fd fa75 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <drive_dir+0x124>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e24:	e059      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d10f      	bne.n	8004e4c <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2120      	movs	r1, #32
 8004e30:	482c      	ldr	r0, [pc, #176]	; (8004ee4 <drive_dir+0x120>)
 8004e32:	f7fd fa67 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e36:	2201      	movs	r2, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <drive_dir+0x120>)
 8004e3c:	f7fd fa62 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e40:	2201      	movs	r2, #1
 8004e42:	2101      	movs	r1, #1
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <drive_dir+0x124>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e4a:	e046      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <drive_dir+0x124>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e56:	e040      	b.n	8004eda <drive_dir+0x116>
		if(dir == 0){
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2102      	movs	r1, #2
 8004e62:	4821      	ldr	r0, [pc, #132]	; (8004ee8 <drive_dir+0x124>)
 8004e64:	f7fd fa4e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e6e:	481e      	ldr	r0, [pc, #120]	; (8004ee8 <drive_dir+0x124>)
 8004e70:	f7fd fa48 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e74:	2201      	movs	r2, #1
 8004e76:	2101      	movs	r1, #1
 8004e78:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <drive_dir+0x124>)
 8004e7a:	f7fd fa43 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e7e:	e02c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d110      	bne.n	8004ea8 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e86:	2200      	movs	r2, #0
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4817      	ldr	r0, [pc, #92]	; (8004ee8 <drive_dir+0x124>)
 8004e8c:	f7fd fa3a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e90:	2201      	movs	r2, #1
 8004e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <drive_dir+0x124>)
 8004e98:	f7fd fa34 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4811      	ldr	r0, [pc, #68]	; (8004ee8 <drive_dir+0x124>)
 8004ea2:	f7fd fa2f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ea6:	e018      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004ea8:	79bb      	ldrb	r3, [r7, #6]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d110      	bne.n	8004ed0 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <drive_dir+0x124>)
 8004eb4:	f7fd fa26 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <drive_dir+0x124>)
 8004ec0:	f7fd fa20 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <drive_dir+0x124>)
 8004eca:	f7fd fa1b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ece:	e004      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <drive_dir+0x124>)
 8004ed6:	f7fd fa15 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020400 	.word	0x40020400

08004eec <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	4603      	mov	r3, r0
 8004f00:	80bb      	strh	r3, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
 8004f06:	4613      	mov	r3, r2
 8004f08:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004f0a:	88bb      	ldrh	r3, [r7, #4]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <driveA+0xc0>)
 8004f16:	edc3 7a00 	vstr	s15, [r3]
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <driveA+0xc4>)
 8004f1c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004f20:	887b      	ldrh	r3, [r7, #2]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <driveA+0xc8>)
 8004f2c:	edc3 7a00 	vstr	s15, [r3]
 8004f30:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <driveA+0xcc>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <driveA+0xd0>)
 8004f42:	edc3 7a00 	vstr	s15, [r3]
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <driveA+0xd4>)
 8004f48:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 1)target_speed_l = target_speed_r = speed_min_p;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <driveA+0xd8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10a      	bne.n	8004f6a <driveA+0x7e>
 8004f54:	88bb      	ldrh	r3, [r7, #4]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <driveA+0xdc>)
 8004f60:	edc3 7a00 	vstr	s15, [r3]
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <driveA+0xe0>)
 8004f66:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f6a:	f7ff fead 	bl	8004cc8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8004f6e:	bf00      	nop
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <driveA+0xe4>)
 8004f7c:	edd3 7a00 	vldr	s15, [r3]
 8004f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	dcf2      	bgt.n	8004f70 <driveA+0x84>
 8004f8a:	883b      	ldrh	r3, [r7, #0]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <driveA+0xe8>)
 8004f96:	edd3 7a00 	vldr	s15, [r3]
 8004f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	dce5      	bgt.n	8004f70 <driveA+0x84>

//	drive_stop();
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	20000fac 	.word	0x20000fac
 8004fb0:	20000b94 	.word	0x20000b94
 8004fb4:	200001dc 	.word	0x200001dc
 8004fb8:	200007b4 	.word	0x200007b4
 8004fbc:	20000b20 	.word	0x20000b20
 8004fc0:	20000d9c 	.word	0x20000d9c
 8004fc4:	20000301 	.word	0x20000301
 8004fc8:	200001d8 	.word	0x200001d8
 8004fcc:	20000c40 	.word	0x20000c40
 8004fd0:	200012e4 	.word	0x200012e4
 8004fd4:	20000b2c 	.word	0x20000b2c

08004fd8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	80fb      	strh	r3, [r7, #6]
 8004fea:	4603      	mov	r3, r0
 8004fec:	80bb      	strh	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 8004ff6:	4b58      	ldr	r3, [pc, #352]	; (8005158 <driveD+0x180>)
 8004ff8:	ed93 7a00 	vldr	s14, [r3]
 8004ffc:	4b57      	ldr	r3, [pc, #348]	; (800515c <driveD+0x184>)
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005006:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800500a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800500e:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <driveD+0x188>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b50      	ldr	r3, [pc, #320]	; (8005164 <driveD+0x18c>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	4b4d      	ldr	r3, [pc, #308]	; (8005168 <driveD+0x190>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	4b4c      	ldr	r3, [pc, #304]	; (800516c <driveD+0x194>)
 800503a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800503e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504a:	4b49      	ldr	r3, [pc, #292]	; (8005170 <driveD+0x198>)
 800504c:	edc3 7a00 	vstr	s15, [r3]
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <driveD+0x19c>)
 8005052:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b40      	ldr	r3, [pc, #256]	; (8005164 <driveD+0x18c>)
 8005062:	edd3 6a00 	vldr	s13, [r3]
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <driveD+0x18c>)
 8005068:	edd3 7a00 	vldr	s15, [r3]
 800506c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005070:	ed97 6a03 	vldr	s12, [r7, #12]
 8005074:	edd7 7a03 	vldr	s15, [r7, #12]
 8005078:	ee66 7a27 	vmul.f32	s15, s12, s15
 800507c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005080:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <driveD+0x19c>)
 8005082:	edd3 7a00 	vldr	s15, [r3]
 8005086:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800508a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800508e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005096:	ee17 3a90 	vmov	r3, s15
 800509a:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	4a33      	ldr	r2, [pc, #204]	; (8005170 <driveD+0x198>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4a33      	ldr	r2, [pc, #204]	; (8005174 <driveD+0x19c>)
 80050a6:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	4a32      	ldr	r2, [pc, #200]	; (8005178 <driveD+0x1a0>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4a32      	ldr	r2, [pc, #200]	; (800517c <driveD+0x1a4>)
 80050b2:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80050b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd1c      	ble.n	80050f6 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80050bc:	bf00      	nop
 80050be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <driveD+0x1a4>)
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	dcf1      	bgt.n	80050be <driveD+0xe6>
 80050da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <driveD+0x1a0>)
 80050e8:	edd3 7a00 	vldr	s15, [r3]
 80050ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f4:	dce3      	bgt.n	80050be <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80050f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <driveD+0x198>)
 8005104:	edc3 7a00 	vstr	s15, [r3]
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <driveD+0x19c>)
 800510a:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 800510e:	bf00      	nop
 8005110:	883b      	ldrh	r3, [r7, #0]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <driveD+0x1a4>)
 800511c:	edd3 7a00 	vldr	s15, [r3]
 8005120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	dcf2      	bgt.n	8005110 <driveD+0x138>
 800512a:	883b      	ldrh	r3, [r7, #0]
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005134:	4b10      	ldr	r3, [pc, #64]	; (8005178 <driveD+0x1a0>)
 8005136:	edd3 7a00 	vldr	s15, [r3]
 800513a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	dce5      	bgt.n	8005110 <driveD+0x138>

	if(H_accel_flag != 1)drive_stop();											//走行停止
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <driveD+0x1a8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <driveD+0x178>
 800514c:	f7ff fdea 	bl	8004d24 <drive_stop>
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	20000b30 	.word	0x20000b30
 800515c:	200002f4 	.word	0x200002f4
 8005160:	20000fac 	.word	0x20000fac
 8005164:	20000b94 	.word	0x20000b94
 8005168:	200001dc 	.word	0x200001dc
 800516c:	200007b4 	.word	0x200007b4
 8005170:	20000b20 	.word	0x20000b20
 8005174:	20000d9c 	.word	0x20000d9c
 8005178:	20000b2c 	.word	0x20000b2c
 800517c:	200012e4 	.word	0x200012e4
 8005180:	20000301 	.word	0x20000301

08005184 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	4a28      	ldr	r2, [pc, #160]	; (8005234 <driveU+0xb0>)
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	4a28      	ldr	r2, [pc, #160]	; (8005238 <driveU+0xb4>)
 8005198:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	4a27      	ldr	r2, [pc, #156]	; (800523c <driveU+0xb8>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4a27      	ldr	r2, [pc, #156]	; (8005240 <driveU+0xbc>)
 80051a4:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051a6:	e024      	b.n	80051f2 <driveU+0x6e>
		if(MF.FLAG.WEDGE == 1){
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <driveU+0xc0>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11d      	bne.n	80051f2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <driveU+0xc4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b3b      	cmp	r3, #59	; 0x3b
 80051bc:	d903      	bls.n	80051c6 <driveU+0x42>
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <driveU+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b4f      	cmp	r3, #79	; 0x4f
 80051c4:	d815      	bhi.n	80051f2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80051c6:	bf00      	nop
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <driveU+0xbc>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005250 <driveU+0xcc>
 80051d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	d4f5      	bmi.n	80051c8 <driveU+0x44>
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <driveU+0xb8>)
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005250 <driveU+0xcc>
 80051e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d4eb      	bmi.n	80051c8 <driveU+0x44>
			break;
 80051f0:	e019      	b.n	8005226 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <driveU+0xbc>)
 80051fe:	edd3 7a00 	vldr	s15, [r3]
 8005202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	dccd      	bgt.n	80051a8 <driveU+0x24>
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <driveU+0xb8>)
 8005218:	edd3 7a00 	vldr	s15, [r3]
 800521c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	dcc0      	bgt.n	80051a8 <driveU+0x24>
			}
		}
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000b20 	.word	0x20000b20
 8005238:	20000d9c 	.word	0x20000d9c
 800523c:	20000b2c 	.word	0x20000b2c
 8005240:	200012e4 	.word	0x200012e4
 8005244:	20000fa8 	.word	0x20000fa8
 8005248:	20000b3c 	.word	0x20000b3c
 800524c:	20000fa4 	.word	0x20000fa4
 8005250:	428c0000 	.word	0x428c0000

08005254 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <driveC+0x70>)
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <driveC+0x74>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <driveC+0x78>)
 8005266:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005268:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <driveC+0x70>)
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <driveC+0x7c>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <driveC+0x80>)
 8005270:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <driveC+0x84>)
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <driveC+0x88>)
 800527c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800527e:	f7ff fd23 	bl	8004cc8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005282:	bf00      	nop
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800528e:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <driveC+0x8c>)
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	dcf2      	bgt.n	8005284 <driveC+0x30>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <driveC+0x90>)
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	dce5      	bgt.n	8005284 <driveC+0x30>

	drive_stop();											//走行停止
 80052b8:	f7ff fd34 	bl	8004d24 <drive_stop>
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	43160000 	.word	0x43160000
 80052c8:	20000fac 	.word	0x20000fac
 80052cc:	20000b94 	.word	0x20000b94
 80052d0:	200001dc 	.word	0x200001dc
 80052d4:	200007b4 	.word	0x200007b4
 80052d8:	20000b20 	.word	0x20000b20
 80052dc:	20000d9c 	.word	0x20000d9c
 80052e0:	200012e4 	.word	0x200012e4
 80052e4:	20000b2c 	.word	0x20000b2c

080052e8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <driveC2+0x74>)
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <driveC2+0x78>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <driveC2+0x7c>)
 80052fa:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <driveC2+0x74>)
 80052fe:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <driveC2+0x80>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <driveC2+0x84>)
 8005304:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <driveC2+0x88>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <driveC2+0x8c>)
 8005310:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005312:	f7ff fcd9 	bl	8004cc8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005316:	bf00      	nop
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	425b      	negs	r3, r3
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <driveC2+0x90>)
 8005326:	edd3 7a00 	vldr	s15, [r3]
 800532a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	d4f1      	bmi.n	8005318 <driveC2+0x30>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	425b      	negs	r3, r3
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <driveC2+0x94>)
 8005342:	edd3 7a00 	vldr	s15, [r3]
 8005346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	d4e3      	bmi.n	8005318 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005350:	f7ff fce8 	bl	8004d24 <drive_stop>
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	c37a0000 	.word	0xc37a0000
 8005360:	20000fac 	.word	0x20000fac
 8005364:	20000b94 	.word	0x20000b94
 8005368:	200001dc 	.word	0x200001dc
 800536c:	200007b4 	.word	0x200007b4
 8005370:	20000b20 	.word	0x20000b20
 8005374:	20000d9c 	.word	0x20000d9c
 8005378:	200012e4 	.word	0x200012e4
 800537c:	20000b2c 	.word	0x20000b2c

08005380 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005384:	2096      	movs	r0, #150	; 0x96
 8005386:	f7ff ffaf 	bl	80052e8 <driveC2>
  degree_z = target_degree_z;
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <set_position+0x20>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <set_position+0x24>)
 8005390:	6013      	str	r3, [r2, #0]
  start_flag = 0;
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <set_position+0x28>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005398:	f000 f808 	bl	80053ac <start_sectionA>
  //driveC(SETPOS_SET);           //aデフォルト速度で区画中心になる分回転。回転後に停止する
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000c3c 	.word	0x20000c3c
 80053a4:	20000b9c 	.word	0x20000b9c
 80053a8:	200012e8 	.word	0x200012e8

080053ac <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0

	control_start();
 80053b0:	f7ff fce0 	bl	8004d74 <control_start>
	if(start_flag == 0){
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <start_sectionA+0x78>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <start_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80053be:	237d      	movs	r3, #125	; 0x7d
 80053c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053c4:	2132      	movs	r1, #50	; 0x32
 80053c6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053ca:	f7ff fd8f 	bl	8004eec <driveA>
 80053ce:	e01a      	b.n	8005406 <start_sectionA+0x5a>
	}else if(start_flag == 1){
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <start_sectionA+0x78>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <start_sectionA+0x40>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80053da:	235a      	movs	r3, #90	; 0x5a
 80053dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053e0:	2132      	movs	r1, #50	; 0x32
 80053e2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053e6:	f7ff fd81 	bl	8004eec <driveA>
 80053ea:	e00c      	b.n	8005406 <start_sectionA+0x5a>
	}else if(start_flag == 2){
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <start_sectionA+0x78>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d107      	bne.n	8005406 <start_sectionA+0x5a>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 80053f6:	2323      	movs	r3, #35	; 0x23
 80053f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053fc:	2132      	movs	r1, #50	; 0x32
 80053fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005402:	f7ff fd73 	bl	8004eec <driveA>
	}
	start_flag = 1;
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <start_sectionA+0x78>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <start_sectionA+0x7c>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <start_sectionA+0x72>
 800541a:	f00b f9fd 	bl	8010818 <get_wall_info>
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200012e8 	.word	0x200012e8
 8005428:	20000fa8 	.word	0x20000fa8

0800542c <start_sectionA2>:
//start_sectionA2
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA2(void){
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0

	control_start();
 8005430:	f7ff fca0 	bl	8004d74 <control_start>
	if(start_flag == 0){
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <start_sectionA2+0x78>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <start_sectionA2+0x24>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 800543e:	237d      	movs	r3, #125	; 0x7d
 8005440:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005444:	2132      	movs	r1, #50	; 0x32
 8005446:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800544a:	f7ff fd4f 	bl	8004eec <driveA>
 800544e:	e01a      	b.n	8005486 <start_sectionA2+0x5a>
	}else if(start_flag == 1){
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <start_sectionA2+0x78>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d108      	bne.n	800546c <start_sectionA2+0x40>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 800545a:	235a      	movs	r3, #90	; 0x5a
 800545c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005460:	2132      	movs	r1, #50	; 0x32
 8005462:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005466:	f7ff fd41 	bl	8004eec <driveA>
 800546a:	e00c      	b.n	8005486 <start_sectionA2+0x5a>
	}else if(start_flag == 2){
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <start_sectionA2+0x78>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <start_sectionA2+0x5a>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005476:	2323      	movs	r3, #35	; 0x23
 8005478:	f44f 7248 	mov.w	r2, #800	; 0x320
 800547c:	2132      	movs	r1, #50	; 0x32
 800547e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005482:	f7ff fd33 	bl	8004eec <driveA>
	}
	start_flag = 1;
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <start_sectionA2+0x78>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <start_sectionA2+0x7c>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <start_sectionA2+0x72>
 800549a:	f00b f9bd 	bl	8010818 <get_wall_info>
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	200012e8 	.word	0x200012e8
 80054a8:	20000fa8 	.word	0x20000fa8

080054ac <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0

	control_start();
 80054b0:	f7ff fc60 	bl	8004d74 <control_start>
	driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 80054b4:	235a      	movs	r3, #90	; 0x5a
 80054b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80054ba:	2132      	movs	r1, #50	; 0x32
 80054bc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80054c0:	f7ff fd14 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <half_sectionA+0x30>)
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <half_sectionA+0x2a>
 80054d2:	f00b f9a1 	bl	8010818 <get_wall_info>
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000fa8 	.word	0x20000fa8

080054e0 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0

	control_start();
 80054e4:	f7ff fc46 	bl	8004d74 <control_start>
	driveD(-4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 80054e8:	235a      	movs	r3, #90	; 0x5a
 80054ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80054ee:	2132      	movs	r1, #50	; 0x32
 80054f0:	4802      	ldr	r0, [pc, #8]	; (80054fc <half_sectionD+0x1c>)
 80054f2:	f7ff fd71 	bl	8004fd8 <driveD>
}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	fffff060 	.word	0xfffff060

08005500 <half_sectionA2>:
//half_sectionA2
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA2(void){
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
	control_start();
 8005504:	f7ff fc36 	bl	8004d74 <control_start>
	driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005508:	235a      	movs	r3, #90	; 0x5a
 800550a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800550e:	2132      	movs	r1, #50	; 0x32
 8005510:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005514:	f7ff fcea 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <half_sectionA2+0x30>)
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <half_sectionA2+0x2a>
 8005526:	f00b f977 	bl	8010818 <get_wall_info>
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000fa8 	.word	0x20000fa8

08005534 <half_sectionD2>:
//half_sectionD2
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD2(void){
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	control_start();
 8005538:	f7ff fc1c 	bl	8004d74 <control_start>
	driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 800553c:	235a      	movs	r3, #90	; 0x5a
 800553e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005542:	2132      	movs	r1, #50	; 0x32
 8005544:	4802      	ldr	r0, [pc, #8]	; (8005550 <half_sectionD2+0x1c>)
 8005546:	f7ff fd47 	bl	8004fd8 <driveD>
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	ffffe0c0 	.word	0xffffe0c0

08005554 <half_sectionA3>:
//half_sectionA3
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA3(void){
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
	control_start();
 8005558:	f7ff fc0c 	bl	8004d74 <control_start>
	driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分加速しながら走行。走行後は停止しない
 800555c:	235a      	movs	r3, #90	; 0x5a
 800555e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005562:	2132      	movs	r1, #50	; 0x32
 8005564:	f242 7010 	movw	r0, #10000	; 0x2710
 8005568:	f7ff fcc0 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <half_sectionA3+0x30>)
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <half_sectionA3+0x2a>
 800557a:	f00b f94d 	bl	8010818 <get_wall_info>
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000fa8 	.word	0x20000fa8

08005588 <half_sectionD3>:
//half_sectionD3
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD3(void){
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	control_start();
 800558c:	f7ff fbf2 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005590:	235a      	movs	r3, #90	; 0x5a
 8005592:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005596:	2132      	movs	r1, #50	; 0x32
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <half_sectionD3+0x1c>)
 800559a:	f7ff fd1d 	bl	8004fd8 <driveD>
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	ffffd8f0 	.word	0xffffd8f0

080055a8 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	full_led_write(7);
 80055ac:	2007      	movs	r0, #7
 80055ae:	f00b f9a7 	bl	8010900 <full_led_write>
	control_start();
 80055b2:	f7ff fbdf 	bl	8004d74 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 80055b6:	205a      	movs	r0, #90	; 0x5a
 80055b8:	f7ff fde4 	bl	8005184 <driveU>
}
 80055bc:	bf00      	nop
 80055be:	bd80      	pop	{r7, pc}

080055c0 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	full_led_write(7);
 80055c4:	2007      	movs	r0, #7
 80055c6:	f00b f99b 	bl	8010900 <full_led_write>
	control_start();
 80055ca:	f7ff fbd3 	bl	8004d74 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 80055ce:	207f      	movs	r0, #127	; 0x7f
 80055d0:	f7ff fdd8 	bl	8005184 <driveU>
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 80055dc:	f7ff ff66 	bl	80054ac <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 80055e0:	f7ff ff7e 	bl	80054e0 <half_sectionD>
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	full_led_write(4);
 80055ec:	2004      	movs	r0, #4
 80055ee:	f00b f987 	bl	8010900 <full_led_write>
	control_start();
 80055f2:	f7ff fbbf 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <one_sectionA+0x40>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	b298      	uxth	r0, r3
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <one_sectionA+0x44>)
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b21b      	sxth	r3, r3
 8005604:	b29a      	uxth	r2, r3
 8005606:	23b5      	movs	r3, #181	; 0xb5
 8005608:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800560c:	f7ff fc6e 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <one_sectionA+0x48>)
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <one_sectionA+0x3a>
 800561e:	f00b f8fb 	bl	8010818 <get_wall_info>
}
 8005622:	bf00      	nop
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000048c 	.word	0x2000048c
 800562c:	20000fbc 	.word	0x20000fbc
 8005630:	20000fa8 	.word	0x20000fa8

08005634 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
	full_led_write(3);
 8005638:	2003      	movs	r0, #3
 800563a:	f00b f961 	bl	8010900 <full_led_write>
	control_start();
 800563e:	f7ff fb99 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <one_sectionD+0x44>)
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b21b      	sxth	r3, r3
 8005648:	b29b      	uxth	r3, r3
 800564a:	425b      	negs	r3, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	b218      	sxth	r0, r3
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <one_sectionD+0x48>)
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b21b      	sxth	r3, r3
 8005656:	b29a      	uxth	r2, r3
 8005658:	23b5      	movs	r3, #181	; 0xb5
 800565a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800565e:	f7ff fcbb 	bl	8004fd8 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <one_sectionD+0x4c>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <one_sectionD+0x40>
 8005670:	f00b f8d2 	bl	8010818 <get_wall_info>
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2000048c 	.word	0x2000048c
 800567c:	20000fbc 	.word	0x20000fbc
 8005680:	20000fa8 	.word	0x20000fa8

08005684 <one_sectionA2>:
//one_sectionA2
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA2(void){
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
	full_led_write(4);
 8005688:	2004      	movs	r0, #4
 800568a:	f00b f939 	bl	8010900 <full_led_write>
	control_start();
 800568e:	f7ff fb71 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005692:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <one_sectionA2+0x40>)
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b21b      	sxth	r3, r3
 8005698:	b298      	uxth	r0, r3
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <one_sectionA2+0x44>)
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b21b      	sxth	r3, r3
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	23b5      	movs	r3, #181	; 0xb5
 80056a4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80056a8:	f7ff fc20 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <one_sectionA2+0x48>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <one_sectionA2+0x3a>
 80056ba:	f00b f8ad 	bl	8010818 <get_wall_info>
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	2000048c 	.word	0x2000048c
 80056c8:	20000fbc 	.word	0x20000fbc
 80056cc:	20000fa8 	.word	0x20000fa8

080056d0 <one_sectionD2>:
//one_sectionD2
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD2(void){
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
	full_led_write(3);
 80056d4:	2003      	movs	r0, #3
 80056d6:	f00b f913 	bl	8010900 <full_led_write>
	control_start();
 80056da:	f7ff fb4b 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <one_sectionD2+0x44>)
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	425b      	negs	r3, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	b218      	sxth	r0, r3
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <one_sectionD2+0x48>)
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b21b      	sxth	r3, r3
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	23b5      	movs	r3, #181	; 0xb5
 80056f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80056fa:	f7ff fc6d 	bl	8004fd8 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <one_sectionD2+0x4c>)
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <one_sectionD2+0x40>
 800570c:	f00b f884 	bl	8010818 <get_wall_info>
}
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}
 8005714:	2000048c 	.word	0x2000048c
 8005718:	20000fbc 	.word	0x20000fbc
 800571c:	20000fa8 	.word	0x20000fa8

08005720 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
	full_led_write(7);
 8005724:	2007      	movs	r0, #7
 8005726:	f00b f8eb 	bl	8010900 <full_led_write>
	control_start();
 800572a:	f7ff fb23 	bl	8004d74 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 800572e:	20b5      	movs	r0, #181	; 0xb5
 8005730:	f7ff fd28 	bl	8005184 <driveU>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <one_sectionU+0x2c>)
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <one_sectionU+0x26>
 8005742:	f00b f869 	bl	8010818 <get_wall_info>
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000fa8 	.word	0x20000fa8

08005750 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005750:	b598      	push	{r3, r4, r7, lr}
 8005752:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005754:	4b56      	ldr	r3, [pc, #344]	; (80058b0 <rotate_R90+0x160>)
 8005756:	4a57      	ldr	r2, [pc, #348]	; (80058b4 <rotate_R90+0x164>)
 8005758:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 800575a:	4b57      	ldr	r3, [pc, #348]	; (80058b8 <rotate_R90+0x168>)
 800575c:	4a57      	ldr	r2, [pc, #348]	; (80058bc <rotate_R90+0x16c>)
 800575e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005760:	4b57      	ldr	r3, [pc, #348]	; (80058c0 <rotate_R90+0x170>)
 8005762:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <rotate_R90+0x174>)
 8005764:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005766:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <rotate_R90+0x160>)
 8005768:	edd3 7a00 	vldr	s15, [r3]
 800576c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80058c8 <rotate_R90+0x178>
 8005770:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005774:	ee16 0a90 	vmov	r0, s13
 8005778:	f7fa fede 	bl	8000538 <__aeabi_f2d>
 800577c:	a34a      	add	r3, pc, #296	; (adr r3, 80058a8 <rotate_R90+0x158>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa ff31 	bl	80005e8 <__aeabi_dmul>
 8005786:	4603      	mov	r3, r0
 8005788:	460c      	mov	r4, r1
 800578a:	4618      	mov	r0, r3
 800578c:	4621      	mov	r1, r4
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	4b4e      	ldr	r3, [pc, #312]	; (80058cc <rotate_R90+0x17c>)
 8005794:	f7fa ff28 	bl	80005e8 <__aeabi_dmul>
 8005798:	4603      	mov	r3, r0
 800579a:	460c      	mov	r4, r1
 800579c:	4618      	mov	r0, r3
 800579e:	4621      	mov	r1, r4
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057a8:	f7fb f848 	bl	800083c <__aeabi_ddiv>
 80057ac:	4603      	mov	r3, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	4618      	mov	r0, r3
 80057b2:	4621      	mov	r1, r4
 80057b4:	f7fb f9f0 	bl	8000b98 <__aeabi_d2f>
 80057b8:	4602      	mov	r2, r0
 80057ba:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <rotate_R90+0x180>)
 80057bc:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80057be:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <rotate_R90+0x160>)
 80057c0:	edd3 7a00 	vldr	s15, [r3]
 80057c4:	eef1 7a67 	vneg.f32	s15, s15
 80057c8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80058c8 <rotate_R90+0x178>
 80057cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057d0:	ee16 0a90 	vmov	r0, s13
 80057d4:	f7fa feb0 	bl	8000538 <__aeabi_f2d>
 80057d8:	a333      	add	r3, pc, #204	; (adr r3, 80058a8 <rotate_R90+0x158>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa ff03 	bl	80005e8 <__aeabi_dmul>
 80057e2:	4603      	mov	r3, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	4618      	mov	r0, r3
 80057e8:	4621      	mov	r1, r4
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	4b37      	ldr	r3, [pc, #220]	; (80058cc <rotate_R90+0x17c>)
 80057f0:	f7fa fefa 	bl	80005e8 <__aeabi_dmul>
 80057f4:	4603      	mov	r3, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	4618      	mov	r0, r3
 80057fa:	4621      	mov	r1, r4
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005804:	f7fb f81a 	bl	800083c <__aeabi_ddiv>
 8005808:	4603      	mov	r3, r0
 800580a:	460c      	mov	r4, r1
 800580c:	4618      	mov	r0, r3
 800580e:	4621      	mov	r1, r4
 8005810:	f7fb f9c2 	bl	8000b98 <__aeabi_d2f>
 8005814:	4602      	mov	r2, r0
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <rotate_R90+0x184>)
 8005818:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800581a:	f7ff fa55 	bl	8004cc8 <drive_start>
	control_stop();
 800581e:	f7ff fabd 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-80);
 8005822:	bf00      	nop
 8005824:	4b2c      	ldr	r3, [pc, #176]	; (80058d8 <rotate_R90+0x188>)
 8005826:	edd3 7a00 	vldr	s15, [r3]
 800582a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80058dc <rotate_R90+0x18c>
 800582e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005832:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <rotate_R90+0x190>)
 8005834:	edd3 7a00 	vldr	s15, [r3]
 8005838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	d4f0      	bmi.n	8005824 <rotate_R90+0xd4>

	accel_l = -30000;
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <rotate_R90+0x168>)
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <rotate_R90+0x194>)
 8005846:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005848:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <rotate_R90+0x170>)
 800584a:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <rotate_R90+0x198>)
 800584c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800584e:	4b27      	ldr	r3, [pc, #156]	; (80058ec <rotate_R90+0x19c>)
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <rotate_R90+0x1a0>)
 8005852:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005854:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <rotate_R90+0x1a4>)
 8005856:	4a28      	ldr	r2, [pc, #160]	; (80058f8 <rotate_R90+0x1a8>)
 8005858:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800585a:	bf00      	nop
 800585c:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <rotate_R90+0x188>)
 800585e:	edd3 7a00 	vldr	s15, [r3]
 8005862:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80058fc <rotate_R90+0x1ac>
 8005866:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800586a:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <rotate_R90+0x190>)
 800586c:	edd3 7a00 	vldr	s15, [r3]
 8005870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	d4f0      	bmi.n	800585c <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 800587a:	4b21      	ldr	r3, [pc, #132]	; (8005900 <rotate_R90+0x1b0>)
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005888:	2101      	movs	r1, #1
 800588a:	2001      	movs	r0, #1
 800588c:	f009 fa68 	bl	800ed60 <turn_dir>
 8005890:	e003      	b.n	800589a <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005892:	2103      	movs	r1, #3
 8005894:	2002      	movs	r0, #2
 8005896:	f009 fa63 	bl	800ed60 <turn_dir>
	}
	drive_stop();
 800589a:	f7ff fa43 	bl	8004d24 <drive_stop>
}
 800589e:	bf00      	nop
 80058a0:	bd98      	pop	{r3, r4, r7, pc}
 80058a2:	bf00      	nop
 80058a4:	f3af 8000 	nop.w
 80058a8:	54442d18 	.word	0x54442d18
 80058ac:	400921fb 	.word	0x400921fb
 80058b0:	200001e0 	.word	0x200001e0
 80058b4:	44480000 	.word	0x44480000
 80058b8:	20000d9c 	.word	0x20000d9c
 80058bc:	453b8000 	.word	0x453b8000
 80058c0:	20000b20 	.word	0x20000b20
 80058c4:	c53b8000 	.word	0xc53b8000
 80058c8:	43340000 	.word	0x43340000
 80058cc:	40508000 	.word	0x40508000
 80058d0:	200007b4 	.word	0x200007b4
 80058d4:	20000fac 	.word	0x20000fac
 80058d8:	20000c3c 	.word	0x20000c3c
 80058dc:	42a00000 	.word	0x42a00000
 80058e0:	20000b9c 	.word	0x20000b9c
 80058e4:	c6ea6000 	.word	0xc6ea6000
 80058e8:	46ea6000 	.word	0x46ea6000
 80058ec:	20000b94 	.word	0x20000b94
 80058f0:	42c80000 	.word	0x42c80000
 80058f4:	200001dc 	.word	0x200001dc
 80058f8:	c2c80000 	.word	0xc2c80000
 80058fc:	42b40000 	.word	0x42b40000
 8005900:	20000fa8 	.word	0x20000fa8
 8005904:	00000000 	.word	0x00000000

08005908 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8005908:	b598      	push	{r3, r4, r7, lr}
 800590a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800590c:	4b56      	ldr	r3, [pc, #344]	; (8005a68 <rotate_L90+0x160>)
 800590e:	4a57      	ldr	r2, [pc, #348]	; (8005a6c <rotate_L90+0x164>)
 8005910:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8005912:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <rotate_L90+0x168>)
 8005914:	4a57      	ldr	r2, [pc, #348]	; (8005a74 <rotate_L90+0x16c>)
 8005916:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005918:	4b57      	ldr	r3, [pc, #348]	; (8005a78 <rotate_L90+0x170>)
 800591a:	4a58      	ldr	r2, [pc, #352]	; (8005a7c <rotate_L90+0x174>)
 800591c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800591e:	4b52      	ldr	r3, [pc, #328]	; (8005a68 <rotate_L90+0x160>)
 8005920:	edd3 7a00 	vldr	s15, [r3]
 8005924:	eef1 7a67 	vneg.f32	s15, s15
 8005928:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005a80 <rotate_L90+0x178>
 800592c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005930:	ee16 0a90 	vmov	r0, s13
 8005934:	f7fa fe00 	bl	8000538 <__aeabi_f2d>
 8005938:	a349      	add	r3, pc, #292	; (adr r3, 8005a60 <rotate_L90+0x158>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fe53 	bl	80005e8 <__aeabi_dmul>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	4618      	mov	r0, r3
 8005948:	4621      	mov	r1, r4
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <rotate_L90+0x17c>)
 8005950:	f7fa fe4a 	bl	80005e8 <__aeabi_dmul>
 8005954:	4603      	mov	r3, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4618      	mov	r0, r3
 800595a:	4621      	mov	r1, r4
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005964:	f7fa ff6a 	bl	800083c <__aeabi_ddiv>
 8005968:	4603      	mov	r3, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4618      	mov	r0, r3
 800596e:	4621      	mov	r1, r4
 8005970:	f7fb f912 	bl	8000b98 <__aeabi_d2f>
 8005974:	4602      	mov	r2, r0
 8005976:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <rotate_L90+0x180>)
 8005978:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <rotate_L90+0x160>)
 800597c:	edd3 7a00 	vldr	s15, [r3]
 8005980:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005a80 <rotate_L90+0x178>
 8005984:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005988:	ee16 0a90 	vmov	r0, s13
 800598c:	f7fa fdd4 	bl	8000538 <__aeabi_f2d>
 8005990:	a333      	add	r3, pc, #204	; (adr r3, 8005a60 <rotate_L90+0x158>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f7fa fe27 	bl	80005e8 <__aeabi_dmul>
 800599a:	4603      	mov	r3, r0
 800599c:	460c      	mov	r4, r1
 800599e:	4618      	mov	r0, r3
 80059a0:	4621      	mov	r1, r4
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <rotate_L90+0x17c>)
 80059a8:	f7fa fe1e 	bl	80005e8 <__aeabi_dmul>
 80059ac:	4603      	mov	r3, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	4618      	mov	r0, r3
 80059b2:	4621      	mov	r1, r4
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059bc:	f7fa ff3e 	bl	800083c <__aeabi_ddiv>
 80059c0:	4603      	mov	r3, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	4618      	mov	r0, r3
 80059c6:	4621      	mov	r1, r4
 80059c8:	f7fb f8e6 	bl	8000b98 <__aeabi_d2f>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b2f      	ldr	r3, [pc, #188]	; (8005a8c <rotate_L90+0x184>)
 80059d0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80059d2:	f7ff f979 	bl	8004cc8 <drive_start>
	control_stop();
 80059d6:	f7ff f9e1 	bl	8004d9c <control_stop>
	while(degree_z < target_degree_z+80);
 80059da:	bf00      	nop
 80059dc:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <rotate_L90+0x188>)
 80059de:	edd3 7a00 	vldr	s15, [r3]
 80059e2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005a94 <rotate_L90+0x18c>
 80059e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <rotate_L90+0x190>)
 80059ec:	edd3 7a00 	vldr	s15, [r3]
 80059f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	dcf0      	bgt.n	80059dc <rotate_L90+0xd4>

	accel_l = 30000;
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <rotate_L90+0x168>)
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <rotate_L90+0x194>)
 80059fe:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 8005a00:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <rotate_L90+0x170>)
 8005a02:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <rotate_L90+0x198>)
 8005a04:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8005a06:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <rotate_L90+0x19c>)
 8005a08:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <rotate_L90+0x1a0>)
 8005a0a:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8005a0c:	4b27      	ldr	r3, [pc, #156]	; (8005aac <rotate_L90+0x1a4>)
 8005a0e:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <rotate_L90+0x1a8>)
 8005a10:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005a12:	bf00      	nop
 8005a14:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <rotate_L90+0x188>)
 8005a16:	edd3 7a00 	vldr	s15, [r3]
 8005a1a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005ab4 <rotate_L90+0x1ac>
 8005a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <rotate_L90+0x190>)
 8005a24:	edd3 7a00 	vldr	s15, [r3]
 8005a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a30:	dcf0      	bgt.n	8005a14 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 8005a32:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <rotate_L90+0x1b0>)
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8005a40:	2101      	movs	r1, #1
 8005a42:	20ff      	movs	r0, #255	; 0xff
 8005a44:	f009 f98c 	bl	800ed60 <turn_dir>
 8005a48:	e003      	b.n	8005a52 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8005a4a:	2103      	movs	r1, #3
 8005a4c:	20fe      	movs	r0, #254	; 0xfe
 8005a4e:	f009 f987 	bl	800ed60 <turn_dir>
	}
	drive_stop();
 8005a52:	f7ff f967 	bl	8004d24 <drive_stop>
}
 8005a56:	bf00      	nop
 8005a58:	bd98      	pop	{r3, r4, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	f3af 8000 	nop.w
 8005a60:	54442d18 	.word	0x54442d18
 8005a64:	400921fb 	.word	0x400921fb
 8005a68:	200001e0 	.word	0x200001e0
 8005a6c:	44480000 	.word	0x44480000
 8005a70:	20000d9c 	.word	0x20000d9c
 8005a74:	c53b8000 	.word	0xc53b8000
 8005a78:	20000b20 	.word	0x20000b20
 8005a7c:	453b8000 	.word	0x453b8000
 8005a80:	43340000 	.word	0x43340000
 8005a84:	40508000 	.word	0x40508000
 8005a88:	20000b94 	.word	0x20000b94
 8005a8c:	200001dc 	.word	0x200001dc
 8005a90:	20000c3c 	.word	0x20000c3c
 8005a94:	42a00000 	.word	0x42a00000
 8005a98:	20000b9c 	.word	0x20000b9c
 8005a9c:	46ea6000 	.word	0x46ea6000
 8005aa0:	c6ea6000 	.word	0xc6ea6000
 8005aa4:	200007b4 	.word	0x200007b4
 8005aa8:	c2c80000 	.word	0xc2c80000
 8005aac:	20000fac 	.word	0x20000fac
 8005ab0:	42c80000 	.word	0x42c80000
 8005ab4:	42b40000 	.word	0x42b40000
 8005ab8:	20000fa8 	.word	0x20000fa8
 8005abc:	00000000 	.word	0x00000000

08005ac0 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8005ac0:	b598      	push	{r3, r4, r7, lr}
 8005ac2:	af00      	add	r7, sp, #0

	full_led_write(2);
 8005ac4:	2002      	movs	r0, #2
 8005ac6:	f00a ff1b 	bl	8010900 <full_led_write>
	target_omega_z = 800;
 8005aca:	4b55      	ldr	r3, [pc, #340]	; (8005c20 <rotate_180+0x160>)
 8005acc:	4a55      	ldr	r2, [pc, #340]	; (8005c24 <rotate_180+0x164>)
 8005ace:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005ad0:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <rotate_180+0x168>)
 8005ad2:	4a56      	ldr	r2, [pc, #344]	; (8005c2c <rotate_180+0x16c>)
 8005ad4:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005ad6:	4b56      	ldr	r3, [pc, #344]	; (8005c30 <rotate_180+0x170>)
 8005ad8:	4a56      	ldr	r2, [pc, #344]	; (8005c34 <rotate_180+0x174>)
 8005ada:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005adc:	4b50      	ldr	r3, [pc, #320]	; (8005c20 <rotate_180+0x160>)
 8005ade:	edd3 7a00 	vldr	s15, [r3]
 8005ae2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005c38 <rotate_180+0x178>
 8005ae6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005aea:	ee16 0a90 	vmov	r0, s13
 8005aee:	f7fa fd23 	bl	8000538 <__aeabi_f2d>
 8005af2:	a349      	add	r3, pc, #292	; (adr r3, 8005c18 <rotate_180+0x158>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fd76 	bl	80005e8 <__aeabi_dmul>
 8005afc:	4603      	mov	r3, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	4618      	mov	r0, r3
 8005b02:	4621      	mov	r1, r4
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	4b4c      	ldr	r3, [pc, #304]	; (8005c3c <rotate_180+0x17c>)
 8005b0a:	f7fa fd6d 	bl	80005e8 <__aeabi_dmul>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	4618      	mov	r0, r3
 8005b14:	4621      	mov	r1, r4
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b1e:	f7fa fe8d 	bl	800083c <__aeabi_ddiv>
 8005b22:	4603      	mov	r3, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	4618      	mov	r0, r3
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f7fb f835 	bl	8000b98 <__aeabi_d2f>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <rotate_180+0x180>)
 8005b32:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005b34:	4b3a      	ldr	r3, [pc, #232]	; (8005c20 <rotate_180+0x160>)
 8005b36:	edd3 7a00 	vldr	s15, [r3]
 8005b3a:	eef1 7a67 	vneg.f32	s15, s15
 8005b3e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005c38 <rotate_180+0x178>
 8005b42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b46:	ee16 0a90 	vmov	r0, s13
 8005b4a:	f7fa fcf5 	bl	8000538 <__aeabi_f2d>
 8005b4e:	a332      	add	r3, pc, #200	; (adr r3, 8005c18 <rotate_180+0x158>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa fd48 	bl	80005e8 <__aeabi_dmul>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	4b35      	ldr	r3, [pc, #212]	; (8005c3c <rotate_180+0x17c>)
 8005b66:	f7fa fd3f 	bl	80005e8 <__aeabi_dmul>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	4621      	mov	r1, r4
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b7a:	f7fa fe5f 	bl	800083c <__aeabi_ddiv>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	4618      	mov	r0, r3
 8005b84:	4621      	mov	r1, r4
 8005b86:	f7fb f807 	bl	8000b98 <__aeabi_d2f>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <rotate_180+0x184>)
 8005b8e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005b90:	f7ff f89a 	bl	8004cc8 <drive_start>
	control_stop();
 8005b94:	f7ff f902 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-170);
 8005b98:	bf00      	nop
 8005b9a:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <rotate_180+0x188>)
 8005b9c:	edd3 7a00 	vldr	s15, [r3]
 8005ba0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005c4c <rotate_180+0x18c>
 8005ba4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ba8:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <rotate_180+0x190>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb6:	d4f0      	bmi.n	8005b9a <rotate_180+0xda>

	accel_l = -30000;
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <rotate_180+0x168>)
 8005bba:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <rotate_180+0x194>)
 8005bbc:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005bbe:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <rotate_180+0x170>)
 8005bc0:	4a25      	ldr	r2, [pc, #148]	; (8005c58 <rotate_180+0x198>)
 8005bc2:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <rotate_180+0x19c>)
 8005bc6:	4a26      	ldr	r2, [pc, #152]	; (8005c60 <rotate_180+0x1a0>)
 8005bc8:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005bca:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <rotate_180+0x1a4>)
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <rotate_180+0x1a8>)
 8005bce:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8005bd0:	bf00      	nop
 8005bd2:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <rotate_180+0x188>)
 8005bd4:	edd3 7a00 	vldr	s15, [r3]
 8005bd8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005c38 <rotate_180+0x178>
 8005bdc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005be0:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <rotate_180+0x190>)
 8005be2:	edd3 7a00 	vldr	s15, [r3]
 8005be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	d4f0      	bmi.n	8005bd2 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <rotate_180+0x1ac>)
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2002      	movs	r0, #2
 8005c02:	f009 f8ad 	bl	800ed60 <turn_dir>
 8005c06:	e003      	b.n	8005c10 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8005c08:	2103      	movs	r1, #3
 8005c0a:	2004      	movs	r0, #4
 8005c0c:	f009 f8a8 	bl	800ed60 <turn_dir>
	}
	drive_stop();
 8005c10:	f7ff f888 	bl	8004d24 <drive_stop>

}
 8005c14:	bf00      	nop
 8005c16:	bd98      	pop	{r3, r4, r7, pc}
 8005c18:	54442d18 	.word	0x54442d18
 8005c1c:	400921fb 	.word	0x400921fb
 8005c20:	200001e0 	.word	0x200001e0
 8005c24:	44480000 	.word	0x44480000
 8005c28:	20000d9c 	.word	0x20000d9c
 8005c2c:	453b8000 	.word	0x453b8000
 8005c30:	20000b20 	.word	0x20000b20
 8005c34:	c53b8000 	.word	0xc53b8000
 8005c38:	43340000 	.word	0x43340000
 8005c3c:	40508000 	.word	0x40508000
 8005c40:	200007b4 	.word	0x200007b4
 8005c44:	20000fac 	.word	0x20000fac
 8005c48:	20000c3c 	.word	0x20000c3c
 8005c4c:	432a0000 	.word	0x432a0000
 8005c50:	20000b9c 	.word	0x20000b9c
 8005c54:	c6ea6000 	.word	0xc6ea6000
 8005c58:	46ea6000 	.word	0x46ea6000
 8005c5c:	20000b94 	.word	0x20000b94
 8005c60:	42c80000 	.word	0x42c80000
 8005c64:	200001dc 	.word	0x200001dc
 8005c68:	c2c80000 	.word	0xc2c80000
 8005c6c:	20000fa8 	.word	0x20000fa8

08005c70 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	full_led_write(5);
 8005c74:	2005      	movs	r0, #5
 8005c76:	f00a fe43 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005c7a:	4a67      	ldr	r2, [pc, #412]	; (8005e18 <slalom_R90+0x1a8>)
 8005c7c:	8813      	ldrh	r3, [r2, #0]
 8005c7e:	f36f 2308 	bfc	r3, #8, #1
 8005c82:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005c84:	4b65      	ldr	r3, [pc, #404]	; (8005e1c <slalom_R90+0x1ac>)
 8005c86:	4a66      	ldr	r2, [pc, #408]	; (8005e20 <slalom_R90+0x1b0>)
 8005c88:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005c8a:	4b66      	ldr	r3, [pc, #408]	; (8005e24 <slalom_R90+0x1b4>)
 8005c8c:	4a64      	ldr	r2, [pc, #400]	; (8005e20 <slalom_R90+0x1b0>)
 8005c8e:	601a      	str	r2, [r3, #0]
	speed_min_l = SPEED_RUN;
 8005c90:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <slalom_R90+0x1b8>)
 8005c92:	4a66      	ldr	r2, [pc, #408]	; (8005e2c <slalom_R90+0x1bc>)
 8005c94:	601a      	str	r2, [r3, #0]
	speed_min_r = SPEED_RUN;
 8005c96:	4b66      	ldr	r3, [pc, #408]	; (8005e30 <slalom_R90+0x1c0>)
 8005c98:	4a64      	ldr	r2, [pc, #400]	; (8005e2c <slalom_R90+0x1bc>)
 8005c9a:	601a      	str	r2, [r3, #0]

	control_start();
 8005c9c:	f7ff f86a 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	4a63      	ldr	r2, [pc, #396]	; (8005e34 <slalom_R90+0x1c4>)
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	4a63      	ldr	r2, [pc, #396]	; (8005e38 <slalom_R90+0x1c8>)
 8005caa:	6013      	str	r3, [r2, #0]
	while(dist_l < SLALOM_OFFSET && dist_r < SLALOM_OFFSET);
 8005cac:	bf00      	nop
 8005cae:	4b62      	ldr	r3, [pc, #392]	; (8005e38 <slalom_R90+0x1c8>)
 8005cb0:	edd3 7a00 	vldr	s15, [r3]
 8005cb4:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc0:	d509      	bpl.n	8005cd6 <slalom_R90+0x66>
 8005cc2:	4b5c      	ldr	r3, [pc, #368]	; (8005e34 <slalom_R90+0x1c4>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	d4eb      	bmi.n	8005cae <slalom_R90+0x3e>
	drive_stop();
 8005cd6:	f7ff f825 	bl	8004d24 <drive_stop>
	control_stop();
 8005cda:	f7ff f85f 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8005cde:	4a4e      	ldr	r2, [pc, #312]	; (8005e18 <slalom_R90+0x1a8>)
 8005ce0:	8813      	ldrh	r3, [r2, #0]
 8005ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ce6:	8013      	strh	r3, [r2, #0]

/*	target_degaccel_z = SLALOM_DEGACCEL;
	target_omega_z = 0;
	omega_max = SLALOM_OMEGA;
	speed_G = SPEED_RUN;
*/	target_degaccel_z = -SLALOM_DEGACCEL;
 8005ce8:	4b54      	ldr	r3, [pc, #336]	; (8005e3c <slalom_R90+0x1cc>)
 8005cea:	4a55      	ldr	r2, [pc, #340]	; (8005e40 <slalom_R90+0x1d0>)
 8005cec:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <slalom_R90+0x1d4>)
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
	omega_min = -SLALOM_OMEGA;
 8005cf6:	4b54      	ldr	r3, [pc, #336]	; (8005e48 <slalom_R90+0x1d8>)
 8005cf8:	4a54      	ldr	r2, [pc, #336]	; (8005e4c <slalom_R90+0x1dc>)
 8005cfa:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8005cfc:	4b54      	ldr	r3, [pc, #336]	; (8005e50 <slalom_R90+0x1e0>)
 8005cfe:	4a4b      	ldr	r2, [pc, #300]	; (8005e2c <slalom_R90+0x1bc>)
 8005d00:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005d02:	4a45      	ldr	r2, [pc, #276]	; (8005e18 <slalom_R90+0x1a8>)
 8005d04:	8813      	ldrh	r3, [r2, #0]
 8005d06:	f043 0302 	orr.w	r3, r3, #2
 8005d0a:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-38);
 8005d0c:	bf00      	nop
 8005d0e:	4b51      	ldr	r3, [pc, #324]	; (8005e54 <slalom_R90+0x1e4>)
 8005d10:	edd3 7a00 	vldr	s15, [r3]
 8005d14:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005e58 <slalom_R90+0x1e8>
 8005d18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d1c:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <slalom_R90+0x1ec>)
 8005d1e:	edd3 7a00 	vldr	s15, [r3]
 8005d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2a:	d4f0      	bmi.n	8005d0e <slalom_R90+0x9e>

	target_degaccel_z = 0;
 8005d2c:	4b43      	ldr	r3, [pc, #268]	; (8005e3c <slalom_R90+0x1cc>)
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-65);
 8005d34:	bf00      	nop
 8005d36:	4b47      	ldr	r3, [pc, #284]	; (8005e54 <slalom_R90+0x1e4>)
 8005d38:	edd3 7a00 	vldr	s15, [r3]
 8005d3c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005e60 <slalom_R90+0x1f0>
 8005d40:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d44:	4b45      	ldr	r3, [pc, #276]	; (8005e5c <slalom_R90+0x1ec>)
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	d4f0      	bmi.n	8005d36 <slalom_R90+0xc6>

//	target_degaccel_z = -SLALOM_DEGACCEL;
	target_degaccel_z = SLALOM_DEGACCEL;
 8005d54:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <slalom_R90+0x1cc>)
 8005d56:	4a43      	ldr	r2, [pc, #268]	; (8005e64 <slalom_R90+0x1f4>)
 8005d58:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005d5a:	bf00      	nop
 8005d5c:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <slalom_R90+0x1e4>)
 8005d5e:	edd3 7a00 	vldr	s15, [r3]
 8005d62:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005e68 <slalom_R90+0x1f8>
 8005d66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <slalom_R90+0x1ec>)
 8005d6c:	edd3 7a00 	vldr	s15, [r3]
 8005d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d78:	d4f0      	bmi.n	8005d5c <slalom_R90+0xec>
	if(!MF.FLAG.XDIR){
 8005d7a:	4b27      	ldr	r3, [pc, #156]	; (8005e18 <slalom_R90+0x1a8>)
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <slalom_R90+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005d88:	2101      	movs	r1, #1
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	f008 ffe8 	bl	800ed60 <turn_dir>
 8005d90:	e003      	b.n	8005d9a <slalom_R90+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005d92:	2103      	movs	r1, #3
 8005d94:	2002      	movs	r0, #2
 8005d96:	f008 ffe3 	bl	800ed60 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <slalom_R90+0x1a8>)
 8005d9c:	8813      	ldrh	r3, [r2, #0]
 8005d9e:	f36f 334d 	bfc	r3, #13, #1
 8005da2:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <slalom_R90+0x1ac>)
 8005da6:	4a31      	ldr	r2, [pc, #196]	; (8005e6c <slalom_R90+0x1fc>)
 8005da8:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005daa:	4b1e      	ldr	r3, [pc, #120]	; (8005e24 <slalom_R90+0x1b4>)
 8005dac:	4a2f      	ldr	r2, [pc, #188]	; (8005e6c <slalom_R90+0x1fc>)
 8005dae:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005db0:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <slalom_R90+0x200>)
 8005db2:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <slalom_R90+0x1bc>)
 8005db4:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005db6:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <slalom_R90+0x204>)
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <slalom_R90+0x1bc>)
 8005dba:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <slalom_R90+0x1c4>)
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	; (8005e38 <slalom_R90+0x1c8>)
 8005dc6:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005dc8:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <slalom_R90+0x1a8>)
 8005dca:	8813      	ldrh	r3, [r2, #0]
 8005dcc:	f043 0304 	orr.w	r3, r3, #4
 8005dd0:	8013      	strh	r3, [r2, #0]

	control_start();
 8005dd2:	f7fe ffcf 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_OFFSET && dist_r < SLALOM_OFFSET);
 8005dd6:	bf00      	nop
 8005dd8:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <slalom_R90+0x1c8>)
 8005dda:	edd3 7a00 	vldr	s15, [r3]
 8005dde:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dea:	d509      	bpl.n	8005e00 <slalom_R90+0x190>
 8005dec:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <slalom_R90+0x1c4>)
 8005dee:	edd3 7a00 	vldr	s15, [r3]
 8005df2:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfe:	d4eb      	bmi.n	8005dd8 <slalom_R90+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <slalom_R90+0x1a8>)
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <slalom_R90+0x1a2>
 8005e0e:	f00a fd03 	bl	8010818 <get_wall_info>
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000fa8 	.word	0x20000fa8
 8005e1c:	20000d9c 	.word	0x20000d9c
 8005e20:	c61c4000 	.word	0xc61c4000
 8005e24:	20000b20 	.word	0x20000b20
 8005e28:	20000b94 	.word	0x20000b94
 8005e2c:	43c80000 	.word	0x43c80000
 8005e30:	20000fac 	.word	0x20000fac
 8005e34:	20000b2c 	.word	0x20000b2c
 8005e38:	200012e4 	.word	0x200012e4
 8005e3c:	20000b98 	.word	0x20000b98
 8005e40:	c57a0000 	.word	0xc57a0000
 8005e44:	200001e0 	.word	0x200001e0
 8005e48:	200002f0 	.word	0x200002f0
 8005e4c:	c4098000 	.word	0xc4098000
 8005e50:	20000b34 	.word	0x20000b34
 8005e54:	20000c3c 	.word	0x20000c3c
 8005e58:	42180000 	.word	0x42180000
 8005e5c:	20000b9c 	.word	0x20000b9c
 8005e60:	42820000 	.word	0x42820000
 8005e64:	457a0000 	.word	0x457a0000
 8005e68:	42b40000 	.word	0x42b40000
 8005e6c:	461c4000 	.word	0x461c4000
 8005e70:	200007b4 	.word	0x200007b4
 8005e74:	200001dc 	.word	0x200001dc

08005e78 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
	full_led_write(6);
 8005e7c:	2006      	movs	r0, #6
 8005e7e:	f00a fd3f 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005e82:	4a67      	ldr	r2, [pc, #412]	; (8006020 <slalom_L90+0x1a8>)
 8005e84:	8813      	ldrh	r3, [r2, #0]
 8005e86:	f36f 2308 	bfc	r3, #8, #1
 8005e8a:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005e8c:	4b65      	ldr	r3, [pc, #404]	; (8006024 <slalom_L90+0x1ac>)
 8005e8e:	4a66      	ldr	r2, [pc, #408]	; (8006028 <slalom_L90+0x1b0>)
 8005e90:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005e92:	4b66      	ldr	r3, [pc, #408]	; (800602c <slalom_L90+0x1b4>)
 8005e94:	4a64      	ldr	r2, [pc, #400]	; (8006028 <slalom_L90+0x1b0>)
 8005e96:	601a      	str	r2, [r3, #0]
	speed_min_l = SPEED_RUN;
 8005e98:	4b65      	ldr	r3, [pc, #404]	; (8006030 <slalom_L90+0x1b8>)
 8005e9a:	4a66      	ldr	r2, [pc, #408]	; (8006034 <slalom_L90+0x1bc>)
 8005e9c:	601a      	str	r2, [r3, #0]
	speed_min_r = SPEED_RUN;
 8005e9e:	4b66      	ldr	r3, [pc, #408]	; (8006038 <slalom_L90+0x1c0>)
 8005ea0:	4a64      	ldr	r2, [pc, #400]	; (8006034 <slalom_L90+0x1bc>)
 8005ea2:	601a      	str	r2, [r3, #0]

	control_start();
 8005ea4:	f7fe ff66 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	4a63      	ldr	r2, [pc, #396]	; (800603c <slalom_L90+0x1c4>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4a63      	ldr	r2, [pc, #396]	; (8006040 <slalom_L90+0x1c8>)
 8005eb2:	6013      	str	r3, [r2, #0]
	while(dist_l < SLALOM_OFFSET && dist_r < SLALOM_OFFSET);
 8005eb4:	bf00      	nop
 8005eb6:	4b62      	ldr	r3, [pc, #392]	; (8006040 <slalom_L90+0x1c8>)
 8005eb8:	edd3 7a00 	vldr	s15, [r3]
 8005ebc:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec8:	d509      	bpl.n	8005ede <slalom_L90+0x66>
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <slalom_L90+0x1c4>)
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	d4eb      	bmi.n	8005eb6 <slalom_L90+0x3e>
	drive_stop();
 8005ede:	f7fe ff21 	bl	8004d24 <drive_stop>
	control_stop();
 8005ee2:	f7fe ff5b 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8005ee6:	4a4e      	ldr	r2, [pc, #312]	; (8006020 <slalom_L90+0x1a8>)
 8005ee8:	8813      	ldrh	r3, [r2, #0]
 8005eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005eee:	8013      	strh	r3, [r2, #0]

/*	target_degaccel_z = -SLALOM_DEGACCEL;
	target_omega_z = 0;
	omega_min = -SLALOM_OMEGA;
	speed_G = SPEED_RUN;
*/	target_degaccel_z = SLALOM_DEGACCEL;
 8005ef0:	4b54      	ldr	r3, [pc, #336]	; (8006044 <slalom_L90+0x1cc>)
 8005ef2:	4a55      	ldr	r2, [pc, #340]	; (8006048 <slalom_L90+0x1d0>)
 8005ef4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005ef6:	4b55      	ldr	r3, [pc, #340]	; (800604c <slalom_L90+0x1d4>)
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
	omega_max = SLALOM_OMEGA;
 8005efe:	4b54      	ldr	r3, [pc, #336]	; (8006050 <slalom_L90+0x1d8>)
 8005f00:	4a54      	ldr	r2, [pc, #336]	; (8006054 <slalom_L90+0x1dc>)
 8005f02:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8005f04:	4b54      	ldr	r3, [pc, #336]	; (8006058 <slalom_L90+0x1e0>)
 8005f06:	4a4b      	ldr	r2, [pc, #300]	; (8006034 <slalom_L90+0x1bc>)
 8005f08:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005f0a:	4a45      	ldr	r2, [pc, #276]	; (8006020 <slalom_L90+0x1a8>)
 8005f0c:	8813      	ldrh	r3, [r2, #0]
 8005f0e:	f043 0302 	orr.w	r3, r3, #2
 8005f12:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+38);
 8005f14:	bf00      	nop
 8005f16:	4b51      	ldr	r3, [pc, #324]	; (800605c <slalom_L90+0x1e4>)
 8005f18:	edd3 7a00 	vldr	s15, [r3]
 8005f1c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006060 <slalom_L90+0x1e8>
 8005f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f24:	4b4f      	ldr	r3, [pc, #316]	; (8006064 <slalom_L90+0x1ec>)
 8005f26:	edd3 7a00 	vldr	s15, [r3]
 8005f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	dcf0      	bgt.n	8005f16 <slalom_L90+0x9e>

	target_degaccel_z = 0;
 8005f34:	4b43      	ldr	r3, [pc, #268]	; (8006044 <slalom_L90+0x1cc>)
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+65);
//	while(degree_z < target_degree_z+60);
	while(degree_z < target_degree_z+55);
 8005f3c:	bf00      	nop
 8005f3e:	4b47      	ldr	r3, [pc, #284]	; (800605c <slalom_L90+0x1e4>)
 8005f40:	edd3 7a00 	vldr	s15, [r3]
 8005f44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006068 <slalom_L90+0x1f0>
 8005f48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4c:	4b45      	ldr	r3, [pc, #276]	; (8006064 <slalom_L90+0x1ec>)
 8005f4e:	edd3 7a00 	vldr	s15, [r3]
 8005f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5a:	dcf0      	bgt.n	8005f3e <slalom_L90+0xc6>

//	target_degaccel_z = SLALOM_DEGACCEL;
	target_degaccel_z = -SLALOM_DEGACCEL;
 8005f5c:	4b39      	ldr	r3, [pc, #228]	; (8006044 <slalom_L90+0x1cc>)
 8005f5e:	4a43      	ldr	r2, [pc, #268]	; (800606c <slalom_L90+0x1f4>)
 8005f60:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005f62:	bf00      	nop
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <slalom_L90+0x1e4>)
 8005f66:	edd3 7a00 	vldr	s15, [r3]
 8005f6a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006070 <slalom_L90+0x1f8>
 8005f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f72:	4b3c      	ldr	r3, [pc, #240]	; (8006064 <slalom_L90+0x1ec>)
 8005f74:	edd3 7a00 	vldr	s15, [r3]
 8005f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f80:	dcf0      	bgt.n	8005f64 <slalom_L90+0xec>
	if(!MF.FLAG.XDIR){
 8005f82:	4b27      	ldr	r3, [pc, #156]	; (8006020 <slalom_L90+0x1a8>)
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <slalom_L90+0x122>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8005f90:	2101      	movs	r1, #1
 8005f92:	20ff      	movs	r0, #255	; 0xff
 8005f94:	f008 fee4 	bl	800ed60 <turn_dir>
 8005f98:	e003      	b.n	8005fa2 <slalom_L90+0x12a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8005f9a:	2103      	movs	r1, #3
 8005f9c:	20fe      	movs	r0, #254	; 0xfe
 8005f9e:	f008 fedf 	bl	800ed60 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <slalom_L90+0x1a8>)
 8005fa4:	8813      	ldrh	r3, [r2, #0]
 8005fa6:	f36f 334d 	bfc	r3, #13, #1
 8005faa:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005fac:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <slalom_L90+0x1ac>)
 8005fae:	4a31      	ldr	r2, [pc, #196]	; (8006074 <slalom_L90+0x1fc>)
 8005fb0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	; (800602c <slalom_L90+0x1b4>)
 8005fb4:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <slalom_L90+0x1fc>)
 8005fb6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005fb8:	4b2f      	ldr	r3, [pc, #188]	; (8006078 <slalom_L90+0x200>)
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <slalom_L90+0x1bc>)
 8005fbc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005fbe:	4b2f      	ldr	r3, [pc, #188]	; (800607c <slalom_L90+0x204>)
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <slalom_L90+0x1bc>)
 8005fc2:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <slalom_L90+0x1c4>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <slalom_L90+0x1c8>)
 8005fce:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <slalom_L90+0x1a8>)
 8005fd2:	8813      	ldrh	r3, [r2, #0]
 8005fd4:	f043 0304 	orr.w	r3, r3, #4
 8005fd8:	8013      	strh	r3, [r2, #0]
	control_start();
 8005fda:	f7fe fecb 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_OFFSET && dist_r < SLALOM_OFFSET);
 8005fde:	bf00      	nop
 8005fe0:	4b17      	ldr	r3, [pc, #92]	; (8006040 <slalom_L90+0x1c8>)
 8005fe2:	edd3 7a00 	vldr	s15, [r3]
 8005fe6:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff2:	d509      	bpl.n	8006008 <slalom_L90+0x190>
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <slalom_L90+0x1c4>)
 8005ff6:	edd3 7a00 	vldr	s15, [r3]
 8005ffa:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006006:	d4eb      	bmi.n	8005fe0 <slalom_L90+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <slalom_L90+0x1a8>)
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <slalom_L90+0x1a2>
 8006016:	f00a fbff 	bl	8010818 <get_wall_info>
}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000fa8 	.word	0x20000fa8
 8006024:	20000d9c 	.word	0x20000d9c
 8006028:	c61c4000 	.word	0xc61c4000
 800602c:	20000b20 	.word	0x20000b20
 8006030:	20000b94 	.word	0x20000b94
 8006034:	43c80000 	.word	0x43c80000
 8006038:	20000fac 	.word	0x20000fac
 800603c:	20000b2c 	.word	0x20000b2c
 8006040:	200012e4 	.word	0x200012e4
 8006044:	20000b98 	.word	0x20000b98
 8006048:	457a0000 	.word	0x457a0000
 800604c:	200001e0 	.word	0x200001e0
 8006050:	20000b24 	.word	0x20000b24
 8006054:	44098000 	.word	0x44098000
 8006058:	20000b34 	.word	0x20000b34
 800605c:	20000c3c 	.word	0x20000c3c
 8006060:	42180000 	.word	0x42180000
 8006064:	20000b9c 	.word	0x20000b9c
 8006068:	425c0000 	.word	0x425c0000
 800606c:	c57a0000 	.word	0xc57a0000
 8006070:	42b40000 	.word	0x42b40000
 8006074:	461c4000 	.word	0x461c4000
 8006078:	200007b4 	.word	0x200007b4
 800607c:	200001dc 	.word	0x200001dc

08006080 <slalom_R902>:
//slalom_R902
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R902(void){
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	full_led_write(5);
 8006084:	2005      	movs	r0, #5
 8006086:	f00a fc3b 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 800608a:	4a65      	ldr	r2, [pc, #404]	; (8006220 <slalom_R902+0x1a0>)
 800608c:	8813      	ldrh	r3, [r2, #0]
 800608e:	f36f 2308 	bfc	r3, #8, #1
 8006092:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006094:	4b63      	ldr	r3, [pc, #396]	; (8006224 <slalom_R902+0x1a4>)
 8006096:	4a64      	ldr	r2, [pc, #400]	; (8006228 <slalom_R902+0x1a8>)
 8006098:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800609a:	4b64      	ldr	r3, [pc, #400]	; (800622c <slalom_R902+0x1ac>)
 800609c:	4a62      	ldr	r2, [pc, #392]	; (8006228 <slalom_R902+0x1a8>)
 800609e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80060a0:	4b63      	ldr	r3, [pc, #396]	; (8006230 <slalom_R902+0x1b0>)
 80060a2:	4a64      	ldr	r2, [pc, #400]	; (8006234 <slalom_R902+0x1b4>)
 80060a4:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80060a6:	4b64      	ldr	r3, [pc, #400]	; (8006238 <slalom_R902+0x1b8>)
 80060a8:	4a62      	ldr	r2, [pc, #392]	; (8006234 <slalom_R902+0x1b4>)
 80060aa:	601a      	str	r2, [r3, #0]

	control_start();
 80060ac:	f7fe fe62 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	4a61      	ldr	r2, [pc, #388]	; (800623c <slalom_R902+0x1bc>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	4a61      	ldr	r2, [pc, #388]	; (8006240 <slalom_R902+0x1c0>)
 80060ba:	6013      	str	r3, [r2, #0]
	while(dist_l < SLALOM_H_OFFSET-34 && dist_r < SLALOM_H_OFFSET-34);
 80060bc:	bf00      	nop
 80060be:	4b60      	ldr	r3, [pc, #384]	; (8006240 <slalom_R902+0x1c0>)
 80060c0:	edd3 7a00 	vldr	s15, [r3]
 80060c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	d507      	bpl.n	80060de <slalom_R902+0x5e>
 80060ce:	4b5b      	ldr	r3, [pc, #364]	; (800623c <slalom_R902+0x1bc>)
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060dc:	d4ef      	bmi.n	80060be <slalom_R902+0x3e>
	drive_stop();
 80060de:	f7fe fe21 	bl	8004d24 <drive_stop>
	control_stop();
 80060e2:	f7fe fe5b 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80060e6:	4a4e      	ldr	r2, [pc, #312]	; (8006220 <slalom_R902+0x1a0>)
 80060e8:	8813      	ldrh	r3, [r2, #0]
 80060ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ee:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = SLALOM_H_DEGACCEL;
 80060f0:	4b54      	ldr	r3, [pc, #336]	; (8006244 <slalom_R902+0x1c4>)
 80060f2:	4a55      	ldr	r2, [pc, #340]	; (8006248 <slalom_R902+0x1c8>)
 80060f4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80060f6:	4b55      	ldr	r3, [pc, #340]	; (800624c <slalom_R902+0x1cc>)
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
	omega_max = SLALOM_H_OMEGA;
 80060fe:	4b54      	ldr	r3, [pc, #336]	; (8006250 <slalom_R902+0x1d0>)
 8006100:	4a4c      	ldr	r2, [pc, #304]	; (8006234 <slalom_R902+0x1b4>)
 8006102:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8006104:	4b53      	ldr	r3, [pc, #332]	; (8006254 <slalom_R902+0x1d4>)
 8006106:	4a4b      	ldr	r2, [pc, #300]	; (8006234 <slalom_R902+0x1b4>)
 8006108:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800610a:	4a45      	ldr	r2, [pc, #276]	; (8006220 <slalom_R902+0x1a0>)
 800610c:	8813      	ldrh	r3, [r2, #0]
 800610e:	f043 0302 	orr.w	r3, r3, #2
 8006112:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-32);
 8006114:	bf00      	nop
 8006116:	4b50      	ldr	r3, [pc, #320]	; (8006258 <slalom_R902+0x1d8>)
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800625c <slalom_R902+0x1dc>
 8006120:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006124:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <slalom_R902+0x1e0>)
 8006126:	edd3 7a00 	vldr	s15, [r3]
 800612a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006132:	d4f0      	bmi.n	8006116 <slalom_R902+0x96>

	target_degaccel_z = 0;
 8006134:	4b43      	ldr	r3, [pc, #268]	; (8006244 <slalom_R902+0x1c4>)
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-66);
 800613c:	bf00      	nop
 800613e:	4b46      	ldr	r3, [pc, #280]	; (8006258 <slalom_R902+0x1d8>)
 8006140:	edd3 7a00 	vldr	s15, [r3]
 8006144:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006264 <slalom_R902+0x1e4>
 8006148:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800614c:	4b44      	ldr	r3, [pc, #272]	; (8006260 <slalom_R902+0x1e0>)
 800614e:	edd3 7a00 	vldr	s15, [r3]
 8006152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615a:	d4f0      	bmi.n	800613e <slalom_R902+0xbe>

	target_degaccel_z = -SLALOM_H_DEGACCEL;
 800615c:	4b39      	ldr	r3, [pc, #228]	; (8006244 <slalom_R902+0x1c4>)
 800615e:	4a42      	ldr	r2, [pc, #264]	; (8006268 <slalom_R902+0x1e8>)
 8006160:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-80);
 8006162:	bf00      	nop
 8006164:	4b3c      	ldr	r3, [pc, #240]	; (8006258 <slalom_R902+0x1d8>)
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800626c <slalom_R902+0x1ec>
 800616e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006172:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <slalom_R902+0x1e0>)
 8006174:	edd3 7a00 	vldr	s15, [r3]
 8006178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800617c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006180:	d4f0      	bmi.n	8006164 <slalom_R902+0xe4>
	if(!MF.FLAG.XDIR){
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <slalom_R902+0x1a0>)
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <slalom_R902+0x11a>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006190:	2101      	movs	r1, #1
 8006192:	2001      	movs	r0, #1
 8006194:	f008 fde4 	bl	800ed60 <turn_dir>
 8006198:	e003      	b.n	80061a2 <slalom_R902+0x122>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800619a:	2103      	movs	r1, #3
 800619c:	2002      	movs	r0, #2
 800619e:	f008 fddf 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80061a2:	4a1f      	ldr	r2, [pc, #124]	; (8006220 <slalom_R902+0x1a0>)
 80061a4:	8813      	ldrh	r3, [r2, #0]
 80061a6:	f36f 2308 	bfc	r3, #8, #1
 80061aa:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80061ac:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <slalom_R902+0x1a4>)
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <slalom_R902+0x1a8>)
 80061b0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <slalom_R902+0x1ac>)
 80061b4:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <slalom_R902+0x1a8>)
 80061b6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <slalom_R902+0x1b0>)
 80061ba:	4a1e      	ldr	r2, [pc, #120]	; (8006234 <slalom_R902+0x1b4>)
 80061bc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80061be:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <slalom_R902+0x1b8>)
 80061c0:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <slalom_R902+0x1b4>)
 80061c2:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	4a1c      	ldr	r2, [pc, #112]	; (800623c <slalom_R902+0x1bc>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	4a1c      	ldr	r2, [pc, #112]	; (8006240 <slalom_R902+0x1c0>)
 80061ce:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <slalom_R902+0x1a0>)
 80061d2:	8813      	ldrh	r3, [r2, #0]
 80061d4:	f043 0304 	orr.w	r3, r3, #4
 80061d8:	8013      	strh	r3, [r2, #0]
	control_start();
 80061da:	f7fe fdcb 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_H_OFFSET && dist_r < SLALOM_H_OFFSET);
 80061de:	bf00      	nop
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <slalom_R902+0x1c0>)
 80061e2:	edd3 7a00 	vldr	s15, [r3]
 80061e6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006270 <slalom_R902+0x1f0>
 80061ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f2:	d509      	bpl.n	8006208 <slalom_R902+0x188>
 80061f4:	4b11      	ldr	r3, [pc, #68]	; (800623c <slalom_R902+0x1bc>)
 80061f6:	edd3 7a00 	vldr	s15, [r3]
 80061fa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006270 <slalom_R902+0x1f0>
 80061fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	d4eb      	bmi.n	80061e0 <slalom_R902+0x160>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <slalom_R902+0x1a0>)
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <slalom_R902+0x19a>
 8006216:	f00a faff 	bl	8010818 <get_wall_info>
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000fa8 	.word	0x20000fa8
 8006224:	20000d9c 	.word	0x20000d9c
 8006228:	461c4000 	.word	0x461c4000
 800622c:	20000b20 	.word	0x20000b20
 8006230:	200007b4 	.word	0x200007b4
 8006234:	44480000 	.word	0x44480000
 8006238:	200001dc 	.word	0x200001dc
 800623c:	20000b2c 	.word	0x20000b2c
 8006240:	200012e4 	.word	0x200012e4
 8006244:	20000b98 	.word	0x20000b98
 8006248:	469c4000 	.word	0x469c4000
 800624c:	200001e0 	.word	0x200001e0
 8006250:	20000b24 	.word	0x20000b24
 8006254:	20000b34 	.word	0x20000b34
 8006258:	20000c3c 	.word	0x20000c3c
 800625c:	42000000 	.word	0x42000000
 8006260:	20000b9c 	.word	0x20000b9c
 8006264:	42840000 	.word	0x42840000
 8006268:	c69c4000 	.word	0xc69c4000
 800626c:	42a00000 	.word	0x42a00000
 8006270:	42080000 	.word	0x42080000
 8006274:	00000000 	.word	0x00000000

08006278 <slalom_L902>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L902(void){
 8006278:	b5b0      	push	{r4, r5, r7, lr}
 800627a:	af00      	add	r7, sp, #0
	full_led_write(6);
 800627c:	2006      	movs	r0, #6
 800627e:	f00a fb3f 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006282:	4a6d      	ldr	r2, [pc, #436]	; (8006438 <slalom_L902+0x1c0>)
 8006284:	8813      	ldrh	r3, [r2, #0]
 8006286:	f36f 2308 	bfc	r3, #8, #1
 800628a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800628c:	4b6b      	ldr	r3, [pc, #428]	; (800643c <slalom_L902+0x1c4>)
 800628e:	4a6c      	ldr	r2, [pc, #432]	; (8006440 <slalom_L902+0x1c8>)
 8006290:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006292:	4b6c      	ldr	r3, [pc, #432]	; (8006444 <slalom_L902+0x1cc>)
 8006294:	4a6a      	ldr	r2, [pc, #424]	; (8006440 <slalom_L902+0x1c8>)
 8006296:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006298:	4b6b      	ldr	r3, [pc, #428]	; (8006448 <slalom_L902+0x1d0>)
 800629a:	4a6c      	ldr	r2, [pc, #432]	; (800644c <slalom_L902+0x1d4>)
 800629c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800629e:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <slalom_L902+0x1d8>)
 80062a0:	4a6a      	ldr	r2, [pc, #424]	; (800644c <slalom_L902+0x1d4>)
 80062a2:	601a      	str	r2, [r3, #0]

	control_start();
 80062a4:	f7fe fd66 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	4a69      	ldr	r2, [pc, #420]	; (8006454 <slalom_L902+0x1dc>)
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	4a69      	ldr	r2, [pc, #420]	; (8006458 <slalom_L902+0x1e0>)
 80062b2:	6013      	str	r3, [r2, #0]
	while(dist_l < SLALOM_H_OFFSET-34 && dist_r < SLALOM_H_OFFSET-34);
 80062b4:	bf00      	nop
 80062b6:	4b68      	ldr	r3, [pc, #416]	; (8006458 <slalom_L902+0x1e0>)
 80062b8:	edd3 7a00 	vldr	s15, [r3]
 80062bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c4:	d507      	bpl.n	80062d6 <slalom_L902+0x5e>
 80062c6:	4b63      	ldr	r3, [pc, #396]	; (8006454 <slalom_L902+0x1dc>)
 80062c8:	edd3 7a00 	vldr	s15, [r3]
 80062cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d4:	d4ef      	bmi.n	80062b6 <slalom_L902+0x3e>
	drive_stop();
 80062d6:	f7fe fd25 	bl	8004d24 <drive_stop>
	control_stop();
 80062da:	f7fe fd5f 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80062de:	4a56      	ldr	r2, [pc, #344]	; (8006438 <slalom_L902+0x1c0>)
 80062e0:	8813      	ldrh	r3, [r2, #0]
 80062e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -SLALOM_H_DEGACCEL;
 80062e8:	4b5c      	ldr	r3, [pc, #368]	; (800645c <slalom_L902+0x1e4>)
 80062ea:	4a5d      	ldr	r2, [pc, #372]	; (8006460 <slalom_L902+0x1e8>)
 80062ec:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80062ee:	4b5d      	ldr	r3, [pc, #372]	; (8006464 <slalom_L902+0x1ec>)
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
	omega_min = -SLALOM_H_OMEGA;
 80062f6:	4b5c      	ldr	r3, [pc, #368]	; (8006468 <slalom_L902+0x1f0>)
 80062f8:	4a5c      	ldr	r2, [pc, #368]	; (800646c <slalom_L902+0x1f4>)
 80062fa:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 80062fc:	4b5c      	ldr	r3, [pc, #368]	; (8006470 <slalom_L902+0x1f8>)
 80062fe:	4a53      	ldr	r2, [pc, #332]	; (800644c <slalom_L902+0x1d4>)
 8006300:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006302:	4a4d      	ldr	r2, [pc, #308]	; (8006438 <slalom_L902+0x1c0>)
 8006304:	8813      	ldrh	r3, [r2, #0]
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+32);
 800630c:	bf00      	nop
 800630e:	4b59      	ldr	r3, [pc, #356]	; (8006474 <slalom_L902+0x1fc>)
 8006310:	edd3 7a00 	vldr	s15, [r3]
 8006314:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006478 <slalom_L902+0x200>
 8006318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631c:	4b57      	ldr	r3, [pc, #348]	; (800647c <slalom_L902+0x204>)
 800631e:	edd3 7a00 	vldr	s15, [r3]
 8006322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632a:	dcf0      	bgt.n	800630e <slalom_L902+0x96>

	target_degaccel_z = 0;
 800632c:	4b4b      	ldr	r3, [pc, #300]	; (800645c <slalom_L902+0x1e4>)
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+66.3);
 8006334:	bf00      	nop
 8006336:	4b51      	ldr	r3, [pc, #324]	; (800647c <slalom_L902+0x204>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa f8fc 	bl	8000538 <__aeabi_f2d>
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <slalom_L902+0x1fc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f7fa f8f5 	bl	8000538 <__aeabi_f2d>
 800634e:	a338      	add	r3, pc, #224	; (adr r3, 8006430 <slalom_L902+0x1b8>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7f9 ff92 	bl	800027c <__adddf3>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4620      	mov	r0, r4
 800635e:	4629      	mov	r1, r5
 8006360:	f7fa fbb4 	bl	8000acc <__aeabi_dcmplt>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <slalom_L902+0xbe>

	target_degaccel_z = SLALOM_H_DEGACCEL;
 800636a:	4b3c      	ldr	r3, [pc, #240]	; (800645c <slalom_L902+0x1e4>)
 800636c:	4a44      	ldr	r2, [pc, #272]	; (8006480 <slalom_L902+0x208>)
 800636e:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+80);
 8006370:	bf00      	nop
 8006372:	4b40      	ldr	r3, [pc, #256]	; (8006474 <slalom_L902+0x1fc>)
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006484 <slalom_L902+0x20c>
 800637c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006380:	4b3e      	ldr	r3, [pc, #248]	; (800647c <slalom_L902+0x204>)
 8006382:	edd3 7a00 	vldr	s15, [r3]
 8006386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638e:	dcf0      	bgt.n	8006372 <slalom_L902+0xfa>
	if(!MF.FLAG.XDIR){
 8006390:	4b29      	ldr	r3, [pc, #164]	; (8006438 <slalom_L902+0x1c0>)
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <slalom_L902+0x130>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800639e:	2101      	movs	r1, #1
 80063a0:	20ff      	movs	r0, #255	; 0xff
 80063a2:	f008 fcdd 	bl	800ed60 <turn_dir>
 80063a6:	e003      	b.n	80063b0 <slalom_L902+0x138>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80063a8:	2103      	movs	r1, #3
 80063aa:	20fe      	movs	r0, #254	; 0xfe
 80063ac:	f008 fcd8 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <slalom_L902+0x1c0>)
 80063b2:	8813      	ldrh	r3, [r2, #0]
 80063b4:	f36f 2308 	bfc	r3, #8, #1
 80063b8:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80063ba:	4b20      	ldr	r3, [pc, #128]	; (800643c <slalom_L902+0x1c4>)
 80063bc:	4a20      	ldr	r2, [pc, #128]	; (8006440 <slalom_L902+0x1c8>)
 80063be:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80063c0:	4b20      	ldr	r3, [pc, #128]	; (8006444 <slalom_L902+0x1cc>)
 80063c2:	4a1f      	ldr	r2, [pc, #124]	; (8006440 <slalom_L902+0x1c8>)
 80063c4:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80063c6:	4b20      	ldr	r3, [pc, #128]	; (8006448 <slalom_L902+0x1d0>)
 80063c8:	4a20      	ldr	r2, [pc, #128]	; (800644c <slalom_L902+0x1d4>)
 80063ca:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80063cc:	4b20      	ldr	r3, [pc, #128]	; (8006450 <slalom_L902+0x1d8>)
 80063ce:	4a1f      	ldr	r2, [pc, #124]	; (800644c <slalom_L902+0x1d4>)
 80063d0:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	4a1f      	ldr	r2, [pc, #124]	; (8006454 <slalom_L902+0x1dc>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4a1f      	ldr	r2, [pc, #124]	; (8006458 <slalom_L902+0x1e0>)
 80063dc:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80063de:	4a16      	ldr	r2, [pc, #88]	; (8006438 <slalom_L902+0x1c0>)
 80063e0:	8813      	ldrh	r3, [r2, #0]
 80063e2:	f043 0304 	orr.w	r3, r3, #4
 80063e6:	8013      	strh	r3, [r2, #0]
	control_start();
 80063e8:	f7fe fcc4 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_H_OFFSET && dist_r < SLALOM_H_OFFSET);
 80063ec:	bf00      	nop
 80063ee:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <slalom_L902+0x1e0>)
 80063f0:	edd3 7a00 	vldr	s15, [r3]
 80063f4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006488 <slalom_L902+0x210>
 80063f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	d509      	bpl.n	8006416 <slalom_L902+0x19e>
 8006402:	4b14      	ldr	r3, [pc, #80]	; (8006454 <slalom_L902+0x1dc>)
 8006404:	edd3 7a00 	vldr	s15, [r3]
 8006408:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006488 <slalom_L902+0x210>
 800640c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	d4eb      	bmi.n	80063ee <slalom_L902+0x176>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <slalom_L902+0x1c0>)
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <slalom_L902+0x1b0>
 8006424:	f00a f9f8 	bl	8010818 <get_wall_info>
}
 8006428:	bf00      	nop
 800642a:	bdb0      	pop	{r4, r5, r7, pc}
 800642c:	f3af 8000 	nop.w
 8006430:	33333333 	.word	0x33333333
 8006434:	40509333 	.word	0x40509333
 8006438:	20000fa8 	.word	0x20000fa8
 800643c:	20000d9c 	.word	0x20000d9c
 8006440:	461c4000 	.word	0x461c4000
 8006444:	20000b20 	.word	0x20000b20
 8006448:	200007b4 	.word	0x200007b4
 800644c:	44480000 	.word	0x44480000
 8006450:	200001dc 	.word	0x200001dc
 8006454:	20000b2c 	.word	0x20000b2c
 8006458:	200012e4 	.word	0x200012e4
 800645c:	20000b98 	.word	0x20000b98
 8006460:	c69c4000 	.word	0xc69c4000
 8006464:	200001e0 	.word	0x200001e0
 8006468:	200002f0 	.word	0x200002f0
 800646c:	c4480000 	.word	0xc4480000
 8006470:	20000b34 	.word	0x20000b34
 8006474:	20000c3c 	.word	0x20000c3c
 8006478:	42000000 	.word	0x42000000
 800647c:	20000b9c 	.word	0x20000b9c
 8006480:	469c4000 	.word	0x469c4000
 8006484:	42a00000 	.word	0x42a00000
 8006488:	42080000 	.word	0x42080000

0800648c <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
	full_led_write(5);
 8006490:	2005      	movs	r0, #5
 8006492:	f00a fa35 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006496:	4a67      	ldr	r2, [pc, #412]	; (8006634 <Lslalom_R90+0x1a8>)
 8006498:	8813      	ldrh	r3, [r2, #0]
 800649a:	f36f 2308 	bfc	r3, #8, #1
 800649e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80064a0:	4b65      	ldr	r3, [pc, #404]	; (8006638 <Lslalom_R90+0x1ac>)
 80064a2:	4a66      	ldr	r2, [pc, #408]	; (800663c <Lslalom_R90+0x1b0>)
 80064a4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064a6:	4b66      	ldr	r3, [pc, #408]	; (8006640 <Lslalom_R90+0x1b4>)
 80064a8:	4a64      	ldr	r2, [pc, #400]	; (800663c <Lslalom_R90+0x1b0>)
 80064aa:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80064ac:	4b65      	ldr	r3, [pc, #404]	; (8006644 <Lslalom_R90+0x1b8>)
 80064ae:	4a66      	ldr	r2, [pc, #408]	; (8006648 <Lslalom_R90+0x1bc>)
 80064b0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80064b2:	4b66      	ldr	r3, [pc, #408]	; (800664c <Lslalom_R90+0x1c0>)
 80064b4:	4a64      	ldr	r2, [pc, #400]	; (8006648 <Lslalom_R90+0x1bc>)
 80064b6:	601a      	str	r2, [r3, #0]

	control_start();
 80064b8:	f7fe fc5c 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	4a63      	ldr	r2, [pc, #396]	; (8006650 <Lslalom_R90+0x1c4>)
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4a63      	ldr	r2, [pc, #396]	; (8006654 <Lslalom_R90+0x1c8>)
 80064c6:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_OFFSET && dist_r < LSLALOM_OFFSET);
 80064c8:	bf00      	nop
 80064ca:	4b62      	ldr	r3, [pc, #392]	; (8006654 <Lslalom_R90+0x1c8>)
 80064cc:	edd3 7a00 	vldr	s15, [r3]
 80064d0:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006658 <Lslalom_R90+0x1cc>
 80064d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	d509      	bpl.n	80064f2 <Lslalom_R90+0x66>
 80064de:	4b5c      	ldr	r3, [pc, #368]	; (8006650 <Lslalom_R90+0x1c4>)
 80064e0:	edd3 7a00 	vldr	s15, [r3]
 80064e4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006658 <Lslalom_R90+0x1cc>
 80064e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f0:	d4eb      	bmi.n	80064ca <Lslalom_R90+0x3e>
	drive_stop();
 80064f2:	f7fe fc17 	bl	8004d24 <drive_stop>
	control_stop();
 80064f6:	f7fe fc51 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80064fa:	4a4e      	ldr	r2, [pc, #312]	; (8006634 <Lslalom_R90+0x1a8>)
 80064fc:	8813      	ldrh	r3, [r2, #0]
 80064fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006502:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LSLALOM_DEGACCEL;
 8006504:	4b55      	ldr	r3, [pc, #340]	; (800665c <Lslalom_R90+0x1d0>)
 8006506:	4a56      	ldr	r2, [pc, #344]	; (8006660 <Lslalom_R90+0x1d4>)
 8006508:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800650a:	4b56      	ldr	r3, [pc, #344]	; (8006664 <Lslalom_R90+0x1d8>)
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
	omega_max = LSLALOM_OMEGA;
 8006512:	4b55      	ldr	r3, [pc, #340]	; (8006668 <Lslalom_R90+0x1dc>)
 8006514:	4a55      	ldr	r2, [pc, #340]	; (800666c <Lslalom_R90+0x1e0>)
 8006516:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8006518:	4b55      	ldr	r3, [pc, #340]	; (8006670 <Lslalom_R90+0x1e4>)
 800651a:	4a4b      	ldr	r2, [pc, #300]	; (8006648 <Lslalom_R90+0x1bc>)
 800651c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800651e:	4a45      	ldr	r2, [pc, #276]	; (8006634 <Lslalom_R90+0x1a8>)
 8006520:	8813      	ldrh	r3, [r2, #0]
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-25);
 8006528:	bf00      	nop
 800652a:	4b52      	ldr	r3, [pc, #328]	; (8006674 <Lslalom_R90+0x1e8>)
 800652c:	edd3 7a00 	vldr	s15, [r3]
 8006530:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006534:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006538:	4b4f      	ldr	r3, [pc, #316]	; (8006678 <Lslalom_R90+0x1ec>)
 800653a:	edd3 7a00 	vldr	s15, [r3]
 800653e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006546:	d4f0      	bmi.n	800652a <Lslalom_R90+0x9e>

	target_degaccel_z = 0;
 8006548:	4b44      	ldr	r3, [pc, #272]	; (800665c <Lslalom_R90+0x1d0>)
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-75);
 8006550:	bf00      	nop
 8006552:	4b48      	ldr	r3, [pc, #288]	; (8006674 <Lslalom_R90+0x1e8>)
 8006554:	edd3 7a00 	vldr	s15, [r3]
 8006558:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800667c <Lslalom_R90+0x1f0>
 800655c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006560:	4b45      	ldr	r3, [pc, #276]	; (8006678 <Lslalom_R90+0x1ec>)
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	d4f0      	bmi.n	8006552 <Lslalom_R90+0xc6>

	target_degaccel_z = -LSLALOM_DEGACCEL;
 8006570:	4b3a      	ldr	r3, [pc, #232]	; (800665c <Lslalom_R90+0x1d0>)
 8006572:	4a43      	ldr	r2, [pc, #268]	; (8006680 <Lslalom_R90+0x1f4>)
 8006574:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006576:	bf00      	nop
 8006578:	4b3e      	ldr	r3, [pc, #248]	; (8006674 <Lslalom_R90+0x1e8>)
 800657a:	edd3 7a00 	vldr	s15, [r3]
 800657e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006684 <Lslalom_R90+0x1f8>
 8006582:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006586:	4b3c      	ldr	r3, [pc, #240]	; (8006678 <Lslalom_R90+0x1ec>)
 8006588:	edd3 7a00 	vldr	s15, [r3]
 800658c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	d4f0      	bmi.n	8006578 <Lslalom_R90+0xec>
	if(!MF.FLAG.XDIR){
 8006596:	4b27      	ldr	r3, [pc, #156]	; (8006634 <Lslalom_R90+0x1a8>)
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <Lslalom_R90+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80065a4:	2101      	movs	r1, #1
 80065a6:	2001      	movs	r0, #1
 80065a8:	f008 fbda 	bl	800ed60 <turn_dir>
 80065ac:	e003      	b.n	80065b6 <Lslalom_R90+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80065ae:	2103      	movs	r1, #3
 80065b0:	2002      	movs	r0, #2
 80065b2:	f008 fbd5 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80065b6:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <Lslalom_R90+0x1a8>)
 80065b8:	8813      	ldrh	r3, [r2, #0]
 80065ba:	f36f 2308 	bfc	r3, #8, #1
 80065be:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80065c0:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <Lslalom_R90+0x1ac>)
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <Lslalom_R90+0x1b0>)
 80065c4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80065c6:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <Lslalom_R90+0x1b4>)
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <Lslalom_R90+0x1b0>)
 80065ca:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <Lslalom_R90+0x1b8>)
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <Lslalom_R90+0x1bc>)
 80065d0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <Lslalom_R90+0x1c0>)
 80065d4:	4a1c      	ldr	r2, [pc, #112]	; (8006648 <Lslalom_R90+0x1bc>)
 80065d6:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <Lslalom_R90+0x1c4>)
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <Lslalom_R90+0x1c8>)
 80065e2:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <Lslalom_R90+0x1a8>)
 80065e6:	8813      	ldrh	r3, [r2, #0]
 80065e8:	f043 0304 	orr.w	r3, r3, #4
 80065ec:	8013      	strh	r3, [r2, #0]
	control_start();
 80065ee:	f7fe fbc1 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_OFFSET && dist_r < LSLALOM_OFFSET);
 80065f2:	bf00      	nop
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <Lslalom_R90+0x1c8>)
 80065f6:	edd3 7a00 	vldr	s15, [r3]
 80065fa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006658 <Lslalom_R90+0x1cc>
 80065fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006606:	d509      	bpl.n	800661c <Lslalom_R90+0x190>
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <Lslalom_R90+0x1c4>)
 800660a:	edd3 7a00 	vldr	s15, [r3]
 800660e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006658 <Lslalom_R90+0x1cc>
 8006612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661a:	d4eb      	bmi.n	80065f4 <Lslalom_R90+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <Lslalom_R90+0x1a8>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <Lslalom_R90+0x1a2>
 800662a:	f00a f8f5 	bl	8010818 <get_wall_info>
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000fa8 	.word	0x20000fa8
 8006638:	20000d9c 	.word	0x20000d9c
 800663c:	461c4000 	.word	0x461c4000
 8006640:	20000b20 	.word	0x20000b20
 8006644:	200007b4 	.word	0x200007b4
 8006648:	43c80000 	.word	0x43c80000
 800664c:	200001dc 	.word	0x200001dc
 8006650:	20000b2c 	.word	0x20000b2c
 8006654:	200012e4 	.word	0x200012e4
 8006658:	42480000 	.word	0x42480000
 800665c:	20000b98 	.word	0x20000b98
 8006660:	44fa0000 	.word	0x44fa0000
 8006664:	200001e0 	.word	0x200001e0
 8006668:	20000b24 	.word	0x20000b24
 800666c:	43960000 	.word	0x43960000
 8006670:	20000b34 	.word	0x20000b34
 8006674:	20000c3c 	.word	0x20000c3c
 8006678:	20000b9c 	.word	0x20000b9c
 800667c:	42960000 	.word	0x42960000
 8006680:	c4fa0000 	.word	0xc4fa0000
 8006684:	42b40000 	.word	0x42b40000

08006688 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
	full_led_write(6);
 800668c:	2006      	movs	r0, #6
 800668e:	f00a f937 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006692:	4a67      	ldr	r2, [pc, #412]	; (8006830 <Lslalom_L90+0x1a8>)
 8006694:	8813      	ldrh	r3, [r2, #0]
 8006696:	f36f 2308 	bfc	r3, #8, #1
 800669a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800669c:	4b65      	ldr	r3, [pc, #404]	; (8006834 <Lslalom_L90+0x1ac>)
 800669e:	4a66      	ldr	r2, [pc, #408]	; (8006838 <Lslalom_L90+0x1b0>)
 80066a0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80066a2:	4b66      	ldr	r3, [pc, #408]	; (800683c <Lslalom_L90+0x1b4>)
 80066a4:	4a64      	ldr	r2, [pc, #400]	; (8006838 <Lslalom_L90+0x1b0>)
 80066a6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80066a8:	4b65      	ldr	r3, [pc, #404]	; (8006840 <Lslalom_L90+0x1b8>)
 80066aa:	4a66      	ldr	r2, [pc, #408]	; (8006844 <Lslalom_L90+0x1bc>)
 80066ac:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80066ae:	4b66      	ldr	r3, [pc, #408]	; (8006848 <Lslalom_L90+0x1c0>)
 80066b0:	4a64      	ldr	r2, [pc, #400]	; (8006844 <Lslalom_L90+0x1bc>)
 80066b2:	601a      	str	r2, [r3, #0]

	control_start();
 80066b4:	f7fe fb5e 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	4a63      	ldr	r2, [pc, #396]	; (800684c <Lslalom_L90+0x1c4>)
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4a63      	ldr	r2, [pc, #396]	; (8006850 <Lslalom_L90+0x1c8>)
 80066c2:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_OFFSET && dist_r < LSLALOM_OFFSET);
 80066c4:	bf00      	nop
 80066c6:	4b62      	ldr	r3, [pc, #392]	; (8006850 <Lslalom_L90+0x1c8>)
 80066c8:	edd3 7a00 	vldr	s15, [r3]
 80066cc:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006854 <Lslalom_L90+0x1cc>
 80066d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d8:	d509      	bpl.n	80066ee <Lslalom_L90+0x66>
 80066da:	4b5c      	ldr	r3, [pc, #368]	; (800684c <Lslalom_L90+0x1c4>)
 80066dc:	edd3 7a00 	vldr	s15, [r3]
 80066e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006854 <Lslalom_L90+0x1cc>
 80066e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ec:	d4eb      	bmi.n	80066c6 <Lslalom_L90+0x3e>
	drive_stop();
 80066ee:	f7fe fb19 	bl	8004d24 <drive_stop>
	control_stop();
 80066f2:	f7fe fb53 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80066f6:	4a4e      	ldr	r2, [pc, #312]	; (8006830 <Lslalom_L90+0x1a8>)
 80066f8:	8813      	ldrh	r3, [r2, #0]
 80066fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fe:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LSLALOM_DEGACCEL;
 8006700:	4b55      	ldr	r3, [pc, #340]	; (8006858 <Lslalom_L90+0x1d0>)
 8006702:	4a56      	ldr	r2, [pc, #344]	; (800685c <Lslalom_L90+0x1d4>)
 8006704:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006706:	4b56      	ldr	r3, [pc, #344]	; (8006860 <Lslalom_L90+0x1d8>)
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
	omega_min = -LSLALOM_OMEGA;
 800670e:	4b55      	ldr	r3, [pc, #340]	; (8006864 <Lslalom_L90+0x1dc>)
 8006710:	4a55      	ldr	r2, [pc, #340]	; (8006868 <Lslalom_L90+0x1e0>)
 8006712:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8006714:	4b55      	ldr	r3, [pc, #340]	; (800686c <Lslalom_L90+0x1e4>)
 8006716:	4a4b      	ldr	r2, [pc, #300]	; (8006844 <Lslalom_L90+0x1bc>)
 8006718:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800671a:	4a45      	ldr	r2, [pc, #276]	; (8006830 <Lslalom_L90+0x1a8>)
 800671c:	8813      	ldrh	r3, [r2, #0]
 800671e:	f043 0302 	orr.w	r3, r3, #2
 8006722:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+15);
 8006724:	bf00      	nop
 8006726:	4b52      	ldr	r3, [pc, #328]	; (8006870 <Lslalom_L90+0x1e8>)
 8006728:	edd3 7a00 	vldr	s15, [r3]
 800672c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8006730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006734:	4b4f      	ldr	r3, [pc, #316]	; (8006874 <Lslalom_L90+0x1ec>)
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006742:	dcf0      	bgt.n	8006726 <Lslalom_L90+0x9e>

	target_degaccel_z = 0;
 8006744:	4b44      	ldr	r3, [pc, #272]	; (8006858 <Lslalom_L90+0x1d0>)
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+85);
 800674c:	bf00      	nop
 800674e:	4b48      	ldr	r3, [pc, #288]	; (8006870 <Lslalom_L90+0x1e8>)
 8006750:	edd3 7a00 	vldr	s15, [r3]
 8006754:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006878 <Lslalom_L90+0x1f0>
 8006758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800675c:	4b45      	ldr	r3, [pc, #276]	; (8006874 <Lslalom_L90+0x1ec>)
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676a:	dcf0      	bgt.n	800674e <Lslalom_L90+0xc6>

	target_degaccel_z = LSLALOM_DEGACCEL;
 800676c:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <Lslalom_L90+0x1d0>)
 800676e:	4a43      	ldr	r2, [pc, #268]	; (800687c <Lslalom_L90+0x1f4>)
 8006770:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006772:	bf00      	nop
 8006774:	4b3e      	ldr	r3, [pc, #248]	; (8006870 <Lslalom_L90+0x1e8>)
 8006776:	edd3 7a00 	vldr	s15, [r3]
 800677a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006880 <Lslalom_L90+0x1f8>
 800677e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006782:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <Lslalom_L90+0x1ec>)
 8006784:	edd3 7a00 	vldr	s15, [r3]
 8006788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800678c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006790:	dcf0      	bgt.n	8006774 <Lslalom_L90+0xec>
	if(!MF.FLAG.XDIR){
 8006792:	4b27      	ldr	r3, [pc, #156]	; (8006830 <Lslalom_L90+0x1a8>)
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <Lslalom_L90+0x122>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067a0:	2101      	movs	r1, #1
 80067a2:	20ff      	movs	r0, #255	; 0xff
 80067a4:	f008 fadc 	bl	800ed60 <turn_dir>
 80067a8:	e003      	b.n	80067b2 <Lslalom_L90+0x12a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067aa:	2103      	movs	r1, #3
 80067ac:	20fe      	movs	r0, #254	; 0xfe
 80067ae:	f008 fad7 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80067b2:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <Lslalom_L90+0x1a8>)
 80067b4:	8813      	ldrh	r3, [r2, #0]
 80067b6:	f36f 2308 	bfc	r3, #8, #1
 80067ba:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <Lslalom_L90+0x1ac>)
 80067be:	4a1e      	ldr	r2, [pc, #120]	; (8006838 <Lslalom_L90+0x1b0>)
 80067c0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <Lslalom_L90+0x1b4>)
 80067c4:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <Lslalom_L90+0x1b0>)
 80067c6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <Lslalom_L90+0x1b8>)
 80067ca:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <Lslalom_L90+0x1bc>)
 80067cc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <Lslalom_L90+0x1c0>)
 80067d0:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <Lslalom_L90+0x1bc>)
 80067d2:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	4a1c      	ldr	r2, [pc, #112]	; (800684c <Lslalom_L90+0x1c4>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <Lslalom_L90+0x1c8>)
 80067de:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80067e0:	4a13      	ldr	r2, [pc, #76]	; (8006830 <Lslalom_L90+0x1a8>)
 80067e2:	8813      	ldrh	r3, [r2, #0]
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	8013      	strh	r3, [r2, #0]
	control_start();
 80067ea:	f7fe fac3 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_OFFSET && dist_r < LSLALOM_OFFSET);
 80067ee:	bf00      	nop
 80067f0:	4b17      	ldr	r3, [pc, #92]	; (8006850 <Lslalom_L90+0x1c8>)
 80067f2:	edd3 7a00 	vldr	s15, [r3]
 80067f6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006854 <Lslalom_L90+0x1cc>
 80067fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006802:	d509      	bpl.n	8006818 <Lslalom_L90+0x190>
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <Lslalom_L90+0x1c4>)
 8006806:	edd3 7a00 	vldr	s15, [r3]
 800680a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006854 <Lslalom_L90+0x1cc>
 800680e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006816:	d4eb      	bmi.n	80067f0 <Lslalom_L90+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <Lslalom_L90+0x1a8>)
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <Lslalom_L90+0x1a2>
 8006826:	f009 fff7 	bl	8010818 <get_wall_info>
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000fa8 	.word	0x20000fa8
 8006834:	20000d9c 	.word	0x20000d9c
 8006838:	461c4000 	.word	0x461c4000
 800683c:	20000b20 	.word	0x20000b20
 8006840:	200007b4 	.word	0x200007b4
 8006844:	43c80000 	.word	0x43c80000
 8006848:	200001dc 	.word	0x200001dc
 800684c:	20000b2c 	.word	0x20000b2c
 8006850:	200012e4 	.word	0x200012e4
 8006854:	42480000 	.word	0x42480000
 8006858:	20000b98 	.word	0x20000b98
 800685c:	c4fa0000 	.word	0xc4fa0000
 8006860:	200001e0 	.word	0x200001e0
 8006864:	200002f0 	.word	0x200002f0
 8006868:	c3960000 	.word	0xc3960000
 800686c:	20000b34 	.word	0x20000b34
 8006870:	20000c3c 	.word	0x20000c3c
 8006874:	20000b9c 	.word	0x20000b9c
 8006878:	42aa0000 	.word	0x42aa0000
 800687c:	44fa0000 	.word	0x44fa0000
 8006880:	42b40000 	.word	0x42b40000

08006884 <Lslalom_R902>:
//Lslalom_R902
// スラロームで右に90度回転する High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R902(void){
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
	full_led_write(5);
 8006888:	2005      	movs	r0, #5
 800688a:	f00a f839 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 800688e:	4a67      	ldr	r2, [pc, #412]	; (8006a2c <Lslalom_R902+0x1a8>)
 8006890:	8813      	ldrh	r3, [r2, #0]
 8006892:	f36f 2308 	bfc	r3, #8, #1
 8006896:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006898:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <Lslalom_R902+0x1ac>)
 800689a:	4a66      	ldr	r2, [pc, #408]	; (8006a34 <Lslalom_R902+0x1b0>)
 800689c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800689e:	4b66      	ldr	r3, [pc, #408]	; (8006a38 <Lslalom_R902+0x1b4>)
 80068a0:	4a64      	ldr	r2, [pc, #400]	; (8006a34 <Lslalom_R902+0x1b0>)
 80068a2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80068a4:	4b65      	ldr	r3, [pc, #404]	; (8006a3c <Lslalom_R902+0x1b8>)
 80068a6:	4a66      	ldr	r2, [pc, #408]	; (8006a40 <Lslalom_R902+0x1bc>)
 80068a8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80068aa:	4b66      	ldr	r3, [pc, #408]	; (8006a44 <Lslalom_R902+0x1c0>)
 80068ac:	4a64      	ldr	r2, [pc, #400]	; (8006a40 <Lslalom_R902+0x1bc>)
 80068ae:	601a      	str	r2, [r3, #0]

	control_start();
 80068b0:	f7fe fa60 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	4a63      	ldr	r2, [pc, #396]	; (8006a48 <Lslalom_R902+0x1c4>)
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4a63      	ldr	r2, [pc, #396]	; (8006a4c <Lslalom_R902+0x1c8>)
 80068be:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_OFFSET && dist_r < LSLALOM_H_OFFSET);
 80068c0:	bf00      	nop
 80068c2:	4b62      	ldr	r3, [pc, #392]	; (8006a4c <Lslalom_R902+0x1c8>)
 80068c4:	edd3 7a00 	vldr	s15, [r3]
 80068c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80068cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	d509      	bpl.n	80068ea <Lslalom_R902+0x66>
 80068d6:	4b5c      	ldr	r3, [pc, #368]	; (8006a48 <Lslalom_R902+0x1c4>)
 80068d8:	edd3 7a00 	vldr	s15, [r3]
 80068dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80068e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	d4eb      	bmi.n	80068c2 <Lslalom_R902+0x3e>
	drive_stop();
 80068ea:	f7fe fa1b 	bl	8004d24 <drive_stop>
	control_stop();
 80068ee:	f7fe fa55 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80068f2:	4a4e      	ldr	r2, [pc, #312]	; (8006a2c <Lslalom_R902+0x1a8>)
 80068f4:	8813      	ldrh	r3, [r2, #0]
 80068f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fa:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LSLALOM_H_DEGACCEL;
 80068fc:	4b54      	ldr	r3, [pc, #336]	; (8006a50 <Lslalom_R902+0x1cc>)
 80068fe:	4a55      	ldr	r2, [pc, #340]	; (8006a54 <Lslalom_R902+0x1d0>)
 8006900:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006902:	4b55      	ldr	r3, [pc, #340]	; (8006a58 <Lslalom_R902+0x1d4>)
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
	omega_max = LSLALOM_H_OMEGA;
 800690a:	4b54      	ldr	r3, [pc, #336]	; (8006a5c <Lslalom_R902+0x1d8>)
 800690c:	4a54      	ldr	r2, [pc, #336]	; (8006a60 <Lslalom_R902+0x1dc>)
 800690e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8006910:	4b54      	ldr	r3, [pc, #336]	; (8006a64 <Lslalom_R902+0x1e0>)
 8006912:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <Lslalom_R902+0x1bc>)
 8006914:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006916:	4a45      	ldr	r2, [pc, #276]	; (8006a2c <Lslalom_R902+0x1a8>)
 8006918:	8813      	ldrh	r3, [r2, #0]
 800691a:	f043 0302 	orr.w	r3, r3, #2
 800691e:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-45);
 8006920:	bf00      	nop
 8006922:	4b51      	ldr	r3, [pc, #324]	; (8006a68 <Lslalom_R902+0x1e4>)
 8006924:	edd3 7a00 	vldr	s15, [r3]
 8006928:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006a6c <Lslalom_R902+0x1e8>
 800692c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006930:	4b4f      	ldr	r3, [pc, #316]	; (8006a70 <Lslalom_R902+0x1ec>)
 8006932:	edd3 7a00 	vldr	s15, [r3]
 8006936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	d4f0      	bmi.n	8006922 <Lslalom_R902+0x9e>

	target_degaccel_z = 0;
 8006940:	4b43      	ldr	r3, [pc, #268]	; (8006a50 <Lslalom_R902+0x1cc>)
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-55);
 8006948:	bf00      	nop
 800694a:	4b47      	ldr	r3, [pc, #284]	; (8006a68 <Lslalom_R902+0x1e4>)
 800694c:	edd3 7a00 	vldr	s15, [r3]
 8006950:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006a74 <Lslalom_R902+0x1f0>
 8006954:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006958:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <Lslalom_R902+0x1ec>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006966:	d4f0      	bmi.n	800694a <Lslalom_R902+0xc6>

	target_degaccel_z = -LSLALOM_H_DEGACCEL;
 8006968:	4b39      	ldr	r3, [pc, #228]	; (8006a50 <Lslalom_R902+0x1cc>)
 800696a:	4a43      	ldr	r2, [pc, #268]	; (8006a78 <Lslalom_R902+0x1f4>)
 800696c:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800696e:	bf00      	nop
 8006970:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <Lslalom_R902+0x1e4>)
 8006972:	edd3 7a00 	vldr	s15, [r3]
 8006976:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006a7c <Lslalom_R902+0x1f8>
 800697a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800697e:	4b3c      	ldr	r3, [pc, #240]	; (8006a70 <Lslalom_R902+0x1ec>)
 8006980:	edd3 7a00 	vldr	s15, [r3]
 8006984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698c:	d4f0      	bmi.n	8006970 <Lslalom_R902+0xec>
	if(!MF.FLAG.XDIR){
 800698e:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <Lslalom_R902+0x1a8>)
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <Lslalom_R902+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800699c:	2101      	movs	r1, #1
 800699e:	2001      	movs	r0, #1
 80069a0:	f008 f9de 	bl	800ed60 <turn_dir>
 80069a4:	e003      	b.n	80069ae <Lslalom_R902+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069a6:	2103      	movs	r1, #3
 80069a8:	2002      	movs	r0, #2
 80069aa:	f008 f9d9 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80069ae:	4a1f      	ldr	r2, [pc, #124]	; (8006a2c <Lslalom_R902+0x1a8>)
 80069b0:	8813      	ldrh	r3, [r2, #0]
 80069b2:	f36f 2308 	bfc	r3, #8, #1
 80069b6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80069b8:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <Lslalom_R902+0x1ac>)
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <Lslalom_R902+0x1b0>)
 80069bc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80069be:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <Lslalom_R902+0x1b4>)
 80069c0:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <Lslalom_R902+0x1b0>)
 80069c2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <Lslalom_R902+0x1b8>)
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <Lslalom_R902+0x1bc>)
 80069c8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80069ca:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <Lslalom_R902+0x1c0>)
 80069cc:	4a1c      	ldr	r2, [pc, #112]	; (8006a40 <Lslalom_R902+0x1bc>)
 80069ce:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <Lslalom_R902+0x1c4>)
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <Lslalom_R902+0x1c8>)
 80069da:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <Lslalom_R902+0x1a8>)
 80069de:	8813      	ldrh	r3, [r2, #0]
 80069e0:	f043 0304 	orr.w	r3, r3, #4
 80069e4:	8013      	strh	r3, [r2, #0]
	control_start();
 80069e6:	f7fe f9c5 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_OFFSET && dist_r < LSLALOM_H_OFFSET);
 80069ea:	bf00      	nop
 80069ec:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <Lslalom_R902+0x1c8>)
 80069ee:	edd3 7a00 	vldr	s15, [r3]
 80069f2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80069f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	d509      	bpl.n	8006a14 <Lslalom_R902+0x190>
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <Lslalom_R902+0x1c4>)
 8006a02:	edd3 7a00 	vldr	s15, [r3]
 8006a06:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a12:	d4eb      	bmi.n	80069ec <Lslalom_R902+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <Lslalom_R902+0x1a8>)
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <Lslalom_R902+0x1a2>
 8006a22:	f009 fef9 	bl	8010818 <get_wall_info>
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000fa8 	.word	0x20000fa8
 8006a30:	20000d9c 	.word	0x20000d9c
 8006a34:	461c4000 	.word	0x461c4000
 8006a38:	20000b20 	.word	0x20000b20
 8006a3c:	200007b4 	.word	0x200007b4
 8006a40:	44480000 	.word	0x44480000
 8006a44:	200001dc 	.word	0x200001dc
 8006a48:	20000b2c 	.word	0x20000b2c
 8006a4c:	200012e4 	.word	0x200012e4
 8006a50:	20000b98 	.word	0x20000b98
 8006a54:	458ca000 	.word	0x458ca000
 8006a58:	200001e0 	.word	0x200001e0
 8006a5c:	20000b24 	.word	0x20000b24
 8006a60:	44160000 	.word	0x44160000
 8006a64:	20000b34 	.word	0x20000b34
 8006a68:	20000c3c 	.word	0x20000c3c
 8006a6c:	42340000 	.word	0x42340000
 8006a70:	20000b9c 	.word	0x20000b9c
 8006a74:	425c0000 	.word	0x425c0000
 8006a78:	c58ca000 	.word	0xc58ca000
 8006a7c:	42b40000 	.word	0x42b40000

08006a80 <Lslalom_L902>:
//Lslalom_L902
// 大回りスラロームで右に90度回転する High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L902(void){
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
	full_led_write(6);
 8006a84:	2006      	movs	r0, #6
 8006a86:	f009 ff3b 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006a8a:	4a67      	ldr	r2, [pc, #412]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006a8c:	8813      	ldrh	r3, [r2, #0]
 8006a8e:	f36f 2308 	bfc	r3, #8, #1
 8006a92:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006a94:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <Lslalom_L902+0x1ac>)
 8006a96:	4a66      	ldr	r2, [pc, #408]	; (8006c30 <Lslalom_L902+0x1b0>)
 8006a98:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006a9a:	4b66      	ldr	r3, [pc, #408]	; (8006c34 <Lslalom_L902+0x1b4>)
 8006a9c:	4a64      	ldr	r2, [pc, #400]	; (8006c30 <Lslalom_L902+0x1b0>)
 8006a9e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006aa0:	4b65      	ldr	r3, [pc, #404]	; (8006c38 <Lslalom_L902+0x1b8>)
 8006aa2:	4a66      	ldr	r2, [pc, #408]	; (8006c3c <Lslalom_L902+0x1bc>)
 8006aa4:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006aa6:	4b66      	ldr	r3, [pc, #408]	; (8006c40 <Lslalom_L902+0x1c0>)
 8006aa8:	4a64      	ldr	r2, [pc, #400]	; (8006c3c <Lslalom_L902+0x1bc>)
 8006aaa:	601a      	str	r2, [r3, #0]

	control_start();
 8006aac:	f7fe f962 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	4a63      	ldr	r2, [pc, #396]	; (8006c44 <Lslalom_L902+0x1c4>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4a63      	ldr	r2, [pc, #396]	; (8006c48 <Lslalom_L902+0x1c8>)
 8006aba:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_OFFSET && dist_r < LSLALOM_H_OFFSET);
 8006abc:	bf00      	nop
 8006abe:	4b62      	ldr	r3, [pc, #392]	; (8006c48 <Lslalom_L902+0x1c8>)
 8006ac0:	edd3 7a00 	vldr	s15, [r3]
 8006ac4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad0:	d509      	bpl.n	8006ae6 <Lslalom_L902+0x66>
 8006ad2:	4b5c      	ldr	r3, [pc, #368]	; (8006c44 <Lslalom_L902+0x1c4>)
 8006ad4:	edd3 7a00 	vldr	s15, [r3]
 8006ad8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	d4eb      	bmi.n	8006abe <Lslalom_L902+0x3e>
	drive_stop();
 8006ae6:	f7fe f91d 	bl	8004d24 <drive_stop>
	control_stop();
 8006aea:	f7fe f957 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006aee:	4a4e      	ldr	r2, [pc, #312]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006af0:	8813      	ldrh	r3, [r2, #0]
 8006af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LSLALOM_H_DEGACCEL;
 8006af8:	4b54      	ldr	r3, [pc, #336]	; (8006c4c <Lslalom_L902+0x1cc>)
 8006afa:	4a55      	ldr	r2, [pc, #340]	; (8006c50 <Lslalom_L902+0x1d0>)
 8006afc:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006afe:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <Lslalom_L902+0x1d4>)
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	omega_min = -LSLALOM_H_OMEGA;
 8006b06:	4b54      	ldr	r3, [pc, #336]	; (8006c58 <Lslalom_L902+0x1d8>)
 8006b08:	4a54      	ldr	r2, [pc, #336]	; (8006c5c <Lslalom_L902+0x1dc>)
 8006b0a:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8006b0c:	4b54      	ldr	r3, [pc, #336]	; (8006c60 <Lslalom_L902+0x1e0>)
 8006b0e:	4a4b      	ldr	r2, [pc, #300]	; (8006c3c <Lslalom_L902+0x1bc>)
 8006b10:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006b12:	4a45      	ldr	r2, [pc, #276]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006b14:	8813      	ldrh	r3, [r2, #0]
 8006b16:	f043 0302 	orr.w	r3, r3, #2
 8006b1a:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+45);
 8006b1c:	bf00      	nop
 8006b1e:	4b51      	ldr	r3, [pc, #324]	; (8006c64 <Lslalom_L902+0x1e4>)
 8006b20:	edd3 7a00 	vldr	s15, [r3]
 8006b24:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006c68 <Lslalom_L902+0x1e8>
 8006b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b2c:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <Lslalom_L902+0x1ec>)
 8006b2e:	edd3 7a00 	vldr	s15, [r3]
 8006b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3a:	dcf0      	bgt.n	8006b1e <Lslalom_L902+0x9e>

	target_degaccel_z = 0;
 8006b3c:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <Lslalom_L902+0x1cc>)
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+55);
 8006b44:	bf00      	nop
 8006b46:	4b47      	ldr	r3, [pc, #284]	; (8006c64 <Lslalom_L902+0x1e4>)
 8006b48:	edd3 7a00 	vldr	s15, [r3]
 8006b4c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006c70 <Lslalom_L902+0x1f0>
 8006b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b54:	4b45      	ldr	r3, [pc, #276]	; (8006c6c <Lslalom_L902+0x1ec>)
 8006b56:	edd3 7a00 	vldr	s15, [r3]
 8006b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b62:	dcf0      	bgt.n	8006b46 <Lslalom_L902+0xc6>

	target_degaccel_z = LSLALOM_H_DEGACCEL;
 8006b64:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <Lslalom_L902+0x1cc>)
 8006b66:	4a43      	ldr	r2, [pc, #268]	; (8006c74 <Lslalom_L902+0x1f4>)
 8006b68:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006b6a:	bf00      	nop
 8006b6c:	4b3d      	ldr	r3, [pc, #244]	; (8006c64 <Lslalom_L902+0x1e4>)
 8006b6e:	edd3 7a00 	vldr	s15, [r3]
 8006b72:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006c78 <Lslalom_L902+0x1f8>
 8006b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b7a:	4b3c      	ldr	r3, [pc, #240]	; (8006c6c <Lslalom_L902+0x1ec>)
 8006b7c:	edd3 7a00 	vldr	s15, [r3]
 8006b80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b88:	dcf0      	bgt.n	8006b6c <Lslalom_L902+0xec>
	if(!MF.FLAG.XDIR){
 8006b8a:	4b27      	ldr	r3, [pc, #156]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <Lslalom_L902+0x122>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b98:	2101      	movs	r1, #1
 8006b9a:	20ff      	movs	r0, #255	; 0xff
 8006b9c:	f008 f8e0 	bl	800ed60 <turn_dir>
 8006ba0:	e003      	b.n	8006baa <Lslalom_L902+0x12a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ba2:	2103      	movs	r1, #3
 8006ba4:	20fe      	movs	r0, #254	; 0xfe
 8006ba6:	f008 f8db 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 8006baa:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006bac:	8813      	ldrh	r3, [r2, #0]
 8006bae:	f36f 2308 	bfc	r3, #8, #1
 8006bb2:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006bb4:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <Lslalom_L902+0x1ac>)
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <Lslalom_L902+0x1b0>)
 8006bb8:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006bba:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <Lslalom_L902+0x1b4>)
 8006bbc:	4a1c      	ldr	r2, [pc, #112]	; (8006c30 <Lslalom_L902+0x1b0>)
 8006bbe:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <Lslalom_L902+0x1b8>)
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <Lslalom_L902+0x1bc>)
 8006bc4:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <Lslalom_L902+0x1c0>)
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <Lslalom_L902+0x1bc>)
 8006bca:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006bcc:	f04f 0300 	mov.w	r3, #0
 8006bd0:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <Lslalom_L902+0x1c4>)
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <Lslalom_L902+0x1c8>)
 8006bd6:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006bda:	8813      	ldrh	r3, [r2, #0]
 8006bdc:	f043 0304 	orr.w	r3, r3, #4
 8006be0:	8013      	strh	r3, [r2, #0]
	control_start();
 8006be2:	f7fe f8c7 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_OFFSET && dist_r < LSLALOM_H_OFFSET);
 8006be6:	bf00      	nop
 8006be8:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <Lslalom_L902+0x1c8>)
 8006bea:	edd3 7a00 	vldr	s15, [r3]
 8006bee:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfa:	d509      	bpl.n	8006c10 <Lslalom_L902+0x190>
 8006bfc:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <Lslalom_L902+0x1c4>)
 8006bfe:	edd3 7a00 	vldr	s15, [r3]
 8006c02:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0e:	d4eb      	bmi.n	8006be8 <Lslalom_L902+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <Lslalom_L902+0x1a8>)
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <Lslalom_L902+0x1a2>
 8006c1e:	f009 fdfb 	bl	8010818 <get_wall_info>
}
 8006c22:	bf00      	nop
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000fa8 	.word	0x20000fa8
 8006c2c:	20000d9c 	.word	0x20000d9c
 8006c30:	461c4000 	.word	0x461c4000
 8006c34:	20000b20 	.word	0x20000b20
 8006c38:	200007b4 	.word	0x200007b4
 8006c3c:	44480000 	.word	0x44480000
 8006c40:	200001dc 	.word	0x200001dc
 8006c44:	20000b2c 	.word	0x20000b2c
 8006c48:	200012e4 	.word	0x200012e4
 8006c4c:	20000b98 	.word	0x20000b98
 8006c50:	c58ca000 	.word	0xc58ca000
 8006c54:	200001e0 	.word	0x200001e0
 8006c58:	200002f0 	.word	0x200002f0
 8006c5c:	c4160000 	.word	0xc4160000
 8006c60:	20000b34 	.word	0x20000b34
 8006c64:	20000c3c 	.word	0x20000c3c
 8006c68:	42340000 	.word	0x42340000
 8006c6c:	20000b9c 	.word	0x20000b9c
 8006c70:	425c0000 	.word	0x425c0000
 8006c74:	458ca000 	.word	0x458ca000
 8006c78:	42b40000 	.word	0x42b40000

08006c7c <Lslalom_R903>:
//Lslalom_R903
// スラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R903(void){
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
	full_led_write(5);
 8006c80:	2005      	movs	r0, #5
 8006c82:	f009 fe3d 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006c86:	4a67      	ldr	r2, [pc, #412]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006c88:	8813      	ldrh	r3, [r2, #0]
 8006c8a:	f36f 2308 	bfc	r3, #8, #1
 8006c8e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006c90:	4b65      	ldr	r3, [pc, #404]	; (8006e28 <Lslalom_R903+0x1ac>)
 8006c92:	4a66      	ldr	r2, [pc, #408]	; (8006e2c <Lslalom_R903+0x1b0>)
 8006c94:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006c96:	4b66      	ldr	r3, [pc, #408]	; (8006e30 <Lslalom_R903+0x1b4>)
 8006c98:	4a64      	ldr	r2, [pc, #400]	; (8006e2c <Lslalom_R903+0x1b0>)
 8006c9a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006c9c:	4b65      	ldr	r3, [pc, #404]	; (8006e34 <Lslalom_R903+0x1b8>)
 8006c9e:	4a66      	ldr	r2, [pc, #408]	; (8006e38 <Lslalom_R903+0x1bc>)
 8006ca0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006ca2:	4b66      	ldr	r3, [pc, #408]	; (8006e3c <Lslalom_R903+0x1c0>)
 8006ca4:	4a64      	ldr	r2, [pc, #400]	; (8006e38 <Lslalom_R903+0x1bc>)
 8006ca6:	601a      	str	r2, [r3, #0]

	control_start();
 8006ca8:	f7fe f864 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	4a63      	ldr	r2, [pc, #396]	; (8006e40 <Lslalom_R903+0x1c4>)
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	4a63      	ldr	r2, [pc, #396]	; (8006e44 <Lslalom_R903+0x1c8>)
 8006cb6:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_H_OFFSET && dist_r < LSLALOM_H_H_OFFSET);
 8006cb8:	bf00      	nop
 8006cba:	4b62      	ldr	r3, [pc, #392]	; (8006e44 <Lslalom_R903+0x1c8>)
 8006cbc:	edd3 7a00 	vldr	s15, [r3]
 8006cc0:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ccc:	d509      	bpl.n	8006ce2 <Lslalom_R903+0x66>
 8006cce:	4b5c      	ldr	r3, [pc, #368]	; (8006e40 <Lslalom_R903+0x1c4>)
 8006cd0:	edd3 7a00 	vldr	s15, [r3]
 8006cd4:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce0:	d4eb      	bmi.n	8006cba <Lslalom_R903+0x3e>
	drive_stop();
 8006ce2:	f7fe f81f 	bl	8004d24 <drive_stop>
	control_stop();
 8006ce6:	f7fe f859 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006cea:	4a4e      	ldr	r2, [pc, #312]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006cec:	8813      	ldrh	r3, [r2, #0]
 8006cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf2:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LSLALOM_H_H_DEGACCEL;
 8006cf4:	4b54      	ldr	r3, [pc, #336]	; (8006e48 <Lslalom_R903+0x1cc>)
 8006cf6:	4a4d      	ldr	r2, [pc, #308]	; (8006e2c <Lslalom_R903+0x1b0>)
 8006cf8:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006cfa:	4b54      	ldr	r3, [pc, #336]	; (8006e4c <Lslalom_R903+0x1d0>)
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
	omega_max = LSLALOM_H_H_OMEGA;
 8006d02:	4b53      	ldr	r3, [pc, #332]	; (8006e50 <Lslalom_R903+0x1d4>)
 8006d04:	4a53      	ldr	r2, [pc, #332]	; (8006e54 <Lslalom_R903+0x1d8>)
 8006d06:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH_HIGH;
 8006d08:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <Lslalom_R903+0x1dc>)
 8006d0a:	4a4b      	ldr	r2, [pc, #300]	; (8006e38 <Lslalom_R903+0x1bc>)
 8006d0c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006d0e:	4a45      	ldr	r2, [pc, #276]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006d10:	8813      	ldrh	r3, [r2, #0]
 8006d12:	f043 0302 	orr.w	r3, r3, #2
 8006d16:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-40);
 8006d18:	bf00      	nop
 8006d1a:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <Lslalom_R903+0x1e0>)
 8006d1c:	edd3 7a00 	vldr	s15, [r3]
 8006d20:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8006e60 <Lslalom_R903+0x1e4>
 8006d24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d28:	4b4e      	ldr	r3, [pc, #312]	; (8006e64 <Lslalom_R903+0x1e8>)
 8006d2a:	edd3 7a00 	vldr	s15, [r3]
 8006d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d36:	d4f0      	bmi.n	8006d1a <Lslalom_R903+0x9e>

	target_degaccel_z = 0;
 8006d38:	4b43      	ldr	r3, [pc, #268]	; (8006e48 <Lslalom_R903+0x1cc>)
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-50);
 8006d40:	bf00      	nop
 8006d42:	4b46      	ldr	r3, [pc, #280]	; (8006e5c <Lslalom_R903+0x1e0>)
 8006d44:	edd3 7a00 	vldr	s15, [r3]
 8006d48:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006e68 <Lslalom_R903+0x1ec>
 8006d4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d50:	4b44      	ldr	r3, [pc, #272]	; (8006e64 <Lslalom_R903+0x1e8>)
 8006d52:	edd3 7a00 	vldr	s15, [r3]
 8006d56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5e:	d4f0      	bmi.n	8006d42 <Lslalom_R903+0xc6>

	target_degaccel_z = -LSLALOM_H_H_DEGACCEL;
 8006d60:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <Lslalom_R903+0x1cc>)
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <Lslalom_R903+0x1f0>)
 8006d64:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-80);
 8006d66:	bf00      	nop
 8006d68:	4b3c      	ldr	r3, [pc, #240]	; (8006e5c <Lslalom_R903+0x1e0>)
 8006d6a:	edd3 7a00 	vldr	s15, [r3]
 8006d6e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006e70 <Lslalom_R903+0x1f4>
 8006d72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d76:	4b3b      	ldr	r3, [pc, #236]	; (8006e64 <Lslalom_R903+0x1e8>)
 8006d78:	edd3 7a00 	vldr	s15, [r3]
 8006d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d84:	d4f0      	bmi.n	8006d68 <Lslalom_R903+0xec>
	if(!MF.FLAG.XDIR){
 8006d86:	4b27      	ldr	r3, [pc, #156]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <Lslalom_R903+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d94:	2101      	movs	r1, #1
 8006d96:	2001      	movs	r0, #1
 8006d98:	f007 ffe2 	bl	800ed60 <turn_dir>
 8006d9c:	e003      	b.n	8006da6 <Lslalom_R903+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d9e:	2103      	movs	r1, #3
 8006da0:	2002      	movs	r0, #2
 8006da2:	f007 ffdd 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 8006da6:	4a1f      	ldr	r2, [pc, #124]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006da8:	8813      	ldrh	r3, [r2, #0]
 8006daa:	f36f 2308 	bfc	r3, #8, #1
 8006dae:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006db0:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <Lslalom_R903+0x1ac>)
 8006db2:	4a1e      	ldr	r2, [pc, #120]	; (8006e2c <Lslalom_R903+0x1b0>)
 8006db4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006db6:	4b1e      	ldr	r3, [pc, #120]	; (8006e30 <Lslalom_R903+0x1b4>)
 8006db8:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <Lslalom_R903+0x1b0>)
 8006dba:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006dbc:	4b1d      	ldr	r3, [pc, #116]	; (8006e34 <Lslalom_R903+0x1b8>)
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <Lslalom_R903+0x1bc>)
 8006dc0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006dc2:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <Lslalom_R903+0x1c0>)
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	; (8006e38 <Lslalom_R903+0x1bc>)
 8006dc6:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <Lslalom_R903+0x1c4>)
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <Lslalom_R903+0x1c8>)
 8006dd2:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006dd4:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006dd6:	8813      	ldrh	r3, [r2, #0]
 8006dd8:	f043 0304 	orr.w	r3, r3, #4
 8006ddc:	8013      	strh	r3, [r2, #0]
	control_start();
 8006dde:	f7fd ffc9 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_H_OFFSET && dist_r < LSLALOM_H_H_OFFSET);
 8006de2:	bf00      	nop
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <Lslalom_R903+0x1c8>)
 8006de6:	edd3 7a00 	vldr	s15, [r3]
 8006dea:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df6:	d509      	bpl.n	8006e0c <Lslalom_R903+0x190>
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <Lslalom_R903+0x1c4>)
 8006dfa:	edd3 7a00 	vldr	s15, [r3]
 8006dfe:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0a:	d4eb      	bmi.n	8006de4 <Lslalom_R903+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <Lslalom_R903+0x1a8>)
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <Lslalom_R903+0x1a2>
 8006e1a:	f009 fcfd 	bl	8010818 <get_wall_info>
}
 8006e1e:	bf00      	nop
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000fa8 	.word	0x20000fa8
 8006e28:	20000d9c 	.word	0x20000d9c
 8006e2c:	461c4000 	.word	0x461c4000
 8006e30:	20000b20 	.word	0x20000b20
 8006e34:	200007b4 	.word	0x200007b4
 8006e38:	44960000 	.word	0x44960000
 8006e3c:	200001dc 	.word	0x200001dc
 8006e40:	20000b2c 	.word	0x20000b2c
 8006e44:	200012e4 	.word	0x200012e4
 8006e48:	20000b98 	.word	0x20000b98
 8006e4c:	200001e0 	.word	0x200001e0
 8006e50:	20000b24 	.word	0x20000b24
 8006e54:	44480000 	.word	0x44480000
 8006e58:	20000b34 	.word	0x20000b34
 8006e5c:	20000c3c 	.word	0x20000c3c
 8006e60:	42200000 	.word	0x42200000
 8006e64:	20000b9c 	.word	0x20000b9c
 8006e68:	42480000 	.word	0x42480000
 8006e6c:	c61c4000 	.word	0xc61c4000
 8006e70:	42a00000 	.word	0x42a00000

08006e74 <Lslalom_L903>:
//Lslalom_L903
// 大回りスラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L903(void){
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
	full_led_write(6);
 8006e78:	2006      	movs	r0, #6
 8006e7a:	f009 fd41 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006e7e:	4a67      	ldr	r2, [pc, #412]	; (800701c <Lslalom_L903+0x1a8>)
 8006e80:	8813      	ldrh	r3, [r2, #0]
 8006e82:	f36f 2308 	bfc	r3, #8, #1
 8006e86:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006e88:	4b65      	ldr	r3, [pc, #404]	; (8007020 <Lslalom_L903+0x1ac>)
 8006e8a:	4a66      	ldr	r2, [pc, #408]	; (8007024 <Lslalom_L903+0x1b0>)
 8006e8c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006e8e:	4b66      	ldr	r3, [pc, #408]	; (8007028 <Lslalom_L903+0x1b4>)
 8006e90:	4a64      	ldr	r2, [pc, #400]	; (8007024 <Lslalom_L903+0x1b0>)
 8006e92:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006e94:	4b65      	ldr	r3, [pc, #404]	; (800702c <Lslalom_L903+0x1b8>)
 8006e96:	4a66      	ldr	r2, [pc, #408]	; (8007030 <Lslalom_L903+0x1bc>)
 8006e98:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006e9a:	4b66      	ldr	r3, [pc, #408]	; (8007034 <Lslalom_L903+0x1c0>)
 8006e9c:	4a64      	ldr	r2, [pc, #400]	; (8007030 <Lslalom_L903+0x1bc>)
 8006e9e:	601a      	str	r2, [r3, #0]

	control_start();
 8006ea0:	f7fd ff68 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	4a63      	ldr	r2, [pc, #396]	; (8007038 <Lslalom_L903+0x1c4>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	4a63      	ldr	r2, [pc, #396]	; (800703c <Lslalom_L903+0x1c8>)
 8006eae:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_H_OFFSET && dist_r < LSLALOM_H_H_OFFSET);
 8006eb0:	bf00      	nop
 8006eb2:	4b62      	ldr	r3, [pc, #392]	; (800703c <Lslalom_L903+0x1c8>)
 8006eb4:	edd3 7a00 	vldr	s15, [r3]
 8006eb8:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec4:	d509      	bpl.n	8006eda <Lslalom_L903+0x66>
 8006ec6:	4b5c      	ldr	r3, [pc, #368]	; (8007038 <Lslalom_L903+0x1c4>)
 8006ec8:	edd3 7a00 	vldr	s15, [r3]
 8006ecc:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed8:	d4eb      	bmi.n	8006eb2 <Lslalom_L903+0x3e>
	drive_stop();
 8006eda:	f7fd ff23 	bl	8004d24 <drive_stop>
	control_stop();
 8006ede:	f7fd ff5d 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8006ee2:	4a4e      	ldr	r2, [pc, #312]	; (800701c <Lslalom_L903+0x1a8>)
 8006ee4:	8813      	ldrh	r3, [r2, #0]
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eea:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LSLALOM_H_H_DEGACCEL;
 8006eec:	4b54      	ldr	r3, [pc, #336]	; (8007040 <Lslalom_L903+0x1cc>)
 8006eee:	4a55      	ldr	r2, [pc, #340]	; (8007044 <Lslalom_L903+0x1d0>)
 8006ef0:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006ef2:	4b55      	ldr	r3, [pc, #340]	; (8007048 <Lslalom_L903+0x1d4>)
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
	omega_min = -LSLALOM_H_H_OMEGA;
 8006efa:	4b54      	ldr	r3, [pc, #336]	; (800704c <Lslalom_L903+0x1d8>)
 8006efc:	4a54      	ldr	r2, [pc, #336]	; (8007050 <Lslalom_L903+0x1dc>)
 8006efe:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH_HIGH;
 8006f00:	4b54      	ldr	r3, [pc, #336]	; (8007054 <Lslalom_L903+0x1e0>)
 8006f02:	4a4b      	ldr	r2, [pc, #300]	; (8007030 <Lslalom_L903+0x1bc>)
 8006f04:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006f06:	4a45      	ldr	r2, [pc, #276]	; (800701c <Lslalom_L903+0x1a8>)
 8006f08:	8813      	ldrh	r3, [r2, #0]
 8006f0a:	f043 0302 	orr.w	r3, r3, #2
 8006f0e:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+40);
 8006f10:	bf00      	nop
 8006f12:	4b51      	ldr	r3, [pc, #324]	; (8007058 <Lslalom_L903+0x1e4>)
 8006f14:	edd3 7a00 	vldr	s15, [r3]
 8006f18:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800705c <Lslalom_L903+0x1e8>
 8006f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f20:	4b4f      	ldr	r3, [pc, #316]	; (8007060 <Lslalom_L903+0x1ec>)
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2e:	dcf0      	bgt.n	8006f12 <Lslalom_L903+0x9e>

	target_degaccel_z = 0;
 8006f30:	4b43      	ldr	r3, [pc, #268]	; (8007040 <Lslalom_L903+0x1cc>)
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+50);
 8006f38:	bf00      	nop
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <Lslalom_L903+0x1e4>)
 8006f3c:	edd3 7a00 	vldr	s15, [r3]
 8006f40:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007064 <Lslalom_L903+0x1f0>
 8006f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f48:	4b45      	ldr	r3, [pc, #276]	; (8007060 <Lslalom_L903+0x1ec>)
 8006f4a:	edd3 7a00 	vldr	s15, [r3]
 8006f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f56:	dcf0      	bgt.n	8006f3a <Lslalom_L903+0xc6>

	target_degaccel_z = LSLALOM_H_H_DEGACCEL;
 8006f58:	4b39      	ldr	r3, [pc, #228]	; (8007040 <Lslalom_L903+0x1cc>)
 8006f5a:	4a32      	ldr	r2, [pc, #200]	; (8007024 <Lslalom_L903+0x1b0>)
 8006f5c:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+80);
 8006f5e:	bf00      	nop
 8006f60:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <Lslalom_L903+0x1e4>)
 8006f62:	edd3 7a00 	vldr	s15, [r3]
 8006f66:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007068 <Lslalom_L903+0x1f4>
 8006f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f6e:	4b3c      	ldr	r3, [pc, #240]	; (8007060 <Lslalom_L903+0x1ec>)
 8006f70:	edd3 7a00 	vldr	s15, [r3]
 8006f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7c:	dcf0      	bgt.n	8006f60 <Lslalom_L903+0xec>
	if(!MF.FLAG.XDIR){
 8006f7e:	4b27      	ldr	r3, [pc, #156]	; (800701c <Lslalom_L903+0x1a8>)
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <Lslalom_L903+0x122>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	20ff      	movs	r0, #255	; 0xff
 8006f90:	f007 fee6 	bl	800ed60 <turn_dir>
 8006f94:	e003      	b.n	8006f9e <Lslalom_L903+0x12a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f96:	2103      	movs	r1, #3
 8006f98:	20fe      	movs	r0, #254	; 0xfe
 8006f9a:	f007 fee1 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	; (800701c <Lslalom_L903+0x1a8>)
 8006fa0:	8813      	ldrh	r3, [r2, #0]
 8006fa2:	f36f 2308 	bfc	r3, #8, #1
 8006fa6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <Lslalom_L903+0x1ac>)
 8006faa:	4a1e      	ldr	r2, [pc, #120]	; (8007024 <Lslalom_L903+0x1b0>)
 8006fac:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006fae:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <Lslalom_L903+0x1b4>)
 8006fb0:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <Lslalom_L903+0x1b0>)
 8006fb2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006fb4:	4b1d      	ldr	r3, [pc, #116]	; (800702c <Lslalom_L903+0x1b8>)
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <Lslalom_L903+0x1bc>)
 8006fb8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006fba:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <Lslalom_L903+0x1c0>)
 8006fbc:	4a1c      	ldr	r2, [pc, #112]	; (8007030 <Lslalom_L903+0x1bc>)
 8006fbe:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	4a1c      	ldr	r2, [pc, #112]	; (8007038 <Lslalom_L903+0x1c4>)
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	4a1c      	ldr	r2, [pc, #112]	; (800703c <Lslalom_L903+0x1c8>)
 8006fca:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006fcc:	4a13      	ldr	r2, [pc, #76]	; (800701c <Lslalom_L903+0x1a8>)
 8006fce:	8813      	ldrh	r3, [r2, #0]
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	8013      	strh	r3, [r2, #0]
	control_start();
 8006fd6:	f7fd fecd 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_H_OFFSET && dist_r < LSLALOM_H_H_OFFSET);
 8006fda:	bf00      	nop
 8006fdc:	4b17      	ldr	r3, [pc, #92]	; (800703c <Lslalom_L903+0x1c8>)
 8006fde:	edd3 7a00 	vldr	s15, [r3]
 8006fe2:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fee:	d509      	bpl.n	8007004 <Lslalom_L903+0x190>
 8006ff0:	4b11      	ldr	r3, [pc, #68]	; (8007038 <Lslalom_L903+0x1c4>)
 8006ff2:	edd3 7a00 	vldr	s15, [r3]
 8006ff6:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8006ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d4eb      	bmi.n	8006fdc <Lslalom_L903+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <Lslalom_L903+0x1a8>)
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <Lslalom_L903+0x1a2>
 8007012:	f009 fc01 	bl	8010818 <get_wall_info>
}
 8007016:	bf00      	nop
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000fa8 	.word	0x20000fa8
 8007020:	20000d9c 	.word	0x20000d9c
 8007024:	461c4000 	.word	0x461c4000
 8007028:	20000b20 	.word	0x20000b20
 800702c:	200007b4 	.word	0x200007b4
 8007030:	44960000 	.word	0x44960000
 8007034:	200001dc 	.word	0x200001dc
 8007038:	20000b2c 	.word	0x20000b2c
 800703c:	200012e4 	.word	0x200012e4
 8007040:	20000b98 	.word	0x20000b98
 8007044:	c61c4000 	.word	0xc61c4000
 8007048:	200001e0 	.word	0x200001e0
 800704c:	200002f0 	.word	0x200002f0
 8007050:	c4480000 	.word	0xc4480000
 8007054:	20000b34 	.word	0x20000b34
 8007058:	20000c3c 	.word	0x20000c3c
 800705c:	42200000 	.word	0x42200000
 8007060:	20000b9c 	.word	0x20000b9c
 8007064:	42480000 	.word	0x42480000
 8007068:	42a00000 	.word	0x42a00000

0800706c <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
	full_led_write(2);
 8007070:	2002      	movs	r0, #2
 8007072:	f009 fc45 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007076:	4a69      	ldr	r2, [pc, #420]	; (800721c <Lslalom_R180+0x1b0>)
 8007078:	8813      	ldrh	r3, [r2, #0]
 800707a:	f36f 2308 	bfc	r3, #8, #1
 800707e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007080:	4b67      	ldr	r3, [pc, #412]	; (8007220 <Lslalom_R180+0x1b4>)
 8007082:	4a68      	ldr	r2, [pc, #416]	; (8007224 <Lslalom_R180+0x1b8>)
 8007084:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007086:	4b68      	ldr	r3, [pc, #416]	; (8007228 <Lslalom_R180+0x1bc>)
 8007088:	4a66      	ldr	r2, [pc, #408]	; (8007224 <Lslalom_R180+0x1b8>)
 800708a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800708c:	4b67      	ldr	r3, [pc, #412]	; (800722c <Lslalom_R180+0x1c0>)
 800708e:	4a68      	ldr	r2, [pc, #416]	; (8007230 <Lslalom_R180+0x1c4>)
 8007090:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007092:	4b68      	ldr	r3, [pc, #416]	; (8007234 <Lslalom_R180+0x1c8>)
 8007094:	4a66      	ldr	r2, [pc, #408]	; (8007230 <Lslalom_R180+0x1c4>)
 8007096:	601a      	str	r2, [r3, #0]

	control_start();
 8007098:	f7fd fe6c 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	4a65      	ldr	r2, [pc, #404]	; (8007238 <Lslalom_R180+0x1cc>)
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4a65      	ldr	r2, [pc, #404]	; (800723c <Lslalom_R180+0x1d0>)
 80070a6:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_OFFSET && dist_r < LROTATE_OFFSET);
 80070a8:	bf00      	nop
 80070aa:	4b64      	ldr	r3, [pc, #400]	; (800723c <Lslalom_R180+0x1d0>)
 80070ac:	edd3 7a00 	vldr	s15, [r3]
 80070b0:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8007240 <Lslalom_R180+0x1d4>
 80070b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070bc:	d509      	bpl.n	80070d2 <Lslalom_R180+0x66>
 80070be:	4b5e      	ldr	r3, [pc, #376]	; (8007238 <Lslalom_R180+0x1cc>)
 80070c0:	edd3 7a00 	vldr	s15, [r3]
 80070c4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007240 <Lslalom_R180+0x1d4>
 80070c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d0:	d4eb      	bmi.n	80070aa <Lslalom_R180+0x3e>
	drive_stop();
 80070d2:	f7fd fe27 	bl	8004d24 <drive_stop>
	control_stop();
 80070d6:	f7fd fe61 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80070da:	4a50      	ldr	r2, [pc, #320]	; (800721c <Lslalom_R180+0x1b0>)
 80070dc:	8813      	ldrh	r3, [r2, #0]
 80070de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e2:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LROTATE_DEGACCEL;
 80070e4:	4b57      	ldr	r3, [pc, #348]	; (8007244 <Lslalom_R180+0x1d8>)
 80070e6:	4a58      	ldr	r2, [pc, #352]	; (8007248 <Lslalom_R180+0x1dc>)
 80070e8:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80070ea:	4b58      	ldr	r3, [pc, #352]	; (800724c <Lslalom_R180+0x1e0>)
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
	omega_max = LROTATE_OMEGA;
 80070f2:	4b57      	ldr	r3, [pc, #348]	; (8007250 <Lslalom_R180+0x1e4>)
 80070f4:	4a57      	ldr	r2, [pc, #348]	; (8007254 <Lslalom_R180+0x1e8>)
 80070f6:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 80070f8:	4b57      	ldr	r3, [pc, #348]	; (8007258 <Lslalom_R180+0x1ec>)
 80070fa:	4a4d      	ldr	r2, [pc, #308]	; (8007230 <Lslalom_R180+0x1c4>)
 80070fc:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80070fe:	4a47      	ldr	r2, [pc, #284]	; (800721c <Lslalom_R180+0x1b0>)
 8007100:	8813      	ldrh	r3, [r2, #0]
 8007102:	f043 0302 	orr.w	r3, r3, #2
 8007106:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-40);
 8007108:	bf00      	nop
 800710a:	4b54      	ldr	r3, [pc, #336]	; (800725c <Lslalom_R180+0x1f0>)
 800710c:	edd3 7a00 	vldr	s15, [r3]
 8007110:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8007260 <Lslalom_R180+0x1f4>
 8007114:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007118:	4b52      	ldr	r3, [pc, #328]	; (8007264 <Lslalom_R180+0x1f8>)
 800711a:	edd3 7a00 	vldr	s15, [r3]
 800711e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	d4f0      	bmi.n	800710a <Lslalom_R180+0x9e>

	target_degaccel_z = 0;
 8007128:	4b46      	ldr	r3, [pc, #280]	; (8007244 <Lslalom_R180+0x1d8>)
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-160);
 8007130:	bf00      	nop
 8007132:	4b4a      	ldr	r3, [pc, #296]	; (800725c <Lslalom_R180+0x1f0>)
 8007134:	edd3 7a00 	vldr	s15, [r3]
 8007138:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007268 <Lslalom_R180+0x1fc>
 800713c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007140:	4b48      	ldr	r3, [pc, #288]	; (8007264 <Lslalom_R180+0x1f8>)
 8007142:	edd3 7a00 	vldr	s15, [r3]
 8007146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800714a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714e:	d4f0      	bmi.n	8007132 <Lslalom_R180+0xc6>

	target_degaccel_z = -LROTATE_DEGACCEL;
 8007150:	4b3c      	ldr	r3, [pc, #240]	; (8007244 <Lslalom_R180+0x1d8>)
 8007152:	4a46      	ldr	r2, [pc, #280]	; (800726c <Lslalom_R180+0x200>)
 8007154:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8007156:	bf00      	nop
 8007158:	4b40      	ldr	r3, [pc, #256]	; (800725c <Lslalom_R180+0x1f0>)
 800715a:	edd3 7a00 	vldr	s15, [r3]
 800715e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007270 <Lslalom_R180+0x204>
 8007162:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007166:	4b3f      	ldr	r3, [pc, #252]	; (8007264 <Lslalom_R180+0x1f8>)
 8007168:	edd3 7a00 	vldr	s15, [r3]
 800716c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	d4f0      	bmi.n	8007158 <Lslalom_R180+0xec>
	if(!MF.FLAG.XDIR){
 8007176:	4b29      	ldr	r3, [pc, #164]	; (800721c <Lslalom_R180+0x1b0>)
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d108      	bne.n	8007196 <Lslalom_R180+0x12a>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007184:	2101      	movs	r1, #1
 8007186:	2001      	movs	r0, #1
 8007188:	f007 fdea 	bl	800ed60 <turn_dir>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800718c:	2101      	movs	r1, #1
 800718e:	2001      	movs	r0, #1
 8007190:	f007 fde6 	bl	800ed60 <turn_dir>
 8007194:	e003      	b.n	800719e <Lslalom_R180+0x132>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007196:	2103      	movs	r1, #3
 8007198:	2004      	movs	r0, #4
 800719a:	f007 fde1 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 800719e:	4a1f      	ldr	r2, [pc, #124]	; (800721c <Lslalom_R180+0x1b0>)
 80071a0:	8813      	ldrh	r3, [r2, #0]
 80071a2:	f36f 2308 	bfc	r3, #8, #1
 80071a6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80071a8:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <Lslalom_R180+0x1b4>)
 80071aa:	4a1e      	ldr	r2, [pc, #120]	; (8007224 <Lslalom_R180+0x1b8>)
 80071ac:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <Lslalom_R180+0x1bc>)
 80071b0:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <Lslalom_R180+0x1b8>)
 80071b2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80071b4:	4b1d      	ldr	r3, [pc, #116]	; (800722c <Lslalom_R180+0x1c0>)
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <Lslalom_R180+0x1c4>)
 80071b8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80071ba:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <Lslalom_R180+0x1c8>)
 80071bc:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <Lslalom_R180+0x1c4>)
 80071be:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <Lslalom_R180+0x1cc>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	4a1c      	ldr	r2, [pc, #112]	; (800723c <Lslalom_R180+0x1d0>)
 80071ca:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80071cc:	4a13      	ldr	r2, [pc, #76]	; (800721c <Lslalom_R180+0x1b0>)
 80071ce:	8813      	ldrh	r3, [r2, #0]
 80071d0:	f043 0304 	orr.w	r3, r3, #4
 80071d4:	8013      	strh	r3, [r2, #0]
	control_start();
 80071d6:	f7fd fdcd 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_OFFSET && dist_r < LROTATE_OFFSET);
 80071da:	bf00      	nop
 80071dc:	4b17      	ldr	r3, [pc, #92]	; (800723c <Lslalom_R180+0x1d0>)
 80071de:	edd3 7a00 	vldr	s15, [r3]
 80071e2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007240 <Lslalom_R180+0x1d4>
 80071e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ee:	d509      	bpl.n	8007204 <Lslalom_R180+0x198>
 80071f0:	4b11      	ldr	r3, [pc, #68]	; (8007238 <Lslalom_R180+0x1cc>)
 80071f2:	edd3 7a00 	vldr	s15, [r3]
 80071f6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007240 <Lslalom_R180+0x1d4>
 80071fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007202:	d4eb      	bmi.n	80071dc <Lslalom_R180+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <Lslalom_R180+0x1b0>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <Lslalom_R180+0x1aa>
 8007212:	f009 fb01 	bl	8010818 <get_wall_info>
}
 8007216:	bf00      	nop
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000fa8 	.word	0x20000fa8
 8007220:	20000d9c 	.word	0x20000d9c
 8007224:	461c4000 	.word	0x461c4000
 8007228:	20000b20 	.word	0x20000b20
 800722c:	200007b4 	.word	0x200007b4
 8007230:	43c80000 	.word	0x43c80000
 8007234:	200001dc 	.word	0x200001dc
 8007238:	20000b2c 	.word	0x20000b2c
 800723c:	200012e4 	.word	0x200012e4
 8007240:	42700000 	.word	0x42700000
 8007244:	20000b98 	.word	0x20000b98
 8007248:	44fa0000 	.word	0x44fa0000
 800724c:	200001e0 	.word	0x200001e0
 8007250:	20000b24 	.word	0x20000b24
 8007254:	43af0000 	.word	0x43af0000
 8007258:	20000b34 	.word	0x20000b34
 800725c:	20000c3c 	.word	0x20000c3c
 8007260:	42200000 	.word	0x42200000
 8007264:	20000b9c 	.word	0x20000b9c
 8007268:	43200000 	.word	0x43200000
 800726c:	c4fa0000 	.word	0xc4fa0000
 8007270:	43340000 	.word	0x43340000

08007274 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
	full_led_write(2);
 8007278:	2002      	movs	r0, #2
 800727a:	f009 fb41 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 800727e:	4a69      	ldr	r2, [pc, #420]	; (8007424 <Lslalom_L180+0x1b0>)
 8007280:	8813      	ldrh	r3, [r2, #0]
 8007282:	f36f 2308 	bfc	r3, #8, #1
 8007286:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007288:	4b67      	ldr	r3, [pc, #412]	; (8007428 <Lslalom_L180+0x1b4>)
 800728a:	4a68      	ldr	r2, [pc, #416]	; (800742c <Lslalom_L180+0x1b8>)
 800728c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800728e:	4b68      	ldr	r3, [pc, #416]	; (8007430 <Lslalom_L180+0x1bc>)
 8007290:	4a66      	ldr	r2, [pc, #408]	; (800742c <Lslalom_L180+0x1b8>)
 8007292:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007294:	4b67      	ldr	r3, [pc, #412]	; (8007434 <Lslalom_L180+0x1c0>)
 8007296:	4a68      	ldr	r2, [pc, #416]	; (8007438 <Lslalom_L180+0x1c4>)
 8007298:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800729a:	4b68      	ldr	r3, [pc, #416]	; (800743c <Lslalom_L180+0x1c8>)
 800729c:	4a66      	ldr	r2, [pc, #408]	; (8007438 <Lslalom_L180+0x1c4>)
 800729e:	601a      	str	r2, [r3, #0]

	control_start();
 80072a0:	f7fd fd68 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	4a65      	ldr	r2, [pc, #404]	; (8007440 <Lslalom_L180+0x1cc>)
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4a65      	ldr	r2, [pc, #404]	; (8007444 <Lslalom_L180+0x1d0>)
 80072ae:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_OFFSET && dist_r < LROTATE_OFFSET);
 80072b0:	bf00      	nop
 80072b2:	4b64      	ldr	r3, [pc, #400]	; (8007444 <Lslalom_L180+0x1d0>)
 80072b4:	edd3 7a00 	vldr	s15, [r3]
 80072b8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8007448 <Lslalom_L180+0x1d4>
 80072bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c4:	d509      	bpl.n	80072da <Lslalom_L180+0x66>
 80072c6:	4b5e      	ldr	r3, [pc, #376]	; (8007440 <Lslalom_L180+0x1cc>)
 80072c8:	edd3 7a00 	vldr	s15, [r3]
 80072cc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007448 <Lslalom_L180+0x1d4>
 80072d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d8:	d4eb      	bmi.n	80072b2 <Lslalom_L180+0x3e>
	drive_stop();
 80072da:	f7fd fd23 	bl	8004d24 <drive_stop>
	control_stop();
 80072de:	f7fd fd5d 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80072e2:	4a50      	ldr	r2, [pc, #320]	; (8007424 <Lslalom_L180+0x1b0>)
 80072e4:	8813      	ldrh	r3, [r2, #0]
 80072e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ea:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LROTATE_DEGACCEL;
 80072ec:	4b57      	ldr	r3, [pc, #348]	; (800744c <Lslalom_L180+0x1d8>)
 80072ee:	4a58      	ldr	r2, [pc, #352]	; (8007450 <Lslalom_L180+0x1dc>)
 80072f0:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80072f2:	4b58      	ldr	r3, [pc, #352]	; (8007454 <Lslalom_L180+0x1e0>)
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
	omega_min = -LROTATE_OMEGA;
 80072fa:	4b57      	ldr	r3, [pc, #348]	; (8007458 <Lslalom_L180+0x1e4>)
 80072fc:	4a57      	ldr	r2, [pc, #348]	; (800745c <Lslalom_L180+0x1e8>)
 80072fe:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007300:	4b57      	ldr	r3, [pc, #348]	; (8007460 <Lslalom_L180+0x1ec>)
 8007302:	4a4d      	ldr	r2, [pc, #308]	; (8007438 <Lslalom_L180+0x1c4>)
 8007304:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007306:	4a47      	ldr	r2, [pc, #284]	; (8007424 <Lslalom_L180+0x1b0>)
 8007308:	8813      	ldrh	r3, [r2, #0]
 800730a:	f043 0302 	orr.w	r3, r3, #2
 800730e:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+40);
 8007310:	bf00      	nop
 8007312:	4b54      	ldr	r3, [pc, #336]	; (8007464 <Lslalom_L180+0x1f0>)
 8007314:	edd3 7a00 	vldr	s15, [r3]
 8007318:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8007468 <Lslalom_L180+0x1f4>
 800731c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007320:	4b52      	ldr	r3, [pc, #328]	; (800746c <Lslalom_L180+0x1f8>)
 8007322:	edd3 7a00 	vldr	s15, [r3]
 8007326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	dcf0      	bgt.n	8007312 <Lslalom_L180+0x9e>

	target_degaccel_z = 0;
 8007330:	4b46      	ldr	r3, [pc, #280]	; (800744c <Lslalom_L180+0x1d8>)
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+160);
 8007338:	bf00      	nop
 800733a:	4b4a      	ldr	r3, [pc, #296]	; (8007464 <Lslalom_L180+0x1f0>)
 800733c:	edd3 7a00 	vldr	s15, [r3]
 8007340:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007470 <Lslalom_L180+0x1fc>
 8007344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007348:	4b48      	ldr	r3, [pc, #288]	; (800746c <Lslalom_L180+0x1f8>)
 800734a:	edd3 7a00 	vldr	s15, [r3]
 800734e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007356:	dcf0      	bgt.n	800733a <Lslalom_L180+0xc6>

	target_degaccel_z = LROTATE_DEGACCEL;
 8007358:	4b3c      	ldr	r3, [pc, #240]	; (800744c <Lslalom_L180+0x1d8>)
 800735a:	4a46      	ldr	r2, [pc, #280]	; (8007474 <Lslalom_L180+0x200>)
 800735c:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+180);
 800735e:	bf00      	nop
 8007360:	4b40      	ldr	r3, [pc, #256]	; (8007464 <Lslalom_L180+0x1f0>)
 8007362:	edd3 7a00 	vldr	s15, [r3]
 8007366:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007478 <Lslalom_L180+0x204>
 800736a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736e:	4b3f      	ldr	r3, [pc, #252]	; (800746c <Lslalom_L180+0x1f8>)
 8007370:	edd3 7a00 	vldr	s15, [r3]
 8007374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	dcf0      	bgt.n	8007360 <Lslalom_L180+0xec>
	if(!MF.FLAG.XDIR){
 800737e:	4b29      	ldr	r3, [pc, #164]	; (8007424 <Lslalom_L180+0x1b0>)
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <Lslalom_L180+0x12a>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800738c:	2101      	movs	r1, #1
 800738e:	20ff      	movs	r0, #255	; 0xff
 8007390:	f007 fce6 	bl	800ed60 <turn_dir>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007394:	2101      	movs	r1, #1
 8007396:	20ff      	movs	r0, #255	; 0xff
 8007398:	f007 fce2 	bl	800ed60 <turn_dir>
 800739c:	e003      	b.n	80073a6 <Lslalom_L180+0x132>
	}else{
		turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800739e:	2103      	movs	r1, #3
 80073a0:	20fc      	movs	r0, #252	; 0xfc
 80073a2:	f007 fcdd 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80073a6:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <Lslalom_L180+0x1b0>)
 80073a8:	8813      	ldrh	r3, [r2, #0]
 80073aa:	f36f 2308 	bfc	r3, #8, #1
 80073ae:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80073b0:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <Lslalom_L180+0x1b4>)
 80073b2:	4a1e      	ldr	r2, [pc, #120]	; (800742c <Lslalom_L180+0x1b8>)
 80073b4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <Lslalom_L180+0x1bc>)
 80073b8:	4a1c      	ldr	r2, [pc, #112]	; (800742c <Lslalom_L180+0x1b8>)
 80073ba:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80073bc:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <Lslalom_L180+0x1c0>)
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <Lslalom_L180+0x1c4>)
 80073c0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80073c2:	4b1e      	ldr	r3, [pc, #120]	; (800743c <Lslalom_L180+0x1c8>)
 80073c4:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <Lslalom_L180+0x1c4>)
 80073c6:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <Lslalom_L180+0x1cc>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <Lslalom_L180+0x1d0>)
 80073d2:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80073d4:	4a13      	ldr	r2, [pc, #76]	; (8007424 <Lslalom_L180+0x1b0>)
 80073d6:	8813      	ldrh	r3, [r2, #0]
 80073d8:	f043 0304 	orr.w	r3, r3, #4
 80073dc:	8013      	strh	r3, [r2, #0]
	control_start();
 80073de:	f7fd fcc9 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_OFFSET && dist_r < LROTATE_OFFSET);
 80073e2:	bf00      	nop
 80073e4:	4b17      	ldr	r3, [pc, #92]	; (8007444 <Lslalom_L180+0x1d0>)
 80073e6:	edd3 7a00 	vldr	s15, [r3]
 80073ea:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007448 <Lslalom_L180+0x1d4>
 80073ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f6:	d509      	bpl.n	800740c <Lslalom_L180+0x198>
 80073f8:	4b11      	ldr	r3, [pc, #68]	; (8007440 <Lslalom_L180+0x1cc>)
 80073fa:	edd3 7a00 	vldr	s15, [r3]
 80073fe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007448 <Lslalom_L180+0x1d4>
 8007402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d4eb      	bmi.n	80073e4 <Lslalom_L180+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <Lslalom_L180+0x1b0>)
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <Lslalom_L180+0x1aa>
 800741a:	f009 f9fd 	bl	8010818 <get_wall_info>
}
 800741e:	bf00      	nop
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000fa8 	.word	0x20000fa8
 8007428:	20000d9c 	.word	0x20000d9c
 800742c:	461c4000 	.word	0x461c4000
 8007430:	20000b20 	.word	0x20000b20
 8007434:	200007b4 	.word	0x200007b4
 8007438:	43c80000 	.word	0x43c80000
 800743c:	200001dc 	.word	0x200001dc
 8007440:	20000b2c 	.word	0x20000b2c
 8007444:	200012e4 	.word	0x200012e4
 8007448:	42700000 	.word	0x42700000
 800744c:	20000b98 	.word	0x20000b98
 8007450:	c4fa0000 	.word	0xc4fa0000
 8007454:	200001e0 	.word	0x200001e0
 8007458:	200002f0 	.word	0x200002f0
 800745c:	c3af0000 	.word	0xc3af0000
 8007460:	20000b34 	.word	0x20000b34
 8007464:	20000c3c 	.word	0x20000c3c
 8007468:	42200000 	.word	0x42200000
 800746c:	20000b9c 	.word	0x20000b9c
 8007470:	43200000 	.word	0x43200000
 8007474:	44fa0000 	.word	0x44fa0000
 8007478:	43340000 	.word	0x43340000

0800747c <Lslalom_R1802>:
//Lslalom_R1802
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R1802(void){
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
	full_led_write(2);
 8007480:	2002      	movs	r0, #2
 8007482:	f009 fa3d 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007486:	4a69      	ldr	r2, [pc, #420]	; (800762c <Lslalom_R1802+0x1b0>)
 8007488:	8813      	ldrh	r3, [r2, #0]
 800748a:	f36f 2308 	bfc	r3, #8, #1
 800748e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007490:	4b67      	ldr	r3, [pc, #412]	; (8007630 <Lslalom_R1802+0x1b4>)
 8007492:	4a68      	ldr	r2, [pc, #416]	; (8007634 <Lslalom_R1802+0x1b8>)
 8007494:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007496:	4b68      	ldr	r3, [pc, #416]	; (8007638 <Lslalom_R1802+0x1bc>)
 8007498:	4a66      	ldr	r2, [pc, #408]	; (8007634 <Lslalom_R1802+0x1b8>)
 800749a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800749c:	4b67      	ldr	r3, [pc, #412]	; (800763c <Lslalom_R1802+0x1c0>)
 800749e:	4a68      	ldr	r2, [pc, #416]	; (8007640 <Lslalom_R1802+0x1c4>)
 80074a0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80074a2:	4b68      	ldr	r3, [pc, #416]	; (8007644 <Lslalom_R1802+0x1c8>)
 80074a4:	4a66      	ldr	r2, [pc, #408]	; (8007640 <Lslalom_R1802+0x1c4>)
 80074a6:	601a      	str	r2, [r3, #0]

	control_start();
 80074a8:	f7fd fc64 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	4a65      	ldr	r2, [pc, #404]	; (8007648 <Lslalom_R1802+0x1cc>)
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	4a65      	ldr	r2, [pc, #404]	; (800764c <Lslalom_R1802+0x1d0>)
 80074b6:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_H_OFFSET && dist_r < LROTATE_H_OFFSET);
 80074b8:	bf00      	nop
 80074ba:	4b64      	ldr	r3, [pc, #400]	; (800764c <Lslalom_R1802+0x1d0>)
 80074bc:	edd3 7a00 	vldr	s15, [r3]
 80074c0:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80074c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074cc:	d509      	bpl.n	80074e2 <Lslalom_R1802+0x66>
 80074ce:	4b5e      	ldr	r3, [pc, #376]	; (8007648 <Lslalom_R1802+0x1cc>)
 80074d0:	edd3 7a00 	vldr	s15, [r3]
 80074d4:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80074d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e0:	d4eb      	bmi.n	80074ba <Lslalom_R1802+0x3e>
	drive_stop();
 80074e2:	f7fd fc1f 	bl	8004d24 <drive_stop>
	control_stop();
 80074e6:	f7fd fc59 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80074ea:	4a50      	ldr	r2, [pc, #320]	; (800762c <Lslalom_R1802+0x1b0>)
 80074ec:	8813      	ldrh	r3, [r2, #0]
 80074ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f2:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LROTATE_H_DEGACCEL;
 80074f4:	4b56      	ldr	r3, [pc, #344]	; (8007650 <Lslalom_R1802+0x1d4>)
 80074f6:	4a57      	ldr	r2, [pc, #348]	; (8007654 <Lslalom_R1802+0x1d8>)
 80074f8:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80074fa:	4b57      	ldr	r3, [pc, #348]	; (8007658 <Lslalom_R1802+0x1dc>)
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
	omega_max = LROTATE_H_OMEGA;
 8007502:	4b56      	ldr	r3, [pc, #344]	; (800765c <Lslalom_R1802+0x1e0>)
 8007504:	4a56      	ldr	r2, [pc, #344]	; (8007660 <Lslalom_R1802+0x1e4>)
 8007506:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8007508:	4b56      	ldr	r3, [pc, #344]	; (8007664 <Lslalom_R1802+0x1e8>)
 800750a:	4a4d      	ldr	r2, [pc, #308]	; (8007640 <Lslalom_R1802+0x1c4>)
 800750c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800750e:	4a47      	ldr	r2, [pc, #284]	; (800762c <Lslalom_R1802+0x1b0>)
 8007510:	8813      	ldrh	r3, [r2, #0]
 8007512:	f043 0302 	orr.w	r3, r3, #2
 8007516:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-70);
 8007518:	bf00      	nop
 800751a:	4b53      	ldr	r3, [pc, #332]	; (8007668 <Lslalom_R1802+0x1ec>)
 800751c:	edd3 7a00 	vldr	s15, [r3]
 8007520:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800766c <Lslalom_R1802+0x1f0>
 8007524:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007528:	4b51      	ldr	r3, [pc, #324]	; (8007670 <Lslalom_R1802+0x1f4>)
 800752a:	edd3 7a00 	vldr	s15, [r3]
 800752e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	d4f0      	bmi.n	800751a <Lslalom_R1802+0x9e>

	target_degaccel_z = 0;
 8007538:	4b45      	ldr	r3, [pc, #276]	; (8007650 <Lslalom_R1802+0x1d4>)
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-130);
 8007540:	bf00      	nop
 8007542:	4b49      	ldr	r3, [pc, #292]	; (8007668 <Lslalom_R1802+0x1ec>)
 8007544:	edd3 7a00 	vldr	s15, [r3]
 8007548:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007674 <Lslalom_R1802+0x1f8>
 800754c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007550:	4b47      	ldr	r3, [pc, #284]	; (8007670 <Lslalom_R1802+0x1f4>)
 8007552:	edd3 7a00 	vldr	s15, [r3]
 8007556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755e:	d4f0      	bmi.n	8007542 <Lslalom_R1802+0xc6>

	target_degaccel_z = -LROTATE_H_DEGACCEL;
 8007560:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <Lslalom_R1802+0x1d4>)
 8007562:	4a45      	ldr	r2, [pc, #276]	; (8007678 <Lslalom_R1802+0x1fc>)
 8007564:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8007566:	bf00      	nop
 8007568:	4b3f      	ldr	r3, [pc, #252]	; (8007668 <Lslalom_R1802+0x1ec>)
 800756a:	edd3 7a00 	vldr	s15, [r3]
 800756e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800767c <Lslalom_R1802+0x200>
 8007572:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007576:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <Lslalom_R1802+0x1f4>)
 8007578:	edd3 7a00 	vldr	s15, [r3]
 800757c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007584:	d4f0      	bmi.n	8007568 <Lslalom_R1802+0xec>
	if(!MF.FLAG.XDIR){
 8007586:	4b29      	ldr	r3, [pc, #164]	; (800762c <Lslalom_R1802+0x1b0>)
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d108      	bne.n	80075a6 <Lslalom_R1802+0x12a>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007594:	2101      	movs	r1, #1
 8007596:	2001      	movs	r0, #1
 8007598:	f007 fbe2 	bl	800ed60 <turn_dir>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800759c:	2101      	movs	r1, #1
 800759e:	2001      	movs	r0, #1
 80075a0:	f007 fbde 	bl	800ed60 <turn_dir>
 80075a4:	e003      	b.n	80075ae <Lslalom_R1802+0x132>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075a6:	2103      	movs	r1, #3
 80075a8:	2004      	movs	r0, #4
 80075aa:	f007 fbd9 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80075ae:	4a1f      	ldr	r2, [pc, #124]	; (800762c <Lslalom_R1802+0x1b0>)
 80075b0:	8813      	ldrh	r3, [r2, #0]
 80075b2:	f36f 2308 	bfc	r3, #8, #1
 80075b6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80075b8:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <Lslalom_R1802+0x1b4>)
 80075ba:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <Lslalom_R1802+0x1b8>)
 80075bc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80075be:	4b1e      	ldr	r3, [pc, #120]	; (8007638 <Lslalom_R1802+0x1bc>)
 80075c0:	4a1c      	ldr	r2, [pc, #112]	; (8007634 <Lslalom_R1802+0x1b8>)
 80075c2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <Lslalom_R1802+0x1c0>)
 80075c6:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <Lslalom_R1802+0x1c4>)
 80075c8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <Lslalom_R1802+0x1c8>)
 80075cc:	4a1c      	ldr	r2, [pc, #112]	; (8007640 <Lslalom_R1802+0x1c4>)
 80075ce:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <Lslalom_R1802+0x1cc>)
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <Lslalom_R1802+0x1d0>)
 80075da:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80075dc:	4a13      	ldr	r2, [pc, #76]	; (800762c <Lslalom_R1802+0x1b0>)
 80075de:	8813      	ldrh	r3, [r2, #0]
 80075e0:	f043 0304 	orr.w	r3, r3, #4
 80075e4:	8013      	strh	r3, [r2, #0]
	control_start();
 80075e6:	f7fd fbc5 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_H_OFFSET && dist_r < LROTATE_H_OFFSET);
 80075ea:	bf00      	nop
 80075ec:	4b17      	ldr	r3, [pc, #92]	; (800764c <Lslalom_R1802+0x1d0>)
 80075ee:	edd3 7a00 	vldr	s15, [r3]
 80075f2:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80075f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fe:	d509      	bpl.n	8007614 <Lslalom_R1802+0x198>
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <Lslalom_R1802+0x1cc>)
 8007602:	edd3 7a00 	vldr	s15, [r3]
 8007606:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800760a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	d4eb      	bmi.n	80075ec <Lslalom_R1802+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <Lslalom_R1802+0x1b0>)
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <Lslalom_R1802+0x1aa>
 8007622:	f009 f8f9 	bl	8010818 <get_wall_info>
}
 8007626:	bf00      	nop
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000fa8 	.word	0x20000fa8
 8007630:	20000d9c 	.word	0x20000d9c
 8007634:	461c4000 	.word	0x461c4000
 8007638:	20000b20 	.word	0x20000b20
 800763c:	200007b4 	.word	0x200007b4
 8007640:	44480000 	.word	0x44480000
 8007644:	200001dc 	.word	0x200001dc
 8007648:	20000b2c 	.word	0x20000b2c
 800764c:	200012e4 	.word	0x200012e4
 8007650:	20000b98 	.word	0x20000b98
 8007654:	453b8000 	.word	0x453b8000
 8007658:	200001e0 	.word	0x200001e0
 800765c:	20000b24 	.word	0x20000b24
 8007660:	44160000 	.word	0x44160000
 8007664:	20000b34 	.word	0x20000b34
 8007668:	20000c3c 	.word	0x20000c3c
 800766c:	428c0000 	.word	0x428c0000
 8007670:	20000b9c 	.word	0x20000b9c
 8007674:	43020000 	.word	0x43020000
 8007678:	c53b8000 	.word	0xc53b8000
 800767c:	43340000 	.word	0x43340000

08007680 <Lslalom_L1802>:
//Lslalom_L1802
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L1802(void){
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
	full_led_write(2);
 8007684:	2002      	movs	r0, #2
 8007686:	f009 f93b 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 800768a:	4a69      	ldr	r2, [pc, #420]	; (8007830 <Lslalom_L1802+0x1b0>)
 800768c:	8813      	ldrh	r3, [r2, #0]
 800768e:	f36f 2308 	bfc	r3, #8, #1
 8007692:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007694:	4b67      	ldr	r3, [pc, #412]	; (8007834 <Lslalom_L1802+0x1b4>)
 8007696:	4a68      	ldr	r2, [pc, #416]	; (8007838 <Lslalom_L1802+0x1b8>)
 8007698:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800769a:	4b68      	ldr	r3, [pc, #416]	; (800783c <Lslalom_L1802+0x1bc>)
 800769c:	4a66      	ldr	r2, [pc, #408]	; (8007838 <Lslalom_L1802+0x1b8>)
 800769e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80076a0:	4b67      	ldr	r3, [pc, #412]	; (8007840 <Lslalom_L1802+0x1c0>)
 80076a2:	4a68      	ldr	r2, [pc, #416]	; (8007844 <Lslalom_L1802+0x1c4>)
 80076a4:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80076a6:	4b68      	ldr	r3, [pc, #416]	; (8007848 <Lslalom_L1802+0x1c8>)
 80076a8:	4a66      	ldr	r2, [pc, #408]	; (8007844 <Lslalom_L1802+0x1c4>)
 80076aa:	601a      	str	r2, [r3, #0]

	control_start();
 80076ac:	f7fd fb62 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	4a65      	ldr	r2, [pc, #404]	; (800784c <Lslalom_L1802+0x1cc>)
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	4a65      	ldr	r2, [pc, #404]	; (8007850 <Lslalom_L1802+0x1d0>)
 80076ba:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_H_OFFSET && dist_r < LROTATE_H_OFFSET);
 80076bc:	bf00      	nop
 80076be:	4b64      	ldr	r3, [pc, #400]	; (8007850 <Lslalom_L1802+0x1d0>)
 80076c0:	edd3 7a00 	vldr	s15, [r3]
 80076c4:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80076c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d0:	d509      	bpl.n	80076e6 <Lslalom_L1802+0x66>
 80076d2:	4b5e      	ldr	r3, [pc, #376]	; (800784c <Lslalom_L1802+0x1cc>)
 80076d4:	edd3 7a00 	vldr	s15, [r3]
 80076d8:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80076dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e4:	d4eb      	bmi.n	80076be <Lslalom_L1802+0x3e>
	drive_stop();
 80076e6:	f7fd fb1d 	bl	8004d24 <drive_stop>
	control_stop();
 80076ea:	f7fd fb57 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80076ee:	4a50      	ldr	r2, [pc, #320]	; (8007830 <Lslalom_L1802+0x1b0>)
 80076f0:	8813      	ldrh	r3, [r2, #0]
 80076f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076f6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LROTATE_H_DEGACCEL;
 80076f8:	4b56      	ldr	r3, [pc, #344]	; (8007854 <Lslalom_L1802+0x1d4>)
 80076fa:	4a57      	ldr	r2, [pc, #348]	; (8007858 <Lslalom_L1802+0x1d8>)
 80076fc:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80076fe:	4b57      	ldr	r3, [pc, #348]	; (800785c <Lslalom_L1802+0x1dc>)
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	omega_min = -LROTATE_H_OMEGA;
 8007706:	4b56      	ldr	r3, [pc, #344]	; (8007860 <Lslalom_L1802+0x1e0>)
 8007708:	4a56      	ldr	r2, [pc, #344]	; (8007864 <Lslalom_L1802+0x1e4>)
 800770a:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 800770c:	4b56      	ldr	r3, [pc, #344]	; (8007868 <Lslalom_L1802+0x1e8>)
 800770e:	4a4d      	ldr	r2, [pc, #308]	; (8007844 <Lslalom_L1802+0x1c4>)
 8007710:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007712:	4a47      	ldr	r2, [pc, #284]	; (8007830 <Lslalom_L1802+0x1b0>)
 8007714:	8813      	ldrh	r3, [r2, #0]
 8007716:	f043 0302 	orr.w	r3, r3, #2
 800771a:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+70);
 800771c:	bf00      	nop
 800771e:	4b53      	ldr	r3, [pc, #332]	; (800786c <Lslalom_L1802+0x1ec>)
 8007720:	edd3 7a00 	vldr	s15, [r3]
 8007724:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8007870 <Lslalom_L1802+0x1f0>
 8007728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772c:	4b51      	ldr	r3, [pc, #324]	; (8007874 <Lslalom_L1802+0x1f4>)
 800772e:	edd3 7a00 	vldr	s15, [r3]
 8007732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	dcf0      	bgt.n	800771e <Lslalom_L1802+0x9e>

	target_degaccel_z = 0;
 800773c:	4b45      	ldr	r3, [pc, #276]	; (8007854 <Lslalom_L1802+0x1d4>)
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+130);
 8007744:	bf00      	nop
 8007746:	4b49      	ldr	r3, [pc, #292]	; (800786c <Lslalom_L1802+0x1ec>)
 8007748:	edd3 7a00 	vldr	s15, [r3]
 800774c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007878 <Lslalom_L1802+0x1f8>
 8007750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007754:	4b47      	ldr	r3, [pc, #284]	; (8007874 <Lslalom_L1802+0x1f4>)
 8007756:	edd3 7a00 	vldr	s15, [r3]
 800775a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	dcf0      	bgt.n	8007746 <Lslalom_L1802+0xc6>

	target_degaccel_z = LROTATE_H_DEGACCEL;
 8007764:	4b3b      	ldr	r3, [pc, #236]	; (8007854 <Lslalom_L1802+0x1d4>)
 8007766:	4a45      	ldr	r2, [pc, #276]	; (800787c <Lslalom_L1802+0x1fc>)
 8007768:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+180);
 800776a:	bf00      	nop
 800776c:	4b3f      	ldr	r3, [pc, #252]	; (800786c <Lslalom_L1802+0x1ec>)
 800776e:	edd3 7a00 	vldr	s15, [r3]
 8007772:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007880 <Lslalom_L1802+0x200>
 8007776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800777a:	4b3e      	ldr	r3, [pc, #248]	; (8007874 <Lslalom_L1802+0x1f4>)
 800777c:	edd3 7a00 	vldr	s15, [r3]
 8007780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	dcf0      	bgt.n	800776c <Lslalom_L1802+0xec>
	if(!MF.FLAG.XDIR){
 800778a:	4b29      	ldr	r3, [pc, #164]	; (8007830 <Lslalom_L1802+0x1b0>)
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d108      	bne.n	80077aa <Lslalom_L1802+0x12a>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007798:	2101      	movs	r1, #1
 800779a:	20ff      	movs	r0, #255	; 0xff
 800779c:	f007 fae0 	bl	800ed60 <turn_dir>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077a0:	2101      	movs	r1, #1
 80077a2:	20ff      	movs	r0, #255	; 0xff
 80077a4:	f007 fadc 	bl	800ed60 <turn_dir>
 80077a8:	e003      	b.n	80077b2 <Lslalom_L1802+0x132>
	}else{
		turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80077aa:	2103      	movs	r1, #3
 80077ac:	20fc      	movs	r0, #252	; 0xfc
 80077ae:	f007 fad7 	bl	800ed60 <turn_dir>
	}

	MF.FLAG.GYRO = 0;
 80077b2:	4a1f      	ldr	r2, [pc, #124]	; (8007830 <Lslalom_L1802+0x1b0>)
 80077b4:	8813      	ldrh	r3, [r2, #0]
 80077b6:	f36f 2308 	bfc	r3, #8, #1
 80077ba:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80077bc:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <Lslalom_L1802+0x1b4>)
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <Lslalom_L1802+0x1b8>)
 80077c0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80077c2:	4b1e      	ldr	r3, [pc, #120]	; (800783c <Lslalom_L1802+0x1bc>)
 80077c4:	4a1c      	ldr	r2, [pc, #112]	; (8007838 <Lslalom_L1802+0x1b8>)
 80077c6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80077c8:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <Lslalom_L1802+0x1c0>)
 80077ca:	4a1e      	ldr	r2, [pc, #120]	; (8007844 <Lslalom_L1802+0x1c4>)
 80077cc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80077ce:	4b1e      	ldr	r3, [pc, #120]	; (8007848 <Lslalom_L1802+0x1c8>)
 80077d0:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <Lslalom_L1802+0x1c4>)
 80077d2:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <Lslalom_L1802+0x1cc>)
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <Lslalom_L1802+0x1d0>)
 80077de:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80077e0:	4a13      	ldr	r2, [pc, #76]	; (8007830 <Lslalom_L1802+0x1b0>)
 80077e2:	8813      	ldrh	r3, [r2, #0]
 80077e4:	f043 0304 	orr.w	r3, r3, #4
 80077e8:	8013      	strh	r3, [r2, #0]
	control_start();
 80077ea:	f7fd fac3 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_H_OFFSET && dist_r < LROTATE_H_OFFSET);
 80077ee:	bf00      	nop
 80077f0:	4b17      	ldr	r3, [pc, #92]	; (8007850 <Lslalom_L1802+0x1d0>)
 80077f2:	edd3 7a00 	vldr	s15, [r3]
 80077f6:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80077fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007802:	d509      	bpl.n	8007818 <Lslalom_L1802+0x198>
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <Lslalom_L1802+0x1cc>)
 8007806:	edd3 7a00 	vldr	s15, [r3]
 800780a:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800780e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007816:	d4eb      	bmi.n	80077f0 <Lslalom_L1802+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <Lslalom_L1802+0x1b0>)
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <Lslalom_L1802+0x1aa>
 8007826:	f008 fff7 	bl	8010818 <get_wall_info>
}
 800782a:	bf00      	nop
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000fa8 	.word	0x20000fa8
 8007834:	20000d9c 	.word	0x20000d9c
 8007838:	461c4000 	.word	0x461c4000
 800783c:	20000b20 	.word	0x20000b20
 8007840:	200007b4 	.word	0x200007b4
 8007844:	44480000 	.word	0x44480000
 8007848:	200001dc 	.word	0x200001dc
 800784c:	20000b2c 	.word	0x20000b2c
 8007850:	200012e4 	.word	0x200012e4
 8007854:	20000b98 	.word	0x20000b98
 8007858:	c53b8000 	.word	0xc53b8000
 800785c:	200001e0 	.word	0x200001e0
 8007860:	200002f0 	.word	0x200002f0
 8007864:	c4160000 	.word	0xc4160000
 8007868:	20000b34 	.word	0x20000b34
 800786c:	20000c3c 	.word	0x20000c3c
 8007870:	428c0000 	.word	0x428c0000
 8007874:	20000b9c 	.word	0x20000b9c
 8007878:	43020000 	.word	0x43020000
 800787c:	453b8000 	.word	0x453b8000
 8007880:	43340000 	.word	0x43340000

08007884 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0

	full_led_write(5);
 8007888:	2005      	movs	r0, #5
 800788a:	f009 f839 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 800788e:	4a7d      	ldr	r2, [pc, #500]	; (8007a84 <v_R45+0x200>)
 8007890:	8813      	ldrh	r3, [r2, #0]
 8007892:	f36f 2308 	bfc	r3, #8, #1
 8007896:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007898:	4b7b      	ldr	r3, [pc, #492]	; (8007a88 <v_R45+0x204>)
 800789a:	4a7c      	ldr	r2, [pc, #496]	; (8007a8c <v_R45+0x208>)
 800789c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800789e:	4b7c      	ldr	r3, [pc, #496]	; (8007a90 <v_R45+0x20c>)
 80078a0:	4a7a      	ldr	r2, [pc, #488]	; (8007a8c <v_R45+0x208>)
 80078a2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80078a4:	4b7b      	ldr	r3, [pc, #492]	; (8007a94 <v_R45+0x210>)
 80078a6:	4a7c      	ldr	r2, [pc, #496]	; (8007a98 <v_R45+0x214>)
 80078a8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80078aa:	4b7c      	ldr	r3, [pc, #496]	; (8007a9c <v_R45+0x218>)
 80078ac:	4a7a      	ldr	r2, [pc, #488]	; (8007a98 <v_R45+0x214>)
 80078ae:	601a      	str	r2, [r3, #0]

	control_start();
 80078b0:	f7fd fa60 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	4a79      	ldr	r2, [pc, #484]	; (8007aa0 <v_R45+0x21c>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	4a79      	ldr	r2, [pc, #484]	; (8007aa4 <v_R45+0x220>)
 80078be:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 80078c0:	4b79      	ldr	r3, [pc, #484]	; (8007aa8 <v_R45+0x224>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d115      	bne.n	80078f4 <v_R45+0x70>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 80078c8:	bf00      	nop
 80078ca:	4b76      	ldr	r3, [pc, #472]	; (8007aa4 <v_R45+0x220>)
 80078cc:	edd3 7a00 	vldr	s15, [r3]
 80078d0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007aac <v_R45+0x228>
 80078d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078dc:	d51f      	bpl.n	800791e <v_R45+0x9a>
 80078de:	4b70      	ldr	r3, [pc, #448]	; (8007aa0 <v_R45+0x21c>)
 80078e0:	edd3 7a00 	vldr	s15, [r3]
 80078e4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8007aac <v_R45+0x228>
 80078e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f0:	d4eb      	bmi.n	80078ca <v_R45+0x46>
 80078f2:	e014      	b.n	800791e <v_R45+0x9a>
	}else{
		while(dist_l < V_OFFSET+35 && dist_r < V_OFFSET+35);
 80078f4:	bf00      	nop
 80078f6:	4b6b      	ldr	r3, [pc, #428]	; (8007aa4 <v_R45+0x220>)
 80078f8:	edd3 7a00 	vldr	s15, [r3]
 80078fc:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007ab0 <v_R45+0x22c>
 8007900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007908:	d509      	bpl.n	800791e <v_R45+0x9a>
 800790a:	4b65      	ldr	r3, [pc, #404]	; (8007aa0 <v_R45+0x21c>)
 800790c:	edd3 7a00 	vldr	s15, [r3]
 8007910:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007ab0 <v_R45+0x22c>
 8007914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791c:	d4eb      	bmi.n	80078f6 <v_R45+0x72>
	}
	drive_stop();
 800791e:	f7fd fa01 	bl	8004d24 <drive_stop>
	control_stop();
 8007922:	f7fd fa3b 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8007926:	4a57      	ldr	r2, [pc, #348]	; (8007a84 <v_R45+0x200>)
 8007928:	8813      	ldrh	r3, [r2, #0]
 800792a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = V_DEGACCEL;
 8007930:	4b60      	ldr	r3, [pc, #384]	; (8007ab4 <v_R45+0x230>)
 8007932:	4a61      	ldr	r2, [pc, #388]	; (8007ab8 <v_R45+0x234>)
 8007934:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007936:	4b61      	ldr	r3, [pc, #388]	; (8007abc <v_R45+0x238>)
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
	omega_max = V_OMEGA;
 800793e:	4b60      	ldr	r3, [pc, #384]	; (8007ac0 <v_R45+0x23c>)
 8007940:	4a60      	ldr	r2, [pc, #384]	; (8007ac4 <v_R45+0x240>)
 8007942:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007944:	4b60      	ldr	r3, [pc, #384]	; (8007ac8 <v_R45+0x244>)
 8007946:	4a54      	ldr	r2, [pc, #336]	; (8007a98 <v_R45+0x214>)
 8007948:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800794a:	4a4e      	ldr	r2, [pc, #312]	; (8007a84 <v_R45+0x200>)
 800794c:	8813      	ldrh	r3, [r2, #0]
 800794e:	f043 0302 	orr.w	r3, r3, #2
 8007952:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-20);
 8007954:	bf00      	nop
 8007956:	4b5d      	ldr	r3, [pc, #372]	; (8007acc <v_R45+0x248>)
 8007958:	edd3 7a00 	vldr	s15, [r3]
 800795c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007960:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007964:	4b5a      	ldr	r3, [pc, #360]	; (8007ad0 <v_R45+0x24c>)
 8007966:	edd3 7a00 	vldr	s15, [r3]
 800796a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800796e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007972:	d4f0      	bmi.n	8007956 <v_R45+0xd2>

	target_degaccel_z = 0;
 8007974:	4b4f      	ldr	r3, [pc, #316]	; (8007ab4 <v_R45+0x230>)
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-40);
 800797c:	bf00      	nop
 800797e:	4b53      	ldr	r3, [pc, #332]	; (8007acc <v_R45+0x248>)
 8007980:	edd3 7a00 	vldr	s15, [r3]
 8007984:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8007ad4 <v_R45+0x250>
 8007988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800798c:	4b50      	ldr	r3, [pc, #320]	; (8007ad0 <v_R45+0x24c>)
 800798e:	edd3 7a00 	vldr	s15, [r3]
 8007992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799a:	d4f0      	bmi.n	800797e <v_R45+0xfa>

	target_degaccel_z = -V_DEGACCEL;
 800799c:	4b45      	ldr	r3, [pc, #276]	; (8007ab4 <v_R45+0x230>)
 800799e:	4a4e      	ldr	r2, [pc, #312]	; (8007ad8 <v_R45+0x254>)
 80079a0:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-45);
 80079a2:	bf00      	nop
 80079a4:	4b49      	ldr	r3, [pc, #292]	; (8007acc <v_R45+0x248>)
 80079a6:	edd3 7a00 	vldr	s15, [r3]
 80079aa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007adc <v_R45+0x258>
 80079ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80079b2:	4b47      	ldr	r3, [pc, #284]	; (8007ad0 <v_R45+0x24c>)
 80079b4:	edd3 7a00 	vldr	s15, [r3]
 80079b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c0:	d4f0      	bmi.n	80079a4 <v_R45+0x120>
	turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80079c2:	2103      	movs	r1, #3
 80079c4:	2001      	movs	r0, #1
 80079c6:	f007 f9cb 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 80079ca:	4b37      	ldr	r3, [pc, #220]	; (8007aa8 <v_R45+0x224>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	bfb8      	it	lt
 80079d8:	425b      	neglt	r3, r3
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	4b32      	ldr	r3, [pc, #200]	; (8007aa8 <v_R45+0x224>)
 80079de:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 80079e0:	4a28      	ldr	r2, [pc, #160]	; (8007a84 <v_R45+0x200>)
 80079e2:	8813      	ldrh	r3, [r2, #0]
 80079e4:	f36f 2308 	bfc	r3, #8, #1
 80079e8:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80079ea:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <v_R45+0x204>)
 80079ec:	4a27      	ldr	r2, [pc, #156]	; (8007a8c <v_R45+0x208>)
 80079ee:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <v_R45+0x20c>)
 80079f2:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <v_R45+0x208>)
 80079f4:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80079f6:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <v_R45+0x210>)
 80079f8:	4a27      	ldr	r2, [pc, #156]	; (8007a98 <v_R45+0x214>)
 80079fa:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80079fc:	4b27      	ldr	r3, [pc, #156]	; (8007a9c <v_R45+0x218>)
 80079fe:	4a26      	ldr	r2, [pc, #152]	; (8007a98 <v_R45+0x214>)
 8007a00:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <v_R45+0x21c>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <v_R45+0x220>)
 8007a0c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007a0e:	4a1d      	ldr	r2, [pc, #116]	; (8007a84 <v_R45+0x200>)
 8007a10:	8813      	ldrh	r3, [r2, #0]
 8007a12:	f043 0304 	orr.w	r3, r3, #4
 8007a16:	8013      	strh	r3, [r2, #0]
	control_start();
 8007a18:	f7fd f9ac 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <v_R45+0x224>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d116      	bne.n	8007a52 <v_R45+0x1ce>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007a24:	bf00      	nop
 8007a26:	4b1f      	ldr	r3, [pc, #124]	; (8007aa4 <v_R45+0x220>)
 8007a28:	edd3 7a00 	vldr	s15, [r3]
 8007a2c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007aac <v_R45+0x228>
 8007a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a38:	d400      	bmi.n	8007a3c <v_R45+0x1b8>
	}else{
		while(dist_l < V_OFFSET+35 && dist_r < V_OFFSET+35);
	}
}
 8007a3a:	e020      	b.n	8007a7e <v_R45+0x1fa>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007a3c:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <v_R45+0x21c>)
 8007a3e:	edd3 7a00 	vldr	s15, [r3]
 8007a42:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007aac <v_R45+0x228>
 8007a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4e:	d4ea      	bmi.n	8007a26 <v_R45+0x1a2>
}
 8007a50:	e015      	b.n	8007a7e <v_R45+0x1fa>
		while(dist_l < V_OFFSET+35 && dist_r < V_OFFSET+35);
 8007a52:	bf00      	nop
 8007a54:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <v_R45+0x220>)
 8007a56:	edd3 7a00 	vldr	s15, [r3]
 8007a5a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007ab0 <v_R45+0x22c>
 8007a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a66:	d400      	bmi.n	8007a6a <v_R45+0x1e6>
}
 8007a68:	e009      	b.n	8007a7e <v_R45+0x1fa>
		while(dist_l < V_OFFSET+35 && dist_r < V_OFFSET+35);
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <v_R45+0x21c>)
 8007a6c:	edd3 7a00 	vldr	s15, [r3]
 8007a70:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007ab0 <v_R45+0x22c>
 8007a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7c:	d4ea      	bmi.n	8007a54 <v_R45+0x1d0>
}
 8007a7e:	bf00      	nop
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000fa8 	.word	0x20000fa8
 8007a88:	20000d9c 	.word	0x20000d9c
 8007a8c:	461c4000 	.word	0x461c4000
 8007a90:	20000b20 	.word	0x20000b20
 8007a94:	200007b4 	.word	0x200007b4
 8007a98:	43c80000 	.word	0x43c80000
 8007a9c:	200001dc 	.word	0x200001dc
 8007aa0:	20000b2c 	.word	0x20000b2c
 8007aa4:	200012e4 	.word	0x200012e4
 8007aa8:	20000b28 	.word	0x20000b28
 8007aac:	420c0000 	.word	0x420c0000
 8007ab0:	428c0000 	.word	0x428c0000
 8007ab4:	20000b98 	.word	0x20000b98
 8007ab8:	453b8000 	.word	0x453b8000
 8007abc:	200001e0 	.word	0x200001e0
 8007ac0:	20000b24 	.word	0x20000b24
 8007ac4:	43960000 	.word	0x43960000
 8007ac8:	20000b34 	.word	0x20000b34
 8007acc:	20000c3c 	.word	0x20000c3c
 8007ad0:	20000b9c 	.word	0x20000b9c
 8007ad4:	42200000 	.word	0x42200000
 8007ad8:	c53b8000 	.word	0xc53b8000
 8007adc:	42340000 	.word	0x42340000

08007ae0 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0

	full_led_write(6);
 8007ae4:	2006      	movs	r0, #6
 8007ae6:	f008 ff0b 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007aea:	4a7d      	ldr	r2, [pc, #500]	; (8007ce0 <v_L45+0x200>)
 8007aec:	8813      	ldrh	r3, [r2, #0]
 8007aee:	f36f 2308 	bfc	r3, #8, #1
 8007af2:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007af4:	4b7b      	ldr	r3, [pc, #492]	; (8007ce4 <v_L45+0x204>)
 8007af6:	4a7c      	ldr	r2, [pc, #496]	; (8007ce8 <v_L45+0x208>)
 8007af8:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007afa:	4b7c      	ldr	r3, [pc, #496]	; (8007cec <v_L45+0x20c>)
 8007afc:	4a7a      	ldr	r2, [pc, #488]	; (8007ce8 <v_L45+0x208>)
 8007afe:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007b00:	4b7b      	ldr	r3, [pc, #492]	; (8007cf0 <v_L45+0x210>)
 8007b02:	4a7c      	ldr	r2, [pc, #496]	; (8007cf4 <v_L45+0x214>)
 8007b04:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007b06:	4b7c      	ldr	r3, [pc, #496]	; (8007cf8 <v_L45+0x218>)
 8007b08:	4a7a      	ldr	r2, [pc, #488]	; (8007cf4 <v_L45+0x214>)
 8007b0a:	601a      	str	r2, [r3, #0]

	control_start();
 8007b0c:	f7fd f932 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	4a79      	ldr	r2, [pc, #484]	; (8007cfc <v_L45+0x21c>)
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	4a79      	ldr	r2, [pc, #484]	; (8007d00 <v_L45+0x220>)
 8007b1a:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8007b1c:	4b79      	ldr	r3, [pc, #484]	; (8007d04 <v_L45+0x224>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d115      	bne.n	8007b50 <v_L45+0x70>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007b24:	bf00      	nop
 8007b26:	4b76      	ldr	r3, [pc, #472]	; (8007d00 <v_L45+0x220>)
 8007b28:	edd3 7a00 	vldr	s15, [r3]
 8007b2c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007d08 <v_L45+0x228>
 8007b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b38:	d51f      	bpl.n	8007b7a <v_L45+0x9a>
 8007b3a:	4b70      	ldr	r3, [pc, #448]	; (8007cfc <v_L45+0x21c>)
 8007b3c:	edd3 7a00 	vldr	s15, [r3]
 8007b40:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8007d08 <v_L45+0x228>
 8007b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4c:	d4eb      	bmi.n	8007b26 <v_L45+0x46>
 8007b4e:	e014      	b.n	8007b7a <v_L45+0x9a>
	}else{
		while(dist_l < V_OFFSET+43 && dist_r < V_OFFSET+43);
 8007b50:	bf00      	nop
 8007b52:	4b6b      	ldr	r3, [pc, #428]	; (8007d00 <v_L45+0x220>)
 8007b54:	edd3 7a00 	vldr	s15, [r3]
 8007b58:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007d0c <v_L45+0x22c>
 8007b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	d509      	bpl.n	8007b7a <v_L45+0x9a>
 8007b66:	4b65      	ldr	r3, [pc, #404]	; (8007cfc <v_L45+0x21c>)
 8007b68:	edd3 7a00 	vldr	s15, [r3]
 8007b6c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007d0c <v_L45+0x22c>
 8007b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b78:	d4eb      	bmi.n	8007b52 <v_L45+0x72>
	}
	drive_stop();
 8007b7a:	f7fd f8d3 	bl	8004d24 <drive_stop>
	control_stop();
 8007b7e:	f7fd f90d 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8007b82:	4a57      	ldr	r2, [pc, #348]	; (8007ce0 <v_L45+0x200>)
 8007b84:	8813      	ldrh	r3, [r2, #0]
 8007b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -V_DEGACCEL;
 8007b8c:	4b60      	ldr	r3, [pc, #384]	; (8007d10 <v_L45+0x230>)
 8007b8e:	4a61      	ldr	r2, [pc, #388]	; (8007d14 <v_L45+0x234>)
 8007b90:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007b92:	4b61      	ldr	r3, [pc, #388]	; (8007d18 <v_L45+0x238>)
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
	omega_min = -V_OMEGA;
 8007b9a:	4b60      	ldr	r3, [pc, #384]	; (8007d1c <v_L45+0x23c>)
 8007b9c:	4a60      	ldr	r2, [pc, #384]	; (8007d20 <v_L45+0x240>)
 8007b9e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007ba0:	4b60      	ldr	r3, [pc, #384]	; (8007d24 <v_L45+0x244>)
 8007ba2:	4a54      	ldr	r2, [pc, #336]	; (8007cf4 <v_L45+0x214>)
 8007ba4:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007ba6:	4a4e      	ldr	r2, [pc, #312]	; (8007ce0 <v_L45+0x200>)
 8007ba8:	8813      	ldrh	r3, [r2, #0]
 8007baa:	f043 0302 	orr.w	r3, r3, #2
 8007bae:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+20);
 8007bb0:	bf00      	nop
 8007bb2:	4b5d      	ldr	r3, [pc, #372]	; (8007d28 <v_L45+0x248>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc0:	4b5a      	ldr	r3, [pc, #360]	; (8007d2c <v_L45+0x24c>)
 8007bc2:	edd3 7a00 	vldr	s15, [r3]
 8007bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bce:	dcf0      	bgt.n	8007bb2 <v_L45+0xd2>

	target_degaccel_z = 0;
 8007bd0:	4b4f      	ldr	r3, [pc, #316]	; (8007d10 <v_L45+0x230>)
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+40);
 8007bd8:	bf00      	nop
 8007bda:	4b53      	ldr	r3, [pc, #332]	; (8007d28 <v_L45+0x248>)
 8007bdc:	edd3 7a00 	vldr	s15, [r3]
 8007be0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8007d30 <v_L45+0x250>
 8007be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be8:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <v_L45+0x24c>)
 8007bea:	edd3 7a00 	vldr	s15, [r3]
 8007bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	dcf0      	bgt.n	8007bda <v_L45+0xfa>

	target_degaccel_z = V_DEGACCEL;
 8007bf8:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <v_L45+0x230>)
 8007bfa:	4a4e      	ldr	r2, [pc, #312]	; (8007d34 <v_L45+0x254>)
 8007bfc:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z+45);
 8007bfe:	bf00      	nop
 8007c00:	4b49      	ldr	r3, [pc, #292]	; (8007d28 <v_L45+0x248>)
 8007c02:	edd3 7a00 	vldr	s15, [r3]
 8007c06:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007d38 <v_L45+0x258>
 8007c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c0e:	4b47      	ldr	r3, [pc, #284]	; (8007d2c <v_L45+0x24c>)
 8007c10:	edd3 7a00 	vldr	s15, [r3]
 8007c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1c:	d4f0      	bmi.n	8007c00 <v_L45+0x120>
	turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c1e:	2103      	movs	r1, #3
 8007c20:	20ff      	movs	r0, #255	; 0xff
 8007c22:	f007 f89d 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8007c26:	4b37      	ldr	r3, [pc, #220]	; (8007d04 <v_L45+0x224>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	bfb8      	it	lt
 8007c34:	425b      	neglt	r3, r3
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	4b32      	ldr	r3, [pc, #200]	; (8007d04 <v_L45+0x224>)
 8007c3a:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 8007c3c:	4a28      	ldr	r2, [pc, #160]	; (8007ce0 <v_L45+0x200>)
 8007c3e:	8813      	ldrh	r3, [r2, #0]
 8007c40:	f36f 2308 	bfc	r3, #8, #1
 8007c44:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007c46:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <v_L45+0x204>)
 8007c48:	4a27      	ldr	r2, [pc, #156]	; (8007ce8 <v_L45+0x208>)
 8007c4a:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007c4c:	4b27      	ldr	r3, [pc, #156]	; (8007cec <v_L45+0x20c>)
 8007c4e:	4a26      	ldr	r2, [pc, #152]	; (8007ce8 <v_L45+0x208>)
 8007c50:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007c52:	4b27      	ldr	r3, [pc, #156]	; (8007cf0 <v_L45+0x210>)
 8007c54:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <v_L45+0x214>)
 8007c56:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007c58:	4b27      	ldr	r3, [pc, #156]	; (8007cf8 <v_L45+0x218>)
 8007c5a:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <v_L45+0x214>)
 8007c5c:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	4a26      	ldr	r2, [pc, #152]	; (8007cfc <v_L45+0x21c>)
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	4a26      	ldr	r2, [pc, #152]	; (8007d00 <v_L45+0x220>)
 8007c68:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007c6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ce0 <v_L45+0x200>)
 8007c6c:	8813      	ldrh	r3, [r2, #0]
 8007c6e:	f043 0304 	orr.w	r3, r3, #4
 8007c72:	8013      	strh	r3, [r2, #0]
	control_start();
 8007c74:	f7fd f87e 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8007c78:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <v_L45+0x224>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d116      	bne.n	8007cae <v_L45+0x1ce>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007c80:	bf00      	nop
 8007c82:	4b1f      	ldr	r3, [pc, #124]	; (8007d00 <v_L45+0x220>)
 8007c84:	edd3 7a00 	vldr	s15, [r3]
 8007c88:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007d08 <v_L45+0x228>
 8007c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	d400      	bmi.n	8007c98 <v_L45+0x1b8>
	}else{
		while(dist_l < V_OFFSET+43 && dist_r < V_OFFSET+43);
	}
}
 8007c96:	e020      	b.n	8007cda <v_L45+0x1fa>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007c98:	4b18      	ldr	r3, [pc, #96]	; (8007cfc <v_L45+0x21c>)
 8007c9a:	edd3 7a00 	vldr	s15, [r3]
 8007c9e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007d08 <v_L45+0x228>
 8007ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007caa:	d4ea      	bmi.n	8007c82 <v_L45+0x1a2>
}
 8007cac:	e015      	b.n	8007cda <v_L45+0x1fa>
		while(dist_l < V_OFFSET+43 && dist_r < V_OFFSET+43);
 8007cae:	bf00      	nop
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <v_L45+0x220>)
 8007cb2:	edd3 7a00 	vldr	s15, [r3]
 8007cb6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007d0c <v_L45+0x22c>
 8007cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	d400      	bmi.n	8007cc6 <v_L45+0x1e6>
}
 8007cc4:	e009      	b.n	8007cda <v_L45+0x1fa>
		while(dist_l < V_OFFSET+43 && dist_r < V_OFFSET+43);
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <v_L45+0x21c>)
 8007cc8:	edd3 7a00 	vldr	s15, [r3]
 8007ccc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007d0c <v_L45+0x22c>
 8007cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd8:	d4ea      	bmi.n	8007cb0 <v_L45+0x1d0>
}
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000fa8 	.word	0x20000fa8
 8007ce4:	20000d9c 	.word	0x20000d9c
 8007ce8:	461c4000 	.word	0x461c4000
 8007cec:	20000b20 	.word	0x20000b20
 8007cf0:	200007b4 	.word	0x200007b4
 8007cf4:	43c80000 	.word	0x43c80000
 8007cf8:	200001dc 	.word	0x200001dc
 8007cfc:	20000b2c 	.word	0x20000b2c
 8007d00:	200012e4 	.word	0x200012e4
 8007d04:	20000b28 	.word	0x20000b28
 8007d08:	420c0000 	.word	0x420c0000
 8007d0c:	429c0000 	.word	0x429c0000
 8007d10:	20000b98 	.word	0x20000b98
 8007d14:	c53b8000 	.word	0xc53b8000
 8007d18:	200001e0 	.word	0x200001e0
 8007d1c:	200002f0 	.word	0x200002f0
 8007d20:	c3960000 	.word	0xc3960000
 8007d24:	20000b34 	.word	0x20000b34
 8007d28:	20000c3c 	.word	0x20000c3c
 8007d2c:	20000b9c 	.word	0x20000b9c
 8007d30:	42200000 	.word	0x42200000
 8007d34:	453b8000 	.word	0x453b8000
 8007d38:	42340000 	.word	0x42340000

08007d3c <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0

	full_led_write(5);
 8007d40:	2005      	movs	r0, #5
 8007d42:	f008 fddd 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007d46:	4a80      	ldr	r2, [pc, #512]	; (8007f48 <v_R45D+0x20c>)
 8007d48:	8813      	ldrh	r3, [r2, #0]
 8007d4a:	f36f 2308 	bfc	r3, #8, #1
 8007d4e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007d50:	4b7e      	ldr	r3, [pc, #504]	; (8007f4c <v_R45D+0x210>)
 8007d52:	4a7f      	ldr	r2, [pc, #508]	; (8007f50 <v_R45D+0x214>)
 8007d54:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007d56:	4b7f      	ldr	r3, [pc, #508]	; (8007f54 <v_R45D+0x218>)
 8007d58:	4a7d      	ldr	r2, [pc, #500]	; (8007f50 <v_R45D+0x214>)
 8007d5a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007d5c:	4b7e      	ldr	r3, [pc, #504]	; (8007f58 <v_R45D+0x21c>)
 8007d5e:	4a7f      	ldr	r2, [pc, #508]	; (8007f5c <v_R45D+0x220>)
 8007d60:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007d62:	4b7f      	ldr	r3, [pc, #508]	; (8007f60 <v_R45D+0x224>)
 8007d64:	4a7d      	ldr	r2, [pc, #500]	; (8007f5c <v_R45D+0x220>)
 8007d66:	601a      	str	r2, [r3, #0]

	control_start();
 8007d68:	f7fd f804 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	4a7c      	ldr	r2, [pc, #496]	; (8007f64 <v_R45D+0x228>)
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	4a7c      	ldr	r2, [pc, #496]	; (8007f68 <v_R45D+0x22c>)
 8007d76:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8007d78:	4b7c      	ldr	r3, [pc, #496]	; (8007f6c <v_R45D+0x230>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d115      	bne.n	8007dac <v_R45D+0x70>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007d80:	bf00      	nop
 8007d82:	4b79      	ldr	r3, [pc, #484]	; (8007f68 <v_R45D+0x22c>)
 8007d84:	edd3 7a00 	vldr	s15, [r3]
 8007d88:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8007f70 <v_R45D+0x234>
 8007d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d94:	d51f      	bpl.n	8007dd6 <v_R45D+0x9a>
 8007d96:	4b73      	ldr	r3, [pc, #460]	; (8007f64 <v_R45D+0x228>)
 8007d98:	edd3 7a00 	vldr	s15, [r3]
 8007d9c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8007f70 <v_R45D+0x234>
 8007da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	d4eb      	bmi.n	8007d82 <v_R45D+0x46>
 8007daa:	e014      	b.n	8007dd6 <v_R45D+0x9a>
	}else{
		while(dist_l < V_OFFSET+35 && dist_r < V_OFFSET+35);
 8007dac:	bf00      	nop
 8007dae:	4b6e      	ldr	r3, [pc, #440]	; (8007f68 <v_R45D+0x22c>)
 8007db0:	edd3 7a00 	vldr	s15, [r3]
 8007db4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8007f74 <v_R45D+0x238>
 8007db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc0:	d509      	bpl.n	8007dd6 <v_R45D+0x9a>
 8007dc2:	4b68      	ldr	r3, [pc, #416]	; (8007f64 <v_R45D+0x228>)
 8007dc4:	edd3 7a00 	vldr	s15, [r3]
 8007dc8:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007f74 <v_R45D+0x238>
 8007dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd4:	d4eb      	bmi.n	8007dae <v_R45D+0x72>
	}
	drive_stop();
 8007dd6:	f7fc ffa5 	bl	8004d24 <drive_stop>
	control_stop();
 8007dda:	f7fc ffdf 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8007dde:	4a5a      	ldr	r2, [pc, #360]	; (8007f48 <v_R45D+0x20c>)
 8007de0:	8813      	ldrh	r3, [r2, #0]
 8007de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = V_DEGACCEL;
 8007de8:	4b63      	ldr	r3, [pc, #396]	; (8007f78 <v_R45D+0x23c>)
 8007dea:	4a64      	ldr	r2, [pc, #400]	; (8007f7c <v_R45D+0x240>)
 8007dec:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007dee:	4b64      	ldr	r3, [pc, #400]	; (8007f80 <v_R45D+0x244>)
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
	omega_max = V_OMEGA;
 8007df6:	4b63      	ldr	r3, [pc, #396]	; (8007f84 <v_R45D+0x248>)
 8007df8:	4a63      	ldr	r2, [pc, #396]	; (8007f88 <v_R45D+0x24c>)
 8007dfa:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007dfc:	4b63      	ldr	r3, [pc, #396]	; (8007f8c <v_R45D+0x250>)
 8007dfe:	4a57      	ldr	r2, [pc, #348]	; (8007f5c <v_R45D+0x220>)
 8007e00:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007e02:	4a51      	ldr	r2, [pc, #324]	; (8007f48 <v_R45D+0x20c>)
 8007e04:	8813      	ldrh	r3, [r2, #0]
 8007e06:	f043 0302 	orr.w	r3, r3, #2
 8007e0a:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-20);
 8007e0c:	bf00      	nop
 8007e0e:	4b60      	ldr	r3, [pc, #384]	; (8007f90 <v_R45D+0x254>)
 8007e10:	edd3 7a00 	vldr	s15, [r3]
 8007e14:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007e18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007e1c:	4b5d      	ldr	r3, [pc, #372]	; (8007f94 <v_R45D+0x258>)
 8007e1e:	edd3 7a00 	vldr	s15, [r3]
 8007e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2a:	d4f0      	bmi.n	8007e0e <v_R45D+0xd2>

	target_degaccel_z = 0;
 8007e2c:	4b52      	ldr	r3, [pc, #328]	; (8007f78 <v_R45D+0x23c>)
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-40);
 8007e34:	bf00      	nop
 8007e36:	4b56      	ldr	r3, [pc, #344]	; (8007f90 <v_R45D+0x254>)
 8007e38:	edd3 7a00 	vldr	s15, [r3]
 8007e3c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007f98 <v_R45D+0x25c>
 8007e40:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007e44:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <v_R45D+0x258>)
 8007e46:	edd3 7a00 	vldr	s15, [r3]
 8007e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e52:	d4f0      	bmi.n	8007e36 <v_R45D+0xfa>

	target_degaccel_z = -V_DEGACCEL;
 8007e54:	4b48      	ldr	r3, [pc, #288]	; (8007f78 <v_R45D+0x23c>)
 8007e56:	4a51      	ldr	r2, [pc, #324]	; (8007f9c <v_R45D+0x260>)
 8007e58:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-45);
 8007e5a:	bf00      	nop
 8007e5c:	4b4c      	ldr	r3, [pc, #304]	; (8007f90 <v_R45D+0x254>)
 8007e5e:	edd3 7a00 	vldr	s15, [r3]
 8007e62:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8007fa0 <v_R45D+0x264>
 8007e66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007e6a:	4b4a      	ldr	r3, [pc, #296]	; (8007f94 <v_R45D+0x258>)
 8007e6c:	edd3 7a00 	vldr	s15, [r3]
 8007e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e78:	d4f0      	bmi.n	8007e5c <v_R45D+0x120>
	turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e7a:	2103      	movs	r1, #3
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	f006 ff6f 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8007e82:	4b3a      	ldr	r3, [pc, #232]	; (8007f6c <v_R45D+0x230>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	3301      	adds	r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	bfb8      	it	lt
 8007e90:	425b      	neglt	r3, r3
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <v_R45D+0x230>)
 8007e96:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 8007e98:	4a2b      	ldr	r2, [pc, #172]	; (8007f48 <v_R45D+0x20c>)
 8007e9a:	8813      	ldrh	r3, [r2, #0]
 8007e9c:	f36f 2308 	bfc	r3, #8, #1
 8007ea0:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007ea2:	4b2a      	ldr	r3, [pc, #168]	; (8007f4c <v_R45D+0x210>)
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <v_R45D+0x214>)
 8007ea6:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007ea8:	4b2a      	ldr	r3, [pc, #168]	; (8007f54 <v_R45D+0x218>)
 8007eaa:	4a29      	ldr	r2, [pc, #164]	; (8007f50 <v_R45D+0x214>)
 8007eac:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007eae:	4b2a      	ldr	r3, [pc, #168]	; (8007f58 <v_R45D+0x21c>)
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	; (8007f5c <v_R45D+0x220>)
 8007eb2:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <v_R45D+0x224>)
 8007eb6:	4a29      	ldr	r2, [pc, #164]	; (8007f5c <v_R45D+0x220>)
 8007eb8:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007eba:	f04f 0300 	mov.w	r3, #0
 8007ebe:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <v_R45D+0x228>)
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	4a29      	ldr	r2, [pc, #164]	; (8007f68 <v_R45D+0x22c>)
 8007ec4:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007ec6:	4a20      	ldr	r2, [pc, #128]	; (8007f48 <v_R45D+0x20c>)
 8007ec8:	8813      	ldrh	r3, [r2, #0]
 8007eca:	f043 0304 	orr.w	r3, r3, #4
 8007ece:	8013      	strh	r3, [r2, #0]
	control_start();
 8007ed0:	f7fc ff50 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8007ed4:	4b25      	ldr	r3, [pc, #148]	; (8007f6c <v_R45D+0x230>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d115      	bne.n	8007f08 <v_R45D+0x1cc>
		while(dist_l < V_OFFSET-10 && dist_r < V_OFFSET-10);
 8007edc:	bf00      	nop
 8007ede:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <v_R45D+0x22c>)
 8007ee0:	edd3 7a00 	vldr	s15, [r3]
 8007ee4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef0:	d51f      	bpl.n	8007f32 <v_R45D+0x1f6>
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <v_R45D+0x228>)
 8007ef4:	edd3 7a00 	vldr	s15, [r3]
 8007ef8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f04:	d4eb      	bmi.n	8007ede <v_R45D+0x1a2>
 8007f06:	e014      	b.n	8007f32 <v_R45D+0x1f6>
	}else{
		while(dist_l < V_OFFSET+25 && dist_r < V_OFFSET+25);
 8007f08:	bf00      	nop
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <v_R45D+0x22c>)
 8007f0c:	edd3 7a00 	vldr	s15, [r3]
 8007f10:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007fa4 <v_R45D+0x268>
 8007f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f1c:	d509      	bpl.n	8007f32 <v_R45D+0x1f6>
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <v_R45D+0x228>)
 8007f20:	edd3 7a00 	vldr	s15, [r3]
 8007f24:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007fa4 <v_R45D+0x268>
 8007f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f30:	d4eb      	bmi.n	8007f0a <v_R45D+0x1ce>
	}

	control_start();
 8007f32:	f7fc ff1f 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 8007f36:	230a      	movs	r3, #10
 8007f38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007f3c:	2132      	movs	r1, #50	; 0x32
 8007f3e:	481a      	ldr	r0, [pc, #104]	; (8007fa8 <v_R45D+0x26c>)
 8007f40:	f7fd f84a 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 75 && dist_r < 75);
*/}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000fa8 	.word	0x20000fa8
 8007f4c:	20000d9c 	.word	0x20000d9c
 8007f50:	461c4000 	.word	0x461c4000
 8007f54:	20000b20 	.word	0x20000b20
 8007f58:	200007b4 	.word	0x200007b4
 8007f5c:	43c80000 	.word	0x43c80000
 8007f60:	200001dc 	.word	0x200001dc
 8007f64:	20000b2c 	.word	0x20000b2c
 8007f68:	200012e4 	.word	0x200012e4
 8007f6c:	20000b28 	.word	0x20000b28
 8007f70:	420c0000 	.word	0x420c0000
 8007f74:	428c0000 	.word	0x428c0000
 8007f78:	20000b98 	.word	0x20000b98
 8007f7c:	453b8000 	.word	0x453b8000
 8007f80:	200001e0 	.word	0x200001e0
 8007f84:	20000b24 	.word	0x20000b24
 8007f88:	43960000 	.word	0x43960000
 8007f8c:	20000b34 	.word	0x20000b34
 8007f90:	20000c3c 	.word	0x20000c3c
 8007f94:	20000b9c 	.word	0x20000b9c
 8007f98:	42200000 	.word	0x42200000
 8007f9c:	c53b8000 	.word	0xc53b8000
 8007fa0:	42340000 	.word	0x42340000
 8007fa4:	42700000 	.word	0x42700000
 8007fa8:	ffffd8f0 	.word	0xffffd8f0

08007fac <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0

	full_led_write(6);
 8007fb0:	2006      	movs	r0, #6
 8007fb2:	f008 fca5 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007fb6:	4a80      	ldr	r2, [pc, #512]	; (80081b8 <v_L45D+0x20c>)
 8007fb8:	8813      	ldrh	r3, [r2, #0]
 8007fba:	f36f 2308 	bfc	r3, #8, #1
 8007fbe:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007fc0:	4b7e      	ldr	r3, [pc, #504]	; (80081bc <v_L45D+0x210>)
 8007fc2:	4a7f      	ldr	r2, [pc, #508]	; (80081c0 <v_L45D+0x214>)
 8007fc4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007fc6:	4b7f      	ldr	r3, [pc, #508]	; (80081c4 <v_L45D+0x218>)
 8007fc8:	4a7d      	ldr	r2, [pc, #500]	; (80081c0 <v_L45D+0x214>)
 8007fca:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007fcc:	4b7e      	ldr	r3, [pc, #504]	; (80081c8 <v_L45D+0x21c>)
 8007fce:	4a7f      	ldr	r2, [pc, #508]	; (80081cc <v_L45D+0x220>)
 8007fd0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007fd2:	4b7f      	ldr	r3, [pc, #508]	; (80081d0 <v_L45D+0x224>)
 8007fd4:	4a7d      	ldr	r2, [pc, #500]	; (80081cc <v_L45D+0x220>)
 8007fd6:	601a      	str	r2, [r3, #0]

	control_start();
 8007fd8:	f7fc fecc 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	4a7c      	ldr	r2, [pc, #496]	; (80081d4 <v_L45D+0x228>)
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	4a7c      	ldr	r2, [pc, #496]	; (80081d8 <v_L45D+0x22c>)
 8007fe6:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8007fe8:	4b7c      	ldr	r3, [pc, #496]	; (80081dc <v_L45D+0x230>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d115      	bne.n	800801c <v_L45D+0x70>
		while(dist_l < V_OFFSET && dist_r < V_OFFSET);
 8007ff0:	bf00      	nop
 8007ff2:	4b79      	ldr	r3, [pc, #484]	; (80081d8 <v_L45D+0x22c>)
 8007ff4:	edd3 7a00 	vldr	s15, [r3]
 8007ff8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80081e0 <v_L45D+0x234>
 8007ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008004:	d51f      	bpl.n	8008046 <v_L45D+0x9a>
 8008006:	4b73      	ldr	r3, [pc, #460]	; (80081d4 <v_L45D+0x228>)
 8008008:	edd3 7a00 	vldr	s15, [r3]
 800800c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80081e0 <v_L45D+0x234>
 8008010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008018:	d4eb      	bmi.n	8007ff2 <v_L45D+0x46>
 800801a:	e014      	b.n	8008046 <v_L45D+0x9a>
	}else{
		while(dist_l < V_OFFSET+43 && dist_r < V_OFFSET+43);
 800801c:	bf00      	nop
 800801e:	4b6e      	ldr	r3, [pc, #440]	; (80081d8 <v_L45D+0x22c>)
 8008020:	edd3 7a00 	vldr	s15, [r3]
 8008024:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80081e4 <v_L45D+0x238>
 8008028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	d509      	bpl.n	8008046 <v_L45D+0x9a>
 8008032:	4b68      	ldr	r3, [pc, #416]	; (80081d4 <v_L45D+0x228>)
 8008034:	edd3 7a00 	vldr	s15, [r3]
 8008038:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80081e4 <v_L45D+0x238>
 800803c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008044:	d4eb      	bmi.n	800801e <v_L45D+0x72>
	}
	drive_stop();
 8008046:	f7fc fe6d 	bl	8004d24 <drive_stop>
	control_stop();
 800804a:	f7fc fea7 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 800804e:	4a5a      	ldr	r2, [pc, #360]	; (80081b8 <v_L45D+0x20c>)
 8008050:	8813      	ldrh	r3, [r2, #0]
 8008052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008056:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -V_DEGACCEL;
 8008058:	4b63      	ldr	r3, [pc, #396]	; (80081e8 <v_L45D+0x23c>)
 800805a:	4a64      	ldr	r2, [pc, #400]	; (80081ec <v_L45D+0x240>)
 800805c:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800805e:	4b64      	ldr	r3, [pc, #400]	; (80081f0 <v_L45D+0x244>)
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
	omega_min = -V_OMEGA;
 8008066:	4b63      	ldr	r3, [pc, #396]	; (80081f4 <v_L45D+0x248>)
 8008068:	4a63      	ldr	r2, [pc, #396]	; (80081f8 <v_L45D+0x24c>)
 800806a:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 800806c:	4b63      	ldr	r3, [pc, #396]	; (80081fc <v_L45D+0x250>)
 800806e:	4a57      	ldr	r2, [pc, #348]	; (80081cc <v_L45D+0x220>)
 8008070:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008072:	4a51      	ldr	r2, [pc, #324]	; (80081b8 <v_L45D+0x20c>)
 8008074:	8813      	ldrh	r3, [r2, #0]
 8008076:	f043 0302 	orr.w	r3, r3, #2
 800807a:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+20);
 800807c:	bf00      	nop
 800807e:	4b60      	ldr	r3, [pc, #384]	; (8008200 <v_L45D+0x254>)
 8008080:	edd3 7a00 	vldr	s15, [r3]
 8008084:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800808c:	4b5d      	ldr	r3, [pc, #372]	; (8008204 <v_L45D+0x258>)
 800808e:	edd3 7a00 	vldr	s15, [r3]
 8008092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809a:	dcf0      	bgt.n	800807e <v_L45D+0xd2>

	target_degaccel_z = 0;
 800809c:	4b52      	ldr	r3, [pc, #328]	; (80081e8 <v_L45D+0x23c>)
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+40);
 80080a4:	bf00      	nop
 80080a6:	4b56      	ldr	r3, [pc, #344]	; (8008200 <v_L45D+0x254>)
 80080a8:	edd3 7a00 	vldr	s15, [r3]
 80080ac:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008208 <v_L45D+0x25c>
 80080b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b4:	4b53      	ldr	r3, [pc, #332]	; (8008204 <v_L45D+0x258>)
 80080b6:	edd3 7a00 	vldr	s15, [r3]
 80080ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	dcf0      	bgt.n	80080a6 <v_L45D+0xfa>

	target_degaccel_z = V_DEGACCEL;
 80080c4:	4b48      	ldr	r3, [pc, #288]	; (80081e8 <v_L45D+0x23c>)
 80080c6:	4a51      	ldr	r2, [pc, #324]	; (800820c <v_L45D+0x260>)
 80080c8:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z+45);
 80080ca:	bf00      	nop
 80080cc:	4b4c      	ldr	r3, [pc, #304]	; (8008200 <v_L45D+0x254>)
 80080ce:	edd3 7a00 	vldr	s15, [r3]
 80080d2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8008210 <v_L45D+0x264>
 80080d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080da:	4b4a      	ldr	r3, [pc, #296]	; (8008204 <v_L45D+0x258>)
 80080dc:	edd3 7a00 	vldr	s15, [r3]
 80080e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e8:	d4f0      	bmi.n	80080cc <v_L45D+0x120>
	turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80080ea:	2103      	movs	r1, #3
 80080ec:	20ff      	movs	r0, #255	; 0xff
 80080ee:	f006 fe37 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 80080f2:	4b3a      	ldr	r3, [pc, #232]	; (80081dc <v_L45D+0x230>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	3301      	adds	r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	bfb8      	it	lt
 8008100:	425b      	neglt	r3, r3
 8008102:	b2da      	uxtb	r2, r3
 8008104:	4b35      	ldr	r3, [pc, #212]	; (80081dc <v_L45D+0x230>)
 8008106:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 8008108:	4a2b      	ldr	r2, [pc, #172]	; (80081b8 <v_L45D+0x20c>)
 800810a:	8813      	ldrh	r3, [r2, #0]
 800810c:	f36f 2308 	bfc	r3, #8, #1
 8008110:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008112:	4b2a      	ldr	r3, [pc, #168]	; (80081bc <v_L45D+0x210>)
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <v_L45D+0x214>)
 8008116:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008118:	4b2a      	ldr	r3, [pc, #168]	; (80081c4 <v_L45D+0x218>)
 800811a:	4a29      	ldr	r2, [pc, #164]	; (80081c0 <v_L45D+0x214>)
 800811c:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800811e:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <v_L45D+0x21c>)
 8008120:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <v_L45D+0x220>)
 8008122:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008124:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <v_L45D+0x224>)
 8008126:	4a29      	ldr	r2, [pc, #164]	; (80081cc <v_L45D+0x220>)
 8008128:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	4a29      	ldr	r2, [pc, #164]	; (80081d4 <v_L45D+0x228>)
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <v_L45D+0x22c>)
 8008134:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8008136:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <v_L45D+0x20c>)
 8008138:	8813      	ldrh	r3, [r2, #0]
 800813a:	f043 0304 	orr.w	r3, r3, #4
 800813e:	8013      	strh	r3, [r2, #0]
	control_start();
 8008140:	f7fc fe18 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <v_L45D+0x230>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d115      	bne.n	8008178 <v_L45D+0x1cc>
		while(dist_l < V_OFFSET-10 && dist_r < V_OFFSET-10);
 800814c:	bf00      	nop
 800814e:	4b22      	ldr	r3, [pc, #136]	; (80081d8 <v_L45D+0x22c>)
 8008150:	edd3 7a00 	vldr	s15, [r3]
 8008154:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800815c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008160:	d51f      	bpl.n	80081a2 <v_L45D+0x1f6>
 8008162:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <v_L45D+0x228>)
 8008164:	edd3 7a00 	vldr	s15, [r3]
 8008168:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800816c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008174:	d4eb      	bmi.n	800814e <v_L45D+0x1a2>
 8008176:	e014      	b.n	80081a2 <v_L45D+0x1f6>
	}else{
		while(dist_l < V_OFFSET+33 && dist_r < V_OFFSET+33);
 8008178:	bf00      	nop
 800817a:	4b17      	ldr	r3, [pc, #92]	; (80081d8 <v_L45D+0x22c>)
 800817c:	edd3 7a00 	vldr	s15, [r3]
 8008180:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8008214 <v_L45D+0x268>
 8008184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800818c:	d509      	bpl.n	80081a2 <v_L45D+0x1f6>
 800818e:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <v_L45D+0x228>)
 8008190:	edd3 7a00 	vldr	s15, [r3]
 8008194:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008214 <v_L45D+0x268>
 8008198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a0:	d4eb      	bmi.n	800817a <v_L45D+0x1ce>
	}

	control_start();
 80081a2:	f7fc fde7 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 80081a6:	230a      	movs	r3, #10
 80081a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80081ac:	2132      	movs	r1, #50	; 0x32
 80081ae:	481a      	ldr	r0, [pc, #104]	; (8008218 <v_L45D+0x26c>)
 80081b0:	f7fc ff12 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 75 && dist_r < 75);
*/}
 80081b4:	bf00      	nop
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000fa8 	.word	0x20000fa8
 80081bc:	20000d9c 	.word	0x20000d9c
 80081c0:	461c4000 	.word	0x461c4000
 80081c4:	20000b20 	.word	0x20000b20
 80081c8:	200007b4 	.word	0x200007b4
 80081cc:	43c80000 	.word	0x43c80000
 80081d0:	200001dc 	.word	0x200001dc
 80081d4:	20000b2c 	.word	0x20000b2c
 80081d8:	200012e4 	.word	0x200012e4
 80081dc:	20000b28 	.word	0x20000b28
 80081e0:	420c0000 	.word	0x420c0000
 80081e4:	429c0000 	.word	0x429c0000
 80081e8:	20000b98 	.word	0x20000b98
 80081ec:	c53b8000 	.word	0xc53b8000
 80081f0:	200001e0 	.word	0x200001e0
 80081f4:	200002f0 	.word	0x200002f0
 80081f8:	c3960000 	.word	0xc3960000
 80081fc:	20000b34 	.word	0x20000b34
 8008200:	20000c3c 	.word	0x20000c3c
 8008204:	20000b9c 	.word	0x20000b9c
 8008208:	42200000 	.word	0x42200000
 800820c:	453b8000 	.word	0x453b8000
 8008210:	42340000 	.word	0x42340000
 8008214:	42880000 	.word	0x42880000
 8008218:	ffffd8f0 	.word	0xffffd8f0

0800821c <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0

	full_led_write(6);
 8008220:	2006      	movs	r0, #6
 8008222:	f008 fb6d 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008226:	4a5d      	ldr	r2, [pc, #372]	; (800839c <v_R90+0x180>)
 8008228:	8813      	ldrh	r3, [r2, #0]
 800822a:	f36f 2308 	bfc	r3, #8, #1
 800822e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008230:	4b5b      	ldr	r3, [pc, #364]	; (80083a0 <v_R90+0x184>)
 8008232:	4a5c      	ldr	r2, [pc, #368]	; (80083a4 <v_R90+0x188>)
 8008234:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008236:	4b5c      	ldr	r3, [pc, #368]	; (80083a8 <v_R90+0x18c>)
 8008238:	4a5a      	ldr	r2, [pc, #360]	; (80083a4 <v_R90+0x188>)
 800823a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800823c:	4b5b      	ldr	r3, [pc, #364]	; (80083ac <v_R90+0x190>)
 800823e:	4a5c      	ldr	r2, [pc, #368]	; (80083b0 <v_R90+0x194>)
 8008240:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008242:	4b5c      	ldr	r3, [pc, #368]	; (80083b4 <v_R90+0x198>)
 8008244:	4a5a      	ldr	r2, [pc, #360]	; (80083b0 <v_R90+0x194>)
 8008246:	601a      	str	r2, [r3, #0]

	control_start();
 8008248:	f7fc fd94 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	4a59      	ldr	r2, [pc, #356]	; (80083b8 <v_R90+0x19c>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	4a59      	ldr	r2, [pc, #356]	; (80083bc <v_R90+0x1a0>)
 8008256:	6013      	str	r3, [r2, #0]
	while(dist_l < VV_OFFSET && dist_r < VV_OFFSET);
 8008258:	bf00      	nop
 800825a:	4b58      	ldr	r3, [pc, #352]	; (80083bc <v_R90+0x1a0>)
 800825c:	edd3 7a00 	vldr	s15, [r3]
 8008260:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80083c0 <v_R90+0x1a4>
 8008264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826c:	d509      	bpl.n	8008282 <v_R90+0x66>
 800826e:	4b52      	ldr	r3, [pc, #328]	; (80083b8 <v_R90+0x19c>)
 8008270:	edd3 7a00 	vldr	s15, [r3]
 8008274:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80083c0 <v_R90+0x1a4>
 8008278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008280:	d4eb      	bmi.n	800825a <v_R90+0x3e>
	drive_stop();
 8008282:	f7fc fd4f 	bl	8004d24 <drive_stop>
	control_stop();
 8008286:	f7fc fd89 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 800828a:	4a44      	ldr	r2, [pc, #272]	; (800839c <v_R90+0x180>)
 800828c:	8813      	ldrh	r3, [r2, #0]
 800828e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008292:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VV_DEGACCEL;
 8008294:	4b4b      	ldr	r3, [pc, #300]	; (80083c4 <v_R90+0x1a8>)
 8008296:	4a4c      	ldr	r2, [pc, #304]	; (80083c8 <v_R90+0x1ac>)
 8008298:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800829a:	4b4c      	ldr	r3, [pc, #304]	; (80083cc <v_R90+0x1b0>)
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
	omega_max = VV_OMEGA;
 80082a2:	4b4b      	ldr	r3, [pc, #300]	; (80083d0 <v_R90+0x1b4>)
 80082a4:	4a42      	ldr	r2, [pc, #264]	; (80083b0 <v_R90+0x194>)
 80082a6:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 80082a8:	4b4a      	ldr	r3, [pc, #296]	; (80083d4 <v_R90+0x1b8>)
 80082aa:	4a41      	ldr	r2, [pc, #260]	; (80083b0 <v_R90+0x194>)
 80082ac:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80082ae:	4a3b      	ldr	r2, [pc, #236]	; (800839c <v_R90+0x180>)
 80082b0:	8813      	ldrh	r3, [r2, #0]
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-25);
 80082b8:	bf00      	nop
 80082ba:	4b47      	ldr	r3, [pc, #284]	; (80083d8 <v_R90+0x1bc>)
 80082bc:	edd3 7a00 	vldr	s15, [r3]
 80082c0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80082c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80082c8:	4b44      	ldr	r3, [pc, #272]	; (80083dc <v_R90+0x1c0>)
 80082ca:	edd3 7a00 	vldr	s15, [r3]
 80082ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d6:	d4f0      	bmi.n	80082ba <v_R90+0x9e>

	target_degaccel_z = 0;
 80082d8:	4b3a      	ldr	r3, [pc, #232]	; (80083c4 <v_R90+0x1a8>)
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-75);
 80082e0:	bf00      	nop
 80082e2:	4b3d      	ldr	r3, [pc, #244]	; (80083d8 <v_R90+0x1bc>)
 80082e4:	edd3 7a00 	vldr	s15, [r3]
 80082e8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80083e0 <v_R90+0x1c4>
 80082ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80082f0:	4b3a      	ldr	r3, [pc, #232]	; (80083dc <v_R90+0x1c0>)
 80082f2:	edd3 7a00 	vldr	s15, [r3]
 80082f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fe:	d4f0      	bmi.n	80082e2 <v_R90+0xc6>

	target_degaccel_z = -VV_DEGACCEL;
 8008300:	4b30      	ldr	r3, [pc, #192]	; (80083c4 <v_R90+0x1a8>)
 8008302:	4a38      	ldr	r2, [pc, #224]	; (80083e4 <v_R90+0x1c8>)
 8008304:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8008306:	bf00      	nop
 8008308:	4b33      	ldr	r3, [pc, #204]	; (80083d8 <v_R90+0x1bc>)
 800830a:	edd3 7a00 	vldr	s15, [r3]
 800830e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80083e8 <v_R90+0x1cc>
 8008312:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008316:	4b31      	ldr	r3, [pc, #196]	; (80083dc <v_R90+0x1c0>)
 8008318:	edd3 7a00 	vldr	s15, [r3]
 800831c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	d4f0      	bmi.n	8008308 <v_R90+0xec>
	turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008326:	2103      	movs	r1, #3
 8008328:	2002      	movs	r0, #2
 800832a:	f006 fd19 	bl	800ed60 <turn_dir>

	MF.FLAG.GYRO = 0;
 800832e:	4a1b      	ldr	r2, [pc, #108]	; (800839c <v_R90+0x180>)
 8008330:	8813      	ldrh	r3, [r2, #0]
 8008332:	f36f 2308 	bfc	r3, #8, #1
 8008336:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008338:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <v_R90+0x184>)
 800833a:	4a1a      	ldr	r2, [pc, #104]	; (80083a4 <v_R90+0x188>)
 800833c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800833e:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <v_R90+0x18c>)
 8008340:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <v_R90+0x188>)
 8008342:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008344:	4b19      	ldr	r3, [pc, #100]	; (80083ac <v_R90+0x190>)
 8008346:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <v_R90+0x194>)
 8008348:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800834a:	4b1a      	ldr	r3, [pc, #104]	; (80083b4 <v_R90+0x198>)
 800834c:	4a18      	ldr	r2, [pc, #96]	; (80083b0 <v_R90+0x194>)
 800834e:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <v_R90+0x19c>)
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	4a18      	ldr	r2, [pc, #96]	; (80083bc <v_R90+0x1a0>)
 800835a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800835c:	4a0f      	ldr	r2, [pc, #60]	; (800839c <v_R90+0x180>)
 800835e:	8813      	ldrh	r3, [r2, #0]
 8008360:	f043 0304 	orr.w	r3, r3, #4
 8008364:	8013      	strh	r3, [r2, #0]
	control_start();
 8008366:	f7fc fd05 	bl	8004d74 <control_start>
	while(dist_l < VV_OFFSET && dist_r < VV_OFFSET);
 800836a:	bf00      	nop
 800836c:	4b13      	ldr	r3, [pc, #76]	; (80083bc <v_R90+0x1a0>)
 800836e:	edd3 7a00 	vldr	s15, [r3]
 8008372:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80083c0 <v_R90+0x1a4>
 8008376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	d400      	bmi.n	8008382 <v_R90+0x166>
}
 8008380:	e009      	b.n	8008396 <v_R90+0x17a>
	while(dist_l < VV_OFFSET && dist_r < VV_OFFSET);
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <v_R90+0x19c>)
 8008384:	edd3 7a00 	vldr	s15, [r3]
 8008388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80083c0 <v_R90+0x1a4>
 800838c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	d4ea      	bmi.n	800836c <v_R90+0x150>
}
 8008396:	bf00      	nop
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000fa8 	.word	0x20000fa8
 80083a0:	20000d9c 	.word	0x20000d9c
 80083a4:	461c4000 	.word	0x461c4000
 80083a8:	20000b20 	.word	0x20000b20
 80083ac:	200007b4 	.word	0x200007b4
 80083b0:	43c80000 	.word	0x43c80000
 80083b4:	200001dc 	.word	0x200001dc
 80083b8:	20000b2c 	.word	0x20000b2c
 80083bc:	200012e4 	.word	0x200012e4
 80083c0:	42480000 	.word	0x42480000
 80083c4:	20000b98 	.word	0x20000b98
 80083c8:	457a0000 	.word	0x457a0000
 80083cc:	200001e0 	.word	0x200001e0
 80083d0:	20000b24 	.word	0x20000b24
 80083d4:	20000b34 	.word	0x20000b34
 80083d8:	20000c3c 	.word	0x20000c3c
 80083dc:	20000b9c 	.word	0x20000b9c
 80083e0:	42960000 	.word	0x42960000
 80083e4:	c57a0000 	.word	0xc57a0000
 80083e8:	42b40000 	.word	0x42b40000

080083ec <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0

	full_led_write(5);
 80083f0:	2005      	movs	r0, #5
 80083f2:	f008 fa85 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 80083f6:	4a5d      	ldr	r2, [pc, #372]	; (800856c <v_L90+0x180>)
 80083f8:	8813      	ldrh	r3, [r2, #0]
 80083fa:	f36f 2308 	bfc	r3, #8, #1
 80083fe:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008400:	4b5b      	ldr	r3, [pc, #364]	; (8008570 <v_L90+0x184>)
 8008402:	4a5c      	ldr	r2, [pc, #368]	; (8008574 <v_L90+0x188>)
 8008404:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008406:	4b5c      	ldr	r3, [pc, #368]	; (8008578 <v_L90+0x18c>)
 8008408:	4a5a      	ldr	r2, [pc, #360]	; (8008574 <v_L90+0x188>)
 800840a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800840c:	4b5b      	ldr	r3, [pc, #364]	; (800857c <v_L90+0x190>)
 800840e:	4a5c      	ldr	r2, [pc, #368]	; (8008580 <v_L90+0x194>)
 8008410:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008412:	4b5c      	ldr	r3, [pc, #368]	; (8008584 <v_L90+0x198>)
 8008414:	4a5a      	ldr	r2, [pc, #360]	; (8008580 <v_L90+0x194>)
 8008416:	601a      	str	r2, [r3, #0]

	control_start();
 8008418:	f7fc fcac 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800841c:	f04f 0300 	mov.w	r3, #0
 8008420:	4a59      	ldr	r2, [pc, #356]	; (8008588 <v_L90+0x19c>)
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	4a59      	ldr	r2, [pc, #356]	; (800858c <v_L90+0x1a0>)
 8008426:	6013      	str	r3, [r2, #0]
	while(dist_l < VV_OFFSET && dist_r < VV_OFFSET);
 8008428:	bf00      	nop
 800842a:	4b58      	ldr	r3, [pc, #352]	; (800858c <v_L90+0x1a0>)
 800842c:	edd3 7a00 	vldr	s15, [r3]
 8008430:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8008590 <v_L90+0x1a4>
 8008434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843c:	d509      	bpl.n	8008452 <v_L90+0x66>
 800843e:	4b52      	ldr	r3, [pc, #328]	; (8008588 <v_L90+0x19c>)
 8008440:	edd3 7a00 	vldr	s15, [r3]
 8008444:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8008590 <v_L90+0x1a4>
 8008448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	d4eb      	bmi.n	800842a <v_L90+0x3e>
	drive_stop();
 8008452:	f7fc fc67 	bl	8004d24 <drive_stop>
	control_stop();
 8008456:	f7fc fca1 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 800845a:	4a44      	ldr	r2, [pc, #272]	; (800856c <v_L90+0x180>)
 800845c:	8813      	ldrh	r3, [r2, #0]
 800845e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008462:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VV_DEGACCEL;
 8008464:	4b4b      	ldr	r3, [pc, #300]	; (8008594 <v_L90+0x1a8>)
 8008466:	4a4c      	ldr	r2, [pc, #304]	; (8008598 <v_L90+0x1ac>)
 8008468:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800846a:	4b4c      	ldr	r3, [pc, #304]	; (800859c <v_L90+0x1b0>)
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
	omega_min = -VV_OMEGA;
 8008472:	4b4b      	ldr	r3, [pc, #300]	; (80085a0 <v_L90+0x1b4>)
 8008474:	4a4b      	ldr	r2, [pc, #300]	; (80085a4 <v_L90+0x1b8>)
 8008476:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8008478:	4b4b      	ldr	r3, [pc, #300]	; (80085a8 <v_L90+0x1bc>)
 800847a:	4a41      	ldr	r2, [pc, #260]	; (8008580 <v_L90+0x194>)
 800847c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800847e:	4a3b      	ldr	r2, [pc, #236]	; (800856c <v_L90+0x180>)
 8008480:	8813      	ldrh	r3, [r2, #0]
 8008482:	f043 0302 	orr.w	r3, r3, #2
 8008486:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+25);
 8008488:	bf00      	nop
 800848a:	4b48      	ldr	r3, [pc, #288]	; (80085ac <v_L90+0x1c0>)
 800848c:	edd3 7a00 	vldr	s15, [r3]
 8008490:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008498:	4b45      	ldr	r3, [pc, #276]	; (80085b0 <v_L90+0x1c4>)
 800849a:	edd3 7a00 	vldr	s15, [r3]
 800849e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a6:	dcf0      	bgt.n	800848a <v_L90+0x9e>

	target_degaccel_z = 0;
 80084a8:	4b3a      	ldr	r3, [pc, #232]	; (8008594 <v_L90+0x1a8>)
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+75);
 80084b0:	bf00      	nop
 80084b2:	4b3e      	ldr	r3, [pc, #248]	; (80085ac <v_L90+0x1c0>)
 80084b4:	edd3 7a00 	vldr	s15, [r3]
 80084b8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80085b4 <v_L90+0x1c8>
 80084bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c0:	4b3b      	ldr	r3, [pc, #236]	; (80085b0 <v_L90+0x1c4>)
 80084c2:	edd3 7a00 	vldr	s15, [r3]
 80084c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ce:	dcf0      	bgt.n	80084b2 <v_L90+0xc6>

	target_degaccel_z = VV_DEGACCEL;
 80084d0:	4b30      	ldr	r3, [pc, #192]	; (8008594 <v_L90+0x1a8>)
 80084d2:	4a39      	ldr	r2, [pc, #228]	; (80085b8 <v_L90+0x1cc>)
 80084d4:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80084d6:	bf00      	nop
 80084d8:	4b34      	ldr	r3, [pc, #208]	; (80085ac <v_L90+0x1c0>)
 80084da:	edd3 7a00 	vldr	s15, [r3]
 80084de:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80085bc <v_L90+0x1d0>
 80084e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e6:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <v_L90+0x1c4>)
 80084e8:	edd3 7a00 	vldr	s15, [r3]
 80084ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f4:	dcf0      	bgt.n	80084d8 <v_L90+0xec>
	turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084f6:	2103      	movs	r1, #3
 80084f8:	20fe      	movs	r0, #254	; 0xfe
 80084fa:	f006 fc31 	bl	800ed60 <turn_dir>

	MF.FLAG.GYRO = 0;
 80084fe:	4a1b      	ldr	r2, [pc, #108]	; (800856c <v_L90+0x180>)
 8008500:	8813      	ldrh	r3, [r2, #0]
 8008502:	f36f 2308 	bfc	r3, #8, #1
 8008506:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008508:	4b19      	ldr	r3, [pc, #100]	; (8008570 <v_L90+0x184>)
 800850a:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <v_L90+0x188>)
 800850c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800850e:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <v_L90+0x18c>)
 8008510:	4a18      	ldr	r2, [pc, #96]	; (8008574 <v_L90+0x188>)
 8008512:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008514:	4b19      	ldr	r3, [pc, #100]	; (800857c <v_L90+0x190>)
 8008516:	4a1a      	ldr	r2, [pc, #104]	; (8008580 <v_L90+0x194>)
 8008518:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800851a:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <v_L90+0x198>)
 800851c:	4a18      	ldr	r2, [pc, #96]	; (8008580 <v_L90+0x194>)
 800851e:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	4a18      	ldr	r2, [pc, #96]	; (8008588 <v_L90+0x19c>)
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	4a18      	ldr	r2, [pc, #96]	; (800858c <v_L90+0x1a0>)
 800852a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800852c:	4a0f      	ldr	r2, [pc, #60]	; (800856c <v_L90+0x180>)
 800852e:	8813      	ldrh	r3, [r2, #0]
 8008530:	f043 0304 	orr.w	r3, r3, #4
 8008534:	8013      	strh	r3, [r2, #0]
	control_start();
 8008536:	f7fc fc1d 	bl	8004d74 <control_start>
	while(dist_l < VV_OFFSET && dist_r < VV_OFFSET);
 800853a:	bf00      	nop
 800853c:	4b13      	ldr	r3, [pc, #76]	; (800858c <v_L90+0x1a0>)
 800853e:	edd3 7a00 	vldr	s15, [r3]
 8008542:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8008590 <v_L90+0x1a4>
 8008546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854e:	d400      	bmi.n	8008552 <v_L90+0x166>
}
 8008550:	e009      	b.n	8008566 <v_L90+0x17a>
	while(dist_l < VV_OFFSET && dist_r < VV_OFFSET);
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <v_L90+0x19c>)
 8008554:	edd3 7a00 	vldr	s15, [r3]
 8008558:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008590 <v_L90+0x1a4>
 800855c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008564:	d4ea      	bmi.n	800853c <v_L90+0x150>
}
 8008566:	bf00      	nop
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000fa8 	.word	0x20000fa8
 8008570:	20000d9c 	.word	0x20000d9c
 8008574:	461c4000 	.word	0x461c4000
 8008578:	20000b20 	.word	0x20000b20
 800857c:	200007b4 	.word	0x200007b4
 8008580:	43c80000 	.word	0x43c80000
 8008584:	200001dc 	.word	0x200001dc
 8008588:	20000b2c 	.word	0x20000b2c
 800858c:	200012e4 	.word	0x200012e4
 8008590:	42480000 	.word	0x42480000
 8008594:	20000b98 	.word	0x20000b98
 8008598:	c57a0000 	.word	0xc57a0000
 800859c:	200001e0 	.word	0x200001e0
 80085a0:	200002f0 	.word	0x200002f0
 80085a4:	c3c80000 	.word	0xc3c80000
 80085a8:	20000b34 	.word	0x20000b34
 80085ac:	20000c3c 	.word	0x20000c3c
 80085b0:	20000b9c 	.word	0x20000b9c
 80085b4:	42960000 	.word	0x42960000
 80085b8:	457a0000 	.word	0x457a0000
 80085bc:	42b40000 	.word	0x42b40000

080085c0 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0

	full_led_write(6);
 80085c4:	2006      	movs	r0, #6
 80085c6:	f008 f99b 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 80085ca:	4a7d      	ldr	r2, [pc, #500]	; (80087c0 <v_R135+0x200>)
 80085cc:	8813      	ldrh	r3, [r2, #0]
 80085ce:	f36f 2308 	bfc	r3, #8, #1
 80085d2:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80085d4:	4b7b      	ldr	r3, [pc, #492]	; (80087c4 <v_R135+0x204>)
 80085d6:	4a7c      	ldr	r2, [pc, #496]	; (80087c8 <v_R135+0x208>)
 80085d8:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80085da:	4b7c      	ldr	r3, [pc, #496]	; (80087cc <v_R135+0x20c>)
 80085dc:	4a7a      	ldr	r2, [pc, #488]	; (80087c8 <v_R135+0x208>)
 80085de:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80085e0:	4b7b      	ldr	r3, [pc, #492]	; (80087d0 <v_R135+0x210>)
 80085e2:	4a7c      	ldr	r2, [pc, #496]	; (80087d4 <v_R135+0x214>)
 80085e4:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80085e6:	4b7c      	ldr	r3, [pc, #496]	; (80087d8 <v_R135+0x218>)
 80085e8:	4a7a      	ldr	r2, [pc, #488]	; (80087d4 <v_R135+0x214>)
 80085ea:	601a      	str	r2, [r3, #0]

	control_start();
 80085ec:	f7fc fbc2 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	4a79      	ldr	r2, [pc, #484]	; (80087dc <v_R135+0x21c>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	4a79      	ldr	r2, [pc, #484]	; (80087e0 <v_R135+0x220>)
 80085fa:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 80085fc:	4b79      	ldr	r3, [pc, #484]	; (80087e4 <v_R135+0x224>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d115      	bne.n	8008630 <v_R135+0x70>
		while(dist_l < VVV_OFFSET+30 && dist_r < VVV_OFFSET+30);
 8008604:	bf00      	nop
 8008606:	4b76      	ldr	r3, [pc, #472]	; (80087e0 <v_R135+0x220>)
 8008608:	edd3 7a00 	vldr	s15, [r3]
 800860c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80087e8 <v_R135+0x228>
 8008610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008618:	d51f      	bpl.n	800865a <v_R135+0x9a>
 800861a:	4b70      	ldr	r3, [pc, #448]	; (80087dc <v_R135+0x21c>)
 800861c:	edd3 7a00 	vldr	s15, [r3]
 8008620:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80087e8 <v_R135+0x228>
 8008624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862c:	d4eb      	bmi.n	8008606 <v_R135+0x46>
 800862e:	e014      	b.n	800865a <v_R135+0x9a>
	}else{
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 8008630:	bf00      	nop
 8008632:	4b6b      	ldr	r3, [pc, #428]	; (80087e0 <v_R135+0x220>)
 8008634:	edd3 7a00 	vldr	s15, [r3]
 8008638:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80087ec <v_R135+0x22c>
 800863c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008644:	d509      	bpl.n	800865a <v_R135+0x9a>
 8008646:	4b65      	ldr	r3, [pc, #404]	; (80087dc <v_R135+0x21c>)
 8008648:	edd3 7a00 	vldr	s15, [r3]
 800864c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80087ec <v_R135+0x22c>
 8008650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008658:	d4eb      	bmi.n	8008632 <v_R135+0x72>
	}
	drive_stop();
 800865a:	f7fc fb63 	bl	8004d24 <drive_stop>
	control_stop();
 800865e:	f7fc fb9d 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8008662:	4a57      	ldr	r2, [pc, #348]	; (80087c0 <v_R135+0x200>)
 8008664:	8813      	ldrh	r3, [r2, #0]
 8008666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800866a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VVV_DEGACCEL;
 800866c:	4b60      	ldr	r3, [pc, #384]	; (80087f0 <v_R135+0x230>)
 800866e:	4a61      	ldr	r2, [pc, #388]	; (80087f4 <v_R135+0x234>)
 8008670:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008672:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <v_R135+0x238>)
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	601a      	str	r2, [r3, #0]
	omega_max = VVV_OMEGA;
 800867a:	4b60      	ldr	r3, [pc, #384]	; (80087fc <v_R135+0x23c>)
 800867c:	4a60      	ldr	r2, [pc, #384]	; (8008800 <v_R135+0x240>)
 800867e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8008680:	4b60      	ldr	r3, [pc, #384]	; (8008804 <v_R135+0x244>)
 8008682:	4a54      	ldr	r2, [pc, #336]	; (80087d4 <v_R135+0x214>)
 8008684:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008686:	4a4e      	ldr	r2, [pc, #312]	; (80087c0 <v_R135+0x200>)
 8008688:	8813      	ldrh	r3, [r2, #0]
 800868a:	f043 0302 	orr.w	r3, r3, #2
 800868e:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-25);
 8008690:	bf00      	nop
 8008692:	4b5d      	ldr	r3, [pc, #372]	; (8008808 <v_R135+0x248>)
 8008694:	edd3 7a00 	vldr	s15, [r3]
 8008698:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800869c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80086a0:	4b5a      	ldr	r3, [pc, #360]	; (800880c <v_R135+0x24c>)
 80086a2:	edd3 7a00 	vldr	s15, [r3]
 80086a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ae:	d4f0      	bmi.n	8008692 <v_R135+0xd2>

	target_degaccel_z = 0;
 80086b0:	4b4f      	ldr	r3, [pc, #316]	; (80087f0 <v_R135+0x230>)
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-120);
 80086b8:	bf00      	nop
 80086ba:	4b53      	ldr	r3, [pc, #332]	; (8008808 <v_R135+0x248>)
 80086bc:	edd3 7a00 	vldr	s15, [r3]
 80086c0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008810 <v_R135+0x250>
 80086c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80086c8:	4b50      	ldr	r3, [pc, #320]	; (800880c <v_R135+0x24c>)
 80086ca:	edd3 7a00 	vldr	s15, [r3]
 80086ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d6:	d4f0      	bmi.n	80086ba <v_R135+0xfa>

	target_degaccel_z = -VVV_DEGACCEL;
 80086d8:	4b45      	ldr	r3, [pc, #276]	; (80087f0 <v_R135+0x230>)
 80086da:	4a4e      	ldr	r2, [pc, #312]	; (8008814 <v_R135+0x254>)
 80086dc:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-135);
 80086de:	bf00      	nop
 80086e0:	4b49      	ldr	r3, [pc, #292]	; (8008808 <v_R135+0x248>)
 80086e2:	edd3 7a00 	vldr	s15, [r3]
 80086e6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008818 <v_R135+0x258>
 80086ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80086ee:	4b47      	ldr	r3, [pc, #284]	; (800880c <v_R135+0x24c>)
 80086f0:	edd3 7a00 	vldr	s15, [r3]
 80086f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fc:	d4f0      	bmi.n	80086e0 <v_R135+0x120>
	turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80086fe:	2103      	movs	r1, #3
 8008700:	2003      	movs	r0, #3
 8008702:	f006 fb2d 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8008706:	4b37      	ldr	r3, [pc, #220]	; (80087e4 <v_R135+0x224>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	3301      	adds	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	bfb8      	it	lt
 8008714:	425b      	neglt	r3, r3
 8008716:	b2da      	uxtb	r2, r3
 8008718:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <v_R135+0x224>)
 800871a:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 800871c:	4a28      	ldr	r2, [pc, #160]	; (80087c0 <v_R135+0x200>)
 800871e:	8813      	ldrh	r3, [r2, #0]
 8008720:	f36f 2308 	bfc	r3, #8, #1
 8008724:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008726:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <v_R135+0x204>)
 8008728:	4a27      	ldr	r2, [pc, #156]	; (80087c8 <v_R135+0x208>)
 800872a:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800872c:	4b27      	ldr	r3, [pc, #156]	; (80087cc <v_R135+0x20c>)
 800872e:	4a26      	ldr	r2, [pc, #152]	; (80087c8 <v_R135+0x208>)
 8008730:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008732:	4b27      	ldr	r3, [pc, #156]	; (80087d0 <v_R135+0x210>)
 8008734:	4a27      	ldr	r2, [pc, #156]	; (80087d4 <v_R135+0x214>)
 8008736:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008738:	4b27      	ldr	r3, [pc, #156]	; (80087d8 <v_R135+0x218>)
 800873a:	4a26      	ldr	r2, [pc, #152]	; (80087d4 <v_R135+0x214>)
 800873c:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	4a26      	ldr	r2, [pc, #152]	; (80087dc <v_R135+0x21c>)
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4a26      	ldr	r2, [pc, #152]	; (80087e0 <v_R135+0x220>)
 8008748:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800874a:	4a1d      	ldr	r2, [pc, #116]	; (80087c0 <v_R135+0x200>)
 800874c:	8813      	ldrh	r3, [r2, #0]
 800874e:	f043 0304 	orr.w	r3, r3, #4
 8008752:	8013      	strh	r3, [r2, #0]
	control_start();
 8008754:	f7fc fb0e 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8008758:	4b22      	ldr	r3, [pc, #136]	; (80087e4 <v_R135+0x224>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d116      	bne.n	800878e <v_R135+0x1ce>
		while(dist_l < VVV_OFFSET+30 && dist_r < VVV_OFFSET+30);
 8008760:	bf00      	nop
 8008762:	4b1f      	ldr	r3, [pc, #124]	; (80087e0 <v_R135+0x220>)
 8008764:	edd3 7a00 	vldr	s15, [r3]
 8008768:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80087e8 <v_R135+0x228>
 800876c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008774:	d400      	bmi.n	8008778 <v_R135+0x1b8>
	}else{
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
	}
}
 8008776:	e020      	b.n	80087ba <v_R135+0x1fa>
		while(dist_l < VVV_OFFSET+30 && dist_r < VVV_OFFSET+30);
 8008778:	4b18      	ldr	r3, [pc, #96]	; (80087dc <v_R135+0x21c>)
 800877a:	edd3 7a00 	vldr	s15, [r3]
 800877e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80087e8 <v_R135+0x228>
 8008782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878a:	d4ea      	bmi.n	8008762 <v_R135+0x1a2>
}
 800878c:	e015      	b.n	80087ba <v_R135+0x1fa>
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 800878e:	bf00      	nop
 8008790:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <v_R135+0x220>)
 8008792:	edd3 7a00 	vldr	s15, [r3]
 8008796:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80087ec <v_R135+0x22c>
 800879a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800879e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a2:	d400      	bmi.n	80087a6 <v_R135+0x1e6>
}
 80087a4:	e009      	b.n	80087ba <v_R135+0x1fa>
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 80087a6:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <v_R135+0x21c>)
 80087a8:	edd3 7a00 	vldr	s15, [r3]
 80087ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80087ec <v_R135+0x22c>
 80087b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b8:	d4ea      	bmi.n	8008790 <v_R135+0x1d0>
}
 80087ba:	bf00      	nop
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000fa8 	.word	0x20000fa8
 80087c4:	20000d9c 	.word	0x20000d9c
 80087c8:	461c4000 	.word	0x461c4000
 80087cc:	20000b20 	.word	0x20000b20
 80087d0:	200007b4 	.word	0x200007b4
 80087d4:	43c80000 	.word	0x43c80000
 80087d8:	200001dc 	.word	0x200001dc
 80087dc:	20000b2c 	.word	0x20000b2c
 80087e0:	200012e4 	.word	0x200012e4
 80087e4:	20000b28 	.word	0x20000b28
 80087e8:	42a00000 	.word	0x42a00000
 80087ec:	42480000 	.word	0x42480000
 80087f0:	20000b98 	.word	0x20000b98
 80087f4:	453b8000 	.word	0x453b8000
 80087f8:	200001e0 	.word	0x200001e0
 80087fc:	20000b24 	.word	0x20000b24
 8008800:	43b40000 	.word	0x43b40000
 8008804:	20000b34 	.word	0x20000b34
 8008808:	20000c3c 	.word	0x20000c3c
 800880c:	20000b9c 	.word	0x20000b9c
 8008810:	42f00000 	.word	0x42f00000
 8008814:	c53b8000 	.word	0xc53b8000
 8008818:	43070000 	.word	0x43070000

0800881c <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0

	full_led_write(5);
 8008820:	2005      	movs	r0, #5
 8008822:	f008 f86d 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008826:	4a7d      	ldr	r2, [pc, #500]	; (8008a1c <v_L135+0x200>)
 8008828:	8813      	ldrh	r3, [r2, #0]
 800882a:	f36f 2308 	bfc	r3, #8, #1
 800882e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008830:	4b7b      	ldr	r3, [pc, #492]	; (8008a20 <v_L135+0x204>)
 8008832:	4a7c      	ldr	r2, [pc, #496]	; (8008a24 <v_L135+0x208>)
 8008834:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008836:	4b7c      	ldr	r3, [pc, #496]	; (8008a28 <v_L135+0x20c>)
 8008838:	4a7a      	ldr	r2, [pc, #488]	; (8008a24 <v_L135+0x208>)
 800883a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800883c:	4b7b      	ldr	r3, [pc, #492]	; (8008a2c <v_L135+0x210>)
 800883e:	4a7c      	ldr	r2, [pc, #496]	; (8008a30 <v_L135+0x214>)
 8008840:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008842:	4b7c      	ldr	r3, [pc, #496]	; (8008a34 <v_L135+0x218>)
 8008844:	4a7a      	ldr	r2, [pc, #488]	; (8008a30 <v_L135+0x214>)
 8008846:	601a      	str	r2, [r3, #0]

	control_start();
 8008848:	f7fc fa94 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	4a79      	ldr	r2, [pc, #484]	; (8008a38 <v_L135+0x21c>)
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	4a79      	ldr	r2, [pc, #484]	; (8008a3c <v_L135+0x220>)
 8008856:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008858:	4b79      	ldr	r3, [pc, #484]	; (8008a40 <v_L135+0x224>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d115      	bne.n	800888c <v_L135+0x70>
		while(dist_l < VVV_OFFSET+25 && dist_r < VVV_OFFSET+25);
 8008860:	bf00      	nop
 8008862:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <v_L135+0x220>)
 8008864:	edd3 7a00 	vldr	s15, [r3]
 8008868:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8008a44 <v_L135+0x228>
 800886c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008874:	d51f      	bpl.n	80088b6 <v_L135+0x9a>
 8008876:	4b70      	ldr	r3, [pc, #448]	; (8008a38 <v_L135+0x21c>)
 8008878:	edd3 7a00 	vldr	s15, [r3]
 800887c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8008a44 <v_L135+0x228>
 8008880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008888:	d4eb      	bmi.n	8008862 <v_L135+0x46>
 800888a:	e014      	b.n	80088b6 <v_L135+0x9a>
	}else{
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 800888c:	bf00      	nop
 800888e:	4b6b      	ldr	r3, [pc, #428]	; (8008a3c <v_L135+0x220>)
 8008890:	edd3 7a00 	vldr	s15, [r3]
 8008894:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008a48 <v_L135+0x22c>
 8008898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	d509      	bpl.n	80088b6 <v_L135+0x9a>
 80088a2:	4b65      	ldr	r3, [pc, #404]	; (8008a38 <v_L135+0x21c>)
 80088a4:	edd3 7a00 	vldr	s15, [r3]
 80088a8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008a48 <v_L135+0x22c>
 80088ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b4:	d4eb      	bmi.n	800888e <v_L135+0x72>
	}
	drive_stop();
 80088b6:	f7fc fa35 	bl	8004d24 <drive_stop>
	control_stop();
 80088ba:	f7fc fa6f 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 80088be:	4a57      	ldr	r2, [pc, #348]	; (8008a1c <v_L135+0x200>)
 80088c0:	8813      	ldrh	r3, [r2, #0]
 80088c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VVV_DEGACCEL;
 80088c8:	4b60      	ldr	r3, [pc, #384]	; (8008a4c <v_L135+0x230>)
 80088ca:	4a61      	ldr	r2, [pc, #388]	; (8008a50 <v_L135+0x234>)
 80088cc:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80088ce:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <v_L135+0x238>)
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
	omega_min = -VVV_OMEGA;
 80088d6:	4b60      	ldr	r3, [pc, #384]	; (8008a58 <v_L135+0x23c>)
 80088d8:	4a60      	ldr	r2, [pc, #384]	; (8008a5c <v_L135+0x240>)
 80088da:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 80088dc:	4b60      	ldr	r3, [pc, #384]	; (8008a60 <v_L135+0x244>)
 80088de:	4a54      	ldr	r2, [pc, #336]	; (8008a30 <v_L135+0x214>)
 80088e0:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80088e2:	4a4e      	ldr	r2, [pc, #312]	; (8008a1c <v_L135+0x200>)
 80088e4:	8813      	ldrh	r3, [r2, #0]
 80088e6:	f043 0302 	orr.w	r3, r3, #2
 80088ea:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+25);
 80088ec:	bf00      	nop
 80088ee:	4b5d      	ldr	r3, [pc, #372]	; (8008a64 <v_L135+0x248>)
 80088f0:	edd3 7a00 	vldr	s15, [r3]
 80088f4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80088f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088fc:	4b5a      	ldr	r3, [pc, #360]	; (8008a68 <v_L135+0x24c>)
 80088fe:	edd3 7a00 	vldr	s15, [r3]
 8008902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890a:	dcf0      	bgt.n	80088ee <v_L135+0xd2>

	target_degaccel_z = 0;
 800890c:	4b4f      	ldr	r3, [pc, #316]	; (8008a4c <v_L135+0x230>)
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+120);
 8008914:	bf00      	nop
 8008916:	4b53      	ldr	r3, [pc, #332]	; (8008a64 <v_L135+0x248>)
 8008918:	edd3 7a00 	vldr	s15, [r3]
 800891c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008a6c <v_L135+0x250>
 8008920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008924:	4b50      	ldr	r3, [pc, #320]	; (8008a68 <v_L135+0x24c>)
 8008926:	edd3 7a00 	vldr	s15, [r3]
 800892a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008932:	dcf0      	bgt.n	8008916 <v_L135+0xfa>

	target_degaccel_z = VVV_DEGACCEL;
 8008934:	4b45      	ldr	r3, [pc, #276]	; (8008a4c <v_L135+0x230>)
 8008936:	4a4e      	ldr	r2, [pc, #312]	; (8008a70 <v_L135+0x254>)
 8008938:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+135);
 800893a:	bf00      	nop
 800893c:	4b49      	ldr	r3, [pc, #292]	; (8008a64 <v_L135+0x248>)
 800893e:	edd3 7a00 	vldr	s15, [r3]
 8008942:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008a74 <v_L135+0x258>
 8008946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800894a:	4b47      	ldr	r3, [pc, #284]	; (8008a68 <v_L135+0x24c>)
 800894c:	edd3 7a00 	vldr	s15, [r3]
 8008950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008958:	dcf0      	bgt.n	800893c <v_L135+0x120>
	turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800895a:	2103      	movs	r1, #3
 800895c:	20fd      	movs	r0, #253	; 0xfd
 800895e:	f006 f9ff 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8008962:	4b37      	ldr	r3, [pc, #220]	; (8008a40 <v_L135+0x224>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	bfb8      	it	lt
 8008970:	425b      	neglt	r3, r3
 8008972:	b2da      	uxtb	r2, r3
 8008974:	4b32      	ldr	r3, [pc, #200]	; (8008a40 <v_L135+0x224>)
 8008976:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 8008978:	4a28      	ldr	r2, [pc, #160]	; (8008a1c <v_L135+0x200>)
 800897a:	8813      	ldrh	r3, [r2, #0]
 800897c:	f36f 2308 	bfc	r3, #8, #1
 8008980:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008982:	4b27      	ldr	r3, [pc, #156]	; (8008a20 <v_L135+0x204>)
 8008984:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <v_L135+0x208>)
 8008986:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008988:	4b27      	ldr	r3, [pc, #156]	; (8008a28 <v_L135+0x20c>)
 800898a:	4a26      	ldr	r2, [pc, #152]	; (8008a24 <v_L135+0x208>)
 800898c:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800898e:	4b27      	ldr	r3, [pc, #156]	; (8008a2c <v_L135+0x210>)
 8008990:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <v_L135+0x214>)
 8008992:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008994:	4b27      	ldr	r3, [pc, #156]	; (8008a34 <v_L135+0x218>)
 8008996:	4a26      	ldr	r2, [pc, #152]	; (8008a30 <v_L135+0x214>)
 8008998:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <v_L135+0x21c>)
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	4a26      	ldr	r2, [pc, #152]	; (8008a3c <v_L135+0x220>)
 80089a4:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80089a6:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <v_L135+0x200>)
 80089a8:	8813      	ldrh	r3, [r2, #0]
 80089aa:	f043 0304 	orr.w	r3, r3, #4
 80089ae:	8013      	strh	r3, [r2, #0]
	control_start();
 80089b0:	f7fc f9e0 	bl	8004d74 <control_start>
	if(v_flag == 0){
 80089b4:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <v_L135+0x224>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d116      	bne.n	80089ea <v_L135+0x1ce>
		while(dist_l < VVV_OFFSET+25 && dist_r < VVV_OFFSET+25);
 80089bc:	bf00      	nop
 80089be:	4b1f      	ldr	r3, [pc, #124]	; (8008a3c <v_L135+0x220>)
 80089c0:	edd3 7a00 	vldr	s15, [r3]
 80089c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008a44 <v_L135+0x228>
 80089c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d0:	d400      	bmi.n	80089d4 <v_L135+0x1b8>
	}else{
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
	}
}
 80089d2:	e020      	b.n	8008a16 <v_L135+0x1fa>
		while(dist_l < VVV_OFFSET+25 && dist_r < VVV_OFFSET+25);
 80089d4:	4b18      	ldr	r3, [pc, #96]	; (8008a38 <v_L135+0x21c>)
 80089d6:	edd3 7a00 	vldr	s15, [r3]
 80089da:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008a44 <v_L135+0x228>
 80089de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e6:	d4ea      	bmi.n	80089be <v_L135+0x1a2>
}
 80089e8:	e015      	b.n	8008a16 <v_L135+0x1fa>
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 80089ea:	bf00      	nop
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <v_L135+0x220>)
 80089ee:	edd3 7a00 	vldr	s15, [r3]
 80089f2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008a48 <v_L135+0x22c>
 80089f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	d400      	bmi.n	8008a02 <v_L135+0x1e6>
}
 8008a00:	e009      	b.n	8008a16 <v_L135+0x1fa>
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 8008a02:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <v_L135+0x21c>)
 8008a04:	edd3 7a00 	vldr	s15, [r3]
 8008a08:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008a48 <v_L135+0x22c>
 8008a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a14:	d4ea      	bmi.n	80089ec <v_L135+0x1d0>
}
 8008a16:	bf00      	nop
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000fa8 	.word	0x20000fa8
 8008a20:	20000d9c 	.word	0x20000d9c
 8008a24:	461c4000 	.word	0x461c4000
 8008a28:	20000b20 	.word	0x20000b20
 8008a2c:	200007b4 	.word	0x200007b4
 8008a30:	43c80000 	.word	0x43c80000
 8008a34:	200001dc 	.word	0x200001dc
 8008a38:	20000b2c 	.word	0x20000b2c
 8008a3c:	200012e4 	.word	0x200012e4
 8008a40:	20000b28 	.word	0x20000b28
 8008a44:	42960000 	.word	0x42960000
 8008a48:	42480000 	.word	0x42480000
 8008a4c:	20000b98 	.word	0x20000b98
 8008a50:	c53b8000 	.word	0xc53b8000
 8008a54:	200001e0 	.word	0x200001e0
 8008a58:	200002f0 	.word	0x200002f0
 8008a5c:	c3b40000 	.word	0xc3b40000
 8008a60:	20000b34 	.word	0x20000b34
 8008a64:	20000c3c 	.word	0x20000c3c
 8008a68:	20000b9c 	.word	0x20000b9c
 8008a6c:	42f00000 	.word	0x42f00000
 8008a70:	453b8000 	.word	0x453b8000
 8008a74:	43070000 	.word	0x43070000

08008a78 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0

	full_led_write(5);
 8008a7c:	2005      	movs	r0, #5
 8008a7e:	f007 ff3f 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008a82:	4a80      	ldr	r2, [pc, #512]	; (8008c84 <v_R135D+0x20c>)
 8008a84:	8813      	ldrh	r3, [r2, #0]
 8008a86:	f36f 2308 	bfc	r3, #8, #1
 8008a8a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008a8c:	4b7e      	ldr	r3, [pc, #504]	; (8008c88 <v_R135D+0x210>)
 8008a8e:	4a7f      	ldr	r2, [pc, #508]	; (8008c8c <v_R135D+0x214>)
 8008a90:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008a92:	4b7f      	ldr	r3, [pc, #508]	; (8008c90 <v_R135D+0x218>)
 8008a94:	4a7d      	ldr	r2, [pc, #500]	; (8008c8c <v_R135D+0x214>)
 8008a96:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008a98:	4b7e      	ldr	r3, [pc, #504]	; (8008c94 <v_R135D+0x21c>)
 8008a9a:	4a7f      	ldr	r2, [pc, #508]	; (8008c98 <v_R135D+0x220>)
 8008a9c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008a9e:	4b7f      	ldr	r3, [pc, #508]	; (8008c9c <v_R135D+0x224>)
 8008aa0:	4a7d      	ldr	r2, [pc, #500]	; (8008c98 <v_R135D+0x220>)
 8008aa2:	601a      	str	r2, [r3, #0]

	control_start();
 8008aa4:	f7fc f966 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	4a7c      	ldr	r2, [pc, #496]	; (8008ca0 <v_R135D+0x228>)
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4a7c      	ldr	r2, [pc, #496]	; (8008ca4 <v_R135D+0x22c>)
 8008ab2:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008ab4:	4b7c      	ldr	r3, [pc, #496]	; (8008ca8 <v_R135D+0x230>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d115      	bne.n	8008ae8 <v_R135D+0x70>
		while(dist_l < VVV_OFFSET+30 && dist_r < VVV_OFFSET+30);
 8008abc:	bf00      	nop
 8008abe:	4b79      	ldr	r3, [pc, #484]	; (8008ca4 <v_R135D+0x22c>)
 8008ac0:	edd3 7a00 	vldr	s15, [r3]
 8008ac4:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008cac <v_R135D+0x234>
 8008ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad0:	d51f      	bpl.n	8008b12 <v_R135D+0x9a>
 8008ad2:	4b73      	ldr	r3, [pc, #460]	; (8008ca0 <v_R135D+0x228>)
 8008ad4:	edd3 7a00 	vldr	s15, [r3]
 8008ad8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008cac <v_R135D+0x234>
 8008adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae4:	d4eb      	bmi.n	8008abe <v_R135D+0x46>
 8008ae6:	e014      	b.n	8008b12 <v_R135D+0x9a>
	}else{
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 8008ae8:	bf00      	nop
 8008aea:	4b6e      	ldr	r3, [pc, #440]	; (8008ca4 <v_R135D+0x22c>)
 8008aec:	edd3 7a00 	vldr	s15, [r3]
 8008af0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8008cb0 <v_R135D+0x238>
 8008af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afc:	d509      	bpl.n	8008b12 <v_R135D+0x9a>
 8008afe:	4b68      	ldr	r3, [pc, #416]	; (8008ca0 <v_R135D+0x228>)
 8008b00:	edd3 7a00 	vldr	s15, [r3]
 8008b04:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8008cb0 <v_R135D+0x238>
 8008b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b10:	d4eb      	bmi.n	8008aea <v_R135D+0x72>
	}
	drive_stop();
 8008b12:	f7fc f907 	bl	8004d24 <drive_stop>
	control_stop();
 8008b16:	f7fc f941 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8008b1a:	4a5a      	ldr	r2, [pc, #360]	; (8008c84 <v_R135D+0x20c>)
 8008b1c:	8813      	ldrh	r3, [r2, #0]
 8008b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b22:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VVV_DEGACCEL;
 8008b24:	4b63      	ldr	r3, [pc, #396]	; (8008cb4 <v_R135D+0x23c>)
 8008b26:	4a64      	ldr	r2, [pc, #400]	; (8008cb8 <v_R135D+0x240>)
 8008b28:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008b2a:	4b64      	ldr	r3, [pc, #400]	; (8008cbc <v_R135D+0x244>)
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
	omega_max = VVV_OMEGA;
 8008b32:	4b63      	ldr	r3, [pc, #396]	; (8008cc0 <v_R135D+0x248>)
 8008b34:	4a63      	ldr	r2, [pc, #396]	; (8008cc4 <v_R135D+0x24c>)
 8008b36:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8008b38:	4b63      	ldr	r3, [pc, #396]	; (8008cc8 <v_R135D+0x250>)
 8008b3a:	4a57      	ldr	r2, [pc, #348]	; (8008c98 <v_R135D+0x220>)
 8008b3c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008b3e:	4a51      	ldr	r2, [pc, #324]	; (8008c84 <v_R135D+0x20c>)
 8008b40:	8813      	ldrh	r3, [r2, #0]
 8008b42:	f043 0302 	orr.w	r3, r3, #2
 8008b46:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-25);
 8008b48:	bf00      	nop
 8008b4a:	4b60      	ldr	r3, [pc, #384]	; (8008ccc <v_R135D+0x254>)
 8008b4c:	edd3 7a00 	vldr	s15, [r3]
 8008b50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008b54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008b58:	4b5d      	ldr	r3, [pc, #372]	; (8008cd0 <v_R135D+0x258>)
 8008b5a:	edd3 7a00 	vldr	s15, [r3]
 8008b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b66:	d4f0      	bmi.n	8008b4a <v_R135D+0xd2>

	target_degaccel_z = 0;
 8008b68:	4b52      	ldr	r3, [pc, #328]	; (8008cb4 <v_R135D+0x23c>)
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-120);
 8008b70:	bf00      	nop
 8008b72:	4b56      	ldr	r3, [pc, #344]	; (8008ccc <v_R135D+0x254>)
 8008b74:	edd3 7a00 	vldr	s15, [r3]
 8008b78:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008cd4 <v_R135D+0x25c>
 8008b7c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008b80:	4b53      	ldr	r3, [pc, #332]	; (8008cd0 <v_R135D+0x258>)
 8008b82:	edd3 7a00 	vldr	s15, [r3]
 8008b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b8e:	d4f0      	bmi.n	8008b72 <v_R135D+0xfa>

	target_degaccel_z = -VVV_DEGACCEL;
 8008b90:	4b48      	ldr	r3, [pc, #288]	; (8008cb4 <v_R135D+0x23c>)
 8008b92:	4a51      	ldr	r2, [pc, #324]	; (8008cd8 <v_R135D+0x260>)
 8008b94:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-135);
 8008b96:	bf00      	nop
 8008b98:	4b4c      	ldr	r3, [pc, #304]	; (8008ccc <v_R135D+0x254>)
 8008b9a:	edd3 7a00 	vldr	s15, [r3]
 8008b9e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8008cdc <v_R135D+0x264>
 8008ba2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008ba6:	4b4a      	ldr	r3, [pc, #296]	; (8008cd0 <v_R135D+0x258>)
 8008ba8:	edd3 7a00 	vldr	s15, [r3]
 8008bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb4:	d4f0      	bmi.n	8008b98 <v_R135D+0x120>
	turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008bb6:	2103      	movs	r1, #3
 8008bb8:	2003      	movs	r0, #3
 8008bba:	f006 f8d1 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8008bbe:	4b3a      	ldr	r3, [pc, #232]	; (8008ca8 <v_R135D+0x230>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	bfb8      	it	lt
 8008bcc:	425b      	neglt	r3, r3
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <v_R135D+0x230>)
 8008bd2:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 8008bd4:	4a2b      	ldr	r2, [pc, #172]	; (8008c84 <v_R135D+0x20c>)
 8008bd6:	8813      	ldrh	r3, [r2, #0]
 8008bd8:	f36f 2308 	bfc	r3, #8, #1
 8008bdc:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008bde:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <v_R135D+0x210>)
 8008be0:	4a2a      	ldr	r2, [pc, #168]	; (8008c8c <v_R135D+0x214>)
 8008be2:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008be4:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <v_R135D+0x218>)
 8008be6:	4a29      	ldr	r2, [pc, #164]	; (8008c8c <v_R135D+0x214>)
 8008be8:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008bea:	4b2a      	ldr	r3, [pc, #168]	; (8008c94 <v_R135D+0x21c>)
 8008bec:	4a2a      	ldr	r2, [pc, #168]	; (8008c98 <v_R135D+0x220>)
 8008bee:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008bf0:	4b2a      	ldr	r3, [pc, #168]	; (8008c9c <v_R135D+0x224>)
 8008bf2:	4a29      	ldr	r2, [pc, #164]	; (8008c98 <v_R135D+0x220>)
 8008bf4:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	4a29      	ldr	r2, [pc, #164]	; (8008ca0 <v_R135D+0x228>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	4a29      	ldr	r2, [pc, #164]	; (8008ca4 <v_R135D+0x22c>)
 8008c00:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8008c02:	4a20      	ldr	r2, [pc, #128]	; (8008c84 <v_R135D+0x20c>)
 8008c04:	8813      	ldrh	r3, [r2, #0]
 8008c06:	f043 0304 	orr.w	r3, r3, #4
 8008c0a:	8013      	strh	r3, [r2, #0]
	control_start();
 8008c0c:	f7fc f8b2 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <v_R135D+0x230>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d115      	bne.n	8008c44 <v_R135D+0x1cc>
		while(dist_l < VVV_OFFSET+20 && dist_r < VVV_OFFSET+20);
 8008c18:	bf00      	nop
 8008c1a:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <v_R135D+0x22c>)
 8008c1c:	edd3 7a00 	vldr	s15, [r3]
 8008c20:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008ce0 <v_R135D+0x268>
 8008c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2c:	d51f      	bpl.n	8008c6e <v_R135D+0x1f6>
 8008c2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <v_R135D+0x228>)
 8008c30:	edd3 7a00 	vldr	s15, [r3]
 8008c34:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008ce0 <v_R135D+0x268>
 8008c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c40:	d4eb      	bmi.n	8008c1a <v_R135D+0x1a2>
 8008c42:	e014      	b.n	8008c6e <v_R135D+0x1f6>
	}else{
		while(dist_l < VVV_OFFSET-10 && dist_r < VVV_OFFSET-10);
 8008c44:	bf00      	nop
 8008c46:	4b17      	ldr	r3, [pc, #92]	; (8008ca4 <v_R135D+0x22c>)
 8008c48:	edd3 7a00 	vldr	s15, [r3]
 8008c4c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008ce4 <v_R135D+0x26c>
 8008c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c58:	d509      	bpl.n	8008c6e <v_R135D+0x1f6>
 8008c5a:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <v_R135D+0x228>)
 8008c5c:	edd3 7a00 	vldr	s15, [r3]
 8008c60:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008ce4 <v_R135D+0x26c>
 8008c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6c:	d4eb      	bmi.n	8008c46 <v_R135D+0x1ce>
	}

	control_start();
 8008c6e:	f7fc f881 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 8008c72:	230a      	movs	r3, #10
 8008c74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008c78:	2132      	movs	r1, #50	; 0x32
 8008c7a:	481b      	ldr	r0, [pc, #108]	; (8008ce8 <v_R135D+0x270>)
 8008c7c:	f7fc f9ac 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 35 && dist_r < 35);
*/}
 8008c80:	bf00      	nop
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20000fa8 	.word	0x20000fa8
 8008c88:	20000d9c 	.word	0x20000d9c
 8008c8c:	461c4000 	.word	0x461c4000
 8008c90:	20000b20 	.word	0x20000b20
 8008c94:	200007b4 	.word	0x200007b4
 8008c98:	43c80000 	.word	0x43c80000
 8008c9c:	200001dc 	.word	0x200001dc
 8008ca0:	20000b2c 	.word	0x20000b2c
 8008ca4:	200012e4 	.word	0x200012e4
 8008ca8:	20000b28 	.word	0x20000b28
 8008cac:	42a00000 	.word	0x42a00000
 8008cb0:	42480000 	.word	0x42480000
 8008cb4:	20000b98 	.word	0x20000b98
 8008cb8:	453b8000 	.word	0x453b8000
 8008cbc:	200001e0 	.word	0x200001e0
 8008cc0:	20000b24 	.word	0x20000b24
 8008cc4:	43b40000 	.word	0x43b40000
 8008cc8:	20000b34 	.word	0x20000b34
 8008ccc:	20000c3c 	.word	0x20000c3c
 8008cd0:	20000b9c 	.word	0x20000b9c
 8008cd4:	42f00000 	.word	0x42f00000
 8008cd8:	c53b8000 	.word	0xc53b8000
 8008cdc:	43070000 	.word	0x43070000
 8008ce0:	428c0000 	.word	0x428c0000
 8008ce4:	42200000 	.word	0x42200000
 8008ce8:	ffffd8f0 	.word	0xffffd8f0

08008cec <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0

	full_led_write(6);
 8008cf0:	2006      	movs	r0, #6
 8008cf2:	f007 fe05 	bl	8010900 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008cf6:	4a80      	ldr	r2, [pc, #512]	; (8008ef8 <v_L135D+0x20c>)
 8008cf8:	8813      	ldrh	r3, [r2, #0]
 8008cfa:	f36f 2308 	bfc	r3, #8, #1
 8008cfe:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008d00:	4b7e      	ldr	r3, [pc, #504]	; (8008efc <v_L135D+0x210>)
 8008d02:	4a7f      	ldr	r2, [pc, #508]	; (8008f00 <v_L135D+0x214>)
 8008d04:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008d06:	4b7f      	ldr	r3, [pc, #508]	; (8008f04 <v_L135D+0x218>)
 8008d08:	4a7d      	ldr	r2, [pc, #500]	; (8008f00 <v_L135D+0x214>)
 8008d0a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008d0c:	4b7e      	ldr	r3, [pc, #504]	; (8008f08 <v_L135D+0x21c>)
 8008d0e:	4a7f      	ldr	r2, [pc, #508]	; (8008f0c <v_L135D+0x220>)
 8008d10:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008d12:	4b7f      	ldr	r3, [pc, #508]	; (8008f10 <v_L135D+0x224>)
 8008d14:	4a7d      	ldr	r2, [pc, #500]	; (8008f0c <v_L135D+0x220>)
 8008d16:	601a      	str	r2, [r3, #0]

	control_start();
 8008d18:	f7fc f82c 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008d1c:	f04f 0300 	mov.w	r3, #0
 8008d20:	4a7c      	ldr	r2, [pc, #496]	; (8008f14 <v_L135D+0x228>)
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	4a7c      	ldr	r2, [pc, #496]	; (8008f18 <v_L135D+0x22c>)
 8008d26:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008d28:	4b7c      	ldr	r3, [pc, #496]	; (8008f1c <v_L135D+0x230>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d115      	bne.n	8008d5c <v_L135D+0x70>
		while(dist_l < VVV_OFFSET+25 && dist_r < VVV_OFFSET+25);
 8008d30:	bf00      	nop
 8008d32:	4b79      	ldr	r3, [pc, #484]	; (8008f18 <v_L135D+0x22c>)
 8008d34:	edd3 7a00 	vldr	s15, [r3]
 8008d38:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008f20 <v_L135D+0x234>
 8008d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d44:	d51f      	bpl.n	8008d86 <v_L135D+0x9a>
 8008d46:	4b73      	ldr	r3, [pc, #460]	; (8008f14 <v_L135D+0x228>)
 8008d48:	edd3 7a00 	vldr	s15, [r3]
 8008d4c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008f20 <v_L135D+0x234>
 8008d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d58:	d4eb      	bmi.n	8008d32 <v_L135D+0x46>
 8008d5a:	e014      	b.n	8008d86 <v_L135D+0x9a>
	}else{
		while(dist_l < VVV_OFFSET && dist_r < VVV_OFFSET);
 8008d5c:	bf00      	nop
 8008d5e:	4b6e      	ldr	r3, [pc, #440]	; (8008f18 <v_L135D+0x22c>)
 8008d60:	edd3 7a00 	vldr	s15, [r3]
 8008d64:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8008f24 <v_L135D+0x238>
 8008d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d70:	d509      	bpl.n	8008d86 <v_L135D+0x9a>
 8008d72:	4b68      	ldr	r3, [pc, #416]	; (8008f14 <v_L135D+0x228>)
 8008d74:	edd3 7a00 	vldr	s15, [r3]
 8008d78:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8008f24 <v_L135D+0x238>
 8008d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d84:	d4eb      	bmi.n	8008d5e <v_L135D+0x72>
	}
	drive_stop();
 8008d86:	f7fb ffcd 	bl	8004d24 <drive_stop>
	control_stop();
 8008d8a:	f7fc f807 	bl	8004d9c <control_stop>

	MF.FLAG.GYRO = 1;
 8008d8e:	4a5a      	ldr	r2, [pc, #360]	; (8008ef8 <v_L135D+0x20c>)
 8008d90:	8813      	ldrh	r3, [r2, #0]
 8008d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d96:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VVV_DEGACCEL;
 8008d98:	4b63      	ldr	r3, [pc, #396]	; (8008f28 <v_L135D+0x23c>)
 8008d9a:	4a64      	ldr	r2, [pc, #400]	; (8008f2c <v_L135D+0x240>)
 8008d9c:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008d9e:	4b64      	ldr	r3, [pc, #400]	; (8008f30 <v_L135D+0x244>)
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
	omega_min = -VVV_OMEGA;
 8008da6:	4b63      	ldr	r3, [pc, #396]	; (8008f34 <v_L135D+0x248>)
 8008da8:	4a63      	ldr	r2, [pc, #396]	; (8008f38 <v_L135D+0x24c>)
 8008daa:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8008dac:	4b63      	ldr	r3, [pc, #396]	; (8008f3c <v_L135D+0x250>)
 8008dae:	4a57      	ldr	r2, [pc, #348]	; (8008f0c <v_L135D+0x220>)
 8008db0:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008db2:	4a51      	ldr	r2, [pc, #324]	; (8008ef8 <v_L135D+0x20c>)
 8008db4:	8813      	ldrh	r3, [r2, #0]
 8008db6:	f043 0302 	orr.w	r3, r3, #2
 8008dba:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+25);
 8008dbc:	bf00      	nop
 8008dbe:	4b60      	ldr	r3, [pc, #384]	; (8008f40 <v_L135D+0x254>)
 8008dc0:	edd3 7a00 	vldr	s15, [r3]
 8008dc4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dcc:	4b5d      	ldr	r3, [pc, #372]	; (8008f44 <v_L135D+0x258>)
 8008dce:	edd3 7a00 	vldr	s15, [r3]
 8008dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dda:	dcf0      	bgt.n	8008dbe <v_L135D+0xd2>

	target_degaccel_z = 0;
 8008ddc:	4b52      	ldr	r3, [pc, #328]	; (8008f28 <v_L135D+0x23c>)
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+120);
 8008de4:	bf00      	nop
 8008de6:	4b56      	ldr	r3, [pc, #344]	; (8008f40 <v_L135D+0x254>)
 8008de8:	edd3 7a00 	vldr	s15, [r3]
 8008dec:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008f48 <v_L135D+0x25c>
 8008df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df4:	4b53      	ldr	r3, [pc, #332]	; (8008f44 <v_L135D+0x258>)
 8008df6:	edd3 7a00 	vldr	s15, [r3]
 8008dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e02:	dcf0      	bgt.n	8008de6 <v_L135D+0xfa>

	target_degaccel_z = VVV_DEGACCEL;
 8008e04:	4b48      	ldr	r3, [pc, #288]	; (8008f28 <v_L135D+0x23c>)
 8008e06:	4a51      	ldr	r2, [pc, #324]	; (8008f4c <v_L135D+0x260>)
 8008e08:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+135);
 8008e0a:	bf00      	nop
 8008e0c:	4b4c      	ldr	r3, [pc, #304]	; (8008f40 <v_L135D+0x254>)
 8008e0e:	edd3 7a00 	vldr	s15, [r3]
 8008e12:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8008f50 <v_L135D+0x264>
 8008e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e1a:	4b4a      	ldr	r3, [pc, #296]	; (8008f44 <v_L135D+0x258>)
 8008e1c:	edd3 7a00 	vldr	s15, [r3]
 8008e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e28:	dcf0      	bgt.n	8008e0c <v_L135D+0x120>
	turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e2a:	2103      	movs	r1, #3
 8008e2c:	20fd      	movs	r0, #253	; 0xfd
 8008e2e:	f005 ff97 	bl	800ed60 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8008e32:	4b3a      	ldr	r3, [pc, #232]	; (8008f1c <v_L135D+0x230>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	bfb8      	it	lt
 8008e40:	425b      	neglt	r3, r3
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	4b35      	ldr	r3, [pc, #212]	; (8008f1c <v_L135D+0x230>)
 8008e46:	701a      	strb	r2, [r3, #0]
	MF.FLAG.GYRO = 0;
 8008e48:	4a2b      	ldr	r2, [pc, #172]	; (8008ef8 <v_L135D+0x20c>)
 8008e4a:	8813      	ldrh	r3, [r2, #0]
 8008e4c:	f36f 2308 	bfc	r3, #8, #1
 8008e50:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008e52:	4b2a      	ldr	r3, [pc, #168]	; (8008efc <v_L135D+0x210>)
 8008e54:	4a2a      	ldr	r2, [pc, #168]	; (8008f00 <v_L135D+0x214>)
 8008e56:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008e58:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <v_L135D+0x218>)
 8008e5a:	4a29      	ldr	r2, [pc, #164]	; (8008f00 <v_L135D+0x214>)
 8008e5c:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008e5e:	4b2a      	ldr	r3, [pc, #168]	; (8008f08 <v_L135D+0x21c>)
 8008e60:	4a2a      	ldr	r2, [pc, #168]	; (8008f0c <v_L135D+0x220>)
 8008e62:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008e64:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <v_L135D+0x224>)
 8008e66:	4a29      	ldr	r2, [pc, #164]	; (8008f0c <v_L135D+0x220>)
 8008e68:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	4a29      	ldr	r2, [pc, #164]	; (8008f14 <v_L135D+0x228>)
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	4a29      	ldr	r2, [pc, #164]	; (8008f18 <v_L135D+0x22c>)
 8008e74:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8008e76:	4a20      	ldr	r2, [pc, #128]	; (8008ef8 <v_L135D+0x20c>)
 8008e78:	8813      	ldrh	r3, [r2, #0]
 8008e7a:	f043 0304 	orr.w	r3, r3, #4
 8008e7e:	8013      	strh	r3, [r2, #0]
	control_start();
 8008e80:	f7fb ff78 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8008e84:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <v_L135D+0x230>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d115      	bne.n	8008eb8 <v_L135D+0x1cc>
		while(dist_l < VVV_OFFSET+15 && dist_r < VVV_OFFSET+15);
 8008e8c:	bf00      	nop
 8008e8e:	4b22      	ldr	r3, [pc, #136]	; (8008f18 <v_L135D+0x22c>)
 8008e90:	edd3 7a00 	vldr	s15, [r3]
 8008e94:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008f54 <v_L135D+0x268>
 8008e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea0:	d51f      	bpl.n	8008ee2 <v_L135D+0x1f6>
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <v_L135D+0x228>)
 8008ea4:	edd3 7a00 	vldr	s15, [r3]
 8008ea8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008f54 <v_L135D+0x268>
 8008eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb4:	d4eb      	bmi.n	8008e8e <v_L135D+0x1a2>
 8008eb6:	e014      	b.n	8008ee2 <v_L135D+0x1f6>
	}else{
		while(dist_l < VVV_OFFSET-10 && dist_r < VVV_OFFSET-10);
 8008eb8:	bf00      	nop
 8008eba:	4b17      	ldr	r3, [pc, #92]	; (8008f18 <v_L135D+0x22c>)
 8008ebc:	edd3 7a00 	vldr	s15, [r3]
 8008ec0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008f58 <v_L135D+0x26c>
 8008ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ecc:	d509      	bpl.n	8008ee2 <v_L135D+0x1f6>
 8008ece:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <v_L135D+0x228>)
 8008ed0:	edd3 7a00 	vldr	s15, [r3]
 8008ed4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008f58 <v_L135D+0x26c>
 8008ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee0:	d4eb      	bmi.n	8008eba <v_L135D+0x1ce>
	}

	control_start();
 8008ee2:	f7fb ff47 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008eec:	2132      	movs	r1, #50	; 0x32
 8008eee:	481b      	ldr	r0, [pc, #108]	; (8008f5c <v_L135D+0x270>)
 8008ef0:	f7fc f872 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 35 && dist_r < 35);
*/}
 8008ef4:	bf00      	nop
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000fa8 	.word	0x20000fa8
 8008efc:	20000d9c 	.word	0x20000d9c
 8008f00:	461c4000 	.word	0x461c4000
 8008f04:	20000b20 	.word	0x20000b20
 8008f08:	200007b4 	.word	0x200007b4
 8008f0c:	43c80000 	.word	0x43c80000
 8008f10:	200001dc 	.word	0x200001dc
 8008f14:	20000b2c 	.word	0x20000b2c
 8008f18:	200012e4 	.word	0x200012e4
 8008f1c:	20000b28 	.word	0x20000b28
 8008f20:	42960000 	.word	0x42960000
 8008f24:	42480000 	.word	0x42480000
 8008f28:	20000b98 	.word	0x20000b98
 8008f2c:	c53b8000 	.word	0xc53b8000
 8008f30:	200001e0 	.word	0x200001e0
 8008f34:	200002f0 	.word	0x200002f0
 8008f38:	c3b40000 	.word	0xc3b40000
 8008f3c:	20000b34 	.word	0x20000b34
 8008f40:	20000c3c 	.word	0x20000c3c
 8008f44:	20000b9c 	.word	0x20000b9c
 8008f48:	42f00000 	.word	0x42f00000
 8008f4c:	453b8000 	.word	0x453b8000
 8008f50:	43070000 	.word	0x43070000
 8008f54:	42820000 	.word	0x42820000
 8008f58:	42200000 	.word	0x42200000
 8008f5c:	ffffd8f0 	.word	0xffffd8f0

08008f60 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
	int mode = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	483b      	ldr	r0, [pc, #236]	; (800905c <test_select+0xfc>)
 8008f6e:	f008 fa5b 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	b2d8      	uxtb	r0, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	b2d9      	uxtb	r1, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	f007 fc7b 	bl	801088c <led_write>
		  if(dist_r >= 20){
 8008f96:	4b32      	ldr	r3, [pc, #200]	; (8009060 <test_select+0x100>)
 8008f98:	edd3 7a00 	vldr	s15, [r3]
 8008f9c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	db0f      	blt.n	8008fca <test_select+0x6a>
			  mode++;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3301      	adds	r3, #1
 8008fae:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008fb0:	4b2b      	ldr	r3, [pc, #172]	; (8009060 <test_select+0x100>)
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b07      	cmp	r3, #7
 8008fbc:	dd01      	ble.n	8008fc2 <test_select+0x62>
				  mode = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	4827      	ldr	r0, [pc, #156]	; (8009064 <test_select+0x104>)
 8008fc6:	f008 fa2f 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8008fca:	4b25      	ldr	r3, [pc, #148]	; (8009060 <test_select+0x100>)
 8008fcc:	edd3 7a00 	vldr	s15, [r3]
 8008fd0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	d80f      	bhi.n	8008ffe <test_select+0x9e>
			  mode--;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008fe4:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <test_select+0x100>)
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	da01      	bge.n	8008ff6 <test_select+0x96>
				  mode = 7;
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	481a      	ldr	r0, [pc, #104]	; (8009064 <test_select+0x104>)
 8008ffa:	f008 fa15 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009002:	4819      	ldr	r0, [pc, #100]	; (8009068 <test_select+0x108>)
 8009004:	f7f9 f966 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1b1      	bne.n	8008f72 <test_select+0x12>
			  HAL_Delay(50);
 800900e:	2032      	movs	r0, #50	; 0x32
 8009010:	f7f8 f804 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009014:	bf00      	nop
 8009016:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800901a:	4813      	ldr	r0, [pc, #76]	; (8009068 <test_select+0x108>)
 800901c:	f7f9 f95a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f7      	beq.n	8009016 <test_select+0xb6>
			  switch(mode){
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3b01      	subs	r3, #1
 800902a:	2b03      	cmp	r3, #3
 800902c:	d8a1      	bhi.n	8008f72 <test_select+0x12>
 800902e:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <test_select+0xd4>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	08009045 	.word	0x08009045
 8009038:	0800904b 	.word	0x0800904b
 800903c:	08009051 	.word	0x08009051
 8009040:	08009057 	.word	0x08009057
				case 1:
					init_test();
 8009044:	f000 f812 	bl	800906c <init_test>
					break;
 8009048:	e007      	b.n	800905a <test_select+0xfa>

				case 2:
					slalom_test();
 800904a:	f000 f90f 	bl	800926c <slalom_test>
					break;
 800904e:	e004      	b.n	800905a <test_select+0xfa>

				case 3:
					sample_course_run();
 8009050:	f001 fa80 	bl	800a554 <sample_course_run>
					break;
 8009054:	e001      	b.n	800905a <test_select+0xfa>
				case 4:
					v_test();
 8009056:	f000 fbe5 	bl	8009824 <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800905a:	e78a      	b.n	8008f72 <test_select+0x12>
 800905c:	08012664 	.word	0x08012664
 8009060:	20000b2c 	.word	0x20000b2c
 8009064:	0801267c 	.word	0x0801267c
 8009068:	40020000 	.word	0x40020000

0800906c <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0

	int mode = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 8009076:	6979      	ldr	r1, [r7, #20]
 8009078:	486e      	ldr	r0, [pc, #440]	; (8009234 <init_test+0x1c8>)
 800907a:	f008 f9d5 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	b2d8      	uxtb	r0, r3
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	b2d9      	uxtb	r1, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 0304 	and.w	r3, r3, #4
 800909a:	b2db      	uxtb	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	f007 fbf5 	bl	801088c <led_write>
		  if(dist_r >= 20){
 80090a2:	4b65      	ldr	r3, [pc, #404]	; (8009238 <init_test+0x1cc>)
 80090a4:	edd3 7a00 	vldr	s15, [r3]
 80090a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80090ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	db0f      	blt.n	80090d6 <init_test+0x6a>
			  mode++;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	3301      	adds	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80090bc:	4b5e      	ldr	r3, [pc, #376]	; (8009238 <init_test+0x1cc>)
 80090be:	f04f 0200 	mov.w	r2, #0
 80090c2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b07      	cmp	r3, #7
 80090c8:	dd01      	ble.n	80090ce <init_test+0x62>
				  mode = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80090ce:	6979      	ldr	r1, [r7, #20]
 80090d0:	485a      	ldr	r0, [pc, #360]	; (800923c <init_test+0x1d0>)
 80090d2:	f008 f9a9 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80090d6:	4b58      	ldr	r3, [pc, #352]	; (8009238 <init_test+0x1cc>)
 80090d8:	edd3 7a00 	vldr	s15, [r3]
 80090dc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80090e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e8:	d80f      	bhi.n	800910a <init_test+0x9e>
			  mode--;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80090f0:	4b51      	ldr	r3, [pc, #324]	; (8009238 <init_test+0x1cc>)
 80090f2:	f04f 0200 	mov.w	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	da01      	bge.n	8009102 <init_test+0x96>
				  mode = 7;
 80090fe:	2307      	movs	r3, #7
 8009100:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009102:	6979      	ldr	r1, [r7, #20]
 8009104:	484d      	ldr	r0, [pc, #308]	; (800923c <init_test+0x1d0>)
 8009106:	f008 f98f 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800910a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800910e:	484c      	ldr	r0, [pc, #304]	; (8009240 <init_test+0x1d4>)
 8009110:	f7f9 f8e0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1b1      	bne.n	800907e <init_test+0x12>
			  HAL_Delay(50);
 800911a:	2032      	movs	r0, #50	; 0x32
 800911c:	f7f7 ff7e 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009120:	bf00      	nop
 8009122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009126:	4846      	ldr	r0, [pc, #280]	; (8009240 <init_test+0x1d4>)
 8009128:	f7f9 f8d4 	bl	80022d4 <HAL_GPIO_ReadPin>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f7      	beq.n	8009122 <init_test+0xb6>
			  drive_ready();
 8009132:	f7fb fd9f 	bl	8004c74 <drive_ready>
			  get_base();
 8009136:	f007 fb51 	bl	80107dc <get_base>

			  switch(mode){
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b07      	cmp	r3, #7
 800913e:	d89e      	bhi.n	800907e <init_test+0x12>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <init_test+0xdc>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009169 	.word	0x08009169
 800914c:	0800916f 	.word	0x0800916f
 8009150:	0800918f 	.word	0x0800918f
 8009154:	080091ad 	.word	0x080091ad
 8009158:	080091cb 	.word	0x080091cb
 800915c:	080091e9 	.word	0x080091e9
 8009160:	08009213 	.word	0x08009213
 8009164:	08009219 	.word	0x08009219
				case 0:
					get_base();
 8009168:	f007 fb38 	bl	80107dc <get_base>
					break;
 800916c:	e061      	b.n	8009232 <init_test+0x1c6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800916e:	4835      	ldr	r0, [pc, #212]	; (8009244 <init_test+0x1d8>)
 8009170:	f008 f9ce 	bl	8011510 <puts>
					for(int i = 0; i < 1; i++){
 8009174:	2300      	movs	r3, #0
 8009176:	613b      	str	r3, [r7, #16]
 8009178:	e005      	b.n	8009186 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 800917a:	20b5      	movs	r0, #181	; 0xb5
 800917c:	f7fc f86a 	bl	8005254 <driveC>
					for(int i = 0; i < 1; i++){
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	3301      	adds	r3, #1
 8009184:	613b      	str	r3, [r7, #16]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	ddf6      	ble.n	800917a <init_test+0x10e>
					}
					break;
 800918c:	e051      	b.n	8009232 <init_test+0x1c6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 800918e:	482e      	ldr	r0, [pc, #184]	; (8009248 <init_test+0x1dc>)
 8009190:	f008 f9be 	bl	8011510 <puts>
					for(int i = 0; i < 32; i++){
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	e004      	b.n	80091a4 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 800919a:	f7fc fad9 	bl	8005750 <rotate_R90>
					for(int i = 0; i < 32; i++){
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b1f      	cmp	r3, #31
 80091a8:	ddf7      	ble.n	800919a <init_test+0x12e>
					}
					break;
 80091aa:	e042      	b.n	8009232 <init_test+0x1c6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 80091ac:	4827      	ldr	r0, [pc, #156]	; (800924c <init_test+0x1e0>)
 80091ae:	f008 f9af 	bl	8011510 <puts>
					for(int i = 0; i < 32; i++){
 80091b2:	2300      	movs	r3, #0
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	e004      	b.n	80091c2 <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 80091b8:	f7fc fba6 	bl	8005908 <rotate_L90>
					for(int i = 0; i < 32; i++){
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3301      	adds	r3, #1
 80091c0:	60bb      	str	r3, [r7, #8]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b1f      	cmp	r3, #31
 80091c6:	ddf7      	ble.n	80091b8 <init_test+0x14c>
					}
					break;
 80091c8:	e033      	b.n	8009232 <init_test+0x1c6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 80091ca:	4821      	ldr	r0, [pc, #132]	; (8009250 <init_test+0x1e4>)
 80091cc:	f008 f9a0 	bl	8011510 <puts>
					for(int i = 0; i < 16; i++){
 80091d0:	2300      	movs	r3, #0
 80091d2:	607b      	str	r3, [r7, #4]
 80091d4:	e004      	b.n	80091e0 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 80091d6:	f7fc fc73 	bl	8005ac0 <rotate_180>
					for(int i = 0; i < 16; i++){
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3301      	adds	r3, #1
 80091de:	607b      	str	r3, [r7, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b0f      	cmp	r3, #15
 80091e4:	ddf7      	ble.n	80091d6 <init_test+0x16a>
					}
					break;
 80091e6:	e024      	b.n	8009232 <init_test+0x1c6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 80091e8:	481a      	ldr	r0, [pc, #104]	; (8009254 <init_test+0x1e8>)
 80091ea:	f008 f991 	bl	8011510 <puts>
					get_base();
 80091ee:	f007 faf5 	bl	80107dc <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 80091f2:	f7fc f95b 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80091f6:	2300      	movs	r3, #0
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	e004      	b.n	8009206 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 80091fc:	f7fc fa90 	bl	8005720 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b04      	cmp	r3, #4
 800920a:	ddf7      	ble.n	80091fc <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 800920c:	f7fc f968 	bl	80054e0 <half_sectionD>
					break;
 8009210:	e00f      	b.n	8009232 <init_test+0x1c6>
				case 6:
					set_position();
 8009212:	f7fc f8b5 	bl	8005380 <set_position>
					break;
 8009216:	e00c      	b.n	8009232 <init_test+0x1c6>
				case 7:
					target_degree_z = degree_z;
 8009218:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <init_test+0x1ec>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a0f      	ldr	r2, [pc, #60]	; (800925c <init_test+0x1f0>)
 800921e:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <init_test+0x1f4>)
 8009222:	4a10      	ldr	r2, [pc, #64]	; (8009264 <init_test+0x1f8>)
 8009224:	601a      	str	r2, [r3, #0]

					MF.FLAG.ENKAI = 1;
 8009226:	4a10      	ldr	r2, [pc, #64]	; (8009268 <init_test+0x1fc>)
 8009228:	8813      	ldrh	r3, [r2, #0]
 800922a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922e:	8013      	strh	r3, [r2, #0]

					while(1);
 8009230:	e7fe      	b.n	8009230 <init_test+0x1c4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009232:	e724      	b.n	800907e <init_test+0x12>
 8009234:	08012688 	.word	0x08012688
 8009238:	20000b2c 	.word	0x20000b2c
 800923c:	0801267c 	.word	0x0801267c
 8009240:	40020000 	.word	0x40020000
 8009244:	080126a4 	.word	0x080126a4
 8009248:	080126c8 	.word	0x080126c8
 800924c:	080126d4 	.word	0x080126d4
 8009250:	080126e0 	.word	0x080126e0
 8009254:	080126ec 	.word	0x080126ec
 8009258:	20000b9c 	.word	0x20000b9c
 800925c:	20000c3c 	.word	0x20000c3c
 8009260:	20000d9c 	.word	0x20000d9c
 8009264:	459c4000 	.word	0x459c4000
 8009268:	20000fa8 	.word	0x20000fa8

0800926c <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 800926c:	b580      	push	{r7, lr}
 800926e:	b094      	sub	sp, #80	; 0x50
 8009270:	af00      	add	r7, sp, #0

	int mode = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	64fb      	str	r3, [r7, #76]	; 0x4c
	printf("Test Slalom Run, Mode : %d\n", mode);
 8009276:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009278:	48b6      	ldr	r0, [pc, #728]	; (8009554 <slalom_test+0x2e8>)
 800927a:	f008 f8d5 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800927e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	b2d8      	uxtb	r0, r3
 8009288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	b2d9      	uxtb	r1, r3
 8009292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	b2db      	uxtb	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	f007 faf5 	bl	801088c <led_write>
		  if(dist_r >= 20){
 80092a2:	4bad      	ldr	r3, [pc, #692]	; (8009558 <slalom_test+0x2ec>)
 80092a4:	edd3 7a00 	vldr	s15, [r3]
 80092a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80092ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	db20      	blt.n	80092f8 <slalom_test+0x8c>
			  mode++;
 80092b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b8:	3301      	adds	r3, #1
 80092ba:	64fb      	str	r3, [r7, #76]	; 0x4c
			  dist_r = 0;
 80092bc:	4ba6      	ldr	r3, [pc, #664]	; (8009558 <slalom_test+0x2ec>)
 80092be:	f04f 0200 	mov.w	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80092c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c6:	2b07      	cmp	r3, #7
 80092c8:	dc03      	bgt.n	80092d2 <slalom_test+0x66>
				  full_led_write(7);
 80092ca:	2007      	movs	r0, #7
 80092cc:	f007 fb18 	bl	8010900 <full_led_write>
 80092d0:	e009      	b.n	80092e6 <slalom_test+0x7a>
			  }else if(mode < 16){
 80092d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d4:	2b0f      	cmp	r3, #15
 80092d6:	dc03      	bgt.n	80092e0 <slalom_test+0x74>
				  full_led_write(4);
 80092d8:	2004      	movs	r0, #4
 80092da:	f007 fb11 	bl	8010900 <full_led_write>
 80092de:	e002      	b.n	80092e6 <slalom_test+0x7a>
			  }else{
				  full_led_write(5);
 80092e0:	2005      	movs	r0, #5
 80092e2:	f007 fb0d 	bl	8010900 <full_led_write>
			  }
			  if(mode > 23){
 80092e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e8:	2b17      	cmp	r3, #23
 80092ea:	dd01      	ble.n	80092f0 <slalom_test+0x84>
				  mode = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  printf("Mode : %d\n", mode);
 80092f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80092f2:	489a      	ldr	r0, [pc, #616]	; (800955c <slalom_test+0x2f0>)
 80092f4:	f008 f898 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80092f8:	4b97      	ldr	r3, [pc, #604]	; (8009558 <slalom_test+0x2ec>)
 80092fa:	edd3 7a00 	vldr	s15, [r3]
 80092fe:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930a:	d820      	bhi.n	800934e <slalom_test+0xe2>
			  mode--;
 800930c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930e:	3b01      	subs	r3, #1
 8009310:	64fb      	str	r3, [r7, #76]	; 0x4c
			  dist_r = 0;
 8009312:	4b91      	ldr	r3, [pc, #580]	; (8009558 <slalom_test+0x2ec>)
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 800931a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931c:	2b07      	cmp	r3, #7
 800931e:	dc03      	bgt.n	8009328 <slalom_test+0xbc>
				  full_led_write(7);
 8009320:	2007      	movs	r0, #7
 8009322:	f007 faed 	bl	8010900 <full_led_write>
 8009326:	e009      	b.n	800933c <slalom_test+0xd0>
			  }else if(mode < 16){
 8009328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932a:	2b0f      	cmp	r3, #15
 800932c:	dc03      	bgt.n	8009336 <slalom_test+0xca>
				  full_led_write(4);
 800932e:	2004      	movs	r0, #4
 8009330:	f007 fae6 	bl	8010900 <full_led_write>
 8009334:	e002      	b.n	800933c <slalom_test+0xd0>
			  }else{
				  full_led_write(5);
 8009336:	2005      	movs	r0, #5
 8009338:	f007 fae2 	bl	8010900 <full_led_write>
			  }
			  if(mode < 0){
 800933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933e:	2b00      	cmp	r3, #0
 8009340:	da01      	bge.n	8009346 <slalom_test+0xda>
				  mode = 23;
 8009342:	2317      	movs	r3, #23
 8009344:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  printf("Mode : %d\n", mode);
 8009346:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009348:	4884      	ldr	r0, [pc, #528]	; (800955c <slalom_test+0x2f0>)
 800934a:	f008 f86d 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800934e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009352:	4883      	ldr	r0, [pc, #524]	; (8009560 <slalom_test+0x2f4>)
 8009354:	f7f8 ffbe 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d18f      	bne.n	800927e <slalom_test+0x12>
			  HAL_Delay(50);
 800935e:	2032      	movs	r0, #50	; 0x32
 8009360:	f7f7 fe5c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009364:	bf00      	nop
 8009366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800936a:	487d      	ldr	r0, [pc, #500]	; (8009560 <slalom_test+0x2f4>)
 800936c:	f7f8 ffb2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0f7      	beq.n	8009366 <slalom_test+0xfa>
			  drive_ready();
 8009376:	f7fb fc7d 	bl	8004c74 <drive_ready>
			  get_base();
 800937a:	f007 fa2f 	bl	80107dc <get_base>

			  switch(mode){
 800937e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009380:	2b10      	cmp	r3, #16
 8009382:	f63f af7c 	bhi.w	800927e <slalom_test+0x12>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <slalom_test+0x120>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093d1 	.word	0x080093d1
 8009390:	080093d7 	.word	0x080093d7
 8009394:	08009401 	.word	0x08009401
 8009398:	0800942b 	.word	0x0800942b
 800939c:	08009451 	.word	0x08009451
 80093a0:	08009545 	.word	0x08009545
 80093a4:	080095c5 	.word	0x080095c5
 80093a8:	08009601 	.word	0x08009601
 80093ac:	08009633 	.word	0x08009633
 80093b0:	08009665 	.word	0x08009665
 80093b4:	08009697 	.word	0x08009697
 80093b8:	080096c9 	.word	0x080096c9
 80093bc:	080096fb 	.word	0x080096fb
 80093c0:	0800972d 	.word	0x0800972d
 80093c4:	0800975f 	.word	0x0800975f
 80093c8:	08009791 	.word	0x08009791
 80093cc:	080097c3 	.word	0x080097c3
				case 0:
					get_base();
 80093d0:	f007 fa04 	bl	80107dc <get_base>
					break;
 80093d4:	e20e      	b.n	80097f4 <slalom_test+0x588>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80093d6:	4863      	ldr	r0, [pc, #396]	; (8009564 <slalom_test+0x2f8>)
 80093d8:	f008 f89a 	bl	8011510 <puts>
					half_sectionA();
 80093dc:	f7fc f866 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 32; i++){
 80093e0:	2300      	movs	r3, #0
 80093e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80093e4:	e006      	b.n	80093f4 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80093e6:	f7fc fc43 	bl	8005c70 <slalom_R90>
						one_sectionU();
 80093ea:	f7fc f999 	bl	8005720 <one_sectionU>
					for(int i = 0; i < 32; i++){
 80093ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f0:	3301      	adds	r3, #1
 80093f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80093f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f6:	2b1f      	cmp	r3, #31
 80093f8:	ddf5      	ble.n	80093e6 <slalom_test+0x17a>
					}
					half_sectionD();
 80093fa:	f7fc f871 	bl	80054e0 <half_sectionD>
					break;
 80093fe:	e1f9      	b.n	80097f4 <slalom_test+0x588>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009400:	4859      	ldr	r0, [pc, #356]	; (8009568 <slalom_test+0x2fc>)
 8009402:	f008 f885 	bl	8011510 <puts>
					half_sectionA();
 8009406:	f7fc f851 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 32; i++){
 800940a:	2300      	movs	r3, #0
 800940c:	647b      	str	r3, [r7, #68]	; 0x44
 800940e:	e006      	b.n	800941e <slalom_test+0x1b2>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8009410:	f7fc fd32 	bl	8005e78 <slalom_L90>
						one_sectionU();
 8009414:	f7fc f984 	bl	8005720 <one_sectionU>
					for(int i = 0; i < 32; i++){
 8009418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941a:	3301      	adds	r3, #1
 800941c:	647b      	str	r3, [r7, #68]	; 0x44
 800941e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009420:	2b1f      	cmp	r3, #31
 8009422:	ddf5      	ble.n	8009410 <slalom_test+0x1a4>
					}
					half_sectionD();
 8009424:	f7fc f85c 	bl	80054e0 <half_sectionD>
					break;
 8009428:	e1e4      	b.n	80097f4 <slalom_test+0x588>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 800942a:	484e      	ldr	r0, [pc, #312]	; (8009564 <slalom_test+0x2f8>)
 800942c:	f008 f870 	bl	8011510 <puts>
					half_sectionA();
 8009430:	f7fc f83c 	bl	80054ac <half_sectionA>
//					MF.FLAG.LOG = 1;
					for(int i = 0; i < 1; i++){
 8009434:	2300      	movs	r3, #0
 8009436:	643b      	str	r3, [r7, #64]	; 0x40
 8009438:	e004      	b.n	8009444 <slalom_test+0x1d8>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800943a:	f7fc fc19 	bl	8005c70 <slalom_R90>
					for(int i = 0; i < 1; i++){
 800943e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009440:	3301      	adds	r3, #1
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
 8009444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	ddf7      	ble.n	800943a <slalom_test+0x1ce>
					}
//					MF.FLAG.LOG = 0;
					half_sectionD();
 800944a:	f7fc f849 	bl	80054e0 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 800944e:	e1d1      	b.n	80097f4 <slalom_test+0x588>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009450:	4845      	ldr	r0, [pc, #276]	; (8009568 <slalom_test+0x2fc>)
 8009452:	f008 f85d 	bl	8011510 <puts>
					half_sectionA();
 8009456:	f7fc f829 	bl	80054ac <half_sectionA>
					MF.FLAG.LOG = 1;
 800945a:	4a44      	ldr	r2, [pc, #272]	; (800956c <slalom_test+0x300>)
 800945c:	8813      	ldrh	r3, [r2, #0]
 800945e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009462:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 1; i++){
 8009464:	2300      	movs	r3, #0
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009468:	e004      	b.n	8009474 <slalom_test+0x208>
						slalom_L90();				//16回右90度回転、つまり4周回転
 800946a:	f7fc fd05 	bl	8005e78 <slalom_L90>
					for(int i = 0; i < 1; i++){
 800946e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009470:	3301      	adds	r3, #1
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	2b00      	cmp	r3, #0
 8009478:	ddf7      	ble.n	800946a <slalom_test+0x1fe>
					}
					MF.FLAG.LOG = 0;
 800947a:	4a3c      	ldr	r2, [pc, #240]	; (800956c <slalom_test+0x300>)
 800947c:	8813      	ldrh	r3, [r2, #0]
 800947e:	f36f 1386 	bfc	r3, #6, #1
 8009482:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8009484:	f7fc f82c 	bl	80054e0 <half_sectionD>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8009488:	bf00      	nop
 800948a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800948e:	4834      	ldr	r0, [pc, #208]	; (8009560 <slalom_test+0x2f4>)
 8009490:	f7f8 ff20 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d0f7      	beq.n	800948a <slalom_test+0x21e>
					printf("omega start\n");
 800949a:	4835      	ldr	r0, [pc, #212]	; (8009570 <slalom_test+0x304>)
 800949c:	f008 f838 	bl	8011510 <puts>
					for(int j = 0; j < log_allay; j++){
 80094a0:	2300      	movs	r3, #0
 80094a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80094a4:	e00a      	b.n	80094bc <slalom_test+0x250>
						printf("%d\n", get_omega[j]);
 80094a6:	4a33      	ldr	r2, [pc, #204]	; (8009574 <slalom_test+0x308>)
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ae:	4619      	mov	r1, r3
 80094b0:	4831      	ldr	r0, [pc, #196]	; (8009578 <slalom_test+0x30c>)
 80094b2:	f007 ffb9 	bl	8011428 <iprintf>
					for(int j = 0; j < log_allay; j++){
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	3301      	adds	r3, #1
 80094ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	2bc7      	cmp	r3, #199	; 0xc7
 80094c0:	ddf1      	ble.n	80094a6 <slalom_test+0x23a>
					}
					printf("omega end\n");
 80094c2:	482e      	ldr	r0, [pc, #184]	; (800957c <slalom_test+0x310>)
 80094c4:	f008 f824 	bl	8011510 <puts>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 80094c8:	bf00      	nop
 80094ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80094ce:	4824      	ldr	r0, [pc, #144]	; (8009560 <slalom_test+0x2f4>)
 80094d0:	f7f8 ff00 	bl	80022d4 <HAL_GPIO_ReadPin>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d0f7      	beq.n	80094ca <slalom_test+0x25e>
					for(int j = 0; j < log_allay; j++){
 80094da:	2300      	movs	r3, #0
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
 80094de:	e00a      	b.n	80094f6 <slalom_test+0x28a>
						printf("%d\n", get_speed_l[j]);
 80094e0:	4a27      	ldr	r2, [pc, #156]	; (8009580 <slalom_test+0x314>)
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094e8:	4619      	mov	r1, r3
 80094ea:	4823      	ldr	r0, [pc, #140]	; (8009578 <slalom_test+0x30c>)
 80094ec:	f007 ff9c 	bl	8011428 <iprintf>
					for(int j = 0; j < log_allay; j++){
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	3301      	adds	r3, #1
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
 80094f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f8:	2bc7      	cmp	r3, #199	; 0xc7
 80094fa:	ddf1      	ble.n	80094e0 <slalom_test+0x274>
					}
					printf("l end\n");
 80094fc:	4821      	ldr	r0, [pc, #132]	; (8009584 <slalom_test+0x318>)
 80094fe:	f008 f807 	bl	8011510 <puts>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8009502:	bf00      	nop
 8009504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009508:	4815      	ldr	r0, [pc, #84]	; (8009560 <slalom_test+0x2f4>)
 800950a:	f7f8 fee3 	bl	80022d4 <HAL_GPIO_ReadPin>
 800950e:	4603      	mov	r3, r0
 8009510:	2b01      	cmp	r3, #1
 8009512:	d0f7      	beq.n	8009504 <slalom_test+0x298>
					printf("r start\n");
 8009514:	481c      	ldr	r0, [pc, #112]	; (8009588 <slalom_test+0x31c>)
 8009516:	f007 fffb 	bl	8011510 <puts>
					for(int j = 0; j < log_allay; j++){
 800951a:	2300      	movs	r3, #0
 800951c:	633b      	str	r3, [r7, #48]	; 0x30
 800951e:	e00a      	b.n	8009536 <slalom_test+0x2ca>
						printf("%d\n", get_speed_r[j]);
 8009520:	4a1a      	ldr	r2, [pc, #104]	; (800958c <slalom_test+0x320>)
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009528:	4619      	mov	r1, r3
 800952a:	4813      	ldr	r0, [pc, #76]	; (8009578 <slalom_test+0x30c>)
 800952c:	f007 ff7c 	bl	8011428 <iprintf>
					for(int j = 0; j < log_allay; j++){
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	3301      	adds	r3, #1
 8009534:	633b      	str	r3, [r7, #48]	; 0x30
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	2bc7      	cmp	r3, #199	; 0xc7
 800953a:	ddf1      	ble.n	8009520 <slalom_test+0x2b4>
					}
					printf("r end\n");
 800953c:	4814      	ldr	r0, [pc, #80]	; (8009590 <slalom_test+0x324>)
 800953e:	f007 ffe7 	bl	8011510 <puts>
					break;
 8009542:	e157      	b.n	80097f4 <slalom_test+0x588>
				case 5:
					//----slalom2右折 High Speed----
					printf("slalom turn right High Speed .\n");
 8009544:	4813      	ldr	r0, [pc, #76]	; (8009594 <slalom_test+0x328>)
 8009546:	f007 ffe3 	bl	8011510 <puts>
					half_sectionA2();
 800954a:	f7fb ffd9 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 800954e:	2300      	movs	r3, #0
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009552:	e02e      	b.n	80095b2 <slalom_test+0x346>
 8009554:	0801270c 	.word	0x0801270c
 8009558:	20000b2c 	.word	0x20000b2c
 800955c:	0801267c 	.word	0x0801267c
 8009560:	40020000 	.word	0x40020000
 8009564:	08012728 	.word	0x08012728
 8009568:	0801273c 	.word	0x0801273c
 800956c:	20000fa8 	.word	0x20000fa8
 8009570:	08012750 	.word	0x08012750
 8009574:	20000fc4 	.word	0x20000fc4
 8009578:	0801275c 	.word	0x0801275c
 800957c:	08012760 	.word	0x08012760
 8009580:	200007bc 	.word	0x200007bc
 8009584:	0801276c 	.word	0x0801276c
 8009588:	08012774 	.word	0x08012774
 800958c:	20000494 	.word	0x20000494
 8009590:	0801277c 	.word	0x0801277c
 8009594:	08012784 	.word	0x08012784
						full_led_write(1);
 8009598:	2001      	movs	r0, #1
 800959a:	f007 f9b1 	bl	8010900 <full_led_write>
						slalom_R902();				//16回右90度回転、つまり4周回転
 800959e:	f7fc fd6f 	bl	8006080 <slalom_R902>
						full_led_write(2);
 80095a2:	2002      	movs	r0, #2
 80095a4:	f007 f9ac 	bl	8010900 <full_led_write>
						one_sectionU();
 80095a8:	f7fc f8ba 	bl	8005720 <one_sectionU>
					for(int i = 0; i < 16; i++){
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	3301      	adds	r3, #1
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	2b0f      	cmp	r3, #15
 80095b6:	ddef      	ble.n	8009598 <slalom_test+0x32c>
					}
					full_led_write(3);
 80095b8:	2003      	movs	r0, #3
 80095ba:	f007 f9a1 	bl	8010900 <full_led_write>
					half_sectionD2();
 80095be:	f7fb ffb9 	bl	8005534 <half_sectionD2>
					break;
 80095c2:	e117      	b.n	80097f4 <slalom_test+0x588>
				case 6:
					//----slalom2左折 High Speed----
					printf("slalom turn left High Speed .\n");
 80095c4:	488c      	ldr	r0, [pc, #560]	; (80097f8 <slalom_test+0x58c>)
 80095c6:	f007 ffa3 	bl	8011510 <puts>
					half_sectionA2();
 80095ca:	f7fb ff99 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 80095ce:	2300      	movs	r3, #0
 80095d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d2:	e00c      	b.n	80095ee <slalom_test+0x382>
						full_led_write(1);
 80095d4:	2001      	movs	r0, #1
 80095d6:	f007 f993 	bl	8010900 <full_led_write>
						slalom_L902();				//16回左90度回転、つまり4周回転
 80095da:	f7fc fe4d 	bl	8006278 <slalom_L902>
						full_led_write(2);
 80095de:	2002      	movs	r0, #2
 80095e0:	f007 f98e 	bl	8010900 <full_led_write>
						one_sectionU();
 80095e4:	f7fc f89c 	bl	8005720 <one_sectionU>
					for(int i = 0; i < 16; i++){
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	3301      	adds	r3, #1
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	2b0f      	cmp	r3, #15
 80095f2:	ddef      	ble.n	80095d4 <slalom_test+0x368>
					}
					full_led_write(3);
 80095f4:	2003      	movs	r0, #3
 80095f6:	f007 f983 	bl	8010900 <full_led_write>
					half_sectionD2();
 80095fa:	f7fb ff9b 	bl	8005534 <half_sectionD2>
					break;
 80095fe:	e0f9      	b.n	80097f4 <slalom_test+0x588>
				case 7:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8009600:	487e      	ldr	r0, [pc, #504]	; (80097fc <slalom_test+0x590>)
 8009602:	f007 ff85 	bl	8011510 <puts>
					half_sectionA();
 8009606:	f7fb ff51 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800960a:	2300      	movs	r3, #0
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
 800960e:	e007      	b.n	8009620 <slalom_test+0x3b4>
						full_led_write(2);
 8009610:	2002      	movs	r0, #2
 8009612:	f007 f975 	bl	8010900 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8009616:	f7fc ff39 	bl	800648c <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	3301      	adds	r3, #1
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	ddf4      	ble.n	8009610 <slalom_test+0x3a4>
					}
					full_led_write(3);
 8009626:	2003      	movs	r0, #3
 8009628:	f007 f96a 	bl	8010900 <full_led_write>
					half_sectionD();
 800962c:	f7fb ff58 	bl	80054e0 <half_sectionD>
					break;
 8009630:	e0e0      	b.n	80097f4 <slalom_test+0x588>
				case 8:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009632:	4873      	ldr	r0, [pc, #460]	; (8009800 <slalom_test+0x594>)
 8009634:	f007 ff6c 	bl	8011510 <puts>
					half_sectionA();
 8009638:	f7fb ff38 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800963c:	2300      	movs	r3, #0
 800963e:	623b      	str	r3, [r7, #32]
 8009640:	e007      	b.n	8009652 <slalom_test+0x3e6>
						full_led_write(2);
 8009642:	2002      	movs	r0, #2
 8009644:	f007 f95c 	bl	8010900 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009648:	f7fd f81e 	bl	8006688 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	3301      	adds	r3, #1
 8009650:	623b      	str	r3, [r7, #32]
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	2b00      	cmp	r3, #0
 8009656:	ddf4      	ble.n	8009642 <slalom_test+0x3d6>
					}
					full_led_write(3);
 8009658:	2003      	movs	r0, #3
 800965a:	f007 f951 	bl	8010900 <full_led_write>
					half_sectionD();
 800965e:	f7fb ff3f 	bl	80054e0 <half_sectionD>
					break;
 8009662:	e0c7      	b.n	80097f4 <slalom_test+0x588>
				case 9:
					//----Lslalom2右折 High Speed----
					printf("Lslalom turn right High Speed .\n");
 8009664:	4867      	ldr	r0, [pc, #412]	; (8009804 <slalom_test+0x598>)
 8009666:	f007 ff53 	bl	8011510 <puts>
					half_sectionA2();
 800966a:	f7fb ff49 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800966e:	2300      	movs	r3, #0
 8009670:	61fb      	str	r3, [r7, #28]
 8009672:	e007      	b.n	8009684 <slalom_test+0x418>
						full_led_write(2);
 8009674:	2002      	movs	r0, #2
 8009676:	f007 f943 	bl	8010900 <full_led_write>
						Lslalom_R902();				//16回右90度回転、つまり4周回転
 800967a:	f7fd f903 	bl	8006884 <Lslalom_R902>
					for(int i = 0; i < 1; i++){
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	3301      	adds	r3, #1
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	ddf4      	ble.n	8009674 <slalom_test+0x408>
					}
					full_led_write(3);
 800968a:	2003      	movs	r0, #3
 800968c:	f007 f938 	bl	8010900 <full_led_write>
					half_sectionD2();
 8009690:	f7fb ff50 	bl	8005534 <half_sectionD2>
					break;
 8009694:	e0ae      	b.n	80097f4 <slalom_test+0x588>
				case 10:
					//----Lslalom2左折 High Speed----
					printf("Lslalom turn left High Speed .\n");
 8009696:	485c      	ldr	r0, [pc, #368]	; (8009808 <slalom_test+0x59c>)
 8009698:	f007 ff3a 	bl	8011510 <puts>
					half_sectionA2();
 800969c:	f7fb ff30 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 80096a0:	2300      	movs	r3, #0
 80096a2:	61bb      	str	r3, [r7, #24]
 80096a4:	e007      	b.n	80096b6 <slalom_test+0x44a>
						full_led_write(2);
 80096a6:	2002      	movs	r0, #2
 80096a8:	f007 f92a 	bl	8010900 <full_led_write>
						Lslalom_L902();				//16回左90度回転、つまり4周回転
 80096ac:	f7fd f9e8 	bl	8006a80 <Lslalom_L902>
					for(int i = 0; i < 1; i++){
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	3301      	adds	r3, #1
 80096b4:	61bb      	str	r3, [r7, #24]
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	ddf4      	ble.n	80096a6 <slalom_test+0x43a>
					}
					full_led_write(3);
 80096bc:	2003      	movs	r0, #3
 80096be:	f007 f91f 	bl	8010900 <full_led_write>
					half_sectionD2();
 80096c2:	f7fb ff37 	bl	8005534 <half_sectionD2>
					break;
 80096c6:	e095      	b.n	80097f4 <slalom_test+0x588>
				case 11:
					//----Lslalom3右折 High High Speed----
					printf("Lslalom turn right High High Speed .\n");
 80096c8:	4850      	ldr	r0, [pc, #320]	; (800980c <slalom_test+0x5a0>)
 80096ca:	f007 ff21 	bl	8011510 <puts>
					half_sectionA3();
 80096ce:	f7fb ff41 	bl	8005554 <half_sectionA3>
					for(int i = 0; i < 1; i++){
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
 80096d6:	e007      	b.n	80096e8 <slalom_test+0x47c>
						full_led_write(2);
 80096d8:	2002      	movs	r0, #2
 80096da:	f007 f911 	bl	8010900 <full_led_write>
						Lslalom_R903();				//16回右90度回転、つまり4周回転
 80096de:	f7fd facd 	bl	8006c7c <Lslalom_R903>
					for(int i = 0; i < 1; i++){
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	3301      	adds	r3, #1
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	ddf4      	ble.n	80096d8 <slalom_test+0x46c>
					}
					full_led_write(3);
 80096ee:	2003      	movs	r0, #3
 80096f0:	f007 f906 	bl	8010900 <full_led_write>
					half_sectionD3();
 80096f4:	f7fb ff48 	bl	8005588 <half_sectionD3>
					break;
 80096f8:	e07c      	b.n	80097f4 <slalom_test+0x588>
				case 12:
					//----Lslalom3左折 High High Speed----
					printf("Lslalom turn left High High Speed .\n");
 80096fa:	4845      	ldr	r0, [pc, #276]	; (8009810 <slalom_test+0x5a4>)
 80096fc:	f007 ff08 	bl	8011510 <puts>
					half_sectionA3();
 8009700:	f7fb ff28 	bl	8005554 <half_sectionA3>
					for(int i = 0; i < 1; i++){
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
 8009708:	e007      	b.n	800971a <slalom_test+0x4ae>
						full_led_write(2);
 800970a:	2002      	movs	r0, #2
 800970c:	f007 f8f8 	bl	8010900 <full_led_write>
						Lslalom_L903();				//16回左90度回転、つまり4周回転
 8009710:	f7fd fbb0 	bl	8006e74 <Lslalom_L903>
					for(int i = 0; i < 1; i++){
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	3301      	adds	r3, #1
 8009718:	613b      	str	r3, [r7, #16]
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	ddf4      	ble.n	800970a <slalom_test+0x49e>
					}
					full_led_write(3);
 8009720:	2003      	movs	r0, #3
 8009722:	f007 f8ed 	bl	8010900 <full_led_write>
					half_sectionD3();
 8009726:	f7fb ff2f 	bl	8005588 <half_sectionD3>
					break;
 800972a:	e063      	b.n	80097f4 <slalom_test+0x588>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 800972c:	4839      	ldr	r0, [pc, #228]	; (8009814 <slalom_test+0x5a8>)
 800972e:	f007 feef 	bl	8011510 <puts>
					half_sectionA();
 8009732:	f7fb febb 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e007      	b.n	800974c <slalom_test+0x4e0>
						full_led_write(2);
 800973c:	2002      	movs	r0, #2
 800973e:	f007 f8df 	bl	8010900 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8009742:	f7fd fc93 	bl	800706c <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3301      	adds	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	ddf4      	ble.n	800973c <slalom_test+0x4d0>
					}
					full_led_write(3);
 8009752:	2003      	movs	r0, #3
 8009754:	f007 f8d4 	bl	8010900 <full_led_write>
					half_sectionD();
 8009758:	f7fb fec2 	bl	80054e0 <half_sectionD>
					break;
 800975c:	e04a      	b.n	80097f4 <slalom_test+0x588>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 800975e:	482e      	ldr	r0, [pc, #184]	; (8009818 <slalom_test+0x5ac>)
 8009760:	f007 fed6 	bl	8011510 <puts>
					half_sectionA();
 8009764:	f7fb fea2 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009768:	2300      	movs	r3, #0
 800976a:	60bb      	str	r3, [r7, #8]
 800976c:	e007      	b.n	800977e <slalom_test+0x512>
						full_led_write(2);
 800976e:	2002      	movs	r0, #2
 8009770:	f007 f8c6 	bl	8010900 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009774:	f7fd fd7e 	bl	8007274 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	3301      	adds	r3, #1
 800977c:	60bb      	str	r3, [r7, #8]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	ddf4      	ble.n	800976e <slalom_test+0x502>
					}
					full_led_write(3);
 8009784:	2003      	movs	r0, #3
 8009786:	f007 f8bb 	bl	8010900 <full_led_write>
					half_sectionD();
 800978a:	f7fb fea9 	bl	80054e0 <half_sectionD>
					break;
 800978e:	e031      	b.n	80097f4 <slalom_test+0x588>
				case 15:
					//----Lslalom右180 High Speed----
					printf("Lslalom turn right & right High Speed .\n");
 8009790:	4822      	ldr	r0, [pc, #136]	; (800981c <slalom_test+0x5b0>)
 8009792:	f007 febd 	bl	8011510 <puts>
					half_sectionA2();
 8009796:	f7fb feb3 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800979a:	2300      	movs	r3, #0
 800979c:	607b      	str	r3, [r7, #4]
 800979e:	e007      	b.n	80097b0 <slalom_test+0x544>
						full_led_write(2);
 80097a0:	2002      	movs	r0, #2
 80097a2:	f007 f8ad 	bl	8010900 <full_led_write>
						Lslalom_R1802();				//16回右180度回転、つまり4周回転
 80097a6:	f7fd fe69 	bl	800747c <Lslalom_R1802>
					for(int i = 0; i < 1; i++){
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3301      	adds	r3, #1
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	ddf4      	ble.n	80097a0 <slalom_test+0x534>
					}
					full_led_write(3);
 80097b6:	2003      	movs	r0, #3
 80097b8:	f007 f8a2 	bl	8010900 <full_led_write>
					half_sectionD2();
 80097bc:	f7fb feba 	bl	8005534 <half_sectionD2>
					break;
 80097c0:	e018      	b.n	80097f4 <slalom_test+0x588>
				case 16:
					//----Lslalom左180 High Speed----
					printf("Lslalom turn left & left High Speed .\n");
 80097c2:	4817      	ldr	r0, [pc, #92]	; (8009820 <slalom_test+0x5b4>)
 80097c4:	f007 fea4 	bl	8011510 <puts>
					half_sectionA2();
 80097c8:	f7fb fe9a 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 80097cc:	2300      	movs	r3, #0
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	e007      	b.n	80097e2 <slalom_test+0x576>
						full_led_write(2);
 80097d2:	2002      	movs	r0, #2
 80097d4:	f007 f894 	bl	8010900 <full_led_write>
						Lslalom_L1802();				//16回左180度回転、つまり4周回転
 80097d8:	f7fd ff52 	bl	8007680 <Lslalom_L1802>
					for(int i = 0; i < 1; i++){
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	3301      	adds	r3, #1
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	ddf4      	ble.n	80097d2 <slalom_test+0x566>
					}
					full_led_write(3);
 80097e8:	2003      	movs	r0, #3
 80097ea:	f007 f889 	bl	8010900 <full_led_write>
					half_sectionD2();
 80097ee:	f7fb fea1 	bl	8005534 <half_sectionD2>
					break;
 80097f2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80097f4:	e543      	b.n	800927e <slalom_test+0x12>
 80097f6:	bf00      	nop
 80097f8:	080127a4 	.word	0x080127a4
 80097fc:	080127c4 	.word	0x080127c4
 8009800:	080127dc 	.word	0x080127dc
 8009804:	080127f0 	.word	0x080127f0
 8009808:	08012810 	.word	0x08012810
 800980c:	08012830 	.word	0x08012830
 8009810:	08012858 	.word	0x08012858
 8009814:	0801287c 	.word	0x0801287c
 8009818:	0801289c 	.word	0x0801289c
 800981c:	080128b8 	.word	0x080128b8
 8009820:	080128e0 	.word	0x080128e0

08009824 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8009824:	b580      	push	{r7, lr}
 8009826:	b08c      	sub	sp, #48	; 0x30
 8009828:	af00      	add	r7, sp, #0

	int mode = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
	printf("Test V Run, Mode : %d\n", mode);
 800982e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009830:	48bf      	ldr	r0, [pc, #764]	; (8009b30 <v_test+0x30c>)
 8009832:	f007 fdf9 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	b2db      	uxtb	r3, r3
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	b2d8      	uxtb	r0, r3
 8009840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0302 	and.w	r3, r3, #2
 8009848:	b2d9      	uxtb	r1, r3
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	b2db      	uxtb	r3, r3
 8009854:	461a      	mov	r2, r3
 8009856:	f007 f819 	bl	801088c <led_write>
		  if(dist_r >= 20){
 800985a:	4bb6      	ldr	r3, [pc, #728]	; (8009b34 <v_test+0x310>)
 800985c:	edd3 7a00 	vldr	s15, [r3]
 8009860:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	db20      	blt.n	80098b0 <v_test+0x8c>
			  mode++;
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	3301      	adds	r3, #1
 8009872:	62fb      	str	r3, [r7, #44]	; 0x2c
			  dist_r = 0;
 8009874:	4baf      	ldr	r3, [pc, #700]	; (8009b34 <v_test+0x310>)
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	601a      	str	r2, [r3, #0]
			  if(mode > 15){
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	2b0f      	cmp	r3, #15
 8009880:	dd01      	ble.n	8009886 <v_test+0x62>
				  mode = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
			  if(mode < 8){
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	2b07      	cmp	r3, #7
 800988a:	dc03      	bgt.n	8009894 <v_test+0x70>
				  full_led_write(7);
 800988c:	2007      	movs	r0, #7
 800988e:	f007 f837 	bl	8010900 <full_led_write>
 8009892:	e009      	b.n	80098a8 <v_test+0x84>
			  }else if(mode < 16){
 8009894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009896:	2b0f      	cmp	r3, #15
 8009898:	dc03      	bgt.n	80098a2 <v_test+0x7e>
				  full_led_write(4);
 800989a:	2004      	movs	r0, #4
 800989c:	f007 f830 	bl	8010900 <full_led_write>
 80098a0:	e002      	b.n	80098a8 <v_test+0x84>
			  }else{
				  full_led_write(5);
 80098a2:	2005      	movs	r0, #5
 80098a4:	f007 f82c 	bl	8010900 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 80098a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098aa:	48a3      	ldr	r0, [pc, #652]	; (8009b38 <v_test+0x314>)
 80098ac:	f007 fdbc 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80098b0:	4ba0      	ldr	r3, [pc, #640]	; (8009b34 <v_test+0x310>)
 80098b2:	edd3 7a00 	vldr	s15, [r3]
 80098b6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80098ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c2:	d820      	bhi.n	8009906 <v_test+0xe2>
			  mode--;
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	3b01      	subs	r3, #1
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			  dist_r = 0;
 80098ca:	4b9a      	ldr	r3, [pc, #616]	; (8009b34 <v_test+0x310>)
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	da01      	bge.n	80098dc <v_test+0xb8>
				  mode = 15;
 80098d8:	230f      	movs	r3, #15
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
			  if(mode < 8){
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	2b07      	cmp	r3, #7
 80098e0:	dc03      	bgt.n	80098ea <v_test+0xc6>
				  full_led_write(7);
 80098e2:	2007      	movs	r0, #7
 80098e4:	f007 f80c 	bl	8010900 <full_led_write>
 80098e8:	e009      	b.n	80098fe <v_test+0xda>
			  }else if(mode < 16){
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	2b0f      	cmp	r3, #15
 80098ee:	dc03      	bgt.n	80098f8 <v_test+0xd4>
				  full_led_write(4);
 80098f0:	2004      	movs	r0, #4
 80098f2:	f007 f805 	bl	8010900 <full_led_write>
 80098f6:	e002      	b.n	80098fe <v_test+0xda>
			  }else{
				  full_led_write(5);
 80098f8:	2005      	movs	r0, #5
 80098fa:	f007 f801 	bl	8010900 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 80098fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009900:	488d      	ldr	r0, [pc, #564]	; (8009b38 <v_test+0x314>)
 8009902:	f007 fd91 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800990a:	488c      	ldr	r0, [pc, #560]	; (8009b3c <v_test+0x318>)
 800990c:	f7f8 fce2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d18f      	bne.n	8009836 <v_test+0x12>
			  HAL_Delay(50);
 8009916:	2032      	movs	r0, #50	; 0x32
 8009918:	f7f7 fb80 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800991c:	bf00      	nop
 800991e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009922:	4886      	ldr	r0, [pc, #536]	; (8009b3c <v_test+0x318>)
 8009924:	f7f8 fcd6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0f7      	beq.n	800991e <v_test+0xfa>
			  drive_ready();
 800992e:	f7fb f9a1 	bl	8004c74 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8009932:	4a83      	ldr	r2, [pc, #524]	; (8009b40 <v_test+0x31c>)
 8009934:	8813      	ldrh	r3, [r2, #0]
 8009936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800993a:	8013      	strh	r3, [r2, #0]
			  v_flag = 0;
 800993c:	4b81      	ldr	r3, [pc, #516]	; (8009b44 <v_test+0x320>)
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]
			  get_base();
 8009942:	f006 ff4b 	bl	80107dc <get_base>

			  switch(mode){
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	2b0a      	cmp	r3, #10
 800994a:	f63f af74 	bhi.w	8009836 <v_test+0x12>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <v_test+0x130>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	08009981 	.word	0x08009981
 8009958:	08009987 	.word	0x08009987
 800995c:	080099b9 	.word	0x080099b9
 8009960:	080099eb 	.word	0x080099eb
 8009964:	08009a25 	.word	0x08009a25
 8009968:	08009a5f 	.word	0x08009a5f
 800996c:	08009a99 	.word	0x08009a99
 8009970:	08009ad3 	.word	0x08009ad3
 8009974:	08009b01 	.word	0x08009b01
 8009978:	08009b61 	.word	0x08009b61
 800997c:	08009b93 	.word	0x08009b93
				case 0:
					get_base();
 8009980:	f006 ff2c 	bl	80107dc <get_base>
					break;
 8009984:	e11e      	b.n	8009bc4 <v_test+0x3a0>
				case 1:
					//----V左45----
					printf("V 45 right .\n");
 8009986:	4870      	ldr	r0, [pc, #448]	; (8009b48 <v_test+0x324>)
 8009988:	f007 fdc2 	bl	8011510 <puts>
					full_led_write(7);
 800998c:	2007      	movs	r0, #7
 800998e:	f006 ffb7 	bl	8010900 <full_led_write>
					half_sectionA();
 8009992:	f7fb fd8b 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009996:	2300      	movs	r3, #0
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28
 800999a:	e004      	b.n	80099a6 <v_test+0x182>
						v_R45();
 800999c:	f7fd ff72 	bl	8007884 <v_R45>
					for(int i = 0; i < 1; i++){
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	3301      	adds	r3, #1
 80099a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	ddf7      	ble.n	800999c <v_test+0x178>
					}
					full_led_write(3);
 80099ac:	2003      	movs	r0, #3
 80099ae:	f006 ffa7 	bl	8010900 <full_led_write>
					half_sectionD();
 80099b2:	f7fb fd95 	bl	80054e0 <half_sectionD>
					break;
 80099b6:	e105      	b.n	8009bc4 <v_test+0x3a0>
				case 2:
					//----V右45----
					printf("V 45 left .\n");
 80099b8:	4864      	ldr	r0, [pc, #400]	; (8009b4c <v_test+0x328>)
 80099ba:	f007 fda9 	bl	8011510 <puts>
					full_led_write(7);
 80099be:	2007      	movs	r0, #7
 80099c0:	f006 ff9e 	bl	8010900 <full_led_write>
					half_sectionA();
 80099c4:	f7fb fd72 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 80099c8:	2300      	movs	r3, #0
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24
 80099cc:	e004      	b.n	80099d8 <v_test+0x1b4>
						v_L45();
 80099ce:	f7fe f887 	bl	8007ae0 <v_L45>
					for(int i = 0; i < 1; i++){
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	3301      	adds	r3, #1
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	2b00      	cmp	r3, #0
 80099dc:	ddf7      	ble.n	80099ce <v_test+0x1aa>
					}
					full_led_write(3);
 80099de:	2003      	movs	r0, #3
 80099e0:	f006 ff8e 	bl	8010900 <full_led_write>
					half_sectionD();
 80099e4:	f7fb fd7c 	bl	80054e0 <half_sectionD>
					break;
 80099e8:	e0ec      	b.n	8009bc4 <v_test+0x3a0>
				case 3:
					//----V左90----
					printf("V 90 right .\n");
 80099ea:	4859      	ldr	r0, [pc, #356]	; (8009b50 <v_test+0x32c>)
 80099ec:	f007 fd90 	bl	8011510 <puts>
					full_led_write(7);
 80099f0:	2007      	movs	r0, #7
 80099f2:	f006 ff85 	bl	8010900 <full_led_write>
					half_sectionA();
 80099f6:	f7fb fd59 	bl	80054ac <half_sectionA>
					v_R45();
 80099fa:	f7fd ff43 	bl	8007884 <v_R45>
					for(int i = 0; i < 1; i++){
 80099fe:	2300      	movs	r3, #0
 8009a00:	623b      	str	r3, [r7, #32]
 8009a02:	e004      	b.n	8009a0e <v_test+0x1ea>
						v_R90();
 8009a04:	f7fe fc0a 	bl	800821c <v_R90>
					for(int i = 0; i < 1; i++){
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	623b      	str	r3, [r7, #32]
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	ddf7      	ble.n	8009a04 <v_test+0x1e0>
					}
					v_R45();
 8009a14:	f7fd ff36 	bl	8007884 <v_R45>
					full_led_write(3);
 8009a18:	2003      	movs	r0, #3
 8009a1a:	f006 ff71 	bl	8010900 <full_led_write>
					half_sectionD();
 8009a1e:	f7fb fd5f 	bl	80054e0 <half_sectionD>
					break;
 8009a22:	e0cf      	b.n	8009bc4 <v_test+0x3a0>
				case 4:
					//----V右90----
					printf("V 90 left .\n");
 8009a24:	484b      	ldr	r0, [pc, #300]	; (8009b54 <v_test+0x330>)
 8009a26:	f007 fd73 	bl	8011510 <puts>
					full_led_write(7);
 8009a2a:	2007      	movs	r0, #7
 8009a2c:	f006 ff68 	bl	8010900 <full_led_write>
					half_sectionA();
 8009a30:	f7fb fd3c 	bl	80054ac <half_sectionA>
					v_L45();
 8009a34:	f7fe f854 	bl	8007ae0 <v_L45>
					for(int i = 0; i < 1; i++){
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]
 8009a3c:	e004      	b.n	8009a48 <v_test+0x224>
						v_L90();
 8009a3e:	f7fe fcd5 	bl	80083ec <v_L90>
					for(int i = 0; i < 1; i++){
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	3301      	adds	r3, #1
 8009a46:	61fb      	str	r3, [r7, #28]
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	ddf7      	ble.n	8009a3e <v_test+0x21a>
					}
					v_L45();
 8009a4e:	f7fe f847 	bl	8007ae0 <v_L45>
					full_led_write(3);
 8009a52:	2003      	movs	r0, #3
 8009a54:	f006 ff54 	bl	8010900 <full_led_write>
					half_sectionD();
 8009a58:	f7fb fd42 	bl	80054e0 <half_sectionD>
					break;
 8009a5c:	e0b2      	b.n	8009bc4 <v_test+0x3a0>
				case 5:
					//----V左135----
					printf("V 135 right .\n");
 8009a5e:	483e      	ldr	r0, [pc, #248]	; (8009b58 <v_test+0x334>)
 8009a60:	f007 fd56 	bl	8011510 <puts>
					full_led_write(7);
 8009a64:	2007      	movs	r0, #7
 8009a66:	f006 ff4b 	bl	8010900 <full_led_write>
					half_sectionA();
 8009a6a:	f7fb fd1f 	bl	80054ac <half_sectionA>
					v_R45();
 8009a6e:	f7fd ff09 	bl	8007884 <v_R45>
					for(int i = 0; i < 1; i++){
 8009a72:	2300      	movs	r3, #0
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	e004      	b.n	8009a82 <v_test+0x25e>
						v_R135();
 8009a78:	f7fe fda2 	bl	80085c0 <v_R135>
					for(int i = 0; i < 1; i++){
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	61bb      	str	r3, [r7, #24]
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	ddf7      	ble.n	8009a78 <v_test+0x254>
					}
					v_R45();
 8009a88:	f7fd fefc 	bl	8007884 <v_R45>
					full_led_write(3);
 8009a8c:	2003      	movs	r0, #3
 8009a8e:	f006 ff37 	bl	8010900 <full_led_write>
					half_sectionD();
 8009a92:	f7fb fd25 	bl	80054e0 <half_sectionD>
					break;
 8009a96:	e095      	b.n	8009bc4 <v_test+0x3a0>
				case 6:
					//----V右135----
					printf("V 135 left .\n");
 8009a98:	4830      	ldr	r0, [pc, #192]	; (8009b5c <v_test+0x338>)
 8009a9a:	f007 fd39 	bl	8011510 <puts>
					full_led_write(7);
 8009a9e:	2007      	movs	r0, #7
 8009aa0:	f006 ff2e 	bl	8010900 <full_led_write>
					half_sectionA();
 8009aa4:	f7fb fd02 	bl	80054ac <half_sectionA>
					v_L45();
 8009aa8:	f7fe f81a 	bl	8007ae0 <v_L45>
					for(int i = 0; i < 1; i++){
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	e004      	b.n	8009abc <v_test+0x298>
						v_L135();
 8009ab2:	f7fe feb3 	bl	800881c <v_L135>
					for(int i = 0; i < 1; i++){
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	ddf7      	ble.n	8009ab2 <v_test+0x28e>
					}
					v_L45();
 8009ac2:	f7fe f80d 	bl	8007ae0 <v_L45>
					full_led_write(3);
 8009ac6:	2003      	movs	r0, #3
 8009ac8:	f006 ff1a 	bl	8010900 <full_led_write>
					half_sectionD();
 8009acc:	f7fb fd08 	bl	80054e0 <half_sectionD>
					break;
 8009ad0:	e078      	b.n	8009bc4 <v_test+0x3a0>
				case 7:
					//----V左45D----
					printf("V 45 right .\n");
 8009ad2:	481d      	ldr	r0, [pc, #116]	; (8009b48 <v_test+0x324>)
 8009ad4:	f007 fd1c 	bl	8011510 <puts>
					full_led_write(7);
 8009ad8:	2007      	movs	r0, #7
 8009ada:	f006 ff11 	bl	8010900 <full_led_write>
					half_sectionA();
 8009ade:	f7fb fce5 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	e004      	b.n	8009af2 <v_test+0x2ce>
						v_R45D();
 8009ae8:	f7fe f928 	bl	8007d3c <v_R45D>
					for(int i = 0; i < 1; i++){
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	3301      	adds	r3, #1
 8009af0:	613b      	str	r3, [r7, #16]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	ddf7      	ble.n	8009ae8 <v_test+0x2c4>
					}
					full_led_write(3);
 8009af8:	2003      	movs	r0, #3
 8009afa:	f006 ff01 	bl	8010900 <full_led_write>
					break;
 8009afe:	e061      	b.n	8009bc4 <v_test+0x3a0>
				case 8:
					//----V右45D----
					printf("V 45 left .\n");
 8009b00:	4812      	ldr	r0, [pc, #72]	; (8009b4c <v_test+0x328>)
 8009b02:	f007 fd05 	bl	8011510 <puts>
					full_led_write(7);
 8009b06:	2007      	movs	r0, #7
 8009b08:	f006 fefa 	bl	8010900 <full_led_write>
					half_sectionA();
 8009b0c:	f7fb fcce 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e004      	b.n	8009b20 <v_test+0x2fc>
						v_L45D();
 8009b16:	f7fe fa49 	bl	8007fac <v_L45D>
					for(int i = 0; i < 1; i++){
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	ddf7      	ble.n	8009b16 <v_test+0x2f2>
					}
					full_led_write(3);
 8009b26:	2003      	movs	r0, #3
 8009b28:	f006 feea 	bl	8010900 <full_led_write>
					break;
 8009b2c:	e04a      	b.n	8009bc4 <v_test+0x3a0>
 8009b2e:	bf00      	nop
 8009b30:	08012908 	.word	0x08012908
 8009b34:	20000b2c 	.word	0x20000b2c
 8009b38:	0801267c 	.word	0x0801267c
 8009b3c:	40020000 	.word	0x40020000
 8009b40:	20000fa8 	.word	0x20000fa8
 8009b44:	20000b28 	.word	0x20000b28
 8009b48:	08012920 	.word	0x08012920
 8009b4c:	08012930 	.word	0x08012930
 8009b50:	0801293c 	.word	0x0801293c
 8009b54:	0801294c 	.word	0x0801294c
 8009b58:	08012958 	.word	0x08012958
 8009b5c:	08012968 	.word	0x08012968
				case 9:
					//----V左135D----
					printf("V 135 right .\n");
 8009b60:	4819      	ldr	r0, [pc, #100]	; (8009bc8 <v_test+0x3a4>)
 8009b62:	f007 fcd5 	bl	8011510 <puts>
					full_led_write(7);
 8009b66:	2007      	movs	r0, #7
 8009b68:	f006 feca 	bl	8010900 <full_led_write>
					half_sectionA();
 8009b6c:	f7fb fc9e 	bl	80054ac <half_sectionA>
					v_R45();
 8009b70:	f7fd fe88 	bl	8007884 <v_R45>
					for(int i = 0; i < 1; i++){
 8009b74:	2300      	movs	r3, #0
 8009b76:	60bb      	str	r3, [r7, #8]
 8009b78:	e004      	b.n	8009b84 <v_test+0x360>
						v_R135D();
 8009b7a:	f7fe ff7d 	bl	8008a78 <v_R135D>
					for(int i = 0; i < 1; i++){
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	3301      	adds	r3, #1
 8009b82:	60bb      	str	r3, [r7, #8]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	ddf7      	ble.n	8009b7a <v_test+0x356>
					}
					full_led_write(3);
 8009b8a:	2003      	movs	r0, #3
 8009b8c:	f006 feb8 	bl	8010900 <full_led_write>
					break;
 8009b90:	e018      	b.n	8009bc4 <v_test+0x3a0>
				case 10:
					//----V右135D----
					printf("V 135 left .\n");
 8009b92:	480e      	ldr	r0, [pc, #56]	; (8009bcc <v_test+0x3a8>)
 8009b94:	f007 fcbc 	bl	8011510 <puts>
					full_led_write(7);
 8009b98:	2007      	movs	r0, #7
 8009b9a:	f006 feb1 	bl	8010900 <full_led_write>
					half_sectionA();
 8009b9e:	f7fb fc85 	bl	80054ac <half_sectionA>
					v_L45();
 8009ba2:	f7fd ff9d 	bl	8007ae0 <v_L45>
					for(int i = 0; i < 1; i++){
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	607b      	str	r3, [r7, #4]
 8009baa:	e004      	b.n	8009bb6 <v_test+0x392>
						v_L135D();
 8009bac:	f7ff f89e 	bl	8008cec <v_L135D>
					for(int i = 0; i < 1; i++){
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	ddf7      	ble.n	8009bac <v_test+0x388>
					}
					full_led_write(3);
 8009bbc:	2003      	movs	r0, #3
 8009bbe:	f006 fe9f 	bl	8010900 <full_led_write>
					break;
 8009bc2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009bc4:	e637      	b.n	8009836 <v_test+0x12>
 8009bc6:	bf00      	nop
 8009bc8:	08012958 	.word	0x08012958
 8009bcc:	08012968 	.word	0x08012968

08009bd0 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0

	int mode = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	48a6      	ldr	r0, [pc, #664]	; (8009e78 <pass_test+0x2a8>)
 8009bde:	f007 fc23 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	b2d8      	uxtb	r0, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	b2d9      	uxtb	r1, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	461a      	mov	r2, r3
 8009c02:	f006 fe43 	bl	801088c <led_write>
		  if(dist_r >= 20){
 8009c06:	4b9d      	ldr	r3, [pc, #628]	; (8009e7c <pass_test+0x2ac>)
 8009c08:	edd3 7a00 	vldr	s15, [r3]
 8009c0c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c18:	db0f      	blt.n	8009c3a <pass_test+0x6a>
			  mode++;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009c20:	4b96      	ldr	r3, [pc, #600]	; (8009e7c <pass_test+0x2ac>)
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	dd01      	ble.n	8009c32 <pass_test+0x62>
				  mode = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4892      	ldr	r0, [pc, #584]	; (8009e80 <pass_test+0x2b0>)
 8009c36:	f007 fbf7 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8009c3a:	4b90      	ldr	r3, [pc, #576]	; (8009e7c <pass_test+0x2ac>)
 8009c3c:	edd3 7a00 	vldr	s15, [r3]
 8009c40:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	d80f      	bhi.n	8009c6e <pass_test+0x9e>
			  mode--;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009c54:	4b89      	ldr	r3, [pc, #548]	; (8009e7c <pass_test+0x2ac>)
 8009c56:	f04f 0200 	mov.w	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da01      	bge.n	8009c66 <pass_test+0x96>
				  mode = 7;
 8009c62:	2307      	movs	r3, #7
 8009c64:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	4885      	ldr	r0, [pc, #532]	; (8009e80 <pass_test+0x2b0>)
 8009c6a:	f007 fbdd 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c72:	4884      	ldr	r0, [pc, #528]	; (8009e84 <pass_test+0x2b4>)
 8009c74:	f7f8 fb2e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1b1      	bne.n	8009be2 <pass_test+0x12>
			  HAL_Delay(50);
 8009c7e:	2032      	movs	r0, #50	; 0x32
 8009c80:	f7f7 f9cc 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009c84:	bf00      	nop
 8009c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c8a:	487e      	ldr	r0, [pc, #504]	; (8009e84 <pass_test+0x2b4>)
 8009c8c:	f7f8 fb22 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0f7      	beq.n	8009c86 <pass_test+0xb6>
			  drive_ready();
 8009c96:	f7fa ffed 	bl	8004c74 <drive_ready>
			  v_flag = 0;
 8009c9a:	4b7b      	ldr	r3, [pc, #492]	; (8009e88 <pass_test+0x2b8>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	701a      	strb	r2, [r3, #0]

			  switch(mode){
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b07      	cmp	r3, #7
 8009ca4:	d89d      	bhi.n	8009be2 <pass_test+0x12>
 8009ca6:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <pass_test+0xdc>)
 8009ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cac:	08009ccd 	.word	0x08009ccd
 8009cb0:	08009d1f 	.word	0x08009d1f
 8009cb4:	08009d91 	.word	0x08009d91
 8009cb8:	08009e03 	.word	0x08009e03
 8009cbc:	08009be3 	.word	0x08009be3
 8009cc0:	08009be3 	.word	0x08009be3
 8009cc4:	08009be3 	.word	0x08009be3
 8009cc8:	08009be3 	.word	0x08009be3
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009ccc:	486f      	ldr	r0, [pc, #444]	; (8009e8c <pass_test+0x2bc>)
 8009cce:	f007 fc1f 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 8009cd2:	4a6f      	ldr	r2, [pc, #444]	; (8009e90 <pass_test+0x2c0>)
 8009cd4:	8813      	ldrh	r3, [r2, #0]
 8009cd6:	f36f 1345 	bfc	r3, #5, #1
 8009cda:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009cdc:	4b6d      	ldr	r3, [pc, #436]	; (8009e94 <pass_test+0x2c4>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009ce2:	4b6d      	ldr	r3, [pc, #436]	; (8009e98 <pass_test+0x2c8>)
 8009ce4:	2209      	movs	r2, #9
 8009ce6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ce8:	4b6c      	ldr	r3, [pc, #432]	; (8009e9c <pass_test+0x2cc>)
 8009cea:	2206      	movs	r2, #6
 8009cec:	701a      	strb	r2, [r3, #0]

					get_base();
 8009cee:	f006 fd75 	bl	80107dc <get_base>

					searchC();
 8009cf2:	f003 ff19 	bl	800db28 <searchC>
					HAL_Delay(2000);
 8009cf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cfa:	f7f7 f98f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009cfe:	4b67      	ldr	r3, [pc, #412]	; (8009e9c <pass_test+0x2cc>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	4b65      	ldr	r3, [pc, #404]	; (8009e9c <pass_test+0x2cc>)
 8009d06:	781a      	ldrb	r2, [r3, #0]
 8009d08:	4b63      	ldr	r3, [pc, #396]	; (8009e98 <pass_test+0x2c8>)
 8009d0a:	701a      	strb	r2, [r3, #0]
					searchC();
 8009d0c:	f003 ff0c 	bl	800db28 <searchC>

					goal_x = GOAL_X;
 8009d10:	4b61      	ldr	r3, [pc, #388]	; (8009e98 <pass_test+0x2c8>)
 8009d12:	2209      	movs	r2, #9
 8009d14:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d16:	4b61      	ldr	r3, [pc, #388]	; (8009e9c <pass_test+0x2cc>)
 8009d18:	2206      	movs	r2, #6
 8009d1a:	701a      	strb	r2, [r3, #0]
					break;
 8009d1c:	e0aa      	b.n	8009e74 <pass_test+0x2a4>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 8009d1e:	4860      	ldr	r0, [pc, #384]	; (8009ea0 <pass_test+0x2d0>)
 8009d20:	f007 fbf6 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 8009d24:	4a5a      	ldr	r2, [pc, #360]	; (8009e90 <pass_test+0x2c0>)
 8009d26:	8813      	ldrh	r3, [r2, #0]
 8009d28:	f043 0320 	orr.w	r3, r3, #32
 8009d2c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009d2e:	4a58      	ldr	r2, [pc, #352]	; (8009e90 <pass_test+0x2c0>)
 8009d30:	8813      	ldrh	r3, [r2, #0]
 8009d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d36:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009d38:	4b56      	ldr	r3, [pc, #344]	; (8009e94 <pass_test+0x2c4>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009d3e:	4b59      	ldr	r3, [pc, #356]	; (8009ea4 <pass_test+0x2d4>)
 8009d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d44:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009d46:	4b58      	ldr	r3, [pc, #352]	; (8009ea8 <pass_test+0x2d8>)
 8009d48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009d4c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009d4e:	4b57      	ldr	r3, [pc, #348]	; (8009eac <pass_test+0x2dc>)
 8009d50:	2203      	movs	r2, #3
 8009d52:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009d54:	4b50      	ldr	r3, [pc, #320]	; (8009e98 <pass_test+0x2c8>)
 8009d56:	2209      	movs	r2, #9
 8009d58:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d5a:	4b50      	ldr	r3, [pc, #320]	; (8009e9c <pass_test+0x2cc>)
 8009d5c:	2206      	movs	r2, #6
 8009d5e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d60:	f006 fd3c 	bl	80107dc <get_base>

					searchF3();
 8009d64:	f004 faae 	bl	800e2c4 <searchF3>
					HAL_Delay(2000);
 8009d68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d6c:	f7f7 f956 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d70:	4b4a      	ldr	r3, [pc, #296]	; (8009e9c <pass_test+0x2cc>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
 8009d76:	4b49      	ldr	r3, [pc, #292]	; (8009e9c <pass_test+0x2cc>)
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	4b47      	ldr	r3, [pc, #284]	; (8009e98 <pass_test+0x2c8>)
 8009d7c:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009d7e:	f004 faa1 	bl	800e2c4 <searchF3>

					goal_x = GOAL_X;
 8009d82:	4b45      	ldr	r3, [pc, #276]	; (8009e98 <pass_test+0x2c8>)
 8009d84:	2209      	movs	r2, #9
 8009d86:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d88:	4b44      	ldr	r3, [pc, #272]	; (8009e9c <pass_test+0x2cc>)
 8009d8a:	2206      	movs	r2, #6
 8009d8c:	701a      	strb	r2, [r3, #0]
					break;
 8009d8e:	e071      	b.n	8009e74 <pass_test+0x2a4>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009d90:	4847      	ldr	r0, [pc, #284]	; (8009eb0 <pass_test+0x2e0>)
 8009d92:	f007 fbbd 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 8009d96:	4a3e      	ldr	r2, [pc, #248]	; (8009e90 <pass_test+0x2c0>)
 8009d98:	8813      	ldrh	r3, [r2, #0]
 8009d9a:	f043 0320 	orr.w	r3, r3, #32
 8009d9e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009da0:	4a3b      	ldr	r2, [pc, #236]	; (8009e90 <pass_test+0x2c0>)
 8009da2:	8813      	ldrh	r3, [r2, #0]
 8009da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009da8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009daa:	4b3a      	ldr	r3, [pc, #232]	; (8009e94 <pass_test+0x2c4>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009db0:	4b3c      	ldr	r3, [pc, #240]	; (8009ea4 <pass_test+0x2d4>)
 8009db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009db8:	4b3b      	ldr	r3, [pc, #236]	; (8009ea8 <pass_test+0x2d8>)
 8009dba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009dbe:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009dc0:	4b3a      	ldr	r3, [pc, #232]	; (8009eac <pass_test+0x2dc>)
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009dc6:	4b34      	ldr	r3, [pc, #208]	; (8009e98 <pass_test+0x2c8>)
 8009dc8:	2209      	movs	r2, #9
 8009dca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009dcc:	4b33      	ldr	r3, [pc, #204]	; (8009e9c <pass_test+0x2cc>)
 8009dce:	2206      	movs	r2, #6
 8009dd0:	701a      	strb	r2, [r3, #0]

					get_base();
 8009dd2:	f006 fd03 	bl	80107dc <get_base>

					searchF32();
 8009dd6:	f004 fb29 	bl	800e42c <searchF32>
					HAL_Delay(2000);
 8009dda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009dde:	f7f7 f91d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009de2:	4b2e      	ldr	r3, [pc, #184]	; (8009e9c <pass_test+0x2cc>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	701a      	strb	r2, [r3, #0]
 8009de8:	4b2c      	ldr	r3, [pc, #176]	; (8009e9c <pass_test+0x2cc>)
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	4b2a      	ldr	r3, [pc, #168]	; (8009e98 <pass_test+0x2c8>)
 8009dee:	701a      	strb	r2, [r3, #0]
					searchF32();
 8009df0:	f004 fb1c 	bl	800e42c <searchF32>

					goal_x = GOAL_X;
 8009df4:	4b28      	ldr	r3, [pc, #160]	; (8009e98 <pass_test+0x2c8>)
 8009df6:	2209      	movs	r2, #9
 8009df8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009dfa:	4b28      	ldr	r3, [pc, #160]	; (8009e9c <pass_test+0x2cc>)
 8009dfc:	2206      	movs	r2, #6
 8009dfe:	701a      	strb	r2, [r3, #0]
					break;
 8009e00:	e038      	b.n	8009e74 <pass_test+0x2a4>
				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009e02:	482c      	ldr	r0, [pc, #176]	; (8009eb4 <pass_test+0x2e4>)
 8009e04:	f007 fb84 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 8009e08:	4a21      	ldr	r2, [pc, #132]	; (8009e90 <pass_test+0x2c0>)
 8009e0a:	8813      	ldrh	r3, [r2, #0]
 8009e0c:	f043 0320 	orr.w	r3, r3, #32
 8009e10:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009e12:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <pass_test+0x2c0>)
 8009e14:	8813      	ldrh	r3, [r2, #0]
 8009e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e1a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009e1c:	4b1d      	ldr	r3, [pc, #116]	; (8009e94 <pass_test+0x2c4>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009e22:	4b20      	ldr	r3, [pc, #128]	; (8009ea4 <pass_test+0x2d4>)
 8009e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e28:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009e2a:	4b1f      	ldr	r3, [pc, #124]	; (8009ea8 <pass_test+0x2d8>)
 8009e2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009e30:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009e32:	4b1e      	ldr	r3, [pc, #120]	; (8009eac <pass_test+0x2dc>)
 8009e34:	2204      	movs	r2, #4
 8009e36:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009e38:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <pass_test+0x2c8>)
 8009e3a:	2209      	movs	r2, #9
 8009e3c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e3e:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <pass_test+0x2cc>)
 8009e40:	2206      	movs	r2, #6
 8009e42:	701a      	strb	r2, [r3, #0]

					get_base();
 8009e44:	f006 fcca 	bl	80107dc <get_base>

					searchF4();
 8009e48:	f004 fba4 	bl	800e594 <searchF4>
					HAL_Delay(2000);
 8009e4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e50:	f7f7 f8e4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009e54:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <pass_test+0x2cc>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	4b10      	ldr	r3, [pc, #64]	; (8009e9c <pass_test+0x2cc>)
 8009e5c:	781a      	ldrb	r2, [r3, #0]
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <pass_test+0x2c8>)
 8009e60:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009e62:	f004 fb97 	bl	800e594 <searchF4>

					goal_x = GOAL_X;
 8009e66:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <pass_test+0x2c8>)
 8009e68:	2209      	movs	r2, #9
 8009e6a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e6c:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <pass_test+0x2cc>)
 8009e6e:	2206      	movs	r2, #6
 8009e70:	701a      	strb	r2, [r3, #0]
					break;
 8009e72:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009e74:	e6b5      	b.n	8009be2 <pass_test+0x12>
 8009e76:	bf00      	nop
 8009e78:	08012978 	.word	0x08012978
 8009e7c:	20000b2c 	.word	0x20000b2c
 8009e80:	0801267c 	.word	0x0801267c
 8009e84:	40020000 	.word	0x40020000
 8009e88:	20000b28 	.word	0x20000b28
 8009e8c:	08012994 	.word	0x08012994
 8009e90:	20000fa8 	.word	0x20000fa8
 8009e94:	200012e8 	.word	0x200012e8
 8009e98:	20000bf1 	.word	0x20000bf1
 8009e9c:	20000b8c 	.word	0x20000b8c
 8009ea0:	080129a8 	.word	0x080129a8
 8009ea4:	2000048c 	.word	0x2000048c
 8009ea8:	20000fbc 	.word	0x20000fbc
 8009eac:	2000048e 	.word	0x2000048e
 8009eb0:	080129b8 	.word	0x080129b8
 8009eb4:	080129c8 	.word	0x080129c8

08009eb8 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0

	int mode = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	4874      	ldr	r0, [pc, #464]	; (800a098 <simple_run+0x1e0>)
 8009ec6:	f007 faaf 	bl	8011428 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	b2d8      	uxtb	r0, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	b2d9      	uxtb	r1, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f003 0304 	and.w	r3, r3, #4
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f006 fccf 	bl	801088c <led_write>
		  if(dist_r >= 20){
 8009eee:	4b6b      	ldr	r3, [pc, #428]	; (800a09c <simple_run+0x1e4>)
 8009ef0:	edd3 7a00 	vldr	s15, [r3]
 8009ef4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f00:	db0f      	blt.n	8009f22 <simple_run+0x6a>
			  mode++;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3301      	adds	r3, #1
 8009f06:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009f08:	4b64      	ldr	r3, [pc, #400]	; (800a09c <simple_run+0x1e4>)
 8009f0a:	f04f 0200 	mov.w	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b07      	cmp	r3, #7
 8009f14:	dd01      	ble.n	8009f1a <simple_run+0x62>
				  mode = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4860      	ldr	r0, [pc, #384]	; (800a0a0 <simple_run+0x1e8>)
 8009f1e:	f007 fa83 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8009f22:	4b5e      	ldr	r3, [pc, #376]	; (800a09c <simple_run+0x1e4>)
 8009f24:	edd3 7a00 	vldr	s15, [r3]
 8009f28:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f34:	d80f      	bhi.n	8009f56 <simple_run+0x9e>
			  mode--;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009f3c:	4b57      	ldr	r3, [pc, #348]	; (800a09c <simple_run+0x1e4>)
 8009f3e:	f04f 0200 	mov.w	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da01      	bge.n	8009f4e <simple_run+0x96>
				  mode = 7;
 8009f4a:	2307      	movs	r3, #7
 8009f4c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	4853      	ldr	r0, [pc, #332]	; (800a0a0 <simple_run+0x1e8>)
 8009f52:	f007 fa69 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f5a:	4852      	ldr	r0, [pc, #328]	; (800a0a4 <simple_run+0x1ec>)
 8009f5c:	f7f8 f9ba 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1b1      	bne.n	8009eca <simple_run+0x12>
			  HAL_Delay(50);
 8009f66:	2032      	movs	r0, #50	; 0x32
 8009f68:	f7f7 f858 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009f6c:	bf00      	nop
 8009f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f72:	484c      	ldr	r0, [pc, #304]	; (800a0a4 <simple_run+0x1ec>)
 8009f74:	f7f8 f9ae 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0f7      	beq.n	8009f6e <simple_run+0xb6>
			  drive_ready();
 8009f7e:	f7fa fe79 	bl	8004c74 <drive_ready>

			  switch(mode){
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b07      	cmp	r3, #7
 8009f86:	d8a0      	bhi.n	8009eca <simple_run+0x12>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <simple_run+0xd8>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009ecb 	.word	0x08009ecb
 8009f94:	08009fb1 	.word	0x08009fb1
 8009f98:	08009ffd 	.word	0x08009ffd
 8009f9c:	0800a049 	.word	0x0800a049
 8009fa0:	08009ecb 	.word	0x08009ecb
 8009fa4:	08009ecb 	.word	0x08009ecb
 8009fa8:	08009ecb 	.word	0x08009ecb
 8009fac:	08009ecb 	.word	0x08009ecb

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 8009fb0:	483d      	ldr	r0, [pc, #244]	; (800a0a8 <simple_run+0x1f0>)
 8009fb2:	f007 faad 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 8009fb6:	4a3d      	ldr	r2, [pc, #244]	; (800a0ac <simple_run+0x1f4>)
 8009fb8:	8813      	ldrh	r3, [r2, #0]
 8009fba:	f36f 1345 	bfc	r3, #5, #1
 8009fbe:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8009fc0:	4b3b      	ldr	r3, [pc, #236]	; (800a0b0 <simple_run+0x1f8>)
 8009fc2:	2209      	movs	r2, #9
 8009fc4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009fc6:	4b3b      	ldr	r3, [pc, #236]	; (800a0b4 <simple_run+0x1fc>)
 8009fc8:	2206      	movs	r2, #6
 8009fca:	701a      	strb	r2, [r3, #0]

					get_base();
 8009fcc:	f006 fc06 	bl	80107dc <get_base>

					searchA();
 8009fd0:	f003 fc9e 	bl	800d910 <searchA>
					HAL_Delay(2000);
 8009fd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009fd8:	f7f7 f820 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009fdc:	4b35      	ldr	r3, [pc, #212]	; (800a0b4 <simple_run+0x1fc>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	4b34      	ldr	r3, [pc, #208]	; (800a0b4 <simple_run+0x1fc>)
 8009fe4:	781a      	ldrb	r2, [r3, #0]
 8009fe6:	4b32      	ldr	r3, [pc, #200]	; (800a0b0 <simple_run+0x1f8>)
 8009fe8:	701a      	strb	r2, [r3, #0]
					searchA();
 8009fea:	f003 fc91 	bl	800d910 <searchA>

					goal_x = GOAL_X;
 8009fee:	4b30      	ldr	r3, [pc, #192]	; (800a0b0 <simple_run+0x1f8>)
 8009ff0:	2209      	movs	r2, #9
 8009ff2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ff4:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <simple_run+0x1fc>)
 8009ff6:	2206      	movs	r2, #6
 8009ff8:	701a      	strb	r2, [r3, #0]

					break;
 8009ffa:	e04b      	b.n	800a094 <simple_run+0x1dc>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8009ffc:	482e      	ldr	r0, [pc, #184]	; (800a0b8 <simple_run+0x200>)
 8009ffe:	f007 fa87 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 800a002:	4a2a      	ldr	r2, [pc, #168]	; (800a0ac <simple_run+0x1f4>)
 800a004:	8813      	ldrh	r3, [r2, #0]
 800a006:	f36f 1345 	bfc	r3, #5, #1
 800a00a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800a00c:	4b28      	ldr	r3, [pc, #160]	; (800a0b0 <simple_run+0x1f8>)
 800a00e:	2209      	movs	r2, #9
 800a010:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a012:	4b28      	ldr	r3, [pc, #160]	; (800a0b4 <simple_run+0x1fc>)
 800a014:	2206      	movs	r2, #6
 800a016:	701a      	strb	r2, [r3, #0]

					get_base();
 800a018:	f006 fbe0 	bl	80107dc <get_base>

					searchB();
 800a01c:	f003 fcfa 	bl	800da14 <searchB>
					HAL_Delay(2000);
 800a020:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a024:	f7f6 fffa 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a028:	4b22      	ldr	r3, [pc, #136]	; (800a0b4 <simple_run+0x1fc>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <simple_run+0x1fc>)
 800a030:	781a      	ldrb	r2, [r3, #0]
 800a032:	4b1f      	ldr	r3, [pc, #124]	; (800a0b0 <simple_run+0x1f8>)
 800a034:	701a      	strb	r2, [r3, #0]
					searchB();
 800a036:	f003 fced 	bl	800da14 <searchB>

					goal_x = GOAL_X;
 800a03a:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <simple_run+0x1f8>)
 800a03c:	2209      	movs	r2, #9
 800a03e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a040:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <simple_run+0x1fc>)
 800a042:	2206      	movs	r2, #6
 800a044:	701a      	strb	r2, [r3, #0]

					break;
 800a046:	e025      	b.n	800a094 <simple_run+0x1dc>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 800a048:	481c      	ldr	r0, [pc, #112]	; (800a0bc <simple_run+0x204>)
 800a04a:	f007 fa61 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a04e:	4a17      	ldr	r2, [pc, #92]	; (800a0ac <simple_run+0x1f4>)
 800a050:	8813      	ldrh	r3, [r2, #0]
 800a052:	f043 0320 	orr.w	r3, r3, #32
 800a056:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <simple_run+0x1f8>)
 800a05a:	2209      	movs	r2, #9
 800a05c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a05e:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <simple_run+0x1fc>)
 800a060:	2206      	movs	r2, #6
 800a062:	701a      	strb	r2, [r3, #0]

					get_base();
 800a064:	f006 fbba 	bl	80107dc <get_base>

					searchB();
 800a068:	f003 fcd4 	bl	800da14 <searchB>
					HAL_Delay(2000);
 800a06c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a070:	f7f6 ffd4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a074:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <simple_run+0x1fc>)
 800a076:	2200      	movs	r2, #0
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <simple_run+0x1fc>)
 800a07c:	781a      	ldrb	r2, [r3, #0]
 800a07e:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <simple_run+0x1f8>)
 800a080:	701a      	strb	r2, [r3, #0]
					searchB();
 800a082:	f003 fcc7 	bl	800da14 <searchB>

					goal_x = GOAL_X;
 800a086:	4b0a      	ldr	r3, [pc, #40]	; (800a0b0 <simple_run+0x1f8>)
 800a088:	2209      	movs	r2, #9
 800a08a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <simple_run+0x1fc>)
 800a08e:	2206      	movs	r2, #6
 800a090:	701a      	strb	r2, [r3, #0]

					break;
 800a092:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a094:	e719      	b.n	8009eca <simple_run+0x12>
 800a096:	bf00      	nop
 800a098:	080129d8 	.word	0x080129d8
 800a09c:	20000b2c 	.word	0x20000b2c
 800a0a0:	0801267c 	.word	0x0801267c
 800a0a4:	40020000 	.word	0x40020000
 800a0a8:	080129f0 	.word	0x080129f0
 800a0ac:	20000fa8 	.word	0x20000fa8
 800a0b0:	20000bf1 	.word	0x20000bf1
 800a0b4:	20000b8c 	.word	0x20000b8c
 800a0b8:	080129fc 	.word	0x080129fc
 800a0bc:	08012a14 	.word	0x08012a14

0800a0c0 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	48b4      	ldr	r0, [pc, #720]	; (800a3a0 <slalom_run+0x2e0>)
 800a0ce:	f007 f9ab 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	b2d8      	uxtb	r0, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	b2d9      	uxtb	r1, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f006 fbcb 	bl	801088c <led_write>
		  if(dist_r >= 20){
 800a0f6:	4bab      	ldr	r3, [pc, #684]	; (800a3a4 <slalom_run+0x2e4>)
 800a0f8:	edd3 7a00 	vldr	s15, [r3]
 800a0fc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a100:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a108:	db0f      	blt.n	800a12a <slalom_run+0x6a>
			  mode++;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3301      	adds	r3, #1
 800a10e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a110:	4ba4      	ldr	r3, [pc, #656]	; (800a3a4 <slalom_run+0x2e4>)
 800a112:	f04f 0200 	mov.w	r2, #0
 800a116:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b07      	cmp	r3, #7
 800a11c:	dd01      	ble.n	800a122 <slalom_run+0x62>
				  mode = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	48a0      	ldr	r0, [pc, #640]	; (800a3a8 <slalom_run+0x2e8>)
 800a126:	f007 f97f 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800a12a:	4b9e      	ldr	r3, [pc, #632]	; (800a3a4 <slalom_run+0x2e4>)
 800a12c:	edd3 7a00 	vldr	s15, [r3]
 800a130:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a134:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13c:	d80f      	bhi.n	800a15e <slalom_run+0x9e>
			  mode--;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3b01      	subs	r3, #1
 800a142:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a144:	4b97      	ldr	r3, [pc, #604]	; (800a3a4 <slalom_run+0x2e4>)
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da01      	bge.n	800a156 <slalom_run+0x96>
				  mode = 7;
 800a152:	2307      	movs	r3, #7
 800a154:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	4893      	ldr	r0, [pc, #588]	; (800a3a8 <slalom_run+0x2e8>)
 800a15a:	f007 f965 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a15e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a162:	4892      	ldr	r0, [pc, #584]	; (800a3ac <slalom_run+0x2ec>)
 800a164:	f7f8 f8b6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1b1      	bne.n	800a0d2 <slalom_run+0x12>
			  HAL_Delay(50);
 800a16e:	2032      	movs	r0, #50	; 0x32
 800a170:	f7f6 ff54 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a174:	bf00      	nop
 800a176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a17a:	488c      	ldr	r0, [pc, #560]	; (800a3ac <slalom_run+0x2ec>)
 800a17c:	f7f8 f8aa 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f7      	beq.n	800a176 <slalom_run+0xb6>
			  drive_ready();
 800a186:	f7fa fd75 	bl	8004c74 <drive_ready>

			  switch(mode){
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b07      	cmp	r3, #7
 800a18e:	d8a0      	bhi.n	800a0d2 <slalom_run+0x12>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <slalom_run+0xd8>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a20b 	.word	0x0800a20b
 800a1a0:	0800a25d 	.word	0x0800a25d
 800a1a4:	0800a2c9 	.word	0x0800a2c9
 800a1a8:	0800a335 	.word	0x0800a335
 800a1ac:	0800a3d5 	.word	0x0800a3d5
 800a1b0:	0800a439 	.word	0x0800a439
 800a1b4:	0800a4b7 	.word	0x0800a4b7

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a1b8:	487d      	ldr	r0, [pc, #500]	; (800a3b0 <slalom_run+0x2f0>)
 800a1ba:	f007 f9a9 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 800a1be:	4a7d      	ldr	r2, [pc, #500]	; (800a3b4 <slalom_run+0x2f4>)
 800a1c0:	8813      	ldrh	r3, [r2, #0]
 800a1c2:	f36f 1345 	bfc	r3, #5, #1
 800a1c6:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a1c8:	4b7b      	ldr	r3, [pc, #492]	; (800a3b8 <slalom_run+0x2f8>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a1ce:	4b7b      	ldr	r3, [pc, #492]	; (800a3bc <slalom_run+0x2fc>)
 800a1d0:	2209      	movs	r2, #9
 800a1d2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1d4:	4b7a      	ldr	r3, [pc, #488]	; (800a3c0 <slalom_run+0x300>)
 800a1d6:	2206      	movs	r2, #6
 800a1d8:	701a      	strb	r2, [r3, #0]

					get_base();
 800a1da:	f006 faff 	bl	80107dc <get_base>

					searchC();
 800a1de:	f003 fca3 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a1e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1e6:	f7f6 ff19 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a1ea:	4b75      	ldr	r3, [pc, #468]	; (800a3c0 <slalom_run+0x300>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
 800a1f0:	4b73      	ldr	r3, [pc, #460]	; (800a3c0 <slalom_run+0x300>)
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	4b71      	ldr	r3, [pc, #452]	; (800a3bc <slalom_run+0x2fc>)
 800a1f6:	701a      	strb	r2, [r3, #0]
					searchC();
 800a1f8:	f003 fc96 	bl	800db28 <searchC>

					goal_x = GOAL_X;
 800a1fc:	4b6f      	ldr	r3, [pc, #444]	; (800a3bc <slalom_run+0x2fc>)
 800a1fe:	2209      	movs	r2, #9
 800a200:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a202:	4b6f      	ldr	r3, [pc, #444]	; (800a3c0 <slalom_run+0x300>)
 800a204:	2206      	movs	r2, #6
 800a206:	701a      	strb	r2, [r3, #0]
					break;
 800a208:	e194      	b.n	800a534 <slalom_run+0x474>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800a20a:	486e      	ldr	r0, [pc, #440]	; (800a3c4 <slalom_run+0x304>)
 800a20c:	f007 f980 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a210:	4a68      	ldr	r2, [pc, #416]	; (800a3b4 <slalom_run+0x2f4>)
 800a212:	8813      	ldrh	r3, [r2, #0]
 800a214:	f043 0320 	orr.w	r3, r3, #32
 800a218:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a21a:	4b67      	ldr	r3, [pc, #412]	; (800a3b8 <slalom_run+0x2f8>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a220:	4b66      	ldr	r3, [pc, #408]	; (800a3bc <slalom_run+0x2fc>)
 800a222:	2209      	movs	r2, #9
 800a224:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a226:	4b66      	ldr	r3, [pc, #408]	; (800a3c0 <slalom_run+0x300>)
 800a228:	2206      	movs	r2, #6
 800a22a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a22c:	f006 fad6 	bl	80107dc <get_base>

					searchC();
 800a230:	f003 fc7a 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a234:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a238:	f7f6 fef0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a23c:	4b60      	ldr	r3, [pc, #384]	; (800a3c0 <slalom_run+0x300>)
 800a23e:	2200      	movs	r2, #0
 800a240:	701a      	strb	r2, [r3, #0]
 800a242:	4b5f      	ldr	r3, [pc, #380]	; (800a3c0 <slalom_run+0x300>)
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <slalom_run+0x2fc>)
 800a248:	701a      	strb	r2, [r3, #0]
					searchC();
 800a24a:	f003 fc6d 	bl	800db28 <searchC>

					goal_x = GOAL_X;
 800a24e:	4b5b      	ldr	r3, [pc, #364]	; (800a3bc <slalom_run+0x2fc>)
 800a250:	2209      	movs	r2, #9
 800a252:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a254:	4b5a      	ldr	r3, [pc, #360]	; (800a3c0 <slalom_run+0x300>)
 800a256:	2206      	movs	r2, #6
 800a258:	701a      	strb	r2, [r3, #0]
					break;
 800a25a:	e16b      	b.n	800a534 <slalom_run+0x474>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800a25c:	485a      	ldr	r0, [pc, #360]	; (800a3c8 <slalom_run+0x308>)
 800a25e:	f007 f957 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a262:	4a54      	ldr	r2, [pc, #336]	; (800a3b4 <slalom_run+0x2f4>)
 800a264:	8813      	ldrh	r3, [r2, #0]
 800a266:	f043 0320 	orr.w	r3, r3, #32
 800a26a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a26c:	4a51      	ldr	r2, [pc, #324]	; (800a3b4 <slalom_run+0x2f4>)
 800a26e:	8813      	ldrh	r3, [r2, #0]
 800a270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a274:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a276:	4b50      	ldr	r3, [pc, #320]	; (800a3b8 <slalom_run+0x2f8>)
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a27c:	4b53      	ldr	r3, [pc, #332]	; (800a3cc <slalom_run+0x30c>)
 800a27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a282:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800a284:	4b52      	ldr	r3, [pc, #328]	; (800a3d0 <slalom_run+0x310>)
 800a286:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a28a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a28c:	4b4b      	ldr	r3, [pc, #300]	; (800a3bc <slalom_run+0x2fc>)
 800a28e:	2209      	movs	r2, #9
 800a290:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a292:	4b4b      	ldr	r3, [pc, #300]	; (800a3c0 <slalom_run+0x300>)
 800a294:	2206      	movs	r2, #6
 800a296:	701a      	strb	r2, [r3, #0]

					get_base();
 800a298:	f006 faa0 	bl	80107dc <get_base>

					searchD();
 800a29c:	f003 fd90 	bl	800ddc0 <searchD>
					HAL_Delay(2000);
 800a2a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a2a4:	f7f6 feba 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a2a8:	4b45      	ldr	r3, [pc, #276]	; (800a3c0 <slalom_run+0x300>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	4b44      	ldr	r3, [pc, #272]	; (800a3c0 <slalom_run+0x300>)
 800a2b0:	781a      	ldrb	r2, [r3, #0]
 800a2b2:	4b42      	ldr	r3, [pc, #264]	; (800a3bc <slalom_run+0x2fc>)
 800a2b4:	701a      	strb	r2, [r3, #0]
					searchD();
 800a2b6:	f003 fd83 	bl	800ddc0 <searchD>

					goal_x = GOAL_X;
 800a2ba:	4b40      	ldr	r3, [pc, #256]	; (800a3bc <slalom_run+0x2fc>)
 800a2bc:	2209      	movs	r2, #9
 800a2be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2c0:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <slalom_run+0x300>)
 800a2c2:	2206      	movs	r2, #6
 800a2c4:	701a      	strb	r2, [r3, #0]
					break;
 800a2c6:	e135      	b.n	800a534 <slalom_run+0x474>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800a2c8:	483f      	ldr	r0, [pc, #252]	; (800a3c8 <slalom_run+0x308>)
 800a2ca:	f007 f921 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a2ce:	4a39      	ldr	r2, [pc, #228]	; (800a3b4 <slalom_run+0x2f4>)
 800a2d0:	8813      	ldrh	r3, [r2, #0]
 800a2d2:	f043 0320 	orr.w	r3, r3, #32
 800a2d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a2d8:	4a36      	ldr	r2, [pc, #216]	; (800a3b4 <slalom_run+0x2f4>)
 800a2da:	8813      	ldrh	r3, [r2, #0]
 800a2dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2e0:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a2e2:	4b35      	ldr	r3, [pc, #212]	; (800a3b8 <slalom_run+0x2f8>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a2e8:	4b38      	ldr	r3, [pc, #224]	; (800a3cc <slalom_run+0x30c>)
 800a2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ee:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a2f0:	4b37      	ldr	r3, [pc, #220]	; (800a3d0 <slalom_run+0x310>)
 800a2f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2f6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a2f8:	4b30      	ldr	r3, [pc, #192]	; (800a3bc <slalom_run+0x2fc>)
 800a2fa:	2209      	movs	r2, #9
 800a2fc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2fe:	4b30      	ldr	r3, [pc, #192]	; (800a3c0 <slalom_run+0x300>)
 800a300:	2206      	movs	r2, #6
 800a302:	701a      	strb	r2, [r3, #0]

					get_base();
 800a304:	f006 fa6a 	bl	80107dc <get_base>

					searchD();
 800a308:	f003 fd5a 	bl	800ddc0 <searchD>
					HAL_Delay(2000);
 800a30c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a310:	f7f6 fe84 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a314:	4b2a      	ldr	r3, [pc, #168]	; (800a3c0 <slalom_run+0x300>)
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	4b29      	ldr	r3, [pc, #164]	; (800a3c0 <slalom_run+0x300>)
 800a31c:	781a      	ldrb	r2, [r3, #0]
 800a31e:	4b27      	ldr	r3, [pc, #156]	; (800a3bc <slalom_run+0x2fc>)
 800a320:	701a      	strb	r2, [r3, #0]
					searchD();
 800a322:	f003 fd4d 	bl	800ddc0 <searchD>

					goal_x = GOAL_X;
 800a326:	4b25      	ldr	r3, [pc, #148]	; (800a3bc <slalom_run+0x2fc>)
 800a328:	2209      	movs	r2, #9
 800a32a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a32c:	4b24      	ldr	r3, [pc, #144]	; (800a3c0 <slalom_run+0x300>)
 800a32e:	2206      	movs	r2, #6
 800a330:	701a      	strb	r2, [r3, #0]
					break;
 800a332:	e0ff      	b.n	800a534 <slalom_run+0x474>

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800a334:	4824      	ldr	r0, [pc, #144]	; (800a3c8 <slalom_run+0x308>)
 800a336:	f007 f8eb 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a33a:	4a1e      	ldr	r2, [pc, #120]	; (800a3b4 <slalom_run+0x2f4>)
 800a33c:	8813      	ldrh	r3, [r2, #0]
 800a33e:	f043 0320 	orr.w	r3, r3, #32
 800a342:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a344:	4a1b      	ldr	r2, [pc, #108]	; (800a3b4 <slalom_run+0x2f4>)
 800a346:	8813      	ldrh	r3, [r2, #0]
 800a348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a34c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a34e:	4b1a      	ldr	r3, [pc, #104]	; (800a3b8 <slalom_run+0x2f8>)
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a354:	4b1d      	ldr	r3, [pc, #116]	; (800a3cc <slalom_run+0x30c>)
 800a356:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800a35c:	4b1c      	ldr	r3, [pc, #112]	; (800a3d0 <slalom_run+0x310>)
 800a35e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a362:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a364:	4b15      	ldr	r3, [pc, #84]	; (800a3bc <slalom_run+0x2fc>)
 800a366:	2209      	movs	r2, #9
 800a368:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a36a:	4b15      	ldr	r3, [pc, #84]	; (800a3c0 <slalom_run+0x300>)
 800a36c:	2206      	movs	r2, #6
 800a36e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a370:	f006 fa34 	bl	80107dc <get_base>

					searchD();
 800a374:	f003 fd24 	bl	800ddc0 <searchD>
					HAL_Delay(2000);
 800a378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a37c:	f7f6 fe4e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <slalom_run+0x300>)
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <slalom_run+0x300>)
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <slalom_run+0x2fc>)
 800a38c:	701a      	strb	r2, [r3, #0]
					searchD();
 800a38e:	f003 fd17 	bl	800ddc0 <searchD>

					goal_x = GOAL_X;
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <slalom_run+0x2fc>)
 800a394:	2209      	movs	r2, #9
 800a396:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a398:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <slalom_run+0x300>)
 800a39a:	2206      	movs	r2, #6
 800a39c:	701a      	strb	r2, [r3, #0]
					break;
 800a39e:	e0c9      	b.n	800a534 <slalom_run+0x474>
 800a3a0:	08012a30 	.word	0x08012a30
 800a3a4:	20000b2c 	.word	0x20000b2c
 800a3a8:	0801267c 	.word	0x0801267c
 800a3ac:	40020000 	.word	0x40020000
 800a3b0:	08012994 	.word	0x08012994
 800a3b4:	20000fa8 	.word	0x20000fa8
 800a3b8:	200012e8 	.word	0x200012e8
 800a3bc:	20000bf1 	.word	0x20000bf1
 800a3c0:	20000b8c 	.word	0x20000b8c
 800a3c4:	08012a48 	.word	0x08012a48
 800a3c8:	08012a60 	.word	0x08012a60
 800a3cc:	2000048c 	.word	0x2000048c
 800a3d0:	20000fbc 	.word	0x20000fbc

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800a3d4:	4858      	ldr	r0, [pc, #352]	; (800a538 <slalom_run+0x478>)
 800a3d6:	f007 f89b 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a3da:	4a58      	ldr	r2, [pc, #352]	; (800a53c <slalom_run+0x47c>)
 800a3dc:	8813      	ldrh	r3, [r2, #0]
 800a3de:	f043 0320 	orr.w	r3, r3, #32
 800a3e2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a3e4:	4a55      	ldr	r2, [pc, #340]	; (800a53c <slalom_run+0x47c>)
 800a3e6:	8813      	ldrh	r3, [r2, #0]
 800a3e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3ec:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a3ee:	4b54      	ldr	r3, [pc, #336]	; (800a540 <slalom_run+0x480>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a3f4:	4b53      	ldr	r3, [pc, #332]	; (800a544 <slalom_run+0x484>)
 800a3f6:	2209      	movs	r2, #9
 800a3f8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3fa:	4b53      	ldr	r3, [pc, #332]	; (800a548 <slalom_run+0x488>)
 800a3fc:	2206      	movs	r2, #6
 800a3fe:	701a      	strb	r2, [r3, #0]

					get_base();
 800a400:	f006 f9ec 	bl	80107dc <get_base>

					HAL_Delay(5000);
 800a404:	f241 3088 	movw	r0, #5000	; 0x1388
 800a408:	f7f6 fe08 	bl	800101c <HAL_Delay>
					searchC();
 800a40c:	f003 fb8c 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a414:	f7f6 fe02 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a418:	4b4b      	ldr	r3, [pc, #300]	; (800a548 <slalom_run+0x488>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	4b4a      	ldr	r3, [pc, #296]	; (800a548 <slalom_run+0x488>)
 800a420:	781a      	ldrb	r2, [r3, #0]
 800a422:	4b48      	ldr	r3, [pc, #288]	; (800a544 <slalom_run+0x484>)
 800a424:	701a      	strb	r2, [r3, #0]
					searchC();
 800a426:	f003 fb7f 	bl	800db28 <searchC>

					goal_x = GOAL_X;
 800a42a:	4b46      	ldr	r3, [pc, #280]	; (800a544 <slalom_run+0x484>)
 800a42c:	2209      	movs	r2, #9
 800a42e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a430:	4b45      	ldr	r3, [pc, #276]	; (800a548 <slalom_run+0x488>)
 800a432:	2206      	movs	r2, #6
 800a434:	701a      	strb	r2, [r3, #0]
					break;
 800a436:	e07d      	b.n	800a534 <slalom_run+0x474>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800a438:	483f      	ldr	r0, [pc, #252]	; (800a538 <slalom_run+0x478>)
 800a43a:	f007 f869 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a43e:	4a3f      	ldr	r2, [pc, #252]	; (800a53c <slalom_run+0x47c>)
 800a440:	8813      	ldrh	r3, [r2, #0]
 800a442:	f043 0320 	orr.w	r3, r3, #32
 800a446:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a448:	4a3c      	ldr	r2, [pc, #240]	; (800a53c <slalom_run+0x47c>)
 800a44a:	8813      	ldrh	r3, [r2, #0]
 800a44c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a450:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a452:	4a3a      	ldr	r2, [pc, #232]	; (800a53c <slalom_run+0x47c>)
 800a454:	8813      	ldrh	r3, [r2, #0]
 800a456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a45a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a45c:	4b38      	ldr	r3, [pc, #224]	; (800a540 <slalom_run+0x480>)
 800a45e:	2200      	movs	r2, #0
 800a460:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a462:	4b3a      	ldr	r3, [pc, #232]	; (800a54c <slalom_run+0x48c>)
 800a464:	f241 3288 	movw	r2, #5000	; 0x1388
 800a468:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a46a:	4b39      	ldr	r3, [pc, #228]	; (800a550 <slalom_run+0x490>)
 800a46c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a470:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a472:	4b34      	ldr	r3, [pc, #208]	; (800a544 <slalom_run+0x484>)
 800a474:	2209      	movs	r2, #9
 800a476:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a478:	4b33      	ldr	r3, [pc, #204]	; (800a548 <slalom_run+0x488>)
 800a47a:	2206      	movs	r2, #6
 800a47c:	701a      	strb	r2, [r3, #0]

					get_base();
 800a47e:	f006 f9ad 	bl	80107dc <get_base>

					HAL_Delay(5000);
 800a482:	f241 3088 	movw	r0, #5000	; 0x1388
 800a486:	f7f6 fdc9 	bl	800101c <HAL_Delay>
					searchD2();
 800a48a:	f003 fd8b 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800a48e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a492:	f7f6 fdc3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a496:	4b2c      	ldr	r3, [pc, #176]	; (800a548 <slalom_run+0x488>)
 800a498:	2200      	movs	r2, #0
 800a49a:	701a      	strb	r2, [r3, #0]
 800a49c:	4b2a      	ldr	r3, [pc, #168]	; (800a548 <slalom_run+0x488>)
 800a49e:	781a      	ldrb	r2, [r3, #0]
 800a4a0:	4b28      	ldr	r3, [pc, #160]	; (800a544 <slalom_run+0x484>)
 800a4a2:	701a      	strb	r2, [r3, #0]
					searchD2();
 800a4a4:	f003 fd7e 	bl	800dfa4 <searchD2>

					goal_x = GOAL_X;
 800a4a8:	4b26      	ldr	r3, [pc, #152]	; (800a544 <slalom_run+0x484>)
 800a4aa:	2209      	movs	r2, #9
 800a4ac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a4ae:	4b26      	ldr	r3, [pc, #152]	; (800a548 <slalom_run+0x488>)
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	701a      	strb	r2, [r3, #0]
					break;
 800a4b4:	e03e      	b.n	800a534 <slalom_run+0x474>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800a4b6:	4820      	ldr	r0, [pc, #128]	; (800a538 <slalom_run+0x478>)
 800a4b8:	f007 f82a 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a4bc:	4a1f      	ldr	r2, [pc, #124]	; (800a53c <slalom_run+0x47c>)
 800a4be:	8813      	ldrh	r3, [r2, #0]
 800a4c0:	f043 0320 	orr.w	r3, r3, #32
 800a4c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a4c6:	4a1d      	ldr	r2, [pc, #116]	; (800a53c <slalom_run+0x47c>)
 800a4c8:	8813      	ldrh	r3, [r2, #0]
 800a4ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a4d0:	4a1a      	ldr	r2, [pc, #104]	; (800a53c <slalom_run+0x47c>)
 800a4d2:	8813      	ldrh	r3, [r2, #0]
 800a4d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4d8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a4da:	4b19      	ldr	r3, [pc, #100]	; (800a540 <slalom_run+0x480>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a4e0:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <slalom_run+0x48c>)
 800a4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a4e8:	4b19      	ldr	r3, [pc, #100]	; (800a550 <slalom_run+0x490>)
 800a4ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a4ee:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a4f0:	4b14      	ldr	r3, [pc, #80]	; (800a544 <slalom_run+0x484>)
 800a4f2:	2209      	movs	r2, #9
 800a4f4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a4f6:	4b14      	ldr	r3, [pc, #80]	; (800a548 <slalom_run+0x488>)
 800a4f8:	2206      	movs	r2, #6
 800a4fa:	701a      	strb	r2, [r3, #0]

					get_base();
 800a4fc:	f006 f96e 	bl	80107dc <get_base>

					HAL_Delay(5000);
 800a500:	f241 3088 	movw	r0, #5000	; 0x1388
 800a504:	f7f6 fd8a 	bl	800101c <HAL_Delay>
					searchD2();
 800a508:	f003 fd4c 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800a50c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a510:	f7f6 fd84 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a514:	4b0c      	ldr	r3, [pc, #48]	; (800a548 <slalom_run+0x488>)
 800a516:	2200      	movs	r2, #0
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	4b0b      	ldr	r3, [pc, #44]	; (800a548 <slalom_run+0x488>)
 800a51c:	781a      	ldrb	r2, [r3, #0]
 800a51e:	4b09      	ldr	r3, [pc, #36]	; (800a544 <slalom_run+0x484>)
 800a520:	701a      	strb	r2, [r3, #0]
					searchD2();
 800a522:	f003 fd3f 	bl	800dfa4 <searchD2>

					goal_x = GOAL_X;
 800a526:	4b07      	ldr	r3, [pc, #28]	; (800a544 <slalom_run+0x484>)
 800a528:	2209      	movs	r2, #9
 800a52a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <slalom_run+0x488>)
 800a52e:	2206      	movs	r2, #6
 800a530:	701a      	strb	r2, [r3, #0]
					break;
 800a532:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a534:	e5cd      	b.n	800a0d2 <slalom_run+0x12>
 800a536:	bf00      	nop
 800a538:	08012a7c 	.word	0x08012a7c
 800a53c:	20000fa8 	.word	0x20000fa8
 800a540:	200012e8 	.word	0x200012e8
 800a544:	20000bf1 	.word	0x20000bf1
 800a548:	20000b8c 	.word	0x20000b8c
 800a54c:	2000048c 	.word	0x2000048c
 800a550:	20000fbc 	.word	0x20000fbc

0800a554 <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0

	int mode = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	487a      	ldr	r0, [pc, #488]	; (800a74c <sample_course_run+0x1f8>)
 800a562:	f006 ff61 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	b2d8      	uxtb	r0, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	b2d9      	uxtb	r1, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	b2db      	uxtb	r3, r3
 800a584:	461a      	mov	r2, r3
 800a586:	f006 f981 	bl	801088c <led_write>
		  if(dist_r >= 20){
 800a58a:	4b71      	ldr	r3, [pc, #452]	; (800a750 <sample_course_run+0x1fc>)
 800a58c:	edd3 7a00 	vldr	s15, [r3]
 800a590:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a594:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59c:	db0f      	blt.n	800a5be <sample_course_run+0x6a>
			  mode++;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a5a4:	4b6a      	ldr	r3, [pc, #424]	; (800a750 <sample_course_run+0x1fc>)
 800a5a6:	f04f 0200 	mov.w	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	dd01      	ble.n	800a5b6 <sample_course_run+0x62>
				  mode = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	4866      	ldr	r0, [pc, #408]	; (800a754 <sample_course_run+0x200>)
 800a5ba:	f006 ff35 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800a5be:	4b64      	ldr	r3, [pc, #400]	; (800a750 <sample_course_run+0x1fc>)
 800a5c0:	edd3 7a00 	vldr	s15, [r3]
 800a5c4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a5c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d0:	d80f      	bhi.n	800a5f2 <sample_course_run+0x9e>
			  mode--;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a5d8:	4b5d      	ldr	r3, [pc, #372]	; (800a750 <sample_course_run+0x1fc>)
 800a5da:	f04f 0200 	mov.w	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	da01      	bge.n	800a5ea <sample_course_run+0x96>
				  mode = 7;
 800a5e6:	2307      	movs	r3, #7
 800a5e8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	4859      	ldr	r0, [pc, #356]	; (800a754 <sample_course_run+0x200>)
 800a5ee:	f006 ff1b 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a5f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5f6:	4858      	ldr	r0, [pc, #352]	; (800a758 <sample_course_run+0x204>)
 800a5f8:	f7f7 fe6c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1b1      	bne.n	800a566 <sample_course_run+0x12>
			  HAL_Delay(50);
 800a602:	2032      	movs	r0, #50	; 0x32
 800a604:	f7f6 fd0a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a608:	bf00      	nop
 800a60a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a60e:	4852      	ldr	r0, [pc, #328]	; (800a758 <sample_course_run+0x204>)
 800a610:	f7f7 fe60 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0f7      	beq.n	800a60a <sample_course_run+0xb6>
			  drive_ready();
 800a61a:	f7fa fb2b 	bl	8004c74 <drive_ready>

			  switch(mode){
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b07      	cmp	r3, #7
 800a622:	d8a0      	bhi.n	800a566 <sample_course_run+0x12>
 800a624:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <sample_course_run+0xd8>)
 800a626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62a:	bf00      	nop
 800a62c:	0800a64d 	.word	0x0800a64d
 800a630:	0800a653 	.word	0x0800a653
 800a634:	0800a675 	.word	0x0800a675
 800a638:	0800a697 	.word	0x0800a697
 800a63c:	0800a567 	.word	0x0800a567
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a6f9 	.word	0x0800a6f9
 800a648:	0800a567 	.word	0x0800a567
				case 0:
					get_base();
 800a64c:	f006 f8c6 	bl	80107dc <get_base>
					break;
 800a650:	e07a      	b.n	800a748 <sample_course_run+0x1f4>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a652:	f7fa ff2b 	bl	80054ac <half_sectionA>
					half_sectionD();
 800a656:	f7fa ff43 	bl	80054e0 <half_sectionD>
					rotate_R90();
 800a65a:	f7fb f879 	bl	8005750 <rotate_R90>
					half_sectionA();
 800a65e:	f7fa ff25 	bl	80054ac <half_sectionA>
					half_sectionD();
 800a662:	f7fa ff3d 	bl	80054e0 <half_sectionD>
					rotate_R90();
 800a666:	f7fb f873 	bl	8005750 <rotate_R90>
					half_sectionA();
 800a66a:	f7fa ff1f 	bl	80054ac <half_sectionA>
					half_sectionD();
 800a66e:	f7fa ff37 	bl	80054e0 <half_sectionD>
					break;
 800a672:	e069      	b.n	800a748 <sample_course_run+0x1f4>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a674:	f7fa ff1a 	bl	80054ac <half_sectionA>
					half_sectionD();
 800a678:	f7fa ff32 	bl	80054e0 <half_sectionD>
					rotate_L90();
 800a67c:	f7fb f944 	bl	8005908 <rotate_L90>
					half_sectionA();
 800a680:	f7fa ff14 	bl	80054ac <half_sectionA>
					half_sectionD();
 800a684:	f7fa ff2c 	bl	80054e0 <half_sectionD>
					rotate_L90();
 800a688:	f7fb f93e 	bl	8005908 <rotate_L90>
					half_sectionA();
 800a68c:	f7fa ff0e 	bl	80054ac <half_sectionA>
					half_sectionD();
 800a690:	f7fa ff26 	bl	80054e0 <half_sectionD>
					break;
 800a694:	e058      	b.n	800a748 <sample_course_run+0x1f4>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800a696:	f7fa ff09 	bl	80054ac <half_sectionA>
					slalom_R90();
 800a69a:	f7fb fae9 	bl	8005c70 <slalom_R90>
					slalom_R90();
 800a69e:	f7fb fae7 	bl	8005c70 <slalom_R90>
					half_sectionD();
 800a6a2:	f7fa ff1d 	bl	80054e0 <half_sectionD>
					break;
 800a6a6:	e04f      	b.n	800a748 <sample_course_run+0x1f4>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a6a8:	482c      	ldr	r0, [pc, #176]	; (800a75c <sample_course_run+0x208>)
 800a6aa:	f006 ff31 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 800a6ae:	4a2c      	ldr	r2, [pc, #176]	; (800a760 <sample_course_run+0x20c>)
 800a6b0:	8813      	ldrh	r3, [r2, #0]
 800a6b2:	f36f 1345 	bfc	r3, #5, #1
 800a6b6:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800a6b8:	4b2a      	ldr	r3, [pc, #168]	; (800a764 <sample_course_run+0x210>)
 800a6ba:	2209      	movs	r2, #9
 800a6bc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6be:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <sample_course_run+0x214>)
 800a6c0:	2206      	movs	r2, #6
 800a6c2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a6c4:	f006 f88a 	bl	80107dc <get_base>

					searchC();
 800a6c8:	f003 fa2e 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a6cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6d0:	f7f6 fca4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6d4:	4b24      	ldr	r3, [pc, #144]	; (800a768 <sample_course_run+0x214>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	4b23      	ldr	r3, [pc, #140]	; (800a768 <sample_course_run+0x214>)
 800a6dc:	781a      	ldrb	r2, [r3, #0]
 800a6de:	4b21      	ldr	r3, [pc, #132]	; (800a764 <sample_course_run+0x210>)
 800a6e0:	701a      	strb	r2, [r3, #0]
					searchE();
 800a6e2:	f003 fd47 	bl	800e174 <searchE>

					searchC();
 800a6e6:	f003 fa1f 	bl	800db28 <searchC>
					goal_x = GOAL_X;
 800a6ea:	4b1e      	ldr	r3, [pc, #120]	; (800a764 <sample_course_run+0x210>)
 800a6ec:	2209      	movs	r2, #9
 800a6ee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6f0:	4b1d      	ldr	r3, [pc, #116]	; (800a768 <sample_course_run+0x214>)
 800a6f2:	2206      	movs	r2, #6
 800a6f4:	701a      	strb	r2, [r3, #0]

					break;
 800a6f6:	e027      	b.n	800a748 <sample_course_run+0x1f4>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a6f8:	4818      	ldr	r0, [pc, #96]	; (800a75c <sample_course_run+0x208>)
 800a6fa:	f006 ff09 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 800a6fe:	4a18      	ldr	r2, [pc, #96]	; (800a760 <sample_course_run+0x20c>)
 800a700:	8813      	ldrh	r3, [r2, #0]
 800a702:	f36f 1345 	bfc	r3, #5, #1
 800a706:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 800a708:	4b16      	ldr	r3, [pc, #88]	; (800a764 <sample_course_run+0x210>)
 800a70a:	2207      	movs	r2, #7
 800a70c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a70e:	4b16      	ldr	r3, [pc, #88]	; (800a768 <sample_course_run+0x214>)
 800a710:	2207      	movs	r2, #7
 800a712:	701a      	strb	r2, [r3, #0]

					get_base();
 800a714:	f006 f862 	bl	80107dc <get_base>

					searchC();
 800a718:	f003 fa06 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a71c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a720:	f7f6 fc7c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a724:	4b10      	ldr	r3, [pc, #64]	; (800a768 <sample_course_run+0x214>)
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <sample_course_run+0x214>)
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <sample_course_run+0x210>)
 800a730:	701a      	strb	r2, [r3, #0]
					searchE();
 800a732:	f003 fd1f 	bl	800e174 <searchE>

					searchC();
 800a736:	f003 f9f7 	bl	800db28 <searchC>
					goal_x = 7;
 800a73a:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <sample_course_run+0x210>)
 800a73c:	2207      	movs	r2, #7
 800a73e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a740:	4b09      	ldr	r3, [pc, #36]	; (800a768 <sample_course_run+0x214>)
 800a742:	2207      	movs	r2, #7
 800a744:	701a      	strb	r2, [r3, #0]

					break;
 800a746:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a748:	e70d      	b.n	800a566 <sample_course_run+0x12>
 800a74a:	bf00      	nop
 800a74c:	08012a98 	.word	0x08012a98
 800a750:	20000b2c 	.word	0x20000b2c
 800a754:	0801267c 	.word	0x0801267c
 800a758:	40020000 	.word	0x40020000
 800a75c:	08012ab8 	.word	0x08012ab8
 800a760:	20000fa8 	.word	0x20000fa8
 800a764:	20000bf1 	.word	0x20000bf1
 800a768:	20000b8c 	.word	0x20000b8c

0800a76c <perfect_run>:
//perfect_run
// 本番用走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0

	int mode = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	488d      	ldr	r0, [pc, #564]	; (800a9b0 <perfect_run+0x244>)
 800a77a:	f006 fe55 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	b2d8      	uxtb	r0, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	b2d9      	uxtb	r1, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f003 0304 	and.w	r3, r3, #4
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	461a      	mov	r2, r3
 800a79e:	f006 f875 	bl	801088c <led_write>
		  if(dist_r >= 20){
 800a7a2:	4b84      	ldr	r3, [pc, #528]	; (800a9b4 <perfect_run+0x248>)
 800a7a4:	edd3 7a00 	vldr	s15, [r3]
 800a7a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a7ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b4:	db0f      	blt.n	800a7d6 <perfect_run+0x6a>
			  mode++;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a7bc:	4b7d      	ldr	r3, [pc, #500]	; (800a9b4 <perfect_run+0x248>)
 800a7be:	f04f 0200 	mov.w	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b07      	cmp	r3, #7
 800a7c8:	dd01      	ble.n	800a7ce <perfect_run+0x62>
				  mode = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	4879      	ldr	r0, [pc, #484]	; (800a9b8 <perfect_run+0x24c>)
 800a7d2:	f006 fe29 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800a7d6:	4b77      	ldr	r3, [pc, #476]	; (800a9b4 <perfect_run+0x248>)
 800a7d8:	edd3 7a00 	vldr	s15, [r3]
 800a7dc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a7e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e8:	d80f      	bhi.n	800a80a <perfect_run+0x9e>
			  mode--;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a7f0:	4b70      	ldr	r3, [pc, #448]	; (800a9b4 <perfect_run+0x248>)
 800a7f2:	f04f 0200 	mov.w	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	da01      	bge.n	800a802 <perfect_run+0x96>
				  mode = 7;
 800a7fe:	2307      	movs	r3, #7
 800a800:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	486c      	ldr	r0, [pc, #432]	; (800a9b8 <perfect_run+0x24c>)
 800a806:	f006 fe0f 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a80a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a80e:	486b      	ldr	r0, [pc, #428]	; (800a9bc <perfect_run+0x250>)
 800a810:	f7f7 fd60 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1b1      	bne.n	800a77e <perfect_run+0x12>
			  HAL_Delay(50);
 800a81a:	2032      	movs	r0, #50	; 0x32
 800a81c:	f7f6 fbfe 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a820:	bf00      	nop
 800a822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a826:	4865      	ldr	r0, [pc, #404]	; (800a9bc <perfect_run+0x250>)
 800a828:	f7f7 fd54 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0f7      	beq.n	800a822 <perfect_run+0xb6>
			  switch(mode){
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b07      	cmp	r3, #7
 800a836:	d8a2      	bhi.n	800a77e <perfect_run+0x12>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <perfect_run+0xd4>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a77f 	.word	0x0800a77f
 800a844:	0800a861 	.word	0x0800a861
 800a848:	0800a8b3 	.word	0x0800a8b3
 800a84c:	0800a905 	.word	0x0800a905
 800a850:	0800a957 	.word	0x0800a957
 800a854:	0800a77f 	.word	0x0800a77f
 800a858:	0800a77f 	.word	0x0800a77f
 800a85c:	0800a9a9 	.word	0x0800a9a9
				case 0:
					break;

				case 1:
					//----a一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800a860:	4857      	ldr	r0, [pc, #348]	; (800a9c0 <perfect_run+0x254>)
 800a862:	f006 fe55 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 800a866:	4a57      	ldr	r2, [pc, #348]	; (800a9c4 <perfect_run+0x258>)
 800a868:	8813      	ldrh	r3, [r2, #0]
 800a86a:	f36f 1345 	bfc	r3, #5, #1
 800a86e:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a870:	4b55      	ldr	r3, [pc, #340]	; (800a9c8 <perfect_run+0x25c>)
 800a872:	2200      	movs	r2, #0
 800a874:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800a876:	4b55      	ldr	r3, [pc, #340]	; (800a9cc <perfect_run+0x260>)
 800a878:	2207      	movs	r2, #7
 800a87a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a87c:	4b54      	ldr	r3, [pc, #336]	; (800a9d0 <perfect_run+0x264>)
 800a87e:	2207      	movs	r2, #7
 800a880:	701a      	strb	r2, [r3, #0]

					get_base();
 800a882:	f005 ffab 	bl	80107dc <get_base>

					searchB();
 800a886:	f003 f8c5 	bl	800da14 <searchB>
					HAL_Delay(2000);
 800a88a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a88e:	f7f6 fbc5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a892:	4b4f      	ldr	r3, [pc, #316]	; (800a9d0 <perfect_run+0x264>)
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	4b4d      	ldr	r3, [pc, #308]	; (800a9d0 <perfect_run+0x264>)
 800a89a:	781a      	ldrb	r2, [r3, #0]
 800a89c:	4b4b      	ldr	r3, [pc, #300]	; (800a9cc <perfect_run+0x260>)
 800a89e:	701a      	strb	r2, [r3, #0]
					searchB();
 800a8a0:	f003 f8b8 	bl	800da14 <searchB>

					goal_x = 7;
 800a8a4:	4b49      	ldr	r3, [pc, #292]	; (800a9cc <perfect_run+0x260>)
 800a8a6:	2207      	movs	r2, #7
 800a8a8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a8aa:	4b49      	ldr	r3, [pc, #292]	; (800a9d0 <perfect_run+0x264>)
 800a8ac:	2207      	movs	r2, #7
 800a8ae:	701a      	strb	r2, [r3, #0]

					break;
 800a8b0:	e07d      	b.n	800a9ae <perfect_run+0x242>

				case 2:
					//----a二次探索走行----
					printf("Second Run. (Continuous)\n");
 800a8b2:	4848      	ldr	r0, [pc, #288]	; (800a9d4 <perfect_run+0x268>)
 800a8b4:	f006 fe2c 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a8b8:	4a42      	ldr	r2, [pc, #264]	; (800a9c4 <perfect_run+0x258>)
 800a8ba:	8813      	ldrh	r3, [r2, #0]
 800a8bc:	f043 0320 	orr.w	r3, r3, #32
 800a8c0:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a8c2:	4b41      	ldr	r3, [pc, #260]	; (800a9c8 <perfect_run+0x25c>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800a8c8:	4b40      	ldr	r3, [pc, #256]	; (800a9cc <perfect_run+0x260>)
 800a8ca:	2207      	movs	r2, #7
 800a8cc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a8ce:	4b40      	ldr	r3, [pc, #256]	; (800a9d0 <perfect_run+0x264>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a8d4:	f005 ff82 	bl	80107dc <get_base>

					searchB();
 800a8d8:	f003 f89c 	bl	800da14 <searchB>
					HAL_Delay(2000);
 800a8dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8e0:	f7f6 fb9c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8e4:	4b3a      	ldr	r3, [pc, #232]	; (800a9d0 <perfect_run+0x264>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	4b39      	ldr	r3, [pc, #228]	; (800a9d0 <perfect_run+0x264>)
 800a8ec:	781a      	ldrb	r2, [r3, #0]
 800a8ee:	4b37      	ldr	r3, [pc, #220]	; (800a9cc <perfect_run+0x260>)
 800a8f0:	701a      	strb	r2, [r3, #0]
					searchB();
 800a8f2:	f003 f88f 	bl	800da14 <searchB>

					goal_x = 7;
 800a8f6:	4b35      	ldr	r3, [pc, #212]	; (800a9cc <perfect_run+0x260>)
 800a8f8:	2207      	movs	r2, #7
 800a8fa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a8fc:	4b34      	ldr	r3, [pc, #208]	; (800a9d0 <perfect_run+0x264>)
 800a8fe:	2207      	movs	r2, #7
 800a900:	701a      	strb	r2, [r3, #0]

					break;
 800a902:	e054      	b.n	800a9ae <perfect_run+0x242>

				case 3:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a904:	4834      	ldr	r0, [pc, #208]	; (800a9d8 <perfect_run+0x26c>)
 800a906:	f006 fe03 	bl	8011510 <puts>

					MF.FLAG.SCND = 0;
 800a90a:	4a2e      	ldr	r2, [pc, #184]	; (800a9c4 <perfect_run+0x258>)
 800a90c:	8813      	ldrh	r3, [r2, #0]
 800a90e:	f36f 1345 	bfc	r3, #5, #1
 800a912:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a914:	4b2c      	ldr	r3, [pc, #176]	; (800a9c8 <perfect_run+0x25c>)
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800a91a:	4b2c      	ldr	r3, [pc, #176]	; (800a9cc <perfect_run+0x260>)
 800a91c:	2207      	movs	r2, #7
 800a91e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a920:	4b2b      	ldr	r3, [pc, #172]	; (800a9d0 <perfect_run+0x264>)
 800a922:	2207      	movs	r2, #7
 800a924:	701a      	strb	r2, [r3, #0]

					get_base();
 800a926:	f005 ff59 	bl	80107dc <get_base>

					searchC();
 800a92a:	f003 f8fd 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a92e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a932:	f7f6 fb73 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a936:	4b26      	ldr	r3, [pc, #152]	; (800a9d0 <perfect_run+0x264>)
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <perfect_run+0x264>)
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	4b22      	ldr	r3, [pc, #136]	; (800a9cc <perfect_run+0x260>)
 800a942:	701a      	strb	r2, [r3, #0]
					searchC();
 800a944:	f003 f8f0 	bl	800db28 <searchC>

					goal_x = 7;
 800a948:	4b20      	ldr	r3, [pc, #128]	; (800a9cc <perfect_run+0x260>)
 800a94a:	2207      	movs	r2, #7
 800a94c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a94e:	4b20      	ldr	r3, [pc, #128]	; (800a9d0 <perfect_run+0x264>)
 800a950:	2207      	movs	r2, #7
 800a952:	701a      	strb	r2, [r3, #0]

					break;
 800a954:	e02b      	b.n	800a9ae <perfect_run+0x242>

				case 4:
					//---a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800a956:	4821      	ldr	r0, [pc, #132]	; (800a9dc <perfect_run+0x270>)
 800a958:	f006 fdda 	bl	8011510 <puts>

					MF.FLAG.SCND = 1;
 800a95c:	4a19      	ldr	r2, [pc, #100]	; (800a9c4 <perfect_run+0x258>)
 800a95e:	8813      	ldrh	r3, [r2, #0]
 800a960:	f043 0320 	orr.w	r3, r3, #32
 800a964:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800a966:	4b18      	ldr	r3, [pc, #96]	; (800a9c8 <perfect_run+0x25c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800a96c:	4b17      	ldr	r3, [pc, #92]	; (800a9cc <perfect_run+0x260>)
 800a96e:	2207      	movs	r2, #7
 800a970:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a972:	4b17      	ldr	r3, [pc, #92]	; (800a9d0 <perfect_run+0x264>)
 800a974:	2207      	movs	r2, #7
 800a976:	701a      	strb	r2, [r3, #0]

					get_base();
 800a978:	f005 ff30 	bl	80107dc <get_base>

					searchC();
 800a97c:	f003 f8d4 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800a980:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a984:	f7f6 fb4a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a988:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <perfect_run+0x264>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
 800a98e:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <perfect_run+0x264>)
 800a990:	781a      	ldrb	r2, [r3, #0]
 800a992:	4b0e      	ldr	r3, [pc, #56]	; (800a9cc <perfect_run+0x260>)
 800a994:	701a      	strb	r2, [r3, #0]
					searchC();
 800a996:	f003 f8c7 	bl	800db28 <searchC>

					goal_x = 7;
 800a99a:	4b0c      	ldr	r3, [pc, #48]	; (800a9cc <perfect_run+0x260>)
 800a99c:	2207      	movs	r2, #7
 800a99e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <perfect_run+0x264>)
 800a9a2:	2207      	movs	r2, #7
 800a9a4:	701a      	strb	r2, [r3, #0]

					break;
 800a9a6:	e002      	b.n	800a9ae <perfect_run+0x242>
					break;
				case 7:
/*			  		  for(int i=0; i<m_select; i++){
			  			  buzzer(mario_select[i][0], mario_select[i][1]);
			  		  }
*/					perfect_slalom();
 800a9a8:	f000 f81a 	bl	800a9e0 <perfect_slalom>
					break;
 800a9ac:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a9ae:	e6e6      	b.n	800a77e <perfect_run+0x12>
 800a9b0:	08012ad4 	.word	0x08012ad4
 800a9b4:	20000b2c 	.word	0x20000b2c
 800a9b8:	0801267c 	.word	0x0801267c
 800a9bc:	40020000 	.word	0x40020000
 800a9c0:	080129fc 	.word	0x080129fc
 800a9c4:	20000fa8 	.word	0x20000fa8
 800a9c8:	200012e8 	.word	0x200012e8
 800a9cc:	20000bf1 	.word	0x20000bf1
 800a9d0:	20000b8c 	.word	0x20000b8c
 800a9d4:	08012a14 	.word	0x08012a14
 800a9d8:	08012994 	.word	0x08012994
 800a9dc:	08012a48 	.word	0x08012a48

0800a9e0 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800a9ea:	6879      	ldr	r1, [r7, #4]
 800a9ec:	48a6      	ldr	r0, [pc, #664]	; (800ac88 <perfect_slalom+0x2a8>)
 800a9ee:	f006 fd1b 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	b2d8      	uxtb	r0, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f003 0302 	and.w	r3, r3, #2
 800aa04:	b2d9      	uxtb	r1, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	461a      	mov	r2, r3
 800aa12:	f005 ff3b 	bl	801088c <led_write>
		  if(dist_r >= 20){
 800aa16:	4b9d      	ldr	r3, [pc, #628]	; (800ac8c <perfect_slalom+0x2ac>)
 800aa18:	edd3 7a00 	vldr	s15, [r3]
 800aa1c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aa20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa28:	db0f      	blt.n	800aa4a <perfect_slalom+0x6a>
			  mode++;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aa30:	4b96      	ldr	r3, [pc, #600]	; (800ac8c <perfect_slalom+0x2ac>)
 800aa32:	f04f 0200 	mov.w	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b07      	cmp	r3, #7
 800aa3c:	dd01      	ble.n	800aa42 <perfect_slalom+0x62>
				  mode = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	4892      	ldr	r0, [pc, #584]	; (800ac90 <perfect_slalom+0x2b0>)
 800aa46:	f006 fcef 	bl	8011428 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 800aa4a:	4b90      	ldr	r3, [pc, #576]	; (800ac8c <perfect_slalom+0x2ac>)
 800aa4c:	edd3 7a00 	vldr	s15, [r3]
 800aa50:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800aa54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5c:	d80f      	bhi.n	800aa7e <perfect_slalom+0x9e>
			  mode--;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aa64:	4b89      	ldr	r3, [pc, #548]	; (800ac8c <perfect_slalom+0x2ac>)
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	da01      	bge.n	800aa76 <perfect_slalom+0x96>
				  mode = 7;
 800aa72:	2307      	movs	r3, #7
 800aa74:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	4885      	ldr	r0, [pc, #532]	; (800ac90 <perfect_slalom+0x2b0>)
 800aa7a:	f006 fcd5 	bl	8011428 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800aa7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa82:	4884      	ldr	r0, [pc, #528]	; (800ac94 <perfect_slalom+0x2b4>)
 800aa84:	f7f7 fc26 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1b1      	bne.n	800a9f2 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800aa8e:	2032      	movs	r0, #50	; 0x32
 800aa90:	f7f6 fac4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800aa94:	bf00      	nop
 800aa96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa9a:	487e      	ldr	r0, [pc, #504]	; (800ac94 <perfect_slalom+0x2b4>)
 800aa9c:	f7f7 fc1a 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d0f7      	beq.n	800aa96 <perfect_slalom+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800aaa6:	f7fa f8e5 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(1);
	  		  }
*/
			  switch(mode){
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b07      	cmp	r3, #7
 800aaae:	d8a0      	bhi.n	800a9f2 <perfect_slalom+0x12>
 800aab0:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <perfect_slalom+0xd8>)
 800aab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab6:	bf00      	nop
 800aab8:	0800a9f3 	.word	0x0800a9f3
 800aabc:	0800aad9 	.word	0x0800aad9
 800aac0:	0800ab35 	.word	0x0800ab35
 800aac4:	0800abab 	.word	0x0800abab
 800aac8:	0800ac11 	.word	0x0800ac11
 800aacc:	0800acbd 	.word	0x0800acbd
 800aad0:	0800ad33 	.word	0x0800ad33
 800aad4:	0800ada9 	.word	0x0800ada9
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800aad8:	486f      	ldr	r0, [pc, #444]	; (800ac98 <perfect_slalom+0x2b8>)
 800aada:	f006 fd19 	bl	8011510 <puts>
					MF.FLAG.SCND = 0;
 800aade:	4a6f      	ldr	r2, [pc, #444]	; (800ac9c <perfect_slalom+0x2bc>)
 800aae0:	8813      	ldrh	r3, [r2, #0]
 800aae2:	f36f 1345 	bfc	r3, #5, #1
 800aae6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800aae8:	4a6c      	ldr	r2, [pc, #432]	; (800ac9c <perfect_slalom+0x2bc>)
 800aaea:	8813      	ldrh	r3, [r2, #0]
 800aaec:	f36f 2349 	bfc	r3, #9, #1
 800aaf0:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800aaf2:	4b6b      	ldr	r3, [pc, #428]	; (800aca0 <perfect_slalom+0x2c0>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800aaf8:	4b6a      	ldr	r3, [pc, #424]	; (800aca4 <perfect_slalom+0x2c4>)
 800aafa:	2207      	movs	r2, #7
 800aafc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aafe:	4b6a      	ldr	r3, [pc, #424]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab00:	2207      	movs	r2, #7
 800ab02:	701a      	strb	r2, [r3, #0]

					get_base();
 800ab04:	f005 fe6a 	bl	80107dc <get_base>

					searchC();
 800ab08:	f003 f80e 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800ab0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ab10:	f7f6 fa84 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ab14:	4b64      	ldr	r3, [pc, #400]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	4b63      	ldr	r3, [pc, #396]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab1c:	781a      	ldrb	r2, [r3, #0]
 800ab1e:	4b61      	ldr	r3, [pc, #388]	; (800aca4 <perfect_slalom+0x2c4>)
 800ab20:	701a      	strb	r2, [r3, #0]
					searchC();
 800ab22:	f003 f801 	bl	800db28 <searchC>

					goal_x = 7;
 800ab26:	4b5f      	ldr	r3, [pc, #380]	; (800aca4 <perfect_slalom+0x2c4>)
 800ab28:	2207      	movs	r2, #7
 800ab2a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ab2c:	4b5e      	ldr	r3, [pc, #376]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab2e:	2207      	movs	r2, #7
 800ab30:	701a      	strb	r2, [r3, #0]
					break;
 800ab32:	e13c      	b.n	800adae <perfect_slalom+0x3ce>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800ab34:	485d      	ldr	r0, [pc, #372]	; (800acac <perfect_slalom+0x2cc>)
 800ab36:	f006 fceb 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800ab3a:	4a58      	ldr	r2, [pc, #352]	; (800ac9c <perfect_slalom+0x2bc>)
 800ab3c:	8813      	ldrh	r3, [r2, #0]
 800ab3e:	f043 0320 	orr.w	r3, r3, #32
 800ab42:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ab44:	4a55      	ldr	r2, [pc, #340]	; (800ac9c <perfect_slalom+0x2bc>)
 800ab46:	8813      	ldrh	r3, [r2, #0]
 800ab48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab4c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ab4e:	4a53      	ldr	r2, [pc, #332]	; (800ac9c <perfect_slalom+0x2bc>)
 800ab50:	8813      	ldrh	r3, [r2, #0]
 800ab52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab56:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ab58:	4b51      	ldr	r3, [pc, #324]	; (800aca0 <perfect_slalom+0x2c0>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800ab5e:	4b54      	ldr	r3, [pc, #336]	; (800acb0 <perfect_slalom+0x2d0>)
 800ab60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab64:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ab66:	4b53      	ldr	r3, [pc, #332]	; (800acb4 <perfect_slalom+0x2d4>)
 800ab68:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ab6c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800ab6e:	4b4d      	ldr	r3, [pc, #308]	; (800aca4 <perfect_slalom+0x2c4>)
 800ab70:	2207      	movs	r2, #7
 800ab72:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ab74:	4b4c      	ldr	r3, [pc, #304]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab76:	2207      	movs	r2, #7
 800ab78:	701a      	strb	r2, [r3, #0]

					get_base();
 800ab7a:	f005 fe2f 	bl	80107dc <get_base>

					searchD();
 800ab7e:	f003 f91f 	bl	800ddc0 <searchD>
					HAL_Delay(2000);
 800ab82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ab86:	f7f6 fa49 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ab8a:	4b47      	ldr	r3, [pc, #284]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	701a      	strb	r2, [r3, #0]
 800ab90:	4b45      	ldr	r3, [pc, #276]	; (800aca8 <perfect_slalom+0x2c8>)
 800ab92:	781a      	ldrb	r2, [r3, #0]
 800ab94:	4b43      	ldr	r3, [pc, #268]	; (800aca4 <perfect_slalom+0x2c4>)
 800ab96:	701a      	strb	r2, [r3, #0]
					searchD();
 800ab98:	f003 f912 	bl	800ddc0 <searchD>

					goal_x = 7;
 800ab9c:	4b41      	ldr	r3, [pc, #260]	; (800aca4 <perfect_slalom+0x2c4>)
 800ab9e:	2207      	movs	r2, #7
 800aba0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aba2:	4b41      	ldr	r3, [pc, #260]	; (800aca8 <perfect_slalom+0x2c8>)
 800aba4:	2207      	movs	r2, #7
 800aba6:	701a      	strb	r2, [r3, #0]
					break;
 800aba8:	e101      	b.n	800adae <perfect_slalom+0x3ce>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800abaa:	4843      	ldr	r0, [pc, #268]	; (800acb8 <perfect_slalom+0x2d8>)
 800abac:	f006 fcb0 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800abb0:	4a3a      	ldr	r2, [pc, #232]	; (800ac9c <perfect_slalom+0x2bc>)
 800abb2:	8813      	ldrh	r3, [r2, #0]
 800abb4:	f043 0320 	orr.w	r3, r3, #32
 800abb8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800abba:	4a38      	ldr	r2, [pc, #224]	; (800ac9c <perfect_slalom+0x2bc>)
 800abbc:	8813      	ldrh	r3, [r2, #0]
 800abbe:	f36f 2349 	bfc	r3, #9, #1
 800abc2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800abc4:	4a35      	ldr	r2, [pc, #212]	; (800ac9c <perfect_slalom+0x2bc>)
 800abc6:	8813      	ldrh	r3, [r2, #0]
 800abc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abcc:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800abce:	4b34      	ldr	r3, [pc, #208]	; (800aca0 <perfect_slalom+0x2c0>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800abd4:	4b33      	ldr	r3, [pc, #204]	; (800aca4 <perfect_slalom+0x2c4>)
 800abd6:	2207      	movs	r2, #7
 800abd8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800abda:	4b33      	ldr	r3, [pc, #204]	; (800aca8 <perfect_slalom+0x2c8>)
 800abdc:	2207      	movs	r2, #7
 800abde:	701a      	strb	r2, [r3, #0]

					get_base();
 800abe0:	f005 fdfc 	bl	80107dc <get_base>

					searchC2();
 800abe4:	f003 f846 	bl	800dc74 <searchC2>
					HAL_Delay(2000);
 800abe8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800abec:	f7f6 fa16 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800abf0:	4b2d      	ldr	r3, [pc, #180]	; (800aca8 <perfect_slalom+0x2c8>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	4b2c      	ldr	r3, [pc, #176]	; (800aca8 <perfect_slalom+0x2c8>)
 800abf8:	781a      	ldrb	r2, [r3, #0]
 800abfa:	4b2a      	ldr	r3, [pc, #168]	; (800aca4 <perfect_slalom+0x2c4>)
 800abfc:	701a      	strb	r2, [r3, #0]
					searchC2();
 800abfe:	f003 f839 	bl	800dc74 <searchC2>

					goal_x = 7;
 800ac02:	4b28      	ldr	r3, [pc, #160]	; (800aca4 <perfect_slalom+0x2c4>)
 800ac04:	2207      	movs	r2, #7
 800ac06:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ac08:	4b27      	ldr	r3, [pc, #156]	; (800aca8 <perfect_slalom+0x2c8>)
 800ac0a:	2207      	movs	r2, #7
 800ac0c:	701a      	strb	r2, [r3, #0]
					break;
 800ac0e:	e0ce      	b.n	800adae <perfect_slalom+0x3ce>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ac10:	4829      	ldr	r0, [pc, #164]	; (800acb8 <perfect_slalom+0x2d8>)
 800ac12:	f006 fc7d 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800ac16:	4a21      	ldr	r2, [pc, #132]	; (800ac9c <perfect_slalom+0x2bc>)
 800ac18:	8813      	ldrh	r3, [r2, #0]
 800ac1a:	f043 0320 	orr.w	r3, r3, #32
 800ac1e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac20:	4a1e      	ldr	r2, [pc, #120]	; (800ac9c <perfect_slalom+0x2bc>)
 800ac22:	8813      	ldrh	r3, [r2, #0]
 800ac24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac28:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ac2a:	4a1c      	ldr	r2, [pc, #112]	; (800ac9c <perfect_slalom+0x2bc>)
 800ac2c:	8813      	ldrh	r3, [r2, #0]
 800ac2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac32:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ac34:	4b1a      	ldr	r3, [pc, #104]	; (800aca0 <perfect_slalom+0x2c0>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	701a      	strb	r2, [r3, #0]

					accel_hs = 3000;
 800ac3a:	4b1d      	ldr	r3, [pc, #116]	; (800acb0 <perfect_slalom+0x2d0>)
 800ac3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ac40:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <perfect_slalom+0x2d4>)
 800ac44:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ac48:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800ac4a:	4b16      	ldr	r3, [pc, #88]	; (800aca4 <perfect_slalom+0x2c4>)
 800ac4c:	2207      	movs	r2, #7
 800ac4e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ac50:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <perfect_slalom+0x2c8>)
 800ac52:	2207      	movs	r2, #7
 800ac54:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac56:	f005 fdc1 	bl	80107dc <get_base>

					searchD2();
 800ac5a:	f003 f9a3 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800ac5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac62:	f7f6 f9db 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac66:	4b10      	ldr	r3, [pc, #64]	; (800aca8 <perfect_slalom+0x2c8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	; (800aca8 <perfect_slalom+0x2c8>)
 800ac6e:	781a      	ldrb	r2, [r3, #0]
 800ac70:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <perfect_slalom+0x2c4>)
 800ac72:	701a      	strb	r2, [r3, #0]
					searchD2();
 800ac74:	f003 f996 	bl	800dfa4 <searchD2>

					goal_x = 7;
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <perfect_slalom+0x2c4>)
 800ac7a:	2207      	movs	r2, #7
 800ac7c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <perfect_slalom+0x2c8>)
 800ac80:	2207      	movs	r2, #7
 800ac82:	701a      	strb	r2, [r3, #0]
					break;
 800ac84:	e093      	b.n	800adae <perfect_slalom+0x3ce>
 800ac86:	bf00      	nop
 800ac88:	08012aec 	.word	0x08012aec
 800ac8c:	20000b2c 	.word	0x20000b2c
 800ac90:	0801267c 	.word	0x0801267c
 800ac94:	40020000 	.word	0x40020000
 800ac98:	080129f0 	.word	0x080129f0
 800ac9c:	20000fa8 	.word	0x20000fa8
 800aca0:	200012e8 	.word	0x200012e8
 800aca4:	20000bf1 	.word	0x20000bf1
 800aca8:	20000b8c 	.word	0x20000b8c
 800acac:	080129fc 	.word	0x080129fc
 800acb0:	2000048c 	.word	0x2000048c
 800acb4:	20000fbc 	.word	0x20000fbc
 800acb8:	08012a48 	.word	0x08012a48

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800acbc:	483c      	ldr	r0, [pc, #240]	; (800adb0 <perfect_slalom+0x3d0>)
 800acbe:	f006 fc27 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800acc2:	4a3c      	ldr	r2, [pc, #240]	; (800adb4 <perfect_slalom+0x3d4>)
 800acc4:	8813      	ldrh	r3, [r2, #0]
 800acc6:	f043 0320 	orr.w	r3, r3, #32
 800acca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800accc:	4a39      	ldr	r2, [pc, #228]	; (800adb4 <perfect_slalom+0x3d4>)
 800acce:	8813      	ldrh	r3, [r2, #0]
 800acd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acd4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800acd6:	4a37      	ldr	r2, [pc, #220]	; (800adb4 <perfect_slalom+0x3d4>)
 800acd8:	8813      	ldrh	r3, [r2, #0]
 800acda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800acde:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ace0:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <perfect_slalom+0x3d8>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800ace6:	4b35      	ldr	r3, [pc, #212]	; (800adbc <perfect_slalom+0x3dc>)
 800ace8:	f242 7210 	movw	r2, #10000	; 0x2710
 800acec:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800acee:	4b34      	ldr	r3, [pc, #208]	; (800adc0 <perfect_slalom+0x3e0>)
 800acf0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800acf4:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800acf6:	4b33      	ldr	r3, [pc, #204]	; (800adc4 <perfect_slalom+0x3e4>)
 800acf8:	2207      	movs	r2, #7
 800acfa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800acfc:	4b32      	ldr	r3, [pc, #200]	; (800adc8 <perfect_slalom+0x3e8>)
 800acfe:	2207      	movs	r2, #7
 800ad00:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad02:	f005 fd6b 	bl	80107dc <get_base>

					searchD2();
 800ad06:	f003 f94d 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800ad0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad0e:	f7f6 f985 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad12:	4b2d      	ldr	r3, [pc, #180]	; (800adc8 <perfect_slalom+0x3e8>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
 800ad18:	4b2b      	ldr	r3, [pc, #172]	; (800adc8 <perfect_slalom+0x3e8>)
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	4b29      	ldr	r3, [pc, #164]	; (800adc4 <perfect_slalom+0x3e4>)
 800ad1e:	701a      	strb	r2, [r3, #0]
					searchD2();
 800ad20:	f003 f940 	bl	800dfa4 <searchD2>

					goal_x = 7;
 800ad24:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <perfect_slalom+0x3e4>)
 800ad26:	2207      	movs	r2, #7
 800ad28:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ad2a:	4b27      	ldr	r3, [pc, #156]	; (800adc8 <perfect_slalom+0x3e8>)
 800ad2c:	2207      	movs	r2, #7
 800ad2e:	701a      	strb	r2, [r3, #0]
					break;
 800ad30:	e03d      	b.n	800adae <perfect_slalom+0x3ce>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ad32:	481f      	ldr	r0, [pc, #124]	; (800adb0 <perfect_slalom+0x3d0>)
 800ad34:	f006 fbec 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800ad38:	4a1e      	ldr	r2, [pc, #120]	; (800adb4 <perfect_slalom+0x3d4>)
 800ad3a:	8813      	ldrh	r3, [r2, #0]
 800ad3c:	f043 0320 	orr.w	r3, r3, #32
 800ad40:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ad42:	4a1c      	ldr	r2, [pc, #112]	; (800adb4 <perfect_slalom+0x3d4>)
 800ad44:	8813      	ldrh	r3, [r2, #0]
 800ad46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad4a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ad4c:	4a19      	ldr	r2, [pc, #100]	; (800adb4 <perfect_slalom+0x3d4>)
 800ad4e:	8813      	ldrh	r3, [r2, #0]
 800ad50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad54:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ad56:	4b18      	ldr	r3, [pc, #96]	; (800adb8 <perfect_slalom+0x3d8>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800ad5c:	4b17      	ldr	r3, [pc, #92]	; (800adbc <perfect_slalom+0x3dc>)
 800ad5e:	f242 7210 	movw	r2, #10000	; 0x2710
 800ad62:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800ad64:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <perfect_slalom+0x3e0>)
 800ad66:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ad6a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800ad6c:	4b15      	ldr	r3, [pc, #84]	; (800adc4 <perfect_slalom+0x3e4>)
 800ad6e:	2207      	movs	r2, #7
 800ad70:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ad72:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <perfect_slalom+0x3e8>)
 800ad74:	2207      	movs	r2, #7
 800ad76:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad78:	f005 fd30 	bl	80107dc <get_base>

					searchD2();
 800ad7c:	f003 f912 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800ad80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad84:	f7f6 f94a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad88:	4b0f      	ldr	r3, [pc, #60]	; (800adc8 <perfect_slalom+0x3e8>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <perfect_slalom+0x3e8>)
 800ad90:	781a      	ldrb	r2, [r3, #0]
 800ad92:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <perfect_slalom+0x3e4>)
 800ad94:	701a      	strb	r2, [r3, #0]
					searchD2();
 800ad96:	f003 f905 	bl	800dfa4 <searchD2>

					goal_x = 7;
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <perfect_slalom+0x3e4>)
 800ad9c:	2207      	movs	r2, #7
 800ad9e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ada0:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <perfect_slalom+0x3e8>)
 800ada2:	2207      	movs	r2, #7
 800ada4:	701a      	strb	r2, [r3, #0]
					break;
 800ada6:	e002      	b.n	800adae <perfect_slalom+0x3ce>

				case 7:
					perfect_pass();
 800ada8:	f000 f810 	bl	800adcc <perfect_pass>
					break;
 800adac:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800adae:	e620      	b.n	800a9f2 <perfect_slalom+0x12>
 800adb0:	08012a48 	.word	0x08012a48
 800adb4:	20000fa8 	.word	0x20000fa8
 800adb8:	200012e8 	.word	0x200012e8
 800adbc:	2000048c 	.word	0x2000048c
 800adc0:	20000fbc 	.word	0x20000fbc
 800adc4:	20000bf1 	.word	0x20000bf1
 800adc8:	20000b8c 	.word	0x20000b8c

0800adcc <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0

	int mode = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800add6:	68f9      	ldr	r1, [r7, #12]
 800add8:	48ae      	ldr	r0, [pc, #696]	; (800b094 <perfect_pass+0x2c8>)
 800adda:	f006 fb25 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	b2d8      	uxtb	r0, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	b2d9      	uxtb	r1, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	461a      	mov	r2, r3
 800adfe:	f005 fd45 	bl	801088c <led_write>
		  if(dist_r >= 20){
 800ae02:	4ba5      	ldr	r3, [pc, #660]	; (800b098 <perfect_pass+0x2cc>)
 800ae04:	edd3 7a00 	vldr	s15, [r3]
 800ae08:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ae0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae14:	db0f      	blt.n	800ae36 <perfect_pass+0x6a>
			  mode++;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]
			  dist_r = 0;
 800ae1c:	4b9e      	ldr	r3, [pc, #632]	; (800b098 <perfect_pass+0x2cc>)
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b07      	cmp	r3, #7
 800ae28:	dd01      	ble.n	800ae2e <perfect_pass+0x62>
				  mode = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
			  }
			  printf("Mode : %d\n", mode);
 800ae2e:	68f9      	ldr	r1, [r7, #12]
 800ae30:	489a      	ldr	r0, [pc, #616]	; (800b09c <perfect_pass+0x2d0>)
 800ae32:	f006 faf9 	bl	8011428 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 800ae36:	4b98      	ldr	r3, [pc, #608]	; (800b098 <perfect_pass+0x2cc>)
 800ae38:	edd3 7a00 	vldr	s15, [r3]
 800ae3c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ae40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae48:	d80f      	bhi.n	800ae6a <perfect_pass+0x9e>
			  mode--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	60fb      	str	r3, [r7, #12]
			  dist_r = 0;
 800ae50:	4b91      	ldr	r3, [pc, #580]	; (800b098 <perfect_pass+0x2cc>)
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	da01      	bge.n	800ae62 <perfect_pass+0x96>
				  mode = 7;
 800ae5e:	2307      	movs	r3, #7
 800ae60:	60fb      	str	r3, [r7, #12]
			  }
			  printf("Mode : %d\n", mode);
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	488d      	ldr	r0, [pc, #564]	; (800b09c <perfect_pass+0x2d0>)
 800ae66:	f006 fadf 	bl	8011428 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800ae6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae6e:	488c      	ldr	r0, [pc, #560]	; (800b0a0 <perfect_pass+0x2d4>)
 800ae70:	f7f7 fa30 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1b1      	bne.n	800adde <perfect_pass+0x12>
			  HAL_Delay(50);
 800ae7a:	2032      	movs	r0, #50	; 0x32
 800ae7c:	f7f6 f8ce 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800ae80:	bf00      	nop
 800ae82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae86:	4886      	ldr	r0, [pc, #536]	; (800b0a0 <perfect_pass+0x2d4>)
 800ae88:	f7f7 fa24 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0f7      	beq.n	800ae82 <perfect_pass+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800ae92:	f7f9 feef 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(1);
	  		  }
*/
			  switch(mode){
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b07      	cmp	r3, #7
 800ae9a:	d8a0      	bhi.n	800adde <perfect_pass+0x12>
 800ae9c:	a201      	add	r2, pc, #4	; (adr r2, 800aea4 <perfect_pass+0xd8>)
 800ae9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea2:	bf00      	nop
 800aea4:	0800addf 	.word	0x0800addf
 800aea8:	0800aec5 	.word	0x0800aec5
 800aeac:	0800af21 	.word	0x0800af21
 800aeb0:	0800af9d 	.word	0x0800af9d
 800aeb4:	0800b019 	.word	0x0800b019
 800aeb8:	0800addf 	.word	0x0800addf
 800aebc:	0800b0d1 	.word	0x0800b0d1
 800aec0:	0800b369 	.word	0x0800b369
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800aec4:	4877      	ldr	r0, [pc, #476]	; (800b0a4 <perfect_pass+0x2d8>)
 800aec6:	f006 fb23 	bl	8011510 <puts>
					MF.FLAG.SCND = 0;
 800aeca:	4a77      	ldr	r2, [pc, #476]	; (800b0a8 <perfect_pass+0x2dc>)
 800aecc:	8813      	ldrh	r3, [r2, #0]
 800aece:	f36f 1345 	bfc	r3, #5, #1
 800aed2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800aed4:	4a74      	ldr	r2, [pc, #464]	; (800b0a8 <perfect_pass+0x2dc>)
 800aed6:	8813      	ldrh	r3, [r2, #0]
 800aed8:	f36f 2349 	bfc	r3, #9, #1
 800aedc:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800aede:	4b73      	ldr	r3, [pc, #460]	; (800b0ac <perfect_pass+0x2e0>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800aee4:	4b72      	ldr	r3, [pc, #456]	; (800b0b0 <perfect_pass+0x2e4>)
 800aee6:	2207      	movs	r2, #7
 800aee8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aeea:	4b72      	ldr	r3, [pc, #456]	; (800b0b4 <perfect_pass+0x2e8>)
 800aeec:	2207      	movs	r2, #7
 800aeee:	701a      	strb	r2, [r3, #0]

					get_base();
 800aef0:	f005 fc74 	bl	80107dc <get_base>

					searchC();
 800aef4:	f002 fe18 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800aef8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aefc:	f7f6 f88e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af00:	4b6c      	ldr	r3, [pc, #432]	; (800b0b4 <perfect_pass+0x2e8>)
 800af02:	2200      	movs	r2, #0
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	4b6b      	ldr	r3, [pc, #428]	; (800b0b4 <perfect_pass+0x2e8>)
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	4b69      	ldr	r3, [pc, #420]	; (800b0b0 <perfect_pass+0x2e4>)
 800af0c:	701a      	strb	r2, [r3, #0]
					searchC();
 800af0e:	f002 fe0b 	bl	800db28 <searchC>

					goal_x = 7;
 800af12:	4b67      	ldr	r3, [pc, #412]	; (800b0b0 <perfect_pass+0x2e4>)
 800af14:	2207      	movs	r2, #7
 800af16:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800af18:	4b66      	ldr	r3, [pc, #408]	; (800b0b4 <perfect_pass+0x2e8>)
 800af1a:	2207      	movs	r2, #7
 800af1c:	701a      	strb	r2, [r3, #0]
					break;
 800af1e:	e357      	b.n	800b5d0 <perfect_pass+0x804>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800af20:	4865      	ldr	r0, [pc, #404]	; (800b0b8 <perfect_pass+0x2ec>)
 800af22:	f006 faf5 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800af26:	4a60      	ldr	r2, [pc, #384]	; (800b0a8 <perfect_pass+0x2dc>)
 800af28:	8813      	ldrh	r3, [r2, #0]
 800af2a:	f043 0320 	orr.w	r3, r3, #32
 800af2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af30:	4a5d      	ldr	r2, [pc, #372]	; (800b0a8 <perfect_pass+0x2dc>)
 800af32:	8813      	ldrh	r3, [r2, #0]
 800af34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af38:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800af3a:	4a5b      	ldr	r2, [pc, #364]	; (800b0a8 <perfect_pass+0x2dc>)
 800af3c:	8813      	ldrh	r3, [r2, #0]
 800af3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800af42:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800af44:	4b59      	ldr	r3, [pc, #356]	; (800b0ac <perfect_pass+0x2e0>)
 800af46:	2200      	movs	r2, #0
 800af48:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af4a:	4b5c      	ldr	r3, [pc, #368]	; (800b0bc <perfect_pass+0x2f0>)
 800af4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af50:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800af52:	4b5b      	ldr	r3, [pc, #364]	; (800b0c0 <perfect_pass+0x2f4>)
 800af54:	f44f 7248 	mov.w	r2, #800	; 0x320
 800af58:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800af5a:	4b5a      	ldr	r3, [pc, #360]	; (800b0c4 <perfect_pass+0x2f8>)
 800af5c:	2203      	movs	r2, #3
 800af5e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800af60:	4b53      	ldr	r3, [pc, #332]	; (800b0b0 <perfect_pass+0x2e4>)
 800af62:	2207      	movs	r2, #7
 800af64:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800af66:	4b53      	ldr	r3, [pc, #332]	; (800b0b4 <perfect_pass+0x2e8>)
 800af68:	2207      	movs	r2, #7
 800af6a:	701a      	strb	r2, [r3, #0]

					get_base();
 800af6c:	f005 fc36 	bl	80107dc <get_base>

					searchF3();
 800af70:	f003 f9a8 	bl	800e2c4 <searchF3>
					HAL_Delay(2000);
 800af74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af78:	f7f6 f850 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af7c:	4b4d      	ldr	r3, [pc, #308]	; (800b0b4 <perfect_pass+0x2e8>)
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]
 800af82:	4b4c      	ldr	r3, [pc, #304]	; (800b0b4 <perfect_pass+0x2e8>)
 800af84:	781a      	ldrb	r2, [r3, #0]
 800af86:	4b4a      	ldr	r3, [pc, #296]	; (800b0b0 <perfect_pass+0x2e4>)
 800af88:	701a      	strb	r2, [r3, #0]
					searchF3();
 800af8a:	f003 f99b 	bl	800e2c4 <searchF3>

					goal_x = 7;
 800af8e:	4b48      	ldr	r3, [pc, #288]	; (800b0b0 <perfect_pass+0x2e4>)
 800af90:	2207      	movs	r2, #7
 800af92:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800af94:	4b47      	ldr	r3, [pc, #284]	; (800b0b4 <perfect_pass+0x2e8>)
 800af96:	2207      	movs	r2, #7
 800af98:	701a      	strb	r2, [r3, #0]
					break;
 800af9a:	e319      	b.n	800b5d0 <perfect_pass+0x804>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800af9c:	484a      	ldr	r0, [pc, #296]	; (800b0c8 <perfect_pass+0x2fc>)
 800af9e:	f006 fab7 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800afa2:	4a41      	ldr	r2, [pc, #260]	; (800b0a8 <perfect_pass+0x2dc>)
 800afa4:	8813      	ldrh	r3, [r2, #0]
 800afa6:	f043 0320 	orr.w	r3, r3, #32
 800afaa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800afac:	4a3e      	ldr	r2, [pc, #248]	; (800b0a8 <perfect_pass+0x2dc>)
 800afae:	8813      	ldrh	r3, [r2, #0]
 800afb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afb4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800afb6:	4a3c      	ldr	r2, [pc, #240]	; (800b0a8 <perfect_pass+0x2dc>)
 800afb8:	8813      	ldrh	r3, [r2, #0]
 800afba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afbe:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800afc0:	4b3a      	ldr	r3, [pc, #232]	; (800b0ac <perfect_pass+0x2e0>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800afc6:	4b3d      	ldr	r3, [pc, #244]	; (800b0bc <perfect_pass+0x2f0>)
 800afc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afcc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800afce:	4b3c      	ldr	r3, [pc, #240]	; (800b0c0 <perfect_pass+0x2f4>)
 800afd0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800afd4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800afd6:	4b3b      	ldr	r3, [pc, #236]	; (800b0c4 <perfect_pass+0x2f8>)
 800afd8:	2203      	movs	r2, #3
 800afda:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800afdc:	4b34      	ldr	r3, [pc, #208]	; (800b0b0 <perfect_pass+0x2e4>)
 800afde:	2207      	movs	r2, #7
 800afe0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800afe2:	4b34      	ldr	r3, [pc, #208]	; (800b0b4 <perfect_pass+0x2e8>)
 800afe4:	2207      	movs	r2, #7
 800afe6:	701a      	strb	r2, [r3, #0]

					get_base();
 800afe8:	f005 fbf8 	bl	80107dc <get_base>

					searchF32();
 800afec:	f003 fa1e 	bl	800e42c <searchF32>
					HAL_Delay(2000);
 800aff0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aff4:	f7f6 f812 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aff8:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <perfect_pass+0x2e8>)
 800affa:	2200      	movs	r2, #0
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <perfect_pass+0x2e8>)
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	4b2b      	ldr	r3, [pc, #172]	; (800b0b0 <perfect_pass+0x2e4>)
 800b004:	701a      	strb	r2, [r3, #0]
					searchF32();
 800b006:	f003 fa11 	bl	800e42c <searchF32>

					goal_x = 7;
 800b00a:	4b29      	ldr	r3, [pc, #164]	; (800b0b0 <perfect_pass+0x2e4>)
 800b00c:	2207      	movs	r2, #7
 800b00e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <perfect_pass+0x2e8>)
 800b012:	2207      	movs	r2, #7
 800b014:	701a      	strb	r2, [r3, #0]
					break;
 800b016:	e2db      	b.n	800b5d0 <perfect_pass+0x804>
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b018:	482c      	ldr	r0, [pc, #176]	; (800b0cc <perfect_pass+0x300>)
 800b01a:	f006 fa79 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b01e:	4a22      	ldr	r2, [pc, #136]	; (800b0a8 <perfect_pass+0x2dc>)
 800b020:	8813      	ldrh	r3, [r2, #0]
 800b022:	f043 0320 	orr.w	r3, r3, #32
 800b026:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b028:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <perfect_pass+0x2dc>)
 800b02a:	8813      	ldrh	r3, [r2, #0]
 800b02c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b030:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b032:	4a1d      	ldr	r2, [pc, #116]	; (800b0a8 <perfect_pass+0x2dc>)
 800b034:	8813      	ldrh	r3, [r2, #0]
 800b036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b03a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b03c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ac <perfect_pass+0x2e0>)
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b042:	4b1e      	ldr	r3, [pc, #120]	; (800b0bc <perfect_pass+0x2f0>)
 800b044:	f241 3288 	movw	r2, #5000	; 0x1388
 800b048:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b04a:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <perfect_pass+0x2f4>)
 800b04c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b050:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b052:	4b1c      	ldr	r3, [pc, #112]	; (800b0c4 <perfect_pass+0x2f8>)
 800b054:	2204      	movs	r2, #4
 800b056:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b058:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <perfect_pass+0x2e4>)
 800b05a:	2207      	movs	r2, #7
 800b05c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b05e:	4b15      	ldr	r3, [pc, #84]	; (800b0b4 <perfect_pass+0x2e8>)
 800b060:	2207      	movs	r2, #7
 800b062:	701a      	strb	r2, [r3, #0]

					get_base();
 800b064:	f005 fbba 	bl	80107dc <get_base>

					searchF4();
 800b068:	f003 fa94 	bl	800e594 <searchF4>
					HAL_Delay(2000);
 800b06c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b070:	f7f5 ffd4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b074:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <perfect_pass+0x2e8>)
 800b076:	2200      	movs	r2, #0
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	4b0e      	ldr	r3, [pc, #56]	; (800b0b4 <perfect_pass+0x2e8>)
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <perfect_pass+0x2e4>)
 800b080:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b082:	f003 fa87 	bl	800e594 <searchF4>

					goal_x = 7;
 800b086:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <perfect_pass+0x2e4>)
 800b088:	2207      	movs	r2, #7
 800b08a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b08c:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <perfect_pass+0x2e8>)
 800b08e:	2207      	movs	r2, #7
 800b090:	701a      	strb	r2, [r3, #0]
					break;
 800b092:	e29d      	b.n	800b5d0 <perfect_pass+0x804>
 800b094:	08012b08 	.word	0x08012b08
 800b098:	20000b2c 	.word	0x20000b2c
 800b09c:	0801267c 	.word	0x0801267c
 800b0a0:	40020000 	.word	0x40020000
 800b0a4:	080129f0 	.word	0x080129f0
 800b0a8:	20000fa8 	.word	0x20000fa8
 800b0ac:	200012e8 	.word	0x200012e8
 800b0b0:	20000bf1 	.word	0x20000bf1
 800b0b4:	20000b8c 	.word	0x20000b8c
 800b0b8:	080129a8 	.word	0x080129a8
 800b0bc:	2000048c 	.word	0x2000048c
 800b0c0:	20000fbc 	.word	0x20000fbc
 800b0c4:	2000048e 	.word	0x2000048e
 800b0c8:	080129b8 	.word	0x080129b8
 800b0cc:	080129c8 	.word	0x080129c8

				case 5:
					break;
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b0d0:	4899      	ldr	r0, [pc, #612]	; (800b338 <perfect_pass+0x56c>)
 800b0d2:	f006 fa1d 	bl	8011510 <puts>
					MF.FLAG.SCND = 0;
 800b0d6:	4a99      	ldr	r2, [pc, #612]	; (800b33c <perfect_pass+0x570>)
 800b0d8:	8813      	ldrh	r3, [r2, #0]
 800b0da:	f36f 1345 	bfc	r3, #5, #1
 800b0de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b0e0:	4a96      	ldr	r2, [pc, #600]	; (800b33c <perfect_pass+0x570>)
 800b0e2:	8813      	ldrh	r3, [r2, #0]
 800b0e4:	f36f 2349 	bfc	r3, #9, #1
 800b0e8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b0ea:	4b95      	ldr	r3, [pc, #596]	; (800b340 <perfect_pass+0x574>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b0f0:	4b94      	ldr	r3, [pc, #592]	; (800b344 <perfect_pass+0x578>)
 800b0f2:	2209      	movs	r2, #9
 800b0f4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0f6:	4b94      	ldr	r3, [pc, #592]	; (800b348 <perfect_pass+0x57c>)
 800b0f8:	2206      	movs	r2, #6
 800b0fa:	701a      	strb	r2, [r3, #0]

					get_base();
 800b0fc:	f005 fb6e 	bl	80107dc <get_base>

					searchC();
 800b100:	f002 fd12 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800b104:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b108:	f7f5 ff88 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b10c:	4b8e      	ldr	r3, [pc, #568]	; (800b348 <perfect_pass+0x57c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	4b8d      	ldr	r3, [pc, #564]	; (800b348 <perfect_pass+0x57c>)
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	4b8b      	ldr	r3, [pc, #556]	; (800b344 <perfect_pass+0x578>)
 800b118:	701a      	strb	r2, [r3, #0]
					searchC();
 800b11a:	f002 fd05 	bl	800db28 <searchC>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b11e:	2096      	movs	r0, #150	; 0x96
 800b120:	f7fa f8e2 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b124:	4b89      	ldr	r3, [pc, #548]	; (800b34c <perfect_pass+0x580>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a89      	ldr	r2, [pc, #548]	; (800b350 <perfect_pass+0x584>)
 800b12a:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b12c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b130:	f7f5 ff74 	bl	800101c <HAL_Delay>



					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800b134:	4887      	ldr	r0, [pc, #540]	; (800b354 <perfect_pass+0x588>)
 800b136:	f006 f9eb 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b13a:	4a80      	ldr	r2, [pc, #512]	; (800b33c <perfect_pass+0x570>)
 800b13c:	8813      	ldrh	r3, [r2, #0]
 800b13e:	f043 0320 	orr.w	r3, r3, #32
 800b142:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b144:	4a7d      	ldr	r2, [pc, #500]	; (800b33c <perfect_pass+0x570>)
 800b146:	8813      	ldrh	r3, [r2, #0]
 800b148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b14c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b14e:	4a7b      	ldr	r2, [pc, #492]	; (800b33c <perfect_pass+0x570>)
 800b150:	8813      	ldrh	r3, [r2, #0]
 800b152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b156:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b158:	4b79      	ldr	r3, [pc, #484]	; (800b340 <perfect_pass+0x574>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800b15e:	4b7e      	ldr	r3, [pc, #504]	; (800b358 <perfect_pass+0x58c>)
 800b160:	f241 3288 	movw	r2, #5000	; 0x1388
 800b164:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b166:	4b7d      	ldr	r3, [pc, #500]	; (800b35c <perfect_pass+0x590>)
 800b168:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b16c:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b16e:	4b75      	ldr	r3, [pc, #468]	; (800b344 <perfect_pass+0x578>)
 800b170:	2209      	movs	r2, #9
 800b172:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b174:	4b74      	ldr	r3, [pc, #464]	; (800b348 <perfect_pass+0x57c>)
 800b176:	2206      	movs	r2, #6
 800b178:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD();
 800b17a:	f002 fe21 	bl	800ddc0 <searchD>
					HAL_Delay(2000);
 800b17e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b182:	f7f5 ff4b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b186:	4b70      	ldr	r3, [pc, #448]	; (800b348 <perfect_pass+0x57c>)
 800b188:	2200      	movs	r2, #0
 800b18a:	701a      	strb	r2, [r3, #0]
 800b18c:	4b6e      	ldr	r3, [pc, #440]	; (800b348 <perfect_pass+0x57c>)
 800b18e:	781a      	ldrb	r2, [r3, #0]
 800b190:	4b6c      	ldr	r3, [pc, #432]	; (800b344 <perfect_pass+0x578>)
 800b192:	701a      	strb	r2, [r3, #0]
					searchD();
 800b194:	f002 fe14 	bl	800ddc0 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b198:	2096      	movs	r0, #150	; 0x96
 800b19a:	f7fa f8a5 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b19e:	4b6b      	ldr	r3, [pc, #428]	; (800b34c <perfect_pass+0x580>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a6b      	ldr	r2, [pc, #428]	; (800b350 <perfect_pass+0x584>)
 800b1a4:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b1a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1aa:	f7f5 ff37 	bl	800101c <HAL_Delay>
					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b1ae:	486c      	ldr	r0, [pc, #432]	; (800b360 <perfect_pass+0x594>)
 800b1b0:	f006 f9ae 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b1b4:	4a61      	ldr	r2, [pc, #388]	; (800b33c <perfect_pass+0x570>)
 800b1b6:	8813      	ldrh	r3, [r2, #0]
 800b1b8:	f043 0320 	orr.w	r3, r3, #32
 800b1bc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b1be:	4a5f      	ldr	r2, [pc, #380]	; (800b33c <perfect_pass+0x570>)
 800b1c0:	8813      	ldrh	r3, [r2, #0]
 800b1c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b1c8:	4a5c      	ldr	r2, [pc, #368]	; (800b33c <perfect_pass+0x570>)
 800b1ca:	8813      	ldrh	r3, [r2, #0]
 800b1cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1d0:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b1d2:	4b5b      	ldr	r3, [pc, #364]	; (800b340 <perfect_pass+0x574>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800b1d8:	4b5f      	ldr	r3, [pc, #380]	; (800b358 <perfect_pass+0x58c>)
 800b1da:	f242 7210 	movw	r2, #10000	; 0x2710
 800b1de:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b1e0:	4b5e      	ldr	r3, [pc, #376]	; (800b35c <perfect_pass+0x590>)
 800b1e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1e6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b1e8:	4b56      	ldr	r3, [pc, #344]	; (800b344 <perfect_pass+0x578>)
 800b1ea:	2209      	movs	r2, #9
 800b1ec:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1ee:	4b56      	ldr	r3, [pc, #344]	; (800b348 <perfect_pass+0x57c>)
 800b1f0:	2206      	movs	r2, #6
 800b1f2:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800b1f4:	f002 fed6 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800b1f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1fc:	f7f5 ff0e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b200:	4b51      	ldr	r3, [pc, #324]	; (800b348 <perfect_pass+0x57c>)
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	4b50      	ldr	r3, [pc, #320]	; (800b348 <perfect_pass+0x57c>)
 800b208:	781a      	ldrb	r2, [r3, #0]
 800b20a:	4b4e      	ldr	r3, [pc, #312]	; (800b344 <perfect_pass+0x578>)
 800b20c:	701a      	strb	r2, [r3, #0]
					searchD2();
 800b20e:	f002 fec9 	bl	800dfa4 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b212:	2096      	movs	r0, #150	; 0x96
 800b214:	f7fa f868 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b218:	4b4c      	ldr	r3, [pc, #304]	; (800b34c <perfect_pass+0x580>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a4c      	ldr	r2, [pc, #304]	; (800b350 <perfect_pass+0x584>)
 800b21e:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b220:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b224:	f7f5 fefa 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800b228:	484d      	ldr	r0, [pc, #308]	; (800b360 <perfect_pass+0x594>)
 800b22a:	f006 f971 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b22e:	4a43      	ldr	r2, [pc, #268]	; (800b33c <perfect_pass+0x570>)
 800b230:	8813      	ldrh	r3, [r2, #0]
 800b232:	f043 0320 	orr.w	r3, r3, #32
 800b236:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b238:	4a40      	ldr	r2, [pc, #256]	; (800b33c <perfect_pass+0x570>)
 800b23a:	8813      	ldrh	r3, [r2, #0]
 800b23c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b240:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b242:	4a3e      	ldr	r2, [pc, #248]	; (800b33c <perfect_pass+0x570>)
 800b244:	8813      	ldrh	r3, [r2, #0]
 800b246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b24a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b24c:	4b3c      	ldr	r3, [pc, #240]	; (800b340 <perfect_pass+0x574>)
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800b252:	4b41      	ldr	r3, [pc, #260]	; (800b358 <perfect_pass+0x58c>)
 800b254:	f242 7210 	movw	r2, #10000	; 0x2710
 800b258:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b25a:	4b40      	ldr	r3, [pc, #256]	; (800b35c <perfect_pass+0x590>)
 800b25c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b260:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b262:	4b38      	ldr	r3, [pc, #224]	; (800b344 <perfect_pass+0x578>)
 800b264:	2209      	movs	r2, #9
 800b266:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b268:	4b37      	ldr	r3, [pc, #220]	; (800b348 <perfect_pass+0x57c>)
 800b26a:	2206      	movs	r2, #6
 800b26c:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800b26e:	f002 fe99 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800b272:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b276:	f7f5 fed1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b27a:	4b33      	ldr	r3, [pc, #204]	; (800b348 <perfect_pass+0x57c>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	701a      	strb	r2, [r3, #0]
 800b280:	4b31      	ldr	r3, [pc, #196]	; (800b348 <perfect_pass+0x57c>)
 800b282:	781a      	ldrb	r2, [r3, #0]
 800b284:	4b2f      	ldr	r3, [pc, #188]	; (800b344 <perfect_pass+0x578>)
 800b286:	701a      	strb	r2, [r3, #0]
					searchD2();
 800b288:	f002 fe8c 	bl	800dfa4 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b28c:	2096      	movs	r0, #150	; 0x96
 800b28e:	f7fa f82b 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b292:	4b2e      	ldr	r3, [pc, #184]	; (800b34c <perfect_pass+0x580>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a2e      	ldr	r2, [pc, #184]	; (800b350 <perfect_pass+0x584>)
 800b298:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b29a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b29e:	f7f5 febd 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800b2a2:	482f      	ldr	r0, [pc, #188]	; (800b360 <perfect_pass+0x594>)
 800b2a4:	f006 f934 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b2a8:	4a24      	ldr	r2, [pc, #144]	; (800b33c <perfect_pass+0x570>)
 800b2aa:	8813      	ldrh	r3, [r2, #0]
 800b2ac:	f043 0320 	orr.w	r3, r3, #32
 800b2b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b2b2:	4a22      	ldr	r2, [pc, #136]	; (800b33c <perfect_pass+0x570>)
 800b2b4:	8813      	ldrh	r3, [r2, #0]
 800b2b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2ba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b2bc:	4a1f      	ldr	r2, [pc, #124]	; (800b33c <perfect_pass+0x570>)
 800b2be:	8813      	ldrh	r3, [r2, #0]
 800b2c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2c4:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b2c6:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <perfect_pass+0x574>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	701a      	strb	r2, [r3, #0]

					accel_hs = 20000;
 800b2cc:	4b22      	ldr	r3, [pc, #136]	; (800b358 <perfect_pass+0x58c>)
 800b2ce:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b2d2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800b2d4:	4b21      	ldr	r3, [pc, #132]	; (800b35c <perfect_pass+0x590>)
 800b2d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b2da:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b2dc:	4b19      	ldr	r3, [pc, #100]	; (800b344 <perfect_pass+0x578>)
 800b2de:	2209      	movs	r2, #9
 800b2e0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b2e2:	4b19      	ldr	r3, [pc, #100]	; (800b348 <perfect_pass+0x57c>)
 800b2e4:	2206      	movs	r2, #6
 800b2e6:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800b2e8:	f002 fe5c 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800b2ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2f0:	f7f5 fe94 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b2f4:	4b14      	ldr	r3, [pc, #80]	; (800b348 <perfect_pass+0x57c>)
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	4b13      	ldr	r3, [pc, #76]	; (800b348 <perfect_pass+0x57c>)
 800b2fc:	781a      	ldrb	r2, [r3, #0]
 800b2fe:	4b11      	ldr	r3, [pc, #68]	; (800b344 <perfect_pass+0x578>)
 800b300:	701a      	strb	r2, [r3, #0]
					searchD2();
 800b302:	f002 fe4f 	bl	800dfa4 <searchD2>


					for(int i=0; i<m_goal; i++){
 800b306:	2300      	movs	r3, #0
 800b308:	60bb      	str	r3, [r7, #8]
 800b30a:	e011      	b.n	800b330 <perfect_pass+0x564>
					  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800b30c:	4a15      	ldr	r2, [pc, #84]	; (800b364 <perfect_pass+0x598>)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b314:	4a13      	ldr	r2, [pc, #76]	; (800b364 <perfect_pass+0x598>)
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	4413      	add	r3, r2
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	4619      	mov	r1, r3
 800b320:	f002 fa6a 	bl	800d7f8 <buzzer>
					  full_led_write(1);
 800b324:	2001      	movs	r0, #1
 800b326:	f005 faeb 	bl	8010900 <full_led_write>
					for(int i=0; i<m_goal; i++){
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	3301      	adds	r3, #1
 800b32e:	60bb      	str	r3, [r7, #8]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b0e      	cmp	r3, #14
 800b334:	ddea      	ble.n	800b30c <perfect_pass+0x540>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800b336:	e14b      	b.n	800b5d0 <perfect_pass+0x804>
 800b338:	080129f0 	.word	0x080129f0
 800b33c:	20000fa8 	.word	0x20000fa8
 800b340:	200012e8 	.word	0x200012e8
 800b344:	20000bf1 	.word	0x20000bf1
 800b348:	20000b8c 	.word	0x20000b8c
 800b34c:	20000c3c 	.word	0x20000c3c
 800b350:	20000b9c 	.word	0x20000b9c
 800b354:	08012a14 	.word	0x08012a14
 800b358:	2000048c 	.word	0x2000048c
 800b35c:	20000fbc 	.word	0x20000fbc
 800b360:	08012a48 	.word	0x08012a48
 800b364:	20000040 	.word	0x20000040

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b368:	489a      	ldr	r0, [pc, #616]	; (800b5d4 <perfect_pass+0x808>)
 800b36a:	f006 f8d1 	bl	8011510 <puts>
					MF.FLAG.SCND = 0;
 800b36e:	4a9a      	ldr	r2, [pc, #616]	; (800b5d8 <perfect_pass+0x80c>)
 800b370:	8813      	ldrh	r3, [r2, #0]
 800b372:	f36f 1345 	bfc	r3, #5, #1
 800b376:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b378:	4a97      	ldr	r2, [pc, #604]	; (800b5d8 <perfect_pass+0x80c>)
 800b37a:	8813      	ldrh	r3, [r2, #0]
 800b37c:	f36f 2349 	bfc	r3, #9, #1
 800b380:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b382:	4b96      	ldr	r3, [pc, #600]	; (800b5dc <perfect_pass+0x810>)
 800b384:	2200      	movs	r2, #0
 800b386:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b388:	4b95      	ldr	r3, [pc, #596]	; (800b5e0 <perfect_pass+0x814>)
 800b38a:	2207      	movs	r2, #7
 800b38c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b38e:	4b95      	ldr	r3, [pc, #596]	; (800b5e4 <perfect_pass+0x818>)
 800b390:	2207      	movs	r2, #7
 800b392:	701a      	strb	r2, [r3, #0]

					get_base();
 800b394:	f005 fa22 	bl	80107dc <get_base>

					searchC();
 800b398:	f002 fbc6 	bl	800db28 <searchC>
					HAL_Delay(2000);
 800b39c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b3a0:	f7f5 fe3c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b3a4:	4b8f      	ldr	r3, [pc, #572]	; (800b5e4 <perfect_pass+0x818>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	4b8e      	ldr	r3, [pc, #568]	; (800b5e4 <perfect_pass+0x818>)
 800b3ac:	781a      	ldrb	r2, [r3, #0]
 800b3ae:	4b8c      	ldr	r3, [pc, #560]	; (800b5e0 <perfect_pass+0x814>)
 800b3b0:	701a      	strb	r2, [r3, #0]
					searchC();
 800b3b2:	f002 fbb9 	bl	800db28 <searchC>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b3b6:	2096      	movs	r0, #150	; 0x96
 800b3b8:	f7f9 ff96 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b3bc:	4b8a      	ldr	r3, [pc, #552]	; (800b5e8 <perfect_pass+0x81c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a8a      	ldr	r2, [pc, #552]	; (800b5ec <perfect_pass+0x820>)
 800b3c2:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b3c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b3c8:	f7f5 fe28 	bl	800101c <HAL_Delay>



					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800b3cc:	4888      	ldr	r0, [pc, #544]	; (800b5f0 <perfect_pass+0x824>)
 800b3ce:	f006 f89f 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b3d2:	4a81      	ldr	r2, [pc, #516]	; (800b5d8 <perfect_pass+0x80c>)
 800b3d4:	8813      	ldrh	r3, [r2, #0]
 800b3d6:	f043 0320 	orr.w	r3, r3, #32
 800b3da:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b3dc:	4a7e      	ldr	r2, [pc, #504]	; (800b5d8 <perfect_pass+0x80c>)
 800b3de:	8813      	ldrh	r3, [r2, #0]
 800b3e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3e4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b3e6:	4a7c      	ldr	r2, [pc, #496]	; (800b5d8 <perfect_pass+0x80c>)
 800b3e8:	8813      	ldrh	r3, [r2, #0]
 800b3ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3ee:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b3f0:	4b7a      	ldr	r3, [pc, #488]	; (800b5dc <perfect_pass+0x810>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800b3f6:	4b7f      	ldr	r3, [pc, #508]	; (800b5f4 <perfect_pass+0x828>)
 800b3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b3fe:	4b7e      	ldr	r3, [pc, #504]	; (800b5f8 <perfect_pass+0x82c>)
 800b400:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b404:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b406:	4b76      	ldr	r3, [pc, #472]	; (800b5e0 <perfect_pass+0x814>)
 800b408:	2207      	movs	r2, #7
 800b40a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b40c:	4b75      	ldr	r3, [pc, #468]	; (800b5e4 <perfect_pass+0x818>)
 800b40e:	2207      	movs	r2, #7
 800b410:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD();
 800b412:	f002 fcd5 	bl	800ddc0 <searchD>
					HAL_Delay(2000);
 800b416:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b41a:	f7f5 fdff 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b41e:	4b71      	ldr	r3, [pc, #452]	; (800b5e4 <perfect_pass+0x818>)
 800b420:	2200      	movs	r2, #0
 800b422:	701a      	strb	r2, [r3, #0]
 800b424:	4b6f      	ldr	r3, [pc, #444]	; (800b5e4 <perfect_pass+0x818>)
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	4b6d      	ldr	r3, [pc, #436]	; (800b5e0 <perfect_pass+0x814>)
 800b42a:	701a      	strb	r2, [r3, #0]
					searchD();
 800b42c:	f002 fcc8 	bl	800ddc0 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b430:	2096      	movs	r0, #150	; 0x96
 800b432:	f7f9 ff59 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b436:	4b6c      	ldr	r3, [pc, #432]	; (800b5e8 <perfect_pass+0x81c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a6c      	ldr	r2, [pc, #432]	; (800b5ec <perfect_pass+0x820>)
 800b43c:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b43e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b442:	f7f5 fdeb 	bl	800101c <HAL_Delay>
					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b446:	486d      	ldr	r0, [pc, #436]	; (800b5fc <perfect_pass+0x830>)
 800b448:	f006 f862 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b44c:	4a62      	ldr	r2, [pc, #392]	; (800b5d8 <perfect_pass+0x80c>)
 800b44e:	8813      	ldrh	r3, [r2, #0]
 800b450:	f043 0320 	orr.w	r3, r3, #32
 800b454:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b456:	4a60      	ldr	r2, [pc, #384]	; (800b5d8 <perfect_pass+0x80c>)
 800b458:	8813      	ldrh	r3, [r2, #0]
 800b45a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b45e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b460:	4a5d      	ldr	r2, [pc, #372]	; (800b5d8 <perfect_pass+0x80c>)
 800b462:	8813      	ldrh	r3, [r2, #0]
 800b464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b468:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b46a:	4b5c      	ldr	r3, [pc, #368]	; (800b5dc <perfect_pass+0x810>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800b470:	4b60      	ldr	r3, [pc, #384]	; (800b5f4 <perfect_pass+0x828>)
 800b472:	f242 7210 	movw	r2, #10000	; 0x2710
 800b476:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b478:	4b5f      	ldr	r3, [pc, #380]	; (800b5f8 <perfect_pass+0x82c>)
 800b47a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b47e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b480:	4b57      	ldr	r3, [pc, #348]	; (800b5e0 <perfect_pass+0x814>)
 800b482:	2207      	movs	r2, #7
 800b484:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b486:	4b57      	ldr	r3, [pc, #348]	; (800b5e4 <perfect_pass+0x818>)
 800b488:	2207      	movs	r2, #7
 800b48a:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800b48c:	f002 fd8a 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800b490:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b494:	f7f5 fdc2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b498:	4b52      	ldr	r3, [pc, #328]	; (800b5e4 <perfect_pass+0x818>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	4b51      	ldr	r3, [pc, #324]	; (800b5e4 <perfect_pass+0x818>)
 800b4a0:	781a      	ldrb	r2, [r3, #0]
 800b4a2:	4b4f      	ldr	r3, [pc, #316]	; (800b5e0 <perfect_pass+0x814>)
 800b4a4:	701a      	strb	r2, [r3, #0]
					searchD2();
 800b4a6:	f002 fd7d 	bl	800dfa4 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b4aa:	2096      	movs	r0, #150	; 0x96
 800b4ac:	f7f9 ff1c 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b4b0:	4b4d      	ldr	r3, [pc, #308]	; (800b5e8 <perfect_pass+0x81c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a4d      	ldr	r2, [pc, #308]	; (800b5ec <perfect_pass+0x820>)
 800b4b6:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b4b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4bc:	f7f5 fdae 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800b4c0:	484e      	ldr	r0, [pc, #312]	; (800b5fc <perfect_pass+0x830>)
 800b4c2:	f006 f825 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b4c6:	4a44      	ldr	r2, [pc, #272]	; (800b5d8 <perfect_pass+0x80c>)
 800b4c8:	8813      	ldrh	r3, [r2, #0]
 800b4ca:	f043 0320 	orr.w	r3, r3, #32
 800b4ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b4d0:	4a41      	ldr	r2, [pc, #260]	; (800b5d8 <perfect_pass+0x80c>)
 800b4d2:	8813      	ldrh	r3, [r2, #0]
 800b4d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b4da:	4a3f      	ldr	r2, [pc, #252]	; (800b5d8 <perfect_pass+0x80c>)
 800b4dc:	8813      	ldrh	r3, [r2, #0]
 800b4de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4e2:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b4e4:	4b3d      	ldr	r3, [pc, #244]	; (800b5dc <perfect_pass+0x810>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800b4ea:	4b42      	ldr	r3, [pc, #264]	; (800b5f4 <perfect_pass+0x828>)
 800b4ec:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4f0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b4f2:	4b41      	ldr	r3, [pc, #260]	; (800b5f8 <perfect_pass+0x82c>)
 800b4f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b4f8:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b4fa:	4b39      	ldr	r3, [pc, #228]	; (800b5e0 <perfect_pass+0x814>)
 800b4fc:	2207      	movs	r2, #7
 800b4fe:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b500:	4b38      	ldr	r3, [pc, #224]	; (800b5e4 <perfect_pass+0x818>)
 800b502:	2207      	movs	r2, #7
 800b504:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800b506:	f002 fd4d 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800b50a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b50e:	f7f5 fd85 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b512:	4b34      	ldr	r3, [pc, #208]	; (800b5e4 <perfect_pass+0x818>)
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	4b32      	ldr	r3, [pc, #200]	; (800b5e4 <perfect_pass+0x818>)
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	4b30      	ldr	r3, [pc, #192]	; (800b5e0 <perfect_pass+0x814>)
 800b51e:	701a      	strb	r2, [r3, #0]
					searchD2();
 800b520:	f002 fd40 	bl	800dfa4 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b524:	2096      	movs	r0, #150	; 0x96
 800b526:	f7f9 fedf 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800b52a:	4b2f      	ldr	r3, [pc, #188]	; (800b5e8 <perfect_pass+0x81c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a2f      	ldr	r2, [pc, #188]	; (800b5ec <perfect_pass+0x820>)
 800b530:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b536:	f7f5 fd71 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800b53a:	4830      	ldr	r0, [pc, #192]	; (800b5fc <perfect_pass+0x830>)
 800b53c:	f005 ffe8 	bl	8011510 <puts>
					MF.FLAG.SCND = 1;
 800b540:	4a25      	ldr	r2, [pc, #148]	; (800b5d8 <perfect_pass+0x80c>)
 800b542:	8813      	ldrh	r3, [r2, #0]
 800b544:	f043 0320 	orr.w	r3, r3, #32
 800b548:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b54a:	4a23      	ldr	r2, [pc, #140]	; (800b5d8 <perfect_pass+0x80c>)
 800b54c:	8813      	ldrh	r3, [r2, #0]
 800b54e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b552:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b554:	4a20      	ldr	r2, [pc, #128]	; (800b5d8 <perfect_pass+0x80c>)
 800b556:	8813      	ldrh	r3, [r2, #0]
 800b558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b55c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b55e:	4b1f      	ldr	r3, [pc, #124]	; (800b5dc <perfect_pass+0x810>)
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]

					accel_hs = 20000;
 800b564:	4b23      	ldr	r3, [pc, #140]	; (800b5f4 <perfect_pass+0x828>)
 800b566:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b56a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800b56c:	4b22      	ldr	r3, [pc, #136]	; (800b5f8 <perfect_pass+0x82c>)
 800b56e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b572:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b574:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <perfect_pass+0x814>)
 800b576:	2207      	movs	r2, #7
 800b578:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b57a:	4b1a      	ldr	r3, [pc, #104]	; (800b5e4 <perfect_pass+0x818>)
 800b57c:	2207      	movs	r2, #7
 800b57e:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800b580:	f002 fd10 	bl	800dfa4 <searchD2>
					HAL_Delay(2000);
 800b584:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b588:	f7f5 fd48 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b58c:	4b15      	ldr	r3, [pc, #84]	; (800b5e4 <perfect_pass+0x818>)
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
 800b592:	4b14      	ldr	r3, [pc, #80]	; (800b5e4 <perfect_pass+0x818>)
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	4b12      	ldr	r3, [pc, #72]	; (800b5e0 <perfect_pass+0x814>)
 800b598:	701a      	strb	r2, [r3, #0]
					searchD2();
 800b59a:	f002 fd03 	bl	800dfa4 <searchD2>


					for(int i=0; i<m_start; i++){
 800b59e:	2300      	movs	r3, #0
 800b5a0:	607b      	str	r3, [r7, #4]
 800b5a2:	e011      	b.n	800b5c8 <perfect_pass+0x7fc>
					  buzzer(mario_start[i][0], mario_start[i][1]);
 800b5a4:	4a16      	ldr	r2, [pc, #88]	; (800b600 <perfect_pass+0x834>)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5ac:	4a14      	ldr	r2, [pc, #80]	; (800b600 <perfect_pass+0x834>)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	f002 f91e 	bl	800d7f8 <buzzer>
					  full_led_write(1);
 800b5bc:	2001      	movs	r0, #1
 800b5be:	f005 f99f 	bl	8010900 <full_led_write>
					for(int i=0; i<m_start; i++){
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b06      	cmp	r3, #6
 800b5cc:	ddea      	ble.n	800b5a4 <perfect_pass+0x7d8>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800b5ce:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b5d0:	e405      	b.n	800adde <perfect_pass+0x12>
 800b5d2:	bf00      	nop
 800b5d4:	080129f0 	.word	0x080129f0
 800b5d8:	20000fa8 	.word	0x20000fa8
 800b5dc:	200012e8 	.word	0x200012e8
 800b5e0:	20000bf1 	.word	0x20000bf1
 800b5e4:	20000b8c 	.word	0x20000b8c
 800b5e8:	20000c3c 	.word	0x20000c3c
 800b5ec:	20000b9c 	.word	0x20000b9c
 800b5f0:	08012a14 	.word	0x08012a14
 800b5f4:	2000048c 	.word	0x2000048c
 800b5f8:	20000fbc 	.word	0x20000fbc
 800b5fc:	08012a48 	.word	0x08012a48
 800b600:	20000008 	.word	0x20000008

0800b604 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800b60e:	2300      	movs	r3, #0
 800b610:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800b612:	230b      	movs	r3, #11
 800b614:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800b61a:	2302      	movs	r3, #2
 800b61c:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800b61e:	f7f6 fa3f 	bl	8001aa0 <HAL_FLASH_Unlock>
 800b622:	4603      	mov	r3, r0
 800b624:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800b626:	7ffb      	ldrb	r3, [r7, #31]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d001      	beq.n	800b630 <eeprom_enable_write+0x2c>
 800b62c:	7ffb      	ldrb	r3, [r7, #31]
 800b62e:	e009      	b.n	800b644 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800b630:	1d3a      	adds	r2, r7, #4
 800b632:	f107 0308 	add.w	r3, r7, #8
 800b636:	4611      	mov	r1, r2
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f6 fb8f 	bl	8001d5c <HAL_FLASHEx_Erase>
 800b63e:	4603      	mov	r3, r0
 800b640:	77fb      	strb	r3, [r7, #31]
  return status;
 800b642:	7ffb      	ldrb	r3, [r7, #31]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3720      	adds	r7, #32
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800b64c:	b580      	push	{r7, lr}
 800b64e:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800b650:	f7f6 fa48 	bl	8001ae4 <HAL_FLASH_Lock>
 800b654:	4603      	mov	r3, r0
}
 800b656:	4618      	mov	r0, r3
 800b658:	bd80      	pop	{r7, pc}

0800b65a <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800b65a:	b590      	push	{r4, r7, lr}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800b66c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800b674:	887b      	ldrh	r3, [r7, #2]
 800b676:	f04f 0400 	mov.w	r4, #0
 800b67a:	461a      	mov	r2, r3
 800b67c:	4623      	mov	r3, r4
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	2001      	movs	r0, #1
 800b682:	f7f6 f9b9 	bl	80019f8 <HAL_FLASH_Program>
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]
  return status;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	bd90      	pop	{r4, r7, pc}

0800b694 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800b6a6:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	81fb      	strh	r3, [r7, #14]
  return val;
 800b6b4:	89fb      	ldrh	r3, [r7, #14]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800b6ca:	2064      	movs	r0, #100	; 0x64
 800b6cc:	f7f5 fca6 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800b6d0:	2075      	movs	r0, #117	; 0x75
 800b6d2:	f000 f82f 	bl	800b734 <read_byte>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4813      	ldr	r0, [pc, #76]	; (800b72c <gyro_init+0x68>)
 800b6e0:	f005 fea2 	bl	8011428 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	2b98      	cmp	r3, #152	; 0x98
 800b6e8:	d003      	beq.n	800b6f2 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800b6ea:	4811      	ldr	r0, [pc, #68]	; (800b730 <gyro_init+0x6c>)
 800b6ec:	f005 fe9c 	bl	8011428 <iprintf>
 800b6f0:	e7fb      	b.n	800b6ea <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800b6f2:	2032      	movs	r0, #50	; 0x32
 800b6f4:	f7f5 fc92 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	206b      	movs	r0, #107	; 0x6b
 800b6fc:	f000 f846 	bl	800b78c <write_byte>

  HAL_Delay(50);
 800b700:	2032      	movs	r0, #50	; 0x32
 800b702:	f7f5 fc8b 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800b706:	2100      	movs	r1, #0
 800b708:	201a      	movs	r0, #26
 800b70a:	f000 f83f 	bl	800b78c <write_byte>

  HAL_Delay(50);
 800b70e:	2032      	movs	r0, #50	; 0x32
 800b710:	f7f5 fc84 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800b714:	2118      	movs	r1, #24
 800b716:	201b      	movs	r0, #27
 800b718:	f000 f838 	bl	800b78c <write_byte>

  HAL_Delay(50);
 800b71c:	2032      	movs	r0, #50	; 0x32
 800b71e:	f7f5 fc7d 	bl	800101c <HAL_Delay>
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08012b28 	.word	0x08012b28
 800b730:	08012b30 	.word	0x08012b30

0800b734 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	4603      	mov	r3, r0
 800b73c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800b73e:	2200      	movs	r2, #0
 800b740:	2104      	movs	r1, #4
 800b742:	4810      	ldr	r0, [pc, #64]	; (800b784 <read_byte+0x50>)
 800b744:	f7f6 fdde 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800b752:	f107 010f 	add.w	r1, r7, #15
 800b756:	2364      	movs	r3, #100	; 0x64
 800b758:	2201      	movs	r2, #1
 800b75a:	480b      	ldr	r0, [pc, #44]	; (800b788 <read_byte+0x54>)
 800b75c:	f7f7 fa5a 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800b760:	f107 010e 	add.w	r1, r7, #14
 800b764:	2364      	movs	r3, #100	; 0x64
 800b766:	2201      	movs	r2, #1
 800b768:	4807      	ldr	r0, [pc, #28]	; (800b788 <read_byte+0x54>)
 800b76a:	f7f7 fb87 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800b76e:	2201      	movs	r2, #1
 800b770:	2104      	movs	r1, #4
 800b772:	4804      	ldr	r0, [pc, #16]	; (800b784 <read_byte+0x50>)
 800b774:	f7f6 fdc6 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800b778:	7bbb      	ldrb	r3, [r7, #14]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	40020c00 	.word	0x40020c00
 800b788:	2000017c 	.word	0x2000017c

0800b78c <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	460a      	mov	r2, r1
 800b796:	71fb      	strb	r3, [r7, #7]
 800b798:	4613      	mov	r3, r2
 800b79a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800b79c:	79fb      	ldrb	r3, [r7, #7]
 800b79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2104      	movs	r1, #4
 800b7aa:	480c      	ldr	r0, [pc, #48]	; (800b7dc <write_byte+0x50>)
 800b7ac:	f7f6 fdaa 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800b7b0:	f107 010f 	add.w	r1, r7, #15
 800b7b4:	2364      	movs	r3, #100	; 0x64
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4809      	ldr	r0, [pc, #36]	; (800b7e0 <write_byte+0x54>)
 800b7ba:	f7f7 fa2b 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800b7be:	1db9      	adds	r1, r7, #6
 800b7c0:	2364      	movs	r3, #100	; 0x64
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	4806      	ldr	r0, [pc, #24]	; (800b7e0 <write_byte+0x54>)
 800b7c6:	f7f7 fa25 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	2104      	movs	r1, #4
 800b7ce:	4803      	ldr	r0, [pc, #12]	; (800b7dc <write_byte+0x50>)
 800b7d0:	f7f6 fd98 	bl	8002304 <HAL_GPIO_WritePin>
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	40020c00 	.word	0x40020c00
 800b7e0:	2000017c 	.word	0x2000017c

0800b7e4 <accel_read_x>:


float accel_read_x(void){
 800b7e4:	b590      	push	{r4, r7, lr}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800b7ea:	203b      	movs	r0, #59	; 0x3b
 800b7ec:	f7ff ffa2 	bl	800b734 <read_byte>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	b21c      	sxth	r4, r3
 800b7f6:	203c      	movs	r0, #60	; 0x3c
 800b7f8:	f7ff ff9c 	bl	800b734 <read_byte>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	b21b      	sxth	r3, r3
 800b800:	4323      	orrs	r3, r4
 800b802:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800b804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	da01      	bge.n	800b810 <accel_read_x+0x2c>
 800b80c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b810:	12db      	asrs	r3, r3, #11
 800b812:	b21b      	sxth	r3, r3
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b81c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	ee07 3a90 	vmov	s15, r3
}
 800b826:	eeb0 0a67 	vmov.f32	s0, s15
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd90      	pop	{r4, r7, pc}

0800b830 <accel_read_y>:


float accel_read_y(void){
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800b836:	203d      	movs	r0, #61	; 0x3d
 800b838:	f7ff ff7c 	bl	800b734 <read_byte>
 800b83c:	4603      	mov	r3, r0
 800b83e:	021b      	lsls	r3, r3, #8
 800b840:	b21c      	sxth	r4, r3
 800b842:	203e      	movs	r0, #62	; 0x3e
 800b844:	f7ff ff76 	bl	800b734 <read_byte>
 800b848:	4603      	mov	r3, r0
 800b84a:	b21b      	sxth	r3, r3
 800b84c:	4323      	orrs	r3, r4
 800b84e:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800b850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b854:	2b00      	cmp	r3, #0
 800b856:	da01      	bge.n	800b85c <accel_read_y+0x2c>
 800b858:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b85c:	12db      	asrs	r3, r3, #11
 800b85e:	b21b      	sxth	r3, r3
 800b860:	ee07 3a90 	vmov	s15, r3
 800b864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b868:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	ee07 3a90 	vmov	s15, r3
}
 800b872:	eeb0 0a67 	vmov.f32	s0, s15
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd90      	pop	{r4, r7, pc}

0800b87c <accel_read_z>:


float accel_read_z(void){
 800b87c:	b590      	push	{r4, r7, lr}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800b882:	203f      	movs	r0, #63	; 0x3f
 800b884:	f7ff ff56 	bl	800b734 <read_byte>
 800b888:	4603      	mov	r3, r0
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	b21c      	sxth	r4, r3
 800b88e:	2040      	movs	r0, #64	; 0x40
 800b890:	f7ff ff50 	bl	800b734 <read_byte>
 800b894:	4603      	mov	r3, r0
 800b896:	b21b      	sxth	r3, r3
 800b898:	4323      	orrs	r3, r4
 800b89a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800b89c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	da01      	bge.n	800b8a8 <accel_read_z+0x2c>
 800b8a4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b8a8:	12db      	asrs	r3, r3, #11
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	3b07      	subs	r3, #7
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8b6:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	ee07 3a90 	vmov	s15, r3
}
 800b8c0:	eeb0 0a67 	vmov.f32	s0, s15
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd90      	pop	{r4, r7, pc}
 800b8ca:	0000      	movs	r0, r0
 800b8cc:	0000      	movs	r0, r0
	...

0800b8d0 <gyro_read_x>:


float gyro_read_x(void){
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800b8d6:	2043      	movs	r0, #67	; 0x43
 800b8d8:	f7ff ff2c 	bl	800b734 <read_byte>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	021b      	lsls	r3, r3, #8
 800b8e0:	b21c      	sxth	r4, r3
 800b8e2:	2044      	movs	r0, #68	; 0x44
 800b8e4:	f7ff ff26 	bl	800b734 <read_byte>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	b21b      	sxth	r3, r3
 800b8ec:	4323      	orrs	r3, r4
 800b8ee:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800b8f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f4 fe0d 	bl	8000514 <__aeabi_i2d>
 800b8fa:	a30f      	add	r3, pc, #60	; (adr r3, 800b938 <gyro_read_x+0x68>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f7f4 ff9c 	bl	800083c <__aeabi_ddiv>
 800b904:	4603      	mov	r3, r0
 800b906:	460c      	mov	r4, r1
 800b908:	4618      	mov	r0, r3
 800b90a:	4621      	mov	r1, r4
 800b90c:	a30c      	add	r3, pc, #48	; (adr r3, 800b940 <gyro_read_x+0x70>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	f7f4 fcb3 	bl	800027c <__adddf3>
 800b916:	4603      	mov	r3, r0
 800b918:	460c      	mov	r4, r1
 800b91a:	4618      	mov	r0, r3
 800b91c:	4621      	mov	r1, r4
 800b91e:	f7f5 f93b 	bl	8000b98 <__aeabi_d2f>
 800b922:	4603      	mov	r3, r0
 800b924:	603b      	str	r3, [r7, #0]
  return omega;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	ee07 3a90 	vmov	s15, r3
}
 800b92c:	eeb0 0a67 	vmov.f32	s0, s15
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	bd90      	pop	{r4, r7, pc}
 800b936:	bf00      	nop
 800b938:	66666666 	.word	0x66666666
 800b93c:	40306666 	.word	0x40306666
 800b940:	66666666 	.word	0x66666666
 800b944:	3ff66666 	.word	0x3ff66666

0800b948 <gyro_read_y>:


float gyro_read_y(void){
 800b948:	b590      	push	{r4, r7, lr}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800b94e:	2045      	movs	r0, #69	; 0x45
 800b950:	f7ff fef0 	bl	800b734 <read_byte>
 800b954:	4603      	mov	r3, r0
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	b21c      	sxth	r4, r3
 800b95a:	2046      	movs	r0, #70	; 0x46
 800b95c:	f7ff feea 	bl	800b734 <read_byte>
 800b960:	4603      	mov	r3, r0
 800b962:	b21b      	sxth	r3, r3
 800b964:	4323      	orrs	r3, r4
 800b966:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800b968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7f4 fdd1 	bl	8000514 <__aeabi_i2d>
 800b972:	a310      	add	r3, pc, #64	; (adr r3, 800b9b4 <gyro_read_y+0x6c>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 ff60 	bl	800083c <__aeabi_ddiv>
 800b97c:	4603      	mov	r3, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	4618      	mov	r0, r3
 800b982:	4621      	mov	r1, r4
 800b984:	f04f 0200 	mov.w	r2, #0
 800b988:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <gyro_read_y+0x68>)
 800b98a:	f7f4 fc75 	bl	8000278 <__aeabi_dsub>
 800b98e:	4603      	mov	r3, r0
 800b990:	460c      	mov	r4, r1
 800b992:	4618      	mov	r0, r3
 800b994:	4621      	mov	r1, r4
 800b996:	f7f5 f8ff 	bl	8000b98 <__aeabi_d2f>
 800b99a:	4603      	mov	r3, r0
 800b99c:	603b      	str	r3, [r7, #0]
  return omega;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	ee07 3a90 	vmov	s15, r3
}
 800b9a4:	eeb0 0a67 	vmov.f32	s0, s15
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd90      	pop	{r4, r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	3fe80000 	.word	0x3fe80000
 800b9b4:	66666666 	.word	0x66666666
 800b9b8:	40306666 	.word	0x40306666
 800b9bc:	00000000 	.word	0x00000000

0800b9c0 <gyro_read_z>:


float gyro_read_z(void){
 800b9c0:	b5b0      	push	{r4, r5, r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800b9c6:	2047      	movs	r0, #71	; 0x47
 800b9c8:	f7ff feb4 	bl	800b734 <read_byte>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	b21c      	sxth	r4, r3
 800b9d2:	2048      	movs	r0, #72	; 0x48
 800b9d4:	f7ff feae 	bl	800b734 <read_byte>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	b21b      	sxth	r3, r3
 800b9dc:	4323      	orrs	r3, r4
 800b9de:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800b9e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7f4 fd95 	bl	8000514 <__aeabi_i2d>
 800b9ea:	a314      	add	r3, pc, #80	; (adr r3, 800ba3c <gyro_read_z+0x7c>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 ff24 	bl	800083c <__aeabi_ddiv>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	4625      	mov	r5, r4
 800b9fa:	461c      	mov	r4, r3
 800b9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <gyro_read_z+0x78>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f4 fd99 	bl	8000538 <__aeabi_f2d>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 fc33 	bl	8000278 <__aeabi_dsub>
 800ba12:	4603      	mov	r3, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	4618      	mov	r0, r3
 800ba18:	4621      	mov	r1, r4
 800ba1a:	f7f5 f8bd 	bl	8000b98 <__aeabi_d2f>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	603b      	str	r3, [r7, #0]
  return omega;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	ee07 3a90 	vmov	s15, r3
}
 800ba28:	eeb0 0a67 	vmov.f32	s0, s15
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bdb0      	pop	{r4, r5, r7, pc}
 800ba32:	bf00      	nop
 800ba34:	f3af 8000 	nop.w
 800ba38:	20000c34 	.word	0x20000c34
 800ba3c:	66666666 	.word	0x66666666
 800ba40:	40306666 	.word	0x40306666

0800ba44 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b0a      	cmp	r3, #10
 800ba50:	d108      	bne.n	800ba64 <__io_putchar+0x20>
    int _c = '\r';
 800ba52:	230d      	movs	r3, #13
 800ba54:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800ba56:	f107 010c 	add.w	r1, r7, #12
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	4807      	ldr	r0, [pc, #28]	; (800ba7c <__io_putchar+0x38>)
 800ba60:	f7f8 fe0f 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800ba64:	1d39      	adds	r1, r7, #4
 800ba66:	2301      	movs	r3, #1
 800ba68:	2201      	movs	r2, #1
 800ba6a:	4804      	ldr	r0, [pc, #16]	; (800ba7c <__io_putchar+0x38>)
 800ba6c:	f7f8 fe09 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20000ba4 	.word	0x20000ba4

0800ba80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba80:	b5b0      	push	{r4, r5, r7, lr}
 800ba82:	ed2d 8b02 	vpush	{d8}
 800ba86:	b08c      	sub	sp, #48	; 0x30
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ba8c:	2360      	movs	r3, #96	; 0x60
 800ba8e:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4ab5      	ldr	r2, [pc, #724]	; (800bd70 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	f041 81c7 	bne.w	800ce30 <HAL_TIM_PeriodElapsedCallback+0x13b0>
		cnt_l = TIM4 -> CNT;
 800baa2:	4bb4      	ldr	r3, [pc, #720]	; (800bd74 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baae:	4bb2      	ldr	r3, [pc, #712]	; (800bd78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800bab0:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800bab4:	4bb1      	ldr	r3, [pc, #708]	; (800bd7c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac0:	4baf      	ldr	r3, [pc, #700]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bac2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800bac6:	4bac      	ldr	r3, [pc, #688]	; (800bd78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800bac8:	edd3 7a00 	vldr	s15, [r3]
 800bacc:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800bd84 <HAL_TIM_PeriodElapsedCallback+0x304>
 800bad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	dd09      	ble.n	800baee <HAL_TIM_PeriodElapsedCallback+0x6e>
 800bada:	4ba7      	ldr	r3, [pc, #668]	; (800bd78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800badc:	edd3 7a00 	vldr	s15, [r3]
 800bae0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800bd88 <HAL_TIM_PeriodElapsedCallback+0x308>
 800bae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bae8:	4ba3      	ldr	r3, [pc, #652]	; (800bd78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800baea:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800baee:	4ba4      	ldr	r3, [pc, #656]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800baf0:	edd3 7a00 	vldr	s15, [r3]
 800baf4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800bd84 <HAL_TIM_PeriodElapsedCallback+0x304>
 800baf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb00:	dd09      	ble.n	800bb16 <HAL_TIM_PeriodElapsedCallback+0x96>
 800bb02:	4b9f      	ldr	r3, [pc, #636]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bb04:	edd3 7a00 	vldr	s15, [r3]
 800bb08:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800bd88 <HAL_TIM_PeriodElapsedCallback+0x308>
 800bb0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb10:	4b9b      	ldr	r3, [pc, #620]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bb12:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800bb16:	4b9a      	ldr	r3, [pc, #616]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bb18:	edd3 7a00 	vldr	s15, [r3]
 800bb1c:	eef1 7a67 	vneg.f32	s15, s15
 800bb20:	4b97      	ldr	r3, [pc, #604]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bb22:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800bb26:	4b99      	ldr	r3, [pc, #612]	; (800bd8c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7f4 fd04 	bl	8000538 <__aeabi_f2d>
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	4b90      	ldr	r3, [pc, #576]	; (800bd78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f4 fcfd 	bl	8000538 <__aeabi_f2d>
 800bb3e:	a388      	add	r3, pc, #544	; (adr r3, 800bd60 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f7f4 fd50 	bl	80005e8 <__aeabi_dmul>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 fb94 	bl	800027c <__adddf3>
 800bb54:	4603      	mov	r3, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	4618      	mov	r0, r3
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	f7f5 f81c 	bl	8000b98 <__aeabi_d2f>
 800bb60:	4602      	mov	r2, r0
 800bb62:	4b8a      	ldr	r3, [pc, #552]	; (800bd8c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800bb64:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800bb66:	4b8a      	ldr	r3, [pc, #552]	; (800bd90 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7f4 fce4 	bl	8000538 <__aeabi_f2d>
 800bb70:	4604      	mov	r4, r0
 800bb72:	460d      	mov	r5, r1
 800bb74:	4b82      	ldr	r3, [pc, #520]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f4 fcdd 	bl	8000538 <__aeabi_f2d>
 800bb7e:	a378      	add	r3, pc, #480	; (adr r3, 800bd60 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fd30 	bl	80005e8 <__aeabi_dmul>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f7f4 fb74 	bl	800027c <__adddf3>
 800bb94:	4603      	mov	r3, r0
 800bb96:	460c      	mov	r4, r1
 800bb98:	4618      	mov	r0, r3
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	f7f4 fffc 	bl	8000b98 <__aeabi_d2f>
 800bba0:	4602      	mov	r2, r0
 800bba2:	4b7b      	ldr	r3, [pc, #492]	; (800bd90 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800bba4:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800bba6:	4b74      	ldr	r3, [pc, #464]	; (800bd78 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f4 fcc4 	bl	8000538 <__aeabi_f2d>
 800bbb0:	a36b      	add	r3, pc, #428	; (adr r3, 800bd60 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f7f4 fd17 	bl	80005e8 <__aeabi_dmul>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	a369      	add	r3, pc, #420	; (adr r3, 800bd68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fe38 	bl	800083c <__aeabi_ddiv>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	f7f4 ffe0 	bl	8000b98 <__aeabi_d2f>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	4b6e      	ldr	r3, [pc, #440]	; (800bd94 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800bbdc:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800bbde:	4b68      	ldr	r3, [pc, #416]	; (800bd80 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f4 fca8 	bl	8000538 <__aeabi_f2d>
 800bbe8:	a35d      	add	r3, pc, #372	; (adr r3, 800bd60 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fcfb 	bl	80005e8 <__aeabi_dmul>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	a35b      	add	r3, pc, #364	; (adr r3, 800bd68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fe1c 	bl	800083c <__aeabi_ddiv>
 800bc04:	4603      	mov	r3, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	4618      	mov	r0, r3
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	f7f4 ffc4 	bl	8000b98 <__aeabi_d2f>
 800bc10:	4602      	mov	r2, r0
 800bc12:	4b61      	ldr	r3, [pc, #388]	; (800bd98 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800bc14:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800bc16:	4b57      	ldr	r3, [pc, #348]	; (800bd74 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800bc1c:	4b57      	ldr	r3, [pc, #348]	; (800bd7c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800bc22:	4b5e      	ldr	r3, [pc, #376]	; (800bd9c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 80fe 	beq.w	800be2e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800bc32:	4b5b      	ldr	r3, [pc, #364]	; (800bda0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7f4 fc7e 	bl	8000538 <__aeabi_f2d>
 800bc3c:	a34a      	add	r3, pc, #296	; (adr r3, 800bd68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	f7f4 fcd1 	bl	80005e8 <__aeabi_dmul>
 800bc46:	4603      	mov	r3, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	4625      	mov	r5, r4
 800bc4c:	461c      	mov	r4, r3
 800bc4e:	4b55      	ldr	r3, [pc, #340]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f4 fc70 	bl	8000538 <__aeabi_f2d>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f7f4 fb0c 	bl	800027c <__adddf3>
 800bc64:	4603      	mov	r3, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	4618      	mov	r0, r3
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	f7f4 ff94 	bl	8000b98 <__aeabi_d2f>
 800bc70:	4602      	mov	r2, r0
 800bc72:	4b4c      	ldr	r3, [pc, #304]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bc74:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800bc76:	4b4b      	ldr	r3, [pc, #300]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bc78:	ed93 7a00 	vldr	s14, [r3]
 800bc7c:	4b4a      	ldr	r3, [pc, #296]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800bc7e:	edd3 7a00 	vldr	s15, [r3]
 800bc82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8a:	dd03      	ble.n	800bc94 <HAL_TIM_PeriodElapsedCallback+0x214>
 800bc8c:	4b46      	ldr	r3, [pc, #280]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800bc8e:	edd3 7a00 	vldr	s15, [r3]
 800bc92:	e002      	b.n	800bc9a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800bc94:	4b43      	ldr	r3, [pc, #268]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bc96:	edd3 7a00 	vldr	s15, [r3]
 800bc9a:	4b44      	ldr	r3, [pc, #272]	; (800bdac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800bc9c:	ed93 7a00 	vldr	s14, [r3]
 800bca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca8:	dd10      	ble.n	800bccc <HAL_TIM_PeriodElapsedCallback+0x24c>
 800bcaa:	4b3e      	ldr	r3, [pc, #248]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bcac:	ed93 7a00 	vldr	s14, [r3]
 800bcb0:	4b3d      	ldr	r3, [pc, #244]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800bcb2:	edd3 7a00 	vldr	s15, [r3]
 800bcb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbe:	dd02      	ble.n	800bcc6 <HAL_TIM_PeriodElapsedCallback+0x246>
 800bcc0:	4b39      	ldr	r3, [pc, #228]	; (800bda8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	e004      	b.n	800bcd0 <HAL_TIM_PeriodElapsedCallback+0x250>
 800bcc6:	4b37      	ldr	r3, [pc, #220]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	e001      	b.n	800bcd0 <HAL_TIM_PeriodElapsedCallback+0x250>
 800bccc:	4b37      	ldr	r3, [pc, #220]	; (800bdac <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a34      	ldr	r2, [pc, #208]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bcd2:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800bcd4:	4b33      	ldr	r3, [pc, #204]	; (800bda4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800bcd6:	ed93 7a00 	vldr	s14, [r3]
 800bcda:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800bcdc:	edd3 7a00 	vldr	s15, [r3]
 800bce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce4:	4b32      	ldr	r3, [pc, #200]	; (800bdb0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800bce6:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800bcea:	4b31      	ldr	r3, [pc, #196]	; (800bdb0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800bcec:	edd3 7a00 	vldr	s15, [r3]
 800bcf0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bcf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcf8:	4b2e      	ldr	r3, [pc, #184]	; (800bdb4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800bcfa:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800bcfe:	4b2e      	ldr	r3, [pc, #184]	; (800bdb8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7f4 fc18 	bl	8000538 <__aeabi_f2d>
 800bd08:	a317      	add	r3, pc, #92	; (adr r3, 800bd68 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fc6b 	bl	80005e8 <__aeabi_dmul>
 800bd12:	4603      	mov	r3, r0
 800bd14:	460c      	mov	r4, r1
 800bd16:	4625      	mov	r5, r4
 800bd18:	461c      	mov	r4, r3
 800bd1a:	4b28      	ldr	r3, [pc, #160]	; (800bdbc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7f4 fc0a 	bl	8000538 <__aeabi_f2d>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 faa6 	bl	800027c <__adddf3>
 800bd30:	4603      	mov	r3, r0
 800bd32:	460c      	mov	r4, r1
 800bd34:	4618      	mov	r0, r3
 800bd36:	4621      	mov	r1, r4
 800bd38:	f7f4 ff2e 	bl	8000b98 <__aeabi_d2f>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	4b1f      	ldr	r3, [pc, #124]	; (800bdbc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800bd40:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800bd42:	4b1e      	ldr	r3, [pc, #120]	; (800bdbc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800bd44:	ed93 7a00 	vldr	s14, [r3]
 800bd48:	4b1d      	ldr	r3, [pc, #116]	; (800bdc0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800bd4a:	edd3 7a00 	vldr	s15, [r3]
 800bd4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd56:	dd35      	ble.n	800bdc4 <HAL_TIM_PeriodElapsedCallback+0x344>
 800bd58:	4b19      	ldr	r3, [pc, #100]	; (800bdc0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800bd5a:	edd3 7a00 	vldr	s15, [r3]
 800bd5e:	e034      	b.n	800bdca <HAL_TIM_PeriodElapsedCallback+0x34a>
 800bd60:	775e3793 	.word	0x775e3793
 800bd64:	3f552a9e 	.word	0x3f552a9e
 800bd68:	d2f1a9fc 	.word	0xd2f1a9fc
 800bd6c:	3f50624d 	.word	0x3f50624d
 800bd70:	20000bf4 	.word	0x20000bf4
 800bd74:	40000800 	.word	0x40000800
 800bd78:	200002e4 	.word	0x200002e4
 800bd7c:	40010400 	.word	0x40010400
 800bd80:	20000bec 	.word	0x20000bec
 800bd84:	471c4000 	.word	0x471c4000
 800bd88:	477fff00 	.word	0x477fff00
 800bd8c:	200012e4 	.word	0x200012e4
 800bd90:	20000b2c 	.word	0x20000b2c
 800bd94:	20000b30 	.word	0x20000b30
 800bd98:	200002f4 	.word	0x200002f4
 800bd9c:	20000fa8 	.word	0x20000fa8
 800bda0:	20000d9c 	.word	0x20000d9c
 800bda4:	20000c40 	.word	0x20000c40
 800bda8:	200007b4 	.word	0x200007b4
 800bdac:	20000b94 	.word	0x20000b94
 800bdb0:	20000ba0 	.word	0x20000ba0
 800bdb4:	20000be8 	.word	0x20000be8
 800bdb8:	20000b20 	.word	0x20000b20
 800bdbc:	200001d8 	.word	0x200001d8
 800bdc0:	200001dc 	.word	0x200001dc
 800bdc4:	4ba2      	ldr	r3, [pc, #648]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800bdc6:	edd3 7a00 	vldr	s15, [r3]
 800bdca:	4ba2      	ldr	r3, [pc, #648]	; (800c054 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800bdcc:	ed93 7a00 	vldr	s14, [r3]
 800bdd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd8:	dd10      	ble.n	800bdfc <HAL_TIM_PeriodElapsedCallback+0x37c>
 800bdda:	4b9d      	ldr	r3, [pc, #628]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800bddc:	ed93 7a00 	vldr	s14, [r3]
 800bde0:	4b9d      	ldr	r3, [pc, #628]	; (800c058 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bde2:	edd3 7a00 	vldr	s15, [r3]
 800bde6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdee:	dd02      	ble.n	800bdf6 <HAL_TIM_PeriodElapsedCallback+0x376>
 800bdf0:	4b99      	ldr	r3, [pc, #612]	; (800c058 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	e004      	b.n	800be00 <HAL_TIM_PeriodElapsedCallback+0x380>
 800bdf6:	4b96      	ldr	r3, [pc, #600]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	e001      	b.n	800be00 <HAL_TIM_PeriodElapsedCallback+0x380>
 800bdfc:	4b95      	ldr	r3, [pc, #596]	; (800c054 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a93      	ldr	r2, [pc, #588]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800be02:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800be04:	4b92      	ldr	r3, [pc, #584]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800be06:	ed93 7a00 	vldr	s14, [r3]
 800be0a:	4b94      	ldr	r3, [pc, #592]	; (800c05c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800be0c:	edd3 7a00 	vldr	s15, [r3]
 800be10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be14:	4b92      	ldr	r3, [pc, #584]	; (800c060 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800be16:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800be1a:	4b91      	ldr	r3, [pc, #580]	; (800c060 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800be1c:	edd3 7a00 	vldr	s15, [r3]
 800be20:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800be24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be28:	4b8e      	ldr	r3, [pc, #568]	; (800c064 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800be2a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800be2e:	4b8e      	ldr	r3, [pc, #568]	; (800c068 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3301      	adds	r3, #1
 800be34:	4a8c      	ldr	r2, [pc, #560]	; (800c068 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800be36:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 800be38:	4b8b      	ldr	r3, [pc, #556]	; (800c068 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	dd37      	ble.n	800beb0 <HAL_TIM_PeriodElapsedCallback+0x430>
 800be40:	4b8a      	ldr	r3, [pc, #552]	; (800c06c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d030      	beq.n	800beb0 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800be4e:	4b86      	ldr	r3, [pc, #536]	; (800c068 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800be50:	2200      	movs	r2, #0
 800be52:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800be54:	4b86      	ldr	r3, [pc, #536]	; (800c070 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2bc7      	cmp	r3, #199	; 0xc7
 800be5a:	dc29      	bgt.n	800beb0 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800be5c:	4b85      	ldr	r3, [pc, #532]	; (800c074 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800be5e:	edd3 7a00 	vldr	s15, [r3]
 800be62:	4b83      	ldr	r3, [pc, #524]	; (800c070 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be6a:	ee17 1a90 	vmov	r1, s15
 800be6e:	4a82      	ldr	r2, [pc, #520]	; (800c078 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800be70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800be74:	4b79      	ldr	r3, [pc, #484]	; (800c05c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800be76:	edd3 7a00 	vldr	s15, [r3]
 800be7a:	4b7d      	ldr	r3, [pc, #500]	; (800c070 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be82:	ee17 1a90 	vmov	r1, s15
 800be86:	4a7d      	ldr	r2, [pc, #500]	; (800c07c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800be88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800be8c:	f7ff fd98 	bl	800b9c0 <gyro_read_z>
 800be90:	eef0 7a40 	vmov.f32	s15, s0
 800be94:	4b76      	ldr	r3, [pc, #472]	; (800c070 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be9c:	ee17 1a90 	vmov	r1, s15
 800bea0:	4a77      	ldr	r2, [pc, #476]	; (800c080 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800bea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800bea6:	4b72      	ldr	r3, [pc, #456]	; (800c070 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3301      	adds	r3, #1
 800beac:	4a70      	ldr	r2, [pc, #448]	; (800c070 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800beae:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800beb0:	f7ff fd86 	bl	800b9c0 <gyro_read_z>
 800beb4:	ee10 3a10 	vmov	r3, s0
 800beb8:	4618      	mov	r0, r3
 800beba:	f7f4 fb3d 	bl	8000538 <__aeabi_f2d>
 800bebe:	a360      	add	r3, pc, #384	; (adr r3, 800c040 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 fb90 	bl	80005e8 <__aeabi_dmul>
 800bec8:	4603      	mov	r3, r0
 800beca:	460c      	mov	r4, r1
 800becc:	4625      	mov	r5, r4
 800bece:	461c      	mov	r4, r3
 800bed0:	4b6c      	ldr	r3, [pc, #432]	; (800c084 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f4 fb2f 	bl	8000538 <__aeabi_f2d>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 f9cb 	bl	800027c <__adddf3>
 800bee6:	4603      	mov	r3, r0
 800bee8:	460c      	mov	r4, r1
 800beea:	4618      	mov	r0, r3
 800beec:	4621      	mov	r1, r4
 800beee:	f7f4 fe53 	bl	8000b98 <__aeabi_d2f>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4b63      	ldr	r3, [pc, #396]	; (800c084 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800bef6:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag == 1){
 800bef8:	4b63      	ldr	r3, [pc, #396]	; (800c088 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d14b      	bne.n	800bf9a <HAL_TIM_PeriodElapsedCallback+0x51a>
			gyro_cnt ++;
 800bf02:	4b62      	ldr	r3, [pc, #392]	; (800c08c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3301      	adds	r3, #1
 800bf08:	4a60      	ldr	r2, [pc, #384]	; (800c08c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bf0a:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800bf0c:	4b5f      	ldr	r3, [pc, #380]	; (800c08c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	dd10      	ble.n	800bf36 <HAL_TIM_PeriodElapsedCallback+0x4b6>
 800bf14:	4b5e      	ldr	r3, [pc, #376]	; (800c090 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bf16:	ed93 8a00 	vldr	s16, [r3]
 800bf1a:	f7ff fd51 	bl	800b9c0 <gyro_read_z>
 800bf1e:	eef0 7a40 	vmov.f32	s15, s0
 800bf22:	ee38 7a67 	vsub.f32	s14, s16, s15
 800bf26:	4b5b      	ldr	r3, [pc, #364]	; (800c094 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800bf28:	edd3 7a00 	vldr	s15, [r3]
 800bf2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf30:	4b58      	ldr	r3, [pc, #352]	; (800c094 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800bf32:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800bf36:	f7ff fd43 	bl	800b9c0 <gyro_read_z>
 800bf3a:	eef0 7a40 	vmov.f32	s15, s0
 800bf3e:	4b54      	ldr	r3, [pc, #336]	; (800c090 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800bf40:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(6);
 800bf44:	2006      	movs	r0, #6
 800bf46:	f004 fcdb 	bl	8010900 <full_led_write>
			if(gyro_cnt >= 1001) {
 800bf4a:	4b50      	ldr	r3, [pc, #320]	; (800c08c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf52:	dd1a      	ble.n	800bf8a <HAL_TIM_PeriodElapsedCallback+0x50a>
				gyro_drift_flag = 0;
 800bf54:	4b4c      	ldr	r3, [pc, #304]	; (800c088 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800bf5a:	4b4e      	ldr	r3, [pc, #312]	; (800c094 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800bf5c:	edd3 6a00 	vldr	s13, [r3]
 800bf60:	4b4a      	ldr	r3, [pc, #296]	; (800c08c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	ee07 3a90 	vmov	s15, r3
 800bf68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf78:	4b47      	ldr	r3, [pc, #284]	; (800c098 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800bf7a:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800bf7e:	4b43      	ldr	r3, [pc, #268]	; (800c08c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]
				full_led_write(4);
 800bf84:	2004      	movs	r0, #4
 800bf86:	f004 fcbb 	bl	8010900 <full_led_write>
			}
			degree_z = 0;
 800bf8a:	4b3e      	ldr	r3, [pc, #248]	; (800c084 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800bf8c:	f04f 0200 	mov.w	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800bf92:	4b42      	ldr	r3, [pc, #264]	; (800c09c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800bf94:	f04f 0200 	mov.w	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
		}


		if(MF.FLAG.ENKAI){
 800bf9a:	4b34      	ldr	r3, [pc, #208]	; (800c06c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800bf9c:	881b      	ldrh	r3, [r3, #0]
 800bf9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 80d8 	beq.w	800c15a <HAL_TIM_PeriodElapsedCallback+0x6da>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800bfaa:	4b36      	ldr	r3, [pc, #216]	; (800c084 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800bfac:	ed93 7a00 	vldr	s14, [r3]
 800bfb0:	4b3a      	ldr	r3, [pc, #232]	; (800c09c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800bfb2:	edd3 7a00 	vldr	s15, [r3]
 800bfb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfba:	ee17 0a90 	vmov	r0, s15
 800bfbe:	f7f4 fabb 	bl	8000538 <__aeabi_f2d>
 800bfc2:	a321      	add	r3, pc, #132	; (adr r3, 800c048 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 fb0e 	bl	80005e8 <__aeabi_dmul>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	f7f4 fde0 	bl	8000b98 <__aeabi_d2f>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	4b31      	ldr	r3, [pc, #196]	; (800c0a0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800bfdc:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800bfde:	4b30      	ldr	r3, [pc, #192]	; (800c0a0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800bfe0:	edd3 7a00 	vldr	s15, [r3]
 800bfe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfec:	dd5e      	ble.n	800c0ac <HAL_TIM_PeriodElapsedCallback+0x62c>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800bfee:	4b2d      	ldr	r3, [pc, #180]	; (800c0a4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800bff0:	edd3 7a00 	vldr	s15, [r3]
 800bff4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800bff8:	4b29      	ldr	r3, [pc, #164]	; (800c0a0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800bffa:	edd3 7a00 	vldr	s15, [r3]
 800bffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c002:	ee17 0a90 	vmov	r0, s15
 800c006:	f7f4 fa97 	bl	8000538 <__aeabi_f2d>
 800c00a:	4603      	mov	r3, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	ec44 3b10 	vmov	d0, r3, r4
 800c012:	f006 fa0f 	bl	8012434 <sqrt>
 800c016:	ec54 3b10 	vmov	r3, r4, d0
 800c01a:	4618      	mov	r0, r3
 800c01c:	4621      	mov	r1, r4
 800c01e:	f7f4 fdbb 	bl	8000b98 <__aeabi_d2f>
 800c022:	4602      	mov	r2, r0
 800c024:	4b20      	ldr	r3, [pc, #128]	; (800c0a8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800c026:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800c028:	4b1f      	ldr	r3, [pc, #124]	; (800c0a8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800c02a:	edd3 7a00 	vldr	s15, [r3]
 800c02e:	eef1 7a67 	vneg.f32	s15, s15
 800c032:	4b07      	ldr	r3, [pc, #28]	; (800c050 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800c034:	edc3 7a00 	vstr	s15, [r3]
 800c038:	e065      	b.n	800c106 <HAL_TIM_PeriodElapsedCallback+0x686>
 800c03a:	bf00      	nop
 800c03c:	f3af 8000 	nop.w
 800c040:	d2f1a9fc 	.word	0xd2f1a9fc
 800c044:	3f50624d 	.word	0x3f50624d
 800c048:	d7653223 	.word	0xd7653223
 800c04c:	3fe26e40 	.word	0x3fe26e40
 800c050:	200001d8 	.word	0x200001d8
 800c054:	20000fac 	.word	0x20000fac
 800c058:	200001dc 	.word	0x200001dc
 800c05c:	200002f4 	.word	0x200002f4
 800c060:	20000c4c 	.word	0x20000c4c
 800c064:	200007b8 	.word	0x200007b8
 800c068:	20000140 	.word	0x20000140
 800c06c:	20000fa8 	.word	0x20000fa8
 800c070:	20000148 	.word	0x20000148
 800c074:	20000b30 	.word	0x20000b30
 800c078:	200007bc 	.word	0x200007bc
 800c07c:	20000494 	.word	0x20000494
 800c080:	20000fc4 	.word	0x20000fc4
 800c084:	20000b9c 	.word	0x20000b9c
 800c088:	20000adc 	.word	0x20000adc
 800c08c:	20000144 	.word	0x20000144
 800c090:	200012ec 	.word	0x200012ec
 800c094:	20000be4 	.word	0x20000be4
 800c098:	20000c34 	.word	0x20000c34
 800c09c:	20000c3c 	.word	0x20000c3c
 800c0a0:	20000fb8 	.word	0x20000fb8
 800c0a4:	20000d9c 	.word	0x20000d9c
 800c0a8:	20000c40 	.word	0x20000c40
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800c0ac:	4bc6      	ldr	r3, [pc, #792]	; (800c3c8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800c0ae:	edd3 7a00 	vldr	s15, [r3]
 800c0b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c0b6:	4bc5      	ldr	r3, [pc, #788]	; (800c3cc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800c0b8:	edd3 7a00 	vldr	s15, [r3]
 800c0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c0:	eef1 7a67 	vneg.f32	s15, s15
 800c0c4:	ee17 3a90 	vmov	r3, s15
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7f4 fa35 	bl	8000538 <__aeabi_f2d>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	ec44 3b10 	vmov	d0, r3, r4
 800c0d6:	f006 f9ad 	bl	8012434 <sqrt>
 800c0da:	ec54 3b10 	vmov	r3, r4, d0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	f7f4 fd59 	bl	8000b98 <__aeabi_d2f>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	eef1 7a67 	vneg.f32	s15, s15
 800c0f0:	4bb7      	ldr	r3, [pc, #732]	; (800c3d0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800c0f2:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800c0f6:	4bb6      	ldr	r3, [pc, #728]	; (800c3d0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800c0f8:	edd3 7a00 	vldr	s15, [r3]
 800c0fc:	eef1 7a67 	vneg.f32	s15, s15
 800c100:	4bb4      	ldr	r3, [pc, #720]	; (800c3d4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800c102:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800c106:	4bb2      	ldr	r3, [pc, #712]	; (800c3d0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800c108:	ed93 7a00 	vldr	s14, [r3]
 800c10c:	4bb2      	ldr	r3, [pc, #712]	; (800c3d8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800c10e:	edd3 7a00 	vldr	s15, [r3]
 800c112:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c116:	4bb1      	ldr	r3, [pc, #708]	; (800c3dc <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800c118:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c11c:	4baf      	ldr	r3, [pc, #700]	; (800c3dc <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800c11e:	edd3 7a00 	vldr	s15, [r3]
 800c122:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c12a:	4bad      	ldr	r3, [pc, #692]	; (800c3e0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800c12c:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c130:	4ba8      	ldr	r3, [pc, #672]	; (800c3d4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800c132:	ed93 7a00 	vldr	s14, [r3]
 800c136:	4bab      	ldr	r3, [pc, #684]	; (800c3e4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800c138:	edd3 7a00 	vldr	s15, [r3]
 800c13c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c140:	4ba9      	ldr	r3, [pc, #676]	; (800c3e8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800c142:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c146:	4ba8      	ldr	r3, [pc, #672]	; (800c3e8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800c148:	edd3 7a00 	vldr	s15, [r3]
 800c14c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c150:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c154:	4ba5      	ldr	r3, [pc, #660]	; (800c3ec <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800c156:	edc3 7a00 	vstr	s15, [r3]
		}

		if(MF.FLAG.GYRO){
 800c15a:	4ba5      	ldr	r3, [pc, #660]	; (800c3f0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 80ed 	beq.w	800c344 <HAL_TIM_PeriodElapsedCallback+0x8c4>
			target_omega_z += target_degaccel_z * 0.001;
 800c16a:	4ba2      	ldr	r3, [pc, #648]	; (800c3f4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4618      	mov	r0, r3
 800c170:	f7f4 f9e2 	bl	8000538 <__aeabi_f2d>
 800c174:	a390      	add	r3, pc, #576	; (adr r3, 800c3b8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f7f4 fa35 	bl	80005e8 <__aeabi_dmul>
 800c17e:	4603      	mov	r3, r0
 800c180:	460c      	mov	r4, r1
 800c182:	4625      	mov	r5, r4
 800c184:	461c      	mov	r4, r3
 800c186:	4b9c      	ldr	r3, [pc, #624]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7f4 f9d4 	bl	8000538 <__aeabi_f2d>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4620      	mov	r0, r4
 800c196:	4629      	mov	r1, r5
 800c198:	f7f4 f870 	bl	800027c <__adddf3>
 800c19c:	4603      	mov	r3, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	f7f4 fcf8 	bl	8000b98 <__aeabi_d2f>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	4b93      	ldr	r3, [pc, #588]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c1ac:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800c1ae:	4b92      	ldr	r3, [pc, #584]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c1b0:	ed93 7a00 	vldr	s14, [r3]
 800c1b4:	4b91      	ldr	r3, [pc, #580]	; (800c3fc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800c1b6:	edd3 7a00 	vldr	s15, [r3]
 800c1ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	dd03      	ble.n	800c1cc <HAL_TIM_PeriodElapsedCallback+0x74c>
 800c1c4:	4b8d      	ldr	r3, [pc, #564]	; (800c3fc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800c1c6:	edd3 7a00 	vldr	s15, [r3]
 800c1ca:	e002      	b.n	800c1d2 <HAL_TIM_PeriodElapsedCallback+0x752>
 800c1cc:	4b8a      	ldr	r3, [pc, #552]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c1ce:	edd3 7a00 	vldr	s15, [r3]
 800c1d2:	4b8b      	ldr	r3, [pc, #556]	; (800c400 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800c1d4:	ed93 7a00 	vldr	s14, [r3]
 800c1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e0:	dd10      	ble.n	800c204 <HAL_TIM_PeriodElapsedCallback+0x784>
 800c1e2:	4b85      	ldr	r3, [pc, #532]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c1e4:	ed93 7a00 	vldr	s14, [r3]
 800c1e8:	4b84      	ldr	r3, [pc, #528]	; (800c3fc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800c1ea:	edd3 7a00 	vldr	s15, [r3]
 800c1ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f6:	dd02      	ble.n	800c1fe <HAL_TIM_PeriodElapsedCallback+0x77e>
 800c1f8:	4b80      	ldr	r3, [pc, #512]	; (800c3fc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	e004      	b.n	800c208 <HAL_TIM_PeriodElapsedCallback+0x788>
 800c1fe:	4b7e      	ldr	r3, [pc, #504]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	e001      	b.n	800c208 <HAL_TIM_PeriodElapsedCallback+0x788>
 800c204:	4b7e      	ldr	r3, [pc, #504]	; (800c400 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a7b      	ldr	r2, [pc, #492]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c20a:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 800c20c:	4b7d      	ldr	r3, [pc, #500]	; (800c404 <HAL_TIM_PeriodElapsedCallback+0x984>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f7f4 f991 	bl	8000538 <__aeabi_f2d>
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	4b77      	ldr	r3, [pc, #476]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c21c:	edd3 7a00 	vldr	s15, [r3]
 800c220:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800c408 <HAL_TIM_PeriodElapsedCallback+0x988>
 800c224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c228:	ee16 0a90 	vmov	r0, s13
 800c22c:	f7f4 f984 	bl	8000538 <__aeabi_f2d>
 800c230:	a363      	add	r3, pc, #396	; (adr r3, 800c3c0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f7f4 f9d7 	bl	80005e8 <__aeabi_dmul>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4610      	mov	r0, r2
 800c240:	4619      	mov	r1, r3
 800c242:	f04f 0200 	mov.w	r2, #0
 800c246:	4b71      	ldr	r3, [pc, #452]	; (800c40c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800c248:	f7f4 f9ce 	bl	80005e8 <__aeabi_dmul>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4610      	mov	r0, r2
 800c252:	4619      	mov	r1, r3
 800c254:	f04f 0200 	mov.w	r2, #0
 800c258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c25c:	f7f4 faee 	bl	800083c <__aeabi_ddiv>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f808 	bl	800027c <__adddf3>
 800c26c:	4603      	mov	r3, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	4618      	mov	r0, r3
 800c272:	4621      	mov	r1, r4
 800c274:	f7f4 fc90 	bl	8000b98 <__aeabi_d2f>
 800c278:	4602      	mov	r2, r0
 800c27a:	4b55      	ldr	r3, [pc, #340]	; (800c3d0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800c27c:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 800c27e:	4b61      	ldr	r3, [pc, #388]	; (800c404 <HAL_TIM_PeriodElapsedCallback+0x984>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4618      	mov	r0, r3
 800c284:	f7f4 f958 	bl	8000538 <__aeabi_f2d>
 800c288:	4604      	mov	r4, r0
 800c28a:	460d      	mov	r5, r1
 800c28c:	4b5a      	ldr	r3, [pc, #360]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c28e:	edd3 7a00 	vldr	s15, [r3]
 800c292:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800c408 <HAL_TIM_PeriodElapsedCallback+0x988>
 800c296:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c29a:	ee16 0a90 	vmov	r0, s13
 800c29e:	f7f4 f94b 	bl	8000538 <__aeabi_f2d>
 800c2a2:	a347      	add	r3, pc, #284	; (adr r3, 800c3c0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f4 f99e 	bl	80005e8 <__aeabi_dmul>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	f04f 0200 	mov.w	r2, #0
 800c2b8:	4b54      	ldr	r3, [pc, #336]	; (800c40c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 800c2ba:	f7f4 f995 	bl	80005e8 <__aeabi_dmul>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	f04f 0200 	mov.w	r2, #0
 800c2ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2ce:	f7f4 fab5 	bl	800083c <__aeabi_ddiv>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	4629      	mov	r1, r5
 800c2da:	f7f3 ffcd 	bl	8000278 <__aeabi_dsub>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	f7f4 fc57 	bl	8000b98 <__aeabi_d2f>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	4b39      	ldr	r3, [pc, #228]	; (800c3d4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800c2ee:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800c2f0:	4b37      	ldr	r3, [pc, #220]	; (800c3d0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 800c2f2:	ed93 7a00 	vldr	s14, [r3]
 800c2f6:	4b38      	ldr	r3, [pc, #224]	; (800c3d8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800c2f8:	edd3 7a00 	vldr	s15, [r3]
 800c2fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c300:	4b36      	ldr	r3, [pc, #216]	; (800c3dc <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800c302:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c306:	4b35      	ldr	r3, [pc, #212]	; (800c3dc <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800c308:	edd3 7a00 	vldr	s15, [r3]
 800c30c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c310:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c314:	4b32      	ldr	r3, [pc, #200]	; (800c3e0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 800c316:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c31a:	4b2e      	ldr	r3, [pc, #184]	; (800c3d4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800c31c:	ed93 7a00 	vldr	s14, [r3]
 800c320:	4b30      	ldr	r3, [pc, #192]	; (800c3e4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800c322:	edd3 7a00 	vldr	s15, [r3]
 800c326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c32a:	4b2f      	ldr	r3, [pc, #188]	; (800c3e8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800c32c:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c330:	4b2d      	ldr	r3, [pc, #180]	; (800c3e8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800c332:	edd3 7a00 	vldr	s15, [r3]
 800c336:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c33a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c33e:	4b2b      	ldr	r3, [pc, #172]	; (800c3ec <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800c340:	edc3 7a00 	vstr	s15, [r3]
		}

		if(MF.FLAG.GYRO2){
 800c344:	4b2a      	ldr	r3, [pc, #168]	; (800c3f0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 8138 	beq.w	800c5c4 <HAL_TIM_PeriodElapsedCallback+0xb44>
			target_omega_z += target_degaccel_z * 0.001;
 800c354:	4b27      	ldr	r3, [pc, #156]	; (800c3f4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7f4 f8ed 	bl	8000538 <__aeabi_f2d>
 800c35e:	a316      	add	r3, pc, #88	; (adr r3, 800c3b8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f7f4 f940 	bl	80005e8 <__aeabi_dmul>
 800c368:	4603      	mov	r3, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	4625      	mov	r5, r4
 800c36e:	461c      	mov	r4, r3
 800c370:	4b21      	ldr	r3, [pc, #132]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4618      	mov	r0, r3
 800c376:	f7f4 f8df 	bl	8000538 <__aeabi_f2d>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	4620      	mov	r0, r4
 800c380:	4629      	mov	r1, r5
 800c382:	f7f3 ff7b 	bl	800027c <__adddf3>
 800c386:	4603      	mov	r3, r0
 800c388:	460c      	mov	r4, r1
 800c38a:	4618      	mov	r0, r3
 800c38c:	4621      	mov	r1, r4
 800c38e:	f7f4 fc03 	bl	8000b98 <__aeabi_d2f>
 800c392:	4602      	mov	r2, r0
 800c394:	4b18      	ldr	r3, [pc, #96]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c396:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800c398:	4b17      	ldr	r3, [pc, #92]	; (800c3f8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800c39a:	ed93 7a00 	vldr	s14, [r3]
 800c39e:	4b17      	ldr	r3, [pc, #92]	; (800c3fc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800c3a0:	edd3 7a00 	vldr	s15, [r3]
 800c3a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ac:	dd30      	ble.n	800c410 <HAL_TIM_PeriodElapsedCallback+0x990>
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 800c3b0:	edd3 7a00 	vldr	s15, [r3]
 800c3b4:	e02f      	b.n	800c416 <HAL_TIM_PeriodElapsedCallback+0x996>
 800c3b6:	bf00      	nop
 800c3b8:	d2f1a9fc 	.word	0xd2f1a9fc
 800c3bc:	3f50624d 	.word	0x3f50624d
 800c3c0:	54442d18 	.word	0x54442d18
 800c3c4:	400921fb 	.word	0x400921fb
 800c3c8:	20000d9c 	.word	0x20000d9c
 800c3cc:	20000fb8 	.word	0x20000fb8
 800c3d0:	20000c40 	.word	0x20000c40
 800c3d4:	200001d8 	.word	0x200001d8
 800c3d8:	20000b30 	.word	0x20000b30
 800c3dc:	20000ba0 	.word	0x20000ba0
 800c3e0:	20000be8 	.word	0x20000be8
 800c3e4:	200002f4 	.word	0x200002f4
 800c3e8:	20000c4c 	.word	0x20000c4c
 800c3ec:	200007b8 	.word	0x200007b8
 800c3f0:	20000fa8 	.word	0x20000fa8
 800c3f4:	20000b98 	.word	0x20000b98
 800c3f8:	200001e0 	.word	0x200001e0
 800c3fc:	20000b24 	.word	0x20000b24
 800c400:	200002f0 	.word	0x200002f0
 800c404:	20000b34 	.word	0x20000b34
 800c408:	43340000 	.word	0x43340000
 800c40c:	40508000 	.word	0x40508000
 800c410:	4bbb      	ldr	r3, [pc, #748]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c412:	edd3 7a00 	vldr	s15, [r3]
 800c416:	4bbb      	ldr	r3, [pc, #748]	; (800c704 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800c418:	ed93 7a00 	vldr	s14, [r3]
 800c41c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c424:	dd10      	ble.n	800c448 <HAL_TIM_PeriodElapsedCallback+0x9c8>
 800c426:	4bb6      	ldr	r3, [pc, #728]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c428:	ed93 7a00 	vldr	s14, [r3]
 800c42c:	4bb6      	ldr	r3, [pc, #728]	; (800c708 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800c42e:	edd3 7a00 	vldr	s15, [r3]
 800c432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c43a:	dd02      	ble.n	800c442 <HAL_TIM_PeriodElapsedCallback+0x9c2>
 800c43c:	4bb2      	ldr	r3, [pc, #712]	; (800c708 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	e004      	b.n	800c44c <HAL_TIM_PeriodElapsedCallback+0x9cc>
 800c442:	4baf      	ldr	r3, [pc, #700]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	e001      	b.n	800c44c <HAL_TIM_PeriodElapsedCallback+0x9cc>
 800c448:	4bae      	ldr	r3, [pc, #696]	; (800c704 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4aac      	ldr	r2, [pc, #688]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c44e:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800c450:	4bab      	ldr	r3, [pc, #684]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c452:	ed93 8a00 	vldr	s16, [r3]
 800c456:	f7ff fab3 	bl	800b9c0 <gyro_read_z>
 800c45a:	eef0 7a40 	vmov.f32	s15, s0
 800c45e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800c462:	4baa      	ldr	r3, [pc, #680]	; (800c70c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800c464:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800c468:	4ba9      	ldr	r3, [pc, #676]	; (800c710 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f4 f863 	bl	8000538 <__aeabi_f2d>
 800c472:	4604      	mov	r4, r0
 800c474:	460d      	mov	r5, r1
 800c476:	4ba5      	ldr	r3, [pc, #660]	; (800c70c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800c478:	edd3 7a00 	vldr	s15, [r3]
 800c47c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c480:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c484:	4b9e      	ldr	r3, [pc, #632]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c486:	edd3 7a00 	vldr	s15, [r3]
 800c48a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c48e:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800c714 <HAL_TIM_PeriodElapsedCallback+0xc94>
 800c492:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c496:	ee16 0a90 	vmov	r0, s13
 800c49a:	f7f4 f84d 	bl	8000538 <__aeabi_f2d>
 800c49e:	a396      	add	r3, pc, #600	; (adr r3, 800c6f8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f4 f8a0 	bl	80005e8 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	f04f 0200 	mov.w	r2, #0
 800c4b4:	4b98      	ldr	r3, [pc, #608]	; (800c718 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 800c4b6:	f7f4 f897 	bl	80005e8 <__aeabi_dmul>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f04f 0200 	mov.w	r2, #0
 800c4c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4ca:	f7f4 f9b7 	bl	800083c <__aeabi_ddiv>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f7f3 fecf 	bl	8000278 <__aeabi_dsub>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	4618      	mov	r0, r3
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	f7f4 fb59 	bl	8000b98 <__aeabi_d2f>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	4b8c      	ldr	r3, [pc, #560]	; (800c71c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 800c4ea:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800c4ec:	4b88      	ldr	r3, [pc, #544]	; (800c710 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7f4 f821 	bl	8000538 <__aeabi_f2d>
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	4b84      	ldr	r3, [pc, #528]	; (800c70c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800c4fc:	edd3 7a00 	vldr	s15, [r3]
 800c500:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c504:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c508:	4b7d      	ldr	r3, [pc, #500]	; (800c700 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800c50a:	edd3 7a00 	vldr	s15, [r3]
 800c50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c512:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800c714 <HAL_TIM_PeriodElapsedCallback+0xc94>
 800c516:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c51a:	ee16 0a90 	vmov	r0, s13
 800c51e:	f7f4 f80b 	bl	8000538 <__aeabi_f2d>
 800c522:	a375      	add	r3, pc, #468	; (adr r3, 800c6f8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f4 f85e 	bl	80005e8 <__aeabi_dmul>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4610      	mov	r0, r2
 800c532:	4619      	mov	r1, r3
 800c534:	f04f 0200 	mov.w	r2, #0
 800c538:	4b77      	ldr	r3, [pc, #476]	; (800c718 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 800c53a:	f7f4 f855 	bl	80005e8 <__aeabi_dmul>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4610      	mov	r0, r2
 800c544:	4619      	mov	r1, r3
 800c546:	f04f 0200 	mov.w	r2, #0
 800c54a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c54e:	f7f4 f975 	bl	800083c <__aeabi_ddiv>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f3 fe8f 	bl	800027c <__adddf3>
 800c55e:	4603      	mov	r3, r0
 800c560:	460c      	mov	r4, r1
 800c562:	4618      	mov	r0, r3
 800c564:	4621      	mov	r1, r4
 800c566:	f7f4 fb17 	bl	8000b98 <__aeabi_d2f>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4b6c      	ldr	r3, [pc, #432]	; (800c720 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 800c56e:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800c570:	4b6a      	ldr	r3, [pc, #424]	; (800c71c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 800c572:	ed93 7a00 	vldr	s14, [r3]
 800c576:	4b6b      	ldr	r3, [pc, #428]	; (800c724 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 800c578:	edd3 7a00 	vldr	s15, [r3]
 800c57c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c580:	4b69      	ldr	r3, [pc, #420]	; (800c728 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 800c582:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c586:	4b68      	ldr	r3, [pc, #416]	; (800c728 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 800c588:	edd3 7a00 	vldr	s15, [r3]
 800c58c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c590:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c594:	4b65      	ldr	r3, [pc, #404]	; (800c72c <HAL_TIM_PeriodElapsedCallback+0xcac>)
 800c596:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c59a:	4b61      	ldr	r3, [pc, #388]	; (800c720 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 800c59c:	ed93 7a00 	vldr	s14, [r3]
 800c5a0:	4b63      	ldr	r3, [pc, #396]	; (800c730 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 800c5a2:	edd3 7a00 	vldr	s15, [r3]
 800c5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5aa:	4b62      	ldr	r3, [pc, #392]	; (800c734 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800c5ac:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c5b0:	4b60      	ldr	r3, [pc, #384]	; (800c734 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800c5b2:	edd3 7a00 	vldr	s15, [r3]
 800c5b6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c5ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5be:	4b5e      	ldr	r3, [pc, #376]	; (800c738 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800c5c0:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800c5c4:	4b5d      	ldr	r3, [pc, #372]	; (800c73c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	4b5d      	ldr	r3, [pc, #372]	; (800c740 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 800c5cc:	fb83 3102 	smull	r3, r1, r3, r2
 800c5d0:	17d3      	asrs	r3, r2, #31
 800c5d2:	1ac9      	subs	r1, r1, r3
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	440b      	add	r3, r1
 800c5da:	1ad1      	subs	r1, r2, r3
 800c5dc:	b2ca      	uxtb	r2, r1
 800c5de:	4b57      	ldr	r3, [pc, #348]	; (800c73c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 800c5e0:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800c5e2:	4b56      	ldr	r3, [pc, #344]	; (800c73c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d044      	beq.n	800c674 <HAL_TIM_PeriodElapsedCallback+0xbf4>
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	f000 80b8 	beq.w	800c760 <HAL_TIM_PeriodElapsedCallback+0xce0>
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f040 81dd 	bne.w	800c9b0 <HAL_TIM_PeriodElapsedCallback+0xf30>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c5fc:	4851      	ldr	r0, [pc, #324]	; (800c744 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800c5fe:	f7f5 fe81 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c602:	2300      	movs	r3, #0
 800c604:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c606:	e002      	b.n	800c60e <HAL_TIM_PeriodElapsedCallback+0xb8e>
 800c608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c60a:	3301      	adds	r3, #1
 800c60c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c60e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c610:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c614:	4293      	cmp	r3, r2
 800c616:	d9f7      	bls.n	800c608 <HAL_TIM_PeriodElapsedCallback+0xb88>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800c618:	2103      	movs	r1, #3
 800c61a:	484b      	ldr	r0, [pc, #300]	; (800c748 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 800c61c:	f001 f92c 	bl	800d878 <get_adc_value>
 800c620:	4603      	mov	r3, r0
 800c622:	461a      	mov	r2, r3
 800c624:	4b49      	ldr	r3, [pc, #292]	; (800c74c <HAL_TIM_PeriodElapsedCallback+0xccc>)
 800c626:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800c628:	2200      	movs	r2, #0
 800c62a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c62e:	4845      	ldr	r0, [pc, #276]	; (800c744 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800c630:	f7f5 fe68 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800c634:	2201      	movs	r2, #1
 800c636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c63a:	4845      	ldr	r0, [pc, #276]	; (800c750 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 800c63c:	f7f5 fe62 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c640:	2300      	movs	r3, #0
 800c642:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c644:	e002      	b.n	800c64c <HAL_TIM_PeriodElapsedCallback+0xbcc>
 800c646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c648:	3301      	adds	r3, #1
 800c64a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c64c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c64e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c652:	4293      	cmp	r3, r2
 800c654:	d9f7      	bls.n	800c646 <HAL_TIM_PeriodElapsedCallback+0xbc6>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800c656:	2101      	movs	r1, #1
 800c658:	483b      	ldr	r0, [pc, #236]	; (800c748 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 800c65a:	f001 f90d 	bl	800d878 <get_adc_value>
 800c65e:	4603      	mov	r3, r0
 800c660:	461a      	mov	r2, r3
 800c662:	4b3c      	ldr	r3, [pc, #240]	; (800c754 <HAL_TIM_PeriodElapsedCallback+0xcd4>)
 800c664:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800c666:	2200      	movs	r2, #0
 800c668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c66c:	4838      	ldr	r0, [pc, #224]	; (800c750 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 800c66e:	f7f5 fe49 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800c672:	e19d      	b.n	800c9b0 <HAL_TIM_PeriodElapsedCallback+0xf30>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800c674:	2201      	movs	r2, #1
 800c676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c67a:	4832      	ldr	r0, [pc, #200]	; (800c744 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800c67c:	f7f5 fe42 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c680:	2300      	movs	r3, #0
 800c682:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c684:	e002      	b.n	800c68c <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800c686:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c688:	3301      	adds	r3, #1
 800c68a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c68c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c68e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c692:	4293      	cmp	r3, r2
 800c694:	d9f7      	bls.n	800c686 <HAL_TIM_PeriodElapsedCallback+0xc06>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800c696:	2102      	movs	r1, #2
 800c698:	482b      	ldr	r0, [pc, #172]	; (800c748 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 800c69a:	f001 f8ed 	bl	800d878 <get_adc_value>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b2d      	ldr	r3, [pc, #180]	; (800c758 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 800c6a4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6ac:	4825      	ldr	r0, [pc, #148]	; (800c744 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800c6ae:	f7f5 fe29 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c6b8:	4822      	ldr	r0, [pc, #136]	; (800c744 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800c6ba:	f7f5 fe23 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800c6be:	2300      	movs	r3, #0
 800c6c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c6c2:	e002      	b.n	800c6ca <HAL_TIM_PeriodElapsedCallback+0xc4a>
 800c6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c6ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6cc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d9f7      	bls.n	800c6c4 <HAL_TIM_PeriodElapsedCallback+0xc44>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	481c      	ldr	r0, [pc, #112]	; (800c748 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 800c6d8:	f001 f8ce 	bl	800d878 <get_adc_value>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4b1e      	ldr	r3, [pc, #120]	; (800c75c <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800c6e2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c6ea:	4816      	ldr	r0, [pc, #88]	; (800c744 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800c6ec:	f7f5 fe0a 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800c6f0:	e15e      	b.n	800c9b0 <HAL_TIM_PeriodElapsedCallback+0xf30>
 800c6f2:	bf00      	nop
 800c6f4:	f3af 8000 	nop.w
 800c6f8:	54442d18 	.word	0x54442d18
 800c6fc:	400921fb 	.word	0x400921fb
 800c700:	200001e0 	.word	0x200001e0
 800c704:	200002f0 	.word	0x200002f0
 800c708:	20000b24 	.word	0x20000b24
 800c70c:	20000490 	.word	0x20000490
 800c710:	20000b34 	.word	0x20000b34
 800c714:	43340000 	.word	0x43340000
 800c718:	40508000 	.word	0x40508000
 800c71c:	20000c40 	.word	0x20000c40
 800c720:	200001d8 	.word	0x200001d8
 800c724:	20000b30 	.word	0x20000b30
 800c728:	20000ba0 	.word	0x20000ba0
 800c72c:	20000be8 	.word	0x20000be8
 800c730:	200002f4 	.word	0x200002f4
 800c734:	20000c4c 	.word	0x20000c4c
 800c738:	200007b8 	.word	0x200007b8
 800c73c:	20000fbf 	.word	0x20000fbf
 800c740:	55555556 	.word	0x55555556
 800c744:	40020800 	.word	0x40020800
 800c748:	20000b40 	.word	0x20000b40
 800c74c:	20000b3c 	.word	0x20000b3c
 800c750:	40020000 	.word	0x40020000
 800c754:	20000fa4 	.word	0x20000fa4
 800c758:	20000d98 	.word	0x20000d98
 800c75c:	20000c44 	.word	0x20000c44

		  case 2:
				//
				if(MF.FLAG.WCTRL && v_flag == 0){
 800c760:	4bb2      	ldr	r3, [pc, #712]	; (800ca2c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 80cc 	beq.w	800c908 <HAL_TIM_PeriodElapsedCallback+0xe88>
 800c770:	4baf      	ldr	r3, [pc, #700]	; (800ca30 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	f040 80c7 	bne.w	800c908 <HAL_TIM_PeriodElapsedCallback+0xe88>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c77e:	2300      	movs	r3, #0
 800c780:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 800c782:	4bac      	ldr	r3, [pc, #688]	; (800ca34 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	b29a      	uxth	r2, r3
 800c788:	4bab      	ldr	r3, [pc, #684]	; (800ca38 <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	b29b      	uxth	r3, r3
 800c790:	b21a      	sxth	r2, r3
 800c792:	4baa      	ldr	r3, [pc, #680]	; (800ca3c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800c794:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 800c796:	4baa      	ldr	r3, [pc, #680]	; (800ca40 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	4ba9      	ldr	r3, [pc, #676]	; (800ca44 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	b21a      	sxth	r2, r3
 800c7a6:	4ba8      	ldr	r3, [pc, #672]	; (800ca48 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800c7a8:	801a      	strh	r2, [r3, #0]

					if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 800c7aa:	4ba4      	ldr	r3, [pc, #656]	; (800ca3c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800c7ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7b0:	2b32      	cmp	r3, #50	; 0x32
 800c7b2:	dc04      	bgt.n	800c7be <HAL_TIM_PeriodElapsedCallback+0xd3e>
 800c7b4:	4ba4      	ldr	r3, [pc, #656]	; (800ca48 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800c7b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ba:	2b19      	cmp	r3, #25
 800c7bc:	dd7e      	ble.n	800c8bc <HAL_TIM_PeriodElapsedCallback+0xe3c>
						if(CTRL_BASE_L < dif_l){
 800c7be:	4b9f      	ldr	r3, [pc, #636]	; (800ca3c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800c7c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7c4:	2b32      	cmp	r3, #50	; 0x32
 800c7c6:	dd38      	ble.n	800c83a <HAL_TIM_PeriodElapsedCallback+0xdba>
							dwl_tmp += CTRL_CONT_W * 0.5 * dif_l;				//a比例制御値を決定
 800c7c8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7f3 fea1 	bl	8000514 <__aeabi_i2d>
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	460d      	mov	r5, r1
 800c7d6:	4b99      	ldr	r3, [pc, #612]	; (800ca3c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800c7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7f3 fe99 	bl	8000514 <__aeabi_i2d>
 800c7e2:	f04f 0200 	mov.w	r2, #0
 800c7e6:	4b99      	ldr	r3, [pc, #612]	; (800ca4c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 800c7e8:	f7f3 fefe 	bl	80005e8 <__aeabi_dmul>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f7f3 fd42 	bl	800027c <__adddf3>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	4621      	mov	r1, r4
 800c800:	f7f4 f9a2 	bl	8000b48 <__aeabi_d2iz>
 800c804:	4603      	mov	r3, r0
 800c806:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += -1 * CTRL_CONT_W * dif_l;				//a比例制御値を決定
 800c808:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c80c:	ee07 3a90 	vmov	s15, r3
 800c810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c814:	4b89      	ldr	r3, [pc, #548]	; (800ca3c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 800c816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c822:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800c826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c82a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c82e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c832:	ee17 3a90 	vmov	r3, s15
 800c836:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c838:	e03c      	b.n	800c8b4 <HAL_TIM_PeriodElapsedCallback+0xe34>
						}
						else if(CTRL_BASE_R < dif_r){
 800c83a:	4b83      	ldr	r3, [pc, #524]	; (800ca48 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800c83c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c840:	2b19      	cmp	r3, #25
 800c842:	dd37      	ble.n	800c8b4 <HAL_TIM_PeriodElapsedCallback+0xe34>
							dwl_tmp += -1 * CTRL_CONT_W * 0.5 * dif_r;			//a比例制御値を決定
 800c844:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c848:	4618      	mov	r0, r3
 800c84a:	f7f3 fe63 	bl	8000514 <__aeabi_i2d>
 800c84e:	4604      	mov	r4, r0
 800c850:	460d      	mov	r5, r1
 800c852:	4b7d      	ldr	r3, [pc, #500]	; (800ca48 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800c854:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7f3 fe5b 	bl	8000514 <__aeabi_i2d>
 800c85e:	f04f 0200 	mov.w	r2, #0
 800c862:	4b7b      	ldr	r3, [pc, #492]	; (800ca50 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 800c864:	f7f3 fec0 	bl	80005e8 <__aeabi_dmul>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	4620      	mov	r0, r4
 800c86e:	4629      	mov	r1, r5
 800c870:	f7f3 fd04 	bl	800027c <__adddf3>
 800c874:	4603      	mov	r3, r0
 800c876:	460c      	mov	r4, r1
 800c878:	4618      	mov	r0, r3
 800c87a:	4621      	mov	r1, r4
 800c87c:	f7f4 f964 	bl	8000b48 <__aeabi_d2iz>
 800c880:	4603      	mov	r3, r0
 800c882:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += CTRL_CONT_W * dif_r;						//a比例制御値を決定
 800c884:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c888:	ee07 3a90 	vmov	s15, r3
 800c88c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c890:	4b6d      	ldr	r3, [pc, #436]	; (800ca48 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800c892:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c896:	ee07 3a90 	vmov	s15, r3
 800c89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c89e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c8a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c8a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8ae:	ee17 3a90 	vmov	r3, s15
 800c8b2:	857b      	strh	r3, [r7, #42]	; 0x2a
						}
						W_G_flag = 1;
 800c8b4:	4b67      	ldr	r3, [pc, #412]	; (800ca54 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	e002      	b.n	800c8c2 <HAL_TIM_PeriodElapsedCallback+0xe42>
					}else{
						W_G_flag = 0;
 800c8bc:	4b65      	ldr	r3, [pc, #404]	; (800ca54 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	701a      	strb	r2, [r3, #0]
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800c8c2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c8c6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c8ca:	dd08      	ble.n	800c8de <HAL_TIM_PeriodElapsedCallback+0xe5e>
 800c8cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c8d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8d4:	bfa8      	it	ge
 800c8d6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800c8da:	b21b      	sxth	r3, r3
 800c8dc:	e000      	b.n	800c8e0 <HAL_TIM_PeriodElapsedCallback+0xe60>
 800c8de:	4b5e      	ldr	r3, [pc, #376]	; (800ca58 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800c8e0:	4a5e      	ldr	r2, [pc, #376]	; (800ca5c <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 800c8e2:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800c8e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c8e8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c8ec:	dd08      	ble.n	800c900 <HAL_TIM_PeriodElapsedCallback+0xe80>
 800c8ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800c8f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8f6:	bfa8      	it	ge
 800c8f8:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800c8fc:	b21b      	sxth	r3, r3
 800c8fe:	e000      	b.n	800c902 <HAL_TIM_PeriodElapsedCallback+0xe82>
 800c900:	4b55      	ldr	r3, [pc, #340]	; (800ca58 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800c902:	4a57      	ldr	r2, [pc, #348]	; (800ca60 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 800c904:	8013      	strh	r3, [r2, #0]
				if(MF.FLAG.WCTRL && v_flag == 0){
 800c906:	e006      	b.n	800c916 <HAL_TIM_PeriodElapsedCallback+0xe96>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800c908:	2100      	movs	r1, #0
 800c90a:	4b55      	ldr	r3, [pc, #340]	; (800ca60 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 800c90c:	460a      	mov	r2, r1
 800c90e:	801a      	strh	r2, [r3, #0]
 800c910:	4b52      	ldr	r3, [pc, #328]	; (800ca5c <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 800c912:	460a      	mov	r2, r1
 800c914:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800c916:	4b45      	ldr	r3, [pc, #276]	; (800ca2c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d03d      	beq.n	800c9a0 <HAL_TIM_PeriodElapsedCallback+0xf20>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (degree_z - target_degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800c924:	4b4f      	ldr	r3, [pc, #316]	; (800ca64 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 800c926:	ed93 7a00 	vldr	s14, [r3]
 800c92a:	4b4f      	ldr	r3, [pc, #316]	; (800ca68 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 800c92c:	edd3 7a00 	vldr	s15, [r3]
 800c930:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c934:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c93c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c940:	ee17 3a90 	vmov	r3, s15
 800c944:	b21a      	sxth	r2, r3
 800c946:	4b49      	ldr	r3, [pc, #292]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c948:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800c94a:	4b48      	ldr	r3, [pc, #288]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	b21b      	sxth	r3, r3
 800c950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c954:	da05      	bge.n	800c962 <HAL_TIM_PeriodElapsedCallback+0xee2>
 800c956:	4b45      	ldr	r3, [pc, #276]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	b21b      	sxth	r3, r3
 800c95c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c960:	dd0c      	ble.n	800c97c <HAL_TIM_PeriodElapsedCallback+0xefc>
 800c962:	4b42      	ldr	r3, [pc, #264]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	b21b      	sxth	r3, r3
 800c968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c96c:	da03      	bge.n	800c976 <HAL_TIM_PeriodElapsedCallback+0xef6>
 800c96e:	4b3f      	ldr	r3, [pc, #252]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	b21b      	sxth	r3, r3
 800c974:	e003      	b.n	800c97e <HAL_TIM_PeriodElapsedCallback+0xefe>
 800c976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c97a:	e000      	b.n	800c97e <HAL_TIM_PeriodElapsedCallback+0xefe>
 800c97c:	4b36      	ldr	r3, [pc, #216]	; (800ca58 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800c97e:	4a3b      	ldr	r2, [pc, #236]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c980:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 800c982:	4b3a      	ldr	r3, [pc, #232]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	b21a      	sxth	r2, r3
 800c988:	4b39      	ldr	r3, [pc, #228]	; (800ca70 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800c98a:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 800c98c:	4b37      	ldr	r3, [pc, #220]	; (800ca6c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	b21b      	sxth	r3, r3
 800c992:	b29b      	uxth	r3, r3
 800c994:	425b      	negs	r3, r3
 800c996:	b29b      	uxth	r3, r3
 800c998:	b21a      	sxth	r2, r3
 800c99a:	4b36      	ldr	r3, [pc, #216]	; (800ca74 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 800c99c:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800c99e:	e006      	b.n	800c9ae <HAL_TIM_PeriodElapsedCallback+0xf2e>
					dgl = dgr = 0;
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	4b34      	ldr	r3, [pc, #208]	; (800ca74 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 800c9a4:	460a      	mov	r2, r1
 800c9a6:	801a      	strh	r2, [r3, #0]
 800c9a8:	4b31      	ldr	r3, [pc, #196]	; (800ca70 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800c9aa:	460a      	mov	r2, r1
 800c9ac:	801a      	strh	r2, [r3, #0]
				break;
 800c9ae:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800c9b0:	4b1e      	ldr	r3, [pc, #120]	; (800ca2c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 819e 	beq.w	800ccfc <HAL_TIM_PeriodElapsedCallback+0x127c>
			if(W_G_flag == 0){
 800c9c0:	4b24      	ldr	r3, [pc, #144]	; (800ca54 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d15b      	bne.n	800ca80 <HAL_TIM_PeriodElapsedCallback+0x1000>
				pulse_l = pulse_l + dgl + dwl;
 800c9c8:	4b29      	ldr	r3, [pc, #164]	; (800ca70 <HAL_TIM_PeriodElapsedCallback+0xff0>)
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	b21b      	sxth	r3, r3
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9d6:	4b28      	ldr	r3, [pc, #160]	; (800ca78 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 800c9d8:	edd3 7a00 	vldr	s15, [r3]
 800c9dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9e0:	4b1e      	ldr	r3, [pc, #120]	; (800ca5c <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b21b      	sxth	r3, r3
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <HAL_TIM_PeriodElapsedCallback+0xff8>)
 800c9f4:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800c9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ca74 <HAL_TIM_PeriodElapsedCallback+0xff4>)
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	b21b      	sxth	r3, r3
 800c9fe:	ee07 3a90 	vmov	s15, r3
 800ca02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca06:	4b1d      	ldr	r3, [pc, #116]	; (800ca7c <HAL_TIM_PeriodElapsedCallback+0xffc>)
 800ca08:	edd3 7a00 	vldr	s15, [r3]
 800ca0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca10:	4b13      	ldr	r3, [pc, #76]	; (800ca60 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 800ca12:	881b      	ldrh	r3, [r3, #0]
 800ca14:	b21b      	sxth	r3, r3
 800ca16:	ee07 3a90 	vmov	s15, r3
 800ca1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca22:	4b16      	ldr	r3, [pc, #88]	; (800ca7c <HAL_TIM_PeriodElapsedCallback+0xffc>)
 800ca24:	edc3 7a00 	vstr	s15, [r3]
 800ca28:	e048      	b.n	800cabc <HAL_TIM_PeriodElapsedCallback+0x103c>
 800ca2a:	bf00      	nop
 800ca2c:	20000fa8 	.word	0x20000fa8
 800ca30:	20000b28 	.word	0x20000b28
 800ca34:	20000b3c 	.word	0x20000b3c
 800ca38:	20000384 	.word	0x20000384
 800ca3c:	20000b90 	.word	0x20000b90
 800ca40:	20000fa4 	.word	0x20000fa4
 800ca44:	200002f8 	.word	0x200002f8
 800ca48:	20000bf2 	.word	0x20000bf2
 800ca4c:	3fd00000 	.word	0x3fd00000
 800ca50:	bfd00000 	.word	0xbfd00000
 800ca54:	20000c38 	.word	0x20000c38
 800ca58:	fffffc18 	.word	0xfffffc18
 800ca5c:	20000b38 	.word	0x20000b38
 800ca60:	20000fb4 	.word	0x20000fb4
 800ca64:	20000b9c 	.word	0x20000b9c
 800ca68:	20000c3c 	.word	0x20000c3c
 800ca6c:	20000c54 	.word	0x20000c54
 800ca70:	200001d4 	.word	0x200001d4
 800ca74:	20000b8e 	.word	0x20000b8e
 800ca78:	20000be8 	.word	0x20000be8
 800ca7c:	200007b8 	.word	0x200007b8
			}else{
				pulse_l = pulse_l + dwl;
 800ca80:	4bb9      	ldr	r3, [pc, #740]	; (800cd68 <HAL_TIM_PeriodElapsedCallback+0x12e8>)
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	b21b      	sxth	r3, r3
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca8e:	4bb7      	ldr	r3, [pc, #732]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800ca90:	edd3 7a00 	vldr	s15, [r3]
 800ca94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca98:	4bb4      	ldr	r3, [pc, #720]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800ca9a:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 800ca9e:	4bb4      	ldr	r3, [pc, #720]	; (800cd70 <HAL_TIM_PeriodElapsedCallback+0x12f0>)
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	b21b      	sxth	r3, r3
 800caa4:	ee07 3a90 	vmov	s15, r3
 800caa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800caac:	4bb1      	ldr	r3, [pc, #708]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800caae:	edd3 7a00 	vldr	s15, [r3]
 800cab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cab6:	4baf      	ldr	r3, [pc, #700]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cab8:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800cabc:	4bab      	ldr	r3, [pc, #684]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cabe:	edd3 7a00 	vldr	s15, [r3]
 800cac2:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800cd78 <HAL_TIM_PeriodElapsedCallback+0x12f8>
 800cac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800caca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cace:	bfcc      	ite	gt
 800cad0:	2301      	movgt	r3, #1
 800cad2:	2300      	movle	r3, #0
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	f083 0301 	eor.w	r3, r3, #1
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d111      	bne.n	800cb04 <HAL_TIM_PeriodElapsedCallback+0x1084>
 800cae0:	4ba2      	ldr	r3, [pc, #648]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cae2:	edd3 7a00 	vldr	s15, [r3]
 800cae6:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800cd7c <HAL_TIM_PeriodElapsedCallback+0x12fc>
 800caea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	bfcc      	ite	gt
 800caf4:	2301      	movgt	r3, #1
 800caf6:	2300      	movle	r3, #0
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	f083 0301 	eor.w	r3, r3, #1
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00e      	beq.n	800cb22 <HAL_TIM_PeriodElapsedCallback+0x10a2>
 800cb04:	4b99      	ldr	r3, [pc, #612]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cb06:	edd3 7a00 	vldr	s15, [r3]
 800cb0a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800cd78 <HAL_TIM_PeriodElapsedCallback+0x12f8>
 800cb0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb16:	dd02      	ble.n	800cb1e <HAL_TIM_PeriodElapsedCallback+0x109e>
 800cb18:	4b94      	ldr	r3, [pc, #592]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	e002      	b.n	800cb24 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 800cb1e:	4b98      	ldr	r3, [pc, #608]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x1300>)
 800cb20:	e000      	b.n	800cb24 <HAL_TIM_PeriodElapsedCallback+0x10a4>
 800cb22:	4b98      	ldr	r3, [pc, #608]	; (800cd84 <HAL_TIM_PeriodElapsedCallback+0x1304>)
 800cb24:	4a91      	ldr	r2, [pc, #580]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cb26:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800cb28:	4b92      	ldr	r3, [pc, #584]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cb2a:	edd3 7a00 	vldr	s15, [r3]
 800cb2e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800cd78 <HAL_TIM_PeriodElapsedCallback+0x12f8>
 800cb32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3a:	bfcc      	ite	gt
 800cb3c:	2301      	movgt	r3, #1
 800cb3e:	2300      	movle	r3, #0
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	f083 0301 	eor.w	r3, r3, #1
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d111      	bne.n	800cb70 <HAL_TIM_PeriodElapsedCallback+0x10f0>
 800cb4c:	4b89      	ldr	r3, [pc, #548]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cb4e:	edd3 7a00 	vldr	s15, [r3]
 800cb52:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cd7c <HAL_TIM_PeriodElapsedCallback+0x12fc>
 800cb56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5e:	bfcc      	ite	gt
 800cb60:	2301      	movgt	r3, #1
 800cb62:	2300      	movle	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	f083 0301 	eor.w	r3, r3, #1
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00e      	beq.n	800cb8e <HAL_TIM_PeriodElapsedCallback+0x110e>
 800cb70:	4b80      	ldr	r3, [pc, #512]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cb72:	edd3 7a00 	vldr	s15, [r3]
 800cb76:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800cd78 <HAL_TIM_PeriodElapsedCallback+0x12f8>
 800cb7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb82:	dd02      	ble.n	800cb8a <HAL_TIM_PeriodElapsedCallback+0x110a>
 800cb84:	4b7b      	ldr	r3, [pc, #492]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	e002      	b.n	800cb90 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800cb8a:	4b7d      	ldr	r3, [pc, #500]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x1300>)
 800cb8c:	e000      	b.n	800cb90 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800cb8e:	4b7d      	ldr	r3, [pc, #500]	; (800cd84 <HAL_TIM_PeriodElapsedCallback+0x1304>)
 800cb90:	4a78      	ldr	r2, [pc, #480]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cb92:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800cb94:	4b75      	ldr	r3, [pc, #468]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cb96:	edd3 7a00 	vldr	s15, [r3]
 800cb9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba2:	dd17      	ble.n	800cbd4 <HAL_TIM_PeriodElapsedCallback+0x1154>
				drive_dir(0, 0);
 800cba4:	2100      	movs	r1, #0
 800cba6:	2000      	movs	r0, #0
 800cba8:	f7f8 f90c 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800cbac:	4b6f      	ldr	r3, [pc, #444]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cbae:	edd3 7a00 	vldr	s15, [r3]
 800cbb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb6:	ee17 3a90 	vmov	r3, s15
 800cbba:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4870      	ldr	r0, [pc, #448]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cbc6:	f7f7 f801 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800cbca:	2100      	movs	r1, #0
 800cbcc:	486e      	ldr	r0, [pc, #440]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cbce:	f7f6 fd95 	bl	80036fc <HAL_TIM_PWM_Start>
 800cbd2:	e020      	b.n	800cc16 <HAL_TIM_PeriodElapsedCallback+0x1196>
			}
			else if(pulse_l < 0){
 800cbd4:	4b65      	ldr	r3, [pc, #404]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cbd6:	edd3 7a00 	vldr	s15, [r3]
 800cbda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe2:	d518      	bpl.n	800cc16 <HAL_TIM_PeriodElapsedCallback+0x1196>
				drive_dir(0, 1);
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	f7f8 f8ec 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800cbec:	4b5f      	ldr	r3, [pc, #380]	; (800cd6c <HAL_TIM_PeriodElapsedCallback+0x12ec>)
 800cbee:	edd3 7a00 	vldr	s15, [r3]
 800cbf2:	eef1 7a67 	vneg.f32	s15, s15
 800cbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfa:	ee17 3a90 	vmov	r3, s15
 800cbfe:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800cc00:	f107 030c 	add.w	r3, r7, #12
 800cc04:	2200      	movs	r2, #0
 800cc06:	4619      	mov	r1, r3
 800cc08:	485f      	ldr	r0, [pc, #380]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cc0a:	f7f6 ffdf 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800cc0e:	2100      	movs	r1, #0
 800cc10:	485d      	ldr	r0, [pc, #372]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cc12:	f7f6 fd73 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800cc16:	4b57      	ldr	r3, [pc, #348]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cc18:	edd3 7a00 	vldr	s15, [r3]
 800cc1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc24:	dd17      	ble.n	800cc56 <HAL_TIM_PeriodElapsedCallback+0x11d6>
				drive_dir(1, 0);
 800cc26:	2100      	movs	r1, #0
 800cc28:	2001      	movs	r0, #1
 800cc2a:	f7f8 f8cb 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800cc2e:	4b51      	ldr	r3, [pc, #324]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cc30:	edd3 7a00 	vldr	s15, [r3]
 800cc34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc38:	ee17 3a90 	vmov	r3, s15
 800cc3c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800cc3e:	f107 030c 	add.w	r3, r7, #12
 800cc42:	220c      	movs	r2, #12
 800cc44:	4619      	mov	r1, r3
 800cc46:	4850      	ldr	r0, [pc, #320]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cc48:	f7f6 ffc0 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800cc4c:	210c      	movs	r1, #12
 800cc4e:	484e      	ldr	r0, [pc, #312]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cc50:	f7f6 fd54 	bl	80036fc <HAL_TIM_PWM_Start>
 800cc54:	e020      	b.n	800cc98 <HAL_TIM_PeriodElapsedCallback+0x1218>
			}
			else if(pulse_r < 0){
 800cc56:	4b47      	ldr	r3, [pc, #284]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cc58:	edd3 7a00 	vldr	s15, [r3]
 800cc5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc64:	d518      	bpl.n	800cc98 <HAL_TIM_PeriodElapsedCallback+0x1218>
				drive_dir(1, 1);
 800cc66:	2101      	movs	r1, #1
 800cc68:	2001      	movs	r0, #1
 800cc6a:	f7f8 f8ab 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800cc6e:	4b41      	ldr	r3, [pc, #260]	; (800cd74 <HAL_TIM_PeriodElapsedCallback+0x12f4>)
 800cc70:	edd3 7a00 	vldr	s15, [r3]
 800cc74:	eef1 7a67 	vneg.f32	s15, s15
 800cc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc7c:	ee17 3a90 	vmov	r3, s15
 800cc80:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800cc82:	f107 030c 	add.w	r3, r7, #12
 800cc86:	220c      	movs	r2, #12
 800cc88:	4619      	mov	r1, r3
 800cc8a:	483f      	ldr	r0, [pc, #252]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cc8c:	f7f6 ff9e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800cc90:	210c      	movs	r1, #12
 800cc92:	483d      	ldr	r0, [pc, #244]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x1308>)
 800cc94:	f7f6 fd32 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
			//----look forward----
			if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800cc98:	4b3c      	ldr	r3, [pc, #240]	; (800cd8c <HAL_TIM_PeriodElapsedCallback+0x130c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b5a      	cmp	r3, #90	; 0x5a
 800cc9e:	d803      	bhi.n	800cca8 <HAL_TIM_PeriodElapsedCallback+0x1228>
 800cca0:	4b3b      	ldr	r3, [pc, #236]	; (800cd90 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2bc8      	cmp	r3, #200	; 0xc8
 800cca6:	d905      	bls.n	800ccb4 <HAL_TIM_PeriodElapsedCallback+0x1234>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800cca8:	2201      	movs	r2, #1
 800ccaa:	2140      	movs	r1, #64	; 0x40
 800ccac:	4839      	ldr	r0, [pc, #228]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 800ccae:	f7f5 fb29 	bl	8002304 <HAL_GPIO_WritePin>
 800ccb2:	e004      	b.n	800ccbe <HAL_TIM_PeriodElapsedCallback+0x123e>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2140      	movs	r1, #64	; 0x40
 800ccb8:	4836      	ldr	r0, [pc, #216]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 800ccba:	f7f5 fb23 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forwardL----
			if(ad_fl > WALL_BASE_FL){
 800ccbe:	4b34      	ldr	r3, [pc, #208]	; (800cd90 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2bc8      	cmp	r3, #200	; 0xc8
 800ccc4:	d905      	bls.n	800ccd2 <HAL_TIM_PeriodElapsedCallback+0x1252>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	2110      	movs	r1, #16
 800ccca:	4832      	ldr	r0, [pc, #200]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 800cccc:	f7f5 fb1a 	bl	8002304 <HAL_GPIO_WritePin>
 800ccd0:	e004      	b.n	800ccdc <HAL_TIM_PeriodElapsedCallback+0x125c>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2110      	movs	r1, #16
 800ccd6:	482f      	ldr	r0, [pc, #188]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 800ccd8:	f7f5 fb14 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forward-R---
			if(ad_fr > WALL_BASE_FR){
 800ccdc:	4b2b      	ldr	r3, [pc, #172]	; (800cd8c <HAL_TIM_PeriodElapsedCallback+0x130c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b5a      	cmp	r3, #90	; 0x5a
 800cce2:	d905      	bls.n	800ccf0 <HAL_TIM_PeriodElapsedCallback+0x1270>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800cce4:	2201      	movs	r2, #1
 800cce6:	2180      	movs	r1, #128	; 0x80
 800cce8:	482a      	ldr	r0, [pc, #168]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 800ccea:	f7f5 fb0b 	bl	8002304 <HAL_GPIO_WritePin>
 800ccee:	e00d      	b.n	800cd0c <HAL_TIM_PeriodElapsedCallback+0x128c>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2180      	movs	r1, #128	; 0x80
 800ccf4:	4827      	ldr	r0, [pc, #156]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 800ccf6:	f7f5 fb05 	bl	8002304 <HAL_GPIO_WritePin>
 800ccfa:	e007      	b.n	800cd0c <HAL_TIM_PeriodElapsedCallback+0x128c>
			}
		}else{
			drive_dir(0, 2);
 800ccfc:	2102      	movs	r1, #2
 800ccfe:	2000      	movs	r0, #0
 800cd00:	f7f8 f860 	bl	8004dc4 <drive_dir>
			drive_dir(1, 2);
 800cd04:	2102      	movs	r1, #2
 800cd06:	2001      	movs	r0, #1
 800cd08:	f7f8 f85c 	bl	8004dc4 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800cd0c:	4b22      	ldr	r3, [pc, #136]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x1318>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b5a      	cmp	r3, #90	; 0x5a
 800cd12:	d906      	bls.n	800cd22 <HAL_TIM_PeriodElapsedCallback+0x12a2>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800cd14:	2201      	movs	r2, #1
 800cd16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cd1a:	4820      	ldr	r0, [pc, #128]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800cd1c:	f7f5 faf2 	bl	8002304 <HAL_GPIO_WritePin>
 800cd20:	e005      	b.n	800cd2e <HAL_TIM_PeriodElapsedCallback+0x12ae>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800cd22:	2200      	movs	r2, #0
 800cd24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cd28:	481c      	ldr	r0, [pc, #112]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800cd2a:	f7f5 faeb 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800cd2e:	4b1c      	ldr	r3, [pc, #112]	; (800cda0 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b5a      	cmp	r3, #90	; 0x5a
 800cd34:	d905      	bls.n	800cd42 <HAL_TIM_PeriodElapsedCallback+0x12c2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800cd36:	2201      	movs	r2, #1
 800cd38:	2104      	movs	r1, #4
 800cd3a:	481a      	ldr	r0, [pc, #104]	; (800cda4 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 800cd3c:	f7f5 fae2 	bl	8002304 <HAL_GPIO_WritePin>
 800cd40:	e004      	b.n	800cd4c <HAL_TIM_PeriodElapsedCallback+0x12cc>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800cd42:	2200      	movs	r2, #0
 800cd44:	2104      	movs	r1, #4
 800cd46:	4817      	ldr	r0, [pc, #92]	; (800cda4 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 800cd48:	f7f5 fadc 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800cd4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cd50:	4812      	ldr	r0, [pc, #72]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800cd52:	f7f5 fabf 	bl	80022d4 <HAL_GPIO_ReadPin>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d125      	bne.n	800cda8 <HAL_TIM_PeriodElapsedCallback+0x1328>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	2108      	movs	r1, #8
 800cd60:	4810      	ldr	r0, [pc, #64]	; (800cda4 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 800cd62:	f7f5 facf 	bl	8002304 <HAL_GPIO_WritePin>
 800cd66:	e024      	b.n	800cdb2 <HAL_TIM_PeriodElapsedCallback+0x1332>
 800cd68:	20000b38 	.word	0x20000b38
 800cd6c:	20000be8 	.word	0x20000be8
 800cd70:	20000fb4 	.word	0x20000fb4
 800cd74:	200007b8 	.word	0x200007b8
 800cd78:	c47a0000 	.word	0xc47a0000
 800cd7c:	447a0000 	.word	0x447a0000
 800cd80:	c47a0000 	.word	0xc47a0000
 800cd84:	447a0000 	.word	0x447a0000
 800cd88:	20000c58 	.word	0x20000c58
 800cd8c:	20000c44 	.word	0x20000c44
 800cd90:	20000d98 	.word	0x20000d98
 800cd94:	40020000 	.word	0x40020000
 800cd98:	20000fa4 	.word	0x20000fa4
 800cd9c:	40020400 	.word	0x40020400
 800cda0:	20000b3c 	.word	0x20000b3c
 800cda4:	40020800 	.word	0x40020800
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2108      	movs	r1, #8
 800cdac:	4823      	ldr	r0, [pc, #140]	; (800ce3c <HAL_TIM_PeriodElapsedCallback+0x13bc>)
 800cdae:	f7f5 faa9 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+360 || degree_z <= target_degree_z-360 || dist_r > 360*2 || dist_l > 360*2){	//360度以上回転発生でFail Safe
 800cdb2:	4b23      	ldr	r3, [pc, #140]	; (800ce40 <HAL_TIM_PeriodElapsedCallback+0x13c0>)
 800cdb4:	edd3 7a00 	vldr	s15, [r3]
 800cdb8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800ce44 <HAL_TIM_PeriodElapsedCallback+0x13c4>
 800cdbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdc0:	4b21      	ldr	r3, [pc, #132]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800cdc2:	edd3 7a00 	vldr	s15, [r3]
 800cdc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdce:	d923      	bls.n	800ce18 <HAL_TIM_PeriodElapsedCallback+0x1398>
 800cdd0:	4b1b      	ldr	r3, [pc, #108]	; (800ce40 <HAL_TIM_PeriodElapsedCallback+0x13c0>)
 800cdd2:	edd3 7a00 	vldr	s15, [r3]
 800cdd6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ce44 <HAL_TIM_PeriodElapsedCallback+0x13c4>
 800cdda:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cdde:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800cde0:	edd3 7a00 	vldr	s15, [r3]
 800cde4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdec:	da14      	bge.n	800ce18 <HAL_TIM_PeriodElapsedCallback+0x1398>
 800cdee:	4b17      	ldr	r3, [pc, #92]	; (800ce4c <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800cdf0:	edd3 7a00 	vldr	s15, [r3]
 800cdf4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ce50 <HAL_TIM_PeriodElapsedCallback+0x13d0>
 800cdf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce00:	dc0a      	bgt.n	800ce18 <HAL_TIM_PeriodElapsedCallback+0x1398>
 800ce02:	4b14      	ldr	r3, [pc, #80]	; (800ce54 <HAL_TIM_PeriodElapsedCallback+0x13d4>)
 800ce04:	edd3 7a00 	vldr	s15, [r3]
 800ce08:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ce50 <HAL_TIM_PeriodElapsedCallback+0x13d0>
 800ce0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce14:	dc00      	bgt.n	800ce18 <HAL_TIM_PeriodElapsedCallback+0x1398>
			   drive_dir(1, 2);
			   full_led_write(1);
		   }
		}
	}
}
 800ce16:	e00b      	b.n	800ce30 <HAL_TIM_PeriodElapsedCallback+0x13b0>
			   drive_dir(0, 2);
 800ce18:	2102      	movs	r1, #2
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	f7f7 ffd2 	bl	8004dc4 <drive_dir>
			   drive_dir(1, 2);
 800ce20:	2102      	movs	r1, #2
 800ce22:	2001      	movs	r0, #1
 800ce24:	f7f7 ffce 	bl	8004dc4 <drive_dir>
			   full_led_write(1);
 800ce28:	2001      	movs	r0, #1
 800ce2a:	f003 fd69 	bl	8010900 <full_led_write>
			   drive_dir(0, 2);
 800ce2e:	e7f3      	b.n	800ce18 <HAL_TIM_PeriodElapsedCallback+0x1398>
}
 800ce30:	bf00      	nop
 800ce32:	3730      	adds	r7, #48	; 0x30
 800ce34:	46bd      	mov	sp, r7
 800ce36:	ecbd 8b02 	vpop	{d8}
 800ce3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ce3c:	40020800 	.word	0x40020800
 800ce40:	20000c3c 	.word	0x20000c3c
 800ce44:	43b40000 	.word	0x43b40000
 800ce48:	20000b9c 	.word	0x20000b9c
 800ce4c:	20000b2c 	.word	0x20000b2c
 800ce50:	44340000 	.word	0x44340000
 800ce54:	200012e4 	.word	0x200012e4

0800ce58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ce5e:	f7f4 f86b 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ce62:	f000 f917 	bl	800d094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ce66:	f000 fc09 	bl	800d67c <MX_GPIO_Init>
  MX_ADC1_Init();
 800ce6a:	f000 f97d 	bl	800d168 <MX_ADC1_Init>
  MX_TIM2_Init();
 800ce6e:	f000 fa03 	bl	800d278 <MX_TIM2_Init>
  MX_TIM3_Init();
 800ce72:	f000 fa81 	bl	800d378 <MX_TIM3_Init>
  MX_TIM4_Init();
 800ce76:	f000 faf5 	bl	800d464 <MX_TIM4_Init>
  MX_TIM6_Init();
 800ce7a:	f000 fb47 	bl	800d50c <MX_TIM6_Init>
  MX_TIM8_Init();
 800ce7e:	f000 fb7b 	bl	800d578 <MX_TIM8_Init>
  MX_SPI3_Init();
 800ce82:	f000 f9c3 	bl	800d20c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800ce86:	f000 fbcf 	bl	800d628 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800ce8a:	f7f7 fee7 	bl	8004c5c <drive_init>
  gyro_init();
 800ce8e:	f7fe fc19 	bl	800b6c4 <gyro_init>
  search_init();
 800ce92:	f000 fd21 	bl	800d8d8 <search_init>
  sensor_init();
 800ce96:	f003 fc73 	bl	8010780 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800ce9a:	4870      	ldr	r0, [pc, #448]	; (800d05c <main+0x204>)
 800ce9c:	f004 fb38 	bl	8011510 <puts>

  setbuf(stdout, NULL);
 800cea0:	4b6f      	ldr	r3, [pc, #444]	; (800d060 <main+0x208>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	2100      	movs	r1, #0
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f004 fb39 	bl	8011520 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800ceae:	213c      	movs	r1, #60	; 0x3c
 800ceb0:	486c      	ldr	r0, [pc, #432]	; (800d064 <main+0x20c>)
 800ceb2:	f7f6 fd4b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800ceb6:	213c      	movs	r1, #60	; 0x3c
 800ceb8:	486b      	ldr	r0, [pc, #428]	; (800d068 <main+0x210>)
 800ceba:	f7f6 fd47 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800cebe:	486b      	ldr	r0, [pc, #428]	; (800d06c <main+0x214>)
 800cec0:	f7f6 fbc3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	4869      	ldr	r0, [pc, #420]	; (800d070 <main+0x218>)
 800cecc:	f004 faac 	bl	8011428 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	b2d8      	uxtb	r0, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	f003 0302 	and.w	r3, r3, #2
 800cee2:	b2d9      	uxtb	r1, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	461a      	mov	r2, r3
 800cef0:	f003 fccc 	bl	801088c <led_write>
	  if(dist_r >= 20){
 800cef4:	4b5f      	ldr	r3, [pc, #380]	; (800d074 <main+0x21c>)
 800cef6:	edd3 7a00 	vldr	s15, [r3]
 800cefa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800cefe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf06:	db0f      	blt.n	800cf28 <main+0xd0>
		  mode++;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800cf0e:	4b59      	ldr	r3, [pc, #356]	; (800d074 <main+0x21c>)
 800cf10:	f04f 0200 	mov.w	r2, #0
 800cf14:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b07      	cmp	r3, #7
 800cf1a:	dd01      	ble.n	800cf20 <main+0xc8>
			  mode = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4853      	ldr	r0, [pc, #332]	; (800d070 <main+0x218>)
 800cf24:	f004 fa80 	bl	8011428 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800cf28:	4b52      	ldr	r3, [pc, #328]	; (800d074 <main+0x21c>)
 800cf2a:	edd3 7a00 	vldr	s15, [r3]
 800cf2e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800cf32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3a:	d80f      	bhi.n	800cf5c <main+0x104>
		  mode--;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800cf42:	4b4c      	ldr	r3, [pc, #304]	; (800d074 <main+0x21c>)
 800cf44:	f04f 0200 	mov.w	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	da01      	bge.n	800cf54 <main+0xfc>
			  mode = 7;
 800cf50:	2307      	movs	r3, #7
 800cf52:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	4846      	ldr	r0, [pc, #280]	; (800d070 <main+0x218>)
 800cf58:	f004 fa66 	bl	8011428 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800cf5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cf60:	4845      	ldr	r0, [pc, #276]	; (800d078 <main+0x220>)
 800cf62:	f7f5 f9b7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1b1      	bne.n	800ced0 <main+0x78>
		  HAL_Delay(50);
 800cf6c:	2032      	movs	r0, #50	; 0x32
 800cf6e:	f7f4 f855 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800cf72:	bf00      	nop
 800cf74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cf78:	483f      	ldr	r0, [pc, #252]	; (800d078 <main+0x220>)
 800cf7a:	f7f5 f9ab 	bl	80022d4 <HAL_GPIO_ReadPin>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d0f7      	beq.n	800cf74 <main+0x11c>
		  switch(mode){
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b07      	cmp	r3, #7
 800cf88:	d8a2      	bhi.n	800ced0 <main+0x78>
 800cf8a:	a201      	add	r2, pc, #4	; (adr r2, 800cf90 <main+0x138>)
 800cf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf90:	0800cfb1 	.word	0x0800cfb1
 800cf94:	0800cfbb 	.word	0x0800cfbb
 800cf98:	0800cfc7 	.word	0x0800cfc7
 800cf9c:	0800cfd3 	.word	0x0800cfd3
 800cfa0:	0800cfdf 	.word	0x0800cfdf
 800cfa4:	0800cfe5 	.word	0x0800cfe5
 800cfa8:	0800d011 	.word	0x0800d011
 800cfac:	0800d053 	.word	0x0800d053

		  	  case 0:
		  		  HAL_Delay(5000);
 800cfb0:	f241 3088 	movw	r0, #5000	; 0x1388
 800cfb4:	f7f4 f832 	bl	800101c <HAL_Delay>
		  		  break;
 800cfb8:	e04e      	b.n	800d058 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800cfba:	4830      	ldr	r0, [pc, #192]	; (800d07c <main+0x224>)
 800cfbc:	f004 faa8 	bl	8011510 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800cfc0:	f7fc ff7a 	bl	8009eb8 <simple_run>
		  		  break;
 800cfc4:	e048      	b.n	800d058 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800cfc6:	482e      	ldr	r0, [pc, #184]	; (800d080 <main+0x228>)
 800cfc8:	f004 faa2 	bl	8011510 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800cfcc:	f7fd f878 	bl	800a0c0 <slalom_run>
		  		  break;
 800cfd0:	e042      	b.n	800d058 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800cfd2:	482c      	ldr	r0, [pc, #176]	; (800d084 <main+0x22c>)
 800cfd4:	f004 fa9c 	bl	8011510 <puts>
		  		  pass_test();
 800cfd8:	f7fc fdfa 	bl	8009bd0 <pass_test>
		  		  break;
 800cfdc:	e03c      	b.n	800d058 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800cfde:	f7fb ffbf 	bl	8008f60 <test_select>
		  		  break;
 800cfe2:	e039      	b.n	800d058 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800cfe4:	4828      	ldr	r0, [pc, #160]	; (800d088 <main+0x230>)
 800cfe6:	f004 fa93 	bl	8011510 <puts>
		  		  sensor_test();
 800cfea:	f003 fd45 	bl	8010a78 <sensor_test>
		  		  break;
 800cfee:	e033      	b.n	800d058 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800cff0:	2201      	movs	r2, #1
 800cff2:	2101      	movs	r1, #1
 800cff4:	2001      	movs	r0, #1
 800cff6:	f003 fc49 	bl	801088c <led_write>
					  HAL_Delay(200);
 800cffa:	20c8      	movs	r0, #200	; 0xc8
 800cffc:	f7f4 f80e 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800d000:	2200      	movs	r2, #0
 800d002:	2100      	movs	r1, #0
 800d004:	2000      	movs	r0, #0
 800d006:	f003 fc41 	bl	801088c <led_write>
					  HAL_Delay(200);
 800d00a:	20c8      	movs	r0, #200	; 0xc8
 800d00c:	f7f4 f806 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800d010:	4b1e      	ldr	r3, [pc, #120]	; (800d08c <main+0x234>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2bc8      	cmp	r3, #200	; 0xc8
 800d016:	d9eb      	bls.n	800cff0 <main+0x198>
				  }
				  HAL_Delay(200);
 800d018:	20c8      	movs	r0, #200	; 0xc8
 800d01a:	f7f3 ffff 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800d01e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d022:	f7f3 fffb 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800d026:	2300      	movs	r3, #0
 800d028:	603b      	str	r3, [r7, #0]
 800d02a:	e00e      	b.n	800d04a <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800d02c:	4a18      	ldr	r2, [pc, #96]	; (800d090 <main+0x238>)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d034:	4a16      	ldr	r2, [pc, #88]	; (800d090 <main+0x238>)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	4413      	add	r3, r2
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	4619      	mov	r1, r3
 800d040:	f000 fbda 	bl	800d7f8 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	3301      	adds	r3, #1
 800d048:	603b      	str	r3, [r7, #0]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b0e      	cmp	r3, #14
 800d04e:	dded      	ble.n	800d02c <main+0x1d4>
		  		  }
		  		  break;
 800d050:	e002      	b.n	800d058 <main+0x200>
		  		  //----a本番走行用----
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*/		  		  perfect_run();
 800d052:	f7fd fb8b 	bl	800a76c <perfect_run>
		  		  break;
 800d056:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800d058:	e73a      	b.n	800ced0 <main+0x78>
 800d05a:	bf00      	nop
 800d05c:	08012b3c 	.word	0x08012b3c
 800d060:	200000bc 	.word	0x200000bc
 800d064:	20000344 	.word	0x20000344
 800d068:	20000304 	.word	0x20000304
 800d06c:	20000bf4 	.word	0x20000bf4
 800d070:	08012b58 	.word	0x08012b58
 800d074:	20000b2c 	.word	0x20000b2c
 800d078:	40020000 	.word	0x40020000
 800d07c:	08012b64 	.word	0x08012b64
 800d080:	08012b70 	.word	0x08012b70
 800d084:	08012b7c 	.word	0x08012b7c
 800d088:	08012b90 	.word	0x08012b90
 800d08c:	20000d98 	.word	0x20000d98
 800d090:	20000040 	.word	0x20000040

0800d094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b094      	sub	sp, #80	; 0x50
 800d098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d09a:	f107 0320 	add.w	r3, r7, #32
 800d09e:	2230      	movs	r2, #48	; 0x30
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f004 f9b8 	bl	8011418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0a8:	f107 030c 	add.w	r3, r7, #12
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	605a      	str	r2, [r3, #4]
 800d0b2:	609a      	str	r2, [r3, #8]
 800d0b4:	60da      	str	r2, [r3, #12]
 800d0b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	60bb      	str	r3, [r7, #8]
 800d0bc:	4b28      	ldr	r3, [pc, #160]	; (800d160 <SystemClock_Config+0xcc>)
 800d0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c0:	4a27      	ldr	r2, [pc, #156]	; (800d160 <SystemClock_Config+0xcc>)
 800d0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0c6:	6413      	str	r3, [r2, #64]	; 0x40
 800d0c8:	4b25      	ldr	r3, [pc, #148]	; (800d160 <SystemClock_Config+0xcc>)
 800d0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0d0:	60bb      	str	r3, [r7, #8]
 800d0d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	607b      	str	r3, [r7, #4]
 800d0d8:	4b22      	ldr	r3, [pc, #136]	; (800d164 <SystemClock_Config+0xd0>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a21      	ldr	r2, [pc, #132]	; (800d164 <SystemClock_Config+0xd0>)
 800d0de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	4b1f      	ldr	r3, [pc, #124]	; (800d164 <SystemClock_Config+0xd0>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0ec:	607b      	str	r3, [r7, #4]
 800d0ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d0f8:	2310      	movs	r3, #16
 800d0fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d100:	2300      	movs	r3, #0
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d104:	2308      	movs	r3, #8
 800d106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d108:	23a8      	movs	r3, #168	; 0xa8
 800d10a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d10c:	2302      	movs	r3, #2
 800d10e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d110:	2304      	movs	r3, #4
 800d112:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d114:	f107 0320 	add.w	r3, r7, #32
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f5 f90d 	bl	8002338 <HAL_RCC_OscConfig>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d124:	f000 fbd1 	bl	800d8ca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d128:	230f      	movs	r3, #15
 800d12a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d12c:	2302      	movs	r3, #2
 800d12e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d134:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d13a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d13e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d140:	f107 030c 	add.w	r3, r7, #12
 800d144:	2105      	movs	r1, #5
 800d146:	4618      	mov	r0, r3
 800d148:	f7f5 fb38 	bl	80027bc <HAL_RCC_ClockConfig>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d152:	f000 fbba 	bl	800d8ca <Error_Handler>
  }
}
 800d156:	bf00      	nop
 800d158:	3750      	adds	r7, #80	; 0x50
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	40023800 	.word	0x40023800
 800d164:	40007000 	.word	0x40007000

0800d168 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800d16e:	463b      	mov	r3, r7
 800d170:	2200      	movs	r2, #0
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	605a      	str	r2, [r3, #4]
 800d176:	609a      	str	r2, [r3, #8]
 800d178:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800d17a:	4b21      	ldr	r3, [pc, #132]	; (800d200 <MX_ADC1_Init+0x98>)
 800d17c:	4a21      	ldr	r2, [pc, #132]	; (800d204 <MX_ADC1_Init+0x9c>)
 800d17e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d180:	4b1f      	ldr	r3, [pc, #124]	; (800d200 <MX_ADC1_Init+0x98>)
 800d182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d188:	4b1d      	ldr	r3, [pc, #116]	; (800d200 <MX_ADC1_Init+0x98>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800d18e:	4b1c      	ldr	r3, [pc, #112]	; (800d200 <MX_ADC1_Init+0x98>)
 800d190:	2200      	movs	r2, #0
 800d192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800d194:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <MX_ADC1_Init+0x98>)
 800d196:	2200      	movs	r2, #0
 800d198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d19a:	4b19      	ldr	r3, [pc, #100]	; (800d200 <MX_ADC1_Init+0x98>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d1a2:	4b17      	ldr	r3, [pc, #92]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d1a8:	4b15      	ldr	r3, [pc, #84]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1aa:	4a17      	ldr	r2, [pc, #92]	; (800d208 <MX_ADC1_Init+0xa0>)
 800d1ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d1ae:	4b14      	ldr	r3, [pc, #80]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800d1b4:	4b12      	ldr	r3, [pc, #72]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d1ba:	4b11      	ldr	r3, [pc, #68]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d1c2:	4b0f      	ldr	r3, [pc, #60]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d1c8:	480d      	ldr	r0, [pc, #52]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1ca:	f7f3 ff49 	bl	8001060 <HAL_ADC_Init>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800d1d4:	f000 fb79 	bl	800d8ca <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4805      	ldr	r0, [pc, #20]	; (800d200 <MX_ADC1_Init+0x98>)
 800d1ea:	f7f4 f8d5 	bl	8001398 <HAL_ADC_ConfigChannel>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800d1f4:	f000 fb69 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800d1f8:	bf00      	nop
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	20000b40 	.word	0x20000b40
 800d204:	40012000 	.word	0x40012000
 800d208:	0f000001 	.word	0x0f000001

0800d20c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800d210:	4b17      	ldr	r3, [pc, #92]	; (800d270 <MX_SPI3_Init+0x64>)
 800d212:	4a18      	ldr	r2, [pc, #96]	; (800d274 <MX_SPI3_Init+0x68>)
 800d214:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d216:	4b16      	ldr	r3, [pc, #88]	; (800d270 <MX_SPI3_Init+0x64>)
 800d218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d21c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d21e:	4b14      	ldr	r3, [pc, #80]	; (800d270 <MX_SPI3_Init+0x64>)
 800d220:	2200      	movs	r2, #0
 800d222:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d224:	4b12      	ldr	r3, [pc, #72]	; (800d270 <MX_SPI3_Init+0x64>)
 800d226:	2200      	movs	r2, #0
 800d228:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d22a:	4b11      	ldr	r3, [pc, #68]	; (800d270 <MX_SPI3_Init+0x64>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d230:	4b0f      	ldr	r3, [pc, #60]	; (800d270 <MX_SPI3_Init+0x64>)
 800d232:	2200      	movs	r2, #0
 800d234:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d236:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <MX_SPI3_Init+0x64>)
 800d238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d23c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <MX_SPI3_Init+0x64>)
 800d240:	2218      	movs	r2, #24
 800d242:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d244:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <MX_SPI3_Init+0x64>)
 800d246:	2200      	movs	r2, #0
 800d248:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d24a:	4b09      	ldr	r3, [pc, #36]	; (800d270 <MX_SPI3_Init+0x64>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <MX_SPI3_Init+0x64>)
 800d252:	2200      	movs	r2, #0
 800d254:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800d256:	4b06      	ldr	r3, [pc, #24]	; (800d270 <MX_SPI3_Init+0x64>)
 800d258:	220a      	movs	r2, #10
 800d25a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d25c:	4804      	ldr	r0, [pc, #16]	; (800d270 <MX_SPI3_Init+0x64>)
 800d25e:	f7f5 fc75 	bl	8002b4c <HAL_SPI_Init>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800d268:	f000 fb2f 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800d26c:	bf00      	nop
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	2000017c 	.word	0x2000017c
 800d274:	40003c00 	.word	0x40003c00

0800d278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08e      	sub	sp, #56	; 0x38
 800d27c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d27e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	605a      	str	r2, [r3, #4]
 800d288:	609a      	str	r2, [r3, #8]
 800d28a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d28c:	f107 0320 	add.w	r3, r7, #32
 800d290:	2200      	movs	r2, #0
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d296:	1d3b      	adds	r3, r7, #4
 800d298:	2200      	movs	r2, #0
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	605a      	str	r2, [r3, #4]
 800d29e:	609a      	str	r2, [r3, #8]
 800d2a0:	60da      	str	r2, [r3, #12]
 800d2a2:	611a      	str	r2, [r3, #16]
 800d2a4:	615a      	str	r2, [r3, #20]
 800d2a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d2a8:	4b32      	ldr	r3, [pc, #200]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d2ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d2b0:	4b30      	ldr	r3, [pc, #192]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2b6:	4b2f      	ldr	r3, [pc, #188]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800d2bc:	4b2d      	ldr	r3, [pc, #180]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2be:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d2c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2c4:	4b2b      	ldr	r3, [pc, #172]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2ca:	4b2a      	ldr	r3, [pc, #168]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d2d0:	4828      	ldr	r0, [pc, #160]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2d2:	f7f6 f98f 	bl	80035f4 <HAL_TIM_Base_Init>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800d2dc:	f000 faf5 	bl	800d8ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d2e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d2e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4821      	ldr	r0, [pc, #132]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2ee:	f7f6 fd33 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800d2f8:	f000 fae7 	bl	800d8ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d2fc:	481d      	ldr	r0, [pc, #116]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d2fe:	f7f6 f9c8 	bl	8003692 <HAL_TIM_PWM_Init>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800d308:	f000 fadf 	bl	800d8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d30c:	2300      	movs	r3, #0
 800d30e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d310:	2300      	movs	r3, #0
 800d312:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d314:	f107 0320 	add.w	r3, r7, #32
 800d318:	4619      	mov	r1, r3
 800d31a:	4816      	ldr	r0, [pc, #88]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d31c:	f7f7 f90b 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800d326:	f000 fad0 	bl	800d8ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d32a:	2360      	movs	r3, #96	; 0x60
 800d32c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d336:	2300      	movs	r3, #0
 800d338:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d33a:	1d3b      	adds	r3, r7, #4
 800d33c:	2200      	movs	r2, #0
 800d33e:	4619      	mov	r1, r3
 800d340:	480c      	ldr	r0, [pc, #48]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d342:	f7f6 fc43 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800d34c:	f000 fabd 	bl	800d8ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d350:	1d3b      	adds	r3, r7, #4
 800d352:	220c      	movs	r2, #12
 800d354:	4619      	mov	r1, r3
 800d356:	4807      	ldr	r0, [pc, #28]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d358:	f7f6 fc38 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800d362:	f000 fab2 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d366:	4803      	ldr	r0, [pc, #12]	; (800d374 <MX_TIM2_Init+0xfc>)
 800d368:	f003 fe34 	bl	8010fd4 <HAL_TIM_MspPostInit>

}
 800d36c:	bf00      	nop
 800d36e:	3738      	adds	r7, #56	; 0x38
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20000c58 	.word	0x20000c58

0800d378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08e      	sub	sp, #56	; 0x38
 800d37c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d37e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d382:	2200      	movs	r2, #0
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	605a      	str	r2, [r3, #4]
 800d388:	609a      	str	r2, [r3, #8]
 800d38a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d38c:	f107 0320 	add.w	r3, r7, #32
 800d390:	2200      	movs	r2, #0
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d396:	1d3b      	adds	r3, r7, #4
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	605a      	str	r2, [r3, #4]
 800d39e:	609a      	str	r2, [r3, #8]
 800d3a0:	60da      	str	r2, [r3, #12]
 800d3a2:	611a      	str	r2, [r3, #16]
 800d3a4:	615a      	str	r2, [r3, #20]
 800d3a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d3a8:	4b2c      	ldr	r3, [pc, #176]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3aa:	4a2d      	ldr	r2, [pc, #180]	; (800d460 <MX_TIM3_Init+0xe8>)
 800d3ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800d3ae:	4b2b      	ldr	r3, [pc, #172]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3b0:	223f      	movs	r2, #63	; 0x3f
 800d3b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3b4:	4b29      	ldr	r3, [pc, #164]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800d3ba:	4b28      	ldr	r3, [pc, #160]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d3c0:	4b26      	ldr	r3, [pc, #152]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3c6:	4b25      	ldr	r3, [pc, #148]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d3cc:	4823      	ldr	r0, [pc, #140]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3ce:	f7f6 f911 	bl	80035f4 <HAL_TIM_Base_Init>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800d3d8:	f000 fa77 	bl	800d8ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d3e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	481c      	ldr	r0, [pc, #112]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3ea:	f7f6 fcb5 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800d3f4:	f000 fa69 	bl	800d8ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d3f8:	4818      	ldr	r0, [pc, #96]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d3fa:	f7f6 f94a 	bl	8003692 <HAL_TIM_PWM_Init>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800d404:	f000 fa61 	bl	800d8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d408:	2300      	movs	r3, #0
 800d40a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d40c:	2300      	movs	r3, #0
 800d40e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d410:	f107 0320 	add.w	r3, r7, #32
 800d414:	4619      	mov	r1, r3
 800d416:	4811      	ldr	r0, [pc, #68]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d418:	f7f7 f88d 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800d422:	f000 fa52 	bl	800d8ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d426:	2360      	movs	r3, #96	; 0x60
 800d428:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d42e:	2300      	movs	r3, #0
 800d430:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d432:	2300      	movs	r3, #0
 800d434:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d436:	1d3b      	adds	r3, r7, #4
 800d438:	2204      	movs	r2, #4
 800d43a:	4619      	mov	r1, r3
 800d43c:	4807      	ldr	r0, [pc, #28]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d43e:	f7f6 fbc5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800d448:	f000 fa3f 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d44c:	4803      	ldr	r0, [pc, #12]	; (800d45c <MX_TIM3_Init+0xe4>)
 800d44e:	f003 fdc1 	bl	8010fd4 <HAL_TIM_MspPostInit>

}
 800d452:	bf00      	nop
 800d454:	3738      	adds	r7, #56	; 0x38
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	20000ae0 	.word	0x20000ae0
 800d460:	40000400 	.word	0x40000400

0800d464 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b08c      	sub	sp, #48	; 0x30
 800d468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d46a:	f107 030c 	add.w	r3, r7, #12
 800d46e:	2224      	movs	r2, #36	; 0x24
 800d470:	2100      	movs	r1, #0
 800d472:	4618      	mov	r0, r3
 800d474:	f003 ffd0 	bl	8011418 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d478:	1d3b      	adds	r3, r7, #4
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800d480:	4b20      	ldr	r3, [pc, #128]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d482:	4a21      	ldr	r2, [pc, #132]	; (800d508 <MX_TIM4_Init+0xa4>)
 800d484:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800d486:	4b1f      	ldr	r3, [pc, #124]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d488:	2200      	movs	r2, #0
 800d48a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d48c:	4b1d      	ldr	r3, [pc, #116]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d48e:	2200      	movs	r2, #0
 800d490:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800d492:	4b1c      	ldr	r3, [pc, #112]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d498:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d49a:	4b1a      	ldr	r3, [pc, #104]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4a0:	4b18      	ldr	r3, [pc, #96]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d4a6:	2303      	movs	r3, #3
 800d4a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800d4ca:	f107 030c 	add.w	r3, r7, #12
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	480c      	ldr	r0, [pc, #48]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d4d2:	f7f6 f9a9 	bl	8003828 <HAL_TIM_Encoder_Init>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800d4dc:	f000 f9f5 	bl	800d8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d4e8:	1d3b      	adds	r3, r7, #4
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	4805      	ldr	r0, [pc, #20]	; (800d504 <MX_TIM4_Init+0xa0>)
 800d4ee:	f7f7 f822 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800d4f8:	f000 f9e7 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800d4fc:	bf00      	nop
 800d4fe:	3730      	adds	r7, #48	; 0x30
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20000344 	.word	0x20000344
 800d508:	40000800 	.word	0x40000800

0800d50c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d512:	463b      	mov	r3, r7
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d51a:	4b15      	ldr	r3, [pc, #84]	; (800d570 <MX_TIM6_Init+0x64>)
 800d51c:	4a15      	ldr	r2, [pc, #84]	; (800d574 <MX_TIM6_Init+0x68>)
 800d51e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800d520:	4b13      	ldr	r3, [pc, #76]	; (800d570 <MX_TIM6_Init+0x64>)
 800d522:	2253      	movs	r2, #83	; 0x53
 800d524:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d526:	4b12      	ldr	r3, [pc, #72]	; (800d570 <MX_TIM6_Init+0x64>)
 800d528:	2200      	movs	r2, #0
 800d52a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800d52c:	4b10      	ldr	r3, [pc, #64]	; (800d570 <MX_TIM6_Init+0x64>)
 800d52e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d532:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d534:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <MX_TIM6_Init+0x64>)
 800d536:	2200      	movs	r2, #0
 800d538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d53a:	480d      	ldr	r0, [pc, #52]	; (800d570 <MX_TIM6_Init+0x64>)
 800d53c:	f7f6 f85a 	bl	80035f4 <HAL_TIM_Base_Init>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800d546:	f000 f9c0 	bl	800d8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d54a:	2300      	movs	r3, #0
 800d54c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d54e:	2300      	movs	r3, #0
 800d550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d552:	463b      	mov	r3, r7
 800d554:	4619      	mov	r1, r3
 800d556:	4806      	ldr	r0, [pc, #24]	; (800d570 <MX_TIM6_Init+0x64>)
 800d558:	f7f6 ffed 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800d562:	f000 f9b2 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d566:	bf00      	nop
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20000bf4 	.word	0x20000bf4
 800d574:	40001000 	.word	0x40001000

0800d578 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08c      	sub	sp, #48	; 0x30
 800d57c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d57e:	f107 030c 	add.w	r3, r7, #12
 800d582:	2224      	movs	r2, #36	; 0x24
 800d584:	2100      	movs	r1, #0
 800d586:	4618      	mov	r0, r3
 800d588:	f003 ff46 	bl	8011418 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d58c:	1d3b      	adds	r3, r7, #4
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]
 800d592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d594:	4b22      	ldr	r3, [pc, #136]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d596:	4a23      	ldr	r2, [pc, #140]	; (800d624 <MX_TIM8_Init+0xac>)
 800d598:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800d59a:	4b21      	ldr	r3, [pc, #132]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d5a0:	4b1f      	ldr	r3, [pc, #124]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800d5a6:	4b1e      	ldr	r3, [pc, #120]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d5ae:	4b1c      	ldr	r3, [pc, #112]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d5b4:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d5ba:	4b19      	ldr	r3, [pc, #100]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800d5e4:	f107 030c 	add.w	r3, r7, #12
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	480d      	ldr	r0, [pc, #52]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d5ec:	f7f6 f91c 	bl	8003828 <HAL_TIM_Encoder_Init>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800d5f6:	f000 f968 	bl	800d8ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d602:	1d3b      	adds	r3, r7, #4
 800d604:	4619      	mov	r1, r3
 800d606:	4806      	ldr	r0, [pc, #24]	; (800d620 <MX_TIM8_Init+0xa8>)
 800d608:	f7f6 ff95 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800d612:	f000 f95a 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800d616:	bf00      	nop
 800d618:	3730      	adds	r7, #48	; 0x30
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	20000304 	.word	0x20000304
 800d624:	40010400 	.word	0x40010400

0800d628 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d62c:	4b11      	ldr	r3, [pc, #68]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d62e:	4a12      	ldr	r2, [pc, #72]	; (800d678 <MX_USART1_UART_Init+0x50>)
 800d630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800d632:	4b10      	ldr	r3, [pc, #64]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d634:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d63a:	4b0e      	ldr	r3, [pc, #56]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d640:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d642:	2200      	movs	r2, #0
 800d644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d648:	2200      	movs	r2, #0
 800d64a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d64e:	220c      	movs	r2, #12
 800d650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d652:	4b08      	ldr	r3, [pc, #32]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d654:	2200      	movs	r2, #0
 800d656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d658:	4b06      	ldr	r3, [pc, #24]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d65e:	4805      	ldr	r0, [pc, #20]	; (800d674 <MX_USART1_UART_Init+0x4c>)
 800d660:	f7f6 ffc2 	bl	80045e8 <HAL_UART_Init>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d66a:	f000 f92e 	bl	800d8ca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d66e:	bf00      	nop
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000ba4 	.word	0x20000ba4
 800d678:	40011000 	.word	0x40011000

0800d67c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08a      	sub	sp, #40	; 0x28
 800d680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d682:	f107 0314 	add.w	r3, r7, #20
 800d686:	2200      	movs	r2, #0
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	605a      	str	r2, [r3, #4]
 800d68c:	609a      	str	r2, [r3, #8]
 800d68e:	60da      	str	r2, [r3, #12]
 800d690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d692:	2300      	movs	r3, #0
 800d694:	613b      	str	r3, [r7, #16]
 800d696:	4b53      	ldr	r3, [pc, #332]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69a:	4a52      	ldr	r2, [pc, #328]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d69c:	f043 0304 	orr.w	r3, r3, #4
 800d6a0:	6313      	str	r3, [r2, #48]	; 0x30
 800d6a2:	4b50      	ldr	r3, [pc, #320]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	613b      	str	r3, [r7, #16]
 800d6ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	60fb      	str	r3, [r7, #12]
 800d6b2:	4b4c      	ldr	r3, [pc, #304]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	4a4b      	ldr	r2, [pc, #300]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6b8:	f043 0301 	orr.w	r3, r3, #1
 800d6bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d6be:	4b49      	ldr	r3, [pc, #292]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60bb      	str	r3, [r7, #8]
 800d6ce:	4b45      	ldr	r3, [pc, #276]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d2:	4a44      	ldr	r2, [pc, #272]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6d4:	f043 0302 	orr.w	r3, r3, #2
 800d6d8:	6313      	str	r3, [r2, #48]	; 0x30
 800d6da:	4b42      	ldr	r3, [pc, #264]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6de:	f003 0302 	and.w	r3, r3, #2
 800d6e2:	60bb      	str	r3, [r7, #8]
 800d6e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	607b      	str	r3, [r7, #4]
 800d6ea:	4b3e      	ldr	r3, [pc, #248]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ee:	4a3d      	ldr	r2, [pc, #244]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6f0:	f043 0308 	orr.w	r3, r3, #8
 800d6f4:	6313      	str	r3, [r2, #48]	; 0x30
 800d6f6:	4b3b      	ldr	r3, [pc, #236]	; (800d7e4 <MX_GPIO_Init+0x168>)
 800d6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fa:	f003 0308 	and.w	r3, r3, #8
 800d6fe:	607b      	str	r3, [r7, #4]
 800d700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800d702:	2200      	movs	r2, #0
 800d704:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800d708:	4837      	ldr	r0, [pc, #220]	; (800d7e8 <MX_GPIO_Init+0x16c>)
 800d70a:	f7f4 fdfb 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800d70e:	2200      	movs	r2, #0
 800d710:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800d714:	4835      	ldr	r0, [pc, #212]	; (800d7ec <MX_GPIO_Init+0x170>)
 800d716:	f7f4 fdf5 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800d71a:	2200      	movs	r2, #0
 800d71c:	f242 7103 	movw	r1, #9987	; 0x2703
 800d720:	4833      	ldr	r0, [pc, #204]	; (800d7f0 <MX_GPIO_Init+0x174>)
 800d722:	f7f4 fdef 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800d726:	2200      	movs	r2, #0
 800d728:	2104      	movs	r1, #4
 800d72a:	4832      	ldr	r0, [pc, #200]	; (800d7f4 <MX_GPIO_Init+0x178>)
 800d72c:	f7f4 fdea 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800d730:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800d734:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d736:	2301      	movs	r3, #1
 800d738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d73e:	2300      	movs	r3, #0
 800d740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d742:	f107 0314 	add.w	r3, r7, #20
 800d746:	4619      	mov	r1, r3
 800d748:	4827      	ldr	r0, [pc, #156]	; (800d7e8 <MX_GPIO_Init+0x16c>)
 800d74a:	f7f4 fc29 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800d74e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800d752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d754:	2301      	movs	r3, #1
 800d756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d758:	2300      	movs	r3, #0
 800d75a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d75c:	2300      	movs	r3, #0
 800d75e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d760:	f107 0314 	add.w	r3, r7, #20
 800d764:	4619      	mov	r1, r3
 800d766:	4821      	ldr	r0, [pc, #132]	; (800d7ec <MX_GPIO_Init+0x170>)
 800d768:	f7f4 fc1a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800d76c:	f242 7303 	movw	r3, #9987	; 0x2703
 800d770:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d772:	2301      	movs	r3, #1
 800d774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d776:	2300      	movs	r3, #0
 800d778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d77a:	2300      	movs	r3, #0
 800d77c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d77e:	f107 0314 	add.w	r3, r7, #20
 800d782:	4619      	mov	r1, r3
 800d784:	481a      	ldr	r0, [pc, #104]	; (800d7f0 <MX_GPIO_Init+0x174>)
 800d786:	f7f4 fc0b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d78a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d78e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d790:	2300      	movs	r3, #0
 800d792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d794:	2301      	movs	r3, #1
 800d796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d798:	f107 0314 	add.w	r3, r7, #20
 800d79c:	4619      	mov	r1, r3
 800d79e:	4814      	ldr	r0, [pc, #80]	; (800d7f0 <MX_GPIO_Init+0x174>)
 800d7a0:	f7f4 fbfe 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d7a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d7a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7b2:	f107 0314 	add.w	r3, r7, #20
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	480c      	ldr	r0, [pc, #48]	; (800d7ec <MX_GPIO_Init+0x170>)
 800d7ba:	f7f4 fbf1 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d7be:	2304      	movs	r3, #4
 800d7c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d7ce:	f107 0314 	add.w	r3, r7, #20
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	4807      	ldr	r0, [pc, #28]	; (800d7f4 <MX_GPIO_Init+0x178>)
 800d7d6:	f7f4 fbe3 	bl	8001fa0 <HAL_GPIO_Init>

}
 800d7da:	bf00      	nop
 800d7dc:	3728      	adds	r7, #40	; 0x28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	40023800 	.word	0x40023800
 800d7e8:	40020800 	.word	0x40020800
 800d7ec:	40020000 	.word	0x40020000
 800d7f0:	40020400 	.word	0x40020400
 800d7f4:	40020c00 	.word	0x40020c00

0800d7f8 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08a      	sub	sp, #40	; 0x28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d802:	2360      	movs	r3, #96	; 0x60
 800d804:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d80a:	2300      	movs	r3, #0
 800d80c:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800d80e:	4a15      	ldr	r2, [pc, #84]	; (800d864 <buzzer+0x6c>)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	fb92 f3f3 	sdiv	r3, r2, r3
 800d816:	4a14      	ldr	r2, [pc, #80]	; (800d868 <buzzer+0x70>)
 800d818:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800d81a:	4b13      	ldr	r3, [pc, #76]	; (800d868 <buzzer+0x70>)
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	4b13      	ldr	r3, [pc, #76]	; (800d86c <buzzer+0x74>)
 800d820:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800d822:	4b11      	ldr	r3, [pc, #68]	; (800d868 <buzzer+0x70>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a12      	ldr	r2, [pc, #72]	; (800d870 <buzzer+0x78>)
 800d828:	fb82 1203 	smull	r1, r2, r2, r3
 800d82c:	1092      	asrs	r2, r2, #2
 800d82e:	17db      	asrs	r3, r3, #31
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800d834:	f107 030c 	add.w	r3, r7, #12
 800d838:	2204      	movs	r2, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	480d      	ldr	r0, [pc, #52]	; (800d874 <buzzer+0x7c>)
 800d83e:	f7f6 f9c5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800d842:	2104      	movs	r1, #4
 800d844:	480b      	ldr	r0, [pc, #44]	; (800d874 <buzzer+0x7c>)
 800d846:	f7f5 ff59 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f3 fbe5 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800d852:	2104      	movs	r1, #4
 800d854:	4807      	ldr	r0, [pc, #28]	; (800d874 <buzzer+0x7c>)
 800d856:	f7f5 ff8f 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800d85a:	bf00      	nop
 800d85c:	3728      	adds	r7, #40	; 0x28
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	000f4240 	.word	0x000f4240
 800d868:	200002fc 	.word	0x200002fc
 800d86c:	40000400 	.word	0x40000400
 800d870:	66666667 	.word	0x66666667
 800d874:	20000ae0 	.word	0x20000ae0

0800d878 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800d882:	f107 0308 	add.w	r3, r7, #8
 800d886:	2200      	movs	r2, #0
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	605a      	str	r2, [r3, #4]
 800d88c:	609a      	str	r2, [r3, #8]
 800d88e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800d894:	2301      	movs	r3, #1
 800d896:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d898:	2300      	movs	r3, #0
 800d89a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800d89c:	2300      	movs	r3, #0
 800d89e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800d8a0:	f107 0308 	add.w	r3, r7, #8
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7f3 fd76 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7f3 fc1b 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800d8b2:	2164      	movs	r1, #100	; 0x64
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7f3 fcdd 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f7f3 fd5e 	bl	800137c <HAL_ADC_GetValue>
 800d8c0:	4603      	mov	r3, r0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d8ce:	bf00      	nop
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <search_init>:

#include "global.h"

void search_init(void){
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800d8dc:	4b09      	ldr	r3, [pc, #36]	; (800d904 <search_init+0x2c>)
 800d8de:	2209      	movs	r2, #9
 800d8e0:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800d8e2:	4b09      	ldr	r3, [pc, #36]	; (800d908 <search_init+0x30>)
 800d8e4:	2206      	movs	r2, #6
 800d8e6:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800d8e8:	f001 f8a4 	bl	800ea34 <map_Init>
	mouse.x = 0;
 800d8ec:	4b07      	ldr	r3, [pc, #28]	; (800d90c <search_init+0x34>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800d8f2:	4b06      	ldr	r3, [pc, #24]	; (800d90c <search_init+0x34>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800d8f8:	4b04      	ldr	r3, [pc, #16]	; (800d90c <search_init+0x34>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	709a      	strb	r2, [r3, #2]
}
 800d8fe:	bf00      	nop
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000bf1 	.word	0x20000bf1
 800d908:	20000b8c 	.word	0x20000b8c
 800d90c:	20000c50 	.word	0x20000c50

0800d910 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d914:	4b37      	ldr	r3, [pc, #220]	; (800d9f4 <searchA+0xe4>)
 800d916:	881b      	ldrh	r3, [r3, #0]
 800d918:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <searchA+0x16>
		load_map_from_eeprom();
 800d922:	f002 ff01 	bl	8010728 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d926:	f002 ff77 	bl	8010818 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d92a:	4b33      	ldr	r3, [pc, #204]	; (800d9f8 <searchA+0xe8>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d932:	b2da      	uxtb	r2, r3
 800d934:	4b30      	ldr	r3, [pc, #192]	; (800d9f8 <searchA+0xe8>)
 800d936:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800d938:	f001 f8e8 	bl	800eb0c <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800d93c:	4b2f      	ldr	r3, [pc, #188]	; (800d9fc <searchA+0xec>)
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d942:	f001 fae5 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d946:	f001 fe21 	bl	800f58c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d94a:	4b2c      	ldr	r3, [pc, #176]	; (800d9fc <searchA+0xec>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	b2d1      	uxtb	r1, r2
 800d952:	4a2a      	ldr	r2, [pc, #168]	; (800d9fc <searchA+0xec>)
 800d954:	7011      	strb	r1, [r2, #0]
 800d956:	461a      	mov	r2, r3
 800d958:	4b29      	ldr	r3, [pc, #164]	; (800da00 <searchA+0xf0>)
 800d95a:	5c9b      	ldrb	r3, [r3, r2]
 800d95c:	2b22      	cmp	r3, #34	; 0x22
 800d95e:	d00b      	beq.n	800d978 <searchA+0x68>
 800d960:	2b22      	cmp	r3, #34	; 0x22
 800d962:	dc02      	bgt.n	800d96a <searchA+0x5a>
 800d964:	2b11      	cmp	r3, #17
 800d966:	d012      	beq.n	800d98e <searchA+0x7e>
 800d968:	e015      	b.n	800d996 <searchA+0x86>
 800d96a:	2b44      	cmp	r3, #68	; 0x44
 800d96c:	d001      	beq.n	800d972 <searchA+0x62>
 800d96e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800d970:	e011      	b.n	800d996 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800d972:	f7f7 feed 	bl	8005750 <rotate_R90>
				break;
 800d976:	e00e      	b.n	800d996 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800d978:	f7f8 f8a2 	bl	8005ac0 <rotate_180>
				if(wall_info & 0x88){
 800d97c:	4b1e      	ldr	r3, [pc, #120]	; (800d9f8 <searchA+0xe8>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d984:	2b00      	cmp	r3, #0
 800d986:	d005      	beq.n	800d994 <searchA+0x84>
					set_position();
 800d988:	f7f7 fcfa 	bl	8005380 <set_position>
				}
				break;
 800d98c:	e002      	b.n	800d994 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800d98e:	f7f7 ffbb 	bl	8005908 <rotate_L90>
				break;
 800d992:	e000      	b.n	800d996 <searchA+0x86>
				break;
 800d994:	bf00      	nop
		}

		drive_wait();
 800d996:	2032      	movs	r0, #50	; 0x32
 800d998:	f7f3 fb40 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800d99c:	f7f7 fe1c 	bl	80055d8 <one_section>
		drive_wait();
 800d9a0:	2032      	movs	r0, #50	; 0x32
 800d9a2:	f7f3 fb3b 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800d9a6:	f000 ffed 	bl	800e984 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800d9aa:	f001 f825 	bl	800e9f8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800d9ae:	4b15      	ldr	r3, [pc, #84]	; (800da04 <searchA+0xf4>)
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	4b14      	ldr	r3, [pc, #80]	; (800da08 <searchA+0xf8>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d1c6      	bne.n	800d94a <searchA+0x3a>
 800d9bc:	4b11      	ldr	r3, [pc, #68]	; (800da04 <searchA+0xf4>)
 800d9be:	785b      	ldrb	r3, [r3, #1]
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	4b12      	ldr	r3, [pc, #72]	; (800da0c <searchA+0xfc>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d1bf      	bne.n	800d94a <searchA+0x3a>

	printf("goal\n");
 800d9ca:	4811      	ldr	r0, [pc, #68]	; (800da10 <searchA+0x100>)
 800d9cc:	f003 fda0 	bl	8011510 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800d9d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d9d4:	f7f3 fb22 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d9d8:	f7f8 f872 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800d9dc:	4b05      	ldr	r3, [pc, #20]	; (800d9f4 <searchA+0xe4>)
 800d9de:	881b      	ldrh	r3, [r3, #0]
 800d9e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <searchA+0xde>
		store_map_in_eeprom();
 800d9ea:	f002 fe63 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800d9ee:	bf00      	nop
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20000fa8 	.word	0x20000fa8
 800d9f8:	20000300 	.word	0x20000300
 800d9fc:	200012f0 	.word	0x200012f0
 800da00:	20000c98 	.word	0x20000c98
 800da04:	20000c50 	.word	0x20000c50
 800da08:	20000bf1 	.word	0x20000bf1
 800da0c:	20000b8c 	.word	0x20000b8c
 800da10:	08012ba0 	.word	0x08012ba0

0800da14 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800da18:	4b3c      	ldr	r3, [pc, #240]	; (800db0c <searchB+0xf8>)
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <searchB+0x16>
		load_map_from_eeprom();
 800da26:	f002 fe7f 	bl	8010728 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800da2a:	f002 fef5 	bl	8010818 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800da2e:	4b38      	ldr	r3, [pc, #224]	; (800db10 <searchB+0xfc>)
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800da36:	b2da      	uxtb	r2, r3
 800da38:	4b35      	ldr	r3, [pc, #212]	; (800db10 <searchB+0xfc>)
 800da3a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800da3c:	f001 f866 	bl	800eb0c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800da40:	f7f7 fcb4 	bl	80053ac <start_sectionA>
	adv_pos();
 800da44:	f000 ff9e 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800da48:	f001 f860 	bl	800eb0c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800da4c:	4b31      	ldr	r3, [pc, #196]	; (800db14 <searchB+0x100>)
 800da4e:	2200      	movs	r2, #0
 800da50:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800da52:	f001 fa5d 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800da56:	f001 fd99 	bl	800f58c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800da5a:	4b2e      	ldr	r3, [pc, #184]	; (800db14 <searchB+0x100>)
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	b2d1      	uxtb	r1, r2
 800da62:	4a2c      	ldr	r2, [pc, #176]	; (800db14 <searchB+0x100>)
 800da64:	7011      	strb	r1, [r2, #0]
 800da66:	461a      	mov	r2, r3
 800da68:	4b2b      	ldr	r3, [pc, #172]	; (800db18 <searchB+0x104>)
 800da6a:	5c9b      	ldrb	r3, [r3, r2]
 800da6c:	2b22      	cmp	r3, #34	; 0x22
 800da6e:	d012      	beq.n	800da96 <searchB+0x82>
 800da70:	2b22      	cmp	r3, #34	; 0x22
 800da72:	dc02      	bgt.n	800da7a <searchB+0x66>
 800da74:	2b11      	cmp	r3, #17
 800da76:	d01d      	beq.n	800dab4 <searchB+0xa0>
 800da78:	e023      	b.n	800dac2 <searchB+0xae>
 800da7a:	2b44      	cmp	r3, #68	; 0x44
 800da7c:	d004      	beq.n	800da88 <searchB+0x74>
 800da7e:	2b88      	cmp	r3, #136	; 0x88
 800da80:	d11f      	bne.n	800dac2 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800da82:	f7f7 fe4d 	bl	8005720 <one_sectionU>
				break;
 800da86:	e01c      	b.n	800dac2 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800da88:	f7f7 fd2a 	bl	80054e0 <half_sectionD>
				rotate_R90();
 800da8c:	f7f7 fe60 	bl	8005750 <rotate_R90>
				half_sectionA();
 800da90:	f7f7 fd0c 	bl	80054ac <half_sectionA>
				break;
 800da94:	e015      	b.n	800dac2 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800da96:	f7f7 fd23 	bl	80054e0 <half_sectionD>
				rotate_180();
 800da9a:	f7f8 f811 	bl	8005ac0 <rotate_180>
				if(wall_info & 0x88){
 800da9e:	4b1c      	ldr	r3, [pc, #112]	; (800db10 <searchB+0xfc>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <searchB+0x9a>
					set_position();
 800daaa:	f7f7 fc69 	bl	8005380 <set_position>
				}
				half_sectionA();
 800daae:	f7f7 fcfd 	bl	80054ac <half_sectionA>
				break;
 800dab2:	e006      	b.n	800dac2 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800dab4:	f7f7 fd14 	bl	80054e0 <half_sectionD>
				rotate_L90();
 800dab8:	f7f7 ff26 	bl	8005908 <rotate_L90>
				half_sectionA();
 800dabc:	f7f7 fcf6 	bl	80054ac <half_sectionA>
				break;
 800dac0:	bf00      	nop
		}
		adv_pos();
 800dac2:	f000 ff5f 	bl	800e984 <adv_pos>
		conf_route();
 800dac6:	f000 ff97 	bl	800e9f8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800daca:	4b14      	ldr	r3, [pc, #80]	; (800db1c <searchB+0x108>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	4b13      	ldr	r3, [pc, #76]	; (800db20 <searchB+0x10c>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d1c0      	bne.n	800da5a <searchB+0x46>
 800dad8:	4b10      	ldr	r3, [pc, #64]	; (800db1c <searchB+0x108>)
 800dada:	785b      	ldrb	r3, [r3, #1]
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	4b11      	ldr	r3, [pc, #68]	; (800db24 <searchB+0x110>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d1b9      	bne.n	800da5a <searchB+0x46>

	half_sectionD();
 800dae6:	f7f7 fcfb 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800daea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800daee:	f7f3 fa95 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800daf2:	f7f7 ffe5 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800daf6:	4b05      	ldr	r3, [pc, #20]	; (800db0c <searchB+0xf8>)
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <searchB+0xf4>
		store_map_in_eeprom();
 800db04:	f002 fdd6 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800db08:	bf00      	nop
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20000fa8 	.word	0x20000fa8
 800db10:	20000300 	.word	0x20000300
 800db14:	200012f0 	.word	0x200012f0
 800db18:	20000c98 	.word	0x20000c98
 800db1c:	20000c50 	.word	0x20000c50
 800db20:	20000bf1 	.word	0x20000bf1
 800db24:	20000b8c 	.word	0x20000b8c

0800db28 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800db2c:	4b4a      	ldr	r3, [pc, #296]	; (800dc58 <searchC+0x130>)
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <searchC+0x16>
		load_map_from_eeprom();
 800db3a:	f002 fdf5 	bl	8010728 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800db3e:	4b46      	ldr	r3, [pc, #280]	; (800dc58 <searchC+0x130>)
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <searchC+0x28>
 800db4c:	f002 fe64 	bl	8010818 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800db50:	4b41      	ldr	r3, [pc, #260]	; (800dc58 <searchC+0x130>)
 800db52:	881b      	ldrh	r3, [r3, #0]
 800db54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d106      	bne.n	800db6c <searchC+0x44>
 800db5e:	4b3f      	ldr	r3, [pc, #252]	; (800dc5c <searchC+0x134>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800db66:	b2da      	uxtb	r2, r3
 800db68:	4b3c      	ldr	r3, [pc, #240]	; (800dc5c <searchC+0x134>)
 800db6a:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800db6c:	4b3a      	ldr	r3, [pc, #232]	; (800dc58 <searchC+0x130>)
 800db6e:	881b      	ldrh	r3, [r3, #0]
 800db70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <searchC+0x56>
 800db7a:	f000 ffc7 	bl	800eb0c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800db7e:	f7f7 fc15 	bl	80053ac <start_sectionA>
	adv_pos();
 800db82:	f000 feff 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800db86:	4b34      	ldr	r3, [pc, #208]	; (800dc58 <searchC+0x130>)
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <searchC+0x70>
 800db94:	f000 ffba 	bl	800eb0c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800db98:	4b31      	ldr	r3, [pc, #196]	; (800dc60 <searchC+0x138>)
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800db9e:	f001 f9b7 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800dba2:	f001 fcf3 	bl	800f58c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800dba6:	4b2e      	ldr	r3, [pc, #184]	; (800dc60 <searchC+0x138>)
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	1c5a      	adds	r2, r3, #1
 800dbac:	b2d1      	uxtb	r1, r2
 800dbae:	4a2c      	ldr	r2, [pc, #176]	; (800dc60 <searchC+0x138>)
 800dbb0:	7011      	strb	r1, [r2, #0]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	4b2b      	ldr	r3, [pc, #172]	; (800dc64 <searchC+0x13c>)
 800dbb6:	5c9b      	ldrb	r3, [r3, r2]
 800dbb8:	2b22      	cmp	r3, #34	; 0x22
 800dbba:	d00e      	beq.n	800dbda <searchC+0xb2>
 800dbbc:	2b22      	cmp	r3, #34	; 0x22
 800dbbe:	dc02      	bgt.n	800dbc6 <searchC+0x9e>
 800dbc0:	2b11      	cmp	r3, #17
 800dbc2:	d01a      	beq.n	800dbfa <searchC+0xd2>
 800dbc4:	e01c      	b.n	800dc00 <searchC+0xd8>
 800dbc6:	2b44      	cmp	r3, #68	; 0x44
 800dbc8:	d004      	beq.n	800dbd4 <searchC+0xac>
 800dbca:	2b88      	cmp	r3, #136	; 0x88
 800dbcc:	d118      	bne.n	800dc00 <searchC+0xd8>
			//----a前進----
			case 0x88:
				one_sectionU();
 800dbce:	f7f7 fda7 	bl	8005720 <one_sectionU>
				break;
 800dbd2:	e015      	b.n	800dc00 <searchC+0xd8>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800dbd4:	f7f8 f84c 	bl	8005c70 <slalom_R90>
				break;
 800dbd8:	e012      	b.n	800dc00 <searchC+0xd8>
			//----180回転----
			case 0x22:
				half_sectionD();
 800dbda:	f7f7 fc81 	bl	80054e0 <half_sectionD>
				rotate_180();
 800dbde:	f7f7 ff6f 	bl	8005ac0 <rotate_180>
				if(wall_info & 0x88){
 800dbe2:	4b1e      	ldr	r3, [pc, #120]	; (800dc5c <searchC+0x134>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <searchC+0xcc>
					set_position();
 800dbee:	f7f7 fbc7 	bl	8005380 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800dbf2:	e005      	b.n	800dc00 <searchC+0xd8>
					half_sectionA();
 800dbf4:	f7f7 fc5a 	bl	80054ac <half_sectionA>
				break;
 800dbf8:	e002      	b.n	800dc00 <searchC+0xd8>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800dbfa:	f7f8 f93d 	bl	8005e78 <slalom_L90>
				break;
 800dbfe:	bf00      	nop
		}
		adv_pos();
 800dc00:	f000 fec0 	bl	800e984 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800dc04:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <searchC+0x130>)
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <searchC+0xee>
 800dc12:	f000 fef1 	bl	800e9f8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800dc16:	4b14      	ldr	r3, [pc, #80]	; (800dc68 <searchC+0x140>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <searchC+0x144>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d1c0      	bne.n	800dba6 <searchC+0x7e>
 800dc24:	4b10      	ldr	r3, [pc, #64]	; (800dc68 <searchC+0x140>)
 800dc26:	785b      	ldrb	r3, [r3, #1]
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	4b11      	ldr	r3, [pc, #68]	; (800dc70 <searchC+0x148>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d1b9      	bne.n	800dba6 <searchC+0x7e>

	half_sectionD();
 800dc32:	f7f7 fc55 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800dc36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc3a:	f7f3 f9ef 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800dc3e:	f7f7 ff3f 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800dc42:	4b05      	ldr	r3, [pc, #20]	; (800dc58 <searchC+0x130>)
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d101      	bne.n	800dc54 <searchC+0x12c>
		store_map_in_eeprom();
 800dc50:	f002 fd30 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800dc54:	bf00      	nop
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	20000fa8 	.word	0x20000fa8
 800dc5c:	20000300 	.word	0x20000300
 800dc60:	200012f0 	.word	0x200012f0
 800dc64:	20000c98 	.word	0x20000c98
 800dc68:	20000c50 	.word	0x20000c50
 800dc6c:	20000bf1 	.word	0x20000bf1
 800dc70:	20000b8c 	.word	0x20000b8c

0800dc74 <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800dc74:	b580      	push	{r7, lr}
 800dc76:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800dc78:	4b4a      	ldr	r3, [pc, #296]	; (800dda4 <searchC2+0x130>)
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <searchC2+0x16>
		load_map_from_eeprom();
 800dc86:	f002 fd4f 	bl	8010728 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800dc8a:	4b46      	ldr	r3, [pc, #280]	; (800dda4 <searchC2+0x130>)
 800dc8c:	881b      	ldrh	r3, [r3, #0]
 800dc8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <searchC2+0x28>
 800dc98:	f002 fdbe 	bl	8010818 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800dc9c:	4b41      	ldr	r3, [pc, #260]	; (800dda4 <searchC2+0x130>)
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <searchC2+0x44>
 800dcaa:	4b3f      	ldr	r3, [pc, #252]	; (800dda8 <searchC2+0x134>)
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	4b3c      	ldr	r3, [pc, #240]	; (800dda8 <searchC2+0x134>)
 800dcb6:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800dcb8:	4b3a      	ldr	r3, [pc, #232]	; (800dda4 <searchC2+0x130>)
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <searchC2+0x56>
 800dcc6:	f000 ff21 	bl	800eb0c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800dcca:	f7f7 fbaf 	bl	800542c <start_sectionA2>
	adv_pos();
 800dcce:	f000 fe59 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800dcd2:	4b34      	ldr	r3, [pc, #208]	; (800dda4 <searchC2+0x130>)
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <searchC2+0x70>
 800dce0:	f000 ff14 	bl	800eb0c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800dce4:	4b31      	ldr	r3, [pc, #196]	; (800ddac <searchC2+0x138>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800dcea:	f001 f911 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800dcee:	f001 fc4d 	bl	800f58c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800dcf2:	4b2e      	ldr	r3, [pc, #184]	; (800ddac <searchC2+0x138>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	1c5a      	adds	r2, r3, #1
 800dcf8:	b2d1      	uxtb	r1, r2
 800dcfa:	4a2c      	ldr	r2, [pc, #176]	; (800ddac <searchC2+0x138>)
 800dcfc:	7011      	strb	r1, [r2, #0]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	4b2b      	ldr	r3, [pc, #172]	; (800ddb0 <searchC2+0x13c>)
 800dd02:	5c9b      	ldrb	r3, [r3, r2]
 800dd04:	2b22      	cmp	r3, #34	; 0x22
 800dd06:	d00e      	beq.n	800dd26 <searchC2+0xb2>
 800dd08:	2b22      	cmp	r3, #34	; 0x22
 800dd0a:	dc02      	bgt.n	800dd12 <searchC2+0x9e>
 800dd0c:	2b11      	cmp	r3, #17
 800dd0e:	d01a      	beq.n	800dd46 <searchC2+0xd2>
 800dd10:	e01c      	b.n	800dd4c <searchC2+0xd8>
 800dd12:	2b44      	cmp	r3, #68	; 0x44
 800dd14:	d004      	beq.n	800dd20 <searchC2+0xac>
 800dd16:	2b88      	cmp	r3, #136	; 0x88
 800dd18:	d118      	bne.n	800dd4c <searchC2+0xd8>
			//----a前進----
			case 0x88:
				one_sectionU();
 800dd1a:	f7f7 fd01 	bl	8005720 <one_sectionU>
				break;
 800dd1e:	e015      	b.n	800dd4c <searchC2+0xd8>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800dd20:	f7f8 f9ae 	bl	8006080 <slalom_R902>
				break;
 800dd24:	e012      	b.n	800dd4c <searchC2+0xd8>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800dd26:	f7f7 fc05 	bl	8005534 <half_sectionD2>
				rotate_180();
 800dd2a:	f7f7 fec9 	bl	8005ac0 <rotate_180>
				if(wall_info & 0x88){
 800dd2e:	4b1e      	ldr	r3, [pc, #120]	; (800dda8 <searchC2+0x134>)
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <searchC2+0xcc>
					set_position();
 800dd3a:	f7f7 fb21 	bl	8005380 <set_position>
				}else{
					half_sectionA2();
				}
				break;
 800dd3e:	e005      	b.n	800dd4c <searchC2+0xd8>
					half_sectionA2();
 800dd40:	f7f7 fbde 	bl	8005500 <half_sectionA2>
				break;
 800dd44:	e002      	b.n	800dd4c <searchC2+0xd8>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800dd46:	f7f8 fa97 	bl	8006278 <slalom_L902>
				break;
 800dd4a:	bf00      	nop
		}
		adv_pos();
 800dd4c:	f000 fe1a 	bl	800e984 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800dd50:	4b14      	ldr	r3, [pc, #80]	; (800dda4 <searchC2+0x130>)
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <searchC2+0xee>
 800dd5e:	f000 fe4b 	bl	800e9f8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800dd62:	4b14      	ldr	r3, [pc, #80]	; (800ddb4 <searchC2+0x140>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	4b13      	ldr	r3, [pc, #76]	; (800ddb8 <searchC2+0x144>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d1c0      	bne.n	800dcf2 <searchC2+0x7e>
 800dd70:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <searchC2+0x140>)
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	4b11      	ldr	r3, [pc, #68]	; (800ddbc <searchC2+0x148>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d1b9      	bne.n	800dcf2 <searchC2+0x7e>

	half_sectionD2();
 800dd7e:	f7f7 fbd9 	bl	8005534 <half_sectionD2>

	HAL_Delay(500);
 800dd82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dd86:	f7f3 f949 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800dd8a:	f7f7 fe99 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800dd8e:	4b05      	ldr	r3, [pc, #20]	; (800dda4 <searchC2+0x130>)
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <searchC2+0x12c>
		store_map_in_eeprom();
 800dd9c:	f002 fc8a 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800dda0:	bf00      	nop
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	20000fa8 	.word	0x20000fa8
 800dda8:	20000300 	.word	0x20000300
 800ddac:	200012f0 	.word	0x200012f0
 800ddb0:	20000c98 	.word	0x20000c98
 800ddb4:	20000c50 	.word	0x20000c50
 800ddb8:	20000bf1 	.word	0x20000bf1
 800ddbc:	20000b8c 	.word	0x20000b8c

0800ddc0 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ddc4:	4b6f      	ldr	r3, [pc, #444]	; (800df84 <searchD+0x1c4>)
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <searchD+0x16>
		load_map_from_eeprom();
 800ddd2:	f002 fca9 	bl	8010728 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ddd6:	4b6b      	ldr	r3, [pc, #428]	; (800df84 <searchD+0x1c4>)
 800ddd8:	881b      	ldrh	r3, [r3, #0]
 800ddda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <searchD+0x28>
 800dde4:	f002 fd18 	bl	8010818 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800dde8:	4b66      	ldr	r3, [pc, #408]	; (800df84 <searchD+0x1c4>)
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <searchD+0x44>
 800ddf6:	4b64      	ldr	r3, [pc, #400]	; (800df88 <searchD+0x1c8>)
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	4b61      	ldr	r3, [pc, #388]	; (800df88 <searchD+0x1c8>)
 800de02:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800de04:	4b5f      	ldr	r3, [pc, #380]	; (800df84 <searchD+0x1c4>)
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <searchD+0x56>
 800de12:	f000 fe7b 	bl	800eb0c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800de16:	f7f7 fac9 	bl	80053ac <start_sectionA>
	adv_pos();
 800de1a:	f000 fdb3 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800de1e:	4b59      	ldr	r3, [pc, #356]	; (800df84 <searchD+0x1c4>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de26:	b2db      	uxtb	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <searchD+0x70>
 800de2c:	f000 fe6e 	bl	800eb0c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800de30:	4b56      	ldr	r3, [pc, #344]	; (800df8c <searchD+0x1cc>)
 800de32:	2200      	movs	r2, #0
 800de34:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800de36:	f001 f86b 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800de3a:	f001 fba7 	bl	800f58c <make_route>

	H_accel_flag = 0;
 800de3e:	4b54      	ldr	r3, [pc, #336]	; (800df90 <searchD+0x1d0>)
 800de40:	2200      	movs	r2, #0
 800de42:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800de44:	4b51      	ldr	r3, [pc, #324]	; (800df8c <searchD+0x1cc>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	b2d1      	uxtb	r1, r2
 800de4c:	4a4f      	ldr	r2, [pc, #316]	; (800df8c <searchD+0x1cc>)
 800de4e:	7011      	strb	r1, [r2, #0]
 800de50:	461a      	mov	r2, r3
 800de52:	4b50      	ldr	r3, [pc, #320]	; (800df94 <searchD+0x1d4>)
 800de54:	5c9b      	ldrb	r3, [r3, r2]
 800de56:	2b22      	cmp	r3, #34	; 0x22
 800de58:	d053      	beq.n	800df02 <searchD+0x142>
 800de5a:	2b22      	cmp	r3, #34	; 0x22
 800de5c:	dc02      	bgt.n	800de64 <searchD+0xa4>
 800de5e:	2b11      	cmp	r3, #17
 800de60:	d05f      	beq.n	800df22 <searchD+0x162>
 800de62:	e061      	b.n	800df28 <searchD+0x168>
 800de64:	2b44      	cmp	r3, #68	; 0x44
 800de66:	d049      	beq.n	800defc <searchD+0x13c>
 800de68:	2b88      	cmp	r3, #136	; 0x88
 800de6a:	d15d      	bne.n	800df28 <searchD+0x168>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800de6c:	4b45      	ldr	r3, [pc, #276]	; (800df84 <searchD+0x1c4>)
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b01      	cmp	r3, #1
 800de78:	d13c      	bne.n	800def4 <searchD+0x134>
 800de7a:	4b42      	ldr	r3, [pc, #264]	; (800df84 <searchD+0x1c4>)
 800de7c:	881b      	ldrh	r3, [r3, #0]
 800de7e:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b01      	cmp	r3, #1
 800de86:	d135      	bne.n	800def4 <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800de88:	4b40      	ldr	r3, [pc, #256]	; (800df8c <searchD+0x1cc>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	3b01      	subs	r3, #1
 800de8e:	4a41      	ldr	r2, [pc, #260]	; (800df94 <searchD+0x1d4>)
 800de90:	5cd2      	ldrb	r2, [r2, r3]
 800de92:	4b3e      	ldr	r3, [pc, #248]	; (800df8c <searchD+0x1cc>)
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	4619      	mov	r1, r3
 800de98:	4b3e      	ldr	r3, [pc, #248]	; (800df94 <searchD+0x1d4>)
 800de9a:	5c5b      	ldrb	r3, [r3, r1]
 800de9c:	4013      	ands	r3, r2
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2b88      	cmp	r3, #136	; 0x88
 800dea2:	d110      	bne.n	800dec6 <searchD+0x106>
 800dea4:	4b39      	ldr	r3, [pc, #228]	; (800df8c <searchD+0x1cc>)
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b3a      	ldr	r3, [pc, #232]	; (800df94 <searchD+0x1d4>)
 800deac:	5c9b      	ldrb	r3, [r3, r2]
 800deae:	2bff      	cmp	r3, #255	; 0xff
 800deb0:	d009      	beq.n	800dec6 <searchD+0x106>
 800deb2:	4b37      	ldr	r3, [pc, #220]	; (800df90 <searchD+0x1d0>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d105      	bne.n	800dec6 <searchD+0x106>
						one_sectionA();
 800deba:	f7f7 fb95 	bl	80055e8 <one_sectionA>
						H_accel_flag = 1;
 800debe:	4b34      	ldr	r3, [pc, #208]	; (800df90 <searchD+0x1d0>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	701a      	strb	r2, [r3, #0]
 800dec4:	e015      	b.n	800def2 <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800dec6:	4b31      	ldr	r3, [pc, #196]	; (800df8c <searchD+0x1cc>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	4b31      	ldr	r3, [pc, #196]	; (800df94 <searchD+0x1d4>)
 800dece:	5c9b      	ldrb	r3, [r3, r2]
 800ded0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d009      	beq.n	800deec <searchD+0x12c>
 800ded8:	4b2d      	ldr	r3, [pc, #180]	; (800df90 <searchD+0x1d0>)
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d105      	bne.n	800deec <searchD+0x12c>
						one_sectionD();
 800dee0:	f7f7 fba8 	bl	8005634 <one_sectionD>
						H_accel_flag = 0;
 800dee4:	4b2a      	ldr	r3, [pc, #168]	; (800df90 <searchD+0x1d0>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	701a      	strb	r2, [r3, #0]
 800deea:	e002      	b.n	800def2 <searchD+0x132>
					}else{
						one_sectionU();
 800deec:	f7f7 fc18 	bl	8005720 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800def0:	e003      	b.n	800defa <searchD+0x13a>
 800def2:	e002      	b.n	800defa <searchD+0x13a>
					}
				}else{
					one_sectionU();
 800def4:	f7f7 fc14 	bl	8005720 <one_sectionU>
				}
				break;
 800def8:	e016      	b.n	800df28 <searchD+0x168>
 800defa:	e015      	b.n	800df28 <searchD+0x168>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800defc:	f7f7 feb8 	bl	8005c70 <slalom_R90>
				break;
 800df00:	e012      	b.n	800df28 <searchD+0x168>
			//----180回転----
			case 0x22:
				half_sectionD();
 800df02:	f7f7 faed 	bl	80054e0 <half_sectionD>
				rotate_180();
 800df06:	f7f7 fddb 	bl	8005ac0 <rotate_180>
				if(wall_info & 0x88){
 800df0a:	4b1f      	ldr	r3, [pc, #124]	; (800df88 <searchD+0x1c8>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <searchD+0x15c>
					set_position();
 800df16:	f7f7 fa33 	bl	8005380 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800df1a:	e005      	b.n	800df28 <searchD+0x168>
					half_sectionA();
 800df1c:	f7f7 fac6 	bl	80054ac <half_sectionA>
				break;
 800df20:	e002      	b.n	800df28 <searchD+0x168>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800df22:	f7f7 ffa9 	bl	8005e78 <slalom_L90>
				break;
 800df26:	bf00      	nop
		}
		adv_pos();
 800df28:	f000 fd2c 	bl	800e984 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800df2c:	4b15      	ldr	r3, [pc, #84]	; (800df84 <searchD+0x1c4>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <searchD+0x17e>
 800df3a:	f000 fd5d 	bl	800e9f8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800df3e:	4b16      	ldr	r3, [pc, #88]	; (800df98 <searchD+0x1d8>)
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	b2da      	uxtb	r2, r3
 800df44:	4b15      	ldr	r3, [pc, #84]	; (800df9c <searchD+0x1dc>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	429a      	cmp	r2, r3
 800df4a:	f47f af7b 	bne.w	800de44 <searchD+0x84>
 800df4e:	4b12      	ldr	r3, [pc, #72]	; (800df98 <searchD+0x1d8>)
 800df50:	785b      	ldrb	r3, [r3, #1]
 800df52:	b2da      	uxtb	r2, r3
 800df54:	4b12      	ldr	r3, [pc, #72]	; (800dfa0 <searchD+0x1e0>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	429a      	cmp	r2, r3
 800df5a:	f47f af73 	bne.w	800de44 <searchD+0x84>

	half_sectionD();
 800df5e:	f7f7 fabf 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800df62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df66:	f7f3 f859 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800df6a:	f7f7 fda9 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800df6e:	4b05      	ldr	r3, [pc, #20]	; (800df84 <searchD+0x1c4>)
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <searchD+0x1c0>
		store_map_in_eeprom();
 800df7c:	f002 fb9a 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800df80:	bf00      	nop
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20000fa8 	.word	0x20000fa8
 800df88:	20000300 	.word	0x20000300
 800df8c:	200012f0 	.word	0x200012f0
 800df90:	20000301 	.word	0x20000301
 800df94:	20000c98 	.word	0x20000c98
 800df98:	20000c50 	.word	0x20000c50
 800df9c:	20000bf1 	.word	0x20000bf1
 800dfa0:	20000b8c 	.word	0x20000b8c

0800dfa4 <searchD2>:
//searchD2
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD2(){
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800dfa8:	4b6a      	ldr	r3, [pc, #424]	; (800e154 <searchD2+0x1b0>)
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <searchD2+0x16>
		load_map_from_eeprom();
 800dfb6:	f002 fbb7 	bl	8010728 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800dfba:	4b66      	ldr	r3, [pc, #408]	; (800e154 <searchD2+0x1b0>)
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <searchD2+0x28>
 800dfc8:	f002 fc26 	bl	8010818 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800dfcc:	4b61      	ldr	r3, [pc, #388]	; (800e154 <searchD2+0x1b0>)
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <searchD2+0x44>
 800dfda:	4b5f      	ldr	r3, [pc, #380]	; (800e158 <searchD2+0x1b4>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	4b5c      	ldr	r3, [pc, #368]	; (800e158 <searchD2+0x1b4>)
 800dfe6:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800dfe8:	4b5a      	ldr	r3, [pc, #360]	; (800e154 <searchD2+0x1b0>)
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <searchD2+0x56>
 800dff6:	f000 fd89 	bl	800eb0c <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800dffa:	f7f7 fa17 	bl	800542c <start_sectionA2>
	adv_pos();
 800dffe:	f000 fcc1 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800e002:	4b54      	ldr	r3, [pc, #336]	; (800e154 <searchD2+0x1b0>)
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <searchD2+0x70>
 800e010:	f000 fd7c 	bl	800eb0c <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800e014:	4b51      	ldr	r3, [pc, #324]	; (800e15c <searchD2+0x1b8>)
 800e016:	2200      	movs	r2, #0
 800e018:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e01a:	f000 ff79 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e01e:	f001 fab5 	bl	800f58c <make_route>

	H_accel_flag = 0;
 800e022:	4b4f      	ldr	r3, [pc, #316]	; (800e160 <searchD2+0x1bc>)
 800e024:	2200      	movs	r2, #0
 800e026:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e028:	4b4c      	ldr	r3, [pc, #304]	; (800e15c <searchD2+0x1b8>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	1c5a      	adds	r2, r3, #1
 800e02e:	b2d1      	uxtb	r1, r2
 800e030:	4a4a      	ldr	r2, [pc, #296]	; (800e15c <searchD2+0x1b8>)
 800e032:	7011      	strb	r1, [r2, #0]
 800e034:	461a      	mov	r2, r3
 800e036:	4b4b      	ldr	r3, [pc, #300]	; (800e164 <searchD2+0x1c0>)
 800e038:	5c9b      	ldrb	r3, [r3, r2]
 800e03a:	2b22      	cmp	r3, #34	; 0x22
 800e03c:	d053      	beq.n	800e0e6 <searchD2+0x142>
 800e03e:	2b22      	cmp	r3, #34	; 0x22
 800e040:	dc02      	bgt.n	800e048 <searchD2+0xa4>
 800e042:	2b11      	cmp	r3, #17
 800e044:	d056      	beq.n	800e0f4 <searchD2+0x150>
 800e046:	e058      	b.n	800e0fa <searchD2+0x156>
 800e048:	2b44      	cmp	r3, #68	; 0x44
 800e04a:	d049      	beq.n	800e0e0 <searchD2+0x13c>
 800e04c:	2b88      	cmp	r3, #136	; 0x88
 800e04e:	d154      	bne.n	800e0fa <searchD2+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800e050:	4b40      	ldr	r3, [pc, #256]	; (800e154 <searchD2+0x1b0>)
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d13c      	bne.n	800e0d8 <searchD2+0x134>
 800e05e:	4b3d      	ldr	r3, [pc, #244]	; (800e154 <searchD2+0x1b0>)
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d135      	bne.n	800e0d8 <searchD2+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800e06c:	4b3b      	ldr	r3, [pc, #236]	; (800e15c <searchD2+0x1b8>)
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	3b01      	subs	r3, #1
 800e072:	4a3c      	ldr	r2, [pc, #240]	; (800e164 <searchD2+0x1c0>)
 800e074:	5cd2      	ldrb	r2, [r2, r3]
 800e076:	4b39      	ldr	r3, [pc, #228]	; (800e15c <searchD2+0x1b8>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	4619      	mov	r1, r3
 800e07c:	4b39      	ldr	r3, [pc, #228]	; (800e164 <searchD2+0x1c0>)
 800e07e:	5c5b      	ldrb	r3, [r3, r1]
 800e080:	4013      	ands	r3, r2
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2b88      	cmp	r3, #136	; 0x88
 800e086:	d110      	bne.n	800e0aa <searchD2+0x106>
 800e088:	4b34      	ldr	r3, [pc, #208]	; (800e15c <searchD2+0x1b8>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	461a      	mov	r2, r3
 800e08e:	4b35      	ldr	r3, [pc, #212]	; (800e164 <searchD2+0x1c0>)
 800e090:	5c9b      	ldrb	r3, [r3, r2]
 800e092:	2bff      	cmp	r3, #255	; 0xff
 800e094:	d009      	beq.n	800e0aa <searchD2+0x106>
 800e096:	4b32      	ldr	r3, [pc, #200]	; (800e160 <searchD2+0x1bc>)
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d105      	bne.n	800e0aa <searchD2+0x106>
						one_sectionA();
 800e09e:	f7f7 faa3 	bl	80055e8 <one_sectionA>
						H_accel_flag = 1;
 800e0a2:	4b2f      	ldr	r3, [pc, #188]	; (800e160 <searchD2+0x1bc>)
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	701a      	strb	r2, [r3, #0]
 800e0a8:	e015      	b.n	800e0d6 <searchD2+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800e0aa:	4b2c      	ldr	r3, [pc, #176]	; (800e15c <searchD2+0x1b8>)
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	4b2c      	ldr	r3, [pc, #176]	; (800e164 <searchD2+0x1c0>)
 800e0b2:	5c9b      	ldrb	r3, [r3, r2]
 800e0b4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d009      	beq.n	800e0d0 <searchD2+0x12c>
 800e0bc:	4b28      	ldr	r3, [pc, #160]	; (800e160 <searchD2+0x1bc>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d105      	bne.n	800e0d0 <searchD2+0x12c>
						one_sectionD();
 800e0c4:	f7f7 fab6 	bl	8005634 <one_sectionD>
						H_accel_flag = 0;
 800e0c8:	4b25      	ldr	r3, [pc, #148]	; (800e160 <searchD2+0x1bc>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	e002      	b.n	800e0d6 <searchD2+0x132>
					}else{
						one_sectionU();
 800e0d0:	f7f7 fb26 	bl	8005720 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800e0d4:	e003      	b.n	800e0de <searchD2+0x13a>
 800e0d6:	e002      	b.n	800e0de <searchD2+0x13a>
					}
				}else{
					one_sectionU();
 800e0d8:	f7f7 fb22 	bl	8005720 <one_sectionU>
				}
				break;
 800e0dc:	e00d      	b.n	800e0fa <searchD2+0x156>
 800e0de:	e00c      	b.n	800e0fa <searchD2+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800e0e0:	f7f7 ffce 	bl	8006080 <slalom_R902>

				break;
 800e0e4:	e009      	b.n	800e0fa <searchD2+0x156>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800e0e6:	f7f7 fa25 	bl	8005534 <half_sectionD2>
				rotate_180();
 800e0ea:	f7f7 fce9 	bl	8005ac0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA2();
 800e0ee:	f7f7 fa07 	bl	8005500 <half_sectionA2>
				break;
 800e0f2:	e002      	b.n	800e0fa <searchD2+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800e0f4:	f7f8 f8c0 	bl	8006278 <slalom_L902>
				break;
 800e0f8:	bf00      	nop
		}
		adv_pos();
 800e0fa:	f000 fc43 	bl	800e984 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800e0fe:	4b15      	ldr	r3, [pc, #84]	; (800e154 <searchD2+0x1b0>)
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d101      	bne.n	800e110 <searchD2+0x16c>
 800e10c:	f000 fc74 	bl	800e9f8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800e110:	4b15      	ldr	r3, [pc, #84]	; (800e168 <searchD2+0x1c4>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	b2da      	uxtb	r2, r3
 800e116:	4b15      	ldr	r3, [pc, #84]	; (800e16c <searchD2+0x1c8>)
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d184      	bne.n	800e028 <searchD2+0x84>
 800e11e:	4b12      	ldr	r3, [pc, #72]	; (800e168 <searchD2+0x1c4>)
 800e120:	785b      	ldrb	r3, [r3, #1]
 800e122:	b2da      	uxtb	r2, r3
 800e124:	4b12      	ldr	r3, [pc, #72]	; (800e170 <searchD2+0x1cc>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	f47f af7d 	bne.w	800e028 <searchD2+0x84>

	half_sectionD2();
 800e12e:	f7f7 fa01 	bl	8005534 <half_sectionD2>

	HAL_Delay(500);
 800e132:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e136:	f7f2 ff71 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e13a:	f7f7 fcc1 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800e13e:	4b05      	ldr	r3, [pc, #20]	; (800e154 <searchD2+0x1b0>)
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d101      	bne.n	800e150 <searchD2+0x1ac>
		store_map_in_eeprom();
 800e14c:	f002 fab2 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800e150:	bf00      	nop
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20000fa8 	.word	0x20000fa8
 800e158:	20000300 	.word	0x20000300
 800e15c:	200012f0 	.word	0x200012f0
 800e160:	20000301 	.word	0x20000301
 800e164:	20000c98 	.word	0x20000c98
 800e168:	20000c50 	.word	0x20000c50
 800e16c:	20000bf1 	.word	0x20000bf1
 800e170:	20000b8c 	.word	0x20000b8c

0800e174 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0

	int i = 0;
 800e17a:	2300      	movs	r3, #0
 800e17c:	607b      	str	r3, [r7, #4]
	int j = 0;
 800e17e:	2300      	movs	r3, #0
 800e180:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d111      	bne.n	800e1ac <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800e188:	f7f7 f990 	bl	80054ac <half_sectionA>
			adv_pos();
 800e18c:	f000 fbfa 	bl	800e984 <adv_pos>
			write_map();														//地図の初期化
 800e190:	f000 fcbc 	bl	800eb0c <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800e194:	4b42      	ldr	r3, [pc, #264]	; (800e2a0 <searchE+0x12c>)
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
 800e19a:	4b42      	ldr	r3, [pc, #264]	; (800e2a4 <searchE+0x130>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800e1a0:	f001 fb42 	bl	800f828 <find_pregoal>
			make_smap2();
 800e1a4:	f001 fd2c 	bl	800fc00 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800e1a8:	f001 f9f0 	bl	800f58c <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800e1ac:	4b3c      	ldr	r3, [pc, #240]	; (800e2a0 <searchE+0x12c>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	b2d1      	uxtb	r1, r2
 800e1b4:	4a3a      	ldr	r2, [pc, #232]	; (800e2a0 <searchE+0x12c>)
 800e1b6:	7011      	strb	r1, [r2, #0]
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4b3b      	ldr	r3, [pc, #236]	; (800e2a8 <searchE+0x134>)
 800e1bc:	5c9b      	ldrb	r3, [r3, r2]
 800e1be:	2b22      	cmp	r3, #34	; 0x22
 800e1c0:	d00e      	beq.n	800e1e0 <searchE+0x6c>
 800e1c2:	2b22      	cmp	r3, #34	; 0x22
 800e1c4:	dc02      	bgt.n	800e1cc <searchE+0x58>
 800e1c6:	2b11      	cmp	r3, #17
 800e1c8:	d01a      	beq.n	800e200 <searchE+0x8c>
 800e1ca:	e01c      	b.n	800e206 <searchE+0x92>
 800e1cc:	2b44      	cmp	r3, #68	; 0x44
 800e1ce:	d004      	beq.n	800e1da <searchE+0x66>
 800e1d0:	2b88      	cmp	r3, #136	; 0x88
 800e1d2:	d118      	bne.n	800e206 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800e1d4:	f7f7 faa4 	bl	8005720 <one_sectionU>
				break;
 800e1d8:	e015      	b.n	800e206 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800e1da:	f7f7 fd49 	bl	8005c70 <slalom_R90>
				break;
 800e1de:	e012      	b.n	800e206 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800e1e0:	f7f7 f97e 	bl	80054e0 <half_sectionD>
				rotate_180();
 800e1e4:	f7f7 fc6c 	bl	8005ac0 <rotate_180>
				if(wall_info & 0x88){
 800e1e8:	4b30      	ldr	r3, [pc, #192]	; (800e2ac <searchE+0x138>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <searchE+0x86>
					set_position();
 800e1f4:	f7f7 f8c4 	bl	8005380 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800e1f8:	e005      	b.n	800e206 <searchE+0x92>
					half_sectionA();
 800e1fa:	f7f7 f957 	bl	80054ac <half_sectionA>
				break;
 800e1fe:	e002      	b.n	800e206 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800e200:	f7f7 fe3a 	bl	8005e78 <slalom_L90>
				break;
 800e204:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800e206:	f000 fbbd 	bl	800e984 <adv_pos>
			j++;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	3301      	adds	r3, #1
 800e20e:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b96      	cmp	r3, #150	; 0x96
 800e214:	dc0e      	bgt.n	800e234 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800e216:	4b26      	ldr	r3, [pc, #152]	; (800e2b0 <searchE+0x13c>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	b2da      	uxtb	r2, r3
 800e21c:	4b25      	ldr	r3, [pc, #148]	; (800e2b4 <searchE+0x140>)
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d1c3      	bne.n	800e1ac <searchE+0x38>
 800e224:	4b22      	ldr	r3, [pc, #136]	; (800e2b0 <searchE+0x13c>)
 800e226:	785b      	ldrb	r3, [r3, #1]
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b23      	ldr	r3, [pc, #140]	; (800e2b8 <searchE+0x144>)
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d1bc      	bne.n	800e1ac <searchE+0x38>
 800e232:	e000      	b.n	800e236 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800e234:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800e236:	f002 faef 	bl	8010818 <get_wall_info>
		write_map();														//a地図の初期化
 800e23a:	f000 fc67 	bl	800eb0c <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800e23e:	4b18      	ldr	r3, [pc, #96]	; (800e2a0 <searchE+0x12c>)
 800e240:	2200      	movs	r2, #0
 800e242:	701a      	strb	r2, [r3, #0]
 800e244:	4b17      	ldr	r3, [pc, #92]	; (800e2a4 <searchE+0x130>)
 800e246:	2200      	movs	r2, #0
 800e248:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800e24a:	f001 faed 	bl	800f828 <find_pregoal>
		if (allmap_comp_flag) {
 800e24e:	4b1b      	ldr	r3, [pc, #108]	; (800e2bc <searchE+0x148>)
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <searchE+0xe8>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800e256:	f7f7 f943 	bl	80054e0 <half_sectionD>
			break;
 800e25a:	e00e      	b.n	800e27a <searchE+0x106>
		}
		make_smap2();
 800e25c:	f001 fcd0 	bl	800fc00 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800e260:	f001 f994 	bl	800f58c <make_route>

		if (j > 150) {
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	2b96      	cmp	r3, #150	; 0x96
 800e268:	dc06      	bgt.n	800e278 <searchE+0x104>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3301      	adds	r3, #1
 800e26e:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b95      	cmp	r3, #149	; 0x95
 800e274:	dd85      	ble.n	800e182 <searchE+0xe>
 800e276:	e000      	b.n	800e27a <searchE+0x106>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800e278:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(500);
 800e27a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e27e:	f7f2 fecd 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e282:	f7f7 fc1d 	bl	8005ac0 <rotate_180>

	if(!MF.FLAG.SCND){
 800e286:	4b0e      	ldr	r3, [pc, #56]	; (800e2c0 <searchE+0x14c>)
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d101      	bne.n	800e298 <searchE+0x124>
		store_map_in_eeprom();
 800e294:	f002 fa0e 	bl	80106b4 <store_map_in_eeprom>
	}
}
 800e298:	bf00      	nop
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	200012f0 	.word	0x200012f0
 800e2a4:	20000386 	.word	0x20000386
 800e2a8:	20000c98 	.word	0x20000c98
 800e2ac:	20000300 	.word	0x20000300
 800e2b0:	20000c50 	.word	0x20000c50
 800e2b4:	20000da0 	.word	0x20000da0
 800e2b8:	20000fc0 	.word	0x20000fc0
 800e2bc:	20000bf0 	.word	0x20000bf0
 800e2c0:	20000fa8 	.word	0x20000fa8

0800e2c4 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e2ca:	4b51      	ldr	r3, [pc, #324]	; (800e410 <searchF3+0x14c>)
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d001      	beq.n	800e2dc <searchF3+0x18>
		load_map_from_eeprom();
 800e2d8:	f002 fa26 	bl	8010728 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800e2dc:	f000 fb52 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800e2e0:	f000 fe16 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e2e4:	f001 f952 	bl	800f58c <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800e2e8:	4b4a      	ldr	r3, [pc, #296]	; (800e414 <searchF3+0x150>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800e2ee:	f001 fdab 	bl	800fe48 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e2f2:	f7f7 f85b 	bl	80053ac <start_sectionA>

	H_accel_flag = 0;
 800e2f6:	4b48      	ldr	r3, [pc, #288]	; (800e418 <searchF3+0x154>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e2fc:	4b45      	ldr	r3, [pc, #276]	; (800e414 <searchF3+0x150>)
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	b2d1      	uxtb	r1, r2
 800e304:	4a43      	ldr	r2, [pc, #268]	; (800e414 <searchF3+0x150>)
 800e306:	7011      	strb	r1, [r2, #0]
 800e308:	461a      	mov	r2, r3
 800e30a:	4b44      	ldr	r3, [pc, #272]	; (800e41c <searchF3+0x158>)
 800e30c:	569b      	ldrsb	r3, [r3, r2]
 800e30e:	f113 0f04 	cmn.w	r3, #4
 800e312:	d01e      	beq.n	800e352 <searchF3+0x8e>
 800e314:	f113 0f04 	cmn.w	r3, #4
 800e318:	dc09      	bgt.n	800e32e <searchF3+0x6a>
 800e31a:	f113 0f06 	cmn.w	r3, #6
 800e31e:	d01e      	beq.n	800e35e <searchF3+0x9a>
 800e320:	f113 0f06 	cmn.w	r3, #6
 800e324:	dc18      	bgt.n	800e358 <searchF3+0x94>
 800e326:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e32a:	d01b      	beq.n	800e364 <searchF3+0xa0>
 800e32c:	e01f      	b.n	800e36e <searchF3+0xaa>
 800e32e:	f113 0f02 	cmn.w	r3, #2
 800e332:	d008      	beq.n	800e346 <searchF3+0x82>
 800e334:	f113 0f02 	cmn.w	r3, #2
 800e338:	db08      	blt.n	800e34c <searchF3+0x88>
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33e:	d116      	bne.n	800e36e <searchF3+0xaa>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800e340:	f7f7 fc96 	bl	8005c70 <slalom_R90>
				break;
 800e344:	e048      	b.n	800e3d8 <searchF3+0x114>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800e346:	f7f7 fd97 	bl	8005e78 <slalom_L90>
				break;
 800e34a:	e045      	b.n	800e3d8 <searchF3+0x114>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800e34c:	f7f8 f89e 	bl	800648c <Lslalom_R90>
				break;
 800e350:	e042      	b.n	800e3d8 <searchF3+0x114>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800e352:	f7f8 f999 	bl	8006688 <Lslalom_L90>
				break;
 800e356:	e03f      	b.n	800e3d8 <searchF3+0x114>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800e358:	f7f8 fe88 	bl	800706c <Lslalom_R180>
				break;
 800e35c:	e03c      	b.n	800e3d8 <searchF3+0x114>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800e35e:	f7f8 ff89 	bl	8007274 <Lslalom_L180>
				break;
 800e362:	e039      	b.n	800e3d8 <searchF3+0x114>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800e364:	f7f7 fbac 	bl	8005ac0 <rotate_180>
				rotate_180();
 800e368:	f7f7 fbaa 	bl	8005ac0 <rotate_180>
				while(1);
 800e36c:	e7fe      	b.n	800e36c <searchF3+0xa8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800e36e:	4b29      	ldr	r3, [pc, #164]	; (800e414 <searchF3+0x150>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	3b01      	subs	r3, #1
 800e374:	4a29      	ldr	r2, [pc, #164]	; (800e41c <searchF3+0x158>)
 800e376:	56d3      	ldrsb	r3, [r2, r3]
 800e378:	2b03      	cmp	r3, #3
 800e37a:	dc11      	bgt.n	800e3a0 <searchF3+0xdc>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e37c:	2300      	movs	r3, #0
 800e37e:	607b      	str	r3, [r7, #4]
 800e380:	e004      	b.n	800e38c <searchF3+0xc8>
						half_sectionU();
 800e382:	f7f7 f911 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3301      	adds	r3, #1
 800e38a:	607b      	str	r3, [r7, #4]
 800e38c:	4b21      	ldr	r3, [pc, #132]	; (800e414 <searchF3+0x150>)
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	3b01      	subs	r3, #1
 800e392:	4a22      	ldr	r2, [pc, #136]	; (800e41c <searchF3+0x158>)
 800e394:	56d3      	ldrsb	r3, [r2, r3]
 800e396:	461a      	mov	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4293      	cmp	r3, r2
 800e39c:	dbf1      	blt.n	800e382 <searchF3+0xbe>
						half_sectionU();
					}
					one_sectionD();
					H_accel_flag = 0;
				}
				break;
 800e39e:	e01a      	b.n	800e3d6 <searchF3+0x112>
					one_sectionA();
 800e3a0:	f7f7 f922 	bl	80055e8 <one_sectionA>
					H_accel_flag = 1;
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	; (800e418 <searchF3+0x154>)
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	603b      	str	r3, [r7, #0]
 800e3ae:	e004      	b.n	800e3ba <searchF3+0xf6>
						half_sectionU();
 800e3b0:	f7f7 f8fa 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	603b      	str	r3, [r7, #0]
 800e3ba:	4b16      	ldr	r3, [pc, #88]	; (800e414 <searchF3+0x150>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	4a16      	ldr	r2, [pc, #88]	; (800e41c <searchF3+0x158>)
 800e3c2:	56d3      	ldrsb	r3, [r2, r3]
 800e3c4:	3b04      	subs	r3, #4
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	dbf1      	blt.n	800e3b0 <searchF3+0xec>
					one_sectionD();
 800e3cc:	f7f7 f932 	bl	8005634 <one_sectionD>
					H_accel_flag = 0;
 800e3d0:	4b11      	ldr	r3, [pc, #68]	; (800e418 <searchF3+0x154>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	701a      	strb	r2, [r3, #0]
				break;
 800e3d6:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <searchF3+0x150>)
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	461a      	mov	r2, r3
 800e3de:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <searchF3+0x158>)
 800e3e0:	569b      	ldrsb	r3, [r3, r2]
 800e3e2:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e3e6:	d189      	bne.n	800e2fc <searchF3+0x38>

	mouse.x = goal_x;
 800e3e8:	4b0d      	ldr	r3, [pc, #52]	; (800e420 <searchF3+0x15c>)
 800e3ea:	781a      	ldrb	r2, [r3, #0]
 800e3ec:	4b0d      	ldr	r3, [pc, #52]	; (800e424 <searchF3+0x160>)
 800e3ee:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800e3f0:	4b0d      	ldr	r3, [pc, #52]	; (800e428 <searchF3+0x164>)
 800e3f2:	781a      	ldrb	r2, [r3, #0]
 800e3f4:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <searchF3+0x160>)
 800e3f6:	705a      	strb	r2, [r3, #1]

	half_sectionD();
 800e3f8:	f7f7 f872 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800e3fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e400:	f7f2 fe0c 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e404:	f7f7 fb5c 	bl	8005ac0 <rotate_180>

}
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	20000fa8 	.word	0x20000fa8
 800e414:	200002e8 	.word	0x200002e8
 800e418:	20000301 	.word	0x20000301
 800e41c:	20000388 	.word	0x20000388
 800e420:	20000bf1 	.word	0x20000bf1
 800e424:	20000c50 	.word	0x20000c50
 800e428:	20000b8c 	.word	0x20000b8c

0800e42c <searchF32>:
//searchF32
//aスラローム+既知区間加速+pass圧縮+機体方向&位置未更新+半区画ベース High Speedでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF32(){
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e432:	4b51      	ldr	r3, [pc, #324]	; (800e578 <searchF32+0x14c>)
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <searchF32+0x18>
		load_map_from_eeprom();
 800e440:	f002 f972 	bl	8010728 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800e444:	f000 fa9e 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800e448:	f000 fd62 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e44c:	f001 f89e 	bl	800f58c <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800e450:	4b4a      	ldr	r3, [pc, #296]	; (800e57c <searchF32+0x150>)
 800e452:	2200      	movs	r2, #0
 800e454:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800e456:	f001 fcf7 	bl	800fe48 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800e45a:	f7f6 ffe7 	bl	800542c <start_sectionA2>

	H_accel_flag = 0;
 800e45e:	4b48      	ldr	r3, [pc, #288]	; (800e580 <searchF32+0x154>)
 800e460:	2200      	movs	r2, #0
 800e462:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e464:	4b45      	ldr	r3, [pc, #276]	; (800e57c <searchF32+0x150>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	b2d1      	uxtb	r1, r2
 800e46c:	4a43      	ldr	r2, [pc, #268]	; (800e57c <searchF32+0x150>)
 800e46e:	7011      	strb	r1, [r2, #0]
 800e470:	461a      	mov	r2, r3
 800e472:	4b44      	ldr	r3, [pc, #272]	; (800e584 <searchF32+0x158>)
 800e474:	569b      	ldrsb	r3, [r3, r2]
 800e476:	f113 0f04 	cmn.w	r3, #4
 800e47a:	d01e      	beq.n	800e4ba <searchF32+0x8e>
 800e47c:	f113 0f04 	cmn.w	r3, #4
 800e480:	dc09      	bgt.n	800e496 <searchF32+0x6a>
 800e482:	f113 0f06 	cmn.w	r3, #6
 800e486:	d01e      	beq.n	800e4c6 <searchF32+0x9a>
 800e488:	f113 0f06 	cmn.w	r3, #6
 800e48c:	dc18      	bgt.n	800e4c0 <searchF32+0x94>
 800e48e:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e492:	d01b      	beq.n	800e4cc <searchF32+0xa0>
 800e494:	e01f      	b.n	800e4d6 <searchF32+0xaa>
 800e496:	f113 0f02 	cmn.w	r3, #2
 800e49a:	d008      	beq.n	800e4ae <searchF32+0x82>
 800e49c:	f113 0f02 	cmn.w	r3, #2
 800e4a0:	db08      	blt.n	800e4b4 <searchF32+0x88>
 800e4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a6:	d116      	bne.n	800e4d6 <searchF32+0xaa>
			//----a右スラローム----
			case -1:
				slalom_R902();
 800e4a8:	f7f7 fdea 	bl	8006080 <slalom_R902>
				break;
 800e4ac:	e048      	b.n	800e540 <searchF32+0x114>

			//----a左スラローム----
			case -2:
				slalom_L902();
 800e4ae:	f7f7 fee3 	bl	8006278 <slalom_L902>
				break;
 800e4b2:	e045      	b.n	800e540 <searchF32+0x114>

			//----a大回り右90----
			case -3:
				Lslalom_R902();
 800e4b4:	f7f8 f9e6 	bl	8006884 <Lslalom_R902>
				break;
 800e4b8:	e042      	b.n	800e540 <searchF32+0x114>

			//----a大回り左90----
			case -4:
				Lslalom_L902();
 800e4ba:	f7f8 fae1 	bl	8006a80 <Lslalom_L902>
				break;
 800e4be:	e03f      	b.n	800e540 <searchF32+0x114>

			//----a大回り右180----
			case -5:
				Lslalom_R1802();
 800e4c0:	f7f8 ffdc 	bl	800747c <Lslalom_R1802>
				break;
 800e4c4:	e03c      	b.n	800e540 <searchF32+0x114>

			//----a大回り左180----
			case -6:
				Lslalom_L1802();
 800e4c6:	f7f9 f8db 	bl	8007680 <Lslalom_L1802>
				break;
 800e4ca:	e039      	b.n	800e540 <searchF32+0x114>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800e4cc:	f7f7 faf8 	bl	8005ac0 <rotate_180>
				rotate_180();
 800e4d0:	f7f7 faf6 	bl	8005ac0 <rotate_180>
				while(1);
 800e4d4:	e7fe      	b.n	800e4d4 <searchF32+0xa8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800e4d6:	4b29      	ldr	r3, [pc, #164]	; (800e57c <searchF32+0x150>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	4a29      	ldr	r2, [pc, #164]	; (800e584 <searchF32+0x158>)
 800e4de:	56d3      	ldrsb	r3, [r2, r3]
 800e4e0:	2b03      	cmp	r3, #3
 800e4e2:	dc11      	bgt.n	800e508 <searchF32+0xdc>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	607b      	str	r3, [r7, #4]
 800e4e8:	e004      	b.n	800e4f4 <searchF32+0xc8>
						half_sectionU();
 800e4ea:	f7f7 f85d 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	607b      	str	r3, [r7, #4]
 800e4f4:	4b21      	ldr	r3, [pc, #132]	; (800e57c <searchF32+0x150>)
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	4a22      	ldr	r2, [pc, #136]	; (800e584 <searchF32+0x158>)
 800e4fc:	56d3      	ldrsb	r3, [r2, r3]
 800e4fe:	461a      	mov	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	4293      	cmp	r3, r2
 800e504:	dbf1      	blt.n	800e4ea <searchF32+0xbe>
						half_sectionU();
					}
					one_sectionD2();
					H_accel_flag = 0;
				}
				break;
 800e506:	e01a      	b.n	800e53e <searchF32+0x112>
					one_sectionA2();
 800e508:	f7f7 f8bc 	bl	8005684 <one_sectionA2>
					H_accel_flag = 1;
 800e50c:	4b1c      	ldr	r3, [pc, #112]	; (800e580 <searchF32+0x154>)
 800e50e:	2201      	movs	r2, #1
 800e510:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e512:	2300      	movs	r3, #0
 800e514:	603b      	str	r3, [r7, #0]
 800e516:	e004      	b.n	800e522 <searchF32+0xf6>
						half_sectionU();
 800e518:	f7f7 f846 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	3301      	adds	r3, #1
 800e520:	603b      	str	r3, [r7, #0]
 800e522:	4b16      	ldr	r3, [pc, #88]	; (800e57c <searchF32+0x150>)
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	3b01      	subs	r3, #1
 800e528:	4a16      	ldr	r2, [pc, #88]	; (800e584 <searchF32+0x158>)
 800e52a:	56d3      	ldrsb	r3, [r2, r3]
 800e52c:	3b04      	subs	r3, #4
 800e52e:	683a      	ldr	r2, [r7, #0]
 800e530:	429a      	cmp	r2, r3
 800e532:	dbf1      	blt.n	800e518 <searchF32+0xec>
					one_sectionD2();
 800e534:	f7f7 f8cc 	bl	80056d0 <one_sectionD2>
					H_accel_flag = 0;
 800e538:	4b11      	ldr	r3, [pc, #68]	; (800e580 <searchF32+0x154>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	701a      	strb	r2, [r3, #0]
				break;
 800e53e:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 800e540:	4b0e      	ldr	r3, [pc, #56]	; (800e57c <searchF32+0x150>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	461a      	mov	r2, r3
 800e546:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <searchF32+0x158>)
 800e548:	569b      	ldrsb	r3, [r3, r2]
 800e54a:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e54e:	d189      	bne.n	800e464 <searchF32+0x38>

	mouse.x = goal_x;
 800e550:	4b0d      	ldr	r3, [pc, #52]	; (800e588 <searchF32+0x15c>)
 800e552:	781a      	ldrb	r2, [r3, #0]
 800e554:	4b0d      	ldr	r3, [pc, #52]	; (800e58c <searchF32+0x160>)
 800e556:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800e558:	4b0d      	ldr	r3, [pc, #52]	; (800e590 <searchF32+0x164>)
 800e55a:	781a      	ldrb	r2, [r3, #0]
 800e55c:	4b0b      	ldr	r3, [pc, #44]	; (800e58c <searchF32+0x160>)
 800e55e:	705a      	strb	r2, [r3, #1]

	half_sectionD2();
 800e560:	f7f6 ffe8 	bl	8005534 <half_sectionD2>

	HAL_Delay(500);
 800e564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e568:	f7f2 fd58 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e56c:	f7f7 faa8 	bl	8005ac0 <rotate_180>

}
 800e570:	bf00      	nop
 800e572:	3708      	adds	r7, #8
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20000fa8 	.word	0x20000fa8
 800e57c:	200002e8 	.word	0x200002e8
 800e580:	20000301 	.word	0x20000301
 800e584:	20000388 	.word	0x20000388
 800e588:	20000bf1 	.word	0x20000bf1
 800e58c:	20000c50 	.word	0x20000c50
 800e590:	20000b8c 	.word	0x20000b8c

0800e594 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e59a:	4bc9      	ldr	r3, [pc, #804]	; (800e8c0 <searchF4+0x32c>)
 800e59c:	881b      	ldrh	r3, [r3, #0]
 800e59e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <searchF4+0x18>
		load_map_from_eeprom();
 800e5a8:	f002 f8be 	bl	8010728 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800e5ac:	f000 f9ea 	bl	800e984 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800e5b0:	f000 fcae 	bl	800ef10 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e5b4:	f000 ffea 	bl	800f58c <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800e5b8:	4bc2      	ldr	r3, [pc, #776]	; (800e8c4 <searchF4+0x330>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800e5be:	f001 fd57 	bl	8010070 <pass_route3>

	if(start_flag == 0){									//a大回りではない場合、先頭の半区画直進をスキップ
 800e5c2:	4bc1      	ldr	r3, [pc, #772]	; (800e8c8 <searchF4+0x334>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d109      	bne.n	800e5e0 <searchF4+0x4c>
		pass[p_cnt]--;;
 800e5cc:	4bbd      	ldr	r3, [pc, #756]	; (800e8c4 <searchF4+0x330>)
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	4abe      	ldr	r2, [pc, #760]	; (800e8cc <searchF4+0x338>)
 800e5d2:	56d2      	ldrsb	r2, [r2, r3]
 800e5d4:	b2d2      	uxtb	r2, r2
 800e5d6:	3a01      	subs	r2, #1
 800e5d8:	b2d2      	uxtb	r2, r2
 800e5da:	b251      	sxtb	r1, r2
 800e5dc:	4abb      	ldr	r2, [pc, #748]	; (800e8cc <searchF4+0x338>)
 800e5de:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e5e0:	f7f6 fee4 	bl	80053ac <start_sectionA>

	H_accel_flag = 0;
 800e5e4:	4bba      	ldr	r3, [pc, #744]	; (800e8d0 <searchF4+0x33c>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	701a      	strb	r2, [r3, #0]
	MF.FLAG.XDIR = 1;
 800e5ea:	4ab5      	ldr	r2, [pc, #724]	; (800e8c0 <searchF4+0x32c>)
 800e5ec:	8813      	ldrh	r3, [r2, #0]
 800e5ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e5f2:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e5f4:	4bb3      	ldr	r3, [pc, #716]	; (800e8c4 <searchF4+0x330>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	b2d1      	uxtb	r1, r2
 800e5fc:	4ab1      	ldr	r2, [pc, #708]	; (800e8c4 <searchF4+0x330>)
 800e5fe:	7011      	strb	r1, [r2, #0]
 800e600:	461a      	mov	r2, r3
 800e602:	4bb2      	ldr	r3, [pc, #712]	; (800e8cc <searchF4+0x338>)
 800e604:	569b      	ldrsb	r3, [r3, r2]
 800e606:	3372      	adds	r3, #114	; 0x72
 800e608:	2b71      	cmp	r3, #113	; 0x71
 800e60a:	f200 811c 	bhi.w	800e846 <searchF4+0x2b2>
 800e60e:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <searchF4+0x80>)
 800e610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e614:	0800e83d 	.word	0x0800e83d
 800e618:	0800e847 	.word	0x0800e847
 800e61c:	0800e847 	.word	0x0800e847
 800e620:	0800e847 	.word	0x0800e847
 800e624:	0800e847 	.word	0x0800e847
 800e628:	0800e847 	.word	0x0800e847
 800e62c:	0800e847 	.word	0x0800e847
 800e630:	0800e847 	.word	0x0800e847
 800e634:	0800e847 	.word	0x0800e847
 800e638:	0800e847 	.word	0x0800e847
 800e63c:	0800e847 	.word	0x0800e847
 800e640:	0800e847 	.word	0x0800e847
 800e644:	0800e847 	.word	0x0800e847
 800e648:	0800e847 	.word	0x0800e847
 800e64c:	0800e847 	.word	0x0800e847
 800e650:	0800e847 	.word	0x0800e847
 800e654:	0800e847 	.word	0x0800e847
 800e658:	0800e847 	.word	0x0800e847
 800e65c:	0800e847 	.word	0x0800e847
 800e660:	0800e847 	.word	0x0800e847
 800e664:	0800e847 	.word	0x0800e847
 800e668:	0800e847 	.word	0x0800e847
 800e66c:	0800e847 	.word	0x0800e847
 800e670:	0800e847 	.word	0x0800e847
 800e674:	0800e847 	.word	0x0800e847
 800e678:	0800e847 	.word	0x0800e847
 800e67c:	0800e847 	.word	0x0800e847
 800e680:	0800e847 	.word	0x0800e847
 800e684:	0800e847 	.word	0x0800e847
 800e688:	0800e847 	.word	0x0800e847
 800e68c:	0800e847 	.word	0x0800e847
 800e690:	0800e847 	.word	0x0800e847
 800e694:	0800e847 	.word	0x0800e847
 800e698:	0800e847 	.word	0x0800e847
 800e69c:	0800e847 	.word	0x0800e847
 800e6a0:	0800e847 	.word	0x0800e847
 800e6a4:	0800e847 	.word	0x0800e847
 800e6a8:	0800e847 	.word	0x0800e847
 800e6ac:	0800e847 	.word	0x0800e847
 800e6b0:	0800e847 	.word	0x0800e847
 800e6b4:	0800e847 	.word	0x0800e847
 800e6b8:	0800e847 	.word	0x0800e847
 800e6bc:	0800e847 	.word	0x0800e847
 800e6c0:	0800e847 	.word	0x0800e847
 800e6c4:	0800e847 	.word	0x0800e847
 800e6c8:	0800e847 	.word	0x0800e847
 800e6cc:	0800e847 	.word	0x0800e847
 800e6d0:	0800e847 	.word	0x0800e847
 800e6d4:	0800e847 	.word	0x0800e847
 800e6d8:	0800e847 	.word	0x0800e847
 800e6dc:	0800e847 	.word	0x0800e847
 800e6e0:	0800e847 	.word	0x0800e847
 800e6e4:	0800e847 	.word	0x0800e847
 800e6e8:	0800e847 	.word	0x0800e847
 800e6ec:	0800e847 	.word	0x0800e847
 800e6f0:	0800e847 	.word	0x0800e847
 800e6f4:	0800e847 	.word	0x0800e847
 800e6f8:	0800e847 	.word	0x0800e847
 800e6fc:	0800e847 	.word	0x0800e847
 800e700:	0800e847 	.word	0x0800e847
 800e704:	0800e847 	.word	0x0800e847
 800e708:	0800e847 	.word	0x0800e847
 800e70c:	0800e847 	.word	0x0800e847
 800e710:	0800e847 	.word	0x0800e847
 800e714:	0800e847 	.word	0x0800e847
 800e718:	0800e847 	.word	0x0800e847
 800e71c:	0800e847 	.word	0x0800e847
 800e720:	0800e847 	.word	0x0800e847
 800e724:	0800e847 	.word	0x0800e847
 800e728:	0800e847 	.word	0x0800e847
 800e72c:	0800e847 	.word	0x0800e847
 800e730:	0800e847 	.word	0x0800e847
 800e734:	0800e847 	.word	0x0800e847
 800e738:	0800e847 	.word	0x0800e847
 800e73c:	0800e847 	.word	0x0800e847
 800e740:	0800e847 	.word	0x0800e847
 800e744:	0800e847 	.word	0x0800e847
 800e748:	0800e847 	.word	0x0800e847
 800e74c:	0800e847 	.word	0x0800e847
 800e750:	0800e847 	.word	0x0800e847
 800e754:	0800e847 	.word	0x0800e847
 800e758:	0800e847 	.word	0x0800e847
 800e75c:	0800e847 	.word	0x0800e847
 800e760:	0800e847 	.word	0x0800e847
 800e764:	0800e847 	.word	0x0800e847
 800e768:	0800e847 	.word	0x0800e847
 800e76c:	0800e847 	.word	0x0800e847
 800e770:	0800e847 	.word	0x0800e847
 800e774:	0800e847 	.word	0x0800e847
 800e778:	0800e847 	.word	0x0800e847
 800e77c:	0800e847 	.word	0x0800e847
 800e780:	0800e847 	.word	0x0800e847
 800e784:	0800e847 	.word	0x0800e847
 800e788:	0800e847 	.word	0x0800e847
 800e78c:	0800e847 	.word	0x0800e847
 800e790:	0800e847 	.word	0x0800e847
 800e794:	0800e847 	.word	0x0800e847
 800e798:	0800e847 	.word	0x0800e847
 800e79c:	0800e837 	.word	0x0800e837
 800e7a0:	0800e831 	.word	0x0800e831
 800e7a4:	0800e82b 	.word	0x0800e82b
 800e7a8:	0800e825 	.word	0x0800e825
 800e7ac:	0800e81f 	.word	0x0800e81f
 800e7b0:	0800e819 	.word	0x0800e819
 800e7b4:	0800e813 	.word	0x0800e813
 800e7b8:	0800e80d 	.word	0x0800e80d
 800e7bc:	0800e807 	.word	0x0800e807
 800e7c0:	0800e801 	.word	0x0800e801
 800e7c4:	0800e7fb 	.word	0x0800e7fb
 800e7c8:	0800e7f5 	.word	0x0800e7f5
 800e7cc:	0800e7ef 	.word	0x0800e7ef
 800e7d0:	0800e7e9 	.word	0x0800e7e9
 800e7d4:	0800e7e3 	.word	0x0800e7e3
 800e7d8:	0800e7dd 	.word	0x0800e7dd
			//----a右スラローム----
			case -1:
				slalom_R90();
 800e7dc:	f7f7 fa48 	bl	8005c70 <slalom_R90>
				break;
 800e7e0:	e07b      	b.n	800e8da <searchF4+0x346>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800e7e2:	f7f7 fb49 	bl	8005e78 <slalom_L90>
				break;
 800e7e6:	e078      	b.n	800e8da <searchF4+0x346>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800e7e8:	f7f7 fe50 	bl	800648c <Lslalom_R90>
				break;
 800e7ec:	e075      	b.n	800e8da <searchF4+0x346>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800e7ee:	f7f7 ff4b 	bl	8006688 <Lslalom_L90>
				break;
 800e7f2:	e072      	b.n	800e8da <searchF4+0x346>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800e7f4:	f7f8 fc3a 	bl	800706c <Lslalom_R180>
				break;
 800e7f8:	e06f      	b.n	800e8da <searchF4+0x346>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800e7fa:	f7f8 fd3b 	bl	8007274 <Lslalom_L180>
				break;
 800e7fe:	e06c      	b.n	800e8da <searchF4+0x346>

			//----a斜め右V45----
			case -7:
				v_R45();
 800e800:	f7f9 f840 	bl	8007884 <v_R45>
				break;
 800e804:	e069      	b.n	800e8da <searchF4+0x346>

			//----a斜め左V45----
			case -8:
				v_L45();
 800e806:	f7f9 f96b 	bl	8007ae0 <v_L45>
				break;
 800e80a:	e066      	b.n	800e8da <searchF4+0x346>

			//----a斜め右V90----
			case -9:
				v_R90();
 800e80c:	f7f9 fd06 	bl	800821c <v_R90>
				break;
 800e810:	e063      	b.n	800e8da <searchF4+0x346>

			//----a斜め左V90----
			case -10:
				v_L90();
 800e812:	f7f9 fdeb 	bl	80083ec <v_L90>
				break;
 800e816:	e060      	b.n	800e8da <searchF4+0x346>

			//----a斜め右V135----
			case -11:
				v_R135();
 800e818:	f7f9 fed2 	bl	80085c0 <v_R135>
				break;
 800e81c:	e05d      	b.n	800e8da <searchF4+0x346>

			//----a斜め左V135----
			case -12:
				v_L135();
 800e81e:	f7f9 fffd 	bl	800881c <v_L135>
				break;
 800e822:	e05a      	b.n	800e8da <searchF4+0x346>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800e824:	f7f9 fa8a 	bl	8007d3c <v_R45D>
				break;
 800e828:	e057      	b.n	800e8da <searchF4+0x346>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800e82a:	f7f9 fbbf 	bl	8007fac <v_L45D>
				break;
 800e82e:	e054      	b.n	800e8da <searchF4+0x346>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800e830:	f7fa f922 	bl	8008a78 <v_R135D>
				break;
 800e834:	e051      	b.n	800e8da <searchF4+0x346>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800e836:	f7fa fa59 	bl	8008cec <v_L135D>
				break;
 800e83a:	e04e      	b.n	800e8da <searchF4+0x346>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800e83c:	f7f7 f940 	bl	8005ac0 <rotate_180>
				rotate_180();
 800e840:	f7f7 f93e 	bl	8005ac0 <rotate_180>
				while(1);
 800e844:	e7fe      	b.n	800e844 <searchF4+0x2b0>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800e846:	4b1f      	ldr	r3, [pc, #124]	; (800e8c4 <searchF4+0x330>)
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	4a1f      	ldr	r2, [pc, #124]	; (800e8cc <searchF4+0x338>)
 800e84e:	56d3      	ldrsb	r3, [r2, r3]
 800e850:	2b03      	cmp	r3, #3
 800e852:	dc11      	bgt.n	800e878 <searchF4+0x2e4>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e854:	2300      	movs	r3, #0
 800e856:	607b      	str	r3, [r7, #4]
 800e858:	e004      	b.n	800e864 <searchF4+0x2d0>
						half_sectionU();
 800e85a:	f7f6 fea5 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3301      	adds	r3, #1
 800e862:	607b      	str	r3, [r7, #4]
 800e864:	4b17      	ldr	r3, [pc, #92]	; (800e8c4 <searchF4+0x330>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	3b01      	subs	r3, #1
 800e86a:	4a18      	ldr	r2, [pc, #96]	; (800e8cc <searchF4+0x338>)
 800e86c:	56d3      	ldrsb	r3, [r2, r3]
 800e86e:	461a      	mov	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	4293      	cmp	r3, r2
 800e874:	dbf1      	blt.n	800e85a <searchF4+0x2c6>
					one_sectionD();
					H_accel_flag = 0;
				}else{
					half_sectionV();
				}
				break;
 800e876:	e02f      	b.n	800e8d8 <searchF4+0x344>
				}else if(pass[p_cnt-1] < 64){
 800e878:	4b12      	ldr	r3, [pc, #72]	; (800e8c4 <searchF4+0x330>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	4a13      	ldr	r2, [pc, #76]	; (800e8cc <searchF4+0x338>)
 800e880:	56d3      	ldrsb	r3, [r2, r3]
 800e882:	2b3f      	cmp	r3, #63	; 0x3f
 800e884:	dc26      	bgt.n	800e8d4 <searchF4+0x340>
					one_sectionA();
 800e886:	f7f6 feaf 	bl	80055e8 <one_sectionA>
					H_accel_flag = 1;
 800e88a:	4b11      	ldr	r3, [pc, #68]	; (800e8d0 <searchF4+0x33c>)
 800e88c:	2201      	movs	r2, #1
 800e88e:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e890:	2300      	movs	r3, #0
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	e004      	b.n	800e8a0 <searchF4+0x30c>
						half_sectionU();
 800e896:	f7f6 fe87 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	3301      	adds	r3, #1
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	4b08      	ldr	r3, [pc, #32]	; (800e8c4 <searchF4+0x330>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	4a09      	ldr	r2, [pc, #36]	; (800e8cc <searchF4+0x338>)
 800e8a8:	56d3      	ldrsb	r3, [r2, r3]
 800e8aa:	3b04      	subs	r3, #4
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	dbf1      	blt.n	800e896 <searchF4+0x302>
					one_sectionD();
 800e8b2:	f7f6 febf 	bl	8005634 <one_sectionD>
					H_accel_flag = 0;
 800e8b6:	4b06      	ldr	r3, [pc, #24]	; (800e8d0 <searchF4+0x33c>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	701a      	strb	r2, [r3, #0]
				break;
 800e8bc:	e00c      	b.n	800e8d8 <searchF4+0x344>
 800e8be:	bf00      	nop
 800e8c0:	20000fa8 	.word	0x20000fa8
 800e8c4:	200002e8 	.word	0x200002e8
 800e8c8:	200012e8 	.word	0x200012e8
 800e8cc:	20000388 	.word	0x20000388
 800e8d0:	20000301 	.word	0x20000301
					half_sectionV();
 800e8d4:	f7f6 fe74 	bl	80055c0 <half_sectionV>
				break;
 800e8d8:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800e8da:	4b25      	ldr	r3, [pc, #148]	; (800e970 <searchF4+0x3dc>)
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	4b24      	ldr	r3, [pc, #144]	; (800e974 <searchF4+0x3e0>)
 800e8e2:	569b      	ldrsb	r3, [r3, r2]
 800e8e4:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800e8e8:	f47f ae84 	bne.w	800e5f4 <searchF4+0x60>

	mouse.x = goal_x;
 800e8ec:	4b22      	ldr	r3, [pc, #136]	; (800e978 <searchF4+0x3e4>)
 800e8ee:	781a      	ldrb	r2, [r3, #0]
 800e8f0:	4b22      	ldr	r3, [pc, #136]	; (800e97c <searchF4+0x3e8>)
 800e8f2:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800e8f4:	4b22      	ldr	r3, [pc, #136]	; (800e980 <searchF4+0x3ec>)
 800e8f6:	781a      	ldrb	r2, [r3, #0]
 800e8f8:	4b20      	ldr	r3, [pc, #128]	; (800e97c <searchF4+0x3e8>)
 800e8fa:	705a      	strb	r2, [r3, #1]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800e8fc:	4b1c      	ldr	r3, [pc, #112]	; (800e970 <searchF4+0x3dc>)
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	3b01      	subs	r3, #1
 800e902:	4a1c      	ldr	r2, [pc, #112]	; (800e974 <searchF4+0x3e0>)
 800e904:	56d3      	ldrsb	r3, [r2, r3]
 800e906:	f113 0f0d 	cmn.w	r3, #13
 800e90a:	d01f      	beq.n	800e94c <searchF4+0x3b8>
 800e90c:	4b18      	ldr	r3, [pc, #96]	; (800e970 <searchF4+0x3dc>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	3b01      	subs	r3, #1
 800e912:	4a18      	ldr	r2, [pc, #96]	; (800e974 <searchF4+0x3e0>)
 800e914:	56d3      	ldrsb	r3, [r2, r3]
 800e916:	f113 0f0e 	cmn.w	r3, #14
 800e91a:	d017      	beq.n	800e94c <searchF4+0x3b8>
 800e91c:	4b14      	ldr	r3, [pc, #80]	; (800e970 <searchF4+0x3dc>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	3b01      	subs	r3, #1
 800e922:	4a14      	ldr	r2, [pc, #80]	; (800e974 <searchF4+0x3e0>)
 800e924:	56d3      	ldrsb	r3, [r2, r3]
 800e926:	f113 0f0f 	cmn.w	r3, #15
 800e92a:	d00f      	beq.n	800e94c <searchF4+0x3b8>
 800e92c:	4b10      	ldr	r3, [pc, #64]	; (800e970 <searchF4+0x3dc>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	3b01      	subs	r3, #1
 800e932:	4a10      	ldr	r2, [pc, #64]	; (800e974 <searchF4+0x3e0>)
 800e934:	56d3      	ldrsb	r3, [r2, r3]
 800e936:	f113 0f10 	cmn.w	r3, #16
 800e93a:	d007      	beq.n	800e94c <searchF4+0x3b8>
		full_led_write(1);
 800e93c:	2001      	movs	r0, #1
 800e93e:	f001 ffdf 	bl	8010900 <full_led_write>
		half_sectionD();
 800e942:	f7f6 fdcd 	bl	80054e0 <half_sectionD>
		full_led_write(3);
 800e946:	2003      	movs	r0, #3
 800e948:	f001 ffda 	bl	8010900 <full_led_write>
	}

	HAL_Delay(500);
 800e94c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e950:	f7f2 fb64 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e954:	f7f7 f8b4 	bl	8005ac0 <rotate_180>

	mouse.dir = mouse.dir / 2;
 800e958:	4b08      	ldr	r3, [pc, #32]	; (800e97c <searchF4+0x3e8>)
 800e95a:	789b      	ldrb	r3, [r3, #2]
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	085b      	lsrs	r3, r3, #1
 800e960:	b2da      	uxtb	r2, r3
 800e962:	4b06      	ldr	r3, [pc, #24]	; (800e97c <searchF4+0x3e8>)
 800e964:	709a      	strb	r2, [r3, #2]

}
 800e966:	bf00      	nop
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	200002e8 	.word	0x200002e8
 800e974:	20000388 	.word	0x20000388
 800e978:	20000bf1 	.word	0x20000bf1
 800e97c:	20000c50 	.word	0x20000c50
 800e980:	20000b8c 	.word	0x20000b8c

0800e984 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800e984:	b480      	push	{r7}
 800e986:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800e988:	4b1a      	ldr	r3, [pc, #104]	; (800e9f4 <adv_pos+0x70>)
 800e98a:	789b      	ldrb	r3, [r3, #2]
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b03      	cmp	r3, #3
 800e990:	d82a      	bhi.n	800e9e8 <adv_pos+0x64>
 800e992:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <adv_pos+0x14>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800e9a9 	.word	0x0800e9a9
 800e99c:	0800e9b9 	.word	0x0800e9b9
 800e9a0:	0800e9c9 	.word	0x0800e9c9
 800e9a4:	0800e9d9 	.word	0x0800e9d9
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800e9a8:	4b12      	ldr	r3, [pc, #72]	; (800e9f4 <adv_pos+0x70>)
 800e9aa:	785b      	ldrb	r3, [r3, #1]
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	4b10      	ldr	r3, [pc, #64]	; (800e9f4 <adv_pos+0x70>)
 800e9b4:	705a      	strb	r2, [r3, #1]
		break;
 800e9b6:	e017      	b.n	800e9e8 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800e9b8:	4b0e      	ldr	r3, [pc, #56]	; (800e9f4 <adv_pos+0x70>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	3301      	adds	r3, #1
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	4b0c      	ldr	r3, [pc, #48]	; (800e9f4 <adv_pos+0x70>)
 800e9c4:	701a      	strb	r2, [r3, #0]
		break;
 800e9c6:	e00f      	b.n	800e9e8 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800e9c8:	4b0a      	ldr	r3, [pc, #40]	; (800e9f4 <adv_pos+0x70>)
 800e9ca:	785b      	ldrb	r3, [r3, #1]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	b2da      	uxtb	r2, r3
 800e9d2:	4b08      	ldr	r3, [pc, #32]	; (800e9f4 <adv_pos+0x70>)
 800e9d4:	705a      	strb	r2, [r3, #1]
		break;
 800e9d6:	e007      	b.n	800e9e8 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800e9d8:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <adv_pos+0x70>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	4b04      	ldr	r3, [pc, #16]	; (800e9f4 <adv_pos+0x70>)
 800e9e4:	701a      	strb	r2, [r3, #0]
		break;
 800e9e6:	bf00      	nop
	}
}
 800e9e8:	bf00      	nop
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop
 800e9f4:	20000c50 	.word	0x20000c50

0800e9f8 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800e9fc:	f000 f886 	bl	800eb0c <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800ea00:	4b09      	ldr	r3, [pc, #36]	; (800ea28 <conf_route+0x30>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	461a      	mov	r2, r3
 800ea06:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <conf_route+0x34>)
 800ea08:	5c9a      	ldrb	r2, [r3, r2]
 800ea0a:	4b09      	ldr	r3, [pc, #36]	; (800ea30 <conf_route+0x38>)
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	4013      	ands	r3, r2
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d006      	beq.n	800ea24 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800ea16:	f000 fa7b 	bl	800ef10 <make_smap>
		make_route();										//a最短経路を更新
 800ea1a:	f000 fdb7 	bl	800f58c <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800ea1e:	4b02      	ldr	r3, [pc, #8]	; (800ea28 <conf_route+0x30>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	701a      	strb	r2, [r3, #0]
	}
}
 800ea24:	bf00      	nop
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	200012f0 	.word	0x200012f0
 800ea2c:	20000c98 	.word	0x20000c98
 800ea30:	20000300 	.word	0x20000300

0800ea34 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	71bb      	strb	r3, [r7, #6]
 800ea3e:	e013      	b.n	800ea68 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800ea40:	2300      	movs	r3, #0
 800ea42:	71fb      	strb	r3, [r7, #7]
 800ea44:	e00a      	b.n	800ea5c <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800ea46:	79ba      	ldrb	r2, [r7, #6]
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	492f      	ldr	r1, [pc, #188]	; (800eb08 <map_Init+0xd4>)
 800ea4c:	0112      	lsls	r2, r2, #4
 800ea4e:	440a      	add	r2, r1
 800ea50:	4413      	add	r3, r2
 800ea52:	22f0      	movs	r2, #240	; 0xf0
 800ea54:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800ea56:	79fb      	ldrb	r3, [r7, #7]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	71fb      	strb	r3, [r7, #7]
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	2b0f      	cmp	r3, #15
 800ea60:	d9f1      	bls.n	800ea46 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ea62:	79bb      	ldrb	r3, [r7, #6]
 800ea64:	3301      	adds	r3, #1
 800ea66:	71bb      	strb	r3, [r7, #6]
 800ea68:	79bb      	ldrb	r3, [r7, #6]
 800ea6a:	2b0f      	cmp	r3, #15
 800ea6c:	d9e8      	bls.n	800ea40 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ea6e:	2300      	movs	r3, #0
 800ea70:	71bb      	strb	r3, [r7, #6]
 800ea72:	e020      	b.n	800eab6 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800ea74:	79bb      	ldrb	r3, [r7, #6]
 800ea76:	4a24      	ldr	r2, [pc, #144]	; (800eb08 <map_Init+0xd4>)
 800ea78:	011b      	lsls	r3, r3, #4
 800ea7a:	4413      	add	r3, r2
 800ea7c:	781a      	ldrb	r2, [r3, #0]
 800ea7e:	79bb      	ldrb	r3, [r7, #6]
 800ea80:	f062 020e 	orn	r2, r2, #14
 800ea84:	b2d1      	uxtb	r1, r2
 800ea86:	4a20      	ldr	r2, [pc, #128]	; (800eb08 <map_Init+0xd4>)
 800ea88:	011b      	lsls	r3, r3, #4
 800ea8a:	4413      	add	r3, r2
 800ea8c:	460a      	mov	r2, r1
 800ea8e:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800ea90:	79bb      	ldrb	r3, [r7, #6]
 800ea92:	4a1d      	ldr	r2, [pc, #116]	; (800eb08 <map_Init+0xd4>)
 800ea94:	011b      	lsls	r3, r3, #4
 800ea96:	4413      	add	r3, r2
 800ea98:	330f      	adds	r3, #15
 800ea9a:	781a      	ldrb	r2, [r3, #0]
 800ea9c:	79bb      	ldrb	r3, [r7, #6]
 800ea9e:	f062 020b 	orn	r2, r2, #11
 800eaa2:	b2d1      	uxtb	r1, r2
 800eaa4:	4a18      	ldr	r2, [pc, #96]	; (800eb08 <map_Init+0xd4>)
 800eaa6:	011b      	lsls	r3, r3, #4
 800eaa8:	4413      	add	r3, r2
 800eaaa:	330f      	adds	r3, #15
 800eaac:	460a      	mov	r2, r1
 800eaae:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800eab0:	79bb      	ldrb	r3, [r7, #6]
 800eab2:	3301      	adds	r3, #1
 800eab4:	71bb      	strb	r3, [r7, #6]
 800eab6:	79bb      	ldrb	r3, [r7, #6]
 800eab8:	2b0f      	cmp	r3, #15
 800eaba:	d9db      	bls.n	800ea74 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800eabc:	2300      	movs	r3, #0
 800eabe:	71fb      	strb	r3, [r7, #7]
 800eac0:	e019      	b.n	800eaf6 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800eac2:	79fb      	ldrb	r3, [r7, #7]
 800eac4:	4a10      	ldr	r2, [pc, #64]	; (800eb08 <map_Init+0xd4>)
 800eac6:	5cd2      	ldrb	r2, [r2, r3]
 800eac8:	79fb      	ldrb	r3, [r7, #7]
 800eaca:	f062 020d 	orn	r2, r2, #13
 800eace:	b2d1      	uxtb	r1, r2
 800ead0:	4a0d      	ldr	r2, [pc, #52]	; (800eb08 <map_Init+0xd4>)
 800ead2:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800ead4:	79fb      	ldrb	r3, [r7, #7]
 800ead6:	4a0c      	ldr	r2, [pc, #48]	; (800eb08 <map_Init+0xd4>)
 800ead8:	4413      	add	r3, r2
 800eada:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800eade:	79fb      	ldrb	r3, [r7, #7]
 800eae0:	f062 0207 	orn	r2, r2, #7
 800eae4:	b2d1      	uxtb	r1, r2
 800eae6:	4a08      	ldr	r2, [pc, #32]	; (800eb08 <map_Init+0xd4>)
 800eae8:	4413      	add	r3, r2
 800eaea:	460a      	mov	r2, r1
 800eaec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800eaf0:	79fb      	ldrb	r3, [r7, #7]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	71fb      	strb	r3, [r7, #7]
 800eaf6:	79fb      	ldrb	r3, [r7, #7]
 800eaf8:	2b0f      	cmp	r3, #15
 800eafa:	d9e2      	bls.n	800eac2 <map_Init+0x8e>
	}
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	200001e4 	.word	0x200001e4

0800eb0c <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800eb0c:	b490      	push	{r4, r7}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800eb12:	4b8f      	ldr	r3, [pc, #572]	; (800ed50 <write_map+0x244>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	4b8e      	ldr	r3, [pc, #568]	; (800ed54 <write_map+0x248>)
 800eb1a:	789b      	ldrb	r3, [r3, #2]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	fa42 f303 	asr.w	r3, r2, r3
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	f003 030f 	and.w	r3, r3, #15
 800eb28:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800eb2a:	79fb      	ldrb	r3, [r7, #7]
 800eb2c:	011b      	lsls	r3, r3, #4
 800eb2e:	b25a      	sxtb	r2, r3
 800eb30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb34:	4313      	orrs	r3, r2
 800eb36:	b25b      	sxtb	r3, r3
 800eb38:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800eb3a:	4b86      	ldr	r3, [pc, #536]	; (800ed54 <write_map+0x248>)
 800eb3c:	785b      	ldrb	r3, [r3, #1]
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	4618      	mov	r0, r3
 800eb42:	4b84      	ldr	r3, [pc, #528]	; (800ed54 <write_map+0x248>)
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	4619      	mov	r1, r3
 800eb4a:	4a83      	ldr	r2, [pc, #524]	; (800ed58 <write_map+0x24c>)
 800eb4c:	0103      	lsls	r3, r0, #4
 800eb4e:	4413      	add	r3, r2
 800eb50:	440b      	add	r3, r1
 800eb52:	79fa      	ldrb	r2, [r7, #7]
 800eb54:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800eb56:	4b7f      	ldr	r3, [pc, #508]	; (800ed54 <write_map+0x248>)
 800eb58:	785b      	ldrb	r3, [r3, #1]
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b0f      	cmp	r3, #15
 800eb5e:	d039      	beq.n	800ebd4 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d01a      	beq.n	800eba0 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800eb6a:	4b7a      	ldr	r3, [pc, #488]	; (800ed54 <write_map+0x248>)
 800eb6c:	785b      	ldrb	r3, [r3, #1]
 800eb6e:	b2d8      	uxtb	r0, r3
 800eb70:	4603      	mov	r3, r0
 800eb72:	3301      	adds	r3, #1
 800eb74:	4a77      	ldr	r2, [pc, #476]	; (800ed54 <write_map+0x248>)
 800eb76:	7812      	ldrb	r2, [r2, #0]
 800eb78:	b2d1      	uxtb	r1, r2
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	4a76      	ldr	r2, [pc, #472]	; (800ed58 <write_map+0x24c>)
 800eb7e:	011b      	lsls	r3, r3, #4
 800eb80:	4413      	add	r3, r2
 800eb82:	4423      	add	r3, r4
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	4603      	mov	r3, r0
 800eb88:	3301      	adds	r3, #1
 800eb8a:	4608      	mov	r0, r1
 800eb8c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800eb90:	b2d1      	uxtb	r1, r2
 800eb92:	4a71      	ldr	r2, [pc, #452]	; (800ed58 <write_map+0x24c>)
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	4413      	add	r3, r2
 800eb98:	4403      	add	r3, r0
 800eb9a:	460a      	mov	r2, r1
 800eb9c:	701a      	strb	r2, [r3, #0]
 800eb9e:	e019      	b.n	800ebd4 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800eba0:	4b6c      	ldr	r3, [pc, #432]	; (800ed54 <write_map+0x248>)
 800eba2:	785b      	ldrb	r3, [r3, #1]
 800eba4:	b2d8      	uxtb	r0, r3
 800eba6:	4603      	mov	r3, r0
 800eba8:	3301      	adds	r3, #1
 800ebaa:	4a6a      	ldr	r2, [pc, #424]	; (800ed54 <write_map+0x248>)
 800ebac:	7812      	ldrb	r2, [r2, #0]
 800ebae:	b2d1      	uxtb	r1, r2
 800ebb0:	460c      	mov	r4, r1
 800ebb2:	4a69      	ldr	r2, [pc, #420]	; (800ed58 <write_map+0x24c>)
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	4413      	add	r3, r2
 800ebb8:	4423      	add	r3, r4
 800ebba:	781a      	ldrb	r2, [r3, #0]
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800ebc6:	b2d1      	uxtb	r1, r2
 800ebc8:	4a63      	ldr	r2, [pc, #396]	; (800ed58 <write_map+0x24c>)
 800ebca:	011b      	lsls	r3, r3, #4
 800ebcc:	4413      	add	r3, r2
 800ebce:	4403      	add	r3, r0
 800ebd0:	460a      	mov	r2, r1
 800ebd2:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800ebd4:	4b5f      	ldr	r3, [pc, #380]	; (800ed54 <write_map+0x248>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b0f      	cmp	r3, #15
 800ebdc:	d037      	beq.n	800ec4e <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800ebde:	79fb      	ldrb	r3, [r7, #7]
 800ebe0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d019      	beq.n	800ec1c <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800ebe8:	4b5a      	ldr	r3, [pc, #360]	; (800ed54 <write_map+0x248>)
 800ebea:	785b      	ldrb	r3, [r3, #1]
 800ebec:	b2dc      	uxtb	r4, r3
 800ebee:	4622      	mov	r2, r4
 800ebf0:	4b58      	ldr	r3, [pc, #352]	; (800ed54 <write_map+0x248>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	b2d8      	uxtb	r0, r3
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	4957      	ldr	r1, [pc, #348]	; (800ed58 <write_map+0x24c>)
 800ebfc:	0112      	lsls	r2, r2, #4
 800ebfe:	440a      	add	r2, r1
 800ec00:	4413      	add	r3, r2
 800ec02:	781a      	ldrb	r2, [r3, #0]
 800ec04:	4603      	mov	r3, r0
 800ec06:	3301      	adds	r3, #1
 800ec08:	f042 0211 	orr.w	r2, r2, #17
 800ec0c:	b2d0      	uxtb	r0, r2
 800ec0e:	4952      	ldr	r1, [pc, #328]	; (800ed58 <write_map+0x24c>)
 800ec10:	0122      	lsls	r2, r4, #4
 800ec12:	440a      	add	r2, r1
 800ec14:	4413      	add	r3, r2
 800ec16:	4602      	mov	r2, r0
 800ec18:	701a      	strb	r2, [r3, #0]
 800ec1a:	e018      	b.n	800ec4e <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800ec1c:	4b4d      	ldr	r3, [pc, #308]	; (800ed54 <write_map+0x248>)
 800ec1e:	785b      	ldrb	r3, [r3, #1]
 800ec20:	b2dc      	uxtb	r4, r3
 800ec22:	4622      	mov	r2, r4
 800ec24:	4b4b      	ldr	r3, [pc, #300]	; (800ed54 <write_map+0x248>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	b2d8      	uxtb	r0, r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	494a      	ldr	r1, [pc, #296]	; (800ed58 <write_map+0x24c>)
 800ec30:	0112      	lsls	r2, r2, #4
 800ec32:	440a      	add	r2, r1
 800ec34:	4413      	add	r3, r2
 800ec36:	781a      	ldrb	r2, [r3, #0]
 800ec38:	4603      	mov	r3, r0
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	f022 0211 	bic.w	r2, r2, #17
 800ec40:	b2d0      	uxtb	r0, r2
 800ec42:	4945      	ldr	r1, [pc, #276]	; (800ed58 <write_map+0x24c>)
 800ec44:	0122      	lsls	r2, r4, #4
 800ec46:	440a      	add	r2, r1
 800ec48:	4413      	add	r3, r2
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800ec4e:	4b41      	ldr	r3, [pc, #260]	; (800ed54 <write_map+0x248>)
 800ec50:	785b      	ldrb	r3, [r3, #1]
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d039      	beq.n	800eccc <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d01a      	beq.n	800ec98 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800ec62:	4b3c      	ldr	r3, [pc, #240]	; (800ed54 <write_map+0x248>)
 800ec64:	785b      	ldrb	r3, [r3, #1]
 800ec66:	b2d8      	uxtb	r0, r3
 800ec68:	4603      	mov	r3, r0
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	4a39      	ldr	r2, [pc, #228]	; (800ed54 <write_map+0x248>)
 800ec6e:	7812      	ldrb	r2, [r2, #0]
 800ec70:	b2d1      	uxtb	r1, r2
 800ec72:	460c      	mov	r4, r1
 800ec74:	4a38      	ldr	r2, [pc, #224]	; (800ed58 <write_map+0x24c>)
 800ec76:	011b      	lsls	r3, r3, #4
 800ec78:	4413      	add	r3, r2
 800ec7a:	4423      	add	r3, r4
 800ec7c:	781a      	ldrb	r2, [r3, #0]
 800ec7e:	4603      	mov	r3, r0
 800ec80:	3b01      	subs	r3, #1
 800ec82:	4608      	mov	r0, r1
 800ec84:	f062 0277 	orn	r2, r2, #119	; 0x77
 800ec88:	b2d1      	uxtb	r1, r2
 800ec8a:	4a33      	ldr	r2, [pc, #204]	; (800ed58 <write_map+0x24c>)
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	4413      	add	r3, r2
 800ec90:	4403      	add	r3, r0
 800ec92:	460a      	mov	r2, r1
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	e019      	b.n	800eccc <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800ec98:	4b2e      	ldr	r3, [pc, #184]	; (800ed54 <write_map+0x248>)
 800ec9a:	785b      	ldrb	r3, [r3, #1]
 800ec9c:	b2d8      	uxtb	r0, r3
 800ec9e:	4603      	mov	r3, r0
 800eca0:	3b01      	subs	r3, #1
 800eca2:	4a2c      	ldr	r2, [pc, #176]	; (800ed54 <write_map+0x248>)
 800eca4:	7812      	ldrb	r2, [r2, #0]
 800eca6:	b2d1      	uxtb	r1, r2
 800eca8:	460c      	mov	r4, r1
 800ecaa:	4a2b      	ldr	r2, [pc, #172]	; (800ed58 <write_map+0x24c>)
 800ecac:	011b      	lsls	r3, r3, #4
 800ecae:	4413      	add	r3, r2
 800ecb0:	4423      	add	r3, r4
 800ecb2:	781a      	ldrb	r2, [r3, #0]
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	4608      	mov	r0, r1
 800ecba:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800ecbe:	b2d1      	uxtb	r1, r2
 800ecc0:	4a25      	ldr	r2, [pc, #148]	; (800ed58 <write_map+0x24c>)
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	4413      	add	r3, r2
 800ecc6:	4403      	add	r3, r0
 800ecc8:	460a      	mov	r2, r1
 800ecca:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800eccc:	4b21      	ldr	r3, [pc, #132]	; (800ed54 <write_map+0x248>)
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d037      	beq.n	800ed46 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	f003 0311 	and.w	r3, r3, #17
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d019      	beq.n	800ed14 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800ece0:	4b1c      	ldr	r3, [pc, #112]	; (800ed54 <write_map+0x248>)
 800ece2:	785b      	ldrb	r3, [r3, #1]
 800ece4:	b2dc      	uxtb	r4, r3
 800ece6:	4622      	mov	r2, r4
 800ece8:	4b1a      	ldr	r3, [pc, #104]	; (800ed54 <write_map+0x248>)
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	b2d8      	uxtb	r0, r3
 800ecee:	4603      	mov	r3, r0
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	4919      	ldr	r1, [pc, #100]	; (800ed58 <write_map+0x24c>)
 800ecf4:	0112      	lsls	r2, r2, #4
 800ecf6:	440a      	add	r2, r1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	781a      	ldrb	r2, [r3, #0]
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800ed04:	b2d0      	uxtb	r0, r2
 800ed06:	4914      	ldr	r1, [pc, #80]	; (800ed58 <write_map+0x24c>)
 800ed08:	0122      	lsls	r2, r4, #4
 800ed0a:	440a      	add	r2, r1
 800ed0c:	4413      	add	r3, r2
 800ed0e:	4602      	mov	r2, r0
 800ed10:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800ed12:	e018      	b.n	800ed46 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800ed14:	4b0f      	ldr	r3, [pc, #60]	; (800ed54 <write_map+0x248>)
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	b2dc      	uxtb	r4, r3
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <write_map+0x248>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	b2d8      	uxtb	r0, r3
 800ed22:	4603      	mov	r3, r0
 800ed24:	3b01      	subs	r3, #1
 800ed26:	490c      	ldr	r1, [pc, #48]	; (800ed58 <write_map+0x24c>)
 800ed28:	0112      	lsls	r2, r2, #4
 800ed2a:	440a      	add	r2, r1
 800ed2c:	4413      	add	r3, r2
 800ed2e:	781a      	ldrb	r2, [r3, #0]
 800ed30:	4603      	mov	r3, r0
 800ed32:	3b01      	subs	r3, #1
 800ed34:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800ed38:	b2d0      	uxtb	r0, r2
 800ed3a:	4907      	ldr	r1, [pc, #28]	; (800ed58 <write_map+0x24c>)
 800ed3c:	0122      	lsls	r2, r4, #4
 800ed3e:	440a      	add	r2, r1
 800ed40:	4413      	add	r3, r2
 800ed42:	4602      	mov	r2, r0
 800ed44:	701a      	strb	r2, [r3, #0]
}
 800ed46:	bf00      	nop
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bc90      	pop	{r4, r7}
 800ed4e:	4770      	bx	lr
 800ed50:	20000300 	.word	0x20000300
 800ed54:	20000c50 	.word	0x20000c50
 800ed58:	200001e4 	.word	0x200001e4
 800ed5c:	00000000 	.word	0x00000000

0800ed60 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800ed60:	b590      	push	{r4, r7, lr}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	460a      	mov	r2, r1
 800ed6a:	71fb      	strb	r3, [r7, #7]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800ed70:	79bb      	ldrb	r3, [r7, #6]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d840      	bhi.n	800edf8 <turn_dir+0x98>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800ed76:	4b60      	ldr	r3, [pc, #384]	; (800eef8 <turn_dir+0x198>)
 800ed78:	789b      	ldrb	r3, [r3, #2]
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	79fb      	ldrb	r3, [r7, #7]
 800ed7e:	4413      	add	r3, r2
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f003 0303 	and.w	r3, r3, #3
 800ed86:	b2da      	uxtb	r2, r3
 800ed88:	4b5b      	ldr	r3, [pc, #364]	; (800eef8 <turn_dir+0x198>)
 800ed8a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800ed8c:	79bb      	ldrb	r3, [r7, #6]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	f040 80a8 	bne.w	800eee4 <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800ed94:	79fb      	ldrb	r3, [r7, #7]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d109      	bne.n	800edae <turn_dir+0x4e>
 800ed9a:	4b58      	ldr	r3, [pc, #352]	; (800eefc <turn_dir+0x19c>)
 800ed9c:	edd3 7a00 	vldr	s15, [r3]
 800eda0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800ef00 <turn_dir+0x1a0>
 800eda4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eda8:	4b54      	ldr	r3, [pc, #336]	; (800eefc <turn_dir+0x19c>)
 800edaa:	edc3 7a00 	vstr	s15, [r3]
//			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xff) target_degree_z += 90.3;			//a目標角度+左90度
 800edae:	79fb      	ldrb	r3, [r7, #7]
 800edb0:	2bff      	cmp	r3, #255	; 0xff
 800edb2:	d112      	bne.n	800edda <turn_dir+0x7a>
 800edb4:	4b51      	ldr	r3, [pc, #324]	; (800eefc <turn_dir+0x19c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7f1 fbbd 	bl	8000538 <__aeabi_f2d>
 800edbe:	a34c      	add	r3, pc, #304	; (adr r3, 800eef0 <turn_dir+0x190>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	f7f1 fa5a 	bl	800027c <__adddf3>
 800edc8:	4603      	mov	r3, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	4618      	mov	r0, r3
 800edce:	4621      	mov	r1, r4
 800edd0:	f7f1 fee2 	bl	8000b98 <__aeabi_d2f>
 800edd4:	4602      	mov	r2, r0
 800edd6:	4b49      	ldr	r3, [pc, #292]	; (800eefc <turn_dir+0x19c>)
 800edd8:	601a      	str	r2, [r3, #0]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800edda:	79fb      	ldrb	r3, [r7, #7]
 800eddc:	2b02      	cmp	r3, #2
 800edde:	f040 8081 	bne.w	800eee4 <turn_dir+0x184>
 800ede2:	4b46      	ldr	r3, [pc, #280]	; (800eefc <turn_dir+0x19c>)
 800ede4:	edd3 7a00 	vldr	s15, [r3]
 800ede8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ef04 <turn_dir+0x1a4>
 800edec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edf0:	4b42      	ldr	r3, [pc, #264]	; (800eefc <turn_dir+0x19c>)
 800edf2:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800edf6:	e075      	b.n	800eee4 <turn_dir+0x184>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800edf8:	4b3f      	ldr	r3, [pc, #252]	; (800eef8 <turn_dir+0x198>)
 800edfa:	789b      	ldrb	r3, [r3, #2]
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	4413      	add	r3, r2
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	f003 0307 	and.w	r3, r3, #7
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	4b3b      	ldr	r3, [pc, #236]	; (800eef8 <turn_dir+0x198>)
 800ee0c:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800ee0e:	79bb      	ldrb	r3, [r7, #6]
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d167      	bne.n	800eee4 <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d109      	bne.n	800ee2e <turn_dir+0xce>
 800ee1a:	4b38      	ldr	r3, [pc, #224]	; (800eefc <turn_dir+0x19c>)
 800ee1c:	edd3 7a00 	vldr	s15, [r3]
 800ee20:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ef08 <turn_dir+0x1a8>
 800ee24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee28:	4b34      	ldr	r3, [pc, #208]	; (800eefc <turn_dir+0x19c>)
 800ee2a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800ee2e:	79fb      	ldrb	r3, [r7, #7]
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d109      	bne.n	800ee48 <turn_dir+0xe8>
 800ee34:	4b31      	ldr	r3, [pc, #196]	; (800eefc <turn_dir+0x19c>)
 800ee36:	edd3 7a00 	vldr	s15, [r3]
 800ee3a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ef00 <turn_dir+0x1a0>
 800ee3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee42:	4b2e      	ldr	r3, [pc, #184]	; (800eefc <turn_dir+0x19c>)
 800ee44:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800ee48:	79fb      	ldrb	r3, [r7, #7]
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	d109      	bne.n	800ee62 <turn_dir+0x102>
 800ee4e:	4b2b      	ldr	r3, [pc, #172]	; (800eefc <turn_dir+0x19c>)
 800ee50:	edd3 7a00 	vldr	s15, [r3]
 800ee54:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800ef0c <turn_dir+0x1ac>
 800ee58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee5c:	4b27      	ldr	r3, [pc, #156]	; (800eefc <turn_dir+0x19c>)
 800ee5e:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	2b04      	cmp	r3, #4
 800ee66:	d109      	bne.n	800ee7c <turn_dir+0x11c>
 800ee68:	4b24      	ldr	r3, [pc, #144]	; (800eefc <turn_dir+0x19c>)
 800ee6a:	edd3 7a00 	vldr	s15, [r3]
 800ee6e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800ef04 <turn_dir+0x1a4>
 800ee72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee76:	4b21      	ldr	r3, [pc, #132]	; (800eefc <turn_dir+0x19c>)
 800ee78:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	2bff      	cmp	r3, #255	; 0xff
 800ee80:	d109      	bne.n	800ee96 <turn_dir+0x136>
 800ee82:	4b1e      	ldr	r3, [pc, #120]	; (800eefc <turn_dir+0x19c>)
 800ee84:	edd3 7a00 	vldr	s15, [r3]
 800ee88:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ef08 <turn_dir+0x1a8>
 800ee8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee90:	4b1a      	ldr	r3, [pc, #104]	; (800eefc <turn_dir+0x19c>)
 800ee92:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	2bfe      	cmp	r3, #254	; 0xfe
 800ee9a:	d109      	bne.n	800eeb0 <turn_dir+0x150>
 800ee9c:	4b17      	ldr	r3, [pc, #92]	; (800eefc <turn_dir+0x19c>)
 800ee9e:	edd3 7a00 	vldr	s15, [r3]
 800eea2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800ef00 <turn_dir+0x1a0>
 800eea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eeaa:	4b14      	ldr	r3, [pc, #80]	; (800eefc <turn_dir+0x19c>)
 800eeac:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800eeb0:	79fb      	ldrb	r3, [r7, #7]
 800eeb2:	2bfd      	cmp	r3, #253	; 0xfd
 800eeb4:	d109      	bne.n	800eeca <turn_dir+0x16a>
 800eeb6:	4b11      	ldr	r3, [pc, #68]	; (800eefc <turn_dir+0x19c>)
 800eeb8:	edd3 7a00 	vldr	s15, [r3]
 800eebc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800ef0c <turn_dir+0x1ac>
 800eec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eec4:	4b0d      	ldr	r3, [pc, #52]	; (800eefc <turn_dir+0x19c>)
 800eec6:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800eeca:	79fb      	ldrb	r3, [r7, #7]
 800eecc:	2bfc      	cmp	r3, #252	; 0xfc
 800eece:	d109      	bne.n	800eee4 <turn_dir+0x184>
 800eed0:	4b0a      	ldr	r3, [pc, #40]	; (800eefc <turn_dir+0x19c>)
 800eed2:	edd3 7a00 	vldr	s15, [r3]
 800eed6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ef04 <turn_dir+0x1a4>
 800eeda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eede:	4b07      	ldr	r3, [pc, #28]	; (800eefc <turn_dir+0x19c>)
 800eee0:	edc3 7a00 	vstr	s15, [r3]
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd90      	pop	{r4, r7, pc}
 800eeec:	f3af 8000 	nop.w
 800eef0:	33333333 	.word	0x33333333
 800eef4:	40569333 	.word	0x40569333
 800eef8:	20000c50 	.word	0x20000c50
 800eefc:	20000c3c 	.word	0x20000c3c
 800ef00:	42b50000 	.word	0x42b50000
 800ef04:	43350000 	.word	0x43350000
 800ef08:	42350000 	.word	0x42350000
 800ef0c:	4307c000 	.word	0x4307c000

0800ef10 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800ef10:	b490      	push	{r4, r7}
 800ef12:	b08c      	sub	sp, #48	; 0x30
 800ef14:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ef16:	2300      	movs	r3, #0
 800ef18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ef1c:	e01c      	b.n	800ef58 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ef24:	e00f      	b.n	800ef46 <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800ef26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ef2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef2e:	499c      	ldr	r1, [pc, #624]	; (800f1a0 <make_smap+0x290>)
 800ef30:	0112      	lsls	r2, r2, #4
 800ef32:	4413      	add	r3, r2
 800ef34:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ef38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800ef3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef40:	3301      	adds	r3, #1
 800ef42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ef46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef4a:	2b0f      	cmp	r3, #15
 800ef4c:	d9eb      	bls.n	800ef26 <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ef4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ef52:	3301      	adds	r3, #1
 800ef54:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ef58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ef5c:	2b0f      	cmp	r3, #15
 800ef5e:	d9de      	bls.n	800ef1e <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800ef60:	4b90      	ldr	r3, [pc, #576]	; (800f1a4 <make_smap+0x294>)
 800ef62:	2200      	movs	r2, #0
 800ef64:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800ef66:	4b90      	ldr	r3, [pc, #576]	; (800f1a8 <make_smap+0x298>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	4b8f      	ldr	r3, [pc, #572]	; (800f1ac <make_smap+0x29c>)
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	4619      	mov	r1, r3
 800ef72:	4a8b      	ldr	r2, [pc, #556]	; (800f1a0 <make_smap+0x290>)
 800ef74:	0103      	lsls	r3, r0, #4
 800ef76:	440b      	add	r3, r1
 800ef78:	2100      	movs	r1, #0
 800ef7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 1;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 800ef82:	2305      	movs	r3, #5
 800ef84:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800ef86:	2300      	movs	r3, #0
 800ef88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ef8c:	e2d1      	b.n	800f532 <make_smap+0x622>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ef94:	e2c3      	b.n	800f51e <make_smap+0x60e>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800ef96:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ef9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef9e:	4980      	ldr	r1, [pc, #512]	; (800f1a0 <make_smap+0x290>)
 800efa0:	0112      	lsls	r2, r2, #4
 800efa2:	4413      	add	r3, r2
 800efa4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800efa8:	4b7e      	ldr	r3, [pc, #504]	; (800f1a4 <make_smap+0x294>)
 800efaa:	881b      	ldrh	r3, [r3, #0]
 800efac:	429a      	cmp	r2, r3
 800efae:	f040 82b1 	bne.w	800f514 <make_smap+0x604>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800efb2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800efb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efba:	497d      	ldr	r1, [pc, #500]	; (800f1b0 <make_smap+0x2a0>)
 800efbc:	0112      	lsls	r2, r2, #4
 800efbe:	440a      	add	r2, r1
 800efc0:	4413      	add	r3, r2
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800efc8:	4b7a      	ldr	r3, [pc, #488]	; (800f1b4 <make_smap+0x2a4>)
 800efca:	881b      	ldrh	r3, [r3, #0]
 800efcc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d004      	beq.n	800efe0 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800efd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efda:	091b      	lsrs	r3, r3, #4
 800efdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800efe0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efe4:	f003 0308 	and.w	r3, r3, #8
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f040 809c 	bne.w	800f126 <make_smap+0x216>
 800efee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800eff2:	2b0f      	cmp	r3, #15
 800eff4:	f000 8097 	beq.w	800f126 <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800eff8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f002:	4967      	ldr	r1, [pc, #412]	; (800f1a0 <make_smap+0x290>)
 800f004:	0112      	lsls	r2, r2, #4
 800f006:	4413      	add	r3, r2
 800f008:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f00c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f010:	4293      	cmp	r3, r2
 800f012:	f040 8088 	bne.w	800f126 <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800f016:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f01a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f01e:	4960      	ldr	r1, [pc, #384]	; (800f1a0 <make_smap+0x290>)
 800f020:	0112      	lsls	r2, r2, #4
 800f022:	4413      	add	r3, r2
 800f024:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	b299      	uxth	r1, r3
 800f02c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f030:	1c5a      	adds	r2, r3, #1
 800f032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f036:	4401      	add	r1, r0
 800f038:	b288      	uxth	r0, r1
 800f03a:	4959      	ldr	r1, [pc, #356]	; (800f1a0 <make_smap+0x290>)
 800f03c:	0112      	lsls	r2, r2, #4
 800f03e:	4413      	add	r3, r2
 800f040:	4602      	mov	r2, r0
 800f042:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f046:	4b5b      	ldr	r3, [pc, #364]	; (800f1b4 <make_smap+0x2a4>)
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d068      	beq.n	800f126 <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800f054:	2301      	movs	r3, #1
 800f056:	62bb      	str	r3, [r7, #40]	; 0x28
 800f058:	e05e      	b.n	800f118 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800f05a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f060:	441a      	add	r2, r3
 800f062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f066:	4952      	ldr	r1, [pc, #328]	; (800f1b0 <make_smap+0x2a0>)
 800f068:	0112      	lsls	r2, r2, #4
 800f06a:	440a      	add	r2, r1
 800f06c:	4413      	add	r3, r2
 800f06e:	7819      	ldrb	r1, [r3, #0]
 800f070:	1d3a      	adds	r2, r7, #4
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	4413      	add	r3, r2
 800f076:	460a      	mov	r2, r1
 800f078:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f07a:	4b4e      	ldr	r3, [pc, #312]	; (800f1b4 <make_smap+0x2a4>)
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00a      	beq.n	800f09e <make_smap+0x18e>
 800f088:	1d3a      	adds	r2, r7, #4
 800f08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08c:	4413      	add	r3, r2
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	091b      	lsrs	r3, r3, #4
 800f092:	b2d9      	uxtb	r1, r3
 800f094:	1d3a      	adds	r2, r7, #4
 800f096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f098:	4413      	add	r3, r2
 800f09a:	460a      	mov	r2, r1
 800f09c:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800f09e:	1d3a      	adds	r2, r7, #4
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	4413      	add	r3, r2
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	f003 0308 	and.w	r3, r3, #8
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d13b      	bne.n	800f126 <make_smap+0x216>
 800f0ae:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	4413      	add	r3, r2
 800f0b6:	2b0f      	cmp	r3, #15
 800f0b8:	d035      	beq.n	800f126 <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800f0ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	4413      	add	r3, r2
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0c8:	4935      	ldr	r1, [pc, #212]	; (800f1a0 <make_smap+0x290>)
 800f0ca:	0112      	lsls	r2, r2, #4
 800f0cc:	4413      	add	r3, r2
 800f0ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f0d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d11b      	bne.n	800f112 <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f0da:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	441a      	add	r2, r3
 800f0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0e6:	492e      	ldr	r1, [pc, #184]	; (800f1a0 <make_smap+0x290>)
 800f0e8:	0112      	lsls	r2, r2, #4
 800f0ea:	4413      	add	r3, r2
 800f0ec:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	b299      	uxth	r1, r3
 800f0f4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	4413      	add	r3, r2
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f102:	4401      	add	r1, r0
 800f104:	b288      	uxth	r0, r1
 800f106:	4926      	ldr	r1, [pc, #152]	; (800f1a0 <make_smap+0x290>)
 800f108:	0112      	lsls	r2, r2, #4
 800f10a:	4413      	add	r3, r2
 800f10c:	4602      	mov	r2, r0
 800f10e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800f112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f114:	3301      	adds	r3, #1
 800f116:	62bb      	str	r3, [r7, #40]	; 0x28
 800f118:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f11c:	f1c3 0310 	rsb	r3, r3, #16
 800f120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f122:	429a      	cmp	r2, r3
 800f124:	db99      	blt.n	800f05a <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800f126:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f12a:	f003 0304 	and.w	r3, r3, #4
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f040 80a8 	bne.w	800f284 <make_smap+0x374>
 800f134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f138:	2b0f      	cmp	r3, #15
 800f13a:	f000 80a3 	beq.w	800f284 <make_smap+0x374>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800f13e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f146:	3301      	adds	r3, #1
 800f148:	4915      	ldr	r1, [pc, #84]	; (800f1a0 <make_smap+0x290>)
 800f14a:	0112      	lsls	r2, r2, #4
 800f14c:	4413      	add	r3, r2
 800f14e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f152:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f156:	4293      	cmp	r3, r2
 800f158:	f040 8094 	bne.w	800f284 <make_smap+0x374>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800f15c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f164:	490e      	ldr	r1, [pc, #56]	; (800f1a0 <make_smap+0x290>)
 800f166:	0112      	lsls	r2, r2, #4
 800f168:	4413      	add	r3, r2
 800f16a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	b299      	uxth	r1, r3
 800f172:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f17a:	3301      	adds	r3, #1
 800f17c:	4401      	add	r1, r0
 800f17e:	b288      	uxth	r0, r1
 800f180:	4907      	ldr	r1, [pc, #28]	; (800f1a0 <make_smap+0x290>)
 800f182:	0112      	lsls	r2, r2, #4
 800f184:	4413      	add	r3, r2
 800f186:	4602      	mov	r2, r0
 800f188:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f18c:	4b09      	ldr	r3, [pc, #36]	; (800f1b4 <make_smap+0x2a4>)
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f194:	b2db      	uxtb	r3, r3
 800f196:	2b00      	cmp	r3, #0
 800f198:	d074      	beq.n	800f284 <make_smap+0x374>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800f19a:	2301      	movs	r3, #1
 800f19c:	627b      	str	r3, [r7, #36]	; 0x24
 800f19e:	e06a      	b.n	800f276 <make_smap+0x366>
 800f1a0:	20000da4 	.word	0x20000da4
 800f1a4:	20000386 	.word	0x20000386
 800f1a8:	20000b8c 	.word	0x20000b8c
 800f1ac:	20000bf1 	.word	0x20000bf1
 800f1b0:	200001e4 	.word	0x200001e4
 800f1b4:	20000fa8 	.word	0x20000fa8
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800f1b8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f1bc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c2:	440b      	add	r3, r1
 800f1c4:	499e      	ldr	r1, [pc, #632]	; (800f440 <make_smap+0x530>)
 800f1c6:	0112      	lsls	r2, r2, #4
 800f1c8:	440a      	add	r2, r1
 800f1ca:	4413      	add	r3, r2
 800f1cc:	7819      	ldrb	r1, [r3, #0]
 800f1ce:	1d3a      	adds	r2, r7, #4
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	4413      	add	r3, r2
 800f1d4:	460a      	mov	r2, r1
 800f1d6:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f1d8:	4b9a      	ldr	r3, [pc, #616]	; (800f444 <make_smap+0x534>)
 800f1da:	881b      	ldrh	r3, [r3, #0]
 800f1dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00a      	beq.n	800f1fc <make_smap+0x2ec>
 800f1e6:	1d3a      	adds	r2, r7, #4
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	4413      	add	r3, r2
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	091b      	lsrs	r3, r3, #4
 800f1f0:	b2d9      	uxtb	r1, r3
 800f1f2:	1d3a      	adds	r2, r7, #4
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	4413      	add	r3, r2
 800f1f8:	460a      	mov	r2, r1
 800f1fa:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800f1fc:	1d3a      	adds	r2, r7, #4
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	4413      	add	r3, r2
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	f003 0304 	and.w	r3, r3, #4
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d13b      	bne.n	800f284 <make_smap+0x374>
 800f20c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	4413      	add	r3, r2
 800f214:	2b0f      	cmp	r3, #15
 800f216:	d035      	beq.n	800f284 <make_smap+0x374>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800f218:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f21c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	440b      	add	r3, r1
 800f224:	3301      	adds	r3, #1
 800f226:	4988      	ldr	r1, [pc, #544]	; (800f448 <make_smap+0x538>)
 800f228:	0112      	lsls	r2, r2, #4
 800f22a:	4413      	add	r3, r2
 800f22c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f230:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f234:	4293      	cmp	r3, r2
 800f236:	d11b      	bne.n	800f270 <make_smap+0x360>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f238:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f23c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	440b      	add	r3, r1
 800f244:	4980      	ldr	r1, [pc, #512]	; (800f448 <make_smap+0x538>)
 800f246:	0112      	lsls	r2, r2, #4
 800f248:	4413      	add	r3, r2
 800f24a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	b299      	uxth	r1, r3
 800f252:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f256:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25c:	4423      	add	r3, r4
 800f25e:	3301      	adds	r3, #1
 800f260:	4401      	add	r1, r0
 800f262:	b288      	uxth	r0, r1
 800f264:	4978      	ldr	r1, [pc, #480]	; (800f448 <make_smap+0x538>)
 800f266:	0112      	lsls	r2, r2, #4
 800f268:	4413      	add	r3, r2
 800f26a:	4602      	mov	r2, r0
 800f26c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800f270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f272:	3301      	adds	r3, #1
 800f274:	627b      	str	r3, [r7, #36]	; 0x24
 800f276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f27a:	f1c3 0310 	rsb	r3, r3, #16
 800f27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f280:	429a      	cmp	r2, r3
 800f282:	db99      	blt.n	800f1b8 <make_smap+0x2a8>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800f284:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f288:	f003 0302 	and.w	r3, r3, #2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f040 809a 	bne.w	800f3c6 <make_smap+0x4b6>
 800f292:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f296:	2b00      	cmp	r3, #0
 800f298:	f000 8095 	beq.w	800f3c6 <make_smap+0x4b6>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800f29c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f2a0:	1e5a      	subs	r2, r3, #1
 800f2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2a6:	4968      	ldr	r1, [pc, #416]	; (800f448 <make_smap+0x538>)
 800f2a8:	0112      	lsls	r2, r2, #4
 800f2aa:	4413      	add	r3, r2
 800f2ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f2b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	f040 8086 	bne.w	800f3c6 <make_smap+0x4b6>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800f2ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2c2:	4961      	ldr	r1, [pc, #388]	; (800f448 <make_smap+0x538>)
 800f2c4:	0112      	lsls	r2, r2, #4
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	b299      	uxth	r1, r3
 800f2d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f2d4:	1e5a      	subs	r2, r3, #1
 800f2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2da:	4401      	add	r1, r0
 800f2dc:	b288      	uxth	r0, r1
 800f2de:	495a      	ldr	r1, [pc, #360]	; (800f448 <make_smap+0x538>)
 800f2e0:	0112      	lsls	r2, r2, #4
 800f2e2:	4413      	add	r3, r2
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f2ea:	4b56      	ldr	r3, [pc, #344]	; (800f444 <make_smap+0x534>)
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d066      	beq.n	800f3c6 <make_smap+0x4b6>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	623b      	str	r3, [r7, #32]
 800f2fc:	e05e      	b.n	800f3bc <make_smap+0x4ac>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800f2fe:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	1ad2      	subs	r2, r2, r3
 800f306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f30a:	494d      	ldr	r1, [pc, #308]	; (800f440 <make_smap+0x530>)
 800f30c:	0112      	lsls	r2, r2, #4
 800f30e:	440a      	add	r2, r1
 800f310:	4413      	add	r3, r2
 800f312:	7819      	ldrb	r1, [r3, #0]
 800f314:	1d3a      	adds	r2, r7, #4
 800f316:	6a3b      	ldr	r3, [r7, #32]
 800f318:	4413      	add	r3, r2
 800f31a:	460a      	mov	r2, r1
 800f31c:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f31e:	4b49      	ldr	r3, [pc, #292]	; (800f444 <make_smap+0x534>)
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00a      	beq.n	800f342 <make_smap+0x432>
 800f32c:	1d3a      	adds	r2, r7, #4
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	4413      	add	r3, r2
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	091b      	lsrs	r3, r3, #4
 800f336:	b2d9      	uxtb	r1, r3
 800f338:	1d3a      	adds	r2, r7, #4
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	4413      	add	r3, r2
 800f33e:	460a      	mov	r2, r1
 800f340:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800f342:	1d3a      	adds	r2, r7, #4
 800f344:	6a3b      	ldr	r3, [r7, #32]
 800f346:	4413      	add	r3, r2
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 0302 	and.w	r3, r3, #2
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d139      	bne.n	800f3c6 <make_smap+0x4b6>
 800f352:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f356:	6a3b      	ldr	r3, [r7, #32]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	2b0f      	cmp	r3, #15
 800f35c:	d033      	beq.n	800f3c6 <make_smap+0x4b6>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800f35e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	1e5a      	subs	r2, r3, #1
 800f368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f36c:	4936      	ldr	r1, [pc, #216]	; (800f448 <make_smap+0x538>)
 800f36e:	0112      	lsls	r2, r2, #4
 800f370:	4413      	add	r3, r2
 800f372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d11b      	bne.n	800f3b6 <make_smap+0x4a6>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f37e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	1ad2      	subs	r2, r2, r3
 800f386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f38a:	492f      	ldr	r1, [pc, #188]	; (800f448 <make_smap+0x538>)
 800f38c:	0112      	lsls	r2, r2, #4
 800f38e:	4413      	add	r3, r2
 800f390:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	b299      	uxth	r1, r3
 800f398:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	1e5a      	subs	r2, r3, #1
 800f3a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3a6:	4401      	add	r1, r0
 800f3a8:	b288      	uxth	r0, r1
 800f3aa:	4927      	ldr	r1, [pc, #156]	; (800f448 <make_smap+0x538>)
 800f3ac:	0112      	lsls	r2, r2, #4
 800f3ae:	4413      	add	r3, r2
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800f3b6:	6a3b      	ldr	r3, [r7, #32]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	623b      	str	r3, [r7, #32]
 800f3bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f3c0:	6a3a      	ldr	r2, [r7, #32]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	db9b      	blt.n	800f2fe <make_smap+0x3ee>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800f3c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f3ca:	f003 0301 	and.w	r3, r3, #1
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f040 80a0 	bne.w	800f514 <make_smap+0x604>
 800f3d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 809b 	beq.w	800f514 <make_smap+0x604>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800f3de:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	4917      	ldr	r1, [pc, #92]	; (800f448 <make_smap+0x538>)
 800f3ea:	0112      	lsls	r2, r2, #4
 800f3ec:	4413      	add	r3, r2
 800f3ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f3f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	f040 808c 	bne.w	800f514 <make_smap+0x604>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800f3fc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f404:	4910      	ldr	r1, [pc, #64]	; (800f448 <make_smap+0x538>)
 800f406:	0112      	lsls	r2, r2, #4
 800f408:	4413      	add	r3, r2
 800f40a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	b299      	uxth	r1, r3
 800f412:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f41a:	3b01      	subs	r3, #1
 800f41c:	4401      	add	r1, r0
 800f41e:	b288      	uxth	r0, r1
 800f420:	4909      	ldr	r1, [pc, #36]	; (800f448 <make_smap+0x538>)
 800f422:	0112      	lsls	r2, r2, #4
 800f424:	4413      	add	r3, r2
 800f426:	4602      	mov	r2, r0
 800f428:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800f42c:	4b05      	ldr	r3, [pc, #20]	; (800f444 <make_smap+0x534>)
 800f42e:	881b      	ldrh	r3, [r3, #0]
 800f430:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800f434:	b2db      	uxtb	r3, r3
 800f436:	2b00      	cmp	r3, #0
 800f438:	d06c      	beq.n	800f514 <make_smap+0x604>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800f43a:	2301      	movs	r3, #1
 800f43c:	61fb      	str	r3, [r7, #28]
 800f43e:	e064      	b.n	800f50a <make_smap+0x5fa>
 800f440:	200001e4 	.word	0x200001e4
 800f444:	20000fa8 	.word	0x20000fa8
 800f448:	20000da4 	.word	0x20000da4
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800f44c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f450:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	1acb      	subs	r3, r1, r3
 800f458:	4947      	ldr	r1, [pc, #284]	; (800f578 <make_smap+0x668>)
 800f45a:	0112      	lsls	r2, r2, #4
 800f45c:	440a      	add	r2, r1
 800f45e:	4413      	add	r3, r2
 800f460:	7819      	ldrb	r1, [r3, #0]
 800f462:	1d3a      	adds	r2, r7, #4
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	4413      	add	r3, r2
 800f468:	460a      	mov	r2, r1
 800f46a:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800f46c:	4b43      	ldr	r3, [pc, #268]	; (800f57c <make_smap+0x66c>)
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00a      	beq.n	800f490 <make_smap+0x580>
 800f47a:	1d3a      	adds	r2, r7, #4
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	4413      	add	r3, r2
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	091b      	lsrs	r3, r3, #4
 800f484:	b2d9      	uxtb	r1, r3
 800f486:	1d3a      	adds	r2, r7, #4
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	4413      	add	r3, r2
 800f48c:	460a      	mov	r2, r1
 800f48e:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800f490:	1d3a      	adds	r2, r7, #4
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	4413      	add	r3, r2
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	f003 0301 	and.w	r3, r3, #1
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d139      	bne.n	800f514 <make_smap+0x604>
 800f4a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	1ad3      	subs	r3, r2, r3
 800f4a8:	2b0f      	cmp	r3, #15
 800f4aa:	d033      	beq.n	800f514 <make_smap+0x604>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800f4ac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f4b0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	1acb      	subs	r3, r1, r3
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	4931      	ldr	r1, [pc, #196]	; (800f580 <make_smap+0x670>)
 800f4bc:	0112      	lsls	r2, r2, #4
 800f4be:	4413      	add	r3, r2
 800f4c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f4c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d11b      	bne.n	800f504 <make_smap+0x5f4>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800f4cc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f4d0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	1acb      	subs	r3, r1, r3
 800f4d8:	4929      	ldr	r1, [pc, #164]	; (800f580 <make_smap+0x670>)
 800f4da:	0112      	lsls	r2, r2, #4
 800f4dc:	4413      	add	r3, r2
 800f4de:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	b299      	uxth	r1, r3
 800f4e6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f4ea:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	1ae3      	subs	r3, r4, r3
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	4401      	add	r1, r0
 800f4f6:	b288      	uxth	r0, r1
 800f4f8:	4921      	ldr	r1, [pc, #132]	; (800f580 <make_smap+0x670>)
 800f4fa:	0112      	lsls	r2, r2, #4
 800f4fc:	4413      	add	r3, r2
 800f4fe:	4602      	mov	r2, r0
 800f500:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	3301      	adds	r3, #1
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f50e:	69fa      	ldr	r2, [r7, #28]
 800f510:	429a      	cmp	r2, r3
 800f512:	db9b      	blt.n	800f44c <make_smap+0x53c>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800f514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f518:	3301      	adds	r3, #1
 800f51a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f51e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f522:	2b0f      	cmp	r3, #15
 800f524:	f67f ad37 	bls.w	800ef96 <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800f528:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f52c:	3301      	adds	r3, #1
 800f52e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f536:	2b0f      	cmp	r3, #15
 800f538:	f67f ad29 	bls.w	800ef8e <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800f53c:	4b11      	ldr	r3, [pc, #68]	; (800f584 <make_smap+0x674>)
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	3301      	adds	r3, #1
 800f542:	b29a      	uxth	r2, r3
 800f544:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <make_smap+0x674>)
 800f546:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800f548:	4b0f      	ldr	r3, [pc, #60]	; (800f588 <make_smap+0x678>)
 800f54a:	785b      	ldrb	r3, [r3, #1]
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	4618      	mov	r0, r3
 800f550:	4b0d      	ldr	r3, [pc, #52]	; (800f588 <make_smap+0x678>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	b2db      	uxtb	r3, r3
 800f556:	4619      	mov	r1, r3
 800f558:	4a09      	ldr	r2, [pc, #36]	; (800f580 <make_smap+0x670>)
 800f55a:	0103      	lsls	r3, r0, #4
 800f55c:	440b      	add	r3, r1
 800f55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f562:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f566:	4293      	cmp	r3, r2
 800f568:	f43f ad0d 	beq.w	800ef86 <make_smap+0x76>
}
 800f56c:	bf00      	nop
 800f56e:	3730      	adds	r7, #48	; 0x30
 800f570:	46bd      	mov	sp, r7
 800f572:	bc90      	pop	{r4, r7}
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	200001e4 	.word	0x200001e4
 800f57c:	20000fa8 	.word	0x20000fa8
 800f580:	20000da4 	.word	0x20000da4
 800f584:	20000386 	.word	0x20000386
 800f588:	20000c50 	.word	0x20000c50

0800f58c <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800f592:	4b9f      	ldr	r3, [pc, #636]	; (800f810 <make_route+0x284>)
 800f594:	789b      	ldrb	r3, [r3, #2]
 800f596:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800f598:	2300      	movs	r3, #0
 800f59a:	80bb      	strh	r3, [r7, #4]
 800f59c:	e006      	b.n	800f5ac <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800f59e:	88bb      	ldrh	r3, [r7, #4]
 800f5a0:	4a9c      	ldr	r2, [pc, #624]	; (800f814 <make_route+0x288>)
 800f5a2:	21ff      	movs	r1, #255	; 0xff
 800f5a4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800f5a6:	88bb      	ldrh	r3, [r7, #4]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	80bb      	strh	r3, [r7, #4]
 800f5ac:	88bb      	ldrh	r3, [r7, #4]
 800f5ae:	2bff      	cmp	r3, #255	; 0xff
 800f5b0:	d9f5      	bls.n	800f59e <make_route+0x12>
	}


	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800f5b2:	4b97      	ldr	r3, [pc, #604]	; (800f810 <make_route+0x284>)
 800f5b4:	785b      	ldrb	r3, [r3, #1]
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	4b95      	ldr	r3, [pc, #596]	; (800f810 <make_route+0x284>)
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4a95      	ldr	r2, [pc, #596]	; (800f818 <make_route+0x28c>)
 800f5c4:	0103      	lsls	r3, r0, #4
 800f5c6:	440b      	add	r3, r1
 800f5c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5cc:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800f5ce:	4b90      	ldr	r3, [pc, #576]	; (800f810 <make_route+0x284>)
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800f5d4:	4b8e      	ldr	r3, [pc, #568]	; (800f810 <make_route+0x284>)
 800f5d6:	785b      	ldrb	r3, [r3, #1]
 800f5d8:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 800f5da:	4b90      	ldr	r3, [pc, #576]	; (800f81c <make_route+0x290>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	2b04      	cmp	r3, #4
 800f5e0:	d105      	bne.n	800f5ee <make_route+0x62>
		route[0] = 0x77;
 800f5e2:	4b8c      	ldr	r3, [pc, #560]	; (800f814 <make_route+0x288>)
 800f5e4:	2277      	movs	r2, #119	; 0x77
 800f5e6:	701a      	strb	r2, [r3, #0]
		i = 1;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	80bb      	strh	r3, [r7, #4]
 800f5ec:	e001      	b.n	800f5f2 <make_route+0x66>
	}else{
		i = 0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800f5f2:	79ba      	ldrb	r2, [r7, #6]
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	498a      	ldr	r1, [pc, #552]	; (800f820 <make_route+0x294>)
 800f5f8:	0112      	lsls	r2, r2, #4
 800f5fa:	440a      	add	r2, r1
 800f5fc:	4413      	add	r3, r2
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800f602:	4b88      	ldr	r3, [pc, #544]	; (800f824 <make_route+0x298>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d002      	beq.n	800f616 <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800f610:	787b      	ldrb	r3, [r7, #1]
 800f612:	091b      	lsrs	r3, r3, #4
 800f614:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800f616:	787b      	ldrb	r3, [r7, #1]
 800f618:	f003 0308 	and.w	r3, r3, #8
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d122      	bne.n	800f666 <make_route+0xda>
 800f620:	79bb      	ldrb	r3, [r7, #6]
 800f622:	1c5a      	adds	r2, r3, #1
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	497c      	ldr	r1, [pc, #496]	; (800f818 <make_route+0x28c>)
 800f628:	0112      	lsls	r2, r2, #4
 800f62a:	4413      	add	r3, r2
 800f62c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f630:	887a      	ldrh	r2, [r7, #2]
 800f632:	429a      	cmp	r2, r3
 800f634:	d917      	bls.n	800f666 <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f636:	4b76      	ldr	r3, [pc, #472]	; (800f810 <make_route+0x284>)
 800f638:	789b      	ldrb	r3, [r3, #2]
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	425b      	negs	r3, r3
 800f63e:	b2da      	uxtb	r2, r3
 800f640:	88bb      	ldrh	r3, [r7, #4]
 800f642:	f002 0203 	and.w	r2, r2, #3
 800f646:	b2d1      	uxtb	r1, r2
 800f648:	4a72      	ldr	r2, [pc, #456]	; (800f814 <make_route+0x288>)
 800f64a:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800f64c:	79bb      	ldrb	r3, [r7, #6]
 800f64e:	1c5a      	adds	r2, r3, #1
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	4971      	ldr	r1, [pc, #452]	; (800f818 <make_route+0x28c>)
 800f654:	0112      	lsls	r2, r2, #4
 800f656:	4413      	add	r3, r2
 800f658:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f65c:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800f65e:	79bb      	ldrb	r3, [r7, #6]
 800f660:	3301      	adds	r3, #1
 800f662:	71bb      	strb	r3, [r7, #6]
 800f664:	e079      	b.n	800f75a <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800f666:	787b      	ldrb	r3, [r7, #1]
 800f668:	f003 0304 	and.w	r3, r3, #4
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d123      	bne.n	800f6b8 <make_route+0x12c>
 800f670:	79ba      	ldrb	r2, [r7, #6]
 800f672:	79fb      	ldrb	r3, [r7, #7]
 800f674:	3301      	adds	r3, #1
 800f676:	4968      	ldr	r1, [pc, #416]	; (800f818 <make_route+0x28c>)
 800f678:	0112      	lsls	r2, r2, #4
 800f67a:	4413      	add	r3, r2
 800f67c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f680:	887a      	ldrh	r2, [r7, #2]
 800f682:	429a      	cmp	r2, r3
 800f684:	d918      	bls.n	800f6b8 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f686:	4b62      	ldr	r3, [pc, #392]	; (800f810 <make_route+0x284>)
 800f688:	789b      	ldrb	r3, [r3, #2]
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	f1c3 0301 	rsb	r3, r3, #1
 800f690:	b2da      	uxtb	r2, r3
 800f692:	88bb      	ldrh	r3, [r7, #4]
 800f694:	f002 0203 	and.w	r2, r2, #3
 800f698:	b2d1      	uxtb	r1, r2
 800f69a:	4a5e      	ldr	r2, [pc, #376]	; (800f814 <make_route+0x288>)
 800f69c:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800f69e:	79ba      	ldrb	r2, [r7, #6]
 800f6a0:	79fb      	ldrb	r3, [r7, #7]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	495c      	ldr	r1, [pc, #368]	; (800f818 <make_route+0x28c>)
 800f6a6:	0112      	lsls	r2, r2, #4
 800f6a8:	4413      	add	r3, r2
 800f6aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f6ae:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800f6b0:	79fb      	ldrb	r3, [r7, #7]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	71fb      	strb	r3, [r7, #7]
 800f6b6:	e050      	b.n	800f75a <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800f6b8:	787b      	ldrb	r3, [r7, #1]
 800f6ba:	f003 0302 	and.w	r3, r3, #2
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d123      	bne.n	800f70a <make_route+0x17e>
 800f6c2:	79bb      	ldrb	r3, [r7, #6]
 800f6c4:	1e5a      	subs	r2, r3, #1
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	4953      	ldr	r1, [pc, #332]	; (800f818 <make_route+0x28c>)
 800f6ca:	0112      	lsls	r2, r2, #4
 800f6cc:	4413      	add	r3, r2
 800f6ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f6d2:	887a      	ldrh	r2, [r7, #2]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d918      	bls.n	800f70a <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f6d8:	4b4d      	ldr	r3, [pc, #308]	; (800f810 <make_route+0x284>)
 800f6da:	789b      	ldrb	r3, [r3, #2]
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	f1c3 0302 	rsb	r3, r3, #2
 800f6e2:	b2da      	uxtb	r2, r3
 800f6e4:	88bb      	ldrh	r3, [r7, #4]
 800f6e6:	f002 0203 	and.w	r2, r2, #3
 800f6ea:	b2d1      	uxtb	r1, r2
 800f6ec:	4a49      	ldr	r2, [pc, #292]	; (800f814 <make_route+0x288>)
 800f6ee:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800f6f0:	79bb      	ldrb	r3, [r7, #6]
 800f6f2:	1e5a      	subs	r2, r3, #1
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	4948      	ldr	r1, [pc, #288]	; (800f818 <make_route+0x28c>)
 800f6f8:	0112      	lsls	r2, r2, #4
 800f6fa:	4413      	add	r3, r2
 800f6fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f700:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800f702:	79bb      	ldrb	r3, [r7, #6]
 800f704:	3b01      	subs	r3, #1
 800f706:	71bb      	strb	r3, [r7, #6]
 800f708:	e027      	b.n	800f75a <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800f70a:	787b      	ldrb	r3, [r7, #1]
 800f70c:	f003 0301 	and.w	r3, r3, #1
 800f710:	2b00      	cmp	r3, #0
 800f712:	d122      	bne.n	800f75a <make_route+0x1ce>
 800f714:	79ba      	ldrb	r2, [r7, #6]
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	3b01      	subs	r3, #1
 800f71a:	493f      	ldr	r1, [pc, #252]	; (800f818 <make_route+0x28c>)
 800f71c:	0112      	lsls	r2, r2, #4
 800f71e:	4413      	add	r3, r2
 800f720:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f724:	887a      	ldrh	r2, [r7, #2]
 800f726:	429a      	cmp	r2, r3
 800f728:	d917      	bls.n	800f75a <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800f72a:	4b39      	ldr	r3, [pc, #228]	; (800f810 <make_route+0x284>)
 800f72c:	789b      	ldrb	r3, [r3, #2]
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f1c3 0303 	rsb	r3, r3, #3
 800f734:	b2da      	uxtb	r2, r3
 800f736:	88bb      	ldrh	r3, [r7, #4]
 800f738:	f002 0203 	and.w	r2, r2, #3
 800f73c:	b2d1      	uxtb	r1, r2
 800f73e:	4a35      	ldr	r2, [pc, #212]	; (800f814 <make_route+0x288>)
 800f740:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800f742:	79ba      	ldrb	r2, [r7, #6]
 800f744:	79fb      	ldrb	r3, [r7, #7]
 800f746:	3b01      	subs	r3, #1
 800f748:	4933      	ldr	r1, [pc, #204]	; (800f818 <make_route+0x28c>)
 800f74a:	0112      	lsls	r2, r2, #4
 800f74c:	4413      	add	r3, r2
 800f74e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f752:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800f754:	79fb      	ldrb	r3, [r7, #7]
 800f756:	3b01      	subs	r3, #1
 800f758:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800f75a:	88bb      	ldrh	r3, [r7, #4]
 800f75c:	4a2d      	ldr	r2, [pc, #180]	; (800f814 <make_route+0x288>)
 800f75e:	5cd3      	ldrb	r3, [r2, r3]
 800f760:	2b03      	cmp	r3, #3
 800f762:	d83c      	bhi.n	800f7de <make_route+0x252>
 800f764:	a201      	add	r2, pc, #4	; (adr r2, 800f76c <make_route+0x1e0>)
 800f766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76a:	bf00      	nop
 800f76c:	0800f77d 	.word	0x0800f77d
 800f770:	0800f7a9 	.word	0x0800f7a9
 800f774:	0800f7bb 	.word	0x0800f7bb
 800f778:	0800f7cd 	.word	0x0800f7cd
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 800f77c:	4b27      	ldr	r3, [pc, #156]	; (800f81c <make_route+0x290>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	2b02      	cmp	r3, #2
 800f782:	d804      	bhi.n	800f78e <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 800f784:	88bb      	ldrh	r3, [r7, #4]
 800f786:	4a23      	ldr	r2, [pc, #140]	; (800f814 <make_route+0x288>)
 800f788:	2188      	movs	r1, #136	; 0x88
 800f78a:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 800f78c:	e02c      	b.n	800f7e8 <make_route+0x25c>
				route[i] = 0x77;
 800f78e:	88bb      	ldrh	r3, [r7, #4]
 800f790:	4a20      	ldr	r2, [pc, #128]	; (800f814 <make_route+0x288>)
 800f792:	2177      	movs	r1, #119	; 0x77
 800f794:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 800f796:	88bb      	ldrh	r3, [r7, #4]
 800f798:	3301      	adds	r3, #1
 800f79a:	4a1e      	ldr	r2, [pc, #120]	; (800f814 <make_route+0x288>)
 800f79c:	2177      	movs	r1, #119	; 0x77
 800f79e:	54d1      	strb	r1, [r2, r3]
				i++;
 800f7a0:	88bb      	ldrh	r3, [r7, #4]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	80bb      	strh	r3, [r7, #4]
			break;
 800f7a6:	e01f      	b.n	800f7e8 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	2001      	movs	r0, #1
 800f7ac:	f7ff fad8 	bl	800ed60 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800f7b0:	88bb      	ldrh	r3, [r7, #4]
 800f7b2:	4a18      	ldr	r2, [pc, #96]	; (800f814 <make_route+0x288>)
 800f7b4:	2144      	movs	r1, #68	; 0x44
 800f7b6:	54d1      	strb	r1, [r2, r3]
			break;
 800f7b8:	e016      	b.n	800f7e8 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	2002      	movs	r0, #2
 800f7be:	f7ff facf 	bl	800ed60 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800f7c2:	88bb      	ldrh	r3, [r7, #4]
 800f7c4:	4a13      	ldr	r2, [pc, #76]	; (800f814 <make_route+0x288>)
 800f7c6:	2122      	movs	r1, #34	; 0x22
 800f7c8:	54d1      	strb	r1, [r2, r3]
			break;
 800f7ca:	e00d      	b.n	800f7e8 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	20ff      	movs	r0, #255	; 0xff
 800f7d0:	f7ff fac6 	bl	800ed60 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800f7d4:	88bb      	ldrh	r3, [r7, #4]
 800f7d6:	4a0f      	ldr	r2, [pc, #60]	; (800f814 <make_route+0x288>)
 800f7d8:	2111      	movs	r1, #17
 800f7da:	54d1      	strb	r1, [r2, r3]
			break;
 800f7dc:	e004      	b.n	800f7e8 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800f7de:	88bb      	ldrh	r3, [r7, #4]
 800f7e0:	4a0c      	ldr	r2, [pc, #48]	; (800f814 <make_route+0x288>)
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	54d1      	strb	r1, [r2, r3]
			break;
 800f7e6:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800f7e8:	88bb      	ldrh	r3, [r7, #4]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800f7ee:	79ba      	ldrb	r2, [r7, #6]
 800f7f0:	79fb      	ldrb	r3, [r7, #7]
 800f7f2:	4909      	ldr	r1, [pc, #36]	; (800f818 <make_route+0x28c>)
 800f7f4:	0112      	lsls	r2, r2, #4
 800f7f6:	4413      	add	r3, r2
 800f7f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f47f aef8 	bne.w	800f5f2 <make_route+0x66>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800f802:	4a03      	ldr	r2, [pc, #12]	; (800f810 <make_route+0x284>)
 800f804:	783b      	ldrb	r3, [r7, #0]
 800f806:	7093      	strb	r3, [r2, #2]
}
 800f808:	bf00      	nop
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	20000c50 	.word	0x20000c50
 800f814:	20000c98 	.word	0x20000c98
 800f818:	20000da4 	.word	0x20000da4
 800f81c:	2000048e 	.word	0x2000048e
 800f820:	200001e4 	.word	0x200001e4
 800f824:	20000fa8 	.word	0x20000fa8

0800f828 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800f82e:	2300      	movs	r3, #0
 800f830:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800f832:	2300      	movs	r3, #0
 800f834:	73bb      	strb	r3, [r7, #14]
 800f836:	e014      	b.n	800f862 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800f838:	2300      	movs	r3, #0
 800f83a:	73fb      	strb	r3, [r7, #15]
 800f83c:	e00b      	b.n	800f856 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800f83e:	7bba      	ldrb	r2, [r7, #14]
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	499f      	ldr	r1, [pc, #636]	; (800fac0 <find_pregoal+0x298>)
 800f844:	0112      	lsls	r2, r2, #4
 800f846:	4413      	add	r3, r2
 800f848:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f84c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	3301      	adds	r3, #1
 800f854:	73fb      	strb	r3, [r7, #15]
 800f856:	7bfb      	ldrb	r3, [r7, #15]
 800f858:	2b0f      	cmp	r3, #15
 800f85a:	d9f0      	bls.n	800f83e <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800f85c:	7bbb      	ldrb	r3, [r7, #14]
 800f85e:	3301      	adds	r3, #1
 800f860:	73bb      	strb	r3, [r7, #14]
 800f862:	7bbb      	ldrb	r3, [r7, #14]
 800f864:	2b0f      	cmp	r3, #15
 800f866:	d9e7      	bls.n	800f838 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800f868:	4b96      	ldr	r3, [pc, #600]	; (800fac4 <find_pregoal+0x29c>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800f86e:	4b96      	ldr	r3, [pc, #600]	; (800fac8 <find_pregoal+0x2a0>)
 800f870:	785b      	ldrb	r3, [r3, #1]
 800f872:	b2db      	uxtb	r3, r3
 800f874:	4618      	mov	r0, r3
 800f876:	4b94      	ldr	r3, [pc, #592]	; (800fac8 <find_pregoal+0x2a0>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	4619      	mov	r1, r3
 800f87e:	4a90      	ldr	r2, [pc, #576]	; (800fac0 <find_pregoal+0x298>)
 800f880:	0103      	lsls	r3, r0, #4
 800f882:	440b      	add	r3, r1
 800f884:	2100      	movs	r1, #0
 800f886:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800f88a:	4b90      	ldr	r3, [pc, #576]	; (800facc <find_pregoal+0x2a4>)
 800f88c:	2200      	movs	r2, #0
 800f88e:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800f890:	2303      	movs	r3, #3
 800f892:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800f894:	2301      	movs	r3, #1
 800f896:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800f898:	2300      	movs	r3, #0
 800f89a:	73bb      	strb	r3, [r7, #14]
 800f89c:	e180      	b.n	800fba0 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800f89e:	2300      	movs	r3, #0
 800f8a0:	73fb      	strb	r3, [r7, #15]
 800f8a2:	e173      	b.n	800fb8c <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800f8a4:	7bba      	ldrb	r2, [r7, #14]
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	4985      	ldr	r1, [pc, #532]	; (800fac0 <find_pregoal+0x298>)
 800f8aa:	0112      	lsls	r2, r2, #4
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f8b2:	4b86      	ldr	r3, [pc, #536]	; (800facc <find_pregoal+0x2a4>)
 800f8b4:	881b      	ldrh	r3, [r3, #0]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	f040 8165 	bne.w	800fb86 <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800f8bc:	7bba      	ldrb	r2, [r7, #14]
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
 800f8c0:	4983      	ldr	r1, [pc, #524]	; (800fad0 <find_pregoal+0x2a8>)
 800f8c2:	0112      	lsls	r2, r2, #4
 800f8c4:	440a      	add	r2, r1
 800f8c6:	4413      	add	r3, r2
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800f8cc:	78fb      	ldrb	r3, [r7, #3]
 800f8ce:	f003 0308 	and.w	r3, r3, #8
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d14d      	bne.n	800f972 <find_pregoal+0x14a>
 800f8d6:	7bbb      	ldrb	r3, [r7, #14]
 800f8d8:	2b0f      	cmp	r3, #15
 800f8da:	d04a      	beq.n	800f972 <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
 800f8e2:	4977      	ldr	r1, [pc, #476]	; (800fac0 <find_pregoal+0x298>)
 800f8e4:	0112      	lsls	r2, r2, #4
 800f8e6:	4413      	add	r3, r2
 800f8e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f8ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d13e      	bne.n	800f972 <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f8f4:	7bba      	ldrb	r2, [r7, #14]
 800f8f6:	7bfb      	ldrb	r3, [r7, #15]
 800f8f8:	4971      	ldr	r1, [pc, #452]	; (800fac0 <find_pregoal+0x298>)
 800f8fa:	0112      	lsls	r2, r2, #4
 800f8fc:	4413      	add	r3, r2
 800f8fe:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	b299      	uxth	r1, r3
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	7bfb      	ldrb	r3, [r7, #15]
 800f90c:	4401      	add	r1, r0
 800f90e:	b288      	uxth	r0, r1
 800f910:	496b      	ldr	r1, [pc, #428]	; (800fac0 <find_pregoal+0x298>)
 800f912:	0112      	lsls	r2, r2, #4
 800f914:	4413      	add	r3, r2
 800f916:	4602      	mov	r2, r0
 800f918:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800f91c:	7bbb      	ldrb	r3, [r7, #14]
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	7bfb      	ldrb	r3, [r7, #15]
 800f922:	496b      	ldr	r1, [pc, #428]	; (800fad0 <find_pregoal+0x2a8>)
 800f924:	0112      	lsls	r2, r2, #4
 800f926:	440a      	add	r2, r1
 800f928:	4413      	add	r3, r2
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	011b      	lsls	r3, r3, #4
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	7bbb      	ldrb	r3, [r7, #14]
 800f932:	1c59      	adds	r1, r3, #1
 800f934:	7bfb      	ldrb	r3, [r7, #15]
 800f936:	4866      	ldr	r0, [pc, #408]	; (800fad0 <find_pregoal+0x2a8>)
 800f938:	0109      	lsls	r1, r1, #4
 800f93a:	4401      	add	r1, r0
 800f93c:	440b      	add	r3, r1
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f944:	429a      	cmp	r2, r3
 800f946:	d014      	beq.n	800f972 <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800f948:	2301      	movs	r3, #1
 800f94a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	495b      	ldr	r1, [pc, #364]	; (800fac0 <find_pregoal+0x298>)
 800f954:	0112      	lsls	r2, r2, #4
 800f956:	4413      	add	r3, r2
 800f958:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800f95c:	4b5d      	ldr	r3, [pc, #372]	; (800fad4 <find_pregoal+0x2ac>)
 800f95e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800f960:	4a5d      	ldr	r2, [pc, #372]	; (800fad8 <find_pregoal+0x2b0>)
 800f962:	7bfb      	ldrb	r3, [r7, #15]
 800f964:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800f966:	7bbb      	ldrb	r3, [r7, #14]
 800f968:	3301      	adds	r3, #1
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	4b5b      	ldr	r3, [pc, #364]	; (800fadc <find_pregoal+0x2b4>)
 800f96e:	701a      	strb	r2, [r3, #0]
								break;
 800f970:	e110      	b.n	800fb94 <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800f972:	78fb      	ldrb	r3, [r7, #3]
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d14d      	bne.n	800fa18 <find_pregoal+0x1f0>
 800f97c:	7bfb      	ldrb	r3, [r7, #15]
 800f97e:	2b0f      	cmp	r3, #15
 800f980:	d04a      	beq.n	800fa18 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800f982:	7bba      	ldrb	r2, [r7, #14]
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	3301      	adds	r3, #1
 800f988:	494d      	ldr	r1, [pc, #308]	; (800fac0 <find_pregoal+0x298>)
 800f98a:	0112      	lsls	r2, r2, #4
 800f98c:	4413      	add	r3, r2
 800f98e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f992:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f996:	4293      	cmp	r3, r2
 800f998:	d13e      	bne.n	800fa18 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f99a:	7bba      	ldrb	r2, [r7, #14]
 800f99c:	7bfb      	ldrb	r3, [r7, #15]
 800f99e:	4948      	ldr	r1, [pc, #288]	; (800fac0 <find_pregoal+0x298>)
 800f9a0:	0112      	lsls	r2, r2, #4
 800f9a2:	4413      	add	r3, r2
 800f9a4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	b299      	uxth	r1, r3
 800f9ac:	7bba      	ldrb	r2, [r7, #14]
 800f9ae:	7bfb      	ldrb	r3, [r7, #15]
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	4401      	add	r1, r0
 800f9b4:	b288      	uxth	r0, r1
 800f9b6:	4942      	ldr	r1, [pc, #264]	; (800fac0 <find_pregoal+0x298>)
 800f9b8:	0112      	lsls	r2, r2, #4
 800f9ba:	4413      	add	r3, r2
 800f9bc:	4602      	mov	r2, r0
 800f9be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800f9c2:	7bba      	ldrb	r2, [r7, #14]
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	4941      	ldr	r1, [pc, #260]	; (800fad0 <find_pregoal+0x2a8>)
 800f9ca:	0112      	lsls	r2, r2, #4
 800f9cc:	440a      	add	r2, r1
 800f9ce:	4413      	add	r3, r2
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	7bb9      	ldrb	r1, [r7, #14]
 800f9d8:	7bfb      	ldrb	r3, [r7, #15]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	483c      	ldr	r0, [pc, #240]	; (800fad0 <find_pregoal+0x2a8>)
 800f9de:	0109      	lsls	r1, r1, #4
 800f9e0:	4401      	add	r1, r0
 800f9e2:	440b      	add	r3, r1
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d014      	beq.n	800fa18 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800f9f2:	7bba      	ldrb	r2, [r7, #14]
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	4931      	ldr	r1, [pc, #196]	; (800fac0 <find_pregoal+0x298>)
 800f9fa:	0112      	lsls	r2, r2, #4
 800f9fc:	4413      	add	r3, r2
 800f9fe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fa02:	4b34      	ldr	r3, [pc, #208]	; (800fad4 <find_pregoal+0x2ac>)
 800fa04:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800fa06:	7bfb      	ldrb	r3, [r7, #15]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	4b32      	ldr	r3, [pc, #200]	; (800fad8 <find_pregoal+0x2b0>)
 800fa0e:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800fa10:	4a32      	ldr	r2, [pc, #200]	; (800fadc <find_pregoal+0x2b4>)
 800fa12:	7bbb      	ldrb	r3, [r7, #14]
 800fa14:	7013      	strb	r3, [r2, #0]
								break;
 800fa16:	e0bd      	b.n	800fb94 <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800fa18:	78fb      	ldrb	r3, [r7, #3]
 800fa1a:	f003 0302 	and.w	r3, r3, #2
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d15e      	bne.n	800fae0 <find_pregoal+0x2b8>
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d05b      	beq.n	800fae0 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800fa28:	7bbb      	ldrb	r3, [r7, #14]
 800fa2a:	1e5a      	subs	r2, r3, #1
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	4924      	ldr	r1, [pc, #144]	; (800fac0 <find_pregoal+0x298>)
 800fa30:	0112      	lsls	r2, r2, #4
 800fa32:	4413      	add	r3, r2
 800fa34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa38:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d14f      	bne.n	800fae0 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fa40:	7bba      	ldrb	r2, [r7, #14]
 800fa42:	7bfb      	ldrb	r3, [r7, #15]
 800fa44:	491e      	ldr	r1, [pc, #120]	; (800fac0 <find_pregoal+0x298>)
 800fa46:	0112      	lsls	r2, r2, #4
 800fa48:	4413      	add	r3, r2
 800fa4a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	b299      	uxth	r1, r3
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
 800fa54:	1e5a      	subs	r2, r3, #1
 800fa56:	7bfb      	ldrb	r3, [r7, #15]
 800fa58:	4401      	add	r1, r0
 800fa5a:	b288      	uxth	r0, r1
 800fa5c:	4918      	ldr	r1, [pc, #96]	; (800fac0 <find_pregoal+0x298>)
 800fa5e:	0112      	lsls	r2, r2, #4
 800fa60:	4413      	add	r3, r2
 800fa62:	4602      	mov	r2, r0
 800fa64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800fa68:	7bbb      	ldrb	r3, [r7, #14]
 800fa6a:	1e5a      	subs	r2, r3, #1
 800fa6c:	7bfb      	ldrb	r3, [r7, #15]
 800fa6e:	4918      	ldr	r1, [pc, #96]	; (800fad0 <find_pregoal+0x2a8>)
 800fa70:	0112      	lsls	r2, r2, #4
 800fa72:	440a      	add	r2, r1
 800fa74:	4413      	add	r3, r2
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	011b      	lsls	r3, r3, #4
 800fa7a:	b2da      	uxtb	r2, r3
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
 800fa7e:	1e59      	subs	r1, r3, #1
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	4813      	ldr	r0, [pc, #76]	; (800fad0 <find_pregoal+0x2a8>)
 800fa84:	0109      	lsls	r1, r1, #4
 800fa86:	4401      	add	r1, r0
 800fa88:	440b      	add	r3, r1
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d025      	beq.n	800fae0 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800fa94:	2301      	movs	r3, #1
 800fa96:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800fa98:	7bbb      	ldrb	r3, [r7, #14]
 800fa9a:	1e5a      	subs	r2, r3, #1
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
 800fa9e:	4908      	ldr	r1, [pc, #32]	; (800fac0 <find_pregoal+0x298>)
 800faa0:	0112      	lsls	r2, r2, #4
 800faa2:	4413      	add	r3, r2
 800faa4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800faa8:	4b0a      	ldr	r3, [pc, #40]	; (800fad4 <find_pregoal+0x2ac>)
 800faaa:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800faac:	4a0a      	ldr	r2, [pc, #40]	; (800fad8 <find_pregoal+0x2b0>)
 800faae:	7bfb      	ldrb	r3, [r7, #15]
 800fab0:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800fab2:	7bbb      	ldrb	r3, [r7, #14]
 800fab4:	3b01      	subs	r3, #1
 800fab6:	b2da      	uxtb	r2, r3
 800fab8:	4b08      	ldr	r3, [pc, #32]	; (800fadc <find_pregoal+0x2b4>)
 800faba:	701a      	strb	r2, [r3, #0]
								break;
 800fabc:	e06a      	b.n	800fb94 <find_pregoal+0x36c>
 800fabe:	bf00      	nop
 800fac0:	20000da4 	.word	0x20000da4
 800fac4:	20000bf0 	.word	0x20000bf0
 800fac8:	20000c50 	.word	0x20000c50
 800facc:	20000386 	.word	0x20000386
 800fad0:	200001e4 	.word	0x200001e4
 800fad4:	20000c48 	.word	0x20000c48
 800fad8:	20000da0 	.word	0x20000da0
 800fadc:	20000fc0 	.word	0x20000fc0
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800fae0:	78fb      	ldrb	r3, [r7, #3]
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d14d      	bne.n	800fb86 <find_pregoal+0x35e>
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d04a      	beq.n	800fb86 <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800faf0:	7bba      	ldrb	r2, [r7, #14]
 800faf2:	7bfb      	ldrb	r3, [r7, #15]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	493b      	ldr	r1, [pc, #236]	; (800fbe4 <find_pregoal+0x3bc>)
 800faf8:	0112      	lsls	r2, r2, #4
 800fafa:	4413      	add	r3, r2
 800fafc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb00:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d13e      	bne.n	800fb86 <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800fb08:	7bba      	ldrb	r2, [r7, #14]
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	4935      	ldr	r1, [pc, #212]	; (800fbe4 <find_pregoal+0x3bc>)
 800fb0e:	0112      	lsls	r2, r2, #4
 800fb10:	4413      	add	r3, r2
 800fb12:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	b299      	uxth	r1, r3
 800fb1a:	7bba      	ldrb	r2, [r7, #14]
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	4401      	add	r1, r0
 800fb22:	b288      	uxth	r0, r1
 800fb24:	492f      	ldr	r1, [pc, #188]	; (800fbe4 <find_pregoal+0x3bc>)
 800fb26:	0112      	lsls	r2, r2, #4
 800fb28:	4413      	add	r3, r2
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800fb30:	7bba      	ldrb	r2, [r7, #14]
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	492c      	ldr	r1, [pc, #176]	; (800fbe8 <find_pregoal+0x3c0>)
 800fb38:	0112      	lsls	r2, r2, #4
 800fb3a:	440a      	add	r2, r1
 800fb3c:	4413      	add	r3, r2
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	011b      	lsls	r3, r3, #4
 800fb42:	b2da      	uxtb	r2, r3
 800fb44:	7bb9      	ldrb	r1, [r7, #14]
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	4827      	ldr	r0, [pc, #156]	; (800fbe8 <find_pregoal+0x3c0>)
 800fb4c:	0109      	lsls	r1, r1, #4
 800fb4e:	4401      	add	r1, r0
 800fb50:	440b      	add	r3, r1
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d014      	beq.n	800fb86 <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800fb60:	7bba      	ldrb	r2, [r7, #14]
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	491f      	ldr	r1, [pc, #124]	; (800fbe4 <find_pregoal+0x3bc>)
 800fb68:	0112      	lsls	r2, r2, #4
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fb70:	4b1e      	ldr	r3, [pc, #120]	; (800fbec <find_pregoal+0x3c4>)
 800fb72:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	3b01      	subs	r3, #1
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b1d      	ldr	r3, [pc, #116]	; (800fbf0 <find_pregoal+0x3c8>)
 800fb7c:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800fb7e:	4a1d      	ldr	r2, [pc, #116]	; (800fbf4 <find_pregoal+0x3cc>)
 800fb80:	7bbb      	ldrb	r3, [r7, #14]
 800fb82:	7013      	strb	r3, [r2, #0]
								break;							}
 800fb84:	e006      	b.n	800fb94 <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	73fb      	strb	r3, [r7, #15]
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	2b0f      	cmp	r3, #15
 800fb90:	f67f ae88 	bls.w	800f8a4 <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800fb94:	7b7b      	ldrb	r3, [r7, #13]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d107      	bne.n	800fbaa <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800fb9a:	7bbb      	ldrb	r3, [r7, #14]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	73bb      	strb	r3, [r7, #14]
 800fba0:	7bbb      	ldrb	r3, [r7, #14]
 800fba2:	2b0f      	cmp	r3, #15
 800fba4:	f67f ae7b 	bls.w	800f89e <find_pregoal+0x76>
 800fba8:	e000      	b.n	800fbac <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800fbaa:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800fbac:	4b12      	ldr	r3, [pc, #72]	; (800fbf8 <find_pregoal+0x3d0>)
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	4b10      	ldr	r3, [pc, #64]	; (800fbf8 <find_pregoal+0x3d0>)
 800fbb6:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800fbb8:	4b0f      	ldr	r3, [pc, #60]	; (800fbf8 <find_pregoal+0x3d0>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fbc0:	d902      	bls.n	800fbc8 <find_pregoal+0x3a0>
 800fbc2:	4b0e      	ldr	r3, [pc, #56]	; (800fbfc <find_pregoal+0x3d4>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800fbc8:	7b7b      	ldrb	r3, [r7, #13]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d104      	bne.n	800fbd8 <find_pregoal+0x3b0>
 800fbce:	4b0b      	ldr	r3, [pc, #44]	; (800fbfc <find_pregoal+0x3d4>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	f47f ae60 	bne.w	800f898 <find_pregoal+0x70>
}
 800fbd8:	bf00      	nop
 800fbda:	3714      	adds	r7, #20
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr
 800fbe4:	20000da4 	.word	0x20000da4
 800fbe8:	200001e4 	.word	0x200001e4
 800fbec:	20000c48 	.word	0x20000c48
 800fbf0:	20000da0 	.word	0x20000da0
 800fbf4:	20000fc0 	.word	0x20000fc0
 800fbf8:	20000386 	.word	0x20000386
 800fbfc:	20000bf0 	.word	0x20000bf0

0800fc00 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800fc06:	2300      	movs	r3, #0
 800fc08:	73bb      	strb	r3, [r7, #14]
 800fc0a:	e014      	b.n	800fc36 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73fb      	strb	r3, [r7, #15]
 800fc10:	e00b      	b.n	800fc2a <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800fc12:	7bba      	ldrb	r2, [r7, #14]
 800fc14:	7bfb      	ldrb	r3, [r7, #15]
 800fc16:	4986      	ldr	r1, [pc, #536]	; (800fe30 <make_smap2+0x230>)
 800fc18:	0112      	lsls	r2, r2, #4
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fc20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	3301      	adds	r3, #1
 800fc28:	73fb      	strb	r3, [r7, #15]
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
 800fc2c:	2b0f      	cmp	r3, #15
 800fc2e:	d9f0      	bls.n	800fc12 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
 800fc32:	3301      	adds	r3, #1
 800fc34:	73bb      	strb	r3, [r7, #14]
 800fc36:	7bbb      	ldrb	r3, [r7, #14]
 800fc38:	2b0f      	cmp	r3, #15
 800fc3a:	d9e7      	bls.n	800fc0c <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800fc3c:	4b7d      	ldr	r3, [pc, #500]	; (800fe34 <make_smap2+0x234>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	4618      	mov	r0, r3
 800fc42:	4b7d      	ldr	r3, [pc, #500]	; (800fe38 <make_smap2+0x238>)
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	4619      	mov	r1, r3
 800fc48:	4a79      	ldr	r2, [pc, #484]	; (800fe30 <make_smap2+0x230>)
 800fc4a:	0103      	lsls	r3, r0, #4
 800fc4c:	440b      	add	r3, r1
 800fc4e:	2100      	movs	r1, #0
 800fc50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800fc54:	4b79      	ldr	r3, [pc, #484]	; (800fe3c <make_smap2+0x23c>)
 800fc56:	2200      	movs	r2, #0
 800fc58:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800fc5e:	2305      	movs	r3, #5
 800fc60:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800fc62:	2300      	movs	r3, #0
 800fc64:	73bb      	strb	r3, [r7, #14]
 800fc66:	e0c0      	b.n	800fdea <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800fc68:	2300      	movs	r3, #0
 800fc6a:	73fb      	strb	r3, [r7, #15]
 800fc6c:	e0b6      	b.n	800fddc <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800fc6e:	7bba      	ldrb	r2, [r7, #14]
 800fc70:	7bfb      	ldrb	r3, [r7, #15]
 800fc72:	496f      	ldr	r1, [pc, #444]	; (800fe30 <make_smap2+0x230>)
 800fc74:	0112      	lsls	r2, r2, #4
 800fc76:	4413      	add	r3, r2
 800fc78:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fc7c:	4b6f      	ldr	r3, [pc, #444]	; (800fe3c <make_smap2+0x23c>)
 800fc7e:	881b      	ldrh	r3, [r3, #0]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	f040 80a8 	bne.w	800fdd6 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800fc86:	7bba      	ldrb	r2, [r7, #14]
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	496d      	ldr	r1, [pc, #436]	; (800fe40 <make_smap2+0x240>)
 800fc8c:	0112      	lsls	r2, r2, #4
 800fc8e:	440a      	add	r2, r1
 800fc90:	4413      	add	r3, r2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800fc96:	78fb      	ldrb	r3, [r7, #3]
 800fc98:	f003 0308 	and.w	r3, r3, #8
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d122      	bne.n	800fce6 <make_smap2+0xe6>
 800fca0:	7bbb      	ldrb	r3, [r7, #14]
 800fca2:	2b0f      	cmp	r3, #15
 800fca4:	d01f      	beq.n	800fce6 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800fca6:	7bbb      	ldrb	r3, [r7, #14]
 800fca8:	1c5a      	adds	r2, r3, #1
 800fcaa:	7bfb      	ldrb	r3, [r7, #15]
 800fcac:	4960      	ldr	r1, [pc, #384]	; (800fe30 <make_smap2+0x230>)
 800fcae:	0112      	lsls	r2, r2, #4
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fcb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d113      	bne.n	800fce6 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fcbe:	7bba      	ldrb	r2, [r7, #14]
 800fcc0:	7bfb      	ldrb	r3, [r7, #15]
 800fcc2:	495b      	ldr	r1, [pc, #364]	; (800fe30 <make_smap2+0x230>)
 800fcc4:	0112      	lsls	r2, r2, #4
 800fcc6:	4413      	add	r3, r2
 800fcc8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	b299      	uxth	r1, r3
 800fcd0:	7bbb      	ldrb	r3, [r7, #14]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
 800fcd6:	4401      	add	r1, r0
 800fcd8:	b288      	uxth	r0, r1
 800fcda:	4955      	ldr	r1, [pc, #340]	; (800fe30 <make_smap2+0x230>)
 800fcdc:	0112      	lsls	r2, r2, #4
 800fcde:	4413      	add	r3, r2
 800fce0:	4602      	mov	r2, r0
 800fce2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800fce6:	78fb      	ldrb	r3, [r7, #3]
 800fce8:	f003 0304 	and.w	r3, r3, #4
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d122      	bne.n	800fd36 <make_smap2+0x136>
 800fcf0:	7bfb      	ldrb	r3, [r7, #15]
 800fcf2:	2b0f      	cmp	r3, #15
 800fcf4:	d01f      	beq.n	800fd36 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800fcf6:	7bba      	ldrb	r2, [r7, #14]
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	494c      	ldr	r1, [pc, #304]	; (800fe30 <make_smap2+0x230>)
 800fcfe:	0112      	lsls	r2, r2, #4
 800fd00:	4413      	add	r3, r2
 800fd02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd06:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d113      	bne.n	800fd36 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fd0e:	7bba      	ldrb	r2, [r7, #14]
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
 800fd12:	4947      	ldr	r1, [pc, #284]	; (800fe30 <make_smap2+0x230>)
 800fd14:	0112      	lsls	r2, r2, #4
 800fd16:	4413      	add	r3, r2
 800fd18:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	b299      	uxth	r1, r3
 800fd20:	7bba      	ldrb	r2, [r7, #14]
 800fd22:	7bfb      	ldrb	r3, [r7, #15]
 800fd24:	3301      	adds	r3, #1
 800fd26:	4401      	add	r1, r0
 800fd28:	b288      	uxth	r0, r1
 800fd2a:	4941      	ldr	r1, [pc, #260]	; (800fe30 <make_smap2+0x230>)
 800fd2c:	0112      	lsls	r2, r2, #4
 800fd2e:	4413      	add	r3, r2
 800fd30:	4602      	mov	r2, r0
 800fd32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800fd36:	78fb      	ldrb	r3, [r7, #3]
 800fd38:	f003 0302 	and.w	r3, r3, #2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d122      	bne.n	800fd86 <make_smap2+0x186>
 800fd40:	7bbb      	ldrb	r3, [r7, #14]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d01f      	beq.n	800fd86 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800fd46:	7bbb      	ldrb	r3, [r7, #14]
 800fd48:	1e5a      	subs	r2, r3, #1
 800fd4a:	7bfb      	ldrb	r3, [r7, #15]
 800fd4c:	4938      	ldr	r1, [pc, #224]	; (800fe30 <make_smap2+0x230>)
 800fd4e:	0112      	lsls	r2, r2, #4
 800fd50:	4413      	add	r3, r2
 800fd52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd56:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d113      	bne.n	800fd86 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800fd5e:	7bba      	ldrb	r2, [r7, #14]
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	4933      	ldr	r1, [pc, #204]	; (800fe30 <make_smap2+0x230>)
 800fd64:	0112      	lsls	r2, r2, #4
 800fd66:	4413      	add	r3, r2
 800fd68:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	b299      	uxth	r1, r3
 800fd70:	7bbb      	ldrb	r3, [r7, #14]
 800fd72:	1e5a      	subs	r2, r3, #1
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	4401      	add	r1, r0
 800fd78:	b288      	uxth	r0, r1
 800fd7a:	492d      	ldr	r1, [pc, #180]	; (800fe30 <make_smap2+0x230>)
 800fd7c:	0112      	lsls	r2, r2, #4
 800fd7e:	4413      	add	r3, r2
 800fd80:	4602      	mov	r2, r0
 800fd82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800fd86:	78fb      	ldrb	r3, [r7, #3]
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d122      	bne.n	800fdd6 <make_smap2+0x1d6>
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d01f      	beq.n	800fdd6 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800fd96:	7bba      	ldrb	r2, [r7, #14]
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
 800fd9a:	3b01      	subs	r3, #1
 800fd9c:	4924      	ldr	r1, [pc, #144]	; (800fe30 <make_smap2+0x230>)
 800fd9e:	0112      	lsls	r2, r2, #4
 800fda0:	4413      	add	r3, r2
 800fda2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fda6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d113      	bne.n	800fdd6 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800fdae:	7bba      	ldrb	r2, [r7, #14]
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
 800fdb2:	491f      	ldr	r1, [pc, #124]	; (800fe30 <make_smap2+0x230>)
 800fdb4:	0112      	lsls	r2, r2, #4
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	b299      	uxth	r1, r3
 800fdc0:	7bba      	ldrb	r2, [r7, #14]
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	4401      	add	r1, r0
 800fdc8:	b288      	uxth	r0, r1
 800fdca:	4919      	ldr	r1, [pc, #100]	; (800fe30 <make_smap2+0x230>)
 800fdcc:	0112      	lsls	r2, r2, #4
 800fdce:	4413      	add	r3, r2
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	73fb      	strb	r3, [r7, #15]
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
 800fdde:	2b0f      	cmp	r3, #15
 800fde0:	f67f af45 	bls.w	800fc6e <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800fde4:	7bbb      	ldrb	r3, [r7, #14]
 800fde6:	3301      	adds	r3, #1
 800fde8:	73bb      	strb	r3, [r7, #14]
 800fdea:	7bbb      	ldrb	r3, [r7, #14]
 800fdec:	2b0f      	cmp	r3, #15
 800fdee:	f67f af3b 	bls.w	800fc68 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800fdf2:	4b12      	ldr	r3, [pc, #72]	; (800fe3c <make_smap2+0x23c>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	4b10      	ldr	r3, [pc, #64]	; (800fe3c <make_smap2+0x23c>)
 800fdfc:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800fdfe:	4b11      	ldr	r3, [pc, #68]	; (800fe44 <make_smap2+0x244>)
 800fe00:	785b      	ldrb	r3, [r3, #1]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	4618      	mov	r0, r3
 800fe06:	4b0f      	ldr	r3, [pc, #60]	; (800fe44 <make_smap2+0x244>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4a08      	ldr	r2, [pc, #32]	; (800fe30 <make_smap2+0x230>)
 800fe10:	0103      	lsls	r3, r0, #4
 800fe12:	440b      	add	r3, r1
 800fe14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe18:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	f43f af20 	beq.w	800fc62 <make_smap2+0x62>
}
 800fe22:	bf00      	nop
 800fe24:	3714      	adds	r7, #20
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop
 800fe30:	20000da4 	.word	0x20000da4
 800fe34:	20000fc0 	.word	0x20000fc0
 800fe38:	20000da0 	.word	0x20000da0
 800fe3c:	20000386 	.word	0x20000386
 800fe40:	200001e4 	.word	0x200001e4
 800fe44:	20000c50 	.word	0x20000c50

0800fe48 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 800fe52:	2300      	movs	r3, #0
 800fe54:	607b      	str	r3, [r7, #4]
 800fe56:	e007      	b.n	800fe68 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 800fe58:	4a83      	ldr	r2, [pc, #524]	; (8010068 <pass_route2+0x220>)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	2200      	movs	r2, #0
 800fe60:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	3301      	adds	r3, #1
 800fe66:	607b      	str	r3, [r7, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2bff      	cmp	r3, #255	; 0xff
 800fe6c:	ddf4      	ble.n	800fe58 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800fe6e:	2300      	movs	r3, #0
 800fe70:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800fe72:	2300      	movs	r3, #0
 800fe74:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800fe76:	2300      	movs	r3, #0
 800fe78:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800fe7a:	e0e8      	b.n	801004e <pass_route2+0x206>
		s = 0;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 800fe80:	4a7a      	ldr	r2, [pc, #488]	; (801006c <pass_route2+0x224>)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4413      	add	r3, r2
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b44      	cmp	r3, #68	; 0x44
 800fe8a:	d107      	bne.n	800fe9c <pass_route2+0x54>
			pass[p] = -1;
 800fe8c:	78bb      	ldrb	r3, [r7, #2]
 800fe8e:	4a76      	ldr	r2, [pc, #472]	; (8010068 <pass_route2+0x220>)
 800fe90:	21ff      	movs	r1, #255	; 0xff
 800fe92:	54d1      	strb	r1, [r2, r3]
			i++;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	3301      	adds	r3, #1
 800fe98:	607b      	str	r3, [r7, #4]
 800fe9a:	e0d5      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 800fe9c:	4a73      	ldr	r2, [pc, #460]	; (801006c <pass_route2+0x224>)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4413      	add	r3, r2
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	2b11      	cmp	r3, #17
 800fea6:	d107      	bne.n	800feb8 <pass_route2+0x70>
			pass[p] = -2;
 800fea8:	78bb      	ldrb	r3, [r7, #2]
 800feaa:	4a6f      	ldr	r2, [pc, #444]	; (8010068 <pass_route2+0x220>)
 800feac:	21fe      	movs	r1, #254	; 0xfe
 800feae:	54d1      	strb	r1, [r2, r3]
			i++;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	3301      	adds	r3, #1
 800feb4:	607b      	str	r3, [r7, #4]
 800feb6:	e0c7      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800feb8:	4a6c      	ldr	r2, [pc, #432]	; (801006c <pass_route2+0x224>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4413      	add	r3, r2
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b77      	cmp	r3, #119	; 0x77
 800fec2:	d115      	bne.n	800fef0 <pass_route2+0xa8>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	3301      	adds	r3, #1
 800fec8:	4a68      	ldr	r2, [pc, #416]	; (801006c <pass_route2+0x224>)
 800feca:	5cd3      	ldrb	r3, [r2, r3]
 800fecc:	2b44      	cmp	r3, #68	; 0x44
 800fece:	d10f      	bne.n	800fef0 <pass_route2+0xa8>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	3302      	adds	r3, #2
 800fed4:	4a65      	ldr	r2, [pc, #404]	; (801006c <pass_route2+0x224>)
 800fed6:	5cd3      	ldrb	r3, [r2, r3]
 800fed8:	2b77      	cmp	r3, #119	; 0x77
 800feda:	d109      	bne.n	800fef0 <pass_route2+0xa8>
			s_flag = 0;
 800fedc:	2300      	movs	r3, #0
 800fede:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;
 800fee0:	78bb      	ldrb	r3, [r7, #2]
 800fee2:	4a61      	ldr	r2, [pc, #388]	; (8010068 <pass_route2+0x220>)
 800fee4:	21fd      	movs	r1, #253	; 0xfd
 800fee6:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	3303      	adds	r3, #3
 800feec:	607b      	str	r3, [r7, #4]
 800feee:	e0ab      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800fef0:	4a5e      	ldr	r2, [pc, #376]	; (801006c <pass_route2+0x224>)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4413      	add	r3, r2
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b77      	cmp	r3, #119	; 0x77
 800fefa:	d115      	bne.n	800ff28 <pass_route2+0xe0>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3301      	adds	r3, #1
 800ff00:	4a5a      	ldr	r2, [pc, #360]	; (801006c <pass_route2+0x224>)
 800ff02:	5cd3      	ldrb	r3, [r2, r3]
 800ff04:	2b11      	cmp	r3, #17
 800ff06:	d10f      	bne.n	800ff28 <pass_route2+0xe0>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	3302      	adds	r3, #2
 800ff0c:	4a57      	ldr	r2, [pc, #348]	; (801006c <pass_route2+0x224>)
 800ff0e:	5cd3      	ldrb	r3, [r2, r3]
 800ff10:	2b77      	cmp	r3, #119	; 0x77
 800ff12:	d109      	bne.n	800ff28 <pass_route2+0xe0>
			s_flag = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;
 800ff18:	78bb      	ldrb	r3, [r7, #2]
 800ff1a:	4a53      	ldr	r2, [pc, #332]	; (8010068 <pass_route2+0x220>)
 800ff1c:	21fc      	movs	r1, #252	; 0xfc
 800ff1e:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	3303      	adds	r3, #3
 800ff24:	607b      	str	r3, [r7, #4]
 800ff26:	e08f      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800ff28:	4a50      	ldr	r2, [pc, #320]	; (801006c <pass_route2+0x224>)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b77      	cmp	r3, #119	; 0x77
 800ff32:	d11b      	bne.n	800ff6c <pass_route2+0x124>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	3301      	adds	r3, #1
 800ff38:	4a4c      	ldr	r2, [pc, #304]	; (801006c <pass_route2+0x224>)
 800ff3a:	5cd3      	ldrb	r3, [r2, r3]
 800ff3c:	2b44      	cmp	r3, #68	; 0x44
 800ff3e:	d115      	bne.n	800ff6c <pass_route2+0x124>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	3302      	adds	r3, #2
 800ff44:	4a49      	ldr	r2, [pc, #292]	; (801006c <pass_route2+0x224>)
 800ff46:	5cd3      	ldrb	r3, [r2, r3]
 800ff48:	2b44      	cmp	r3, #68	; 0x44
 800ff4a:	d10f      	bne.n	800ff6c <pass_route2+0x124>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	3303      	adds	r3, #3
 800ff50:	4a46      	ldr	r2, [pc, #280]	; (801006c <pass_route2+0x224>)
 800ff52:	5cd3      	ldrb	r3, [r2, r3]
 800ff54:	2b77      	cmp	r3, #119	; 0x77
 800ff56:	d109      	bne.n	800ff6c <pass_route2+0x124>
			s_flag = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;
 800ff5c:	78bb      	ldrb	r3, [r7, #2]
 800ff5e:	4a42      	ldr	r2, [pc, #264]	; (8010068 <pass_route2+0x220>)
 800ff60:	21fb      	movs	r1, #251	; 0xfb
 800ff62:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3304      	adds	r3, #4
 800ff68:	607b      	str	r3, [r7, #4]
 800ff6a:	e06d      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800ff6c:	4a3f      	ldr	r2, [pc, #252]	; (801006c <pass_route2+0x224>)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4413      	add	r3, r2
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b77      	cmp	r3, #119	; 0x77
 800ff76:	d11b      	bne.n	800ffb0 <pass_route2+0x168>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	4a3b      	ldr	r2, [pc, #236]	; (801006c <pass_route2+0x224>)
 800ff7e:	5cd3      	ldrb	r3, [r2, r3]
 800ff80:	2b11      	cmp	r3, #17
 800ff82:	d115      	bne.n	800ffb0 <pass_route2+0x168>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	3302      	adds	r3, #2
 800ff88:	4a38      	ldr	r2, [pc, #224]	; (801006c <pass_route2+0x224>)
 800ff8a:	5cd3      	ldrb	r3, [r2, r3]
 800ff8c:	2b11      	cmp	r3, #17
 800ff8e:	d10f      	bne.n	800ffb0 <pass_route2+0x168>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	3303      	adds	r3, #3
 800ff94:	4a35      	ldr	r2, [pc, #212]	; (801006c <pass_route2+0x224>)
 800ff96:	5cd3      	ldrb	r3, [r2, r3]
 800ff98:	2b77      	cmp	r3, #119	; 0x77
 800ff9a:	d109      	bne.n	800ffb0 <pass_route2+0x168>
			s_flag = 0;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;
 800ffa0:	78bb      	ldrb	r3, [r7, #2]
 800ffa2:	4a31      	ldr	r2, [pc, #196]	; (8010068 <pass_route2+0x220>)
 800ffa4:	21fa      	movs	r1, #250	; 0xfa
 800ffa6:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	607b      	str	r3, [r7, #4]
 800ffae:	e04b      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 800ffb0:	4a2e      	ldr	r2, [pc, #184]	; (801006c <pass_route2+0x224>)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	2bff      	cmp	r3, #255	; 0xff
 800ffba:	d107      	bne.n	800ffcc <pass_route2+0x184>
			pass[p] = -114;
 800ffbc:	78bb      	ldrb	r3, [r7, #2]
 800ffbe:	4a2a      	ldr	r2, [pc, #168]	; (8010068 <pass_route2+0x220>)
 800ffc0:	218e      	movs	r1, #142	; 0x8e
 800ffc2:	54d1      	strb	r1, [r2, r3]
			i++;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	607b      	str	r3, [r7, #4]
 800ffca:	e03d      	b.n	8010048 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 800ffcc:	4a27      	ldr	r2, [pc, #156]	; (801006c <pass_route2+0x224>)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	2b77      	cmp	r3, #119	; 0x77
 800ffd6:	d137      	bne.n	8010048 <pass_route2+0x200>
			if(s_flag){
 800ffd8:	78fb      	ldrb	r3, [r7, #3]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d012      	beq.n	8010004 <pass_route2+0x1bc>
				pass[p-1]++;
 800ffde:	78bb      	ldrb	r3, [r7, #2]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	4a21      	ldr	r2, [pc, #132]	; (8010068 <pass_route2+0x220>)
 800ffe4:	56d2      	ldrsb	r2, [r2, r3]
 800ffe6:	b2d2      	uxtb	r2, r2
 800ffe8:	3201      	adds	r2, #1
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	b251      	sxtb	r1, r2
 800ffee:	4a1e      	ldr	r2, [pc, #120]	; (8010068 <pass_route2+0x220>)
 800fff0:	54d1      	strb	r1, [r2, r3]
				p--;
 800fff2:	78bb      	ldrb	r3, [r7, #2]
 800fff4:	3b01      	subs	r3, #1
 800fff6:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	70fb      	strb	r3, [r7, #3]
				i++;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3301      	adds	r3, #1
 8010000:	607b      	str	r3, [r7, #4]
 8010002:	e021      	b.n	8010048 <pass_route2+0x200>
			}else{
				s++;
 8010004:	787b      	ldrb	r3, [r7, #1]
 8010006:	3301      	adds	r3, #1
 8010008:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 801000a:	78bb      	ldrb	r3, [r7, #2]
 801000c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010010:	4a15      	ldr	r2, [pc, #84]	; (8010068 <pass_route2+0x220>)
 8010012:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8010014:	e00c      	b.n	8010030 <pass_route2+0x1e8>
					s_flag = 1;
 8010016:	2301      	movs	r3, #1
 8010018:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 801001a:	78bb      	ldrb	r3, [r7, #2]
 801001c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010020:	4a11      	ldr	r2, [pc, #68]	; (8010068 <pass_route2+0x220>)
 8010022:	54d1      	strb	r1, [r2, r3]
					i++;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3301      	adds	r3, #1
 8010028:	607b      	str	r3, [r7, #4]
					s++;
 801002a:	787b      	ldrb	r3, [r7, #1]
 801002c:	3301      	adds	r3, #1
 801002e:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	3301      	adds	r3, #1
 8010034:	4a0d      	ldr	r2, [pc, #52]	; (801006c <pass_route2+0x224>)
 8010036:	5cd3      	ldrb	r3, [r2, r3]
 8010038:	2b77      	cmp	r3, #119	; 0x77
 801003a:	d0ec      	beq.n	8010016 <pass_route2+0x1ce>
				}
				if(!s_flag){
 801003c:	78fb      	ldrb	r3, [r7, #3]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d102      	bne.n	8010048 <pass_route2+0x200>
					i++;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	3301      	adds	r3, #1
 8010046:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8010048:	78bb      	ldrb	r3, [r7, #2]
 801004a:	3301      	adds	r3, #1
 801004c:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3b01      	subs	r3, #1
 8010052:	4a06      	ldr	r2, [pc, #24]	; (801006c <pass_route2+0x224>)
 8010054:	5cd3      	ldrb	r3, [r2, r3]
 8010056:	2bff      	cmp	r3, #255	; 0xff
 8010058:	f47f af10 	bne.w	800fe7c <pass_route2+0x34>
	}
}
 801005c:	bf00      	nop
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	20000388 	.word	0x20000388
 801006c:	20000c98 	.word	0x20000c98

08010070 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8010076:	2300      	movs	r3, #0
 8010078:	70fb      	strb	r3, [r7, #3]
	v_flag = 0;										//a斜めフラグの初期化
 801007a:	4b90      	ldr	r3, [pc, #576]	; (80102bc <pass_route3+0x24c>)
 801007c:	2200      	movs	r2, #0
 801007e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010080:	2300      	movs	r3, #0
 8010082:	607b      	str	r3, [r7, #4]
 8010084:	e007      	b.n	8010096 <pass_route3+0x26>
		pass[i] = 0;								//pass配列の初期化
 8010086:	4a8e      	ldr	r2, [pc, #568]	; (80102c0 <pass_route3+0x250>)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4413      	add	r3, r2
 801008c:	2200      	movs	r2, #0
 801008e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3301      	adds	r3, #1
 8010094:	607b      	str	r3, [r7, #4]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2bff      	cmp	r3, #255	; 0xff
 801009a:	ddf4      	ble.n	8010086 <pass_route3+0x16>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 801009c:	2300      	movs	r3, #0
 801009e:	70bb      	strb	r3, [r7, #2]
	i = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 80100a4:	2300      	movs	r3, #0
 80100a6:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 80100a8:	e2f1      	b.n	801068e <pass_route3+0x61e>
		s = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80100ae:	4a85      	ldr	r2, [pc, #532]	; (80102c4 <pass_route3+0x254>)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4413      	add	r3, r2
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2b77      	cmp	r3, #119	; 0x77
 80100b8:	d11b      	bne.n	80100f2 <pass_route3+0x82>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3301      	adds	r3, #1
 80100be:	4a81      	ldr	r2, [pc, #516]	; (80102c4 <pass_route3+0x254>)
 80100c0:	5cd3      	ldrb	r3, [r2, r3]
 80100c2:	2b44      	cmp	r3, #68	; 0x44
 80100c4:	d115      	bne.n	80100f2 <pass_route3+0x82>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	3302      	adds	r3, #2
 80100ca:	4a7e      	ldr	r2, [pc, #504]	; (80102c4 <pass_route3+0x254>)
 80100cc:	5cd3      	ldrb	r3, [r2, r3]
 80100ce:	2b77      	cmp	r3, #119	; 0x77
 80100d0:	d10f      	bne.n	80100f2 <pass_route3+0x82>
			s_flag = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 80100d6:	78bb      	ldrb	r3, [r7, #2]
 80100d8:	4a79      	ldr	r2, [pc, #484]	; (80102c0 <pass_route3+0x250>)
 80100da:	21fd      	movs	r1, #253	; 0xfd
 80100dc:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d102      	bne.n	80100ea <pass_route3+0x7a>
				start_flag = 2;
 80100e4:	4b78      	ldr	r3, [pc, #480]	; (80102c8 <pass_route3+0x258>)
 80100e6:	2202      	movs	r2, #2
 80100e8:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3303      	adds	r3, #3
 80100ee:	607b      	str	r3, [r7, #4]
 80100f0:	e2ca      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80100f2:	4a74      	ldr	r2, [pc, #464]	; (80102c4 <pass_route3+0x254>)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4413      	add	r3, r2
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b77      	cmp	r3, #119	; 0x77
 80100fc:	d11b      	bne.n	8010136 <pass_route3+0xc6>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	3301      	adds	r3, #1
 8010102:	4a70      	ldr	r2, [pc, #448]	; (80102c4 <pass_route3+0x254>)
 8010104:	5cd3      	ldrb	r3, [r2, r3]
 8010106:	2b11      	cmp	r3, #17
 8010108:	d115      	bne.n	8010136 <pass_route3+0xc6>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	3302      	adds	r3, #2
 801010e:	4a6d      	ldr	r2, [pc, #436]	; (80102c4 <pass_route3+0x254>)
 8010110:	5cd3      	ldrb	r3, [r2, r3]
 8010112:	2b77      	cmp	r3, #119	; 0x77
 8010114:	d10f      	bne.n	8010136 <pass_route3+0xc6>
			s_flag = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 801011a:	78bb      	ldrb	r3, [r7, #2]
 801011c:	4a68      	ldr	r2, [pc, #416]	; (80102c0 <pass_route3+0x250>)
 801011e:	21fc      	movs	r1, #252	; 0xfc
 8010120:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d102      	bne.n	801012e <pass_route3+0xbe>
				start_flag = 2;
 8010128:	4b67      	ldr	r3, [pc, #412]	; (80102c8 <pass_route3+0x258>)
 801012a:	2202      	movs	r2, #2
 801012c:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	3303      	adds	r3, #3
 8010132:	607b      	str	r3, [r7, #4]
 8010134:	e2a8      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8010136:	4a63      	ldr	r2, [pc, #396]	; (80102c4 <pass_route3+0x254>)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4413      	add	r3, r2
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	2b77      	cmp	r3, #119	; 0x77
 8010140:	d11b      	bne.n	801017a <pass_route3+0x10a>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	3301      	adds	r3, #1
 8010146:	4a5f      	ldr	r2, [pc, #380]	; (80102c4 <pass_route3+0x254>)
 8010148:	5cd3      	ldrb	r3, [r2, r3]
 801014a:	2b44      	cmp	r3, #68	; 0x44
 801014c:	d115      	bne.n	801017a <pass_route3+0x10a>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	3302      	adds	r3, #2
 8010152:	4a5c      	ldr	r2, [pc, #368]	; (80102c4 <pass_route3+0x254>)
 8010154:	5cd3      	ldrb	r3, [r2, r3]
 8010156:	2b44      	cmp	r3, #68	; 0x44
 8010158:	d10f      	bne.n	801017a <pass_route3+0x10a>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	3303      	adds	r3, #3
 801015e:	4a59      	ldr	r2, [pc, #356]	; (80102c4 <pass_route3+0x254>)
 8010160:	5cd3      	ldrb	r3, [r2, r3]
 8010162:	2b77      	cmp	r3, #119	; 0x77
 8010164:	d109      	bne.n	801017a <pass_route3+0x10a>
			s_flag = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 801016a:	78bb      	ldrb	r3, [r7, #2]
 801016c:	4a54      	ldr	r2, [pc, #336]	; (80102c0 <pass_route3+0x250>)
 801016e:	21fb      	movs	r1, #251	; 0xfb
 8010170:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	3304      	adds	r3, #4
 8010176:	607b      	str	r3, [r7, #4]
 8010178:	e286      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 801017a:	4a52      	ldr	r2, [pc, #328]	; (80102c4 <pass_route3+0x254>)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4413      	add	r3, r2
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	2b77      	cmp	r3, #119	; 0x77
 8010184:	d11b      	bne.n	80101be <pass_route3+0x14e>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	3301      	adds	r3, #1
 801018a:	4a4e      	ldr	r2, [pc, #312]	; (80102c4 <pass_route3+0x254>)
 801018c:	5cd3      	ldrb	r3, [r2, r3]
 801018e:	2b11      	cmp	r3, #17
 8010190:	d115      	bne.n	80101be <pass_route3+0x14e>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	3302      	adds	r3, #2
 8010196:	4a4b      	ldr	r2, [pc, #300]	; (80102c4 <pass_route3+0x254>)
 8010198:	5cd3      	ldrb	r3, [r2, r3]
 801019a:	2b11      	cmp	r3, #17
 801019c:	d10f      	bne.n	80101be <pass_route3+0x14e>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	3303      	adds	r3, #3
 80101a2:	4a48      	ldr	r2, [pc, #288]	; (80102c4 <pass_route3+0x254>)
 80101a4:	5cd3      	ldrb	r3, [r2, r3]
 80101a6:	2b77      	cmp	r3, #119	; 0x77
 80101a8:	d109      	bne.n	80101be <pass_route3+0x14e>
			s_flag = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 80101ae:	78bb      	ldrb	r3, [r7, #2]
 80101b0:	4a43      	ldr	r2, [pc, #268]	; (80102c0 <pass_route3+0x250>)
 80101b2:	21fa      	movs	r1, #250	; 0xfa
 80101b4:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3304      	adds	r3, #4
 80101ba:	607b      	str	r3, [r7, #4]
 80101bc:	e264      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 80101be:	4a41      	ldr	r2, [pc, #260]	; (80102c4 <pass_route3+0x254>)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4413      	add	r3, r2
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	2b77      	cmp	r3, #119	; 0x77
 80101c8:	d11e      	bne.n	8010208 <pass_route3+0x198>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3301      	adds	r3, #1
 80101ce:	4a3d      	ldr	r2, [pc, #244]	; (80102c4 <pass_route3+0x254>)
 80101d0:	5cd3      	ldrb	r3, [r2, r3]
 80101d2:	2b44      	cmp	r3, #68	; 0x44
 80101d4:	d118      	bne.n	8010208 <pass_route3+0x198>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	3302      	adds	r3, #2
 80101da:	4a3a      	ldr	r2, [pc, #232]	; (80102c4 <pass_route3+0x254>)
 80101dc:	5cd3      	ldrb	r3, [r2, r3]
 80101de:	2b11      	cmp	r3, #17
 80101e0:	d112      	bne.n	8010208 <pass_route3+0x198>
			s_flag = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 80101e6:	78bb      	ldrb	r3, [r7, #2]
 80101e8:	4a35      	ldr	r2, [pc, #212]	; (80102c0 <pass_route3+0x250>)
 80101ea:	21f9      	movs	r1, #249	; 0xf9
 80101ec:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 80101ee:	4b33      	ldr	r3, [pc, #204]	; (80102bc <pass_route3+0x24c>)
 80101f0:	2201      	movs	r2, #1
 80101f2:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <pass_route3+0x190>
				start_flag = 2;
 80101fa:	4b33      	ldr	r3, [pc, #204]	; (80102c8 <pass_route3+0x258>)
 80101fc:	2202      	movs	r2, #2
 80101fe:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3302      	adds	r3, #2
 8010204:	607b      	str	r3, [r7, #4]
 8010206:	e23f      	b.n	8010688 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 8010208:	4b2c      	ldr	r3, [pc, #176]	; (80102bc <pass_route3+0x24c>)
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d118      	bne.n	8010242 <pass_route3+0x1d2>
 8010210:	4a2c      	ldr	r2, [pc, #176]	; (80102c4 <pass_route3+0x254>)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4413      	add	r3, r2
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b44      	cmp	r3, #68	; 0x44
 801021a:	d112      	bne.n	8010242 <pass_route3+0x1d2>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	3301      	adds	r3, #1
 8010220:	4a28      	ldr	r2, [pc, #160]	; (80102c4 <pass_route3+0x254>)
 8010222:	5cd3      	ldrb	r3, [r2, r3]
 8010224:	2b77      	cmp	r3, #119	; 0x77
 8010226:	d10c      	bne.n	8010242 <pass_route3+0x1d2>
			s_flag = 0;
 8010228:	2300      	movs	r3, #0
 801022a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 801022c:	78bb      	ldrb	r3, [r7, #2]
 801022e:	4a24      	ldr	r2, [pc, #144]	; (80102c0 <pass_route3+0x250>)
 8010230:	21f9      	movs	r1, #249	; 0xf9
 8010232:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 8010234:	4b21      	ldr	r3, [pc, #132]	; (80102bc <pass_route3+0x24c>)
 8010236:	2200      	movs	r2, #0
 8010238:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	3302      	adds	r3, #2
 801023e:	607b      	str	r3, [r7, #4]
 8010240:	e222      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8010242:	4a20      	ldr	r2, [pc, #128]	; (80102c4 <pass_route3+0x254>)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4413      	add	r3, r2
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b77      	cmp	r3, #119	; 0x77
 801024c:	d118      	bne.n	8010280 <pass_route3+0x210>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3301      	adds	r3, #1
 8010252:	4a1c      	ldr	r2, [pc, #112]	; (80102c4 <pass_route3+0x254>)
 8010254:	5cd3      	ldrb	r3, [r2, r3]
 8010256:	2b11      	cmp	r3, #17
 8010258:	d112      	bne.n	8010280 <pass_route3+0x210>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	3302      	adds	r3, #2
 801025e:	4a19      	ldr	r2, [pc, #100]	; (80102c4 <pass_route3+0x254>)
 8010260:	5cd3      	ldrb	r3, [r2, r3]
 8010262:	2b44      	cmp	r3, #68	; 0x44
 8010264:	d10c      	bne.n	8010280 <pass_route3+0x210>
			s_flag = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 801026a:	78bb      	ldrb	r3, [r7, #2]
 801026c:	4a14      	ldr	r2, [pc, #80]	; (80102c0 <pass_route3+0x250>)
 801026e:	21f8      	movs	r1, #248	; 0xf8
 8010270:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8010272:	4b12      	ldr	r3, [pc, #72]	; (80102bc <pass_route3+0x24c>)
 8010274:	2201      	movs	r2, #1
 8010276:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3302      	adds	r3, #2
 801027c:	607b      	str	r3, [r7, #4]
 801027e:	e203      	b.n	8010688 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8010280:	4b0e      	ldr	r3, [pc, #56]	; (80102bc <pass_route3+0x24c>)
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2b01      	cmp	r3, #1
 8010286:	d121      	bne.n	80102cc <pass_route3+0x25c>
 8010288:	4a0e      	ldr	r2, [pc, #56]	; (80102c4 <pass_route3+0x254>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4413      	add	r3, r2
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b11      	cmp	r3, #17
 8010292:	d11b      	bne.n	80102cc <pass_route3+0x25c>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	3301      	adds	r3, #1
 8010298:	4a0a      	ldr	r2, [pc, #40]	; (80102c4 <pass_route3+0x254>)
 801029a:	5cd3      	ldrb	r3, [r2, r3]
 801029c:	2b77      	cmp	r3, #119	; 0x77
 801029e:	d115      	bne.n	80102cc <pass_route3+0x25c>
			s_flag = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 80102a4:	78bb      	ldrb	r3, [r7, #2]
 80102a6:	4a06      	ldr	r2, [pc, #24]	; (80102c0 <pass_route3+0x250>)
 80102a8:	21f8      	movs	r1, #248	; 0xf8
 80102aa:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 80102ac:	4b03      	ldr	r3, [pc, #12]	; (80102bc <pass_route3+0x24c>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	3302      	adds	r3, #2
 80102b6:	607b      	str	r3, [r7, #4]
 80102b8:	e1e6      	b.n	8010688 <pass_route3+0x618>
 80102ba:	bf00      	nop
 80102bc:	20000b28 	.word	0x20000b28
 80102c0:	20000388 	.word	0x20000388
 80102c4:	20000c98 	.word	0x20000c98
 80102c8:	200012e8 	.word	0x200012e8
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 80102cc:	4ba0      	ldr	r3, [pc, #640]	; (8010550 <pass_route3+0x4e0>)
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d11e      	bne.n	8010312 <pass_route3+0x2a2>
 80102d4:	4a9f      	ldr	r2, [pc, #636]	; (8010554 <pass_route3+0x4e4>)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4413      	add	r3, r2
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	2b44      	cmp	r3, #68	; 0x44
 80102de:	d118      	bne.n	8010312 <pass_route3+0x2a2>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	3301      	adds	r3, #1
 80102e4:	4a9b      	ldr	r2, [pc, #620]	; (8010554 <pass_route3+0x4e4>)
 80102e6:	5cd3      	ldrb	r3, [r2, r3]
 80102e8:	2b44      	cmp	r3, #68	; 0x44
 80102ea:	d112      	bne.n	8010312 <pass_route3+0x2a2>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3302      	adds	r3, #2
 80102f0:	4a98      	ldr	r2, [pc, #608]	; (8010554 <pass_route3+0x4e4>)
 80102f2:	5cd3      	ldrb	r3, [r2, r3]
 80102f4:	2b11      	cmp	r3, #17
 80102f6:	d10c      	bne.n	8010312 <pass_route3+0x2a2>
			s_flag = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 80102fc:	78bb      	ldrb	r3, [r7, #2]
 80102fe:	4a96      	ldr	r2, [pc, #600]	; (8010558 <pass_route3+0x4e8>)
 8010300:	21f7      	movs	r1, #247	; 0xf7
 8010302:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8010304:	4b92      	ldr	r3, [pc, #584]	; (8010550 <pass_route3+0x4e0>)
 8010306:	2201      	movs	r2, #1
 8010308:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	3302      	adds	r3, #2
 801030e:	607b      	str	r3, [r7, #4]
 8010310:	e1ba      	b.n	8010688 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8010312:	4b8f      	ldr	r3, [pc, #572]	; (8010550 <pass_route3+0x4e0>)
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	2b01      	cmp	r3, #1
 8010318:	d11e      	bne.n	8010358 <pass_route3+0x2e8>
 801031a:	4a8e      	ldr	r2, [pc, #568]	; (8010554 <pass_route3+0x4e4>)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4413      	add	r3, r2
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	2b11      	cmp	r3, #17
 8010324:	d118      	bne.n	8010358 <pass_route3+0x2e8>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	3301      	adds	r3, #1
 801032a:	4a8a      	ldr	r2, [pc, #552]	; (8010554 <pass_route3+0x4e4>)
 801032c:	5cd3      	ldrb	r3, [r2, r3]
 801032e:	2b11      	cmp	r3, #17
 8010330:	d112      	bne.n	8010358 <pass_route3+0x2e8>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	3302      	adds	r3, #2
 8010336:	4a87      	ldr	r2, [pc, #540]	; (8010554 <pass_route3+0x4e4>)
 8010338:	5cd3      	ldrb	r3, [r2, r3]
 801033a:	2b44      	cmp	r3, #68	; 0x44
 801033c:	d10c      	bne.n	8010358 <pass_route3+0x2e8>
			s_flag = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 8010342:	78bb      	ldrb	r3, [r7, #2]
 8010344:	4a84      	ldr	r2, [pc, #528]	; (8010558 <pass_route3+0x4e8>)
 8010346:	21f6      	movs	r1, #246	; 0xf6
 8010348:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 801034a:	4b81      	ldr	r3, [pc, #516]	; (8010550 <pass_route3+0x4e0>)
 801034c:	2201      	movs	r2, #1
 801034e:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	3302      	adds	r3, #2
 8010354:	607b      	str	r3, [r7, #4]
 8010356:	e197      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8010358:	4a7e      	ldr	r2, [pc, #504]	; (8010554 <pass_route3+0x4e4>)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4413      	add	r3, r2
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b77      	cmp	r3, #119	; 0x77
 8010362:	d124      	bne.n	80103ae <pass_route3+0x33e>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	3301      	adds	r3, #1
 8010368:	4a7a      	ldr	r2, [pc, #488]	; (8010554 <pass_route3+0x4e4>)
 801036a:	5cd3      	ldrb	r3, [r2, r3]
 801036c:	2b44      	cmp	r3, #68	; 0x44
 801036e:	d11e      	bne.n	80103ae <pass_route3+0x33e>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	3302      	adds	r3, #2
 8010374:	4a77      	ldr	r2, [pc, #476]	; (8010554 <pass_route3+0x4e4>)
 8010376:	5cd3      	ldrb	r3, [r2, r3]
 8010378:	2b44      	cmp	r3, #68	; 0x44
 801037a:	d118      	bne.n	80103ae <pass_route3+0x33e>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	3303      	adds	r3, #3
 8010380:	4a74      	ldr	r2, [pc, #464]	; (8010554 <pass_route3+0x4e4>)
 8010382:	5cd3      	ldrb	r3, [r2, r3]
 8010384:	2b11      	cmp	r3, #17
 8010386:	d112      	bne.n	80103ae <pass_route3+0x33e>
			s_flag = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 801038c:	78bb      	ldrb	r3, [r7, #2]
 801038e:	4a72      	ldr	r2, [pc, #456]	; (8010558 <pass_route3+0x4e8>)
 8010390:	21f5      	movs	r1, #245	; 0xf5
 8010392:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8010394:	4b6e      	ldr	r3, [pc, #440]	; (8010550 <pass_route3+0x4e0>)
 8010396:	2201      	movs	r2, #1
 8010398:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d102      	bne.n	80103a6 <pass_route3+0x336>
				start_flag = 2;
 80103a0:	4b6e      	ldr	r3, [pc, #440]	; (801055c <pass_route3+0x4ec>)
 80103a2:	2202      	movs	r2, #2
 80103a4:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	3303      	adds	r3, #3
 80103aa:	607b      	str	r3, [r7, #4]
 80103ac:	e16c      	b.n	8010688 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80103ae:	4b68      	ldr	r3, [pc, #416]	; (8010550 <pass_route3+0x4e0>)
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d11e      	bne.n	80103f4 <pass_route3+0x384>
 80103b6:	4a67      	ldr	r2, [pc, #412]	; (8010554 <pass_route3+0x4e4>)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4413      	add	r3, r2
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b44      	cmp	r3, #68	; 0x44
 80103c0:	d118      	bne.n	80103f4 <pass_route3+0x384>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	3301      	adds	r3, #1
 80103c6:	4a63      	ldr	r2, [pc, #396]	; (8010554 <pass_route3+0x4e4>)
 80103c8:	5cd3      	ldrb	r3, [r2, r3]
 80103ca:	2b44      	cmp	r3, #68	; 0x44
 80103cc:	d112      	bne.n	80103f4 <pass_route3+0x384>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	3302      	adds	r3, #2
 80103d2:	4a60      	ldr	r2, [pc, #384]	; (8010554 <pass_route3+0x4e4>)
 80103d4:	5cd3      	ldrb	r3, [r2, r3]
 80103d6:	2b77      	cmp	r3, #119	; 0x77
 80103d8:	d10c      	bne.n	80103f4 <pass_route3+0x384>
			s_flag = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 80103de:	78bb      	ldrb	r3, [r7, #2]
 80103e0:	4a5d      	ldr	r2, [pc, #372]	; (8010558 <pass_route3+0x4e8>)
 80103e2:	21f5      	movs	r1, #245	; 0xf5
 80103e4:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 80103e6:	4b5a      	ldr	r3, [pc, #360]	; (8010550 <pass_route3+0x4e0>)
 80103e8:	2200      	movs	r2, #0
 80103ea:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	3303      	adds	r3, #3
 80103f0:	607b      	str	r3, [r7, #4]
 80103f2:	e149      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 80103f4:	4a57      	ldr	r2, [pc, #348]	; (8010554 <pass_route3+0x4e4>)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4413      	add	r3, r2
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b77      	cmp	r3, #119	; 0x77
 80103fe:	d11e      	bne.n	801043e <pass_route3+0x3ce>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3301      	adds	r3, #1
 8010404:	4a53      	ldr	r2, [pc, #332]	; (8010554 <pass_route3+0x4e4>)
 8010406:	5cd3      	ldrb	r3, [r2, r3]
 8010408:	2b11      	cmp	r3, #17
 801040a:	d118      	bne.n	801043e <pass_route3+0x3ce>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	3302      	adds	r3, #2
 8010410:	4a50      	ldr	r2, [pc, #320]	; (8010554 <pass_route3+0x4e4>)
 8010412:	5cd3      	ldrb	r3, [r2, r3]
 8010414:	2b11      	cmp	r3, #17
 8010416:	d112      	bne.n	801043e <pass_route3+0x3ce>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3303      	adds	r3, #3
 801041c:	4a4d      	ldr	r2, [pc, #308]	; (8010554 <pass_route3+0x4e4>)
 801041e:	5cd3      	ldrb	r3, [r2, r3]
 8010420:	2b44      	cmp	r3, #68	; 0x44
 8010422:	d10c      	bne.n	801043e <pass_route3+0x3ce>
			s_flag = 0;
 8010424:	2300      	movs	r3, #0
 8010426:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 8010428:	78bb      	ldrb	r3, [r7, #2]
 801042a:	4a4b      	ldr	r2, [pc, #300]	; (8010558 <pass_route3+0x4e8>)
 801042c:	21f4      	movs	r1, #244	; 0xf4
 801042e:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8010430:	4b47      	ldr	r3, [pc, #284]	; (8010550 <pass_route3+0x4e0>)
 8010432:	2201      	movs	r2, #1
 8010434:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	3303      	adds	r3, #3
 801043a:	607b      	str	r3, [r7, #4]
 801043c:	e124      	b.n	8010688 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 801043e:	4b44      	ldr	r3, [pc, #272]	; (8010550 <pass_route3+0x4e0>)
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	2b01      	cmp	r3, #1
 8010444:	d11e      	bne.n	8010484 <pass_route3+0x414>
 8010446:	4a43      	ldr	r2, [pc, #268]	; (8010554 <pass_route3+0x4e4>)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4413      	add	r3, r2
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	2b11      	cmp	r3, #17
 8010450:	d118      	bne.n	8010484 <pass_route3+0x414>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	3301      	adds	r3, #1
 8010456:	4a3f      	ldr	r2, [pc, #252]	; (8010554 <pass_route3+0x4e4>)
 8010458:	5cd3      	ldrb	r3, [r2, r3]
 801045a:	2b11      	cmp	r3, #17
 801045c:	d112      	bne.n	8010484 <pass_route3+0x414>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3302      	adds	r3, #2
 8010462:	4a3c      	ldr	r2, [pc, #240]	; (8010554 <pass_route3+0x4e4>)
 8010464:	5cd3      	ldrb	r3, [r2, r3]
 8010466:	2b77      	cmp	r3, #119	; 0x77
 8010468:	d10c      	bne.n	8010484 <pass_route3+0x414>
			s_flag = 0;
 801046a:	2300      	movs	r3, #0
 801046c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 801046e:	78bb      	ldrb	r3, [r7, #2]
 8010470:	4a39      	ldr	r2, [pc, #228]	; (8010558 <pass_route3+0x4e8>)
 8010472:	21f4      	movs	r1, #244	; 0xf4
 8010474:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 8010476:	4b36      	ldr	r3, [pc, #216]	; (8010550 <pass_route3+0x4e0>)
 8010478:	2200      	movs	r2, #0
 801047a:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	3303      	adds	r3, #3
 8010480:	607b      	str	r3, [r7, #4]
 8010482:	e101      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0xff){
 8010484:	4a33      	ldr	r2, [pc, #204]	; (8010554 <pass_route3+0x4e4>)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4413      	add	r3, r2
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2bff      	cmp	r3, #255	; 0xff
 801048e:	d167      	bne.n	8010560 <pass_route3+0x4f0>
			if(v_flag == 1){
 8010490:	4b2f      	ldr	r3, [pc, #188]	; (8010550 <pass_route3+0x4e0>)
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d152      	bne.n	801053e <pass_route3+0x4ce>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 8010498:	78bb      	ldrb	r3, [r7, #2]
 801049a:	3b01      	subs	r3, #1
 801049c:	4a2e      	ldr	r2, [pc, #184]	; (8010558 <pass_route3+0x4e8>)
 801049e:	56d3      	ldrsb	r3, [r2, r3]
 80104a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a4:	d111      	bne.n	80104ca <pass_route3+0x45a>
 80104a6:	78bb      	ldrb	r3, [r7, #2]
 80104a8:	3b02      	subs	r3, #2
 80104aa:	4a2b      	ldr	r2, [pc, #172]	; (8010558 <pass_route3+0x4e8>)
 80104ac:	56d3      	ldrsb	r3, [r2, r3]
 80104ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b2:	d10a      	bne.n	80104ca <pass_route3+0x45a>
					pass[p-2] = -15;
 80104b4:	78bb      	ldrb	r3, [r7, #2]
 80104b6:	3b02      	subs	r3, #2
 80104b8:	4a27      	ldr	r2, [pc, #156]	; (8010558 <pass_route3+0x4e8>)
 80104ba:	21f1      	movs	r1, #241	; 0xf1
 80104bc:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80104be:	78bb      	ldrb	r3, [r7, #2]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	4a25      	ldr	r2, [pc, #148]	; (8010558 <pass_route3+0x4e8>)
 80104c4:	218e      	movs	r1, #142	; 0x8e
 80104c6:	54d1      	strb	r1, [r2, r3]
 80104c8:	e039      	b.n	801053e <pass_route3+0x4ce>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 80104ca:	78bb      	ldrb	r3, [r7, #2]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	4a22      	ldr	r2, [pc, #136]	; (8010558 <pass_route3+0x4e8>)
 80104d0:	56d3      	ldrsb	r3, [r2, r3]
 80104d2:	f113 0f02 	cmn.w	r3, #2
 80104d6:	d111      	bne.n	80104fc <pass_route3+0x48c>
 80104d8:	78bb      	ldrb	r3, [r7, #2]
 80104da:	3b02      	subs	r3, #2
 80104dc:	4a1e      	ldr	r2, [pc, #120]	; (8010558 <pass_route3+0x4e8>)
 80104de:	56d3      	ldrsb	r3, [r2, r3]
 80104e0:	f113 0f02 	cmn.w	r3, #2
 80104e4:	d10a      	bne.n	80104fc <pass_route3+0x48c>
					pass[p-2] = -16;
 80104e6:	78bb      	ldrb	r3, [r7, #2]
 80104e8:	3b02      	subs	r3, #2
 80104ea:	4a1b      	ldr	r2, [pc, #108]	; (8010558 <pass_route3+0x4e8>)
 80104ec:	21f0      	movs	r1, #240	; 0xf0
 80104ee:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80104f0:	78bb      	ldrb	r3, [r7, #2]
 80104f2:	3b01      	subs	r3, #1
 80104f4:	4a18      	ldr	r2, [pc, #96]	; (8010558 <pass_route3+0x4e8>)
 80104f6:	218e      	movs	r1, #142	; 0x8e
 80104f8:	54d1      	strb	r1, [r2, r3]
 80104fa:	e020      	b.n	801053e <pass_route3+0x4ce>
				}else if(pass[p-1] == -1){
 80104fc:	78bb      	ldrb	r3, [r7, #2]
 80104fe:	3b01      	subs	r3, #1
 8010500:	4a15      	ldr	r2, [pc, #84]	; (8010558 <pass_route3+0x4e8>)
 8010502:	56d3      	ldrsb	r3, [r2, r3]
 8010504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010508:	d109      	bne.n	801051e <pass_route3+0x4ae>
					pass[p-1] = -13;
 801050a:	78bb      	ldrb	r3, [r7, #2]
 801050c:	3b01      	subs	r3, #1
 801050e:	4a12      	ldr	r2, [pc, #72]	; (8010558 <pass_route3+0x4e8>)
 8010510:	21f3      	movs	r1, #243	; 0xf3
 8010512:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8010514:	78bb      	ldrb	r3, [r7, #2]
 8010516:	4a10      	ldr	r2, [pc, #64]	; (8010558 <pass_route3+0x4e8>)
 8010518:	218e      	movs	r1, #142	; 0x8e
 801051a:	54d1      	strb	r1, [r2, r3]
 801051c:	e00f      	b.n	801053e <pass_route3+0x4ce>
				}else if(pass[p-1] == -2){
 801051e:	78bb      	ldrb	r3, [r7, #2]
 8010520:	3b01      	subs	r3, #1
 8010522:	4a0d      	ldr	r2, [pc, #52]	; (8010558 <pass_route3+0x4e8>)
 8010524:	56d3      	ldrsb	r3, [r2, r3]
 8010526:	f113 0f02 	cmn.w	r3, #2
 801052a:	d108      	bne.n	801053e <pass_route3+0x4ce>
					pass[p-1] = -14;
 801052c:	78bb      	ldrb	r3, [r7, #2]
 801052e:	3b01      	subs	r3, #1
 8010530:	4a09      	ldr	r2, [pc, #36]	; (8010558 <pass_route3+0x4e8>)
 8010532:	21f2      	movs	r1, #242	; 0xf2
 8010534:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8010536:	78bb      	ldrb	r3, [r7, #2]
 8010538:	4a07      	ldr	r2, [pc, #28]	; (8010558 <pass_route3+0x4e8>)
 801053a:	218e      	movs	r1, #142	; 0x8e
 801053c:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 801053e:	78bb      	ldrb	r3, [r7, #2]
 8010540:	4a05      	ldr	r2, [pc, #20]	; (8010558 <pass_route3+0x4e8>)
 8010542:	218e      	movs	r1, #142	; 0x8e
 8010544:	54d1      	strb	r1, [r2, r3]
			i++;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	3301      	adds	r3, #1
 801054a:	607b      	str	r3, [r7, #4]
 801054c:	e09c      	b.n	8010688 <pass_route3+0x618>
 801054e:	bf00      	nop
 8010550:	20000b28 	.word	0x20000b28
 8010554:	20000c98 	.word	0x20000c98
 8010558:	20000388 	.word	0x20000388
 801055c:	200012e8 	.word	0x200012e8
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 8010560:	4b51      	ldr	r3, [pc, #324]	; (80106a8 <pass_route3+0x638>)
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d118      	bne.n	801059a <pass_route3+0x52a>
 8010568:	4a50      	ldr	r2, [pc, #320]	; (80106ac <pass_route3+0x63c>)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4413      	add	r3, r2
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b44      	cmp	r3, #68	; 0x44
 8010572:	d112      	bne.n	801059a <pass_route3+0x52a>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	3301      	adds	r3, #1
 8010578:	4a4c      	ldr	r2, [pc, #304]	; (80106ac <pass_route3+0x63c>)
 801057a:	5cd3      	ldrb	r3, [r2, r3]
 801057c:	2b11      	cmp	r3, #17
 801057e:	d10c      	bne.n	801059a <pass_route3+0x52a>
			s_flag = 0;
 8010580:	2300      	movs	r3, #0
 8010582:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8010584:	78bb      	ldrb	r3, [r7, #2]
 8010586:	4a4a      	ldr	r2, [pc, #296]	; (80106b0 <pass_route3+0x640>)
 8010588:	2140      	movs	r1, #64	; 0x40
 801058a:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 801058c:	4b46      	ldr	r3, [pc, #280]	; (80106a8 <pass_route3+0x638>)
 801058e:	2201      	movs	r2, #1
 8010590:	701a      	strb	r2, [r3, #0]
			i++;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	3301      	adds	r3, #1
 8010596:	607b      	str	r3, [r7, #4]
 8010598:	e076      	b.n	8010688 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 801059a:	4b43      	ldr	r3, [pc, #268]	; (80106a8 <pass_route3+0x638>)
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d118      	bne.n	80105d4 <pass_route3+0x564>
 80105a2:	4a42      	ldr	r2, [pc, #264]	; (80106ac <pass_route3+0x63c>)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	2b11      	cmp	r3, #17
 80105ac:	d112      	bne.n	80105d4 <pass_route3+0x564>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	3301      	adds	r3, #1
 80105b2:	4a3e      	ldr	r2, [pc, #248]	; (80106ac <pass_route3+0x63c>)
 80105b4:	5cd3      	ldrb	r3, [r2, r3]
 80105b6:	2b44      	cmp	r3, #68	; 0x44
 80105b8:	d10c      	bne.n	80105d4 <pass_route3+0x564>
			s_flag = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 80105be:	78bb      	ldrb	r3, [r7, #2]
 80105c0:	4a3b      	ldr	r2, [pc, #236]	; (80106b0 <pass_route3+0x640>)
 80105c2:	2140      	movs	r1, #64	; 0x40
 80105c4:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 80105c6:	4b38      	ldr	r3, [pc, #224]	; (80106a8 <pass_route3+0x638>)
 80105c8:	2201      	movs	r2, #1
 80105ca:	701a      	strb	r2, [r3, #0]
			i++;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	3301      	adds	r3, #1
 80105d0:	607b      	str	r3, [r7, #4]
 80105d2:	e059      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x44){
 80105d4:	4a35      	ldr	r2, [pc, #212]	; (80106ac <pass_route3+0x63c>)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4413      	add	r3, r2
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b44      	cmp	r3, #68	; 0x44
 80105de:	d107      	bne.n	80105f0 <pass_route3+0x580>
			pass[p] = -1;							//a右スラローム
 80105e0:	78bb      	ldrb	r3, [r7, #2]
 80105e2:	4a33      	ldr	r2, [pc, #204]	; (80106b0 <pass_route3+0x640>)
 80105e4:	21ff      	movs	r1, #255	; 0xff
 80105e6:	54d1      	strb	r1, [r2, r3]
			i++;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3301      	adds	r3, #1
 80105ec:	607b      	str	r3, [r7, #4]
 80105ee:	e04b      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x11){
 80105f0:	4a2e      	ldr	r2, [pc, #184]	; (80106ac <pass_route3+0x63c>)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4413      	add	r3, r2
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b11      	cmp	r3, #17
 80105fa:	d107      	bne.n	801060c <pass_route3+0x59c>
			pass[p] = -2;							//a左スラローム
 80105fc:	78bb      	ldrb	r3, [r7, #2]
 80105fe:	4a2c      	ldr	r2, [pc, #176]	; (80106b0 <pass_route3+0x640>)
 8010600:	21fe      	movs	r1, #254	; 0xfe
 8010602:	54d1      	strb	r1, [r2, r3]
			i++;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	3301      	adds	r3, #1
 8010608:	607b      	str	r3, [r7, #4]
 801060a:	e03d      	b.n	8010688 <pass_route3+0x618>
		}else if(route[i] == 0x77){
 801060c:	4a27      	ldr	r2, [pc, #156]	; (80106ac <pass_route3+0x63c>)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4413      	add	r3, r2
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	2b77      	cmp	r3, #119	; 0x77
 8010616:	d137      	bne.n	8010688 <pass_route3+0x618>
			if(s_flag){
 8010618:	78fb      	ldrb	r3, [r7, #3]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d012      	beq.n	8010644 <pass_route3+0x5d4>
				pass[p-1]++;						//aスラローム前半直線追加
 801061e:	78bb      	ldrb	r3, [r7, #2]
 8010620:	3b01      	subs	r3, #1
 8010622:	4a23      	ldr	r2, [pc, #140]	; (80106b0 <pass_route3+0x640>)
 8010624:	56d2      	ldrsb	r2, [r2, r3]
 8010626:	b2d2      	uxtb	r2, r2
 8010628:	3201      	adds	r2, #1
 801062a:	b2d2      	uxtb	r2, r2
 801062c:	b251      	sxtb	r1, r2
 801062e:	4a20      	ldr	r2, [pc, #128]	; (80106b0 <pass_route3+0x640>)
 8010630:	54d1      	strb	r1, [r2, r3]
				p--;
 8010632:	78bb      	ldrb	r3, [r7, #2]
 8010634:	3b01      	subs	r3, #1
 8010636:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	70fb      	strb	r3, [r7, #3]
				i++;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	3301      	adds	r3, #1
 8010640:	607b      	str	r3, [r7, #4]
 8010642:	e021      	b.n	8010688 <pass_route3+0x618>
			}else{
				s++;
 8010644:	787b      	ldrb	r3, [r7, #1]
 8010646:	3301      	adds	r3, #1
 8010648:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 801064a:	78bb      	ldrb	r3, [r7, #2]
 801064c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010650:	4a17      	ldr	r2, [pc, #92]	; (80106b0 <pass_route3+0x640>)
 8010652:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8010654:	e00c      	b.n	8010670 <pass_route3+0x600>
					s_flag = 1;
 8010656:	2301      	movs	r3, #1
 8010658:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 801065a:	78bb      	ldrb	r3, [r7, #2]
 801065c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010660:	4a13      	ldr	r2, [pc, #76]	; (80106b0 <pass_route3+0x640>)
 8010662:	54d1      	strb	r1, [r2, r3]
					i++;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	3301      	adds	r3, #1
 8010668:	607b      	str	r3, [r7, #4]
					s++;
 801066a:	787b      	ldrb	r3, [r7, #1]
 801066c:	3301      	adds	r3, #1
 801066e:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3301      	adds	r3, #1
 8010674:	4a0d      	ldr	r2, [pc, #52]	; (80106ac <pass_route3+0x63c>)
 8010676:	5cd3      	ldrb	r3, [r2, r3]
 8010678:	2b77      	cmp	r3, #119	; 0x77
 801067a:	d0ec      	beq.n	8010656 <pass_route3+0x5e6>
				}
				if(!s_flag){
 801067c:	78fb      	ldrb	r3, [r7, #3]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d102      	bne.n	8010688 <pass_route3+0x618>
					i++;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	3301      	adds	r3, #1
 8010686:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8010688:	78bb      	ldrb	r3, [r7, #2]
 801068a:	3301      	adds	r3, #1
 801068c:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	3b01      	subs	r3, #1
 8010692:	4a06      	ldr	r2, [pc, #24]	; (80106ac <pass_route3+0x63c>)
 8010694:	5cd3      	ldrb	r3, [r2, r3]
 8010696:	2bff      	cmp	r3, #255	; 0xff
 8010698:	f47f ad07 	bne.w	80100aa <pass_route3+0x3a>
	}
}
 801069c:	bf00      	nop
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	20000b28 	.word	0x20000b28
 80106ac:	20000c98 	.word	0x20000c98
 80106b0:	20000388 	.word	0x20000388

080106b4 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 80106ba:	4818      	ldr	r0, [pc, #96]	; (801071c <store_map_in_eeprom+0x68>)
 80106bc:	f000 ff28 	bl	8011510 <puts>
	eeprom_enable_write();
 80106c0:	f7fa ffa0 	bl	800b604 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 80106c4:	4816      	ldr	r0, [pc, #88]	; (8010720 <store_map_in_eeprom+0x6c>)
 80106c6:	f000 ff23 	bl	8011510 <puts>
	int i;
	for(i = 0; i < 16; i++){
 80106ca:	2300      	movs	r3, #0
 80106cc:	607b      	str	r3, [r7, #4]
 80106ce:	e01b      	b.n	8010708 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 80106d0:	2300      	movs	r3, #0
 80106d2:	603b      	str	r3, [r7, #0]
 80106d4:	e012      	b.n	80106fc <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	011a      	lsls	r2, r3, #4
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	4413      	add	r3, r2
 80106de:	4618      	mov	r0, r3
 80106e0:	4a10      	ldr	r2, [pc, #64]	; (8010724 <store_map_in_eeprom+0x70>)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	011b      	lsls	r3, r3, #4
 80106e6:	441a      	add	r2, r3
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	4413      	add	r3, r2
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	4619      	mov	r1, r3
 80106f2:	f7fa ffb2 	bl	800b65a <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	3301      	adds	r3, #1
 80106fa:	603b      	str	r3, [r7, #0]
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	2b0f      	cmp	r3, #15
 8010700:	dde9      	ble.n	80106d6 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	3301      	adds	r3, #1
 8010706:	607b      	str	r3, [r7, #4]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b0f      	cmp	r3, #15
 801070c:	dde0      	ble.n	80106d0 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 801070e:	f7fa ff9d 	bl	800b64c <eeprom_disable_write>
}
 8010712:	bf00      	nop
 8010714:	3708      	adds	r7, #8
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	08012ba8 	.word	0x08012ba8
 8010720:	08012bbc 	.word	0x08012bbc
 8010724:	200001e4 	.word	0x200001e4

08010728 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 801072e:	2300      	movs	r3, #0
 8010730:	607b      	str	r3, [r7, #4]
 8010732:	e01c      	b.n	801076e <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8010734:	2300      	movs	r3, #0
 8010736:	603b      	str	r3, [r7, #0]
 8010738:	e013      	b.n	8010762 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	011a      	lsls	r2, r3, #4
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	4413      	add	r3, r2
 8010742:	4618      	mov	r0, r3
 8010744:	f7fa ffa6 	bl	800b694 <eeprom_read_halfword>
 8010748:	4603      	mov	r3, r0
 801074a:	b2d9      	uxtb	r1, r3
 801074c:	4a0b      	ldr	r2, [pc, #44]	; (801077c <load_map_from_eeprom+0x54>)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	011b      	lsls	r3, r3, #4
 8010752:	441a      	add	r2, r3
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	4413      	add	r3, r2
 8010758:	460a      	mov	r2, r1
 801075a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	3301      	adds	r3, #1
 8010760:	603b      	str	r3, [r7, #0]
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2b0f      	cmp	r3, #15
 8010766:	dde8      	ble.n	801073a <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3301      	adds	r3, #1
 801076c:	607b      	str	r3, [r7, #4]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b0f      	cmp	r3, #15
 8010772:	dddf      	ble.n	8010734 <load_map_from_eeprom+0xc>
		}
	}
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	200001e4 	.word	0x200001e4

08010780 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8010780:	b480      	push	{r7}
 8010782:	af00      	add	r7, sp, #0
	tp = 0;
 8010784:	4b0e      	ldr	r3, [pc, #56]	; (80107c0 <sensor_init+0x40>)
 8010786:	2200      	movs	r2, #0
 8010788:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 801078a:	4b0e      	ldr	r3, [pc, #56]	; (80107c4 <sensor_init+0x44>)
 801078c:	2200      	movs	r2, #0
 801078e:	601a      	str	r2, [r3, #0]
 8010790:	4b0c      	ldr	r3, [pc, #48]	; (80107c4 <sensor_init+0x44>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a0c      	ldr	r2, [pc, #48]	; (80107c8 <sensor_init+0x48>)
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	4b0b      	ldr	r3, [pc, #44]	; (80107c8 <sensor_init+0x48>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4a0b      	ldr	r2, [pc, #44]	; (80107cc <sensor_init+0x4c>)
 801079e:	6013      	str	r3, [r2, #0]
 80107a0:	4b0a      	ldr	r3, [pc, #40]	; (80107cc <sensor_init+0x4c>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4a0a      	ldr	r2, [pc, #40]	; (80107d0 <sensor_init+0x50>)
 80107a6:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 80107a8:	4b0a      	ldr	r3, [pc, #40]	; (80107d4 <sensor_init+0x54>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	801a      	strh	r2, [r3, #0]
 80107ae:	4b09      	ldr	r3, [pc, #36]	; (80107d4 <sensor_init+0x54>)
 80107b0:	881a      	ldrh	r2, [r3, #0]
 80107b2:	4b09      	ldr	r3, [pc, #36]	; (80107d8 <sensor_init+0x58>)
 80107b4:	801a      	strh	r2, [r3, #0]
}
 80107b6:	bf00      	nop
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	20000fbf 	.word	0x20000fbf
 80107c4:	20000d98 	.word	0x20000d98
 80107c8:	20000c44 	.word	0x20000c44
 80107cc:	20000fa4 	.word	0x20000fa4
 80107d0:	20000b3c 	.word	0x20000b3c
 80107d4:	200002f8 	.word	0x200002f8
 80107d8:	20000384 	.word	0x20000384

080107dc <get_base>:


uint8_t get_base(){
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 80107e2:	2301      	movs	r3, #1
 80107e4:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 80107e6:	4b08      	ldr	r3, [pc, #32]	; (8010808 <get_base+0x2c>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	4b07      	ldr	r3, [pc, #28]	; (801080c <get_base+0x30>)
 80107ee:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 80107f0:	4b07      	ldr	r3, [pc, #28]	; (8010810 <get_base+0x34>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	4b07      	ldr	r3, [pc, #28]	; (8010814 <get_base+0x38>)
 80107f8:	801a      	strh	r2, [r3, #0]

	return res;											//
 80107fa:	79fb      	ldrb	r3, [r7, #7]
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	370c      	adds	r7, #12
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr
 8010808:	20000b3c 	.word	0x20000b3c
 801080c:	20000384 	.word	0x20000384
 8010810:	20000fa4 	.word	0x20000fa4
 8010814:	200002f8 	.word	0x200002f8

08010818 <get_wall_info>:


void get_wall_info(){
 8010818:	b480      	push	{r7}
 801081a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 801081c:	4b16      	ldr	r3, [pc, #88]	; (8010878 <get_wall_info+0x60>)
 801081e:	2200      	movs	r2, #0
 8010820:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8010822:	4b16      	ldr	r3, [pc, #88]	; (801087c <get_wall_info+0x64>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	2b5a      	cmp	r3, #90	; 0x5a
 8010828:	d803      	bhi.n	8010832 <get_wall_info+0x1a>
 801082a:	4b15      	ldr	r3, [pc, #84]	; (8010880 <get_wall_info+0x68>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2bc8      	cmp	r3, #200	; 0xc8
 8010830:	d906      	bls.n	8010840 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 8010832:	4b11      	ldr	r3, [pc, #68]	; (8010878 <get_wall_info+0x60>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f063 0377 	orn	r3, r3, #119	; 0x77
 801083a:	b2da      	uxtb	r2, r3
 801083c:	4b0e      	ldr	r3, [pc, #56]	; (8010878 <get_wall_info+0x60>)
 801083e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8010840:	4b10      	ldr	r3, [pc, #64]	; (8010884 <get_wall_info+0x6c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b5a      	cmp	r3, #90	; 0x5a
 8010846:	d906      	bls.n	8010856 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8010848:	4b0b      	ldr	r3, [pc, #44]	; (8010878 <get_wall_info+0x60>)
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8010850:	b2da      	uxtb	r2, r3
 8010852:	4b09      	ldr	r3, [pc, #36]	; (8010878 <get_wall_info+0x60>)
 8010854:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8010856:	4b0c      	ldr	r3, [pc, #48]	; (8010888 <get_wall_info+0x70>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b5a      	cmp	r3, #90	; 0x5a
 801085c:	d906      	bls.n	801086c <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 801085e:	4b06      	ldr	r3, [pc, #24]	; (8010878 <get_wall_info+0x60>)
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	f043 0311 	orr.w	r3, r3, #17
 8010866:	b2da      	uxtb	r2, r3
 8010868:	4b03      	ldr	r3, [pc, #12]	; (8010878 <get_wall_info+0x60>)
 801086a:	701a      	strb	r2, [r3, #0]
	}
}
 801086c:	bf00      	nop
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr
 8010876:	bf00      	nop
 8010878:	20000300 	.word	0x20000300
 801087c:	20000c44 	.word	0x20000c44
 8010880:	20000d98 	.word	0x20000d98
 8010884:	20000fa4 	.word	0x20000fa4
 8010888:	20000b3c 	.word	0x20000b3c

0801088c <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	71fb      	strb	r3, [r7, #7]
 8010896:	460b      	mov	r3, r1
 8010898:	71bb      	strb	r3, [r7, #6]
 801089a:	4613      	mov	r3, r2
 801089c:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 801089e:	79fb      	ldrb	r3, [r7, #7]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d005      	beq.n	80108b0 <led_write+0x24>
 80108a4:	2201      	movs	r2, #1
 80108a6:	2110      	movs	r1, #16
 80108a8:	4814      	ldr	r0, [pc, #80]	; (80108fc <led_write+0x70>)
 80108aa:	f7f1 fd2b 	bl	8002304 <HAL_GPIO_WritePin>
 80108ae:	e004      	b.n	80108ba <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80108b0:	2200      	movs	r2, #0
 80108b2:	2110      	movs	r1, #16
 80108b4:	4811      	ldr	r0, [pc, #68]	; (80108fc <led_write+0x70>)
 80108b6:	f7f1 fd25 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80108ba:	79bb      	ldrb	r3, [r7, #6]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d005      	beq.n	80108cc <led_write+0x40>
 80108c0:	2201      	movs	r2, #1
 80108c2:	2140      	movs	r1, #64	; 0x40
 80108c4:	480d      	ldr	r0, [pc, #52]	; (80108fc <led_write+0x70>)
 80108c6:	f7f1 fd1d 	bl	8002304 <HAL_GPIO_WritePin>
 80108ca:	e004      	b.n	80108d6 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80108cc:	2200      	movs	r2, #0
 80108ce:	2140      	movs	r1, #64	; 0x40
 80108d0:	480a      	ldr	r0, [pc, #40]	; (80108fc <led_write+0x70>)
 80108d2:	f7f1 fd17 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80108d6:	797b      	ldrb	r3, [r7, #5]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d005      	beq.n	80108e8 <led_write+0x5c>
 80108dc:	2201      	movs	r2, #1
 80108de:	2180      	movs	r1, #128	; 0x80
 80108e0:	4806      	ldr	r0, [pc, #24]	; (80108fc <led_write+0x70>)
 80108e2:	f7f1 fd0f 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 80108e6:	e004      	b.n	80108f2 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80108e8:	2200      	movs	r2, #0
 80108ea:	2180      	movs	r1, #128	; 0x80
 80108ec:	4803      	ldr	r0, [pc, #12]	; (80108fc <led_write+0x70>)
 80108ee:	f7f1 fd09 	bl	8002304 <HAL_GPIO_WritePin>
}
 80108f2:	bf00      	nop
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	40020000 	.word	0x40020000

08010900 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d112      	bne.n	8010936 <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8010910:	2201      	movs	r2, #1
 8010912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010916:	4856      	ldr	r0, [pc, #344]	; (8010a70 <full_led_write+0x170>)
 8010918:	f7f1 fcf4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801091c:	2201      	movs	r2, #1
 801091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010922:	4853      	ldr	r0, [pc, #332]	; (8010a70 <full_led_write+0x170>)
 8010924:	f7f1 fcee 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8010928:	2201      	movs	r2, #1
 801092a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801092e:	4851      	ldr	r0, [pc, #324]	; (8010a74 <full_led_write+0x174>)
 8010930:	f7f1 fce8 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8010934:	e098      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 1){
 8010936:	79fb      	ldrb	r3, [r7, #7]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d112      	bne.n	8010962 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 801093c:	2201      	movs	r2, #1
 801093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010942:	484b      	ldr	r0, [pc, #300]	; (8010a70 <full_led_write+0x170>)
 8010944:	f7f1 fcde 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8010948:	2201      	movs	r2, #1
 801094a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801094e:	4848      	ldr	r0, [pc, #288]	; (8010a70 <full_led_write+0x170>)
 8010950:	f7f1 fcd8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010954:	2200      	movs	r2, #0
 8010956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801095a:	4846      	ldr	r0, [pc, #280]	; (8010a74 <full_led_write+0x174>)
 801095c:	f7f1 fcd2 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010960:	e082      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 2){
 8010962:	79fb      	ldrb	r3, [r7, #7]
 8010964:	2b02      	cmp	r3, #2
 8010966:	d112      	bne.n	801098e <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8010968:	2201      	movs	r2, #1
 801096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801096e:	4840      	ldr	r0, [pc, #256]	; (8010a70 <full_led_write+0x170>)
 8010970:	f7f1 fcc8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010974:	2200      	movs	r2, #0
 8010976:	f44f 7100 	mov.w	r1, #512	; 0x200
 801097a:	483d      	ldr	r0, [pc, #244]	; (8010a70 <full_led_write+0x170>)
 801097c:	f7f1 fcc2 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8010980:	2201      	movs	r2, #1
 8010982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010986:	483b      	ldr	r0, [pc, #236]	; (8010a74 <full_led_write+0x174>)
 8010988:	f7f1 fcbc 	bl	8002304 <HAL_GPIO_WritePin>
}
 801098c:	e06c      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 3){
 801098e:	79fb      	ldrb	r3, [r7, #7]
 8010990:	2b03      	cmp	r3, #3
 8010992:	d112      	bne.n	80109ba <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8010994:	2200      	movs	r2, #0
 8010996:	f44f 7180 	mov.w	r1, #256	; 0x100
 801099a:	4835      	ldr	r0, [pc, #212]	; (8010a70 <full_led_write+0x170>)
 801099c:	f7f1 fcb2 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80109a0:	2201      	movs	r2, #1
 80109a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109a6:	4832      	ldr	r0, [pc, #200]	; (8010a70 <full_led_write+0x170>)
 80109a8:	f7f1 fcac 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80109ac:	2201      	movs	r2, #1
 80109ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80109b2:	4830      	ldr	r0, [pc, #192]	; (8010a74 <full_led_write+0x174>)
 80109b4:	f7f1 fca6 	bl	8002304 <HAL_GPIO_WritePin>
}
 80109b8:	e056      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 4){
 80109ba:	79fb      	ldrb	r3, [r7, #7]
 80109bc:	2b04      	cmp	r3, #4
 80109be:	d112      	bne.n	80109e6 <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80109c0:	2200      	movs	r2, #0
 80109c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80109c6:	482a      	ldr	r0, [pc, #168]	; (8010a70 <full_led_write+0x170>)
 80109c8:	f7f1 fc9c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80109cc:	2200      	movs	r2, #0
 80109ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109d2:	4827      	ldr	r0, [pc, #156]	; (8010a70 <full_led_write+0x170>)
 80109d4:	f7f1 fc96 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80109d8:	2201      	movs	r2, #1
 80109da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80109de:	4825      	ldr	r0, [pc, #148]	; (8010a74 <full_led_write+0x174>)
 80109e0:	f7f1 fc90 	bl	8002304 <HAL_GPIO_WritePin>
}
 80109e4:	e040      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 5){
 80109e6:	79fb      	ldrb	r3, [r7, #7]
 80109e8:	2b05      	cmp	r3, #5
 80109ea:	d112      	bne.n	8010a12 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80109ec:	2200      	movs	r2, #0
 80109ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80109f2:	481f      	ldr	r0, [pc, #124]	; (8010a70 <full_led_write+0x170>)
 80109f4:	f7f1 fc86 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80109f8:	2201      	movs	r2, #1
 80109fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109fe:	481c      	ldr	r0, [pc, #112]	; (8010a70 <full_led_write+0x170>)
 8010a00:	f7f1 fc80 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010a04:	2200      	movs	r2, #0
 8010a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010a0a:	481a      	ldr	r0, [pc, #104]	; (8010a74 <full_led_write+0x174>)
 8010a0c:	f7f1 fc7a 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010a10:	e02a      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 6){
 8010a12:	79fb      	ldrb	r3, [r7, #7]
 8010a14:	2b06      	cmp	r3, #6
 8010a16:	d112      	bne.n	8010a3e <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8010a18:	2201      	movs	r2, #1
 8010a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a1e:	4814      	ldr	r0, [pc, #80]	; (8010a70 <full_led_write+0x170>)
 8010a20:	f7f1 fc70 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010a24:	2200      	movs	r2, #0
 8010a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a2a:	4811      	ldr	r0, [pc, #68]	; (8010a70 <full_led_write+0x170>)
 8010a2c:	f7f1 fc6a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010a30:	2200      	movs	r2, #0
 8010a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010a36:	480f      	ldr	r0, [pc, #60]	; (8010a74 <full_led_write+0x174>)
 8010a38:	f7f1 fc64 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010a3c:	e014      	b.n	8010a68 <full_led_write+0x168>
	else if(fulled == 7){
 8010a3e:	79fb      	ldrb	r3, [r7, #7]
 8010a40:	2b07      	cmp	r3, #7
 8010a42:	d111      	bne.n	8010a68 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8010a44:	2200      	movs	r2, #0
 8010a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a4a:	4809      	ldr	r0, [pc, #36]	; (8010a70 <full_led_write+0x170>)
 8010a4c:	f7f1 fc5a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010a50:	2200      	movs	r2, #0
 8010a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a56:	4806      	ldr	r0, [pc, #24]	; (8010a70 <full_led_write+0x170>)
 8010a58:	f7f1 fc54 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010a62:	4804      	ldr	r0, [pc, #16]	; (8010a74 <full_led_write+0x174>)
 8010a64:	f7f1 fc4e 	bl	8002304 <HAL_GPIO_WritePin>
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	40020400 	.word	0x40020400
 8010a74:	40020800 	.word	0x40020800

08010a78 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08c      	sub	sp, #48	; 0x30
 8010a7c:	af02      	add	r7, sp, #8

	int mode = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8010a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a84:	4881      	ldr	r0, [pc, #516]	; (8010c8c <sensor_test+0x214>)
 8010a86:	f000 fccf 	bl	8011428 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	f003 0301 	and.w	r3, r3, #1
 8010a92:	b2d8      	uxtb	r0, r3
 8010a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	f003 0302 	and.w	r3, r3, #2
 8010a9c:	b2d9      	uxtb	r1, r3
 8010a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	f003 0304 	and.w	r3, r3, #4
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	f7ff feef 	bl	801088c <led_write>
		  if(dist_r >= 20){
 8010aae:	4b78      	ldr	r3, [pc, #480]	; (8010c90 <sensor_test+0x218>)
 8010ab0:	edd3 7a00 	vldr	s15, [r3]
 8010ab4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8010ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac0:	db0f      	blt.n	8010ae2 <sensor_test+0x6a>
			  mode++;
 8010ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8010ac8:	4b71      	ldr	r3, [pc, #452]	; (8010c90 <sensor_test+0x218>)
 8010aca:	f04f 0200 	mov.w	r2, #0
 8010ace:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	2b07      	cmp	r3, #7
 8010ad4:	dd01      	ble.n	8010ada <sensor_test+0x62>
				  mode = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8010ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010adc:	486b      	ldr	r0, [pc, #428]	; (8010c8c <sensor_test+0x214>)
 8010ade:	f000 fca3 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8010ae2:	4b6b      	ldr	r3, [pc, #428]	; (8010c90 <sensor_test+0x218>)
 8010ae4:	edd3 7a00 	vldr	s15, [r3]
 8010ae8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8010aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af4:	d80f      	bhi.n	8010b16 <sensor_test+0x9e>
			  mode--;
 8010af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af8:	3b01      	subs	r3, #1
 8010afa:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8010afc:	4b64      	ldr	r3, [pc, #400]	; (8010c90 <sensor_test+0x218>)
 8010afe:	f04f 0200 	mov.w	r2, #0
 8010b02:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	da01      	bge.n	8010b0e <sensor_test+0x96>
				  mode = 7;
 8010b0a:	2307      	movs	r3, #7
 8010b0c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8010b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b10:	485e      	ldr	r0, [pc, #376]	; (8010c8c <sensor_test+0x214>)
 8010b12:	f000 fc89 	bl	8011428 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8010b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010b1a:	485e      	ldr	r0, [pc, #376]	; (8010c94 <sensor_test+0x21c>)
 8010b1c:	f7f1 fbda 	bl	80022d4 <HAL_GPIO_ReadPin>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d1b1      	bne.n	8010a8a <sensor_test+0x12>
			  HAL_Delay(50);
 8010b26:	2032      	movs	r0, #50	; 0x32
 8010b28:	f7f0 fa78 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8010b2c:	bf00      	nop
 8010b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010b32:	4858      	ldr	r0, [pc, #352]	; (8010c94 <sensor_test+0x21c>)
 8010b34:	f7f1 fbce 	bl	80022d4 <HAL_GPIO_ReadPin>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0f7      	beq.n	8010b2e <sensor_test+0xb6>

			  drive_ready();
 8010b3e:	f7f4 f899 	bl	8004c74 <drive_ready>

			  switch(mode){
 8010b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b44:	2b07      	cmp	r3, #7
 8010b46:	d8a0      	bhi.n	8010a8a <sensor_test+0x12>
 8010b48:	a201      	add	r2, pc, #4	; (adr r2, 8010b50 <sensor_test+0xd8>)
 8010b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b4e:	bf00      	nop
 8010b50:	08010b71 	.word	0x08010b71
 8010b54:	08010b77 	.word	0x08010b77
 8010b58:	08010bc9 	.word	0x08010bc9
 8010b5c:	08010a8b 	.word	0x08010a8b
 8010b60:	08010a8b 	.word	0x08010a8b
 8010b64:	08010a8b 	.word	0x08010a8b
 8010b68:	08010a8b 	.word	0x08010a8b
 8010b6c:	08010a8b 	.word	0x08010a8b
				case 0:
					get_base();
 8010b70:	f7ff fe34 	bl	80107dc <get_base>
					break;
 8010b74:	e089      	b.n	8010c8a <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 8010b76:	4848      	ldr	r0, [pc, #288]	; (8010c98 <sensor_test+0x220>)
 8010b78:	f000 fcca 	bl	8011510 <puts>
			  		  while(1){
			  			  get_wall_info();
 8010b7c:	f7ff fe4c 	bl	8010818 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8010b80:	4b46      	ldr	r3, [pc, #280]	; (8010c9c <sensor_test+0x224>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	f003 0311 	and.w	r3, r3, #17
 8010b88:	b2d8      	uxtb	r0, r3
 8010b8a:	4b44      	ldr	r3, [pc, #272]	; (8010c9c <sensor_test+0x224>)
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010b92:	b2d9      	uxtb	r1, r3
 8010b94:	4b41      	ldr	r3, [pc, #260]	; (8010c9c <sensor_test+0x224>)
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f7ff fe74 	bl	801088c <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8010ba4:	4b3e      	ldr	r3, [pc, #248]	; (8010ca0 <sensor_test+0x228>)
 8010ba6:	6819      	ldr	r1, [r3, #0]
 8010ba8:	4b3e      	ldr	r3, [pc, #248]	; (8010ca4 <sensor_test+0x22c>)
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	4b3e      	ldr	r3, [pc, #248]	; (8010ca8 <sensor_test+0x230>)
 8010bae:	6818      	ldr	r0, [r3, #0]
 8010bb0:	4b3e      	ldr	r3, [pc, #248]	; (8010cac <sensor_test+0x234>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	483d      	ldr	r0, [pc, #244]	; (8010cb0 <sensor_test+0x238>)
 8010bba:	f000 fc35 	bl	8011428 <iprintf>
			  			  HAL_Delay(333);
 8010bbe:	f240 104d 	movw	r0, #333	; 0x14d
 8010bc2:	f7f0 fa2b 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8010bc6:	e7d9      	b.n	8010b7c <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8010bc8:	483a      	ldr	r0, [pc, #232]	; (8010cb4 <sensor_test+0x23c>)
 8010bca:	f000 fca1 	bl	8011510 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8010bce:	f7fa fe09 	bl	800b7e4 <accel_read_x>
 8010bd2:	eef0 7a40 	vmov.f32	s15, s0
 8010bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bda:	ee17 3a90 	vmov	r3, s15
 8010bde:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8010be0:	f7fa fe26 	bl	800b830 <accel_read_y>
 8010be4:	eef0 7a40 	vmov.f32	s15, s0
 8010be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bec:	ee17 3a90 	vmov	r3, s15
 8010bf0:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8010bf2:	f7fa fe43 	bl	800b87c <accel_read_z>
 8010bf6:	eef0 7a40 	vmov.f32	s15, s0
 8010bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bfe:	ee17 3a90 	vmov	r3, s15
 8010c02:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8010c04:	f7fa fe64 	bl	800b8d0 <gyro_read_x>
 8010c08:	eef0 7a40 	vmov.f32	s15, s0
 8010c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c10:	ee17 3a90 	vmov	r3, s15
 8010c14:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8010c16:	f7fa fe97 	bl	800b948 <gyro_read_y>
 8010c1a:	eef0 7a40 	vmov.f32	s15, s0
 8010c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c22:	ee17 3a90 	vmov	r3, s15
 8010c26:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8010c28:	f7fa feca 	bl	800b9c0 <gyro_read_z>
 8010c2c:	eef0 7a40 	vmov.f32	s15, s0
 8010c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c34:	ee17 3a90 	vmov	r3, s15
 8010c38:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8010c3a:	4b1f      	ldr	r3, [pc, #124]	; (8010cb8 <sensor_test+0x240>)
 8010c3c:	edd3 7a00 	vldr	s15, [r3]
 8010c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c44:	ee17 3a90 	vmov	r3, s15
 8010c48:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 8010c4a:	4b1c      	ldr	r3, [pc, #112]	; (8010cbc <sensor_test+0x244>)
 8010c4c:	edd3 7a00 	vldr	s15, [r3]
 8010c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c54:	ee17 3a90 	vmov	r3, s15
 8010c58:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 8010c5a:	4b19      	ldr	r3, [pc, #100]	; (8010cc0 <sensor_test+0x248>)
 8010c5c:	edd3 7a00 	vldr	s15, [r3]
 8010c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c64:	ee17 3a90 	vmov	r3, s15
 8010c68:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	693a      	ldr	r2, [r7, #16]
 8010c6e:	6979      	ldr	r1, [r7, #20]
 8010c70:	4814      	ldr	r0, [pc, #80]	; (8010cc4 <sensor_test+0x24c>)
 8010c72:	f000 fbd9 	bl	8011428 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	68b9      	ldr	r1, [r7, #8]
 8010c7c:	4812      	ldr	r0, [pc, #72]	; (8010cc8 <sensor_test+0x250>)
 8010c7e:	f000 fbd3 	bl	8011428 <iprintf>
			  			  HAL_Delay(111);
 8010c82:	206f      	movs	r0, #111	; 0x6f
 8010c84:	f7f0 f9ca 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 8010c88:	e7a1      	b.n	8010bce <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8010c8a:	e6fe      	b.n	8010a8a <sensor_test+0x12>
 8010c8c:	08012bd4 	.word	0x08012bd4
 8010c90:	20000b2c 	.word	0x20000b2c
 8010c94:	40020000 	.word	0x40020000
 8010c98:	08012be0 	.word	0x08012be0
 8010c9c:	20000300 	.word	0x20000300
 8010ca0:	20000b3c 	.word	0x20000b3c
 8010ca4:	20000d98 	.word	0x20000d98
 8010ca8:	20000c44 	.word	0x20000c44
 8010cac:	20000fa4 	.word	0x20000fa4
 8010cb0:	08012bf4 	.word	0x08012bf4
 8010cb4:	08012c24 	.word	0x08012c24
 8010cb8:	20000488 	.word	0x20000488
 8010cbc:	20000fb0 	.word	0x20000fb0
 8010cc0:	20000b9c 	.word	0x20000b9c
 8010cc4:	08012c38 	.word	0x08012c38
 8010cc8:	08012c58 	.word	0x08012c58

08010ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	607b      	str	r3, [r7, #4]
 8010cd6:	4b10      	ldr	r3, [pc, #64]	; (8010d18 <HAL_MspInit+0x4c>)
 8010cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cda:	4a0f      	ldr	r2, [pc, #60]	; (8010d18 <HAL_MspInit+0x4c>)
 8010cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8010ce2:	4b0d      	ldr	r3, [pc, #52]	; (8010d18 <HAL_MspInit+0x4c>)
 8010ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cea:	607b      	str	r3, [r7, #4]
 8010cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010cee:	2300      	movs	r3, #0
 8010cf0:	603b      	str	r3, [r7, #0]
 8010cf2:	4b09      	ldr	r3, [pc, #36]	; (8010d18 <HAL_MspInit+0x4c>)
 8010cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf6:	4a08      	ldr	r2, [pc, #32]	; (8010d18 <HAL_MspInit+0x4c>)
 8010cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8010cfe:	4b06      	ldr	r3, [pc, #24]	; (8010d18 <HAL_MspInit+0x4c>)
 8010d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d06:	603b      	str	r3, [r7, #0]
 8010d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010d0a:	bf00      	nop
 8010d0c:	370c      	adds	r7, #12
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	40023800 	.word	0x40023800

08010d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b08a      	sub	sp, #40	; 0x28
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d24:	f107 0314 	add.w	r3, r7, #20
 8010d28:	2200      	movs	r2, #0
 8010d2a:	601a      	str	r2, [r3, #0]
 8010d2c:	605a      	str	r2, [r3, #4]
 8010d2e:	609a      	str	r2, [r3, #8]
 8010d30:	60da      	str	r2, [r3, #12]
 8010d32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4a17      	ldr	r2, [pc, #92]	; (8010d98 <HAL_ADC_MspInit+0x7c>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d127      	bne.n	8010d8e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8010d3e:	2300      	movs	r3, #0
 8010d40:	613b      	str	r3, [r7, #16]
 8010d42:	4b16      	ldr	r3, [pc, #88]	; (8010d9c <HAL_ADC_MspInit+0x80>)
 8010d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d46:	4a15      	ldr	r2, [pc, #84]	; (8010d9c <HAL_ADC_MspInit+0x80>)
 8010d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8010d4e:	4b13      	ldr	r3, [pc, #76]	; (8010d9c <HAL_ADC_MspInit+0x80>)
 8010d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d56:	613b      	str	r3, [r7, #16]
 8010d58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	60fb      	str	r3, [r7, #12]
 8010d5e:	4b0f      	ldr	r3, [pc, #60]	; (8010d9c <HAL_ADC_MspInit+0x80>)
 8010d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d62:	4a0e      	ldr	r2, [pc, #56]	; (8010d9c <HAL_ADC_MspInit+0x80>)
 8010d64:	f043 0301 	orr.w	r3, r3, #1
 8010d68:	6313      	str	r3, [r2, #48]	; 0x30
 8010d6a:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <HAL_ADC_MspInit+0x80>)
 8010d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d6e:	f003 0301 	and.w	r3, r3, #1
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8010d76:	230f      	movs	r3, #15
 8010d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d82:	f107 0314 	add.w	r3, r7, #20
 8010d86:	4619      	mov	r1, r3
 8010d88:	4805      	ldr	r0, [pc, #20]	; (8010da0 <HAL_ADC_MspInit+0x84>)
 8010d8a:	f7f1 f909 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8010d8e:	bf00      	nop
 8010d90:	3728      	adds	r7, #40	; 0x28
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	40012000 	.word	0x40012000
 8010d9c:	40023800 	.word	0x40023800
 8010da0:	40020000 	.word	0x40020000

08010da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b08a      	sub	sp, #40	; 0x28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dac:	f107 0314 	add.w	r3, r7, #20
 8010db0:	2200      	movs	r2, #0
 8010db2:	601a      	str	r2, [r3, #0]
 8010db4:	605a      	str	r2, [r3, #4]
 8010db6:	609a      	str	r2, [r3, #8]
 8010db8:	60da      	str	r2, [r3, #12]
 8010dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a19      	ldr	r2, [pc, #100]	; (8010e28 <HAL_SPI_MspInit+0x84>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d12c      	bne.n	8010e20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	613b      	str	r3, [r7, #16]
 8010dca:	4b18      	ldr	r3, [pc, #96]	; (8010e2c <HAL_SPI_MspInit+0x88>)
 8010dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dce:	4a17      	ldr	r2, [pc, #92]	; (8010e2c <HAL_SPI_MspInit+0x88>)
 8010dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8010dd6:	4b15      	ldr	r3, [pc, #84]	; (8010e2c <HAL_SPI_MspInit+0x88>)
 8010dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dde:	613b      	str	r3, [r7, #16]
 8010de0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010de2:	2300      	movs	r3, #0
 8010de4:	60fb      	str	r3, [r7, #12]
 8010de6:	4b11      	ldr	r3, [pc, #68]	; (8010e2c <HAL_SPI_MspInit+0x88>)
 8010de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dea:	4a10      	ldr	r2, [pc, #64]	; (8010e2c <HAL_SPI_MspInit+0x88>)
 8010dec:	f043 0304 	orr.w	r3, r3, #4
 8010df0:	6313      	str	r3, [r2, #48]	; 0x30
 8010df2:	4b0e      	ldr	r3, [pc, #56]	; (8010e2c <HAL_SPI_MspInit+0x88>)
 8010df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010df6:	f003 0304 	and.w	r3, r3, #4
 8010dfa:	60fb      	str	r3, [r7, #12]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010dfe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e04:	2302      	movs	r3, #2
 8010e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e0c:	2303      	movs	r3, #3
 8010e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010e10:	2306      	movs	r3, #6
 8010e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e14:	f107 0314 	add.w	r3, r7, #20
 8010e18:	4619      	mov	r1, r3
 8010e1a:	4805      	ldr	r0, [pc, #20]	; (8010e30 <HAL_SPI_MspInit+0x8c>)
 8010e1c:	f7f1 f8c0 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010e20:	bf00      	nop
 8010e22:	3728      	adds	r7, #40	; 0x28
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	40003c00 	.word	0x40003c00
 8010e2c:	40023800 	.word	0x40023800
 8010e30:	40020800 	.word	0x40020800

08010e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b086      	sub	sp, #24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e44:	d10e      	bne.n	8010e64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010e46:	2300      	movs	r3, #0
 8010e48:	617b      	str	r3, [r7, #20]
 8010e4a:	4b20      	ldr	r3, [pc, #128]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	4a1f      	ldr	r2, [pc, #124]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e50:	f043 0301 	orr.w	r3, r3, #1
 8010e54:	6413      	str	r3, [r2, #64]	; 0x40
 8010e56:	4b1d      	ldr	r3, [pc, #116]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5a:	f003 0301 	and.w	r3, r3, #1
 8010e5e:	617b      	str	r3, [r7, #20]
 8010e60:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8010e62:	e02e      	b.n	8010ec2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4a19      	ldr	r2, [pc, #100]	; (8010ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d10e      	bne.n	8010e8c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010e6e:	2300      	movs	r3, #0
 8010e70:	613b      	str	r3, [r7, #16]
 8010e72:	4b16      	ldr	r3, [pc, #88]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e76:	4a15      	ldr	r2, [pc, #84]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e78:	f043 0302 	orr.w	r3, r3, #2
 8010e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8010e7e:	4b13      	ldr	r3, [pc, #76]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e82:	f003 0302 	and.w	r3, r3, #2
 8010e86:	613b      	str	r3, [r7, #16]
 8010e88:	693b      	ldr	r3, [r7, #16]
}
 8010e8a:	e01a      	b.n	8010ec2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a10      	ldr	r2, [pc, #64]	; (8010ed4 <HAL_TIM_Base_MspInit+0xa0>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d115      	bne.n	8010ec2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8010e96:	2300      	movs	r3, #0
 8010e98:	60fb      	str	r3, [r7, #12]
 8010e9a:	4b0c      	ldr	r3, [pc, #48]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9e:	4a0b      	ldr	r2, [pc, #44]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010ea0:	f043 0310 	orr.w	r3, r3, #16
 8010ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8010ea6:	4b09      	ldr	r3, [pc, #36]	; (8010ecc <HAL_TIM_Base_MspInit+0x98>)
 8010ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eaa:	f003 0310 	and.w	r3, r3, #16
 8010eae:	60fb      	str	r3, [r7, #12]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	2100      	movs	r1, #0
 8010eb6:	2036      	movs	r0, #54	; 0x36
 8010eb8:	f7f0 fd67 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8010ebc:	2036      	movs	r0, #54	; 0x36
 8010ebe:	f7f0 fd80 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8010ec2:	bf00      	nop
 8010ec4:	3718      	adds	r7, #24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	40023800 	.word	0x40023800
 8010ed0:	40000400 	.word	0x40000400
 8010ed4:	40001000 	.word	0x40001000

08010ed8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b08c      	sub	sp, #48	; 0x30
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ee0:	f107 031c 	add.w	r3, r7, #28
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	605a      	str	r2, [r3, #4]
 8010eea:	609a      	str	r2, [r3, #8]
 8010eec:	60da      	str	r2, [r3, #12]
 8010eee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4a32      	ldr	r2, [pc, #200]	; (8010fc0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d12c      	bne.n	8010f54 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010efa:	2300      	movs	r3, #0
 8010efc:	61bb      	str	r3, [r7, #24]
 8010efe:	4b31      	ldr	r3, [pc, #196]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f02:	4a30      	ldr	r2, [pc, #192]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f04:	f043 0304 	orr.w	r3, r3, #4
 8010f08:	6413      	str	r3, [r2, #64]	; 0x40
 8010f0a:	4b2e      	ldr	r3, [pc, #184]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f0e:	f003 0304 	and.w	r3, r3, #4
 8010f12:	61bb      	str	r3, [r7, #24]
 8010f14:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010f16:	2300      	movs	r3, #0
 8010f18:	617b      	str	r3, [r7, #20]
 8010f1a:	4b2a      	ldr	r3, [pc, #168]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f1e:	4a29      	ldr	r2, [pc, #164]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f20:	f043 0302 	orr.w	r3, r3, #2
 8010f24:	6313      	str	r3, [r2, #48]	; 0x30
 8010f26:	4b27      	ldr	r3, [pc, #156]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f2a:	f003 0302 	and.w	r3, r3, #2
 8010f2e:	617b      	str	r3, [r7, #20]
 8010f30:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010f32:	23c0      	movs	r3, #192	; 0xc0
 8010f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f36:	2302      	movs	r3, #2
 8010f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010f42:	2302      	movs	r3, #2
 8010f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010f46:	f107 031c 	add.w	r3, r7, #28
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	481e      	ldr	r0, [pc, #120]	; (8010fc8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8010f4e:	f7f1 f827 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8010f52:	e030      	b.n	8010fb6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a1c      	ldr	r2, [pc, #112]	; (8010fcc <HAL_TIM_Encoder_MspInit+0xf4>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d12b      	bne.n	8010fb6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010f5e:	2300      	movs	r3, #0
 8010f60:	613b      	str	r3, [r7, #16]
 8010f62:	4b18      	ldr	r3, [pc, #96]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f66:	4a17      	ldr	r2, [pc, #92]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f68:	f043 0302 	orr.w	r3, r3, #2
 8010f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8010f6e:	4b15      	ldr	r3, [pc, #84]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f72:	f003 0302 	and.w	r3, r3, #2
 8010f76:	613b      	str	r3, [r7, #16]
 8010f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	4b11      	ldr	r3, [pc, #68]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f82:	4a10      	ldr	r2, [pc, #64]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f84:	f043 0304 	orr.w	r3, r3, #4
 8010f88:	6313      	str	r3, [r2, #48]	; 0x30
 8010f8a:	4b0e      	ldr	r3, [pc, #56]	; (8010fc4 <HAL_TIM_Encoder_MspInit+0xec>)
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f8e:	f003 0304 	and.w	r3, r3, #4
 8010f92:	60fb      	str	r3, [r7, #12]
 8010f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010f96:	23c0      	movs	r3, #192	; 0xc0
 8010f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010faa:	f107 031c 	add.w	r3, r7, #28
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4807      	ldr	r0, [pc, #28]	; (8010fd0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8010fb2:	f7f0 fff5 	bl	8001fa0 <HAL_GPIO_Init>
}
 8010fb6:	bf00      	nop
 8010fb8:	3730      	adds	r7, #48	; 0x30
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	40000800 	.word	0x40000800
 8010fc4:	40023800 	.word	0x40023800
 8010fc8:	40020400 	.word	0x40020400
 8010fcc:	40010400 	.word	0x40010400
 8010fd0:	40020800 	.word	0x40020800

08010fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08a      	sub	sp, #40	; 0x28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010fdc:	f107 0314 	add.w	r3, r7, #20
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	605a      	str	r2, [r3, #4]
 8010fe6:	609a      	str	r2, [r3, #8]
 8010fe8:	60da      	str	r2, [r3, #12]
 8010fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ff4:	d13d      	bne.n	8011072 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	613b      	str	r3, [r7, #16]
 8010ffa:	4b31      	ldr	r3, [pc, #196]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8010ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ffe:	4a30      	ldr	r2, [pc, #192]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8011000:	f043 0301 	orr.w	r3, r3, #1
 8011004:	6313      	str	r3, [r2, #48]	; 0x30
 8011006:	4b2e      	ldr	r3, [pc, #184]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8011008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801100a:	f003 0301 	and.w	r3, r3, #1
 801100e:	613b      	str	r3, [r7, #16]
 8011010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011012:	2300      	movs	r3, #0
 8011014:	60fb      	str	r3, [r7, #12]
 8011016:	4b2a      	ldr	r3, [pc, #168]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8011018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801101a:	4a29      	ldr	r2, [pc, #164]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 801101c:	f043 0302 	orr.w	r3, r3, #2
 8011020:	6313      	str	r3, [r2, #48]	; 0x30
 8011022:	4b27      	ldr	r3, [pc, #156]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8011024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011026:	f003 0302 	and.w	r3, r3, #2
 801102a:	60fb      	str	r3, [r7, #12]
 801102c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801102e:	2320      	movs	r3, #32
 8011030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011032:	2302      	movs	r3, #2
 8011034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011036:	2300      	movs	r3, #0
 8011038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801103a:	2300      	movs	r3, #0
 801103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801103e:	2301      	movs	r3, #1
 8011040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011042:	f107 0314 	add.w	r3, r7, #20
 8011046:	4619      	mov	r1, r3
 8011048:	481e      	ldr	r0, [pc, #120]	; (80110c4 <HAL_TIM_MspPostInit+0xf0>)
 801104a:	f7f0 ffa9 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801104e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011054:	2302      	movs	r3, #2
 8011056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011058:	2300      	movs	r3, #0
 801105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801105c:	2300      	movs	r3, #0
 801105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011060:	2301      	movs	r3, #1
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011064:	f107 0314 	add.w	r3, r7, #20
 8011068:	4619      	mov	r1, r3
 801106a:	4817      	ldr	r0, [pc, #92]	; (80110c8 <HAL_TIM_MspPostInit+0xf4>)
 801106c:	f7f0 ff98 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8011070:	e022      	b.n	80110b8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a15      	ldr	r2, [pc, #84]	; (80110cc <HAL_TIM_MspPostInit+0xf8>)
 8011078:	4293      	cmp	r3, r2
 801107a:	d11d      	bne.n	80110b8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801107c:	2300      	movs	r3, #0
 801107e:	60bb      	str	r3, [r7, #8]
 8011080:	4b0f      	ldr	r3, [pc, #60]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8011082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011084:	4a0e      	ldr	r2, [pc, #56]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 8011086:	f043 0302 	orr.w	r3, r3, #2
 801108a:	6313      	str	r3, [r2, #48]	; 0x30
 801108c:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <HAL_TIM_MspPostInit+0xec>)
 801108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011090:	f003 0302 	and.w	r3, r3, #2
 8011094:	60bb      	str	r3, [r7, #8]
 8011096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011098:	2320      	movs	r3, #32
 801109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801109c:	2302      	movs	r3, #2
 801109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110a0:	2300      	movs	r3, #0
 80110a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80110a4:	2300      	movs	r3, #0
 80110a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80110a8:	2302      	movs	r3, #2
 80110aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80110ac:	f107 0314 	add.w	r3, r7, #20
 80110b0:	4619      	mov	r1, r3
 80110b2:	4805      	ldr	r0, [pc, #20]	; (80110c8 <HAL_TIM_MspPostInit+0xf4>)
 80110b4:	f7f0 ff74 	bl	8001fa0 <HAL_GPIO_Init>
}
 80110b8:	bf00      	nop
 80110ba:	3728      	adds	r7, #40	; 0x28
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	40023800 	.word	0x40023800
 80110c4:	40020000 	.word	0x40020000
 80110c8:	40020400 	.word	0x40020400
 80110cc:	40000400 	.word	0x40000400

080110d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b08a      	sub	sp, #40	; 0x28
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110d8:	f107 0314 	add.w	r3, r7, #20
 80110dc:	2200      	movs	r2, #0
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	605a      	str	r2, [r3, #4]
 80110e2:	609a      	str	r2, [r3, #8]
 80110e4:	60da      	str	r2, [r3, #12]
 80110e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a19      	ldr	r2, [pc, #100]	; (8011154 <HAL_UART_MspInit+0x84>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d12c      	bne.n	801114c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80110f2:	2300      	movs	r3, #0
 80110f4:	613b      	str	r3, [r7, #16]
 80110f6:	4b18      	ldr	r3, [pc, #96]	; (8011158 <HAL_UART_MspInit+0x88>)
 80110f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110fa:	4a17      	ldr	r2, [pc, #92]	; (8011158 <HAL_UART_MspInit+0x88>)
 80110fc:	f043 0310 	orr.w	r3, r3, #16
 8011100:	6453      	str	r3, [r2, #68]	; 0x44
 8011102:	4b15      	ldr	r3, [pc, #84]	; (8011158 <HAL_UART_MspInit+0x88>)
 8011104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011106:	f003 0310 	and.w	r3, r3, #16
 801110a:	613b      	str	r3, [r7, #16]
 801110c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801110e:	2300      	movs	r3, #0
 8011110:	60fb      	str	r3, [r7, #12]
 8011112:	4b11      	ldr	r3, [pc, #68]	; (8011158 <HAL_UART_MspInit+0x88>)
 8011114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011116:	4a10      	ldr	r2, [pc, #64]	; (8011158 <HAL_UART_MspInit+0x88>)
 8011118:	f043 0301 	orr.w	r3, r3, #1
 801111c:	6313      	str	r3, [r2, #48]	; 0x30
 801111e:	4b0e      	ldr	r3, [pc, #56]	; (8011158 <HAL_UART_MspInit+0x88>)
 8011120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011122:	f003 0301 	and.w	r3, r3, #1
 8011126:	60fb      	str	r3, [r7, #12]
 8011128:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801112a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011130:	2302      	movs	r3, #2
 8011132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011134:	2301      	movs	r3, #1
 8011136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011138:	2303      	movs	r3, #3
 801113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801113c:	2307      	movs	r3, #7
 801113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011140:	f107 0314 	add.w	r3, r7, #20
 8011144:	4619      	mov	r1, r3
 8011146:	4805      	ldr	r0, [pc, #20]	; (801115c <HAL_UART_MspInit+0x8c>)
 8011148:	f7f0 ff2a 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801114c:	bf00      	nop
 801114e:	3728      	adds	r7, #40	; 0x28
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	40011000 	.word	0x40011000
 8011158:	40023800 	.word	0x40023800
 801115c:	40020000 	.word	0x40020000

08011160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011160:	b480      	push	{r7}
 8011162:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011164:	bf00      	nop
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801116e:	b480      	push	{r7}
 8011170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011172:	e7fe      	b.n	8011172 <HardFault_Handler+0x4>

08011174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011174:	b480      	push	{r7}
 8011176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011178:	e7fe      	b.n	8011178 <MemManage_Handler+0x4>

0801117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801117a:	b480      	push	{r7}
 801117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801117e:	e7fe      	b.n	801117e <BusFault_Handler+0x4>

08011180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011184:	e7fe      	b.n	8011184 <UsageFault_Handler+0x4>

08011186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011186:	b480      	push	{r7}
 8011188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801118a:	bf00      	nop
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011194:	b480      	push	{r7}
 8011196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011198:	bf00      	nop
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80111a2:	b480      	push	{r7}
 80111a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80111a6:	bf00      	nop
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80111b4:	f7ef ff12 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80111b8:	bf00      	nop
 80111ba:	bd80      	pop	{r7, pc}

080111bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80111c0:	4802      	ldr	r0, [pc, #8]	; (80111cc <TIM6_DAC_IRQHandler+0x10>)
 80111c2:	f7f2 fbfa 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80111c6:	bf00      	nop
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	20000bf4 	.word	0x20000bf4

080111d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111dc:	2300      	movs	r3, #0
 80111de:	617b      	str	r3, [r7, #20]
 80111e0:	e00a      	b.n	80111f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80111e2:	f3af 8000 	nop.w
 80111e6:	4601      	mov	r1, r0
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	1c5a      	adds	r2, r3, #1
 80111ec:	60ba      	str	r2, [r7, #8]
 80111ee:	b2ca      	uxtb	r2, r1
 80111f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	3301      	adds	r3, #1
 80111f6:	617b      	str	r3, [r7, #20]
 80111f8:	697a      	ldr	r2, [r7, #20]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	dbf0      	blt.n	80111e2 <_read+0x12>
	}

return len;
 8011200:	687b      	ldr	r3, [r7, #4]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3718      	adds	r7, #24
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801120a:	b580      	push	{r7, lr}
 801120c:	b086      	sub	sp, #24
 801120e:	af00      	add	r7, sp, #0
 8011210:	60f8      	str	r0, [r7, #12]
 8011212:	60b9      	str	r1, [r7, #8]
 8011214:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011216:	2300      	movs	r3, #0
 8011218:	617b      	str	r3, [r7, #20]
 801121a:	e009      	b.n	8011230 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	60ba      	str	r2, [r7, #8]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	4618      	mov	r0, r3
 8011226:	f7fa fc0d 	bl	800ba44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	3301      	adds	r3, #1
 801122e:	617b      	str	r3, [r7, #20]
 8011230:	697a      	ldr	r2, [r7, #20]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	429a      	cmp	r2, r3
 8011236:	dbf1      	blt.n	801121c <_write+0x12>
	}
	return len;
 8011238:	687b      	ldr	r3, [r7, #4]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <_close>:

int _close(int file)
{
 8011242:	b480      	push	{r7}
 8011244:	b083      	sub	sp, #12
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
	return -1;
 801124a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801124e:	4618      	mov	r0, r3
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr

0801125a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801125a:	b480      	push	{r7}
 801125c:	b083      	sub	sp, #12
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
 8011262:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801126a:	605a      	str	r2, [r3, #4]
	return 0;
 801126c:	2300      	movs	r3, #0
}
 801126e:	4618      	mov	r0, r3
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr

0801127a <_isatty>:

int _isatty(int file)
{
 801127a:	b480      	push	{r7}
 801127c:	b083      	sub	sp, #12
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
	return 1;
 8011282:	2301      	movs	r3, #1
}
 8011284:	4618      	mov	r0, r3
 8011286:	370c      	adds	r7, #12
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	607a      	str	r2, [r7, #4]
	return 0;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3714      	adds	r7, #20
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
	...

080112ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80112b4:	4b11      	ldr	r3, [pc, #68]	; (80112fc <_sbrk+0x50>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d102      	bne.n	80112c2 <_sbrk+0x16>
		heap_end = &end;
 80112bc:	4b0f      	ldr	r3, [pc, #60]	; (80112fc <_sbrk+0x50>)
 80112be:	4a10      	ldr	r2, [pc, #64]	; (8011300 <_sbrk+0x54>)
 80112c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80112c2:	4b0e      	ldr	r3, [pc, #56]	; (80112fc <_sbrk+0x50>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80112c8:	4b0c      	ldr	r3, [pc, #48]	; (80112fc <_sbrk+0x50>)
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4413      	add	r3, r2
 80112d0:	466a      	mov	r2, sp
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d907      	bls.n	80112e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80112d6:	f000 f875 	bl	80113c4 <__errno>
 80112da:	4602      	mov	r2, r0
 80112dc:	230c      	movs	r3, #12
 80112de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80112e0:	f04f 33ff 	mov.w	r3, #4294967295
 80112e4:	e006      	b.n	80112f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80112e6:	4b05      	ldr	r3, [pc, #20]	; (80112fc <_sbrk+0x50>)
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	4413      	add	r3, r2
 80112ee:	4a03      	ldr	r2, [pc, #12]	; (80112fc <_sbrk+0x50>)
 80112f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80112f2:	68fb      	ldr	r3, [r7, #12]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3710      	adds	r7, #16
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	2000014c 	.word	0x2000014c
 8011300:	20001300 	.word	0x20001300

08011304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011304:	b480      	push	{r7}
 8011306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011308:	4b16      	ldr	r3, [pc, #88]	; (8011364 <SystemInit+0x60>)
 801130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801130e:	4a15      	ldr	r2, [pc, #84]	; (8011364 <SystemInit+0x60>)
 8011310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011318:	4b13      	ldr	r3, [pc, #76]	; (8011368 <SystemInit+0x64>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a12      	ldr	r2, [pc, #72]	; (8011368 <SystemInit+0x64>)
 801131e:	f043 0301 	orr.w	r3, r3, #1
 8011322:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011324:	4b10      	ldr	r3, [pc, #64]	; (8011368 <SystemInit+0x64>)
 8011326:	2200      	movs	r2, #0
 8011328:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801132a:	4b0f      	ldr	r3, [pc, #60]	; (8011368 <SystemInit+0x64>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4a0e      	ldr	r2, [pc, #56]	; (8011368 <SystemInit+0x64>)
 8011330:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011338:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801133a:	4b0b      	ldr	r3, [pc, #44]	; (8011368 <SystemInit+0x64>)
 801133c:	4a0b      	ldr	r2, [pc, #44]	; (801136c <SystemInit+0x68>)
 801133e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011340:	4b09      	ldr	r3, [pc, #36]	; (8011368 <SystemInit+0x64>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4a08      	ldr	r2, [pc, #32]	; (8011368 <SystemInit+0x64>)
 8011346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801134a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801134c:	4b06      	ldr	r3, [pc, #24]	; (8011368 <SystemInit+0x64>)
 801134e:	2200      	movs	r2, #0
 8011350:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011352:	4b04      	ldr	r3, [pc, #16]	; (8011364 <SystemInit+0x60>)
 8011354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011358:	609a      	str	r2, [r3, #8]
#endif
}
 801135a:	bf00      	nop
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	e000ed00 	.word	0xe000ed00
 8011368:	40023800 	.word	0x40023800
 801136c:	24003010 	.word	0x24003010

08011370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80113a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011376:	e003      	b.n	8011380 <LoopCopyDataInit>

08011378 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011378:	4b0c      	ldr	r3, [pc, #48]	; (80113ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801137a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801137c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801137e:	3104      	adds	r1, #4

08011380 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011380:	480b      	ldr	r0, [pc, #44]	; (80113b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011382:	4b0c      	ldr	r3, [pc, #48]	; (80113b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011384:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011386:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011388:	d3f6      	bcc.n	8011378 <CopyDataInit>
  ldr  r2, =_sbss
 801138a:	4a0b      	ldr	r2, [pc, #44]	; (80113b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801138c:	e002      	b.n	8011394 <LoopFillZerobss>

0801138e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801138e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011390:	f842 3b04 	str.w	r3, [r2], #4

08011394 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011394:	4b09      	ldr	r3, [pc, #36]	; (80113bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011396:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011398:	d3f9      	bcc.n	801138e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801139a:	f7ff ffb3 	bl	8011304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801139e:	f000 f817 	bl	80113d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80113a2:	f7fb fd59 	bl	800ce58 <main>
  bx  lr    
 80113a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80113a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80113ac:	08012d3c 	.word	0x08012d3c
  ldr  r0, =_sdata
 80113b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80113b4:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80113b8:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80113bc:	200012fc 	.word	0x200012fc

080113c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80113c0:	e7fe      	b.n	80113c0 <ADC_IRQHandler>
	...

080113c4 <__errno>:
 80113c4:	4b01      	ldr	r3, [pc, #4]	; (80113cc <__errno+0x8>)
 80113c6:	6818      	ldr	r0, [r3, #0]
 80113c8:	4770      	bx	lr
 80113ca:	bf00      	nop
 80113cc:	200000bc 	.word	0x200000bc

080113d0 <__libc_init_array>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	4e0d      	ldr	r6, [pc, #52]	; (8011408 <__libc_init_array+0x38>)
 80113d4:	4c0d      	ldr	r4, [pc, #52]	; (801140c <__libc_init_array+0x3c>)
 80113d6:	1ba4      	subs	r4, r4, r6
 80113d8:	10a4      	asrs	r4, r4, #2
 80113da:	2500      	movs	r5, #0
 80113dc:	42a5      	cmp	r5, r4
 80113de:	d109      	bne.n	80113f4 <__libc_init_array+0x24>
 80113e0:	4e0b      	ldr	r6, [pc, #44]	; (8011410 <__libc_init_array+0x40>)
 80113e2:	4c0c      	ldr	r4, [pc, #48]	; (8011414 <__libc_init_array+0x44>)
 80113e4:	f001 f932 	bl	801264c <_init>
 80113e8:	1ba4      	subs	r4, r4, r6
 80113ea:	10a4      	asrs	r4, r4, #2
 80113ec:	2500      	movs	r5, #0
 80113ee:	42a5      	cmp	r5, r4
 80113f0:	d105      	bne.n	80113fe <__libc_init_array+0x2e>
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80113f8:	4798      	blx	r3
 80113fa:	3501      	adds	r5, #1
 80113fc:	e7ee      	b.n	80113dc <__libc_init_array+0xc>
 80113fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011402:	4798      	blx	r3
 8011404:	3501      	adds	r5, #1
 8011406:	e7f2      	b.n	80113ee <__libc_init_array+0x1e>
 8011408:	08012d34 	.word	0x08012d34
 801140c:	08012d34 	.word	0x08012d34
 8011410:	08012d34 	.word	0x08012d34
 8011414:	08012d38 	.word	0x08012d38

08011418 <memset>:
 8011418:	4402      	add	r2, r0
 801141a:	4603      	mov	r3, r0
 801141c:	4293      	cmp	r3, r2
 801141e:	d100      	bne.n	8011422 <memset+0xa>
 8011420:	4770      	bx	lr
 8011422:	f803 1b01 	strb.w	r1, [r3], #1
 8011426:	e7f9      	b.n	801141c <memset+0x4>

08011428 <iprintf>:
 8011428:	b40f      	push	{r0, r1, r2, r3}
 801142a:	4b0a      	ldr	r3, [pc, #40]	; (8011454 <iprintf+0x2c>)
 801142c:	b513      	push	{r0, r1, r4, lr}
 801142e:	681c      	ldr	r4, [r3, #0]
 8011430:	b124      	cbz	r4, 801143c <iprintf+0x14>
 8011432:	69a3      	ldr	r3, [r4, #24]
 8011434:	b913      	cbnz	r3, 801143c <iprintf+0x14>
 8011436:	4620      	mov	r0, r4
 8011438:	f000 fad8 	bl	80119ec <__sinit>
 801143c:	ab05      	add	r3, sp, #20
 801143e:	9a04      	ldr	r2, [sp, #16]
 8011440:	68a1      	ldr	r1, [r4, #8]
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	4620      	mov	r0, r4
 8011446:	f000 fc99 	bl	8011d7c <_vfiprintf_r>
 801144a:	b002      	add	sp, #8
 801144c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011450:	b004      	add	sp, #16
 8011452:	4770      	bx	lr
 8011454:	200000bc 	.word	0x200000bc

08011458 <_puts_r>:
 8011458:	b570      	push	{r4, r5, r6, lr}
 801145a:	460e      	mov	r6, r1
 801145c:	4605      	mov	r5, r0
 801145e:	b118      	cbz	r0, 8011468 <_puts_r+0x10>
 8011460:	6983      	ldr	r3, [r0, #24]
 8011462:	b90b      	cbnz	r3, 8011468 <_puts_r+0x10>
 8011464:	f000 fac2 	bl	80119ec <__sinit>
 8011468:	69ab      	ldr	r3, [r5, #24]
 801146a:	68ac      	ldr	r4, [r5, #8]
 801146c:	b913      	cbnz	r3, 8011474 <_puts_r+0x1c>
 801146e:	4628      	mov	r0, r5
 8011470:	f000 fabc 	bl	80119ec <__sinit>
 8011474:	4b23      	ldr	r3, [pc, #140]	; (8011504 <_puts_r+0xac>)
 8011476:	429c      	cmp	r4, r3
 8011478:	d117      	bne.n	80114aa <_puts_r+0x52>
 801147a:	686c      	ldr	r4, [r5, #4]
 801147c:	89a3      	ldrh	r3, [r4, #12]
 801147e:	071b      	lsls	r3, r3, #28
 8011480:	d51d      	bpl.n	80114be <_puts_r+0x66>
 8011482:	6923      	ldr	r3, [r4, #16]
 8011484:	b1db      	cbz	r3, 80114be <_puts_r+0x66>
 8011486:	3e01      	subs	r6, #1
 8011488:	68a3      	ldr	r3, [r4, #8]
 801148a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801148e:	3b01      	subs	r3, #1
 8011490:	60a3      	str	r3, [r4, #8]
 8011492:	b9e9      	cbnz	r1, 80114d0 <_puts_r+0x78>
 8011494:	2b00      	cmp	r3, #0
 8011496:	da2e      	bge.n	80114f6 <_puts_r+0x9e>
 8011498:	4622      	mov	r2, r4
 801149a:	210a      	movs	r1, #10
 801149c:	4628      	mov	r0, r5
 801149e:	f000 f8f5 	bl	801168c <__swbuf_r>
 80114a2:	3001      	adds	r0, #1
 80114a4:	d011      	beq.n	80114ca <_puts_r+0x72>
 80114a6:	200a      	movs	r0, #10
 80114a8:	e011      	b.n	80114ce <_puts_r+0x76>
 80114aa:	4b17      	ldr	r3, [pc, #92]	; (8011508 <_puts_r+0xb0>)
 80114ac:	429c      	cmp	r4, r3
 80114ae:	d101      	bne.n	80114b4 <_puts_r+0x5c>
 80114b0:	68ac      	ldr	r4, [r5, #8]
 80114b2:	e7e3      	b.n	801147c <_puts_r+0x24>
 80114b4:	4b15      	ldr	r3, [pc, #84]	; (801150c <_puts_r+0xb4>)
 80114b6:	429c      	cmp	r4, r3
 80114b8:	bf08      	it	eq
 80114ba:	68ec      	ldreq	r4, [r5, #12]
 80114bc:	e7de      	b.n	801147c <_puts_r+0x24>
 80114be:	4621      	mov	r1, r4
 80114c0:	4628      	mov	r0, r5
 80114c2:	f000 f935 	bl	8011730 <__swsetup_r>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	d0dd      	beq.n	8011486 <_puts_r+0x2e>
 80114ca:	f04f 30ff 	mov.w	r0, #4294967295
 80114ce:	bd70      	pop	{r4, r5, r6, pc}
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	da04      	bge.n	80114de <_puts_r+0x86>
 80114d4:	69a2      	ldr	r2, [r4, #24]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	dc06      	bgt.n	80114e8 <_puts_r+0x90>
 80114da:	290a      	cmp	r1, #10
 80114dc:	d004      	beq.n	80114e8 <_puts_r+0x90>
 80114de:	6823      	ldr	r3, [r4, #0]
 80114e0:	1c5a      	adds	r2, r3, #1
 80114e2:	6022      	str	r2, [r4, #0]
 80114e4:	7019      	strb	r1, [r3, #0]
 80114e6:	e7cf      	b.n	8011488 <_puts_r+0x30>
 80114e8:	4622      	mov	r2, r4
 80114ea:	4628      	mov	r0, r5
 80114ec:	f000 f8ce 	bl	801168c <__swbuf_r>
 80114f0:	3001      	adds	r0, #1
 80114f2:	d1c9      	bne.n	8011488 <_puts_r+0x30>
 80114f4:	e7e9      	b.n	80114ca <_puts_r+0x72>
 80114f6:	6823      	ldr	r3, [r4, #0]
 80114f8:	200a      	movs	r0, #10
 80114fa:	1c5a      	adds	r2, r3, #1
 80114fc:	6022      	str	r2, [r4, #0]
 80114fe:	7018      	strb	r0, [r3, #0]
 8011500:	e7e5      	b.n	80114ce <_puts_r+0x76>
 8011502:	bf00      	nop
 8011504:	08012cb4 	.word	0x08012cb4
 8011508:	08012cd4 	.word	0x08012cd4
 801150c:	08012c94 	.word	0x08012c94

08011510 <puts>:
 8011510:	4b02      	ldr	r3, [pc, #8]	; (801151c <puts+0xc>)
 8011512:	4601      	mov	r1, r0
 8011514:	6818      	ldr	r0, [r3, #0]
 8011516:	f7ff bf9f 	b.w	8011458 <_puts_r>
 801151a:	bf00      	nop
 801151c:	200000bc 	.word	0x200000bc

08011520 <setbuf>:
 8011520:	2900      	cmp	r1, #0
 8011522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011526:	bf0c      	ite	eq
 8011528:	2202      	moveq	r2, #2
 801152a:	2200      	movne	r2, #0
 801152c:	f000 b800 	b.w	8011530 <setvbuf>

08011530 <setvbuf>:
 8011530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011534:	461d      	mov	r5, r3
 8011536:	4b51      	ldr	r3, [pc, #324]	; (801167c <setvbuf+0x14c>)
 8011538:	681e      	ldr	r6, [r3, #0]
 801153a:	4604      	mov	r4, r0
 801153c:	460f      	mov	r7, r1
 801153e:	4690      	mov	r8, r2
 8011540:	b126      	cbz	r6, 801154c <setvbuf+0x1c>
 8011542:	69b3      	ldr	r3, [r6, #24]
 8011544:	b913      	cbnz	r3, 801154c <setvbuf+0x1c>
 8011546:	4630      	mov	r0, r6
 8011548:	f000 fa50 	bl	80119ec <__sinit>
 801154c:	4b4c      	ldr	r3, [pc, #304]	; (8011680 <setvbuf+0x150>)
 801154e:	429c      	cmp	r4, r3
 8011550:	d152      	bne.n	80115f8 <setvbuf+0xc8>
 8011552:	6874      	ldr	r4, [r6, #4]
 8011554:	f1b8 0f02 	cmp.w	r8, #2
 8011558:	d006      	beq.n	8011568 <setvbuf+0x38>
 801155a:	f1b8 0f01 	cmp.w	r8, #1
 801155e:	f200 8089 	bhi.w	8011674 <setvbuf+0x144>
 8011562:	2d00      	cmp	r5, #0
 8011564:	f2c0 8086 	blt.w	8011674 <setvbuf+0x144>
 8011568:	4621      	mov	r1, r4
 801156a:	4630      	mov	r0, r6
 801156c:	f000 f9d4 	bl	8011918 <_fflush_r>
 8011570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011572:	b141      	cbz	r1, 8011586 <setvbuf+0x56>
 8011574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011578:	4299      	cmp	r1, r3
 801157a:	d002      	beq.n	8011582 <setvbuf+0x52>
 801157c:	4630      	mov	r0, r6
 801157e:	f000 fb2b 	bl	8011bd8 <_free_r>
 8011582:	2300      	movs	r3, #0
 8011584:	6363      	str	r3, [r4, #52]	; 0x34
 8011586:	2300      	movs	r3, #0
 8011588:	61a3      	str	r3, [r4, #24]
 801158a:	6063      	str	r3, [r4, #4]
 801158c:	89a3      	ldrh	r3, [r4, #12]
 801158e:	061b      	lsls	r3, r3, #24
 8011590:	d503      	bpl.n	801159a <setvbuf+0x6a>
 8011592:	6921      	ldr	r1, [r4, #16]
 8011594:	4630      	mov	r0, r6
 8011596:	f000 fb1f 	bl	8011bd8 <_free_r>
 801159a:	89a3      	ldrh	r3, [r4, #12]
 801159c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80115a0:	f023 0303 	bic.w	r3, r3, #3
 80115a4:	f1b8 0f02 	cmp.w	r8, #2
 80115a8:	81a3      	strh	r3, [r4, #12]
 80115aa:	d05d      	beq.n	8011668 <setvbuf+0x138>
 80115ac:	ab01      	add	r3, sp, #4
 80115ae:	466a      	mov	r2, sp
 80115b0:	4621      	mov	r1, r4
 80115b2:	4630      	mov	r0, r6
 80115b4:	f000 faa4 	bl	8011b00 <__swhatbuf_r>
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	4318      	orrs	r0, r3
 80115bc:	81a0      	strh	r0, [r4, #12]
 80115be:	bb2d      	cbnz	r5, 801160c <setvbuf+0xdc>
 80115c0:	9d00      	ldr	r5, [sp, #0]
 80115c2:	4628      	mov	r0, r5
 80115c4:	f000 fb00 	bl	8011bc8 <malloc>
 80115c8:	4607      	mov	r7, r0
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d14e      	bne.n	801166c <setvbuf+0x13c>
 80115ce:	f8dd 9000 	ldr.w	r9, [sp]
 80115d2:	45a9      	cmp	r9, r5
 80115d4:	d13c      	bne.n	8011650 <setvbuf+0x120>
 80115d6:	f04f 30ff 	mov.w	r0, #4294967295
 80115da:	89a3      	ldrh	r3, [r4, #12]
 80115dc:	f043 0302 	orr.w	r3, r3, #2
 80115e0:	81a3      	strh	r3, [r4, #12]
 80115e2:	2300      	movs	r3, #0
 80115e4:	60a3      	str	r3, [r4, #8]
 80115e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115ea:	6023      	str	r3, [r4, #0]
 80115ec:	6123      	str	r3, [r4, #16]
 80115ee:	2301      	movs	r3, #1
 80115f0:	6163      	str	r3, [r4, #20]
 80115f2:	b003      	add	sp, #12
 80115f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115f8:	4b22      	ldr	r3, [pc, #136]	; (8011684 <setvbuf+0x154>)
 80115fa:	429c      	cmp	r4, r3
 80115fc:	d101      	bne.n	8011602 <setvbuf+0xd2>
 80115fe:	68b4      	ldr	r4, [r6, #8]
 8011600:	e7a8      	b.n	8011554 <setvbuf+0x24>
 8011602:	4b21      	ldr	r3, [pc, #132]	; (8011688 <setvbuf+0x158>)
 8011604:	429c      	cmp	r4, r3
 8011606:	bf08      	it	eq
 8011608:	68f4      	ldreq	r4, [r6, #12]
 801160a:	e7a3      	b.n	8011554 <setvbuf+0x24>
 801160c:	2f00      	cmp	r7, #0
 801160e:	d0d8      	beq.n	80115c2 <setvbuf+0x92>
 8011610:	69b3      	ldr	r3, [r6, #24]
 8011612:	b913      	cbnz	r3, 801161a <setvbuf+0xea>
 8011614:	4630      	mov	r0, r6
 8011616:	f000 f9e9 	bl	80119ec <__sinit>
 801161a:	f1b8 0f01 	cmp.w	r8, #1
 801161e:	bf08      	it	eq
 8011620:	89a3      	ldrheq	r3, [r4, #12]
 8011622:	6027      	str	r7, [r4, #0]
 8011624:	bf04      	itt	eq
 8011626:	f043 0301 	orreq.w	r3, r3, #1
 801162a:	81a3      	strheq	r3, [r4, #12]
 801162c:	89a3      	ldrh	r3, [r4, #12]
 801162e:	f013 0008 	ands.w	r0, r3, #8
 8011632:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8011636:	d01b      	beq.n	8011670 <setvbuf+0x140>
 8011638:	f013 0001 	ands.w	r0, r3, #1
 801163c:	bf18      	it	ne
 801163e:	426d      	negne	r5, r5
 8011640:	f04f 0300 	mov.w	r3, #0
 8011644:	bf1d      	ittte	ne
 8011646:	60a3      	strne	r3, [r4, #8]
 8011648:	61a5      	strne	r5, [r4, #24]
 801164a:	4618      	movne	r0, r3
 801164c:	60a5      	streq	r5, [r4, #8]
 801164e:	e7d0      	b.n	80115f2 <setvbuf+0xc2>
 8011650:	4648      	mov	r0, r9
 8011652:	f000 fab9 	bl	8011bc8 <malloc>
 8011656:	4607      	mov	r7, r0
 8011658:	2800      	cmp	r0, #0
 801165a:	d0bc      	beq.n	80115d6 <setvbuf+0xa6>
 801165c:	89a3      	ldrh	r3, [r4, #12]
 801165e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011662:	81a3      	strh	r3, [r4, #12]
 8011664:	464d      	mov	r5, r9
 8011666:	e7d3      	b.n	8011610 <setvbuf+0xe0>
 8011668:	2000      	movs	r0, #0
 801166a:	e7b6      	b.n	80115da <setvbuf+0xaa>
 801166c:	46a9      	mov	r9, r5
 801166e:	e7f5      	b.n	801165c <setvbuf+0x12c>
 8011670:	60a0      	str	r0, [r4, #8]
 8011672:	e7be      	b.n	80115f2 <setvbuf+0xc2>
 8011674:	f04f 30ff 	mov.w	r0, #4294967295
 8011678:	e7bb      	b.n	80115f2 <setvbuf+0xc2>
 801167a:	bf00      	nop
 801167c:	200000bc 	.word	0x200000bc
 8011680:	08012cb4 	.word	0x08012cb4
 8011684:	08012cd4 	.word	0x08012cd4
 8011688:	08012c94 	.word	0x08012c94

0801168c <__swbuf_r>:
 801168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168e:	460e      	mov	r6, r1
 8011690:	4614      	mov	r4, r2
 8011692:	4605      	mov	r5, r0
 8011694:	b118      	cbz	r0, 801169e <__swbuf_r+0x12>
 8011696:	6983      	ldr	r3, [r0, #24]
 8011698:	b90b      	cbnz	r3, 801169e <__swbuf_r+0x12>
 801169a:	f000 f9a7 	bl	80119ec <__sinit>
 801169e:	4b21      	ldr	r3, [pc, #132]	; (8011724 <__swbuf_r+0x98>)
 80116a0:	429c      	cmp	r4, r3
 80116a2:	d12a      	bne.n	80116fa <__swbuf_r+0x6e>
 80116a4:	686c      	ldr	r4, [r5, #4]
 80116a6:	69a3      	ldr	r3, [r4, #24]
 80116a8:	60a3      	str	r3, [r4, #8]
 80116aa:	89a3      	ldrh	r3, [r4, #12]
 80116ac:	071a      	lsls	r2, r3, #28
 80116ae:	d52e      	bpl.n	801170e <__swbuf_r+0x82>
 80116b0:	6923      	ldr	r3, [r4, #16]
 80116b2:	b363      	cbz	r3, 801170e <__swbuf_r+0x82>
 80116b4:	6923      	ldr	r3, [r4, #16]
 80116b6:	6820      	ldr	r0, [r4, #0]
 80116b8:	1ac0      	subs	r0, r0, r3
 80116ba:	6963      	ldr	r3, [r4, #20]
 80116bc:	b2f6      	uxtb	r6, r6
 80116be:	4283      	cmp	r3, r0
 80116c0:	4637      	mov	r7, r6
 80116c2:	dc04      	bgt.n	80116ce <__swbuf_r+0x42>
 80116c4:	4621      	mov	r1, r4
 80116c6:	4628      	mov	r0, r5
 80116c8:	f000 f926 	bl	8011918 <_fflush_r>
 80116cc:	bb28      	cbnz	r0, 801171a <__swbuf_r+0x8e>
 80116ce:	68a3      	ldr	r3, [r4, #8]
 80116d0:	3b01      	subs	r3, #1
 80116d2:	60a3      	str	r3, [r4, #8]
 80116d4:	6823      	ldr	r3, [r4, #0]
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	6022      	str	r2, [r4, #0]
 80116da:	701e      	strb	r6, [r3, #0]
 80116dc:	6963      	ldr	r3, [r4, #20]
 80116de:	3001      	adds	r0, #1
 80116e0:	4283      	cmp	r3, r0
 80116e2:	d004      	beq.n	80116ee <__swbuf_r+0x62>
 80116e4:	89a3      	ldrh	r3, [r4, #12]
 80116e6:	07db      	lsls	r3, r3, #31
 80116e8:	d519      	bpl.n	801171e <__swbuf_r+0x92>
 80116ea:	2e0a      	cmp	r6, #10
 80116ec:	d117      	bne.n	801171e <__swbuf_r+0x92>
 80116ee:	4621      	mov	r1, r4
 80116f0:	4628      	mov	r0, r5
 80116f2:	f000 f911 	bl	8011918 <_fflush_r>
 80116f6:	b190      	cbz	r0, 801171e <__swbuf_r+0x92>
 80116f8:	e00f      	b.n	801171a <__swbuf_r+0x8e>
 80116fa:	4b0b      	ldr	r3, [pc, #44]	; (8011728 <__swbuf_r+0x9c>)
 80116fc:	429c      	cmp	r4, r3
 80116fe:	d101      	bne.n	8011704 <__swbuf_r+0x78>
 8011700:	68ac      	ldr	r4, [r5, #8]
 8011702:	e7d0      	b.n	80116a6 <__swbuf_r+0x1a>
 8011704:	4b09      	ldr	r3, [pc, #36]	; (801172c <__swbuf_r+0xa0>)
 8011706:	429c      	cmp	r4, r3
 8011708:	bf08      	it	eq
 801170a:	68ec      	ldreq	r4, [r5, #12]
 801170c:	e7cb      	b.n	80116a6 <__swbuf_r+0x1a>
 801170e:	4621      	mov	r1, r4
 8011710:	4628      	mov	r0, r5
 8011712:	f000 f80d 	bl	8011730 <__swsetup_r>
 8011716:	2800      	cmp	r0, #0
 8011718:	d0cc      	beq.n	80116b4 <__swbuf_r+0x28>
 801171a:	f04f 37ff 	mov.w	r7, #4294967295
 801171e:	4638      	mov	r0, r7
 8011720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011722:	bf00      	nop
 8011724:	08012cb4 	.word	0x08012cb4
 8011728:	08012cd4 	.word	0x08012cd4
 801172c:	08012c94 	.word	0x08012c94

08011730 <__swsetup_r>:
 8011730:	4b32      	ldr	r3, [pc, #200]	; (80117fc <__swsetup_r+0xcc>)
 8011732:	b570      	push	{r4, r5, r6, lr}
 8011734:	681d      	ldr	r5, [r3, #0]
 8011736:	4606      	mov	r6, r0
 8011738:	460c      	mov	r4, r1
 801173a:	b125      	cbz	r5, 8011746 <__swsetup_r+0x16>
 801173c:	69ab      	ldr	r3, [r5, #24]
 801173e:	b913      	cbnz	r3, 8011746 <__swsetup_r+0x16>
 8011740:	4628      	mov	r0, r5
 8011742:	f000 f953 	bl	80119ec <__sinit>
 8011746:	4b2e      	ldr	r3, [pc, #184]	; (8011800 <__swsetup_r+0xd0>)
 8011748:	429c      	cmp	r4, r3
 801174a:	d10f      	bne.n	801176c <__swsetup_r+0x3c>
 801174c:	686c      	ldr	r4, [r5, #4]
 801174e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011752:	b29a      	uxth	r2, r3
 8011754:	0715      	lsls	r5, r2, #28
 8011756:	d42c      	bmi.n	80117b2 <__swsetup_r+0x82>
 8011758:	06d0      	lsls	r0, r2, #27
 801175a:	d411      	bmi.n	8011780 <__swsetup_r+0x50>
 801175c:	2209      	movs	r2, #9
 801175e:	6032      	str	r2, [r6, #0]
 8011760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011764:	81a3      	strh	r3, [r4, #12]
 8011766:	f04f 30ff 	mov.w	r0, #4294967295
 801176a:	e03e      	b.n	80117ea <__swsetup_r+0xba>
 801176c:	4b25      	ldr	r3, [pc, #148]	; (8011804 <__swsetup_r+0xd4>)
 801176e:	429c      	cmp	r4, r3
 8011770:	d101      	bne.n	8011776 <__swsetup_r+0x46>
 8011772:	68ac      	ldr	r4, [r5, #8]
 8011774:	e7eb      	b.n	801174e <__swsetup_r+0x1e>
 8011776:	4b24      	ldr	r3, [pc, #144]	; (8011808 <__swsetup_r+0xd8>)
 8011778:	429c      	cmp	r4, r3
 801177a:	bf08      	it	eq
 801177c:	68ec      	ldreq	r4, [r5, #12]
 801177e:	e7e6      	b.n	801174e <__swsetup_r+0x1e>
 8011780:	0751      	lsls	r1, r2, #29
 8011782:	d512      	bpl.n	80117aa <__swsetup_r+0x7a>
 8011784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011786:	b141      	cbz	r1, 801179a <__swsetup_r+0x6a>
 8011788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801178c:	4299      	cmp	r1, r3
 801178e:	d002      	beq.n	8011796 <__swsetup_r+0x66>
 8011790:	4630      	mov	r0, r6
 8011792:	f000 fa21 	bl	8011bd8 <_free_r>
 8011796:	2300      	movs	r3, #0
 8011798:	6363      	str	r3, [r4, #52]	; 0x34
 801179a:	89a3      	ldrh	r3, [r4, #12]
 801179c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80117a0:	81a3      	strh	r3, [r4, #12]
 80117a2:	2300      	movs	r3, #0
 80117a4:	6063      	str	r3, [r4, #4]
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	6023      	str	r3, [r4, #0]
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f043 0308 	orr.w	r3, r3, #8
 80117b0:	81a3      	strh	r3, [r4, #12]
 80117b2:	6923      	ldr	r3, [r4, #16]
 80117b4:	b94b      	cbnz	r3, 80117ca <__swsetup_r+0x9a>
 80117b6:	89a3      	ldrh	r3, [r4, #12]
 80117b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117c0:	d003      	beq.n	80117ca <__swsetup_r+0x9a>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4630      	mov	r0, r6
 80117c6:	f000 f9bf 	bl	8011b48 <__smakebuf_r>
 80117ca:	89a2      	ldrh	r2, [r4, #12]
 80117cc:	f012 0301 	ands.w	r3, r2, #1
 80117d0:	d00c      	beq.n	80117ec <__swsetup_r+0xbc>
 80117d2:	2300      	movs	r3, #0
 80117d4:	60a3      	str	r3, [r4, #8]
 80117d6:	6963      	ldr	r3, [r4, #20]
 80117d8:	425b      	negs	r3, r3
 80117da:	61a3      	str	r3, [r4, #24]
 80117dc:	6923      	ldr	r3, [r4, #16]
 80117de:	b953      	cbnz	r3, 80117f6 <__swsetup_r+0xc6>
 80117e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80117e8:	d1ba      	bne.n	8011760 <__swsetup_r+0x30>
 80117ea:	bd70      	pop	{r4, r5, r6, pc}
 80117ec:	0792      	lsls	r2, r2, #30
 80117ee:	bf58      	it	pl
 80117f0:	6963      	ldrpl	r3, [r4, #20]
 80117f2:	60a3      	str	r3, [r4, #8]
 80117f4:	e7f2      	b.n	80117dc <__swsetup_r+0xac>
 80117f6:	2000      	movs	r0, #0
 80117f8:	e7f7      	b.n	80117ea <__swsetup_r+0xba>
 80117fa:	bf00      	nop
 80117fc:	200000bc 	.word	0x200000bc
 8011800:	08012cb4 	.word	0x08012cb4
 8011804:	08012cd4 	.word	0x08012cd4
 8011808:	08012c94 	.word	0x08012c94

0801180c <__sflush_r>:
 801180c:	898a      	ldrh	r2, [r1, #12]
 801180e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011812:	4605      	mov	r5, r0
 8011814:	0710      	lsls	r0, r2, #28
 8011816:	460c      	mov	r4, r1
 8011818:	d458      	bmi.n	80118cc <__sflush_r+0xc0>
 801181a:	684b      	ldr	r3, [r1, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	dc05      	bgt.n	801182c <__sflush_r+0x20>
 8011820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011822:	2b00      	cmp	r3, #0
 8011824:	dc02      	bgt.n	801182c <__sflush_r+0x20>
 8011826:	2000      	movs	r0, #0
 8011828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801182c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801182e:	2e00      	cmp	r6, #0
 8011830:	d0f9      	beq.n	8011826 <__sflush_r+0x1a>
 8011832:	2300      	movs	r3, #0
 8011834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011838:	682f      	ldr	r7, [r5, #0]
 801183a:	6a21      	ldr	r1, [r4, #32]
 801183c:	602b      	str	r3, [r5, #0]
 801183e:	d032      	beq.n	80118a6 <__sflush_r+0x9a>
 8011840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011842:	89a3      	ldrh	r3, [r4, #12]
 8011844:	075a      	lsls	r2, r3, #29
 8011846:	d505      	bpl.n	8011854 <__sflush_r+0x48>
 8011848:	6863      	ldr	r3, [r4, #4]
 801184a:	1ac0      	subs	r0, r0, r3
 801184c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801184e:	b10b      	cbz	r3, 8011854 <__sflush_r+0x48>
 8011850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011852:	1ac0      	subs	r0, r0, r3
 8011854:	2300      	movs	r3, #0
 8011856:	4602      	mov	r2, r0
 8011858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801185a:	6a21      	ldr	r1, [r4, #32]
 801185c:	4628      	mov	r0, r5
 801185e:	47b0      	blx	r6
 8011860:	1c43      	adds	r3, r0, #1
 8011862:	89a3      	ldrh	r3, [r4, #12]
 8011864:	d106      	bne.n	8011874 <__sflush_r+0x68>
 8011866:	6829      	ldr	r1, [r5, #0]
 8011868:	291d      	cmp	r1, #29
 801186a:	d848      	bhi.n	80118fe <__sflush_r+0xf2>
 801186c:	4a29      	ldr	r2, [pc, #164]	; (8011914 <__sflush_r+0x108>)
 801186e:	40ca      	lsrs	r2, r1
 8011870:	07d6      	lsls	r6, r2, #31
 8011872:	d544      	bpl.n	80118fe <__sflush_r+0xf2>
 8011874:	2200      	movs	r2, #0
 8011876:	6062      	str	r2, [r4, #4]
 8011878:	04d9      	lsls	r1, r3, #19
 801187a:	6922      	ldr	r2, [r4, #16]
 801187c:	6022      	str	r2, [r4, #0]
 801187e:	d504      	bpl.n	801188a <__sflush_r+0x7e>
 8011880:	1c42      	adds	r2, r0, #1
 8011882:	d101      	bne.n	8011888 <__sflush_r+0x7c>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	b903      	cbnz	r3, 801188a <__sflush_r+0x7e>
 8011888:	6560      	str	r0, [r4, #84]	; 0x54
 801188a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801188c:	602f      	str	r7, [r5, #0]
 801188e:	2900      	cmp	r1, #0
 8011890:	d0c9      	beq.n	8011826 <__sflush_r+0x1a>
 8011892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011896:	4299      	cmp	r1, r3
 8011898:	d002      	beq.n	80118a0 <__sflush_r+0x94>
 801189a:	4628      	mov	r0, r5
 801189c:	f000 f99c 	bl	8011bd8 <_free_r>
 80118a0:	2000      	movs	r0, #0
 80118a2:	6360      	str	r0, [r4, #52]	; 0x34
 80118a4:	e7c0      	b.n	8011828 <__sflush_r+0x1c>
 80118a6:	2301      	movs	r3, #1
 80118a8:	4628      	mov	r0, r5
 80118aa:	47b0      	blx	r6
 80118ac:	1c41      	adds	r1, r0, #1
 80118ae:	d1c8      	bne.n	8011842 <__sflush_r+0x36>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d0c5      	beq.n	8011842 <__sflush_r+0x36>
 80118b6:	2b1d      	cmp	r3, #29
 80118b8:	d001      	beq.n	80118be <__sflush_r+0xb2>
 80118ba:	2b16      	cmp	r3, #22
 80118bc:	d101      	bne.n	80118c2 <__sflush_r+0xb6>
 80118be:	602f      	str	r7, [r5, #0]
 80118c0:	e7b1      	b.n	8011826 <__sflush_r+0x1a>
 80118c2:	89a3      	ldrh	r3, [r4, #12]
 80118c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118c8:	81a3      	strh	r3, [r4, #12]
 80118ca:	e7ad      	b.n	8011828 <__sflush_r+0x1c>
 80118cc:	690f      	ldr	r7, [r1, #16]
 80118ce:	2f00      	cmp	r7, #0
 80118d0:	d0a9      	beq.n	8011826 <__sflush_r+0x1a>
 80118d2:	0793      	lsls	r3, r2, #30
 80118d4:	680e      	ldr	r6, [r1, #0]
 80118d6:	bf08      	it	eq
 80118d8:	694b      	ldreq	r3, [r1, #20]
 80118da:	600f      	str	r7, [r1, #0]
 80118dc:	bf18      	it	ne
 80118de:	2300      	movne	r3, #0
 80118e0:	eba6 0807 	sub.w	r8, r6, r7
 80118e4:	608b      	str	r3, [r1, #8]
 80118e6:	f1b8 0f00 	cmp.w	r8, #0
 80118ea:	dd9c      	ble.n	8011826 <__sflush_r+0x1a>
 80118ec:	4643      	mov	r3, r8
 80118ee:	463a      	mov	r2, r7
 80118f0:	6a21      	ldr	r1, [r4, #32]
 80118f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118f4:	4628      	mov	r0, r5
 80118f6:	47b0      	blx	r6
 80118f8:	2800      	cmp	r0, #0
 80118fa:	dc06      	bgt.n	801190a <__sflush_r+0xfe>
 80118fc:	89a3      	ldrh	r3, [r4, #12]
 80118fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011902:	81a3      	strh	r3, [r4, #12]
 8011904:	f04f 30ff 	mov.w	r0, #4294967295
 8011908:	e78e      	b.n	8011828 <__sflush_r+0x1c>
 801190a:	4407      	add	r7, r0
 801190c:	eba8 0800 	sub.w	r8, r8, r0
 8011910:	e7e9      	b.n	80118e6 <__sflush_r+0xda>
 8011912:	bf00      	nop
 8011914:	20400001 	.word	0x20400001

08011918 <_fflush_r>:
 8011918:	b538      	push	{r3, r4, r5, lr}
 801191a:	690b      	ldr	r3, [r1, #16]
 801191c:	4605      	mov	r5, r0
 801191e:	460c      	mov	r4, r1
 8011920:	b1db      	cbz	r3, 801195a <_fflush_r+0x42>
 8011922:	b118      	cbz	r0, 801192c <_fflush_r+0x14>
 8011924:	6983      	ldr	r3, [r0, #24]
 8011926:	b90b      	cbnz	r3, 801192c <_fflush_r+0x14>
 8011928:	f000 f860 	bl	80119ec <__sinit>
 801192c:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <_fflush_r+0x48>)
 801192e:	429c      	cmp	r4, r3
 8011930:	d109      	bne.n	8011946 <_fflush_r+0x2e>
 8011932:	686c      	ldr	r4, [r5, #4]
 8011934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011938:	b17b      	cbz	r3, 801195a <_fflush_r+0x42>
 801193a:	4621      	mov	r1, r4
 801193c:	4628      	mov	r0, r5
 801193e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011942:	f7ff bf63 	b.w	801180c <__sflush_r>
 8011946:	4b07      	ldr	r3, [pc, #28]	; (8011964 <_fflush_r+0x4c>)
 8011948:	429c      	cmp	r4, r3
 801194a:	d101      	bne.n	8011950 <_fflush_r+0x38>
 801194c:	68ac      	ldr	r4, [r5, #8]
 801194e:	e7f1      	b.n	8011934 <_fflush_r+0x1c>
 8011950:	4b05      	ldr	r3, [pc, #20]	; (8011968 <_fflush_r+0x50>)
 8011952:	429c      	cmp	r4, r3
 8011954:	bf08      	it	eq
 8011956:	68ec      	ldreq	r4, [r5, #12]
 8011958:	e7ec      	b.n	8011934 <_fflush_r+0x1c>
 801195a:	2000      	movs	r0, #0
 801195c:	bd38      	pop	{r3, r4, r5, pc}
 801195e:	bf00      	nop
 8011960:	08012cb4 	.word	0x08012cb4
 8011964:	08012cd4 	.word	0x08012cd4
 8011968:	08012c94 	.word	0x08012c94

0801196c <std>:
 801196c:	2300      	movs	r3, #0
 801196e:	b510      	push	{r4, lr}
 8011970:	4604      	mov	r4, r0
 8011972:	e9c0 3300 	strd	r3, r3, [r0]
 8011976:	6083      	str	r3, [r0, #8]
 8011978:	8181      	strh	r1, [r0, #12]
 801197a:	6643      	str	r3, [r0, #100]	; 0x64
 801197c:	81c2      	strh	r2, [r0, #14]
 801197e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011982:	6183      	str	r3, [r0, #24]
 8011984:	4619      	mov	r1, r3
 8011986:	2208      	movs	r2, #8
 8011988:	305c      	adds	r0, #92	; 0x5c
 801198a:	f7ff fd45 	bl	8011418 <memset>
 801198e:	4b05      	ldr	r3, [pc, #20]	; (80119a4 <std+0x38>)
 8011990:	6263      	str	r3, [r4, #36]	; 0x24
 8011992:	4b05      	ldr	r3, [pc, #20]	; (80119a8 <std+0x3c>)
 8011994:	62a3      	str	r3, [r4, #40]	; 0x28
 8011996:	4b05      	ldr	r3, [pc, #20]	; (80119ac <std+0x40>)
 8011998:	62e3      	str	r3, [r4, #44]	; 0x2c
 801199a:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <std+0x44>)
 801199c:	6224      	str	r4, [r4, #32]
 801199e:	6323      	str	r3, [r4, #48]	; 0x30
 80119a0:	bd10      	pop	{r4, pc}
 80119a2:	bf00      	nop
 80119a4:	080122d9 	.word	0x080122d9
 80119a8:	080122fb 	.word	0x080122fb
 80119ac:	08012333 	.word	0x08012333
 80119b0:	08012357 	.word	0x08012357

080119b4 <_cleanup_r>:
 80119b4:	4901      	ldr	r1, [pc, #4]	; (80119bc <_cleanup_r+0x8>)
 80119b6:	f000 b885 	b.w	8011ac4 <_fwalk_reent>
 80119ba:	bf00      	nop
 80119bc:	08011919 	.word	0x08011919

080119c0 <__sfmoreglue>:
 80119c0:	b570      	push	{r4, r5, r6, lr}
 80119c2:	1e4a      	subs	r2, r1, #1
 80119c4:	2568      	movs	r5, #104	; 0x68
 80119c6:	4355      	muls	r5, r2
 80119c8:	460e      	mov	r6, r1
 80119ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80119ce:	f000 f951 	bl	8011c74 <_malloc_r>
 80119d2:	4604      	mov	r4, r0
 80119d4:	b140      	cbz	r0, 80119e8 <__sfmoreglue+0x28>
 80119d6:	2100      	movs	r1, #0
 80119d8:	e9c0 1600 	strd	r1, r6, [r0]
 80119dc:	300c      	adds	r0, #12
 80119de:	60a0      	str	r0, [r4, #8]
 80119e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80119e4:	f7ff fd18 	bl	8011418 <memset>
 80119e8:	4620      	mov	r0, r4
 80119ea:	bd70      	pop	{r4, r5, r6, pc}

080119ec <__sinit>:
 80119ec:	6983      	ldr	r3, [r0, #24]
 80119ee:	b510      	push	{r4, lr}
 80119f0:	4604      	mov	r4, r0
 80119f2:	bb33      	cbnz	r3, 8011a42 <__sinit+0x56>
 80119f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80119f8:	6503      	str	r3, [r0, #80]	; 0x50
 80119fa:	4b12      	ldr	r3, [pc, #72]	; (8011a44 <__sinit+0x58>)
 80119fc:	4a12      	ldr	r2, [pc, #72]	; (8011a48 <__sinit+0x5c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	6282      	str	r2, [r0, #40]	; 0x28
 8011a02:	4298      	cmp	r0, r3
 8011a04:	bf04      	itt	eq
 8011a06:	2301      	moveq	r3, #1
 8011a08:	6183      	streq	r3, [r0, #24]
 8011a0a:	f000 f81f 	bl	8011a4c <__sfp>
 8011a0e:	6060      	str	r0, [r4, #4]
 8011a10:	4620      	mov	r0, r4
 8011a12:	f000 f81b 	bl	8011a4c <__sfp>
 8011a16:	60a0      	str	r0, [r4, #8]
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f000 f817 	bl	8011a4c <__sfp>
 8011a1e:	2200      	movs	r2, #0
 8011a20:	60e0      	str	r0, [r4, #12]
 8011a22:	2104      	movs	r1, #4
 8011a24:	6860      	ldr	r0, [r4, #4]
 8011a26:	f7ff ffa1 	bl	801196c <std>
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	2109      	movs	r1, #9
 8011a2e:	68a0      	ldr	r0, [r4, #8]
 8011a30:	f7ff ff9c 	bl	801196c <std>
 8011a34:	2202      	movs	r2, #2
 8011a36:	2112      	movs	r1, #18
 8011a38:	68e0      	ldr	r0, [r4, #12]
 8011a3a:	f7ff ff97 	bl	801196c <std>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	61a3      	str	r3, [r4, #24]
 8011a42:	bd10      	pop	{r4, pc}
 8011a44:	08012c90 	.word	0x08012c90
 8011a48:	080119b5 	.word	0x080119b5

08011a4c <__sfp>:
 8011a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a4e:	4b1b      	ldr	r3, [pc, #108]	; (8011abc <__sfp+0x70>)
 8011a50:	681e      	ldr	r6, [r3, #0]
 8011a52:	69b3      	ldr	r3, [r6, #24]
 8011a54:	4607      	mov	r7, r0
 8011a56:	b913      	cbnz	r3, 8011a5e <__sfp+0x12>
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f7ff ffc7 	bl	80119ec <__sinit>
 8011a5e:	3648      	adds	r6, #72	; 0x48
 8011a60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	d503      	bpl.n	8011a70 <__sfp+0x24>
 8011a68:	6833      	ldr	r3, [r6, #0]
 8011a6a:	b133      	cbz	r3, 8011a7a <__sfp+0x2e>
 8011a6c:	6836      	ldr	r6, [r6, #0]
 8011a6e:	e7f7      	b.n	8011a60 <__sfp+0x14>
 8011a70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a74:	b16d      	cbz	r5, 8011a92 <__sfp+0x46>
 8011a76:	3468      	adds	r4, #104	; 0x68
 8011a78:	e7f4      	b.n	8011a64 <__sfp+0x18>
 8011a7a:	2104      	movs	r1, #4
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7ff ff9f 	bl	80119c0 <__sfmoreglue>
 8011a82:	6030      	str	r0, [r6, #0]
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d1f1      	bne.n	8011a6c <__sfp+0x20>
 8011a88:	230c      	movs	r3, #12
 8011a8a:	603b      	str	r3, [r7, #0]
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	4620      	mov	r0, r4
 8011a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a92:	4b0b      	ldr	r3, [pc, #44]	; (8011ac0 <__sfp+0x74>)
 8011a94:	6665      	str	r5, [r4, #100]	; 0x64
 8011a96:	e9c4 5500 	strd	r5, r5, [r4]
 8011a9a:	60a5      	str	r5, [r4, #8]
 8011a9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011aa0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011aa4:	2208      	movs	r2, #8
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011aac:	f7ff fcb4 	bl	8011418 <memset>
 8011ab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ab8:	e7e9      	b.n	8011a8e <__sfp+0x42>
 8011aba:	bf00      	nop
 8011abc:	08012c90 	.word	0x08012c90
 8011ac0:	ffff0001 	.word	0xffff0001

08011ac4 <_fwalk_reent>:
 8011ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ac8:	4680      	mov	r8, r0
 8011aca:	4689      	mov	r9, r1
 8011acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ad0:	2600      	movs	r6, #0
 8011ad2:	b914      	cbnz	r4, 8011ada <_fwalk_reent+0x16>
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ada:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011ade:	3f01      	subs	r7, #1
 8011ae0:	d501      	bpl.n	8011ae6 <_fwalk_reent+0x22>
 8011ae2:	6824      	ldr	r4, [r4, #0]
 8011ae4:	e7f5      	b.n	8011ad2 <_fwalk_reent+0xe>
 8011ae6:	89ab      	ldrh	r3, [r5, #12]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	d907      	bls.n	8011afc <_fwalk_reent+0x38>
 8011aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011af0:	3301      	adds	r3, #1
 8011af2:	d003      	beq.n	8011afc <_fwalk_reent+0x38>
 8011af4:	4629      	mov	r1, r5
 8011af6:	4640      	mov	r0, r8
 8011af8:	47c8      	blx	r9
 8011afa:	4306      	orrs	r6, r0
 8011afc:	3568      	adds	r5, #104	; 0x68
 8011afe:	e7ee      	b.n	8011ade <_fwalk_reent+0x1a>

08011b00 <__swhatbuf_r>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	460e      	mov	r6, r1
 8011b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	b096      	sub	sp, #88	; 0x58
 8011b0c:	4614      	mov	r4, r2
 8011b0e:	461d      	mov	r5, r3
 8011b10:	da07      	bge.n	8011b22 <__swhatbuf_r+0x22>
 8011b12:	2300      	movs	r3, #0
 8011b14:	602b      	str	r3, [r5, #0]
 8011b16:	89b3      	ldrh	r3, [r6, #12]
 8011b18:	061a      	lsls	r2, r3, #24
 8011b1a:	d410      	bmi.n	8011b3e <__swhatbuf_r+0x3e>
 8011b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b20:	e00e      	b.n	8011b40 <__swhatbuf_r+0x40>
 8011b22:	466a      	mov	r2, sp
 8011b24:	f000 fc3e 	bl	80123a4 <_fstat_r>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	dbf2      	blt.n	8011b12 <__swhatbuf_r+0x12>
 8011b2c:	9a01      	ldr	r2, [sp, #4]
 8011b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011b36:	425a      	negs	r2, r3
 8011b38:	415a      	adcs	r2, r3
 8011b3a:	602a      	str	r2, [r5, #0]
 8011b3c:	e7ee      	b.n	8011b1c <__swhatbuf_r+0x1c>
 8011b3e:	2340      	movs	r3, #64	; 0x40
 8011b40:	2000      	movs	r0, #0
 8011b42:	6023      	str	r3, [r4, #0]
 8011b44:	b016      	add	sp, #88	; 0x58
 8011b46:	bd70      	pop	{r4, r5, r6, pc}

08011b48 <__smakebuf_r>:
 8011b48:	898b      	ldrh	r3, [r1, #12]
 8011b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b4c:	079d      	lsls	r5, r3, #30
 8011b4e:	4606      	mov	r6, r0
 8011b50:	460c      	mov	r4, r1
 8011b52:	d507      	bpl.n	8011b64 <__smakebuf_r+0x1c>
 8011b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b58:	6023      	str	r3, [r4, #0]
 8011b5a:	6123      	str	r3, [r4, #16]
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	6163      	str	r3, [r4, #20]
 8011b60:	b002      	add	sp, #8
 8011b62:	bd70      	pop	{r4, r5, r6, pc}
 8011b64:	ab01      	add	r3, sp, #4
 8011b66:	466a      	mov	r2, sp
 8011b68:	f7ff ffca 	bl	8011b00 <__swhatbuf_r>
 8011b6c:	9900      	ldr	r1, [sp, #0]
 8011b6e:	4605      	mov	r5, r0
 8011b70:	4630      	mov	r0, r6
 8011b72:	f000 f87f 	bl	8011c74 <_malloc_r>
 8011b76:	b948      	cbnz	r0, 8011b8c <__smakebuf_r+0x44>
 8011b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b7c:	059a      	lsls	r2, r3, #22
 8011b7e:	d4ef      	bmi.n	8011b60 <__smakebuf_r+0x18>
 8011b80:	f023 0303 	bic.w	r3, r3, #3
 8011b84:	f043 0302 	orr.w	r3, r3, #2
 8011b88:	81a3      	strh	r3, [r4, #12]
 8011b8a:	e7e3      	b.n	8011b54 <__smakebuf_r+0xc>
 8011b8c:	4b0d      	ldr	r3, [pc, #52]	; (8011bc4 <__smakebuf_r+0x7c>)
 8011b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b90:	89a3      	ldrh	r3, [r4, #12]
 8011b92:	6020      	str	r0, [r4, #0]
 8011b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b98:	81a3      	strh	r3, [r4, #12]
 8011b9a:	9b00      	ldr	r3, [sp, #0]
 8011b9c:	6163      	str	r3, [r4, #20]
 8011b9e:	9b01      	ldr	r3, [sp, #4]
 8011ba0:	6120      	str	r0, [r4, #16]
 8011ba2:	b15b      	cbz	r3, 8011bbc <__smakebuf_r+0x74>
 8011ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ba8:	4630      	mov	r0, r6
 8011baa:	f000 fc0d 	bl	80123c8 <_isatty_r>
 8011bae:	b128      	cbz	r0, 8011bbc <__smakebuf_r+0x74>
 8011bb0:	89a3      	ldrh	r3, [r4, #12]
 8011bb2:	f023 0303 	bic.w	r3, r3, #3
 8011bb6:	f043 0301 	orr.w	r3, r3, #1
 8011bba:	81a3      	strh	r3, [r4, #12]
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	431d      	orrs	r5, r3
 8011bc0:	81a5      	strh	r5, [r4, #12]
 8011bc2:	e7cd      	b.n	8011b60 <__smakebuf_r+0x18>
 8011bc4:	080119b5 	.word	0x080119b5

08011bc8 <malloc>:
 8011bc8:	4b02      	ldr	r3, [pc, #8]	; (8011bd4 <malloc+0xc>)
 8011bca:	4601      	mov	r1, r0
 8011bcc:	6818      	ldr	r0, [r3, #0]
 8011bce:	f000 b851 	b.w	8011c74 <_malloc_r>
 8011bd2:	bf00      	nop
 8011bd4:	200000bc 	.word	0x200000bc

08011bd8 <_free_r>:
 8011bd8:	b538      	push	{r3, r4, r5, lr}
 8011bda:	4605      	mov	r5, r0
 8011bdc:	2900      	cmp	r1, #0
 8011bde:	d045      	beq.n	8011c6c <_free_r+0x94>
 8011be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011be4:	1f0c      	subs	r4, r1, #4
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	bfb8      	it	lt
 8011bea:	18e4      	addlt	r4, r4, r3
 8011bec:	f000 fc0e 	bl	801240c <__malloc_lock>
 8011bf0:	4a1f      	ldr	r2, [pc, #124]	; (8011c70 <_free_r+0x98>)
 8011bf2:	6813      	ldr	r3, [r2, #0]
 8011bf4:	4610      	mov	r0, r2
 8011bf6:	b933      	cbnz	r3, 8011c06 <_free_r+0x2e>
 8011bf8:	6063      	str	r3, [r4, #4]
 8011bfa:	6014      	str	r4, [r2, #0]
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c02:	f000 bc04 	b.w	801240e <__malloc_unlock>
 8011c06:	42a3      	cmp	r3, r4
 8011c08:	d90c      	bls.n	8011c24 <_free_r+0x4c>
 8011c0a:	6821      	ldr	r1, [r4, #0]
 8011c0c:	1862      	adds	r2, r4, r1
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	bf04      	itt	eq
 8011c12:	681a      	ldreq	r2, [r3, #0]
 8011c14:	685b      	ldreq	r3, [r3, #4]
 8011c16:	6063      	str	r3, [r4, #4]
 8011c18:	bf04      	itt	eq
 8011c1a:	1852      	addeq	r2, r2, r1
 8011c1c:	6022      	streq	r2, [r4, #0]
 8011c1e:	6004      	str	r4, [r0, #0]
 8011c20:	e7ec      	b.n	8011bfc <_free_r+0x24>
 8011c22:	4613      	mov	r3, r2
 8011c24:	685a      	ldr	r2, [r3, #4]
 8011c26:	b10a      	cbz	r2, 8011c2c <_free_r+0x54>
 8011c28:	42a2      	cmp	r2, r4
 8011c2a:	d9fa      	bls.n	8011c22 <_free_r+0x4a>
 8011c2c:	6819      	ldr	r1, [r3, #0]
 8011c2e:	1858      	adds	r0, r3, r1
 8011c30:	42a0      	cmp	r0, r4
 8011c32:	d10b      	bne.n	8011c4c <_free_r+0x74>
 8011c34:	6820      	ldr	r0, [r4, #0]
 8011c36:	4401      	add	r1, r0
 8011c38:	1858      	adds	r0, r3, r1
 8011c3a:	4282      	cmp	r2, r0
 8011c3c:	6019      	str	r1, [r3, #0]
 8011c3e:	d1dd      	bne.n	8011bfc <_free_r+0x24>
 8011c40:	6810      	ldr	r0, [r2, #0]
 8011c42:	6852      	ldr	r2, [r2, #4]
 8011c44:	605a      	str	r2, [r3, #4]
 8011c46:	4401      	add	r1, r0
 8011c48:	6019      	str	r1, [r3, #0]
 8011c4a:	e7d7      	b.n	8011bfc <_free_r+0x24>
 8011c4c:	d902      	bls.n	8011c54 <_free_r+0x7c>
 8011c4e:	230c      	movs	r3, #12
 8011c50:	602b      	str	r3, [r5, #0]
 8011c52:	e7d3      	b.n	8011bfc <_free_r+0x24>
 8011c54:	6820      	ldr	r0, [r4, #0]
 8011c56:	1821      	adds	r1, r4, r0
 8011c58:	428a      	cmp	r2, r1
 8011c5a:	bf04      	itt	eq
 8011c5c:	6811      	ldreq	r1, [r2, #0]
 8011c5e:	6852      	ldreq	r2, [r2, #4]
 8011c60:	6062      	str	r2, [r4, #4]
 8011c62:	bf04      	itt	eq
 8011c64:	1809      	addeq	r1, r1, r0
 8011c66:	6021      	streq	r1, [r4, #0]
 8011c68:	605c      	str	r4, [r3, #4]
 8011c6a:	e7c7      	b.n	8011bfc <_free_r+0x24>
 8011c6c:	bd38      	pop	{r3, r4, r5, pc}
 8011c6e:	bf00      	nop
 8011c70:	20000150 	.word	0x20000150

08011c74 <_malloc_r>:
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	1ccd      	adds	r5, r1, #3
 8011c78:	f025 0503 	bic.w	r5, r5, #3
 8011c7c:	3508      	adds	r5, #8
 8011c7e:	2d0c      	cmp	r5, #12
 8011c80:	bf38      	it	cc
 8011c82:	250c      	movcc	r5, #12
 8011c84:	2d00      	cmp	r5, #0
 8011c86:	4606      	mov	r6, r0
 8011c88:	db01      	blt.n	8011c8e <_malloc_r+0x1a>
 8011c8a:	42a9      	cmp	r1, r5
 8011c8c:	d903      	bls.n	8011c96 <_malloc_r+0x22>
 8011c8e:	230c      	movs	r3, #12
 8011c90:	6033      	str	r3, [r6, #0]
 8011c92:	2000      	movs	r0, #0
 8011c94:	bd70      	pop	{r4, r5, r6, pc}
 8011c96:	f000 fbb9 	bl	801240c <__malloc_lock>
 8011c9a:	4a21      	ldr	r2, [pc, #132]	; (8011d20 <_malloc_r+0xac>)
 8011c9c:	6814      	ldr	r4, [r2, #0]
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	b991      	cbnz	r1, 8011cc8 <_malloc_r+0x54>
 8011ca2:	4c20      	ldr	r4, [pc, #128]	; (8011d24 <_malloc_r+0xb0>)
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	b91b      	cbnz	r3, 8011cb0 <_malloc_r+0x3c>
 8011ca8:	4630      	mov	r0, r6
 8011caa:	f000 fb05 	bl	80122b8 <_sbrk_r>
 8011cae:	6020      	str	r0, [r4, #0]
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f000 fb00 	bl	80122b8 <_sbrk_r>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d124      	bne.n	8011d06 <_malloc_r+0x92>
 8011cbc:	230c      	movs	r3, #12
 8011cbe:	6033      	str	r3, [r6, #0]
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f000 fba4 	bl	801240e <__malloc_unlock>
 8011cc6:	e7e4      	b.n	8011c92 <_malloc_r+0x1e>
 8011cc8:	680b      	ldr	r3, [r1, #0]
 8011cca:	1b5b      	subs	r3, r3, r5
 8011ccc:	d418      	bmi.n	8011d00 <_malloc_r+0x8c>
 8011cce:	2b0b      	cmp	r3, #11
 8011cd0:	d90f      	bls.n	8011cf2 <_malloc_r+0x7e>
 8011cd2:	600b      	str	r3, [r1, #0]
 8011cd4:	50cd      	str	r5, [r1, r3]
 8011cd6:	18cc      	adds	r4, r1, r3
 8011cd8:	4630      	mov	r0, r6
 8011cda:	f000 fb98 	bl	801240e <__malloc_unlock>
 8011cde:	f104 000b 	add.w	r0, r4, #11
 8011ce2:	1d23      	adds	r3, r4, #4
 8011ce4:	f020 0007 	bic.w	r0, r0, #7
 8011ce8:	1ac3      	subs	r3, r0, r3
 8011cea:	d0d3      	beq.n	8011c94 <_malloc_r+0x20>
 8011cec:	425a      	negs	r2, r3
 8011cee:	50e2      	str	r2, [r4, r3]
 8011cf0:	e7d0      	b.n	8011c94 <_malloc_r+0x20>
 8011cf2:	428c      	cmp	r4, r1
 8011cf4:	684b      	ldr	r3, [r1, #4]
 8011cf6:	bf16      	itet	ne
 8011cf8:	6063      	strne	r3, [r4, #4]
 8011cfa:	6013      	streq	r3, [r2, #0]
 8011cfc:	460c      	movne	r4, r1
 8011cfe:	e7eb      	b.n	8011cd8 <_malloc_r+0x64>
 8011d00:	460c      	mov	r4, r1
 8011d02:	6849      	ldr	r1, [r1, #4]
 8011d04:	e7cc      	b.n	8011ca0 <_malloc_r+0x2c>
 8011d06:	1cc4      	adds	r4, r0, #3
 8011d08:	f024 0403 	bic.w	r4, r4, #3
 8011d0c:	42a0      	cmp	r0, r4
 8011d0e:	d005      	beq.n	8011d1c <_malloc_r+0xa8>
 8011d10:	1a21      	subs	r1, r4, r0
 8011d12:	4630      	mov	r0, r6
 8011d14:	f000 fad0 	bl	80122b8 <_sbrk_r>
 8011d18:	3001      	adds	r0, #1
 8011d1a:	d0cf      	beq.n	8011cbc <_malloc_r+0x48>
 8011d1c:	6025      	str	r5, [r4, #0]
 8011d1e:	e7db      	b.n	8011cd8 <_malloc_r+0x64>
 8011d20:	20000150 	.word	0x20000150
 8011d24:	20000154 	.word	0x20000154

08011d28 <__sfputc_r>:
 8011d28:	6893      	ldr	r3, [r2, #8]
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	b410      	push	{r4}
 8011d30:	6093      	str	r3, [r2, #8]
 8011d32:	da08      	bge.n	8011d46 <__sfputc_r+0x1e>
 8011d34:	6994      	ldr	r4, [r2, #24]
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	db01      	blt.n	8011d3e <__sfputc_r+0x16>
 8011d3a:	290a      	cmp	r1, #10
 8011d3c:	d103      	bne.n	8011d46 <__sfputc_r+0x1e>
 8011d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d42:	f7ff bca3 	b.w	801168c <__swbuf_r>
 8011d46:	6813      	ldr	r3, [r2, #0]
 8011d48:	1c58      	adds	r0, r3, #1
 8011d4a:	6010      	str	r0, [r2, #0]
 8011d4c:	7019      	strb	r1, [r3, #0]
 8011d4e:	4608      	mov	r0, r1
 8011d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d54:	4770      	bx	lr

08011d56 <__sfputs_r>:
 8011d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d58:	4606      	mov	r6, r0
 8011d5a:	460f      	mov	r7, r1
 8011d5c:	4614      	mov	r4, r2
 8011d5e:	18d5      	adds	r5, r2, r3
 8011d60:	42ac      	cmp	r4, r5
 8011d62:	d101      	bne.n	8011d68 <__sfputs_r+0x12>
 8011d64:	2000      	movs	r0, #0
 8011d66:	e007      	b.n	8011d78 <__sfputs_r+0x22>
 8011d68:	463a      	mov	r2, r7
 8011d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f7ff ffda 	bl	8011d28 <__sfputc_r>
 8011d74:	1c43      	adds	r3, r0, #1
 8011d76:	d1f3      	bne.n	8011d60 <__sfputs_r+0xa>
 8011d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d7c <_vfiprintf_r>:
 8011d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d80:	460c      	mov	r4, r1
 8011d82:	b09d      	sub	sp, #116	; 0x74
 8011d84:	4617      	mov	r7, r2
 8011d86:	461d      	mov	r5, r3
 8011d88:	4606      	mov	r6, r0
 8011d8a:	b118      	cbz	r0, 8011d94 <_vfiprintf_r+0x18>
 8011d8c:	6983      	ldr	r3, [r0, #24]
 8011d8e:	b90b      	cbnz	r3, 8011d94 <_vfiprintf_r+0x18>
 8011d90:	f7ff fe2c 	bl	80119ec <__sinit>
 8011d94:	4b7c      	ldr	r3, [pc, #496]	; (8011f88 <_vfiprintf_r+0x20c>)
 8011d96:	429c      	cmp	r4, r3
 8011d98:	d158      	bne.n	8011e4c <_vfiprintf_r+0xd0>
 8011d9a:	6874      	ldr	r4, [r6, #4]
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	0718      	lsls	r0, r3, #28
 8011da0:	d55e      	bpl.n	8011e60 <_vfiprintf_r+0xe4>
 8011da2:	6923      	ldr	r3, [r4, #16]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d05b      	beq.n	8011e60 <_vfiprintf_r+0xe4>
 8011da8:	2300      	movs	r3, #0
 8011daa:	9309      	str	r3, [sp, #36]	; 0x24
 8011dac:	2320      	movs	r3, #32
 8011dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011db2:	2330      	movs	r3, #48	; 0x30
 8011db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011db8:	9503      	str	r5, [sp, #12]
 8011dba:	f04f 0b01 	mov.w	fp, #1
 8011dbe:	46b8      	mov	r8, r7
 8011dc0:	4645      	mov	r5, r8
 8011dc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011dc6:	b10b      	cbz	r3, 8011dcc <_vfiprintf_r+0x50>
 8011dc8:	2b25      	cmp	r3, #37	; 0x25
 8011dca:	d154      	bne.n	8011e76 <_vfiprintf_r+0xfa>
 8011dcc:	ebb8 0a07 	subs.w	sl, r8, r7
 8011dd0:	d00b      	beq.n	8011dea <_vfiprintf_r+0x6e>
 8011dd2:	4653      	mov	r3, sl
 8011dd4:	463a      	mov	r2, r7
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	4630      	mov	r0, r6
 8011dda:	f7ff ffbc 	bl	8011d56 <__sfputs_r>
 8011dde:	3001      	adds	r0, #1
 8011de0:	f000 80c2 	beq.w	8011f68 <_vfiprintf_r+0x1ec>
 8011de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de6:	4453      	add	r3, sl
 8011de8:	9309      	str	r3, [sp, #36]	; 0x24
 8011dea:	f898 3000 	ldrb.w	r3, [r8]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	f000 80ba 	beq.w	8011f68 <_vfiprintf_r+0x1ec>
 8011df4:	2300      	movs	r3, #0
 8011df6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dfe:	9304      	str	r3, [sp, #16]
 8011e00:	9307      	str	r3, [sp, #28]
 8011e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e06:	931a      	str	r3, [sp, #104]	; 0x68
 8011e08:	46a8      	mov	r8, r5
 8011e0a:	2205      	movs	r2, #5
 8011e0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011e10:	485e      	ldr	r0, [pc, #376]	; (8011f8c <_vfiprintf_r+0x210>)
 8011e12:	f7ee f9dd 	bl	80001d0 <memchr>
 8011e16:	9b04      	ldr	r3, [sp, #16]
 8011e18:	bb78      	cbnz	r0, 8011e7a <_vfiprintf_r+0xfe>
 8011e1a:	06d9      	lsls	r1, r3, #27
 8011e1c:	bf44      	itt	mi
 8011e1e:	2220      	movmi	r2, #32
 8011e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e24:	071a      	lsls	r2, r3, #28
 8011e26:	bf44      	itt	mi
 8011e28:	222b      	movmi	r2, #43	; 0x2b
 8011e2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e2e:	782a      	ldrb	r2, [r5, #0]
 8011e30:	2a2a      	cmp	r2, #42	; 0x2a
 8011e32:	d02a      	beq.n	8011e8a <_vfiprintf_r+0x10e>
 8011e34:	9a07      	ldr	r2, [sp, #28]
 8011e36:	46a8      	mov	r8, r5
 8011e38:	2000      	movs	r0, #0
 8011e3a:	250a      	movs	r5, #10
 8011e3c:	4641      	mov	r1, r8
 8011e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e42:	3b30      	subs	r3, #48	; 0x30
 8011e44:	2b09      	cmp	r3, #9
 8011e46:	d969      	bls.n	8011f1c <_vfiprintf_r+0x1a0>
 8011e48:	b360      	cbz	r0, 8011ea4 <_vfiprintf_r+0x128>
 8011e4a:	e024      	b.n	8011e96 <_vfiprintf_r+0x11a>
 8011e4c:	4b50      	ldr	r3, [pc, #320]	; (8011f90 <_vfiprintf_r+0x214>)
 8011e4e:	429c      	cmp	r4, r3
 8011e50:	d101      	bne.n	8011e56 <_vfiprintf_r+0xda>
 8011e52:	68b4      	ldr	r4, [r6, #8]
 8011e54:	e7a2      	b.n	8011d9c <_vfiprintf_r+0x20>
 8011e56:	4b4f      	ldr	r3, [pc, #316]	; (8011f94 <_vfiprintf_r+0x218>)
 8011e58:	429c      	cmp	r4, r3
 8011e5a:	bf08      	it	eq
 8011e5c:	68f4      	ldreq	r4, [r6, #12]
 8011e5e:	e79d      	b.n	8011d9c <_vfiprintf_r+0x20>
 8011e60:	4621      	mov	r1, r4
 8011e62:	4630      	mov	r0, r6
 8011e64:	f7ff fc64 	bl	8011730 <__swsetup_r>
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	d09d      	beq.n	8011da8 <_vfiprintf_r+0x2c>
 8011e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e70:	b01d      	add	sp, #116	; 0x74
 8011e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e76:	46a8      	mov	r8, r5
 8011e78:	e7a2      	b.n	8011dc0 <_vfiprintf_r+0x44>
 8011e7a:	4a44      	ldr	r2, [pc, #272]	; (8011f8c <_vfiprintf_r+0x210>)
 8011e7c:	1a80      	subs	r0, r0, r2
 8011e7e:	fa0b f000 	lsl.w	r0, fp, r0
 8011e82:	4318      	orrs	r0, r3
 8011e84:	9004      	str	r0, [sp, #16]
 8011e86:	4645      	mov	r5, r8
 8011e88:	e7be      	b.n	8011e08 <_vfiprintf_r+0x8c>
 8011e8a:	9a03      	ldr	r2, [sp, #12]
 8011e8c:	1d11      	adds	r1, r2, #4
 8011e8e:	6812      	ldr	r2, [r2, #0]
 8011e90:	9103      	str	r1, [sp, #12]
 8011e92:	2a00      	cmp	r2, #0
 8011e94:	db01      	blt.n	8011e9a <_vfiprintf_r+0x11e>
 8011e96:	9207      	str	r2, [sp, #28]
 8011e98:	e004      	b.n	8011ea4 <_vfiprintf_r+0x128>
 8011e9a:	4252      	negs	r2, r2
 8011e9c:	f043 0302 	orr.w	r3, r3, #2
 8011ea0:	9207      	str	r2, [sp, #28]
 8011ea2:	9304      	str	r3, [sp, #16]
 8011ea4:	f898 3000 	ldrb.w	r3, [r8]
 8011ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eaa:	d10e      	bne.n	8011eca <_vfiprintf_r+0x14e>
 8011eac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8011eb2:	d138      	bne.n	8011f26 <_vfiprintf_r+0x1aa>
 8011eb4:	9b03      	ldr	r3, [sp, #12]
 8011eb6:	1d1a      	adds	r2, r3, #4
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	9203      	str	r2, [sp, #12]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	bfb8      	it	lt
 8011ec0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ec4:	f108 0802 	add.w	r8, r8, #2
 8011ec8:	9305      	str	r3, [sp, #20]
 8011eca:	4d33      	ldr	r5, [pc, #204]	; (8011f98 <_vfiprintf_r+0x21c>)
 8011ecc:	f898 1000 	ldrb.w	r1, [r8]
 8011ed0:	2203      	movs	r2, #3
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	f7ee f97c 	bl	80001d0 <memchr>
 8011ed8:	b140      	cbz	r0, 8011eec <_vfiprintf_r+0x170>
 8011eda:	2340      	movs	r3, #64	; 0x40
 8011edc:	1b40      	subs	r0, r0, r5
 8011ede:	fa03 f000 	lsl.w	r0, r3, r0
 8011ee2:	9b04      	ldr	r3, [sp, #16]
 8011ee4:	4303      	orrs	r3, r0
 8011ee6:	f108 0801 	add.w	r8, r8, #1
 8011eea:	9304      	str	r3, [sp, #16]
 8011eec:	f898 1000 	ldrb.w	r1, [r8]
 8011ef0:	482a      	ldr	r0, [pc, #168]	; (8011f9c <_vfiprintf_r+0x220>)
 8011ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ef6:	2206      	movs	r2, #6
 8011ef8:	f108 0701 	add.w	r7, r8, #1
 8011efc:	f7ee f968 	bl	80001d0 <memchr>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d037      	beq.n	8011f74 <_vfiprintf_r+0x1f8>
 8011f04:	4b26      	ldr	r3, [pc, #152]	; (8011fa0 <_vfiprintf_r+0x224>)
 8011f06:	bb1b      	cbnz	r3, 8011f50 <_vfiprintf_r+0x1d4>
 8011f08:	9b03      	ldr	r3, [sp, #12]
 8011f0a:	3307      	adds	r3, #7
 8011f0c:	f023 0307 	bic.w	r3, r3, #7
 8011f10:	3308      	adds	r3, #8
 8011f12:	9303      	str	r3, [sp, #12]
 8011f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f16:	444b      	add	r3, r9
 8011f18:	9309      	str	r3, [sp, #36]	; 0x24
 8011f1a:	e750      	b.n	8011dbe <_vfiprintf_r+0x42>
 8011f1c:	fb05 3202 	mla	r2, r5, r2, r3
 8011f20:	2001      	movs	r0, #1
 8011f22:	4688      	mov	r8, r1
 8011f24:	e78a      	b.n	8011e3c <_vfiprintf_r+0xc0>
 8011f26:	2300      	movs	r3, #0
 8011f28:	f108 0801 	add.w	r8, r8, #1
 8011f2c:	9305      	str	r3, [sp, #20]
 8011f2e:	4619      	mov	r1, r3
 8011f30:	250a      	movs	r5, #10
 8011f32:	4640      	mov	r0, r8
 8011f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f38:	3a30      	subs	r2, #48	; 0x30
 8011f3a:	2a09      	cmp	r2, #9
 8011f3c:	d903      	bls.n	8011f46 <_vfiprintf_r+0x1ca>
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d0c3      	beq.n	8011eca <_vfiprintf_r+0x14e>
 8011f42:	9105      	str	r1, [sp, #20]
 8011f44:	e7c1      	b.n	8011eca <_vfiprintf_r+0x14e>
 8011f46:	fb05 2101 	mla	r1, r5, r1, r2
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	4680      	mov	r8, r0
 8011f4e:	e7f0      	b.n	8011f32 <_vfiprintf_r+0x1b6>
 8011f50:	ab03      	add	r3, sp, #12
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	4622      	mov	r2, r4
 8011f56:	4b13      	ldr	r3, [pc, #76]	; (8011fa4 <_vfiprintf_r+0x228>)
 8011f58:	a904      	add	r1, sp, #16
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	f3af 8000 	nop.w
 8011f60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011f64:	4681      	mov	r9, r0
 8011f66:	d1d5      	bne.n	8011f14 <_vfiprintf_r+0x198>
 8011f68:	89a3      	ldrh	r3, [r4, #12]
 8011f6a:	065b      	lsls	r3, r3, #25
 8011f6c:	f53f af7e 	bmi.w	8011e6c <_vfiprintf_r+0xf0>
 8011f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f72:	e77d      	b.n	8011e70 <_vfiprintf_r+0xf4>
 8011f74:	ab03      	add	r3, sp, #12
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	4622      	mov	r2, r4
 8011f7a:	4b0a      	ldr	r3, [pc, #40]	; (8011fa4 <_vfiprintf_r+0x228>)
 8011f7c:	a904      	add	r1, sp, #16
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f000 f888 	bl	8012094 <_printf_i>
 8011f84:	e7ec      	b.n	8011f60 <_vfiprintf_r+0x1e4>
 8011f86:	bf00      	nop
 8011f88:	08012cb4 	.word	0x08012cb4
 8011f8c:	08012cf4 	.word	0x08012cf4
 8011f90:	08012cd4 	.word	0x08012cd4
 8011f94:	08012c94 	.word	0x08012c94
 8011f98:	08012cfa 	.word	0x08012cfa
 8011f9c:	08012cfe 	.word	0x08012cfe
 8011fa0:	00000000 	.word	0x00000000
 8011fa4:	08011d57 	.word	0x08011d57

08011fa8 <_printf_common>:
 8011fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fac:	4691      	mov	r9, r2
 8011fae:	461f      	mov	r7, r3
 8011fb0:	688a      	ldr	r2, [r1, #8]
 8011fb2:	690b      	ldr	r3, [r1, #16]
 8011fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	bfb8      	it	lt
 8011fbc:	4613      	movlt	r3, r2
 8011fbe:	f8c9 3000 	str.w	r3, [r9]
 8011fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fc6:	4606      	mov	r6, r0
 8011fc8:	460c      	mov	r4, r1
 8011fca:	b112      	cbz	r2, 8011fd2 <_printf_common+0x2a>
 8011fcc:	3301      	adds	r3, #1
 8011fce:	f8c9 3000 	str.w	r3, [r9]
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	0699      	lsls	r1, r3, #26
 8011fd6:	bf42      	ittt	mi
 8011fd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011fdc:	3302      	addmi	r3, #2
 8011fde:	f8c9 3000 	strmi.w	r3, [r9]
 8011fe2:	6825      	ldr	r5, [r4, #0]
 8011fe4:	f015 0506 	ands.w	r5, r5, #6
 8011fe8:	d107      	bne.n	8011ffa <_printf_common+0x52>
 8011fea:	f104 0a19 	add.w	sl, r4, #25
 8011fee:	68e3      	ldr	r3, [r4, #12]
 8011ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8011ff4:	1a9b      	subs	r3, r3, r2
 8011ff6:	42ab      	cmp	r3, r5
 8011ff8:	dc28      	bgt.n	801204c <_printf_common+0xa4>
 8011ffa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ffe:	6822      	ldr	r2, [r4, #0]
 8012000:	3300      	adds	r3, #0
 8012002:	bf18      	it	ne
 8012004:	2301      	movne	r3, #1
 8012006:	0692      	lsls	r2, r2, #26
 8012008:	d42d      	bmi.n	8012066 <_printf_common+0xbe>
 801200a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801200e:	4639      	mov	r1, r7
 8012010:	4630      	mov	r0, r6
 8012012:	47c0      	blx	r8
 8012014:	3001      	adds	r0, #1
 8012016:	d020      	beq.n	801205a <_printf_common+0xb2>
 8012018:	6823      	ldr	r3, [r4, #0]
 801201a:	68e5      	ldr	r5, [r4, #12]
 801201c:	f8d9 2000 	ldr.w	r2, [r9]
 8012020:	f003 0306 	and.w	r3, r3, #6
 8012024:	2b04      	cmp	r3, #4
 8012026:	bf08      	it	eq
 8012028:	1aad      	subeq	r5, r5, r2
 801202a:	68a3      	ldr	r3, [r4, #8]
 801202c:	6922      	ldr	r2, [r4, #16]
 801202e:	bf0c      	ite	eq
 8012030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012034:	2500      	movne	r5, #0
 8012036:	4293      	cmp	r3, r2
 8012038:	bfc4      	itt	gt
 801203a:	1a9b      	subgt	r3, r3, r2
 801203c:	18ed      	addgt	r5, r5, r3
 801203e:	f04f 0900 	mov.w	r9, #0
 8012042:	341a      	adds	r4, #26
 8012044:	454d      	cmp	r5, r9
 8012046:	d11a      	bne.n	801207e <_printf_common+0xd6>
 8012048:	2000      	movs	r0, #0
 801204a:	e008      	b.n	801205e <_printf_common+0xb6>
 801204c:	2301      	movs	r3, #1
 801204e:	4652      	mov	r2, sl
 8012050:	4639      	mov	r1, r7
 8012052:	4630      	mov	r0, r6
 8012054:	47c0      	blx	r8
 8012056:	3001      	adds	r0, #1
 8012058:	d103      	bne.n	8012062 <_printf_common+0xba>
 801205a:	f04f 30ff 	mov.w	r0, #4294967295
 801205e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012062:	3501      	adds	r5, #1
 8012064:	e7c3      	b.n	8011fee <_printf_common+0x46>
 8012066:	18e1      	adds	r1, r4, r3
 8012068:	1c5a      	adds	r2, r3, #1
 801206a:	2030      	movs	r0, #48	; 0x30
 801206c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012070:	4422      	add	r2, r4
 8012072:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801207a:	3302      	adds	r3, #2
 801207c:	e7c5      	b.n	801200a <_printf_common+0x62>
 801207e:	2301      	movs	r3, #1
 8012080:	4622      	mov	r2, r4
 8012082:	4639      	mov	r1, r7
 8012084:	4630      	mov	r0, r6
 8012086:	47c0      	blx	r8
 8012088:	3001      	adds	r0, #1
 801208a:	d0e6      	beq.n	801205a <_printf_common+0xb2>
 801208c:	f109 0901 	add.w	r9, r9, #1
 8012090:	e7d8      	b.n	8012044 <_printf_common+0x9c>
	...

08012094 <_printf_i>:
 8012094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012098:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801209c:	460c      	mov	r4, r1
 801209e:	7e09      	ldrb	r1, [r1, #24]
 80120a0:	b085      	sub	sp, #20
 80120a2:	296e      	cmp	r1, #110	; 0x6e
 80120a4:	4617      	mov	r7, r2
 80120a6:	4606      	mov	r6, r0
 80120a8:	4698      	mov	r8, r3
 80120aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120ac:	f000 80b3 	beq.w	8012216 <_printf_i+0x182>
 80120b0:	d822      	bhi.n	80120f8 <_printf_i+0x64>
 80120b2:	2963      	cmp	r1, #99	; 0x63
 80120b4:	d036      	beq.n	8012124 <_printf_i+0x90>
 80120b6:	d80a      	bhi.n	80120ce <_printf_i+0x3a>
 80120b8:	2900      	cmp	r1, #0
 80120ba:	f000 80b9 	beq.w	8012230 <_printf_i+0x19c>
 80120be:	2958      	cmp	r1, #88	; 0x58
 80120c0:	f000 8083 	beq.w	80121ca <_printf_i+0x136>
 80120c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80120cc:	e032      	b.n	8012134 <_printf_i+0xa0>
 80120ce:	2964      	cmp	r1, #100	; 0x64
 80120d0:	d001      	beq.n	80120d6 <_printf_i+0x42>
 80120d2:	2969      	cmp	r1, #105	; 0x69
 80120d4:	d1f6      	bne.n	80120c4 <_printf_i+0x30>
 80120d6:	6820      	ldr	r0, [r4, #0]
 80120d8:	6813      	ldr	r3, [r2, #0]
 80120da:	0605      	lsls	r5, r0, #24
 80120dc:	f103 0104 	add.w	r1, r3, #4
 80120e0:	d52a      	bpl.n	8012138 <_printf_i+0xa4>
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	6011      	str	r1, [r2, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	da03      	bge.n	80120f2 <_printf_i+0x5e>
 80120ea:	222d      	movs	r2, #45	; 0x2d
 80120ec:	425b      	negs	r3, r3
 80120ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80120f2:	486f      	ldr	r0, [pc, #444]	; (80122b0 <_printf_i+0x21c>)
 80120f4:	220a      	movs	r2, #10
 80120f6:	e039      	b.n	801216c <_printf_i+0xd8>
 80120f8:	2973      	cmp	r1, #115	; 0x73
 80120fa:	f000 809d 	beq.w	8012238 <_printf_i+0x1a4>
 80120fe:	d808      	bhi.n	8012112 <_printf_i+0x7e>
 8012100:	296f      	cmp	r1, #111	; 0x6f
 8012102:	d020      	beq.n	8012146 <_printf_i+0xb2>
 8012104:	2970      	cmp	r1, #112	; 0x70
 8012106:	d1dd      	bne.n	80120c4 <_printf_i+0x30>
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	f043 0320 	orr.w	r3, r3, #32
 801210e:	6023      	str	r3, [r4, #0]
 8012110:	e003      	b.n	801211a <_printf_i+0x86>
 8012112:	2975      	cmp	r1, #117	; 0x75
 8012114:	d017      	beq.n	8012146 <_printf_i+0xb2>
 8012116:	2978      	cmp	r1, #120	; 0x78
 8012118:	d1d4      	bne.n	80120c4 <_printf_i+0x30>
 801211a:	2378      	movs	r3, #120	; 0x78
 801211c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012120:	4864      	ldr	r0, [pc, #400]	; (80122b4 <_printf_i+0x220>)
 8012122:	e055      	b.n	80121d0 <_printf_i+0x13c>
 8012124:	6813      	ldr	r3, [r2, #0]
 8012126:	1d19      	adds	r1, r3, #4
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	6011      	str	r1, [r2, #0]
 801212c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012134:	2301      	movs	r3, #1
 8012136:	e08c      	b.n	8012252 <_printf_i+0x1be>
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	6011      	str	r1, [r2, #0]
 801213c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012140:	bf18      	it	ne
 8012142:	b21b      	sxthne	r3, r3
 8012144:	e7cf      	b.n	80120e6 <_printf_i+0x52>
 8012146:	6813      	ldr	r3, [r2, #0]
 8012148:	6825      	ldr	r5, [r4, #0]
 801214a:	1d18      	adds	r0, r3, #4
 801214c:	6010      	str	r0, [r2, #0]
 801214e:	0628      	lsls	r0, r5, #24
 8012150:	d501      	bpl.n	8012156 <_printf_i+0xc2>
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	e002      	b.n	801215c <_printf_i+0xc8>
 8012156:	0668      	lsls	r0, r5, #25
 8012158:	d5fb      	bpl.n	8012152 <_printf_i+0xbe>
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	4854      	ldr	r0, [pc, #336]	; (80122b0 <_printf_i+0x21c>)
 801215e:	296f      	cmp	r1, #111	; 0x6f
 8012160:	bf14      	ite	ne
 8012162:	220a      	movne	r2, #10
 8012164:	2208      	moveq	r2, #8
 8012166:	2100      	movs	r1, #0
 8012168:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801216c:	6865      	ldr	r5, [r4, #4]
 801216e:	60a5      	str	r5, [r4, #8]
 8012170:	2d00      	cmp	r5, #0
 8012172:	f2c0 8095 	blt.w	80122a0 <_printf_i+0x20c>
 8012176:	6821      	ldr	r1, [r4, #0]
 8012178:	f021 0104 	bic.w	r1, r1, #4
 801217c:	6021      	str	r1, [r4, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d13d      	bne.n	80121fe <_printf_i+0x16a>
 8012182:	2d00      	cmp	r5, #0
 8012184:	f040 808e 	bne.w	80122a4 <_printf_i+0x210>
 8012188:	4665      	mov	r5, ip
 801218a:	2a08      	cmp	r2, #8
 801218c:	d10b      	bne.n	80121a6 <_printf_i+0x112>
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	07db      	lsls	r3, r3, #31
 8012192:	d508      	bpl.n	80121a6 <_printf_i+0x112>
 8012194:	6923      	ldr	r3, [r4, #16]
 8012196:	6862      	ldr	r2, [r4, #4]
 8012198:	429a      	cmp	r2, r3
 801219a:	bfde      	ittt	le
 801219c:	2330      	movle	r3, #48	; 0x30
 801219e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121a6:	ebac 0305 	sub.w	r3, ip, r5
 80121aa:	6123      	str	r3, [r4, #16]
 80121ac:	f8cd 8000 	str.w	r8, [sp]
 80121b0:	463b      	mov	r3, r7
 80121b2:	aa03      	add	r2, sp, #12
 80121b4:	4621      	mov	r1, r4
 80121b6:	4630      	mov	r0, r6
 80121b8:	f7ff fef6 	bl	8011fa8 <_printf_common>
 80121bc:	3001      	adds	r0, #1
 80121be:	d14d      	bne.n	801225c <_printf_i+0x1c8>
 80121c0:	f04f 30ff 	mov.w	r0, #4294967295
 80121c4:	b005      	add	sp, #20
 80121c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ca:	4839      	ldr	r0, [pc, #228]	; (80122b0 <_printf_i+0x21c>)
 80121cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80121d0:	6813      	ldr	r3, [r2, #0]
 80121d2:	6821      	ldr	r1, [r4, #0]
 80121d4:	1d1d      	adds	r5, r3, #4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6015      	str	r5, [r2, #0]
 80121da:	060a      	lsls	r2, r1, #24
 80121dc:	d50b      	bpl.n	80121f6 <_printf_i+0x162>
 80121de:	07ca      	lsls	r2, r1, #31
 80121e0:	bf44      	itt	mi
 80121e2:	f041 0120 	orrmi.w	r1, r1, #32
 80121e6:	6021      	strmi	r1, [r4, #0]
 80121e8:	b91b      	cbnz	r3, 80121f2 <_printf_i+0x15e>
 80121ea:	6822      	ldr	r2, [r4, #0]
 80121ec:	f022 0220 	bic.w	r2, r2, #32
 80121f0:	6022      	str	r2, [r4, #0]
 80121f2:	2210      	movs	r2, #16
 80121f4:	e7b7      	b.n	8012166 <_printf_i+0xd2>
 80121f6:	064d      	lsls	r5, r1, #25
 80121f8:	bf48      	it	mi
 80121fa:	b29b      	uxthmi	r3, r3
 80121fc:	e7ef      	b.n	80121de <_printf_i+0x14a>
 80121fe:	4665      	mov	r5, ip
 8012200:	fbb3 f1f2 	udiv	r1, r3, r2
 8012204:	fb02 3311 	mls	r3, r2, r1, r3
 8012208:	5cc3      	ldrb	r3, [r0, r3]
 801220a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801220e:	460b      	mov	r3, r1
 8012210:	2900      	cmp	r1, #0
 8012212:	d1f5      	bne.n	8012200 <_printf_i+0x16c>
 8012214:	e7b9      	b.n	801218a <_printf_i+0xf6>
 8012216:	6813      	ldr	r3, [r2, #0]
 8012218:	6825      	ldr	r5, [r4, #0]
 801221a:	6961      	ldr	r1, [r4, #20]
 801221c:	1d18      	adds	r0, r3, #4
 801221e:	6010      	str	r0, [r2, #0]
 8012220:	0628      	lsls	r0, r5, #24
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	d501      	bpl.n	801222a <_printf_i+0x196>
 8012226:	6019      	str	r1, [r3, #0]
 8012228:	e002      	b.n	8012230 <_printf_i+0x19c>
 801222a:	066a      	lsls	r2, r5, #25
 801222c:	d5fb      	bpl.n	8012226 <_printf_i+0x192>
 801222e:	8019      	strh	r1, [r3, #0]
 8012230:	2300      	movs	r3, #0
 8012232:	6123      	str	r3, [r4, #16]
 8012234:	4665      	mov	r5, ip
 8012236:	e7b9      	b.n	80121ac <_printf_i+0x118>
 8012238:	6813      	ldr	r3, [r2, #0]
 801223a:	1d19      	adds	r1, r3, #4
 801223c:	6011      	str	r1, [r2, #0]
 801223e:	681d      	ldr	r5, [r3, #0]
 8012240:	6862      	ldr	r2, [r4, #4]
 8012242:	2100      	movs	r1, #0
 8012244:	4628      	mov	r0, r5
 8012246:	f7ed ffc3 	bl	80001d0 <memchr>
 801224a:	b108      	cbz	r0, 8012250 <_printf_i+0x1bc>
 801224c:	1b40      	subs	r0, r0, r5
 801224e:	6060      	str	r0, [r4, #4]
 8012250:	6863      	ldr	r3, [r4, #4]
 8012252:	6123      	str	r3, [r4, #16]
 8012254:	2300      	movs	r3, #0
 8012256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801225a:	e7a7      	b.n	80121ac <_printf_i+0x118>
 801225c:	6923      	ldr	r3, [r4, #16]
 801225e:	462a      	mov	r2, r5
 8012260:	4639      	mov	r1, r7
 8012262:	4630      	mov	r0, r6
 8012264:	47c0      	blx	r8
 8012266:	3001      	adds	r0, #1
 8012268:	d0aa      	beq.n	80121c0 <_printf_i+0x12c>
 801226a:	6823      	ldr	r3, [r4, #0]
 801226c:	079b      	lsls	r3, r3, #30
 801226e:	d413      	bmi.n	8012298 <_printf_i+0x204>
 8012270:	68e0      	ldr	r0, [r4, #12]
 8012272:	9b03      	ldr	r3, [sp, #12]
 8012274:	4298      	cmp	r0, r3
 8012276:	bfb8      	it	lt
 8012278:	4618      	movlt	r0, r3
 801227a:	e7a3      	b.n	80121c4 <_printf_i+0x130>
 801227c:	2301      	movs	r3, #1
 801227e:	464a      	mov	r2, r9
 8012280:	4639      	mov	r1, r7
 8012282:	4630      	mov	r0, r6
 8012284:	47c0      	blx	r8
 8012286:	3001      	adds	r0, #1
 8012288:	d09a      	beq.n	80121c0 <_printf_i+0x12c>
 801228a:	3501      	adds	r5, #1
 801228c:	68e3      	ldr	r3, [r4, #12]
 801228e:	9a03      	ldr	r2, [sp, #12]
 8012290:	1a9b      	subs	r3, r3, r2
 8012292:	42ab      	cmp	r3, r5
 8012294:	dcf2      	bgt.n	801227c <_printf_i+0x1e8>
 8012296:	e7eb      	b.n	8012270 <_printf_i+0x1dc>
 8012298:	2500      	movs	r5, #0
 801229a:	f104 0919 	add.w	r9, r4, #25
 801229e:	e7f5      	b.n	801228c <_printf_i+0x1f8>
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1ac      	bne.n	80121fe <_printf_i+0x16a>
 80122a4:	7803      	ldrb	r3, [r0, #0]
 80122a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122ae:	e76c      	b.n	801218a <_printf_i+0xf6>
 80122b0:	08012d05 	.word	0x08012d05
 80122b4:	08012d16 	.word	0x08012d16

080122b8 <_sbrk_r>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	4c06      	ldr	r4, [pc, #24]	; (80122d4 <_sbrk_r+0x1c>)
 80122bc:	2300      	movs	r3, #0
 80122be:	4605      	mov	r5, r0
 80122c0:	4608      	mov	r0, r1
 80122c2:	6023      	str	r3, [r4, #0]
 80122c4:	f7fe fff2 	bl	80112ac <_sbrk>
 80122c8:	1c43      	adds	r3, r0, #1
 80122ca:	d102      	bne.n	80122d2 <_sbrk_r+0x1a>
 80122cc:	6823      	ldr	r3, [r4, #0]
 80122ce:	b103      	cbz	r3, 80122d2 <_sbrk_r+0x1a>
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	bd38      	pop	{r3, r4, r5, pc}
 80122d4:	200012f8 	.word	0x200012f8

080122d8 <__sread>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	460c      	mov	r4, r1
 80122dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e0:	f000 f896 	bl	8012410 <_read_r>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	bfab      	itete	ge
 80122e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122ea:	89a3      	ldrhlt	r3, [r4, #12]
 80122ec:	181b      	addge	r3, r3, r0
 80122ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122f2:	bfac      	ite	ge
 80122f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80122f6:	81a3      	strhlt	r3, [r4, #12]
 80122f8:	bd10      	pop	{r4, pc}

080122fa <__swrite>:
 80122fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122fe:	461f      	mov	r7, r3
 8012300:	898b      	ldrh	r3, [r1, #12]
 8012302:	05db      	lsls	r3, r3, #23
 8012304:	4605      	mov	r5, r0
 8012306:	460c      	mov	r4, r1
 8012308:	4616      	mov	r6, r2
 801230a:	d505      	bpl.n	8012318 <__swrite+0x1e>
 801230c:	2302      	movs	r3, #2
 801230e:	2200      	movs	r2, #0
 8012310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012314:	f000 f868 	bl	80123e8 <_lseek_r>
 8012318:	89a3      	ldrh	r3, [r4, #12]
 801231a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801231e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012322:	81a3      	strh	r3, [r4, #12]
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	4628      	mov	r0, r5
 801232a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801232e:	f000 b817 	b.w	8012360 <_write_r>

08012332 <__sseek>:
 8012332:	b510      	push	{r4, lr}
 8012334:	460c      	mov	r4, r1
 8012336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801233a:	f000 f855 	bl	80123e8 <_lseek_r>
 801233e:	1c43      	adds	r3, r0, #1
 8012340:	89a3      	ldrh	r3, [r4, #12]
 8012342:	bf15      	itete	ne
 8012344:	6560      	strne	r0, [r4, #84]	; 0x54
 8012346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801234a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801234e:	81a3      	strheq	r3, [r4, #12]
 8012350:	bf18      	it	ne
 8012352:	81a3      	strhne	r3, [r4, #12]
 8012354:	bd10      	pop	{r4, pc}

08012356 <__sclose>:
 8012356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801235a:	f000 b813 	b.w	8012384 <_close_r>
	...

08012360 <_write_r>:
 8012360:	b538      	push	{r3, r4, r5, lr}
 8012362:	4c07      	ldr	r4, [pc, #28]	; (8012380 <_write_r+0x20>)
 8012364:	4605      	mov	r5, r0
 8012366:	4608      	mov	r0, r1
 8012368:	4611      	mov	r1, r2
 801236a:	2200      	movs	r2, #0
 801236c:	6022      	str	r2, [r4, #0]
 801236e:	461a      	mov	r2, r3
 8012370:	f7fe ff4b 	bl	801120a <_write>
 8012374:	1c43      	adds	r3, r0, #1
 8012376:	d102      	bne.n	801237e <_write_r+0x1e>
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	b103      	cbz	r3, 801237e <_write_r+0x1e>
 801237c:	602b      	str	r3, [r5, #0]
 801237e:	bd38      	pop	{r3, r4, r5, pc}
 8012380:	200012f8 	.word	0x200012f8

08012384 <_close_r>:
 8012384:	b538      	push	{r3, r4, r5, lr}
 8012386:	4c06      	ldr	r4, [pc, #24]	; (80123a0 <_close_r+0x1c>)
 8012388:	2300      	movs	r3, #0
 801238a:	4605      	mov	r5, r0
 801238c:	4608      	mov	r0, r1
 801238e:	6023      	str	r3, [r4, #0]
 8012390:	f7fe ff57 	bl	8011242 <_close>
 8012394:	1c43      	adds	r3, r0, #1
 8012396:	d102      	bne.n	801239e <_close_r+0x1a>
 8012398:	6823      	ldr	r3, [r4, #0]
 801239a:	b103      	cbz	r3, 801239e <_close_r+0x1a>
 801239c:	602b      	str	r3, [r5, #0]
 801239e:	bd38      	pop	{r3, r4, r5, pc}
 80123a0:	200012f8 	.word	0x200012f8

080123a4 <_fstat_r>:
 80123a4:	b538      	push	{r3, r4, r5, lr}
 80123a6:	4c07      	ldr	r4, [pc, #28]	; (80123c4 <_fstat_r+0x20>)
 80123a8:	2300      	movs	r3, #0
 80123aa:	4605      	mov	r5, r0
 80123ac:	4608      	mov	r0, r1
 80123ae:	4611      	mov	r1, r2
 80123b0:	6023      	str	r3, [r4, #0]
 80123b2:	f7fe ff52 	bl	801125a <_fstat>
 80123b6:	1c43      	adds	r3, r0, #1
 80123b8:	d102      	bne.n	80123c0 <_fstat_r+0x1c>
 80123ba:	6823      	ldr	r3, [r4, #0]
 80123bc:	b103      	cbz	r3, 80123c0 <_fstat_r+0x1c>
 80123be:	602b      	str	r3, [r5, #0]
 80123c0:	bd38      	pop	{r3, r4, r5, pc}
 80123c2:	bf00      	nop
 80123c4:	200012f8 	.word	0x200012f8

080123c8 <_isatty_r>:
 80123c8:	b538      	push	{r3, r4, r5, lr}
 80123ca:	4c06      	ldr	r4, [pc, #24]	; (80123e4 <_isatty_r+0x1c>)
 80123cc:	2300      	movs	r3, #0
 80123ce:	4605      	mov	r5, r0
 80123d0:	4608      	mov	r0, r1
 80123d2:	6023      	str	r3, [r4, #0]
 80123d4:	f7fe ff51 	bl	801127a <_isatty>
 80123d8:	1c43      	adds	r3, r0, #1
 80123da:	d102      	bne.n	80123e2 <_isatty_r+0x1a>
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	b103      	cbz	r3, 80123e2 <_isatty_r+0x1a>
 80123e0:	602b      	str	r3, [r5, #0]
 80123e2:	bd38      	pop	{r3, r4, r5, pc}
 80123e4:	200012f8 	.word	0x200012f8

080123e8 <_lseek_r>:
 80123e8:	b538      	push	{r3, r4, r5, lr}
 80123ea:	4c07      	ldr	r4, [pc, #28]	; (8012408 <_lseek_r+0x20>)
 80123ec:	4605      	mov	r5, r0
 80123ee:	4608      	mov	r0, r1
 80123f0:	4611      	mov	r1, r2
 80123f2:	2200      	movs	r2, #0
 80123f4:	6022      	str	r2, [r4, #0]
 80123f6:	461a      	mov	r2, r3
 80123f8:	f7fe ff4a 	bl	8011290 <_lseek>
 80123fc:	1c43      	adds	r3, r0, #1
 80123fe:	d102      	bne.n	8012406 <_lseek_r+0x1e>
 8012400:	6823      	ldr	r3, [r4, #0]
 8012402:	b103      	cbz	r3, 8012406 <_lseek_r+0x1e>
 8012404:	602b      	str	r3, [r5, #0]
 8012406:	bd38      	pop	{r3, r4, r5, pc}
 8012408:	200012f8 	.word	0x200012f8

0801240c <__malloc_lock>:
 801240c:	4770      	bx	lr

0801240e <__malloc_unlock>:
 801240e:	4770      	bx	lr

08012410 <_read_r>:
 8012410:	b538      	push	{r3, r4, r5, lr}
 8012412:	4c07      	ldr	r4, [pc, #28]	; (8012430 <_read_r+0x20>)
 8012414:	4605      	mov	r5, r0
 8012416:	4608      	mov	r0, r1
 8012418:	4611      	mov	r1, r2
 801241a:	2200      	movs	r2, #0
 801241c:	6022      	str	r2, [r4, #0]
 801241e:	461a      	mov	r2, r3
 8012420:	f7fe fed6 	bl	80111d0 <_read>
 8012424:	1c43      	adds	r3, r0, #1
 8012426:	d102      	bne.n	801242e <_read_r+0x1e>
 8012428:	6823      	ldr	r3, [r4, #0]
 801242a:	b103      	cbz	r3, 801242e <_read_r+0x1e>
 801242c:	602b      	str	r3, [r5, #0]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	200012f8 	.word	0x200012f8

08012434 <sqrt>:
 8012434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012438:	ed2d 8b02 	vpush	{d8}
 801243c:	b08b      	sub	sp, #44	; 0x2c
 801243e:	ec55 4b10 	vmov	r4, r5, d0
 8012442:	f000 f851 	bl	80124e8 <__ieee754_sqrt>
 8012446:	4b26      	ldr	r3, [pc, #152]	; (80124e0 <sqrt+0xac>)
 8012448:	eeb0 8a40 	vmov.f32	s16, s0
 801244c:	eef0 8a60 	vmov.f32	s17, s1
 8012450:	f993 6000 	ldrsb.w	r6, [r3]
 8012454:	1c73      	adds	r3, r6, #1
 8012456:	d02a      	beq.n	80124ae <sqrt+0x7a>
 8012458:	4622      	mov	r2, r4
 801245a:	462b      	mov	r3, r5
 801245c:	4620      	mov	r0, r4
 801245e:	4629      	mov	r1, r5
 8012460:	f7ee fb5c 	bl	8000b1c <__aeabi_dcmpun>
 8012464:	4607      	mov	r7, r0
 8012466:	bb10      	cbnz	r0, 80124ae <sqrt+0x7a>
 8012468:	f04f 0800 	mov.w	r8, #0
 801246c:	f04f 0900 	mov.w	r9, #0
 8012470:	4642      	mov	r2, r8
 8012472:	464b      	mov	r3, r9
 8012474:	4620      	mov	r0, r4
 8012476:	4629      	mov	r1, r5
 8012478:	f7ee fb28 	bl	8000acc <__aeabi_dcmplt>
 801247c:	b1b8      	cbz	r0, 80124ae <sqrt+0x7a>
 801247e:	2301      	movs	r3, #1
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	4b18      	ldr	r3, [pc, #96]	; (80124e4 <sqrt+0xb0>)
 8012484:	9301      	str	r3, [sp, #4]
 8012486:	9708      	str	r7, [sp, #32]
 8012488:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801248c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012490:	b9b6      	cbnz	r6, 80124c0 <sqrt+0x8c>
 8012492:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8012496:	4668      	mov	r0, sp
 8012498:	f000 f8d6 	bl	8012648 <matherr>
 801249c:	b1d0      	cbz	r0, 80124d4 <sqrt+0xa0>
 801249e:	9b08      	ldr	r3, [sp, #32]
 80124a0:	b11b      	cbz	r3, 80124aa <sqrt+0x76>
 80124a2:	f7fe ff8f 	bl	80113c4 <__errno>
 80124a6:	9b08      	ldr	r3, [sp, #32]
 80124a8:	6003      	str	r3, [r0, #0]
 80124aa:	ed9d 8b06 	vldr	d8, [sp, #24]
 80124ae:	eeb0 0a48 	vmov.f32	s0, s16
 80124b2:	eef0 0a68 	vmov.f32	s1, s17
 80124b6:	b00b      	add	sp, #44	; 0x2c
 80124b8:	ecbd 8b02 	vpop	{d8}
 80124bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124c0:	4642      	mov	r2, r8
 80124c2:	464b      	mov	r3, r9
 80124c4:	4640      	mov	r0, r8
 80124c6:	4649      	mov	r1, r9
 80124c8:	f7ee f9b8 	bl	800083c <__aeabi_ddiv>
 80124cc:	2e02      	cmp	r6, #2
 80124ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80124d2:	d1e0      	bne.n	8012496 <sqrt+0x62>
 80124d4:	f7fe ff76 	bl	80113c4 <__errno>
 80124d8:	2321      	movs	r3, #33	; 0x21
 80124da:	6003      	str	r3, [r0, #0]
 80124dc:	e7df      	b.n	801249e <sqrt+0x6a>
 80124de:	bf00      	nop
 80124e0:	20000120 	.word	0x20000120
 80124e4:	08012d27 	.word	0x08012d27

080124e8 <__ieee754_sqrt>:
 80124e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ec:	4955      	ldr	r1, [pc, #340]	; (8012644 <__ieee754_sqrt+0x15c>)
 80124ee:	ec55 4b10 	vmov	r4, r5, d0
 80124f2:	43a9      	bics	r1, r5
 80124f4:	462b      	mov	r3, r5
 80124f6:	462a      	mov	r2, r5
 80124f8:	d112      	bne.n	8012520 <__ieee754_sqrt+0x38>
 80124fa:	ee10 2a10 	vmov	r2, s0
 80124fe:	ee10 0a10 	vmov	r0, s0
 8012502:	4629      	mov	r1, r5
 8012504:	f7ee f870 	bl	80005e8 <__aeabi_dmul>
 8012508:	4602      	mov	r2, r0
 801250a:	460b      	mov	r3, r1
 801250c:	4620      	mov	r0, r4
 801250e:	4629      	mov	r1, r5
 8012510:	f7ed feb4 	bl	800027c <__adddf3>
 8012514:	4604      	mov	r4, r0
 8012516:	460d      	mov	r5, r1
 8012518:	ec45 4b10 	vmov	d0, r4, r5
 801251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012520:	2d00      	cmp	r5, #0
 8012522:	ee10 0a10 	vmov	r0, s0
 8012526:	4621      	mov	r1, r4
 8012528:	dc0f      	bgt.n	801254a <__ieee754_sqrt+0x62>
 801252a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801252e:	4330      	orrs	r0, r6
 8012530:	d0f2      	beq.n	8012518 <__ieee754_sqrt+0x30>
 8012532:	b155      	cbz	r5, 801254a <__ieee754_sqrt+0x62>
 8012534:	ee10 2a10 	vmov	r2, s0
 8012538:	4620      	mov	r0, r4
 801253a:	4629      	mov	r1, r5
 801253c:	f7ed fe9c 	bl	8000278 <__aeabi_dsub>
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	f7ee f97a 	bl	800083c <__aeabi_ddiv>
 8012548:	e7e4      	b.n	8012514 <__ieee754_sqrt+0x2c>
 801254a:	151b      	asrs	r3, r3, #20
 801254c:	d073      	beq.n	8012636 <__ieee754_sqrt+0x14e>
 801254e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012552:	07dd      	lsls	r5, r3, #31
 8012554:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012558:	bf48      	it	mi
 801255a:	0fc8      	lsrmi	r0, r1, #31
 801255c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012560:	bf44      	itt	mi
 8012562:	0049      	lslmi	r1, r1, #1
 8012564:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012568:	2500      	movs	r5, #0
 801256a:	1058      	asrs	r0, r3, #1
 801256c:	0fcb      	lsrs	r3, r1, #31
 801256e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012572:	0049      	lsls	r1, r1, #1
 8012574:	2316      	movs	r3, #22
 8012576:	462c      	mov	r4, r5
 8012578:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801257c:	19a7      	adds	r7, r4, r6
 801257e:	4297      	cmp	r7, r2
 8012580:	bfde      	ittt	le
 8012582:	19bc      	addle	r4, r7, r6
 8012584:	1bd2      	suble	r2, r2, r7
 8012586:	19ad      	addle	r5, r5, r6
 8012588:	0fcf      	lsrs	r7, r1, #31
 801258a:	3b01      	subs	r3, #1
 801258c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012590:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012594:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012598:	d1f0      	bne.n	801257c <__ieee754_sqrt+0x94>
 801259a:	f04f 0c20 	mov.w	ip, #32
 801259e:	469e      	mov	lr, r3
 80125a0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80125a4:	42a2      	cmp	r2, r4
 80125a6:	eb06 070e 	add.w	r7, r6, lr
 80125aa:	dc02      	bgt.n	80125b2 <__ieee754_sqrt+0xca>
 80125ac:	d112      	bne.n	80125d4 <__ieee754_sqrt+0xec>
 80125ae:	428f      	cmp	r7, r1
 80125b0:	d810      	bhi.n	80125d4 <__ieee754_sqrt+0xec>
 80125b2:	2f00      	cmp	r7, #0
 80125b4:	eb07 0e06 	add.w	lr, r7, r6
 80125b8:	da42      	bge.n	8012640 <__ieee754_sqrt+0x158>
 80125ba:	f1be 0f00 	cmp.w	lr, #0
 80125be:	db3f      	blt.n	8012640 <__ieee754_sqrt+0x158>
 80125c0:	f104 0801 	add.w	r8, r4, #1
 80125c4:	1b12      	subs	r2, r2, r4
 80125c6:	428f      	cmp	r7, r1
 80125c8:	bf88      	it	hi
 80125ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80125ce:	1bc9      	subs	r1, r1, r7
 80125d0:	4433      	add	r3, r6
 80125d2:	4644      	mov	r4, r8
 80125d4:	0052      	lsls	r2, r2, #1
 80125d6:	f1bc 0c01 	subs.w	ip, ip, #1
 80125da:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80125de:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80125e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80125e6:	d1dd      	bne.n	80125a4 <__ieee754_sqrt+0xbc>
 80125e8:	430a      	orrs	r2, r1
 80125ea:	d006      	beq.n	80125fa <__ieee754_sqrt+0x112>
 80125ec:	1c5c      	adds	r4, r3, #1
 80125ee:	bf13      	iteet	ne
 80125f0:	3301      	addne	r3, #1
 80125f2:	3501      	addeq	r5, #1
 80125f4:	4663      	moveq	r3, ip
 80125f6:	f023 0301 	bicne.w	r3, r3, #1
 80125fa:	106a      	asrs	r2, r5, #1
 80125fc:	085b      	lsrs	r3, r3, #1
 80125fe:	07e9      	lsls	r1, r5, #31
 8012600:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012604:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012608:	bf48      	it	mi
 801260a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801260e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012612:	461c      	mov	r4, r3
 8012614:	e780      	b.n	8012518 <__ieee754_sqrt+0x30>
 8012616:	0aca      	lsrs	r2, r1, #11
 8012618:	3815      	subs	r0, #21
 801261a:	0549      	lsls	r1, r1, #21
 801261c:	2a00      	cmp	r2, #0
 801261e:	d0fa      	beq.n	8012616 <__ieee754_sqrt+0x12e>
 8012620:	02d6      	lsls	r6, r2, #11
 8012622:	d50a      	bpl.n	801263a <__ieee754_sqrt+0x152>
 8012624:	f1c3 0420 	rsb	r4, r3, #32
 8012628:	fa21 f404 	lsr.w	r4, r1, r4
 801262c:	1e5d      	subs	r5, r3, #1
 801262e:	4099      	lsls	r1, r3
 8012630:	4322      	orrs	r2, r4
 8012632:	1b43      	subs	r3, r0, r5
 8012634:	e78b      	b.n	801254e <__ieee754_sqrt+0x66>
 8012636:	4618      	mov	r0, r3
 8012638:	e7f0      	b.n	801261c <__ieee754_sqrt+0x134>
 801263a:	0052      	lsls	r2, r2, #1
 801263c:	3301      	adds	r3, #1
 801263e:	e7ef      	b.n	8012620 <__ieee754_sqrt+0x138>
 8012640:	46a0      	mov	r8, r4
 8012642:	e7bf      	b.n	80125c4 <__ieee754_sqrt+0xdc>
 8012644:	7ff00000 	.word	0x7ff00000

08012648 <matherr>:
 8012648:	2000      	movs	r0, #0
 801264a:	4770      	bx	lr

0801264c <_init>:
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	bf00      	nop
 8012650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012652:	bc08      	pop	{r3}
 8012654:	469e      	mov	lr, r3
 8012656:	4770      	bx	lr

08012658 <_fini>:
 8012658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801265a:	bf00      	nop
 801265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801265e:	bc08      	pop	{r3}
 8012660:	469e      	mov	lr, r3
 8012662:	4770      	bx	lr
