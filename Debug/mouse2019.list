
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d504  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800d694  0800d694  0001d694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf8  0800daf8  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf8  0800daf8  0001daf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db00  0800db00  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800db08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  2000016c  0800dc74  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f18  0800dc74  00020f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e97  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  00036033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  00039078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224cb  00000000  00000000  0003b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff0f  00000000  00000000  0005dab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6f1e  00000000  00000000  0006d9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001348e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  0013495c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d67c 	.word	0x0800d67c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800d67c 	.word	0x0800d67c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fd07 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f00a feee 	bl	800bcfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd1f 	bl	800198e <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fce7 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000100 	.word	0x20000100
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	200001a0 	.word	0x200001a0

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001a0 	.word	0x200001a0

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f00a fe8c 	bl	800bd4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fa92 	bl	800158c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0a5      	b.n	80011fe <HAL_ADC_Start+0x166>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_ADC_Start+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ADC_Start+0x178>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d179      	bne.n	80011fc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f023 0206 	bic.w	r2, r3, #6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_Start+0x180>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_ADC_Start+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x106>
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_Start+0x188>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d129      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_Start+0x17c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d823      	bhi.n	80011fc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11c      	bne.n	80011fc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e013      	b.n	80011fc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_ADC_Start+0x180>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000100 	.word	0x20000100
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d113      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d10b      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f043 0220 	orr.w	r2, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e05c      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800126a:	f7ff fea3 	bl	8000fb4 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	e01a      	b.n	80012a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d016      	beq.n	80012a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
 8001280:	f7ff fe98 	bl	8000fb4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d20b      	bcs.n	80012a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f043 0204 	orr.w	r2, r3, #4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e03d      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d1dd      	bne.n	8001272 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f06f 0212 	mvn.w	r2, #18
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d123      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e105      	b.n	8001570 <HAL_ADC_ConfigChannel+0x228>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_ADC_ConfigChannel+0x234>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d105      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d123      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x1e6>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d11b      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d111      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_ADC_ConfigChannel+0x23c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_ADC_ConfigChannel+0x240>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9a      	lsrs	r2, r3, #18
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001558:	e002      	b.n	8001560 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	20000100 	.word	0x20000100
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <ADC_Init+0x1f0>)
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <ADC_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00f      	b.n	800168a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001688:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	035a      	lsls	r2, r3, #13
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e007      	b.n	8001700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b01      	subs	r3, #1
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	029a      	lsls	r2, r3, #10
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019bc:	7e1b      	ldrb	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_FLASH_Program+0x1e>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e03b      	b.n	8001a3e <HAL_FLASH_Program+0x96>
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d0:	f000 f870 	bl	8001ab4 <FLASH_WaitForLastOperation>
 80019d4:	4603      	mov	r3, r0
 80019d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d12b      	bne.n	8001a36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019e4:	783b      	ldrb	r3, [r7, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 f917 	bl	8001c1c <FLASH_Program_Byte>
 80019ee:	e016      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019f6:	883b      	ldrh	r3, [r7, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f000 f8ea 	bl	8001bd4 <FLASH_Program_HalfWord>
 8001a00:	e00d      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d105      	bne.n	8001a14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f000 f8bf 	bl	8001b90 <FLASH_Program_Word>
 8001a12:	e004      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f000 f88b 	bl	8001b34 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a22:	f000 f847 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001a4 	.word	0x200001a4
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da0b      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_FLASH_Unlock+0x3c>)
 8001a66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_FLASH_Unlock+0x40>)
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da01      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	45670123 	.word	0x45670123
 8001a90:	cdef89ab 	.word	0xcdef89ab

08001a94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <FLASH_WaitForLastOperation+0x78>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac6:	f7ff fa75 	bl	8000fb4 <HAL_GetTick>
 8001aca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001acc:	e010      	b.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d00c      	beq.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <FLASH_WaitForLastOperation+0x38>
 8001adc:	f7ff fa6a 	bl	8000fb4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d201      	bcs.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e019      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e8      	bne.n	8001ace <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b1a:	f000 f8a1 	bl	8001c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
  
}  
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001a4 	.word	0x200001a4
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	0013      	movs	r3, r2
 8001b78:	2400      	movs	r4, #0
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc90      	pop	{r4, r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	801a      	strh	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	60da      	str	r2, [r3, #12]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	200001a4 	.word	0x200001a4

08001d0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_FLASHEx_Erase+0x1e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e058      	b.n	8001ddc <HAL_FLASHEx_Erase+0xd0>
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d34:	f7ff febe 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d148      	bne.n	8001dd4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d115      	bne.n	8001d7e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f844 	bl	8001dec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d68:	f7ff fea4 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6113      	str	r3, [r2, #16]
 8001d7c:	e028      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	e01c      	b.n	8001dc0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 f850 	bl	8001e34 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d98:	f7ff fe8c 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001daa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	601a      	str	r2, [r3, #0]
          break;
 8001db8:	e00a      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3da      	bcc.n	8001d86 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001dd0:	f000 f878 	bl	8001ec4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	761a      	strb	r2, [r3, #24]

  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001a4 	.word	0x200001a4
 8001de8:	40023c00 	.word	0x40023c00

08001dec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6113      	str	r3, [r2, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e010      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d103      	bne.n	8001e5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e009      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d103      	bne.n	8001e6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	490f      	ldr	r1, [pc, #60]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6113      	str	r3, [r2, #16]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
  }
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e16b      	b.n	8002244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 815a 	bne.w	800223e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x4a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00b      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b4 	beq.w	800223e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x310>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x226>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x314>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x222>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x318>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x21e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x31c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x320>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x324>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x328>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_GPIO_Init+0x32c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x20a>
 8002156:	2307      	movs	r3, #7
 8002158:	e00e      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215a:	2308      	movs	r3, #8
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215e:	2306      	movs	r3, #6
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002176:	2300      	movs	r3, #0
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002188:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_GPIO_Init+0x30c>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ba:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_GPIO_Init+0x330>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f ae90 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800224c:	bf00      	nop
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e22d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4ba3      	ldr	r3, [pc, #652]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e208      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe08 	bl	8000fb4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fe04 	bl	8000fb4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1cd      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdf4 	bl	8000fb4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdf0 	bl	8000fb4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1b9      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e18d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fda9 	bl	8000fb4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fda5 	bl	8000fb4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e16e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd88 	bl	8000fb4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd84 	bl	8000fb4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e14d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd68 	bl	8000fb4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fd64 	bl	8000fb4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e12d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fd51 	bl	8000fb4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fd4d 	bl	8000fb4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e116      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fd13 	bl	8000fb4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
 80025a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd06 	bl	8000fb4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0cf      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025ca:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025e0:	4b60      	ldr	r3, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a5f      	ldr	r2, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fccb 	bl	8000fb4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fcc7 	bl	8000fb4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e08e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x33a>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fcb5 	bl	8000fb4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fcb1 	bl	8000fb4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e078      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d064      	beq.n	8002754 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc86 	bl	8000fb4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fc82 	bl	8000fb4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04b      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491d      	ldr	r1, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc5b 	bl	8000fb4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fc57 	bl	8000fb4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e020      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x41a>
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fc44 	bl	8000fb4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fc40 	bl	8000fb4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x448>
 800274e:	e001      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	40023800 	.word	0x40023800
 8002768:	42470060 	.word	0x42470060

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ca      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b6      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a51      	ldr	r2, [pc, #324]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e065      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4933      	ldr	r1, [pc, #204]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fbaa 	bl	8000fb4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fba6 	bl	8000fb4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e030      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4915      	ldr	r1, [pc, #84]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f81d 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fb0c 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	0800da44 	.word	0x0800da44
 800292c:	20000100 	.word	0x20000100

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d007      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x32>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d008      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x38>
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 808d 	bne.w	8002a76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800295e:	60bb      	str	r3, [r7, #8]
       break;
 8002960:	e08c      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	60bb      	str	r3, [r7, #8]
      break;
 8002966:	e089      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002968:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	f240 11ff 	movw	r1, #511	; 0x1ff
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea03 0501 	and.w	r5, r3, r1
 8002994:	ea04 0602 	and.w	r6, r4, r2
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 800299a:	fb02 f106 	mul.w	r1, r2, r6
 800299e:	2200      	movs	r2, #0
 80029a0:	fb02 f205 	mul.w	r2, r2, r5
 80029a4:	440a      	add	r2, r1
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a8:	fba5 0101 	umull	r0, r1, r5, r1
 80029ac:	1853      	adds	r3, r2, r1
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	f7fe f915 	bl	8000be8 <__aeabi_uldivmod>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e049      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	02a2      	lsls	r2, r4, #10
 8002a38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a3c:	0299      	lsls	r1, r3, #10
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fe f8ca 	bl	8000be8 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	3301      	adds	r3, #1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	60bb      	str	r3, [r7, #8]
      break;
 8002a74:	e002      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a78:	60bb      	str	r3, [r7, #8]
      break;
 8002a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000100 	.word	0x20000100

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	0800da54 	.word	0x0800da54

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800da54 	.word	0x0800da54

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e056      	b.n	8002bbc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f009 f953 	bl	800bdd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0104 	and.w	r1, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Transmit+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e11e      	b.n	8002e24 <HAL_SPI_Transmit+0x260>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bee:	f7fe f9e1 	bl	8000fb4 <HAL_GetTick>
 8002bf2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c08:	e103      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Transmit+0x52>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1a:	e0fa      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c62:	d107      	bne.n	8002c74 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d007      	beq.n	8002c92 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d14b      	bne.n	8002d34 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0xe6>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13e      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cce:	e02b      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d02:	e011      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7fe f956 	bl	8000fb4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x158>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x15e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d26:	e074      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ce      	bne.n	8002cd0 <HAL_SPI_Transmit+0x10c>
 8002d32:	e04c      	b.n	8002dce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x17e>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d140      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d68:	e02c      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9e:	e011      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da0:	f7fe f908 	bl	8000fb4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d803      	bhi.n	8002db8 <HAL_SPI_Transmit+0x1f4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x1fa>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc2:	e026      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cd      	bne.n	8002d6a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fba4 	bl	8003520 <SPI_EndRxTxTransaction>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e000      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d112      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10e      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2204      	movs	r2, #4
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8e9 	bl	800303e <HAL_SPI_TransmitReceive>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	e0e2      	b.n	8003036 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Receive+0x52>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0db      	b.n	8003036 <HAL_SPI_Receive+0x20a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fe f895 	bl	8000fb4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e9c:	e0c2      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Receive+0x7e>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eae:	e0b9      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d107      	bne.n	8002f08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d162      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f2e:	e02e      	b.n	8002f8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f103 020c 	add.w	r2, r3, #12
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe f823 	bl	8000fb4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Receive+0x156>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x15c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f8c:	e04a      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1cb      	bne.n	8002f30 <HAL_SPI_Receive+0x104>
 8002f98:	e031      	b.n	8002ffe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d113      	bne.n	8002fd0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e011      	b.n	8002ff4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fd fff0 	bl	8000fb4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Receive+0x1bc>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x1c2>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ff2:	e017      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cd      	bne.n	8002f9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fa27 	bl	8003456 <SPI_EndRxTransaction>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
 8003020:	e000      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08c      	sub	sp, #48	; 0x30
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x26>
 8003060:	2302      	movs	r3, #2
 8003062:	e18a      	b.n	800337a <HAL_SPI_TransmitReceive+0x33c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306c:	f7fd ffa2 	bl	8000fb4 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00f      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003094:	d107      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
 800309e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ac:	e15b      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030c6:	e14e      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	887a      	ldrh	r2, [r7, #2]
 80030f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d178      	bne.n	800322c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x10a>
 8003142:	8b7b      	ldrh	r3, [r7, #26]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d166      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800316c:	e053      	b.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d113      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d119      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d014      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	b292      	uxth	r2, r2
 80031d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	1c9a      	adds	r2, r3, #2
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f6:	f7fd fedd 	bl	8000fb4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	429a      	cmp	r2, r3
 8003204:	d807      	bhi.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d003      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003214:	e0a7      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1a6      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1a1      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 800322a:	e07c      	b.n	8003326 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_TransmitReceive+0x1fc>
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d16b      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	e057      	b.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11c      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d114      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ec:	f7fd fe62 	bl	8000fb4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d803      	bhi.n	8003304 <HAL_SPI_TransmitReceive+0x2c6>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d102      	bne.n	800330a <HAL_SPI_TransmitReceive+0x2cc>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003310:	e029      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1a2      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19d      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8f8 	bl	8003520 <SPI_EndRxTxTransaction>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003342:	e010      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	e000      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	e04c      	b.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d048      	beq.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800339c:	f7fd fe0a 	bl	8000fb4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d902      	bls.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d13d      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d004      	beq.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d107      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d10f      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e00f      	b.n	800344e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1a3      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346a:	d111      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d004      	beq.n	8003480 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347e:	d107      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003498:	d12a      	bne.n	80034f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d012      	beq.n	80034ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff67 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02d      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e026      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff54 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff41 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <SPI_EndRxTxTransaction+0x7c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <SPI_EndRxTxTransaction+0x80>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0d5b      	lsrs	r3, r3, #21
 8003538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d112      	bne.n	8003572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff13 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d0f2      	beq.n	8003572 <SPI_EndRxTxTransaction+0x52>
 800358c:	e000      	b.n	8003590 <SPI_EndRxTxTransaction+0x70>
        break;
 800358e:	bf00      	nop
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000100 	.word	0x20000100
 80035a0:	165e9f81 	.word	0x165e9f81

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f008 fc4a 	bl	800be64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fc70 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d007      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e01d      	b.n	8003690 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f815 	bl	8003698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fc21 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 feec 	bl	800449c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_TIM_PWM_Start+0x74>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIM_PWM_Start+0x2c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_PWM_Start+0x78>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_PWM_Start+0x30>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_TIM_PWM_Start+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d007      	beq.n	8003714 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 feae 	bl	800449c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_TIM_PWM_Stop+0xa8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIM_PWM_Stop+0x2c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_TIM_PWM_Stop+0xac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_TIM_PWM_Stop+0x30>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_TIM_PWM_Stop+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	f241 1311 	movw	r3, #4369	; 0x1111
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_TIM_PWM_Stop+0x66>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	f240 4344 	movw	r3, #1092	; 0x444
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_TIM_PWM_Stop+0x66>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	f241 1311 	movw	r3, #4369	; 0x1111
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_TIM_PWM_Stop+0x96>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	f240 4344 	movw	r3, #1092	; 0x444
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_TIM_PWM_Stop+0x96>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e083      	b.n	80038f4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f008 fb81 	bl	800bf08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381c:	f023 0307 	bic.w	r3, r3, #7
 8003820:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 fb4b 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	4313      	orrs	r3, r2
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003878:	f023 030c 	bic.w	r3, r3, #12
 800387c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003884:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	4313      	orrs	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	031b      	lsls	r3, r3, #12
 80038a8:	4313      	orrs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	4313      	orrs	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_TIM_Encoder_Start+0x16>
 800390c:	2b04      	cmp	r3, #4
 800390e:	d008      	beq.n	8003922 <HAL_TIM_Encoder_Start+0x26>
 8003910:	e00f      	b.n	8003932 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fdbe 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003920:	e016      	b.n	8003950 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	2104      	movs	r1, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fdb6 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003930:	e00e      	b.n	8003950 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdae 	bl	800449c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	2104      	movs	r1, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fda7 	bl	800449c <TIM_CCxChannelCmd>
      break;
 800394e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d122      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d11b      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0202 	mvn.w	r2, #2
 8003996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fa6c 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 80039b2:	e005      	b.n	80039c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fa5e 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa6f 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d122      	bne.n	8003a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d11b      	bne.n	8003a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0204 	mvn.w	r2, #4
 80039ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa42 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003a06:	e005      	b.n	8003a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa34 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa45 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d122      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11b      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0208 	mvn.w	r2, #8
 8003a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2204      	movs	r2, #4
 8003a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa18 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003a5a:	e005      	b.n	8003a68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fa0a 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa1b 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d122      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d11b      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0210 	mvn.w	r2, #16
 8003a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2208      	movs	r2, #8
 8003a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f9ee 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003aae:	e005      	b.n	8003abc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9e0 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9f1 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10e      	bne.n	8003aee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0201 	mvn.w	r2, #1
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f004 f971 	bl	8007dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d10e      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d107      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fd35 	bl	8004584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d10e      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f9b6 	bl	8003eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d10e      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0220 	mvn.w	r2, #32
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fcff 	bl	8004570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0b4      	b.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	f200 809f 	bhi.w	8003cec <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003ced 	.word	0x08003ced
 8003bbc:	08003ced 	.word	0x08003ced
 8003bc0:	08003ced 	.word	0x08003ced
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003ced 	.word	0x08003ced
 8003bcc:	08003ced 	.word	0x08003ced
 8003bd0:	08003ced 	.word	0x08003ced
 8003bd4:	08003c6b 	.word	0x08003c6b
 8003bd8:	08003ced 	.word	0x08003ced
 8003bdc:	08003ced 	.word	0x08003ced
 8003be0:	08003ced 	.word	0x08003ced
 8003be4:	08003cab 	.word	0x08003cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fa0a 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	619a      	str	r2, [r3, #24]
      break;
 8003c26:	e062      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fa5a 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]
      break;
 8003c68:	e041      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 faaf 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0208 	orr.w	r2, r2, #8
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0204 	bic.w	r2, r2, #4
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
      break;
 8003ca8:	e021      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fb03 	bl	80042bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	61da      	str	r2, [r3, #28]
      break;
 8003cea:	e000      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003cec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_ConfigClockSource+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0a6      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x166>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d067      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x120>
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d80b      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x6c>
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d073      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d802      	bhi.n	8003d6a <HAL_TIM_ConfigClockSource+0x62>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d06f      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d68:	e078      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d06c      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
 8003d6e:	2b30      	cmp	r3, #48	; 0x30
 8003d70:	d06a      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d72:	e073      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d74:	2b70      	cmp	r3, #112	; 0x70
 8003d76:	d00d      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0x8c>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d804      	bhi.n	8003d86 <HAL_TIM_ConfigClockSource+0x7e>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d033      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0xe0>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d041      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d84:	e06a      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	d066      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x152>
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d90:	d017      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d92:	e063      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f000 fb5a 	bl	800445c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e04c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6899      	ldr	r1, [r3, #8]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f000 fb43 	bl	800445c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de4:	609a      	str	r2, [r3, #8]
      break;
 8003de6:	e039      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f000 fab7 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2150      	movs	r1, #80	; 0x50
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fb10 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e06:	e029      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	461a      	mov	r2, r3
 8003e16:	f000 fad6 	bl	80043c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2160      	movs	r1, #96	; 0x60
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fb00 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e26:	e019      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f000 fa97 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 faf0 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e46:	e009      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fae7 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d027      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d023      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d017      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <TIM_Base_SetConfig+0x128>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <TIM_Base_SetConfig+0x12c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <TIM_Base_SetConfig+0x130>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0x134>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <TIM_Base_SetConfig+0x138>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <TIM_Base_SetConfig+0x13c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0xf8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	40001800 	.word	0x40001800
 8004000:	40001c00 	.word	0x40001c00
 8004004:	40002000 	.word	0x40002000

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <TIM_OC1_SetConfig+0xd8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0x64>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0308 	bic.w	r3, r3, #8
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <TIM_OC1_SetConfig+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC1_SetConfig+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a17      	ldr	r2, [pc, #92]	; (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x94>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x66>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC3_SetConfig+0x92>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d113      	bne.n	800428e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <TIM_OC4_SetConfig+0xa4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x68>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <TIM_OC4_SetConfig+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	f043 0307 	orr.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e032      	b.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03f      	b.n	800462a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f007 fd9e 	bl	800c100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	; 0x24
 80045c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f90b 	bl	80047f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b088      	sub	sp, #32
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	f040 8083 	bne.w	800475a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_UART_Transmit+0x2e>
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e07b      	b.n	800475c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_UART_Transmit+0x40>
 800466e:	2302      	movs	r3, #2
 8004670:	e074      	b.n	800475c <HAL_UART_Transmit+0x12a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2221      	movs	r2, #33	; 0x21
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004688:	f7fc fc94 	bl	8000fb4 <HAL_GetTick>
 800468c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800469a:	e042      	b.n	8004722 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d122      	bne.n	80046fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f850 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e046      	b.n	800475c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3302      	adds	r3, #2
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	e017      	b.n	8004722 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	e013      	b.n	8004722 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f82d 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e023      	b.n	800475c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	60ba      	str	r2, [r7, #8]
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1b7      	bne.n	800469c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f814 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e00a      	b.n	800475c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004774:	e02c      	b.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d028      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <UART_WaitOnFlagUntilTimeout+0x30>
 8004784:	f7fc fc16 	bl	8000fb4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d21d      	bcs.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e00f      	b.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d0c3      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004838:	f023 030c 	bic.w	r3, r3, #12
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	68f9      	ldr	r1, [r7, #12]
 8004842:	430b      	orrs	r3, r1
 8004844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	f040 80e4 	bne.w	8004a30 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4aab      	ldr	r2, [pc, #684]	; (8004b1c <UART_SetConfig+0x324>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <UART_SetConfig+0x84>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4aaa      	ldr	r2, [pc, #680]	; (8004b20 <UART_SetConfig+0x328>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d16c      	bne.n	8004956 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800487c:	f7fe f92a 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004880:	4602      	mov	r2, r0
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	4aa3      	ldr	r2, [pc, #652]	; (8004b24 <UART_SetConfig+0x32c>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	011c      	lsls	r4, r3, #4
 80048a0:	f7fe f918 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009a      	lsls	r2, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80048ba:	f7fe f90b 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	4a93      	ldr	r2, [pc, #588]	; (8004b24 <UART_SetConfig+0x32c>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2264      	movs	r2, #100	; 0x64
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	1aeb      	subs	r3, r5, r3
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a8e      	ldr	r2, [pc, #568]	; (8004b24 <UART_SetConfig+0x32c>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f6:	441c      	add	r4, r3
 80048f8:	f7fe f8ec 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009a      	lsls	r2, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004912:	f7fe f8df 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004916:	4602      	mov	r2, r0
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	4a7d      	ldr	r2, [pc, #500]	; (8004b24 <UART_SetConfig+0x32c>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	; 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1aeb      	subs	r3, r5, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	3332      	adds	r3, #50	; 0x32
 8004940:	4a78      	ldr	r2, [pc, #480]	; (8004b24 <UART_SetConfig+0x32c>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	f003 0207 	and.w	r2, r3, #7
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4422      	add	r2, r4
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	e154      	b.n	8004c00 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004956:	f7fe f8a9 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800495a:	4602      	mov	r2, r0
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	4a6c      	ldr	r2, [pc, #432]	; (8004b24 <UART_SetConfig+0x32c>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	011c      	lsls	r4, r3, #4
 800497a:	f7fe f897 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800497e:	4602      	mov	r2, r0
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fbb2 f5f3 	udiv	r5, r2, r3
 8004994:	f7fe f88a 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004998:	4602      	mov	r2, r0
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009a      	lsls	r2, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <UART_SetConfig+0x32c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2264      	movs	r2, #100	; 0x64
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	1aeb      	subs	r3, r5, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3332      	adds	r3, #50	; 0x32
 80049c2:	4a58      	ldr	r2, [pc, #352]	; (8004b24 <UART_SetConfig+0x32c>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d0:	441c      	add	r4, r3
 80049d2:	f7fe f86b 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80049ec:	f7fe f85e 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	4a47      	ldr	r2, [pc, #284]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2264      	movs	r2, #100	; 0x64
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	1aeb      	subs	r3, r5, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4422      	add	r2, r4
 8004a2c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a2e:	e0e7      	b.n	8004c00 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <UART_SetConfig+0x324>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <UART_SetConfig+0x24c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a38      	ldr	r2, [pc, #224]	; (8004b20 <UART_SetConfig+0x328>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d171      	bne.n	8004b28 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a44:	f7fe f846 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4a31      	ldr	r2, [pc, #196]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	011c      	lsls	r4, r3, #4
 8004a68:	f7fe f834 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009a      	lsls	r2, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a82:	f7fe f827 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009a      	lsls	r2, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1aeb      	subs	r3, r5, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	; 0x32
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <UART_SetConfig+0x32c>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abc:	441c      	add	r4, r3
 8004abe:	f7fe f809 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad8:	f7fd fffc 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009a      	lsls	r2, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <UART_SetConfig+0x32c>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2264      	movs	r2, #100	; 0x64
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	1aeb      	subs	r3, r5, r3
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	3332      	adds	r3, #50	; 0x32
 8004b06:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <UART_SetConfig+0x32c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	f003 020f 	and.w	r2, r3, #15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4422      	add	r2, r4
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	e071      	b.n	8004c00 <UART_SetConfig+0x408>
 8004b1c:	40011000 	.word	0x40011000
 8004b20:	40011400 	.word	0x40011400
 8004b24:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b28:	f7fd ffc0 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a31      	ldr	r2, [pc, #196]	; (8004c08 <UART_SetConfig+0x410>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	011c      	lsls	r4, r3, #4
 8004b4c:	f7fd ffae 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009a      	lsls	r2, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b66:	f7fd ffa1 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009a      	lsls	r2, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <UART_SetConfig+0x410>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2264      	movs	r2, #100	; 0x64
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	1aeb      	subs	r3, r5, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <UART_SetConfig+0x410>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	441c      	add	r4, r3
 8004ba2:	f7fd ff83 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bbc:	f7fd ff76 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <UART_SetConfig+0x410>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	2264      	movs	r2, #100	; 0x64
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	1aeb      	subs	r3, r5, r3
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	3332      	adds	r3, #50	; 0x32
 8004bea:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <UART_SetConfig+0x410>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f003 020f 	and.w	r2, r3, #15
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4422      	add	r2, r4
 8004bfc:	609a      	str	r2, [r3, #8]
}
 8004bfe:	e7ff      	b.n	8004c00 <UART_SetConfig+0x408>
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bdb0      	pop	{r4, r5, r7, pc}
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <drive_init+0x14>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000ee4 	.word	0x20000ee4

08004c24 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c28:	e00f      	b.n	8004c4a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f006 fe44 	bl	800b8bc <led_write>
		  HAL_Delay(200);
 8004c34:	20c8      	movs	r0, #200	; 0xc8
 8004c36:	f7fc f9c9 	bl	8000fcc <HAL_Delay>
		  led_write(0, 0, 0);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f006 fe3c 	bl	800b8bc <led_write>
		  HAL_Delay(200);
 8004c44:	20c8      	movs	r0, #200	; 0xc8
 8004c46:	f7fc f9c1 	bl	8000fcc <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <drive_ready+0x48>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b50      	cmp	r3, #80	; 0x50
 8004c50:	d9eb      	bls.n	8004c2a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <drive_ready+0x4c>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c5c:	f7fc f9b6 	bl	8000fcc <HAL_Delay>
	  degree_z = 0;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <drive_ready+0x50>)
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000cd4 	.word	0x20000cd4
 8004c70:	20000a1c 	.word	0x20000a1c
 8004c74:	20000ad8 	.word	0x20000ad8

08004c78 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <drive_start+0x44>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <drive_start+0x48>)
 8004c86:	6013      	str	r3, [r2, #0]
	if(H_accel_flag == 0) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <drive_start+0x4c>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <drive_start+0x24>
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <drive_start+0x50>)
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <drive_start+0x54>)
 8004c9a:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <drive_start+0x58>)
 8004c9e:	8813      	ldrh	r3, [r2, #0]
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <drive_start+0x58>)
 8004ca8:	8813      	ldrh	r3, [r2, #0]
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	8013      	strh	r3, [r2, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000a68 	.word	0x20000a68
 8004cc0:	20000f00 	.word	0x20000f00
 8004cc4:	20000345 	.word	0x20000345
 8004cc8:	20000220 	.word	0x20000220
 8004ccc:	20000b7c 	.word	0x20000b7c
 8004cd0:	20000ee4 	.word	0x20000ee4

08004cd4 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <drive_stop+0x3c>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <drive_stop+0x40>)
 8004ce2:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <drive_stop+0x44>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <drive_stop+0x48>)
 8004cee:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <drive_stop+0x4c>)
 8004cf2:	8813      	ldrh	r3, [r2, #0]
 8004cf4:	f36f 0341 	bfc	r3, #1, #1
 8004cf8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <drive_stop+0x4c>)
 8004cfc:	8813      	ldrh	r3, [r2, #0]
 8004cfe:	f36f 0382 	bfc	r3, #2, #1
 8004d02:	8013      	strh	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000a68 	.word	0x20000a68
 8004d14:	20000f00 	.word	0x20000f00
 8004d18:	200006f8 	.word	0x200006f8
 8004d1c:	20000b24 	.word	0x20000b24
 8004d20:	20000ee4 	.word	0x20000ee4

08004d24 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d28:	4a07      	ldr	r2, [pc, #28]	; (8004d48 <control_start+0x24>)
 8004d2a:	8813      	ldrh	r3, [r2, #0]
 8004d2c:	f043 0308 	orr.w	r3, r3, #8
 8004d30:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d32:	4a05      	ldr	r2, [pc, #20]	; (8004d48 <control_start+0x24>)
 8004d34:	8813      	ldrh	r3, [r2, #0]
 8004d36:	f043 0310 	orr.w	r3, r3, #16
 8004d3a:	8013      	strh	r3, [r2, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000ee4 	.word	0x20000ee4

08004d4c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <control_stop+0x24>)
 8004d52:	8813      	ldrh	r3, [r2, #0]
 8004d54:	f36f 03c3 	bfc	r3, #3, #1
 8004d58:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004d5a:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <control_stop+0x24>)
 8004d5c:	8813      	ldrh	r3, [r2, #0]
 8004d5e:	f36f 1304 	bfc	r3, #4, #1
 8004d62:	8013      	strh	r3, [r2, #0]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000ee4 	.word	0x20000ee4

08004d74 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460a      	mov	r2, r1
 8004d7e:	71fb      	strb	r3, [r7, #7]
 8004d80:	4613      	mov	r3, r2
 8004d82:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d13e      	bne.n	8004e08 <drive_dir+0x94>
		if(dir == 0){
 8004d8a:	79bb      	ldrb	r3, [r7, #6]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004d90:	2201      	movs	r2, #1
 8004d92:	2120      	movs	r1, #32
 8004d94:	483f      	ldr	r0, [pc, #252]	; (8004e94 <drive_dir+0x120>)
 8004d96:	f7fd fa8d 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	483d      	ldr	r0, [pc, #244]	; (8004e94 <drive_dir+0x120>)
 8004da0:	f7fd fa88 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004da4:	2201      	movs	r2, #1
 8004da6:	2101      	movs	r1, #1
 8004da8:	483b      	ldr	r0, [pc, #236]	; (8004e98 <drive_dir+0x124>)
 8004daa:	f7fd fa83 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dae:	e06c      	b.n	8004e8a <drive_dir+0x116>
		}else if(dir == 1){
 8004db0:	79bb      	ldrb	r3, [r7, #6]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10f      	bne.n	8004dd6 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004db6:	2200      	movs	r2, #0
 8004db8:	2120      	movs	r1, #32
 8004dba:	4836      	ldr	r0, [pc, #216]	; (8004e94 <drive_dir+0x120>)
 8004dbc:	f7fd fa7a 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	4833      	ldr	r0, [pc, #204]	; (8004e94 <drive_dir+0x120>)
 8004dc6:	f7fd fa75 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004dca:	2201      	movs	r2, #1
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4832      	ldr	r0, [pc, #200]	; (8004e98 <drive_dir+0x124>)
 8004dd0:	f7fd fa70 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004dd4:	e059      	b.n	8004e8a <drive_dir+0x116>
		}else if(dir == 2){
 8004dd6:	79bb      	ldrb	r3, [r7, #6]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d10f      	bne.n	8004dfc <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004ddc:	2201      	movs	r2, #1
 8004dde:	2120      	movs	r1, #32
 8004de0:	482c      	ldr	r0, [pc, #176]	; (8004e94 <drive_dir+0x120>)
 8004de2:	f7fd fa67 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004de6:	2201      	movs	r2, #1
 8004de8:	2110      	movs	r1, #16
 8004dea:	482a      	ldr	r0, [pc, #168]	; (8004e94 <drive_dir+0x120>)
 8004dec:	f7fd fa62 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004df0:	2201      	movs	r2, #1
 8004df2:	2101      	movs	r1, #1
 8004df4:	4828      	ldr	r0, [pc, #160]	; (8004e98 <drive_dir+0x124>)
 8004df6:	f7fd fa5d 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004dfa:	e046      	b.n	8004e8a <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4825      	ldr	r0, [pc, #148]	; (8004e98 <drive_dir+0x124>)
 8004e02:	f7fd fa57 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e06:	e040      	b.n	8004e8a <drive_dir+0x116>
		if(dir == 0){
 8004e08:	79bb      	ldrb	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d110      	bne.n	8004e30 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e0e:	2201      	movs	r2, #1
 8004e10:	2102      	movs	r1, #2
 8004e12:	4821      	ldr	r0, [pc, #132]	; (8004e98 <drive_dir+0x124>)
 8004e14:	f7fd fa4e 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e1e:	481e      	ldr	r0, [pc, #120]	; (8004e98 <drive_dir+0x124>)
 8004e20:	f7fd fa48 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e24:	2201      	movs	r2, #1
 8004e26:	2101      	movs	r1, #1
 8004e28:	481b      	ldr	r0, [pc, #108]	; (8004e98 <drive_dir+0x124>)
 8004e2a:	f7fd fa43 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e2e:	e02c      	b.n	8004e8a <drive_dir+0x116>
		}else if(dir == 1){
 8004e30:	79bb      	ldrb	r3, [r7, #6]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d110      	bne.n	8004e58 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e36:	2200      	movs	r2, #0
 8004e38:	2102      	movs	r1, #2
 8004e3a:	4817      	ldr	r0, [pc, #92]	; (8004e98 <drive_dir+0x124>)
 8004e3c:	f7fd fa3a 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e40:	2201      	movs	r2, #1
 8004e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e46:	4814      	ldr	r0, [pc, #80]	; (8004e98 <drive_dir+0x124>)
 8004e48:	f7fd fa34 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4811      	ldr	r0, [pc, #68]	; (8004e98 <drive_dir+0x124>)
 8004e52:	f7fd fa2f 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e56:	e018      	b.n	8004e8a <drive_dir+0x116>
		}else if(dir == 2){
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d110      	bne.n	8004e80 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2102      	movs	r1, #2
 8004e62:	480d      	ldr	r0, [pc, #52]	; (8004e98 <drive_dir+0x124>)
 8004e64:	f7fd fa26 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e6e:	480a      	ldr	r0, [pc, #40]	; (8004e98 <drive_dir+0x124>)
 8004e70:	f7fd fa20 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e74:	2201      	movs	r2, #1
 8004e76:	2101      	movs	r1, #1
 8004e78:	4807      	ldr	r0, [pc, #28]	; (8004e98 <drive_dir+0x124>)
 8004e7a:	f7fd fa1b 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e7e:	e004      	b.n	8004e8a <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e80:	2200      	movs	r2, #0
 8004e82:	2101      	movs	r1, #1
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <drive_dir+0x124>)
 8004e86:	f7fd fa15 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40020800 	.word	0x40020800
 8004e98:	40020400 	.word	0x40020400

08004e9c <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	80fb      	strh	r3, [r7, #6]
 8004eae:	4603      	mov	r3, r0
 8004eb0:	80bb      	strh	r3, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	807b      	strh	r3, [r7, #2]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004eba:	88bb      	ldrh	r3, [r7, #4]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <driveA+0xc0>)
 8004ec6:	edc3 7a00 	vstr	s15, [r3]
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <driveA+0xc4>)
 8004ecc:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004ed0:	887b      	ldrh	r3, [r7, #2]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <driveA+0xc8>)
 8004edc:	edc3 7a00 	vstr	s15, [r3]
 8004ee0:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <driveA+0xcc>)
 8004ee2:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef0:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <driveA+0xd0>)
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <driveA+0xd4>)
 8004ef8:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 1)target_speed_l = target_speed_r = speed_min_p;
 8004efc:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <driveA+0xd8>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10a      	bne.n	8004f1a <driveA+0x7e>
 8004f04:	88bb      	ldrh	r3, [r7, #4]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <driveA+0xdc>)
 8004f10:	edc3 7a00 	vstr	s15, [r3]
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <driveA+0xe0>)
 8004f16:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f1a:	f7ff fead 	bl	8004c78 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8004f1e:	bf00      	nop
 8004f20:	883b      	ldrh	r3, [r7, #0]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <driveA+0xe4>)
 8004f2c:	edd3 7a00 	vldr	s15, [r3]
 8004f30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	dcf2      	bgt.n	8004f20 <driveA+0x84>
 8004f3a:	883b      	ldrh	r3, [r7, #0]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <driveA+0xe8>)
 8004f46:	edd3 7a00 	vldr	s15, [r3]
 8004f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f52:	dce5      	bgt.n	8004f20 <driveA+0x84>

//	drive_stop();
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd90      	pop	{r4, r7, pc}
 8004f5c:	20000ee8 	.word	0x20000ee8
 8004f60:	20000ad0 	.word	0x20000ad0
 8004f64:	20000224 	.word	0x20000224
 8004f68:	200006f4 	.word	0x200006f4
 8004f6c:	20000a60 	.word	0x20000a60
 8004f70:	20000cd8 	.word	0x20000cd8
 8004f74:	20000345 	.word	0x20000345
 8004f78:	20000220 	.word	0x20000220
 8004f7c:	20000b7c 	.word	0x20000b7c
 8004f80:	20000f00 	.word	0x20000f00
 8004f84:	20000a68 	.word	0x20000a68

08004f88 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4604      	mov	r4, r0
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	461a      	mov	r2, r3
 8004f96:	4623      	mov	r3, r4
 8004f98:	80fb      	strh	r3, [r7, #6]
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80bb      	strh	r3, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	807b      	strh	r3, [r7, #2]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	803b      	strh	r3, [r7, #0]

	float speed_0 = speed_l;								//等速走行距離を計算するためにmain.cより参照
 8004fa6:	4b51      	ldr	r3, [pc, #324]	; (80050ec <driveD+0x164>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8004fac:	88bb      	ldrh	r3, [r7, #4]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	4b4e      	ldr	r3, [pc, #312]	; (80050f0 <driveD+0x168>)
 8004fb8:	edc3 7a00 	vstr	s15, [r3]
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <driveD+0x16c>)
 8004fbe:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004fc2:	887b      	ldrh	r3, [r7, #2]
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <driveD+0x170>)
 8004fce:	edc3 7a00 	vstr	s15, [r3]
 8004fd2:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <driveD+0x174>)
 8004fd4:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe4:	4b46      	ldr	r3, [pc, #280]	; (8005100 <driveD+0x178>)
 8004fe6:	edc3 7a00 	vstr	s15, [r3]
 8004fea:	4b46      	ldr	r3, [pc, #280]	; (8005104 <driveD+0x17c>)
 8004fec:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8004ff0:	883b      	ldrh	r3, [r7, #0]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <driveD+0x16c>)
 8004ffc:	edd3 6a00 	vldr	s13, [r3]
 8005000:	4b3c      	ldr	r3, [pc, #240]	; (80050f4 <driveD+0x16c>)
 8005002:	edd3 7a00 	vldr	s15, [r3]
 8005006:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800500a:	ed97 6a03 	vldr	s12, [r7, #12]
 800500e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005012:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005016:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800501a:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <driveD+0x17c>)
 800501c:	edd3 7a00 	vldr	s15, [r3]
 8005020:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005024:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800502c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005030:	ee17 3a90 	vmov	r3, s15
 8005034:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	4a31      	ldr	r2, [pc, #196]	; (8005100 <driveD+0x178>)
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4a31      	ldr	r2, [pc, #196]	; (8005104 <driveD+0x17c>)
 8005040:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	4a30      	ldr	r2, [pc, #192]	; (8005108 <driveD+0x180>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4a30      	ldr	r2, [pc, #192]	; (800510c <driveD+0x184>)
 800504c:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800504e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dd1c      	ble.n	8005090 <driveD+0x108>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 8005056:	bf00      	nop
 8005058:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <driveD+0x184>)
 8005066:	edd3 7a00 	vldr	s15, [r3]
 800506a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	dcf1      	bgt.n	8005058 <driveD+0xd0>
 8005074:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005080:	4b21      	ldr	r3, [pc, #132]	; (8005108 <driveD+0x180>)
 8005082:	edd3 7a00 	vldr	s15, [r3]
 8005086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	dce3      	bgt.n	8005058 <driveD+0xd0>
	}
	accel_l = accel_r = accel_p;
 8005090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <driveD+0x178>)
 800509e:	edc3 7a00 	vstr	s15, [r3]
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <driveD+0x17c>)
 80050a4:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80050a8:	bf00      	nop
 80050aa:	883b      	ldrh	r3, [r7, #0]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <driveD+0x184>)
 80050b6:	edd3 7a00 	vldr	s15, [r3]
 80050ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	dcf2      	bgt.n	80050aa <driveD+0x122>
 80050c4:	883b      	ldrh	r3, [r7, #0]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <driveD+0x180>)
 80050d0:	edd3 7a00 	vldr	s15, [r3]
 80050d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050dc:	dce5      	bgt.n	80050aa <driveD+0x122>

	drive_stop();											//走行停止
 80050de:	f7ff fdf9 	bl	8004cd4 <drive_stop>
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd90      	pop	{r4, r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000a6c 	.word	0x20000a6c
 80050f0:	20000ee8 	.word	0x20000ee8
 80050f4:	20000ad0 	.word	0x20000ad0
 80050f8:	20000224 	.word	0x20000224
 80050fc:	200006f4 	.word	0x200006f4
 8005100:	20000a60 	.word	0x20000a60
 8005104:	20000cd8 	.word	0x20000cd8
 8005108:	20000a68 	.word	0x20000a68
 800510c:	20000f00 	.word	0x20000f00

08005110 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <driveU+0xb0>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <driveU+0xb4>)
 8005124:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <driveU+0xb8>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	4a27      	ldr	r2, [pc, #156]	; (80051cc <driveU+0xbc>)
 8005130:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005132:	e024      	b.n	800517e <driveU+0x6e>
		if(MF.FLAG.WEDGE == 1){
 8005134:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <driveU+0xc0>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d11d      	bne.n	800517e <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <driveU+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b0e      	cmp	r3, #14
 8005148:	d903      	bls.n	8005152 <driveU+0x42>
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <driveU+0xc8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b22      	cmp	r3, #34	; 0x22
 8005150:	d815      	bhi.n	800517e <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 8005152:	bf00      	nop
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <driveU+0xbc>)
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80051dc <driveU+0xcc>
 800515e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005166:	d4f5      	bmi.n	8005154 <driveU+0x44>
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <driveU+0xb8>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80051dc <driveU+0xcc>
 8005172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	d4eb      	bmi.n	8005154 <driveU+0x44>
			break;
 800517c:	e019      	b.n	80051b2 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <driveU+0xbc>)
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	dccd      	bgt.n	8005134 <driveU+0x24>
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <driveU+0xb8>)
 80051a4:	edd3 7a00 	vldr	s15, [r3]
 80051a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	dcc0      	bgt.n	8005134 <driveU+0x24>
			}
		}
	}
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000a60 	.word	0x20000a60
 80051c4:	20000cd8 	.word	0x20000cd8
 80051c8:	20000a68 	.word	0x20000a68
 80051cc:	20000f00 	.word	0x20000f00
 80051d0:	20000ee4 	.word	0x20000ee4
 80051d4:	20000a78 	.word	0x20000a78
 80051d8:	20000ee0 	.word	0x20000ee0
 80051dc:	428c0000 	.word	0x428c0000

080051e0 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 80051ea:	4b19      	ldr	r3, [pc, #100]	; (8005250 <driveC+0x70>)
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <driveC+0x74>)
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <driveC+0x78>)
 80051f2:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <driveC+0x70>)
 80051f6:	4a19      	ldr	r2, [pc, #100]	; (800525c <driveC+0x7c>)
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4a19      	ldr	r2, [pc, #100]	; (8005260 <driveC+0x80>)
 80051fc:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	4a18      	ldr	r2, [pc, #96]	; (8005264 <driveC+0x84>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4a18      	ldr	r2, [pc, #96]	; (8005268 <driveC+0x88>)
 8005208:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800520a:	f7ff fd35 	bl	8004c78 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800520e:	bf00      	nop
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <driveC+0x8c>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005228:	dcf2      	bgt.n	8005210 <driveC+0x30>
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <driveC+0x90>)
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	dce5      	bgt.n	8005210 <driveC+0x30>

	drive_stop();											//走行停止
 8005244:	f7ff fd46 	bl	8004cd4 <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	43160000 	.word	0x43160000
 8005254:	20000ee8 	.word	0x20000ee8
 8005258:	20000ad0 	.word	0x20000ad0
 800525c:	20000224 	.word	0x20000224
 8005260:	200006f4 	.word	0x200006f4
 8005264:	20000a60 	.word	0x20000a60
 8005268:	20000cd8 	.word	0x20000cd8
 800526c:	20000f00 	.word	0x20000f00
 8005270:	20000a68 	.word	0x20000a68

08005274 <driveC2>:
//driveC2
// 指定距離分デフォルト逆回転速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <driveC2+0x74>)
 8005280:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <driveC2+0x78>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <driveC2+0x7c>)
 8005286:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <driveC2+0x74>)
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <driveC2+0x80>)
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <driveC2+0x84>)
 8005290:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//等速走行のため加速度は0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	4a19      	ldr	r2, [pc, #100]	; (80052fc <driveC2+0x88>)
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <driveC2+0x8c>)
 800529c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800529e:	f7ff fceb 	bl	8004c78 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//左右のモータが定速分の逆走距離以上進むまで待機
 80052a2:	bf00      	nop
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	425b      	negs	r3, r3
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b0:	4b14      	ldr	r3, [pc, #80]	; (8005304 <driveC2+0x90>)
 80052b2:	edd3 7a00 	vldr	s15, [r3]
 80052b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d4f1      	bmi.n	80052a4 <driveC2+0x30>
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	425b      	negs	r3, r3
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <driveC2+0x94>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052da:	d4e3      	bmi.n	80052a4 <driveC2+0x30>

	drive_stop();											//走行停止
 80052dc:	f7ff fcfa 	bl	8004cd4 <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	c37a0000 	.word	0xc37a0000
 80052ec:	20000ee8 	.word	0x20000ee8
 80052f0:	20000ad0 	.word	0x20000ad0
 80052f4:	20000224 	.word	0x20000224
 80052f8:	200006f4 	.word	0x200006f4
 80052fc:	20000a60 	.word	0x20000a60
 8005300:	20000cd8 	.word	0x20000cd8
 8005304:	20000f00 	.word	0x20000f00
 8005308:	20000a68 	.word	0x20000a68

0800530c <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //尻を当てる程度に後退。回転後に停止する
 8005310:	2064      	movs	r0, #100	; 0x64
 8005312:	f7ff ffaf 	bl	8005274 <driveC2>
  driveC(SETPOS_SET);           //デフォルト速度で区画中心になる分回転。回転後に停止する
 8005316:	2023      	movs	r0, #35	; 0x23
 8005318:	f7ff ff62 	bl	80051e0 <driveC>
}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}

08005320 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0

	control_start();
 8005324:	f7ff fcfe 	bl	8004d24 <control_start>
	if(start_flag == 0){
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <start_sectionA+0x50>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <start_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START);					//スタート区画分加速しながら走行。走行後は停止しない
 8005332:	237d      	movs	r3, #125	; 0x7d
 8005334:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800533e:	f7ff fdad 	bl	8004e9c <driveA>
 8005342:	e007      	b.n	8005354 <start_sectionA+0x34>
	}else{
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005344:	235a      	movs	r3, #90	; 0x5a
 8005346:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800534a:	2164      	movs	r1, #100	; 0x64
 800534c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005350:	f7ff fda4 	bl	8004e9c <driveA>
	}
	start_flag = 1;
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <start_sectionA+0x50>)
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <start_sectionA+0x54>)
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <start_sectionA+0x4c>
 8005368:	f006 fa6e 	bl	800b848 <get_wall_info>
}
 800536c:	bf00      	nop
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000f04 	.word	0x20000f04
 8005374:	20000ee4 	.word	0x20000ee4

08005378 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0

	control_start();
 800537c:	f7ff fcd2 	bl	8004d24 <control_start>
	driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005380:	235a      	movs	r3, #90	; 0x5a
 8005382:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800538c:	f7ff fd86 	bl	8004e9c <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <half_sectionA+0x30>)
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <half_sectionA+0x2a>
 800539e:	f006 fa53 	bl	800b848 <get_wall_info>
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000ee4 	.word	0x20000ee4

080053ac <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0

	control_start();
 80053b0:	f7ff fcb8 	bl	8004d24 <control_start>
	driveD(-4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 80053b4:	235a      	movs	r3, #90	; 0x5a
 80053b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053ba:	2164      	movs	r1, #100	; 0x64
 80053bc:	4802      	ldr	r0, [pc, #8]	; (80053c8 <half_sectionD+0x1c>)
 80053be:	f7ff fde3 	bl	8004f88 <driveD>
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	fffff060 	.word	0xfffff060

080053cc <start_sectionA2>:
//start_sectionA2
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA2(void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0

	control_start();
 80053d0:	f7ff fca8 	bl	8004d24 <control_start>
	if(start_flag == 0){
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <start_sectionA2+0x50>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d108      	bne.n	80053f0 <start_sectionA2+0x24>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//スタート区画分加速しながら走行。走行後は停止しない
 80053de:	237d      	movs	r3, #125	; 0x7d
 80053e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80053e4:	2164      	movs	r1, #100	; 0x64
 80053e6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80053ea:	f7ff fd57 	bl	8004e9c <driveA>
 80053ee:	e007      	b.n	8005400 <start_sectionA2+0x34>
	}else{
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 80053f0:	235a      	movs	r3, #90	; 0x5a
 80053f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80053fc:	f7ff fd4e 	bl	8004e9c <driveA>
	}
	start_flag = 1;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <start_sectionA2+0x50>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <start_sectionA2+0x54>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <start_sectionA2+0x4c>
 8005414:	f006 fa18 	bl	800b848 <get_wall_info>
}
 8005418:	bf00      	nop
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000f04 	.word	0x20000f04
 8005420:	20000ee4 	.word	0x20000ee4

08005424 <half_sectionA2>:
//half_sectionA2
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA2(void){
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
	full_led_write(1);
 8005428:	2001      	movs	r0, #1
 800542a:	f006 fa81 	bl	800b930 <full_led_write>
	control_start();
 800542e:	f7ff fc79 	bl	8004d24 <control_start>
	driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005432:	235a      	movs	r3, #90	; 0x5a
 8005434:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005438:	2164      	movs	r1, #100	; 0x64
 800543a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800543e:	f7ff fd2d 	bl	8004e9c <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <half_sectionA2+0x34>)
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <half_sectionA2+0x30>
 8005450:	f006 f9fa 	bl	800b848 <get_wall_info>
}
 8005454:	bf00      	nop
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000ee4 	.word	0x20000ee4

0800545c <half_sectionD2>:
//half_sectionD2
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD2(void){
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
	full_led_write(3);
 8005460:	2003      	movs	r0, #3
 8005462:	f006 fa65 	bl	800b930 <full_led_write>
	control_start();
 8005466:	f7ff fc5d 	bl	8004d24 <control_start>
	driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 800546a:	235a      	movs	r3, #90	; 0x5a
 800546c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005470:	2164      	movs	r1, #100	; 0x64
 8005472:	4802      	ldr	r0, [pc, #8]	; (800547c <half_sectionD2+0x20>)
 8005474:	f7ff fd88 	bl	8004f88 <driveD>
}
 8005478:	bf00      	nop
 800547a:	bd80      	pop	{r7, pc}
 800547c:	ffffe0c0 	.word	0xffffe0c0

08005480 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005484:	f7ff ff78 	bl	8005378 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005488:	f7ff ff90 	bl	80053ac <half_sectionD>
}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}

08005490 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	full_led_write(4);
 8005494:	2004      	movs	r0, #4
 8005496:	f006 fa4b 	bl	800b930 <full_led_write>
	control_start();
 800549a:	f7ff fc43 	bl	8004d24 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <one_sectionA+0x40>)
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b21b      	sxth	r3, r3
 80054a4:	b298      	uxth	r0, r3
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <one_sectionA+0x44>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	23b4      	movs	r3, #180	; 0xb4
 80054b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80054b4:	f7ff fcf2 	bl	8004e9c <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <one_sectionA+0x48>)
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <one_sectionA+0x3a>
 80054c6:	f006 f9bf 	bl	800b848 <get_wall_info>
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200003d0 	.word	0x200003d0
 80054d4:	20000ef8 	.word	0x20000ef8
 80054d8:	20000ee4 	.word	0x20000ee4

080054dc <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	full_led_write(2);
 80054e0:	2002      	movs	r0, #2
 80054e2:	f006 fa25 	bl	800b930 <full_led_write>
	control_start();
 80054e6:	f7ff fc1d 	bl	8004d24 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <one_sectionD+0x44>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	425b      	negs	r3, r3
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b218      	sxth	r0, r3
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <one_sectionD+0x48>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b21b      	sxth	r3, r3
 80054fe:	b29a      	uxth	r2, r3
 8005500:	23b4      	movs	r3, #180	; 0xb4
 8005502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005506:	f7ff fd3f 	bl	8004f88 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <one_sectionD+0x4c>)
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <one_sectionD+0x40>
 8005518:	f006 f996 	bl	800b848 <get_wall_info>
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200003d0 	.word	0x200003d0
 8005524:	20000ef8 	.word	0x20000ef8
 8005528:	20000ee4 	.word	0x20000ee4

0800552c <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
	full_led_write(7);
 8005530:	2007      	movs	r0, #7
 8005532:	f006 f9fd 	bl	800b930 <full_led_write>
	control_start();
 8005536:	f7ff fbf5 	bl	8004d24 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 800553a:	20b4      	movs	r0, #180	; 0xb4
 800553c:	f7ff fde8 	bl	8005110 <driveU>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <one_sectionU+0x2c>)
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <one_sectionU+0x26>
 800554e:	f006 f97b 	bl	800b848 <get_wall_info>
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000ee4 	.word	0x20000ee4
 800555c:	00000000 	.word	0x00000000

08005560 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005560:	b598      	push	{r3, r4, r7, lr}
 8005562:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <rotate_R90+0x148>)
 8005566:	4a51      	ldr	r2, [pc, #324]	; (80056ac <rotate_R90+0x14c>)
 8005568:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 800556a:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <rotate_R90+0x150>)
 800556c:	4a51      	ldr	r2, [pc, #324]	; (80056b4 <rotate_R90+0x154>)
 800556e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005570:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <rotate_R90+0x158>)
 8005572:	4a52      	ldr	r2, [pc, #328]	; (80056bc <rotate_R90+0x15c>)
 8005574:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005576:	4b4c      	ldr	r3, [pc, #304]	; (80056a8 <rotate_R90+0x148>)
 8005578:	edd3 7a00 	vldr	s15, [r3]
 800557c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80056c0 <rotate_R90+0x160>
 8005580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005584:	ee16 0a90 	vmov	r0, s13
 8005588:	f7fa ffd6 	bl	8000538 <__aeabi_f2d>
 800558c:	a344      	add	r3, pc, #272	; (adr r3, 80056a0 <rotate_R90+0x140>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fb f829 	bl	80005e8 <__aeabi_dmul>
 8005596:	4603      	mov	r3, r0
 8005598:	460c      	mov	r4, r1
 800559a:	4618      	mov	r0, r3
 800559c:	4621      	mov	r1, r4
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b48      	ldr	r3, [pc, #288]	; (80056c4 <rotate_R90+0x164>)
 80055a4:	f7fb f820 	bl	80005e8 <__aeabi_dmul>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	4618      	mov	r0, r3
 80055ae:	4621      	mov	r1, r4
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055b8:	f7fb f940 	bl	800083c <__aeabi_ddiv>
 80055bc:	4603      	mov	r3, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	4618      	mov	r0, r3
 80055c2:	4621      	mov	r1, r4
 80055c4:	f7fb fac0 	bl	8000b48 <__aeabi_d2f>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b3f      	ldr	r3, [pc, #252]	; (80056c8 <rotate_R90+0x168>)
 80055cc:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80055ce:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <rotate_R90+0x148>)
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	eef1 7a67 	vneg.f32	s15, s15
 80055d8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80056c0 <rotate_R90+0x160>
 80055dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055e0:	ee16 0a90 	vmov	r0, s13
 80055e4:	f7fa ffa8 	bl	8000538 <__aeabi_f2d>
 80055e8:	a32d      	add	r3, pc, #180	; (adr r3, 80056a0 <rotate_R90+0x140>)
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f7fa fffb 	bl	80005e8 <__aeabi_dmul>
 80055f2:	4603      	mov	r3, r0
 80055f4:	460c      	mov	r4, r1
 80055f6:	4618      	mov	r0, r3
 80055f8:	4621      	mov	r1, r4
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <rotate_R90+0x164>)
 8005600:	f7fa fff2 	bl	80005e8 <__aeabi_dmul>
 8005604:	4603      	mov	r3, r0
 8005606:	460c      	mov	r4, r1
 8005608:	4618      	mov	r0, r3
 800560a:	4621      	mov	r1, r4
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005614:	f7fb f912 	bl	800083c <__aeabi_ddiv>
 8005618:	4603      	mov	r3, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4618      	mov	r0, r3
 800561e:	4621      	mov	r1, r4
 8005620:	f7fb fa92 	bl	8000b48 <__aeabi_d2f>
 8005624:	4602      	mov	r2, r0
 8005626:	4b29      	ldr	r3, [pc, #164]	; (80056cc <rotate_R90+0x16c>)
 8005628:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800562a:	f7ff fb25 	bl	8004c78 <drive_start>
	control_stop();
 800562e:	f7ff fb8d 	bl	8004d4c <control_stop>
	while(degree_z > target_degree_z-80);
 8005632:	bf00      	nop
 8005634:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <rotate_R90+0x170>)
 8005636:	edd3 7a00 	vldr	s15, [r3]
 800563a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056d4 <rotate_R90+0x174>
 800563e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005642:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <rotate_R90+0x178>)
 8005644:	edd3 7a00 	vldr	s15, [r3]
 8005648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	d4f0      	bmi.n	8005634 <rotate_R90+0xd4>

	accel_l = -30000;
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <rotate_R90+0x150>)
 8005654:	4a21      	ldr	r2, [pc, #132]	; (80056dc <rotate_R90+0x17c>)
 8005656:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <rotate_R90+0x158>)
 800565a:	4a21      	ldr	r2, [pc, #132]	; (80056e0 <rotate_R90+0x180>)
 800565c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <rotate_R90+0x184>)
 8005660:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <rotate_R90+0x188>)
 8005662:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005664:	4b21      	ldr	r3, [pc, #132]	; (80056ec <rotate_R90+0x18c>)
 8005666:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <rotate_R90+0x190>)
 8005668:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800566a:	bf00      	nop
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <rotate_R90+0x170>)
 800566e:	edd3 7a00 	vldr	s15, [r3]
 8005672:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80056f4 <rotate_R90+0x194>
 8005676:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800567a:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <rotate_R90+0x178>)
 800567c:	edd3 7a00 	vldr	s15, [r3]
 8005680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005688:	d4f0      	bmi.n	800566c <rotate_R90+0x10c>

	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800568a:	2101      	movs	r1, #1
 800568c:	2001      	movs	r0, #1
 800568e:	f005 f85d 	bl	800a74c <turn_dir>
	drive_stop();
 8005692:	f7ff fb1f 	bl	8004cd4 <drive_stop>
}
 8005696:	bf00      	nop
 8005698:	bd98      	pop	{r3, r4, r7, pc}
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w
 80056a0:	54442d18 	.word	0x54442d18
 80056a4:	400921fb 	.word	0x400921fb
 80056a8:	20000228 	.word	0x20000228
 80056ac:	44480000 	.word	0x44480000
 80056b0:	20000cd8 	.word	0x20000cd8
 80056b4:	453b8000 	.word	0x453b8000
 80056b8:	20000a60 	.word	0x20000a60
 80056bc:	c53b8000 	.word	0xc53b8000
 80056c0:	43340000 	.word	0x43340000
 80056c4:	40508000 	.word	0x40508000
 80056c8:	200006f4 	.word	0x200006f4
 80056cc:	20000ee8 	.word	0x20000ee8
 80056d0:	20000b78 	.word	0x20000b78
 80056d4:	42a00000 	.word	0x42a00000
 80056d8:	20000ad8 	.word	0x20000ad8
 80056dc:	c6ea6000 	.word	0xc6ea6000
 80056e0:	46ea6000 	.word	0x46ea6000
 80056e4:	20000ad0 	.word	0x20000ad0
 80056e8:	42c80000 	.word	0x42c80000
 80056ec:	20000224 	.word	0x20000224
 80056f0:	c2c80000 	.word	0xc2c80000
 80056f4:	42b40000 	.word	0x42b40000

080056f8 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 80056f8:	b598      	push	{r3, r4, r7, lr}
 80056fa:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80056fc:	4b50      	ldr	r3, [pc, #320]	; (8005840 <rotate_L90+0x148>)
 80056fe:	4a51      	ldr	r2, [pc, #324]	; (8005844 <rotate_L90+0x14c>)
 8005700:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8005702:	4b51      	ldr	r3, [pc, #324]	; (8005848 <rotate_L90+0x150>)
 8005704:	4a51      	ldr	r2, [pc, #324]	; (800584c <rotate_L90+0x154>)
 8005706:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005708:	4b51      	ldr	r3, [pc, #324]	; (8005850 <rotate_L90+0x158>)
 800570a:	4a52      	ldr	r2, [pc, #328]	; (8005854 <rotate_L90+0x15c>)
 800570c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800570e:	4b4c      	ldr	r3, [pc, #304]	; (8005840 <rotate_L90+0x148>)
 8005710:	edd3 7a00 	vldr	s15, [r3]
 8005714:	eef1 7a67 	vneg.f32	s15, s15
 8005718:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005858 <rotate_L90+0x160>
 800571c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005720:	ee16 0a90 	vmov	r0, s13
 8005724:	f7fa ff08 	bl	8000538 <__aeabi_f2d>
 8005728:	a343      	add	r3, pc, #268	; (adr r3, 8005838 <rotate_L90+0x140>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa ff5b 	bl	80005e8 <__aeabi_dmul>
 8005732:	4603      	mov	r3, r0
 8005734:	460c      	mov	r4, r1
 8005736:	4618      	mov	r0, r3
 8005738:	4621      	mov	r1, r4
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <rotate_L90+0x164>)
 8005740:	f7fa ff52 	bl	80005e8 <__aeabi_dmul>
 8005744:	4603      	mov	r3, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4618      	mov	r0, r3
 800574a:	4621      	mov	r1, r4
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005754:	f7fb f872 	bl	800083c <__aeabi_ddiv>
 8005758:	4603      	mov	r3, r0
 800575a:	460c      	mov	r4, r1
 800575c:	4618      	mov	r0, r3
 800575e:	4621      	mov	r1, r4
 8005760:	f7fb f9f2 	bl	8000b48 <__aeabi_d2f>
 8005764:	4602      	mov	r2, r0
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <rotate_L90+0x168>)
 8005768:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800576a:	4b35      	ldr	r3, [pc, #212]	; (8005840 <rotate_L90+0x148>)
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005858 <rotate_L90+0x160>
 8005774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005778:	ee16 0a90 	vmov	r0, s13
 800577c:	f7fa fedc 	bl	8000538 <__aeabi_f2d>
 8005780:	a32d      	add	r3, pc, #180	; (adr r3, 8005838 <rotate_L90+0x140>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa ff2f 	bl	80005e8 <__aeabi_dmul>
 800578a:	4603      	mov	r3, r0
 800578c:	460c      	mov	r4, r1
 800578e:	4618      	mov	r0, r3
 8005790:	4621      	mov	r1, r4
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	4b31      	ldr	r3, [pc, #196]	; (800585c <rotate_L90+0x164>)
 8005798:	f7fa ff26 	bl	80005e8 <__aeabi_dmul>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	4618      	mov	r0, r3
 80057a2:	4621      	mov	r1, r4
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ac:	f7fb f846 	bl	800083c <__aeabi_ddiv>
 80057b0:	4603      	mov	r3, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	4618      	mov	r0, r3
 80057b6:	4621      	mov	r1, r4
 80057b8:	f7fb f9c6 	bl	8000b48 <__aeabi_d2f>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <rotate_L90+0x16c>)
 80057c0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80057c2:	f7ff fa59 	bl	8004c78 <drive_start>
	control_stop();
 80057c6:	f7ff fac1 	bl	8004d4c <control_stop>
	while(degree_z < target_degree_z+80);
 80057ca:	bf00      	nop
 80057cc:	4b26      	ldr	r3, [pc, #152]	; (8005868 <rotate_L90+0x170>)
 80057ce:	edd3 7a00 	vldr	s15, [r3]
 80057d2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800586c <rotate_L90+0x174>
 80057d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057da:	4b25      	ldr	r3, [pc, #148]	; (8005870 <rotate_L90+0x178>)
 80057dc:	edd3 7a00 	vldr	s15, [r3]
 80057e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e8:	dcf0      	bgt.n	80057cc <rotate_L90+0xd4>

	accel_l = 30000;
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <rotate_L90+0x150>)
 80057ec:	4a21      	ldr	r2, [pc, #132]	; (8005874 <rotate_L90+0x17c>)
 80057ee:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <rotate_L90+0x158>)
 80057f2:	4a21      	ldr	r2, [pc, #132]	; (8005878 <rotate_L90+0x180>)
 80057f4:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 80057f6:	4b21      	ldr	r3, [pc, #132]	; (800587c <rotate_L90+0x184>)
 80057f8:	4a21      	ldr	r2, [pc, #132]	; (8005880 <rotate_L90+0x188>)
 80057fa:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 80057fc:	4b21      	ldr	r3, [pc, #132]	; (8005884 <rotate_L90+0x18c>)
 80057fe:	4a22      	ldr	r2, [pc, #136]	; (8005888 <rotate_L90+0x190>)
 8005800:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005802:	bf00      	nop
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <rotate_L90+0x170>)
 8005806:	edd3 7a00 	vldr	s15, [r3]
 800580a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800588c <rotate_L90+0x194>
 800580e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005812:	4b17      	ldr	r3, [pc, #92]	; (8005870 <rotate_L90+0x178>)
 8005814:	edd3 7a00 	vldr	s15, [r3]
 8005818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	dcf0      	bgt.n	8005804 <rotate_L90+0x10c>

	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8005822:	2101      	movs	r1, #1
 8005824:	20ff      	movs	r0, #255	; 0xff
 8005826:	f004 ff91 	bl	800a74c <turn_dir>
	drive_stop();
 800582a:	f7ff fa53 	bl	8004cd4 <drive_stop>
}
 800582e:	bf00      	nop
 8005830:	bd98      	pop	{r3, r4, r7, pc}
 8005832:	bf00      	nop
 8005834:	f3af 8000 	nop.w
 8005838:	54442d18 	.word	0x54442d18
 800583c:	400921fb 	.word	0x400921fb
 8005840:	20000228 	.word	0x20000228
 8005844:	44480000 	.word	0x44480000
 8005848:	20000cd8 	.word	0x20000cd8
 800584c:	c53b8000 	.word	0xc53b8000
 8005850:	20000a60 	.word	0x20000a60
 8005854:	453b8000 	.word	0x453b8000
 8005858:	43340000 	.word	0x43340000
 800585c:	40508000 	.word	0x40508000
 8005860:	20000ad0 	.word	0x20000ad0
 8005864:	20000224 	.word	0x20000224
 8005868:	20000b78 	.word	0x20000b78
 800586c:	42a00000 	.word	0x42a00000
 8005870:	20000ad8 	.word	0x20000ad8
 8005874:	46ea6000 	.word	0x46ea6000
 8005878:	c6ea6000 	.word	0xc6ea6000
 800587c:	200006f4 	.word	0x200006f4
 8005880:	c2c80000 	.word	0xc2c80000
 8005884:	20000ee8 	.word	0x20000ee8
 8005888:	42c80000 	.word	0x42c80000
 800588c:	42b40000 	.word	0x42b40000

08005890 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8005890:	b598      	push	{r3, r4, r7, lr}
 8005892:	af00      	add	r7, sp, #0

	full_led_write(2);
 8005894:	2002      	movs	r0, #2
 8005896:	f006 f84b 	bl	800b930 <full_led_write>
	target_omega_z = 800;
 800589a:	4b4f      	ldr	r3, [pc, #316]	; (80059d8 <rotate_180+0x148>)
 800589c:	4a4f      	ldr	r2, [pc, #316]	; (80059dc <rotate_180+0x14c>)
 800589e:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80058a0:	4b4f      	ldr	r3, [pc, #316]	; (80059e0 <rotate_180+0x150>)
 80058a2:	4a50      	ldr	r2, [pc, #320]	; (80059e4 <rotate_180+0x154>)
 80058a4:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80058a6:	4b50      	ldr	r3, [pc, #320]	; (80059e8 <rotate_180+0x158>)
 80058a8:	4a50      	ldr	r2, [pc, #320]	; (80059ec <rotate_180+0x15c>)
 80058aa:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80058ac:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <rotate_180+0x148>)
 80058ae:	edd3 7a00 	vldr	s15, [r3]
 80058b2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80059f0 <rotate_180+0x160>
 80058b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058ba:	ee16 0a90 	vmov	r0, s13
 80058be:	f7fa fe3b 	bl	8000538 <__aeabi_f2d>
 80058c2:	a343      	add	r3, pc, #268	; (adr r3, 80059d0 <rotate_180+0x140>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa fe8e 	bl	80005e8 <__aeabi_dmul>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	4618      	mov	r0, r3
 80058d2:	4621      	mov	r1, r4
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	4b46      	ldr	r3, [pc, #280]	; (80059f4 <rotate_180+0x164>)
 80058da:	f7fa fe85 	bl	80005e8 <__aeabi_dmul>
 80058de:	4603      	mov	r3, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	4618      	mov	r0, r3
 80058e4:	4621      	mov	r1, r4
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ee:	f7fa ffa5 	bl	800083c <__aeabi_ddiv>
 80058f2:	4603      	mov	r3, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	4618      	mov	r0, r3
 80058f8:	4621      	mov	r1, r4
 80058fa:	f7fb f925 	bl	8000b48 <__aeabi_d2f>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <rotate_180+0x168>)
 8005902:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005904:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <rotate_180+0x148>)
 8005906:	edd3 7a00 	vldr	s15, [r3]
 800590a:	eef1 7a67 	vneg.f32	s15, s15
 800590e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80059f0 <rotate_180+0x160>
 8005912:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005916:	ee16 0a90 	vmov	r0, s13
 800591a:	f7fa fe0d 	bl	8000538 <__aeabi_f2d>
 800591e:	a32c      	add	r3, pc, #176	; (adr r3, 80059d0 <rotate_180+0x140>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fe60 	bl	80005e8 <__aeabi_dmul>
 8005928:	4603      	mov	r3, r0
 800592a:	460c      	mov	r4, r1
 800592c:	4618      	mov	r0, r3
 800592e:	4621      	mov	r1, r4
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <rotate_180+0x164>)
 8005936:	f7fa fe57 	bl	80005e8 <__aeabi_dmul>
 800593a:	4603      	mov	r3, r0
 800593c:	460c      	mov	r4, r1
 800593e:	4618      	mov	r0, r3
 8005940:	4621      	mov	r1, r4
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800594a:	f7fa ff77 	bl	800083c <__aeabi_ddiv>
 800594e:	4603      	mov	r3, r0
 8005950:	460c      	mov	r4, r1
 8005952:	4618      	mov	r0, r3
 8005954:	4621      	mov	r1, r4
 8005956:	f7fb f8f7 	bl	8000b48 <__aeabi_d2f>
 800595a:	4602      	mov	r2, r0
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <rotate_180+0x16c>)
 800595e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005960:	f7ff f98a 	bl	8004c78 <drive_start>
	control_stop();
 8005964:	f7ff f9f2 	bl	8004d4c <control_stop>
	while(degree_z > target_degree_z-170);
 8005968:	bf00      	nop
 800596a:	4b25      	ldr	r3, [pc, #148]	; (8005a00 <rotate_180+0x170>)
 800596c:	edd3 7a00 	vldr	s15, [r3]
 8005970:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005a04 <rotate_180+0x174>
 8005974:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005978:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <rotate_180+0x178>)
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	d4f0      	bmi.n	800596a <rotate_180+0xda>

	accel_l = -30000;
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <rotate_180+0x150>)
 800598a:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <rotate_180+0x17c>)
 800598c:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 800598e:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <rotate_180+0x158>)
 8005990:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <rotate_180+0x180>)
 8005992:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005994:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <rotate_180+0x184>)
 8005996:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <rotate_180+0x188>)
 8005998:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <rotate_180+0x18c>)
 800599c:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <rotate_180+0x190>)
 800599e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80059a0:	bf00      	nop
 80059a2:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <rotate_180+0x170>)
 80059a4:	edd3 7a00 	vldr	s15, [r3]
 80059a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80059f0 <rotate_180+0x160>
 80059ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80059b0:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <rotate_180+0x178>)
 80059b2:	edd3 7a00 	vldr	s15, [r3]
 80059b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059be:	d4f0      	bmi.n	80059a2 <rotate_180+0x112>

	turn_dir(DIR_TURN_180, 1);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 80059c0:	2101      	movs	r1, #1
 80059c2:	2002      	movs	r0, #2
 80059c4:	f004 fec2 	bl	800a74c <turn_dir>
	drive_stop();
 80059c8:	f7ff f984 	bl	8004cd4 <drive_stop>

}
 80059cc:	bf00      	nop
 80059ce:	bd98      	pop	{r3, r4, r7, pc}
 80059d0:	54442d18 	.word	0x54442d18
 80059d4:	400921fb 	.word	0x400921fb
 80059d8:	20000228 	.word	0x20000228
 80059dc:	44480000 	.word	0x44480000
 80059e0:	20000cd8 	.word	0x20000cd8
 80059e4:	453b8000 	.word	0x453b8000
 80059e8:	20000a60 	.word	0x20000a60
 80059ec:	c53b8000 	.word	0xc53b8000
 80059f0:	43340000 	.word	0x43340000
 80059f4:	40508000 	.word	0x40508000
 80059f8:	200006f4 	.word	0x200006f4
 80059fc:	20000ee8 	.word	0x20000ee8
 8005a00:	20000b78 	.word	0x20000b78
 8005a04:	432a0000 	.word	0x432a0000
 8005a08:	20000ad8 	.word	0x20000ad8
 8005a0c:	c6ea6000 	.word	0xc6ea6000
 8005a10:	46ea6000 	.word	0x46ea6000
 8005a14:	20000ad0 	.word	0x20000ad0
 8005a18:	42c80000 	.word	0x42c80000
 8005a1c:	20000224 	.word	0x20000224
 8005a20:	c2c80000 	.word	0xc2c80000

08005a24 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
	full_led_write(5);
 8005a28:	2005      	movs	r0, #5
 8005a2a:	f005 ff81 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005a2e:	4a61      	ldr	r2, [pc, #388]	; (8005bb4 <slalom_R90+0x190>)
 8005a30:	8813      	ldrh	r3, [r2, #0]
 8005a32:	f36f 2308 	bfc	r3, #8, #1
 8005a36:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005a38:	4b5f      	ldr	r3, [pc, #380]	; (8005bb8 <slalom_R90+0x194>)
 8005a3a:	4a60      	ldr	r2, [pc, #384]	; (8005bbc <slalom_R90+0x198>)
 8005a3c:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005a3e:	4b60      	ldr	r3, [pc, #384]	; (8005bc0 <slalom_R90+0x19c>)
 8005a40:	4a5e      	ldr	r2, [pc, #376]	; (8005bbc <slalom_R90+0x198>)
 8005a42:	601a      	str	r2, [r3, #0]
	speed_min_l = 400;
 8005a44:	4b5f      	ldr	r3, [pc, #380]	; (8005bc4 <slalom_R90+0x1a0>)
 8005a46:	4a60      	ldr	r2, [pc, #384]	; (8005bc8 <slalom_R90+0x1a4>)
 8005a48:	601a      	str	r2, [r3, #0]
	speed_min_r = 400;
 8005a4a:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <slalom_R90+0x1a8>)
 8005a4c:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <slalom_R90+0x1a4>)
 8005a4e:	601a      	str	r2, [r3, #0]

	control_start();
 8005a50:	f7ff f968 	bl	8004d24 <control_start>
	dist_l = dist_r = 0;
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	4a5d      	ldr	r2, [pc, #372]	; (8005bd0 <slalom_R90+0x1ac>)
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4a5d      	ldr	r2, [pc, #372]	; (8005bd4 <slalom_R90+0x1b0>)
 8005a5e:	6013      	str	r3, [r2, #0]
	while(dist_l < 18 && dist_r < 18);
 8005a60:	bf00      	nop
 8005a62:	4b5c      	ldr	r3, [pc, #368]	; (8005bd4 <slalom_R90+0x1b0>)
 8005a64:	edd3 7a00 	vldr	s15, [r3]
 8005a68:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a74:	d509      	bpl.n	8005a8a <slalom_R90+0x66>
 8005a76:	4b56      	ldr	r3, [pc, #344]	; (8005bd0 <slalom_R90+0x1ac>)
 8005a78:	edd3 7a00 	vldr	s15, [r3]
 8005a7c:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a88:	d4eb      	bmi.n	8005a62 <slalom_R90+0x3e>
	drive_stop();
 8005a8a:	f7ff f923 	bl	8004cd4 <drive_stop>
	control_stop();
 8005a8e:	f7ff f95d 	bl	8004d4c <control_stop>

	MF.FLAG.GYRO = 1;
 8005a92:	4a48      	ldr	r2, [pc, #288]	; (8005bb4 <slalom_R90+0x190>)
 8005a94:	8813      	ldrh	r3, [r2, #0]
 8005a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8005a9c:	4b4e      	ldr	r3, [pc, #312]	; (8005bd8 <slalom_R90+0x1b4>)
 8005a9e:	4a4f      	ldr	r2, [pc, #316]	; (8005bdc <slalom_R90+0x1b8>)
 8005aa0:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005aa2:	4b4f      	ldr	r3, [pc, #316]	; (8005be0 <slalom_R90+0x1bc>)
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
	omega_max = 550;
 8005aaa:	4b4e      	ldr	r3, [pc, #312]	; (8005be4 <slalom_R90+0x1c0>)
 8005aac:	4a4e      	ldr	r2, [pc, #312]	; (8005be8 <slalom_R90+0x1c4>)
 8005aae:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005ab0:	4b4e      	ldr	r3, [pc, #312]	; (8005bec <slalom_R90+0x1c8>)
 8005ab2:	4a45      	ldr	r2, [pc, #276]	; (8005bc8 <slalom_R90+0x1a4>)
 8005ab4:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005ab6:	4a3f      	ldr	r2, [pc, #252]	; (8005bb4 <slalom_R90+0x190>)
 8005ab8:	8813      	ldrh	r3, [r2, #0]
 8005aba:	f043 0302 	orr.w	r3, r3, #2
 8005abe:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-38);
 8005ac0:	bf00      	nop
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <slalom_R90+0x1cc>)
 8005ac4:	edd3 7a00 	vldr	s15, [r3]
 8005ac8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005bf4 <slalom_R90+0x1d0>
 8005acc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ad0:	4b49      	ldr	r3, [pc, #292]	; (8005bf8 <slalom_R90+0x1d4>)
 8005ad2:	edd3 7a00 	vldr	s15, [r3]
 8005ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ade:	d4f0      	bmi.n	8005ac2 <slalom_R90+0x9e>

	target_degaccel_z = 0;
 8005ae0:	4b3d      	ldr	r3, [pc, #244]	; (8005bd8 <slalom_R90+0x1b4>)
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-65);
 8005ae8:	bf00      	nop
 8005aea:	4b41      	ldr	r3, [pc, #260]	; (8005bf0 <slalom_R90+0x1cc>)
 8005aec:	edd3 7a00 	vldr	s15, [r3]
 8005af0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005bfc <slalom_R90+0x1d8>
 8005af4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005af8:	4b3f      	ldr	r3, [pc, #252]	; (8005bf8 <slalom_R90+0x1d4>)
 8005afa:	edd3 7a00 	vldr	s15, [r3]
 8005afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	d4f0      	bmi.n	8005aea <slalom_R90+0xc6>

	target_degaccel_z = -4000;
 8005b08:	4b33      	ldr	r3, [pc, #204]	; (8005bd8 <slalom_R90+0x1b4>)
 8005b0a:	4a3d      	ldr	r2, [pc, #244]	; (8005c00 <slalom_R90+0x1dc>)
 8005b0c:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005b0e:	bf00      	nop
 8005b10:	4b37      	ldr	r3, [pc, #220]	; (8005bf0 <slalom_R90+0x1cc>)
 8005b12:	edd3 7a00 	vldr	s15, [r3]
 8005b16:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005c04 <slalom_R90+0x1e0>
 8005b1a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005b1e:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <slalom_R90+0x1d4>)
 8005b20:	edd3 7a00 	vldr	s15, [r3]
 8005b24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2c:	d4f0      	bmi.n	8005b10 <slalom_R90+0xec>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005b2e:	2101      	movs	r1, #1
 8005b30:	2001      	movs	r0, #1
 8005b32:	f004 fe0b 	bl	800a74c <turn_dir>

	MF.FLAG.GYRO = 0;
 8005b36:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <slalom_R90+0x190>)
 8005b38:	8813      	ldrh	r3, [r2, #0]
 8005b3a:	f36f 2308 	bfc	r3, #8, #1
 8005b3e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <slalom_R90+0x194>)
 8005b42:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <slalom_R90+0x1e4>)
 8005b44:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005b46:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <slalom_R90+0x19c>)
 8005b48:	4a2f      	ldr	r2, [pc, #188]	; (8005c08 <slalom_R90+0x1e4>)
 8005b4a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <slalom_R90+0x1e8>)
 8005b4e:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <slalom_R90+0x1a4>)
 8005b50:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005b52:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <slalom_R90+0x1ec>)
 8005b54:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <slalom_R90+0x1a4>)
 8005b56:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <slalom_R90+0x1ac>)
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <slalom_R90+0x1b0>)
 8005b62:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005b64:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <slalom_R90+0x190>)
 8005b66:	8813      	ldrh	r3, [r2, #0]
 8005b68:	f043 0304 	orr.w	r3, r3, #4
 8005b6c:	8013      	strh	r3, [r2, #0]

	control_start();
 8005b6e:	f7ff f8d9 	bl	8004d24 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005b72:	bf00      	nop
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <slalom_R90+0x1b0>)
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b86:	d509      	bpl.n	8005b9c <slalom_R90+0x178>
 8005b88:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <slalom_R90+0x1ac>)
 8005b8a:	edd3 7a00 	vldr	s15, [r3]
 8005b8e:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	d4eb      	bmi.n	8005b74 <slalom_R90+0x150>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <slalom_R90+0x190>)
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <slalom_R90+0x18a>
 8005baa:	f005 fe4d 	bl	800b848 <get_wall_info>
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000ee4 	.word	0x20000ee4
 8005bb8:	20000cd8 	.word	0x20000cd8
 8005bbc:	c61c4000 	.word	0xc61c4000
 8005bc0:	20000a60 	.word	0x20000a60
 8005bc4:	20000ad0 	.word	0x20000ad0
 8005bc8:	43c80000 	.word	0x43c80000
 8005bcc:	20000ee8 	.word	0x20000ee8
 8005bd0:	20000a68 	.word	0x20000a68
 8005bd4:	20000f00 	.word	0x20000f00
 8005bd8:	20000ad4 	.word	0x20000ad4
 8005bdc:	457a0000 	.word	0x457a0000
 8005be0:	20000228 	.word	0x20000228
 8005be4:	20000a64 	.word	0x20000a64
 8005be8:	44098000 	.word	0x44098000
 8005bec:	20000a70 	.word	0x20000a70
 8005bf0:	20000b78 	.word	0x20000b78
 8005bf4:	42180000 	.word	0x42180000
 8005bf8:	20000ad8 	.word	0x20000ad8
 8005bfc:	42820000 	.word	0x42820000
 8005c00:	c57a0000 	.word	0xc57a0000
 8005c04:	42b40000 	.word	0x42b40000
 8005c08:	461c4000 	.word	0x461c4000
 8005c0c:	200006f4 	.word	0x200006f4
 8005c10:	20000224 	.word	0x20000224

08005c14 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
	full_led_write(6);
 8005c18:	2006      	movs	r0, #6
 8005c1a:	f005 fe89 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005c1e:	4a61      	ldr	r2, [pc, #388]	; (8005da4 <slalom_L90+0x190>)
 8005c20:	8813      	ldrh	r3, [r2, #0]
 8005c22:	f36f 2308 	bfc	r3, #8, #1
 8005c26:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005c28:	4b5f      	ldr	r3, [pc, #380]	; (8005da8 <slalom_L90+0x194>)
 8005c2a:	4a60      	ldr	r2, [pc, #384]	; (8005dac <slalom_L90+0x198>)
 8005c2c:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005c2e:	4b60      	ldr	r3, [pc, #384]	; (8005db0 <slalom_L90+0x19c>)
 8005c30:	4a5e      	ldr	r2, [pc, #376]	; (8005dac <slalom_L90+0x198>)
 8005c32:	601a      	str	r2, [r3, #0]
	speed_min_l = 400;
 8005c34:	4b5f      	ldr	r3, [pc, #380]	; (8005db4 <slalom_L90+0x1a0>)
 8005c36:	4a60      	ldr	r2, [pc, #384]	; (8005db8 <slalom_L90+0x1a4>)
 8005c38:	601a      	str	r2, [r3, #0]
	speed_min_r = 400;
 8005c3a:	4b60      	ldr	r3, [pc, #384]	; (8005dbc <slalom_L90+0x1a8>)
 8005c3c:	4a5e      	ldr	r2, [pc, #376]	; (8005db8 <slalom_L90+0x1a4>)
 8005c3e:	601a      	str	r2, [r3, #0]

	control_start();
 8005c40:	f7ff f870 	bl	8004d24 <control_start>
	dist_l = dist_r = 0;
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	4a5d      	ldr	r2, [pc, #372]	; (8005dc0 <slalom_L90+0x1ac>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4a5d      	ldr	r2, [pc, #372]	; (8005dc4 <slalom_L90+0x1b0>)
 8005c4e:	6013      	str	r3, [r2, #0]
	while(dist_l < 18 && dist_r < 18);
 8005c50:	bf00      	nop
 8005c52:	4b5c      	ldr	r3, [pc, #368]	; (8005dc4 <slalom_L90+0x1b0>)
 8005c54:	edd3 7a00 	vldr	s15, [r3]
 8005c58:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	d509      	bpl.n	8005c7a <slalom_L90+0x66>
 8005c66:	4b56      	ldr	r3, [pc, #344]	; (8005dc0 <slalom_L90+0x1ac>)
 8005c68:	edd3 7a00 	vldr	s15, [r3]
 8005c6c:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c78:	d4eb      	bmi.n	8005c52 <slalom_L90+0x3e>
	drive_stop();
 8005c7a:	f7ff f82b 	bl	8004cd4 <drive_stop>
	control_stop();
 8005c7e:	f7ff f865 	bl	8004d4c <control_stop>

	MF.FLAG.GYRO = 1;
 8005c82:	4a48      	ldr	r2, [pc, #288]	; (8005da4 <slalom_L90+0x190>)
 8005c84:	8813      	ldrh	r3, [r2, #0]
 8005c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005c8c:	4b4e      	ldr	r3, [pc, #312]	; (8005dc8 <slalom_L90+0x1b4>)
 8005c8e:	4a4f      	ldr	r2, [pc, #316]	; (8005dcc <slalom_L90+0x1b8>)
 8005c90:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005c92:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <slalom_L90+0x1bc>)
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
	omega_min = -550;
 8005c9a:	4b4e      	ldr	r3, [pc, #312]	; (8005dd4 <slalom_L90+0x1c0>)
 8005c9c:	4a4e      	ldr	r2, [pc, #312]	; (8005dd8 <slalom_L90+0x1c4>)
 8005c9e:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005ca0:	4b4e      	ldr	r3, [pc, #312]	; (8005ddc <slalom_L90+0x1c8>)
 8005ca2:	4a45      	ldr	r2, [pc, #276]	; (8005db8 <slalom_L90+0x1a4>)
 8005ca4:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005ca6:	4a3f      	ldr	r2, [pc, #252]	; (8005da4 <slalom_L90+0x190>)
 8005ca8:	8813      	ldrh	r3, [r2, #0]
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+38);
 8005cb0:	bf00      	nop
 8005cb2:	4b4b      	ldr	r3, [pc, #300]	; (8005de0 <slalom_L90+0x1cc>)
 8005cb4:	edd3 7a00 	vldr	s15, [r3]
 8005cb8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005de4 <slalom_L90+0x1d0>
 8005cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc0:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <slalom_L90+0x1d4>)
 8005cc2:	edd3 7a00 	vldr	s15, [r3]
 8005cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	dcf0      	bgt.n	8005cb2 <slalom_L90+0x9e>

	target_degaccel_z = 0;
 8005cd0:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <slalom_L90+0x1b4>)
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+65);
 8005cd8:	bf00      	nop
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <slalom_L90+0x1cc>)
 8005cdc:	edd3 7a00 	vldr	s15, [r3]
 8005ce0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005dec <slalom_L90+0x1d8>
 8005ce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce8:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <slalom_L90+0x1d4>)
 8005cea:	edd3 7a00 	vldr	s15, [r3]
 8005cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	dcf0      	bgt.n	8005cda <slalom_L90+0xc6>

	target_degaccel_z = 4000;
 8005cf8:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <slalom_L90+0x1b4>)
 8005cfa:	4a3d      	ldr	r2, [pc, #244]	; (8005df0 <slalom_L90+0x1dc>)
 8005cfc:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005cfe:	bf00      	nop
 8005d00:	4b37      	ldr	r3, [pc, #220]	; (8005de0 <slalom_L90+0x1cc>)
 8005d02:	edd3 7a00 	vldr	s15, [r3]
 8005d06:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005df4 <slalom_L90+0x1e0>
 8005d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d0e:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <slalom_L90+0x1d4>)
 8005d10:	edd3 7a00 	vldr	s15, [r3]
 8005d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1c:	dcf0      	bgt.n	8005d00 <slalom_L90+0xec>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8005d1e:	2101      	movs	r1, #1
 8005d20:	20ff      	movs	r0, #255	; 0xff
 8005d22:	f004 fd13 	bl	800a74c <turn_dir>

	MF.FLAG.GYRO = 0;
 8005d26:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <slalom_L90+0x190>)
 8005d28:	8813      	ldrh	r3, [r2, #0]
 8005d2a:	f36f 2308 	bfc	r3, #8, #1
 8005d2e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <slalom_L90+0x194>)
 8005d32:	4a31      	ldr	r2, [pc, #196]	; (8005df8 <slalom_L90+0x1e4>)
 8005d34:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <slalom_L90+0x19c>)
 8005d38:	4a2f      	ldr	r2, [pc, #188]	; (8005df8 <slalom_L90+0x1e4>)
 8005d3a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <slalom_L90+0x1e8>)
 8005d3e:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <slalom_L90+0x1a4>)
 8005d40:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005d42:	4b2f      	ldr	r3, [pc, #188]	; (8005e00 <slalom_L90+0x1ec>)
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <slalom_L90+0x1a4>)
 8005d46:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <slalom_L90+0x1ac>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <slalom_L90+0x1b0>)
 8005d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <slalom_L90+0x190>)
 8005d56:	8813      	ldrh	r3, [r2, #0]
 8005d58:	f043 0304 	orr.w	r3, r3, #4
 8005d5c:	8013      	strh	r3, [r2, #0]
	control_start();
 8005d5e:	f7fe ffe1 	bl	8004d24 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005d62:	bf00      	nop
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <slalom_L90+0x1b0>)
 8005d66:	edd3 7a00 	vldr	s15, [r3]
 8005d6a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	d509      	bpl.n	8005d8c <slalom_L90+0x178>
 8005d78:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <slalom_L90+0x1ac>)
 8005d7a:	edd3 7a00 	vldr	s15, [r3]
 8005d7e:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d4eb      	bmi.n	8005d64 <slalom_L90+0x150>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <slalom_L90+0x190>)
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <slalom_L90+0x18a>
 8005d9a:	f005 fd55 	bl	800b848 <get_wall_info>
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000ee4 	.word	0x20000ee4
 8005da8:	20000cd8 	.word	0x20000cd8
 8005dac:	c61c4000 	.word	0xc61c4000
 8005db0:	20000a60 	.word	0x20000a60
 8005db4:	20000ad0 	.word	0x20000ad0
 8005db8:	43c80000 	.word	0x43c80000
 8005dbc:	20000ee8 	.word	0x20000ee8
 8005dc0:	20000a68 	.word	0x20000a68
 8005dc4:	20000f00 	.word	0x20000f00
 8005dc8:	20000ad4 	.word	0x20000ad4
 8005dcc:	c57a0000 	.word	0xc57a0000
 8005dd0:	20000228 	.word	0x20000228
 8005dd4:	20000334 	.word	0x20000334
 8005dd8:	c4098000 	.word	0xc4098000
 8005ddc:	20000a70 	.word	0x20000a70
 8005de0:	20000b78 	.word	0x20000b78
 8005de4:	42180000 	.word	0x42180000
 8005de8:	20000ad8 	.word	0x20000ad8
 8005dec:	42820000 	.word	0x42820000
 8005df0:	457a0000 	.word	0x457a0000
 8005df4:	42b40000 	.word	0x42b40000
 8005df8:	461c4000 	.word	0x461c4000
 8005dfc:	200006f4 	.word	0x200006f4
 8005e00:	20000224 	.word	0x20000224

08005e04 <slalom_R902>:
//slalom_R902
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R902(void){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	MF.FLAG.GYRO = 0;
 8005e08:	4a52      	ldr	r2, [pc, #328]	; (8005f54 <slalom_R902+0x150>)
 8005e0a:	8813      	ldrh	r3, [r2, #0]
 8005e0c:	f36f 2308 	bfc	r3, #8, #1
 8005e10:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005e12:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <slalom_R902+0x154>)
 8005e14:	4a51      	ldr	r2, [pc, #324]	; (8005f5c <slalom_R902+0x158>)
 8005e16:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005e18:	4b51      	ldr	r3, [pc, #324]	; (8005f60 <slalom_R902+0x15c>)
 8005e1a:	4a50      	ldr	r2, [pc, #320]	; (8005f5c <slalom_R902+0x158>)
 8005e1c:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <slalom_R902+0x160>)
 8005e20:	4a51      	ldr	r2, [pc, #324]	; (8005f68 <slalom_R902+0x164>)
 8005e22:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005e24:	4b51      	ldr	r3, [pc, #324]	; (8005f6c <slalom_R902+0x168>)
 8005e26:	4a50      	ldr	r2, [pc, #320]	; (8005f68 <slalom_R902+0x164>)
 8005e28:	601a      	str	r2, [r3, #0]

//	control_start();
//	while(dist_l < 10 && dist_r < 10);
	drive_stop();
 8005e2a:	f7fe ff53 	bl	8004cd4 <drive_stop>
	control_stop();
 8005e2e:	f7fe ff8d 	bl	8004d4c <control_stop>

	MF.FLAG.GYRO = 1;
 8005e32:	4a48      	ldr	r2, [pc, #288]	; (8005f54 <slalom_R902+0x150>)
 8005e34:	8813      	ldrh	r3, [r2, #0]
 8005e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e3a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 20000;
 8005e3c:	4b4c      	ldr	r3, [pc, #304]	; (8005f70 <slalom_R902+0x16c>)
 8005e3e:	4a4d      	ldr	r2, [pc, #308]	; (8005f74 <slalom_R902+0x170>)
 8005e40:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005e42:	4b4d      	ldr	r3, [pc, #308]	; (8005f78 <slalom_R902+0x174>)
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
	omega_max = 800;
 8005e4a:	4b4c      	ldr	r3, [pc, #304]	; (8005f7c <slalom_R902+0x178>)
 8005e4c:	4a46      	ldr	r2, [pc, #280]	; (8005f68 <slalom_R902+0x164>)
 8005e4e:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8005e50:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <slalom_R902+0x17c>)
 8005e52:	4a45      	ldr	r2, [pc, #276]	; (8005f68 <slalom_R902+0x164>)
 8005e54:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005e56:	4a3f      	ldr	r2, [pc, #252]	; (8005f54 <slalom_R902+0x150>)
 8005e58:	8813      	ldrh	r3, [r2, #0]
 8005e5a:	f043 0302 	orr.w	r3, r3, #2
 8005e5e:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-32);
 8005e60:	bf00      	nop
 8005e62:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <slalom_R902+0x180>)
 8005e64:	edd3 7a00 	vldr	s15, [r3]
 8005e68:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005f88 <slalom_R902+0x184>
 8005e6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e70:	4b46      	ldr	r3, [pc, #280]	; (8005f8c <slalom_R902+0x188>)
 8005e72:	edd3 7a00 	vldr	s15, [r3]
 8005e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7e:	d4f0      	bmi.n	8005e62 <slalom_R902+0x5e>

	target_degaccel_z = 0;
 8005e80:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <slalom_R902+0x16c>)
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-66);
 8005e88:	bf00      	nop
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <slalom_R902+0x180>)
 8005e8c:	edd3 7a00 	vldr	s15, [r3]
 8005e90:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005f90 <slalom_R902+0x18c>
 8005e94:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e98:	4b3c      	ldr	r3, [pc, #240]	; (8005f8c <slalom_R902+0x188>)
 8005e9a:	edd3 7a00 	vldr	s15, [r3]
 8005e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea6:	d4f0      	bmi.n	8005e8a <slalom_R902+0x86>

	target_degaccel_z = -20000;
 8005ea8:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <slalom_R902+0x16c>)
 8005eaa:	4a3a      	ldr	r2, [pc, #232]	; (8005f94 <slalom_R902+0x190>)
 8005eac:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-80);
 8005eae:	bf00      	nop
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <slalom_R902+0x180>)
 8005eb2:	edd3 7a00 	vldr	s15, [r3]
 8005eb6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005f98 <slalom_R902+0x194>
 8005eba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ebe:	4b33      	ldr	r3, [pc, #204]	; (8005f8c <slalom_R902+0x188>)
 8005ec0:	edd3 7a00 	vldr	s15, [r3]
 8005ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ecc:	d4f0      	bmi.n	8005eb0 <slalom_R902+0xac>
	turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005ece:	2101      	movs	r1, #1
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f004 fc3b 	bl	800a74c <turn_dir>

	MF.FLAG.GYRO = 0;
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <slalom_R902+0x150>)
 8005ed8:	8813      	ldrh	r3, [r2, #0]
 8005eda:	f36f 2308 	bfc	r3, #8, #1
 8005ede:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <slalom_R902+0x154>)
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <slalom_R902+0x158>)
 8005ee4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005ee6:	4b1e      	ldr	r3, [pc, #120]	; (8005f60 <slalom_R902+0x15c>)
 8005ee8:	4a1c      	ldr	r2, [pc, #112]	; (8005f5c <slalom_R902+0x158>)
 8005eea:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <slalom_R902+0x160>)
 8005eee:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <slalom_R902+0x164>)
 8005ef0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <slalom_R902+0x168>)
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <slalom_R902+0x164>)
 8005ef6:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	4a27      	ldr	r2, [pc, #156]	; (8005f9c <slalom_R902+0x198>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4a27      	ldr	r2, [pc, #156]	; (8005fa0 <slalom_R902+0x19c>)
 8005f02:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <slalom_R902+0x150>)
 8005f06:	8813      	ldrh	r3, [r2, #0]
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	8013      	strh	r3, [r2, #0]
	control_start();
 8005f0e:	f7fe ff09 	bl	8004d24 <control_start>
	while(dist_l < 34 && dist_r < 34);
 8005f12:	bf00      	nop
 8005f14:	4b22      	ldr	r3, [pc, #136]	; (8005fa0 <slalom_R902+0x19c>)
 8005f16:	edd3 7a00 	vldr	s15, [r3]
 8005f1a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005fa4 <slalom_R902+0x1a0>
 8005f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f26:	d509      	bpl.n	8005f3c <slalom_R902+0x138>
 8005f28:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <slalom_R902+0x198>)
 8005f2a:	edd3 7a00 	vldr	s15, [r3]
 8005f2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005fa4 <slalom_R902+0x1a0>
 8005f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3a:	d4eb      	bmi.n	8005f14 <slalom_R902+0x110>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <slalom_R902+0x150>)
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <slalom_R902+0x14a>
 8005f4a:	f005 fc7d 	bl	800b848 <get_wall_info>
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000ee4 	.word	0x20000ee4
 8005f58:	20000cd8 	.word	0x20000cd8
 8005f5c:	461c4000 	.word	0x461c4000
 8005f60:	20000a60 	.word	0x20000a60
 8005f64:	200006f4 	.word	0x200006f4
 8005f68:	44480000 	.word	0x44480000
 8005f6c:	20000224 	.word	0x20000224
 8005f70:	20000ad4 	.word	0x20000ad4
 8005f74:	469c4000 	.word	0x469c4000
 8005f78:	20000228 	.word	0x20000228
 8005f7c:	20000a64 	.word	0x20000a64
 8005f80:	20000a70 	.word	0x20000a70
 8005f84:	20000b78 	.word	0x20000b78
 8005f88:	42000000 	.word	0x42000000
 8005f8c:	20000ad8 	.word	0x20000ad8
 8005f90:	42840000 	.word	0x42840000
 8005f94:	c69c4000 	.word	0xc69c4000
 8005f98:	42a00000 	.word	0x42a00000
 8005f9c:	20000a68 	.word	0x20000a68
 8005fa0:	20000f00 	.word	0x20000f00
 8005fa4:	42080000 	.word	0x42080000

08005fa8 <slalom_L902>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L902(void){
 8005fa8:	b5b0      	push	{r4, r5, r7, lr}
 8005faa:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8005fac:	4a5a      	ldr	r2, [pc, #360]	; (8006118 <slalom_L902+0x170>)
 8005fae:	8813      	ldrh	r3, [r2, #0]
 8005fb0:	f36f 2308 	bfc	r3, #8, #1
 8005fb4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005fb6:	4b59      	ldr	r3, [pc, #356]	; (800611c <slalom_L902+0x174>)
 8005fb8:	4a59      	ldr	r2, [pc, #356]	; (8006120 <slalom_L902+0x178>)
 8005fba:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005fbc:	4b59      	ldr	r3, [pc, #356]	; (8006124 <slalom_L902+0x17c>)
 8005fbe:	4a58      	ldr	r2, [pc, #352]	; (8006120 <slalom_L902+0x178>)
 8005fc0:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005fc2:	4b59      	ldr	r3, [pc, #356]	; (8006128 <slalom_L902+0x180>)
 8005fc4:	4a59      	ldr	r2, [pc, #356]	; (800612c <slalom_L902+0x184>)
 8005fc6:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005fc8:	4b59      	ldr	r3, [pc, #356]	; (8006130 <slalom_L902+0x188>)
 8005fca:	4a58      	ldr	r2, [pc, #352]	; (800612c <slalom_L902+0x184>)
 8005fcc:	601a      	str	r2, [r3, #0]

//	control_start();
//	while(dist_l < 18.5 && dist_r < 18.5);
	drive_stop();
 8005fce:	f7fe fe81 	bl	8004cd4 <drive_stop>
	control_stop();
 8005fd2:	f7fe febb 	bl	8004d4c <control_stop>

	MF.FLAG.GYRO = 1;
 8005fd6:	4a50      	ldr	r2, [pc, #320]	; (8006118 <slalom_L902+0x170>)
 8005fd8:	8813      	ldrh	r3, [r2, #0]
 8005fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fde:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -20000;
 8005fe0:	4b54      	ldr	r3, [pc, #336]	; (8006134 <slalom_L902+0x18c>)
 8005fe2:	4a55      	ldr	r2, [pc, #340]	; (8006138 <slalom_L902+0x190>)
 8005fe4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005fe6:	4b55      	ldr	r3, [pc, #340]	; (800613c <slalom_L902+0x194>)
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
	omega_min = -800;
 8005fee:	4b54      	ldr	r3, [pc, #336]	; (8006140 <slalom_L902+0x198>)
 8005ff0:	4a54      	ldr	r2, [pc, #336]	; (8006144 <slalom_L902+0x19c>)
 8005ff2:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8005ff4:	4b54      	ldr	r3, [pc, #336]	; (8006148 <slalom_L902+0x1a0>)
 8005ff6:	4a4d      	ldr	r2, [pc, #308]	; (800612c <slalom_L902+0x184>)
 8005ff8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005ffa:	4a47      	ldr	r2, [pc, #284]	; (8006118 <slalom_L902+0x170>)
 8005ffc:	8813      	ldrh	r3, [r2, #0]
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+32);
 8006004:	bf00      	nop
 8006006:	4b51      	ldr	r3, [pc, #324]	; (800614c <slalom_L902+0x1a4>)
 8006008:	edd3 7a00 	vldr	s15, [r3]
 800600c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006150 <slalom_L902+0x1a8>
 8006010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006014:	4b4f      	ldr	r3, [pc, #316]	; (8006154 <slalom_L902+0x1ac>)
 8006016:	edd3 7a00 	vldr	s15, [r3]
 800601a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800601e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006022:	dcf0      	bgt.n	8006006 <slalom_L902+0x5e>

	target_degaccel_z = 0;
 8006024:	4b43      	ldr	r3, [pc, #268]	; (8006134 <slalom_L902+0x18c>)
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+66.3);
 800602c:	bf00      	nop
 800602e:	4b49      	ldr	r3, [pc, #292]	; (8006154 <slalom_L902+0x1ac>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa fa80 	bl	8000538 <__aeabi_f2d>
 8006038:	4604      	mov	r4, r0
 800603a:	460d      	mov	r5, r1
 800603c:	4b43      	ldr	r3, [pc, #268]	; (800614c <slalom_L902+0x1a4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f7fa fa79 	bl	8000538 <__aeabi_f2d>
 8006046:	a332      	add	r3, pc, #200	; (adr r3, 8006110 <slalom_L902+0x168>)
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f7fa f916 	bl	800027c <__adddf3>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa fd38 	bl	8000acc <__aeabi_dcmplt>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <slalom_L902+0x86>

	target_degaccel_z = 20000;
 8006062:	4b34      	ldr	r3, [pc, #208]	; (8006134 <slalom_L902+0x18c>)
 8006064:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <slalom_L902+0x1b0>)
 8006066:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+80);
 8006068:	bf00      	nop
 800606a:	4b38      	ldr	r3, [pc, #224]	; (800614c <slalom_L902+0x1a4>)
 800606c:	edd3 7a00 	vldr	s15, [r3]
 8006070:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800615c <slalom_L902+0x1b4>
 8006074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <slalom_L902+0x1ac>)
 800607a:	edd3 7a00 	vldr	s15, [r3]
 800607e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006086:	dcf0      	bgt.n	800606a <slalom_L902+0xc2>
	turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006088:	2101      	movs	r1, #1
 800608a:	20ff      	movs	r0, #255	; 0xff
 800608c:	f004 fb5e 	bl	800a74c <turn_dir>

	MF.FLAG.GYRO = 0;
 8006090:	4a21      	ldr	r2, [pc, #132]	; (8006118 <slalom_L902+0x170>)
 8006092:	8813      	ldrh	r3, [r2, #0]
 8006094:	f36f 2308 	bfc	r3, #8, #1
 8006098:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <slalom_L902+0x174>)
 800609c:	4a20      	ldr	r2, [pc, #128]	; (8006120 <slalom_L902+0x178>)
 800609e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80060a0:	4b20      	ldr	r3, [pc, #128]	; (8006124 <slalom_L902+0x17c>)
 80060a2:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <slalom_L902+0x178>)
 80060a4:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80060a6:	4b20      	ldr	r3, [pc, #128]	; (8006128 <slalom_L902+0x180>)
 80060a8:	4a20      	ldr	r2, [pc, #128]	; (800612c <slalom_L902+0x184>)
 80060aa:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80060ac:	4b20      	ldr	r3, [pc, #128]	; (8006130 <slalom_L902+0x188>)
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <slalom_L902+0x184>)
 80060b0:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	4a2a      	ldr	r2, [pc, #168]	; (8006160 <slalom_L902+0x1b8>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <slalom_L902+0x1bc>)
 80060bc:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80060be:	4a16      	ldr	r2, [pc, #88]	; (8006118 <slalom_L902+0x170>)
 80060c0:	8813      	ldrh	r3, [r2, #0]
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	8013      	strh	r3, [r2, #0]
	control_start();
 80060c8:	f7fe fe2c 	bl	8004d24 <control_start>
	while(dist_l < 34 && dist_r < 34);
 80060cc:	bf00      	nop
 80060ce:	4b25      	ldr	r3, [pc, #148]	; (8006164 <slalom_L902+0x1bc>)
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006168 <slalom_L902+0x1c0>
 80060d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e0:	d509      	bpl.n	80060f6 <slalom_L902+0x14e>
 80060e2:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <slalom_L902+0x1b8>)
 80060e4:	edd3 7a00 	vldr	s15, [r3]
 80060e8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006168 <slalom_L902+0x1c0>
 80060ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f4:	d4eb      	bmi.n	80060ce <slalom_L902+0x126>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <slalom_L902+0x170>)
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <slalom_L902+0x160>
 8006104:	f005 fba0 	bl	800b848 <get_wall_info>
}
 8006108:	bf00      	nop
 800610a:	bdb0      	pop	{r4, r5, r7, pc}
 800610c:	f3af 8000 	nop.w
 8006110:	33333333 	.word	0x33333333
 8006114:	40509333 	.word	0x40509333
 8006118:	20000ee4 	.word	0x20000ee4
 800611c:	20000cd8 	.word	0x20000cd8
 8006120:	461c4000 	.word	0x461c4000
 8006124:	20000a60 	.word	0x20000a60
 8006128:	200006f4 	.word	0x200006f4
 800612c:	44480000 	.word	0x44480000
 8006130:	20000224 	.word	0x20000224
 8006134:	20000ad4 	.word	0x20000ad4
 8006138:	c69c4000 	.word	0xc69c4000
 800613c:	20000228 	.word	0x20000228
 8006140:	20000334 	.word	0x20000334
 8006144:	c4480000 	.word	0xc4480000
 8006148:	20000a70 	.word	0x20000a70
 800614c:	20000b78 	.word	0x20000b78
 8006150:	42000000 	.word	0x42000000
 8006154:	20000ad8 	.word	0x20000ad8
 8006158:	469c4000 	.word	0x469c4000
 800615c:	42a00000 	.word	0x42a00000
 8006160:	20000a68 	.word	0x20000a68
 8006164:	20000f00 	.word	0x20000f00
 8006168:	42080000 	.word	0x42080000

0800616c <v_R45>:
//v_R45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	full_led_write(2);
 8006170:	2002      	movs	r0, #2
 8006172:	f005 fbdd 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006176:	4a53      	ldr	r2, [pc, #332]	; (80062c4 <v_R45+0x158>)
 8006178:	8813      	ldrh	r3, [r2, #0]
 800617a:	f36f 2308 	bfc	r3, #8, #1
 800617e:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 8006180:	4b51      	ldr	r3, [pc, #324]	; (80062c8 <v_R45+0x15c>)
 8006182:	4a52      	ldr	r2, [pc, #328]	; (80062cc <v_R45+0x160>)
 8006184:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 8006186:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <v_R45+0x164>)
 8006188:	4a50      	ldr	r2, [pc, #320]	; (80062cc <v_R45+0x160>)
 800618a:	601a      	str	r2, [r3, #0]
	speed_max_l = 600;
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <v_R45+0x168>)
 800618e:	4a52      	ldr	r2, [pc, #328]	; (80062d8 <v_R45+0x16c>)
 8006190:	601a      	str	r2, [r3, #0]
	speed_max_r = 600;
 8006192:	4b52      	ldr	r3, [pc, #328]	; (80062dc <v_R45+0x170>)
 8006194:	4a50      	ldr	r2, [pc, #320]	; (80062d8 <v_R45+0x16c>)
 8006196:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006198:	f7fe fd6e 	bl	8004c78 <drive_start>
//	control_start();
	while(dist_l < 25 && dist_r < 25);
 800619c:	bf00      	nop
 800619e:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <v_R45+0x174>)
 80061a0:	edd3 7a00 	vldr	s15, [r3]
 80061a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80061a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b0:	d509      	bpl.n	80061c6 <v_R45+0x5a>
 80061b2:	4b4c      	ldr	r3, [pc, #304]	; (80062e4 <v_R45+0x178>)
 80061b4:	edd3 7a00 	vldr	s15, [r3]
 80061b8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80061bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c4:	d4eb      	bmi.n	800619e <v_R45+0x32>
	drive_stop();
 80061c6:	f7fe fd85 	bl	8004cd4 <drive_stop>
	control_stop();
 80061ca:	f7fe fdbf 	bl	8004d4c <control_stop>

	full_led_write(3);
 80061ce:	2003      	movs	r0, #3
 80061d0:	f005 fbae 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 1;
 80061d4:	4a3b      	ldr	r2, [pc, #236]	; (80062c4 <v_R45+0x158>)
 80061d6:	8813      	ldrh	r3, [r2, #0]
 80061d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061dc:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 6000;
 80061de:	4b42      	ldr	r3, [pc, #264]	; (80062e8 <v_R45+0x17c>)
 80061e0:	4a42      	ldr	r2, [pc, #264]	; (80062ec <v_R45+0x180>)
 80061e2:	601a      	str	r2, [r3, #0]
	omega_max = 300;
 80061e4:	4b42      	ldr	r3, [pc, #264]	; (80062f0 <v_R45+0x184>)
 80061e6:	4a43      	ldr	r2, [pc, #268]	; (80062f4 <v_R45+0x188>)
 80061e8:	601a      	str	r2, [r3, #0]
	speed_G = 600;
 80061ea:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <v_R45+0x18c>)
 80061ec:	4a3a      	ldr	r2, [pc, #232]	; (80062d8 <v_R45+0x16c>)
 80061ee:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 80061f0:	4b42      	ldr	r3, [pc, #264]	; (80062fc <v_R45+0x190>)
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	4a40      	ldr	r2, [pc, #256]	; (8006300 <v_R45+0x194>)
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	4a40      	ldr	r2, [pc, #256]	; (8006304 <v_R45+0x198>)
 8006202:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8006204:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <v_R45+0x158>)
 8006206:	8813      	ldrh	r3, [r2, #0]
 8006208:	f043 0302 	orr.w	r3, r3, #2
 800620c:	8013      	strh	r3, [r2, #0]
	while(degree_z > -7.5);
 800620e:	bf00      	nop
 8006210:	4b3a      	ldr	r3, [pc, #232]	; (80062fc <v_R45+0x190>)
 8006212:	edd3 7a00 	vldr	s15, [r3]
 8006216:	eeb9 7a0e 	vmov.f32	s14, #158	; 0xc0f00000 -7.5
 800621a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006222:	dcf5      	bgt.n	8006210 <v_R45+0xa4>

	full_led_write(4);
 8006224:	2004      	movs	r0, #4
 8006226:	f005 fb83 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 1;
 800622a:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <v_R45+0x158>)
 800622c:	8813      	ldrh	r3, [r2, #0]
 800622e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006232:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <v_R45+0x17c>)
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	4a2f      	ldr	r2, [pc, #188]	; (8006300 <v_R45+0x194>)
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	4a2f      	ldr	r2, [pc, #188]	; (8006304 <v_R45+0x198>)
 8006246:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8006248:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <v_R45+0x158>)
 800624a:	8813      	ldrh	r3, [r2, #0]
 800624c:	f043 0302 	orr.w	r3, r3, #2
 8006250:	8013      	strh	r3, [r2, #0]
	while(degree_z > -37.5);
 8006252:	bf00      	nop
 8006254:	4b29      	ldr	r3, [pc, #164]	; (80062fc <v_R45+0x190>)
 8006256:	edd3 7a00 	vldr	s15, [r3]
 800625a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006308 <v_R45+0x19c>
 800625e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	dcf5      	bgt.n	8006254 <v_R45+0xe8>

	full_led_write(5);
 8006268:	2005      	movs	r0, #5
 800626a:	f005 fb61 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 1;
 800626e:	4a15      	ldr	r2, [pc, #84]	; (80062c4 <v_R45+0x158>)
 8006270:	8813      	ldrh	r3, [r2, #0]
 8006272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006276:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -6000;
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <v_R45+0x17c>)
 800627a:	4a24      	ldr	r2, [pc, #144]	; (800630c <v_R45+0x1a0>)
 800627c:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <v_R45+0x194>)
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <v_R45+0x198>)
 8006288:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 800628a:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <v_R45+0x158>)
 800628c:	8813      	ldrh	r3, [r2, #0]
 800628e:	f043 0302 	orr.w	r3, r3, #2
 8006292:	8013      	strh	r3, [r2, #0]
	while(degree_z > -45);
 8006294:	bf00      	nop
 8006296:	4b19      	ldr	r3, [pc, #100]	; (80062fc <v_R45+0x190>)
 8006298:	edd3 7a00 	vldr	s15, [r3]
 800629c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006310 <v_R45+0x1a4>
 80062a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	dcf5      	bgt.n	8006296 <v_R45+0x12a>

	full_led_write(6);
 80062aa:	2006      	movs	r0, #6
 80062ac:	f005 fb40 	bl	800b930 <full_led_write>
	MF.FLAG.GYRO = 0;
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <v_R45+0x158>)
 80062b2:	8813      	ldrh	r3, [r2, #0]
 80062b4:	f36f 2308 	bfc	r3, #8, #1
 80062b8:	8013      	strh	r3, [r2, #0]
	drive_start();											//走行開始
	control_start();
	while(dist_l < 34 && dist_r < 34);
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
*/	drive_stop();
 80062ba:	f7fe fd0b 	bl	8004cd4 <drive_stop>
}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000ee4 	.word	0x20000ee4
 80062c8:	20000cd8 	.word	0x20000cd8
 80062cc:	459c4000 	.word	0x459c4000
 80062d0:	20000a60 	.word	0x20000a60
 80062d4:	200006f4 	.word	0x200006f4
 80062d8:	44160000 	.word	0x44160000
 80062dc:	20000224 	.word	0x20000224
 80062e0:	20000f00 	.word	0x20000f00
 80062e4:	20000a68 	.word	0x20000a68
 80062e8:	20000ad4 	.word	0x20000ad4
 80062ec:	45bb8000 	.word	0x45bb8000
 80062f0:	20000a64 	.word	0x20000a64
 80062f4:	43960000 	.word	0x43960000
 80062f8:	20000a70 	.word	0x20000a70
 80062fc:	20000ad8 	.word	0x20000ad8
 8006300:	200006f8 	.word	0x200006f8
 8006304:	20000b24 	.word	0x20000b24
 8006308:	c2160000 	.word	0xc2160000
 800630c:	c5bb8000 	.word	0xc5bb8000
 8006310:	c2340000 	.word	0xc2340000

08006314 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
	int mode = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	483b      	ldr	r0, [pc, #236]	; (8006410 <test_select+0xfc>)
 8006322:	f006 f899 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	b2d8      	uxtb	r0, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	b2d9      	uxtb	r1, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	f005 fab9 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 800634a:	4b32      	ldr	r3, [pc, #200]	; (8006414 <test_select+0x100>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635c:	db0f      	blt.n	800637e <test_select+0x6a>
			  mode++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3301      	adds	r3, #1
 8006362:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <test_select+0x100>)
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b07      	cmp	r3, #7
 8006370:	dd01      	ble.n	8006376 <test_select+0x62>
				  mode = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4827      	ldr	r0, [pc, #156]	; (8006418 <test_select+0x104>)
 800637a:	f006 f86d 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800637e:	4b25      	ldr	r3, [pc, #148]	; (8006414 <test_select+0x100>)
 8006380:	edd3 7a00 	vldr	s15, [r3]
 8006384:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006390:	d80f      	bhi.n	80063b2 <test_select+0x9e>
			  mode--;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006398:	4b1e      	ldr	r3, [pc, #120]	; (8006414 <test_select+0x100>)
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da01      	bge.n	80063aa <test_select+0x96>
				  mode = 7;
 80063a6:	2307      	movs	r3, #7
 80063a8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	481a      	ldr	r0, [pc, #104]	; (8006418 <test_select+0x104>)
 80063ae:	f006 f853 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80063b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063b6:	4819      	ldr	r0, [pc, #100]	; (800641c <test_select+0x108>)
 80063b8:	f7fb ff64 	bl	8002284 <HAL_GPIO_ReadPin>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1b1      	bne.n	8006326 <test_select+0x12>
			  HAL_Delay(50);
 80063c2:	2032      	movs	r0, #50	; 0x32
 80063c4:	f7fa fe02 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80063c8:	bf00      	nop
 80063ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063ce:	4813      	ldr	r0, [pc, #76]	; (800641c <test_select+0x108>)
 80063d0:	f7fb ff58 	bl	8002284 <HAL_GPIO_ReadPin>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f7      	beq.n	80063ca <test_select+0xb6>
			  switch(mode){
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3b01      	subs	r3, #1
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d8a1      	bhi.n	8006326 <test_select+0x12>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <test_select+0xd4>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	080063ff 	.word	0x080063ff
 80063f0:	08006405 	.word	0x08006405
 80063f4:	0800640b 	.word	0x0800640b
				case 1:
					init_test();
 80063f8:	f000 f812 	bl	8006420 <init_test>
					break;
 80063fc:	e007      	b.n	800640e <test_select+0xfa>

				case 2:
					slalom_test();
 80063fe:	f000 f917 	bl	8006630 <slalom_test>
					break;
 8006402:	e004      	b.n	800640e <test_select+0xfa>

				case 3:
					sample_course_run();
 8006404:	f000 fde2 	bl	8006fcc <sample_course_run>
					break;
 8006408:	e001      	b.n	800640e <test_select+0xfa>
				case 4:
					v_test();
 800640a:	f000 fa47 	bl	800689c <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800640e:	e78a      	b.n	8006326 <test_select+0x12>
 8006410:	0800d694 	.word	0x0800d694
 8006414:	20000a68 	.word	0x20000a68
 8006418:	0800d6ac 	.word	0x0800d6ac
 800641c:	40020000 	.word	0x40020000

08006420 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0

	int mode = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	61fb      	str	r3, [r7, #28]
	printf("Test Init Run, Mode : %d\n", mode);
 800642a:	69f9      	ldr	r1, [r7, #28]
 800642c:	4872      	ldr	r0, [pc, #456]	; (80065f8 <init_test+0x1d8>)
 800642e:	f006 f813 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	b2d8      	uxtb	r0, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	b2d9      	uxtb	r1, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	b2db      	uxtb	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	f005 fa33 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 8006456:	4b69      	ldr	r3, [pc, #420]	; (80065fc <init_test+0x1dc>)
 8006458:	edd3 7a00 	vldr	s15, [r3]
 800645c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006468:	db0f      	blt.n	800648a <init_test+0x6a>
			  mode++;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	3301      	adds	r3, #1
 800646e:	61fb      	str	r3, [r7, #28]
			  dist_r = 0;
 8006470:	4b62      	ldr	r3, [pc, #392]	; (80065fc <init_test+0x1dc>)
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b07      	cmp	r3, #7
 800647c:	dd01      	ble.n	8006482 <init_test+0x62>
				  mode = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
			  }
			  printf("Mode : %d\n", mode);
 8006482:	69f9      	ldr	r1, [r7, #28]
 8006484:	485e      	ldr	r0, [pc, #376]	; (8006600 <init_test+0x1e0>)
 8006486:	f005 ffe7 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800648a:	4b5c      	ldr	r3, [pc, #368]	; (80065fc <init_test+0x1dc>)
 800648c:	edd3 7a00 	vldr	s15, [r3]
 8006490:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649c:	d80f      	bhi.n	80064be <init_test+0x9e>
			  mode--;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
			  dist_r = 0;
 80064a4:	4b55      	ldr	r3, [pc, #340]	; (80065fc <init_test+0x1dc>)
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da01      	bge.n	80064b6 <init_test+0x96>
				  mode = 7;
 80064b2:	2307      	movs	r3, #7
 80064b4:	61fb      	str	r3, [r7, #28]
			  }
			  printf("Mode : %d\n", mode);
 80064b6:	69f9      	ldr	r1, [r7, #28]
 80064b8:	4851      	ldr	r0, [pc, #324]	; (8006600 <init_test+0x1e0>)
 80064ba:	f005 ffcd 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80064be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064c2:	4850      	ldr	r0, [pc, #320]	; (8006604 <init_test+0x1e4>)
 80064c4:	f7fb fede 	bl	8002284 <HAL_GPIO_ReadPin>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1b1      	bne.n	8006432 <init_test+0x12>
			  HAL_Delay(50);
 80064ce:	2032      	movs	r0, #50	; 0x32
 80064d0:	f7fa fd7c 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80064d4:	bf00      	nop
 80064d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064da:	484a      	ldr	r0, [pc, #296]	; (8006604 <init_test+0x1e4>)
 80064dc:	f7fb fed2 	bl	8002284 <HAL_GPIO_ReadPin>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f7      	beq.n	80064d6 <init_test+0xb6>
			  drive_ready();
 80064e6:	f7fe fb9d 	bl	8004c24 <drive_ready>

			  switch(mode){
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b07      	cmp	r3, #7
 80064ee:	d8a0      	bhi.n	8006432 <init_test+0x12>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <init_test+0xd8>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006519 	.word	0x08006519
 80064fc:	08006537 	.word	0x08006537
 8006500:	08006557 	.word	0x08006557
 8006504:	08006575 	.word	0x08006575
 8006508:	08006593 	.word	0x08006593
 800650c:	080065b1 	.word	0x080065b1
 8006510:	080065d7 	.word	0x080065d7
 8006514:	080065dd 	.word	0x080065dd
				case 0:
					//----right90度回転----
					printf("Rotate R90.\n");
 8006518:	483b      	ldr	r0, [pc, #236]	; (8006608 <init_test+0x1e8>)
 800651a:	f006 f811 	bl	800c540 <puts>
					for(int i = 0; i < 16; i++){
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e004      	b.n	800652e <init_test+0x10e>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8006524:	f7ff f81c 	bl	8005560 <rotate_R90>
					for(int i = 0; i < 16; i++){
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	3301      	adds	r3, #1
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	ddf7      	ble.n	8006524 <init_test+0x104>
					}
//					get_base();
					break;
 8006534:	e05f      	b.n	80065f6 <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8006536:	4835      	ldr	r0, [pc, #212]	; (800660c <init_test+0x1ec>)
 8006538:	f006 f802 	bl	800c540 <puts>
					for(int i = 0; i < 1; i++){
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e005      	b.n	800654e <init_test+0x12e>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 8006542:	20b4      	movs	r0, #180	; 0xb4
 8006544:	f7fe fe4c 	bl	80051e0 <driveC>
					for(int i = 0; i < 1; i++){
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	3301      	adds	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	ddf6      	ble.n	8006542 <init_test+0x122>
					}
					break;
 8006554:	e04f      	b.n	80065f6 <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8006556:	482c      	ldr	r0, [pc, #176]	; (8006608 <init_test+0x1e8>)
 8006558:	f005 fff2 	bl	800c540 <puts>
					for(int i = 0; i < 32; i++){
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	e004      	b.n	800656c <init_test+0x14c>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8006562:	f7fe fffd 	bl	8005560 <rotate_R90>
					for(int i = 0; i < 32; i++){
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3301      	adds	r3, #1
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b1f      	cmp	r3, #31
 8006570:	ddf7      	ble.n	8006562 <init_test+0x142>
					}
					break;
 8006572:	e040      	b.n	80065f6 <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8006574:	4826      	ldr	r0, [pc, #152]	; (8006610 <init_test+0x1f0>)
 8006576:	f005 ffe3 	bl	800c540 <puts>
					for(int i = 0; i < 32; i++){
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e004      	b.n	800658a <init_test+0x16a>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8006580:	f7ff f8ba 	bl	80056f8 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b1f      	cmp	r3, #31
 800658e:	ddf7      	ble.n	8006580 <init_test+0x160>
					}
					break;
 8006590:	e031      	b.n	80065f6 <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8006592:	4820      	ldr	r0, [pc, #128]	; (8006614 <init_test+0x1f4>)
 8006594:	f005 ffd4 	bl	800c540 <puts>
					for(int i = 0; i < 16; i++){
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	e004      	b.n	80065a8 <init_test+0x188>
						rotate_180();				//8回右180度回転、つまり4周回転
 800659e:	f7ff f977 	bl	8005890 <rotate_180>
					for(int i = 0; i < 16; i++){
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60bb      	str	r3, [r7, #8]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b0f      	cmp	r3, #15
 80065ac:	ddf7      	ble.n	800659e <init_test+0x17e>
					}
					break;
 80065ae:	e022      	b.n	80065f6 <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 80065b0:	4819      	ldr	r0, [pc, #100]	; (8006618 <init_test+0x1f8>)
 80065b2:	f005 ffc5 	bl	800c540 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 80065b6:	f7fe fedf 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e004      	b.n	80065ca <init_test+0x1aa>
						one_sectionU();			//一区画のパルス分等速走行
 80065c0:	f7fe ffb4 	bl	800552c <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3301      	adds	r3, #1
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	ddf7      	ble.n	80065c0 <init_test+0x1a0>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 80065d0:	f7fe feec 	bl	80053ac <half_sectionD>
					break;
 80065d4:	e00f      	b.n	80065f6 <init_test+0x1d6>
				case 6:
					set_position();
 80065d6:	f7fe fe99 	bl	800530c <set_position>
					break;
 80065da:	e00c      	b.n	80065f6 <init_test+0x1d6>
				case 7:
					target_degree_z = degree_z;
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <init_test+0x1fc>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0f      	ldr	r2, [pc, #60]	; (8006620 <init_test+0x200>)
 80065e2:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 80065e4:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <init_test+0x204>)
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <init_test+0x208>)
 80065e8:	601a      	str	r2, [r3, #0]

					MF.FLAG.ENKAI = 1;
 80065ea:	4a10      	ldr	r2, [pc, #64]	; (800662c <init_test+0x20c>)
 80065ec:	8813      	ldrh	r3, [r2, #0]
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	8013      	strh	r3, [r2, #0]

					while(1);
 80065f4:	e7fe      	b.n	80065f4 <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80065f6:	e71c      	b.n	8006432 <init_test+0x12>
 80065f8:	0800d6b8 	.word	0x0800d6b8
 80065fc:	20000a68 	.word	0x20000a68
 8006600:	0800d6ac 	.word	0x0800d6ac
 8006604:	40020000 	.word	0x40020000
 8006608:	0800d6d4 	.word	0x0800d6d4
 800660c:	0800d6e0 	.word	0x0800d6e0
 8006610:	0800d704 	.word	0x0800d704
 8006614:	0800d710 	.word	0x0800d710
 8006618:	0800d71c 	.word	0x0800d71c
 800661c:	20000ad8 	.word	0x20000ad8
 8006620:	20000b78 	.word	0x20000b78
 8006624:	20000cd8 	.word	0x20000cd8
 8006628:	459c4000 	.word	0x459c4000
 800662c:	20000ee4 	.word	0x20000ee4

08006630 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0

	int mode = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
	printf("Test Slalom Run, Mode : %d\n", mode);
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	4891      	ldr	r0, [pc, #580]	; (8006884 <slalom_test+0x254>)
 800663e:	f005 ff0b 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	b2d8      	uxtb	r0, r3
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	b2d9      	uxtb	r1, r3
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	f005 f92b 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 8006666:	4b88      	ldr	r3, [pc, #544]	; (8006888 <slalom_test+0x258>)
 8006668:	edd3 7a00 	vldr	s15, [r3]
 800666c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006678:	db0f      	blt.n	800669a <slalom_test+0x6a>
			  mode++;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3301      	adds	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
			  dist_r = 0;
 8006680:	4b81      	ldr	r3, [pc, #516]	; (8006888 <slalom_test+0x258>)
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b07      	cmp	r3, #7
 800668c:	dd01      	ble.n	8006692 <slalom_test+0x62>
				  mode = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
			  }
			  printf("Mode : %d\n", mode);
 8006692:	69f9      	ldr	r1, [r7, #28]
 8006694:	487d      	ldr	r0, [pc, #500]	; (800688c <slalom_test+0x25c>)
 8006696:	f005 fedf 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800669a:	4b7b      	ldr	r3, [pc, #492]	; (8006888 <slalom_test+0x258>)
 800669c:	edd3 7a00 	vldr	s15, [r3]
 80066a0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80066a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ac:	d80f      	bhi.n	80066ce <slalom_test+0x9e>
			  mode--;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
			  dist_r = 0;
 80066b4:	4b74      	ldr	r3, [pc, #464]	; (8006888 <slalom_test+0x258>)
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	da01      	bge.n	80066c6 <slalom_test+0x96>
				  mode = 7;
 80066c2:	2307      	movs	r3, #7
 80066c4:	61fb      	str	r3, [r7, #28]
			  }
			  printf("Mode : %d\n", mode);
 80066c6:	69f9      	ldr	r1, [r7, #28]
 80066c8:	4870      	ldr	r0, [pc, #448]	; (800688c <slalom_test+0x25c>)
 80066ca:	f005 fec5 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80066ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066d2:	486f      	ldr	r0, [pc, #444]	; (8006890 <slalom_test+0x260>)
 80066d4:	f7fb fdd6 	bl	8002284 <HAL_GPIO_ReadPin>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1b1      	bne.n	8006642 <slalom_test+0x12>
			  HAL_Delay(50);
 80066de:	2032      	movs	r0, #50	; 0x32
 80066e0:	f7fa fc74 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80066e4:	bf00      	nop
 80066e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066ea:	4869      	ldr	r0, [pc, #420]	; (8006890 <slalom_test+0x260>)
 80066ec:	f7fb fdca 	bl	8002284 <HAL_GPIO_ReadPin>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f7      	beq.n	80066e6 <slalom_test+0xb6>
			  drive_ready();
 80066f6:	f7fe fa95 	bl	8004c24 <drive_ready>

			  switch(mode){
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b07      	cmp	r3, #7
 80066fe:	d8a0      	bhi.n	8006642 <slalom_test+0x12>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <slalom_test+0xd8>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	08006729 	.word	0x08006729
 800670c:	0800672f 	.word	0x0800672f
 8006710:	08006759 	.word	0x08006759
 8006714:	08006783 	.word	0x08006783
 8006718:	080067a9 	.word	0x080067a9
 800671c:	080067cf 	.word	0x080067cf
 8006720:	0800680b 	.word	0x0800680b
 8006724:	08006847 	.word	0x08006847
				case 0:
					get_base();
 8006728:	f005 f870 	bl	800b80c <get_base>
					break;
 800672c:	e0a9      	b.n	8006882 <slalom_test+0x252>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800672e:	4859      	ldr	r0, [pc, #356]	; (8006894 <slalom_test+0x264>)
 8006730:	f005 ff06 	bl	800c540 <puts>
					half_sectionA();
 8006734:	f7fe fe20 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	e006      	b.n	800674c <slalom_test+0x11c>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800673e:	f7ff f971 	bl	8005a24 <slalom_R90>
						one_sectionU();
 8006742:	f7fe fef3 	bl	800552c <one_sectionU>
					for(int i = 0; i < 32; i++){
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	3301      	adds	r3, #1
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b1f      	cmp	r3, #31
 8006750:	ddf5      	ble.n	800673e <slalom_test+0x10e>
					}
					half_sectionD();
 8006752:	f7fe fe2b 	bl	80053ac <half_sectionD>
					break;
 8006756:	e094      	b.n	8006882 <slalom_test+0x252>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8006758:	484f      	ldr	r0, [pc, #316]	; (8006898 <slalom_test+0x268>)
 800675a:	f005 fef1 	bl	800c540 <puts>
					half_sectionA();
 800675e:	f7fe fe0b 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	e006      	b.n	8006776 <slalom_test+0x146>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8006768:	f7ff fa54 	bl	8005c14 <slalom_L90>
						one_sectionU();
 800676c:	f7fe fede 	bl	800552c <one_sectionU>
					for(int i = 0; i < 32; i++){
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	3301      	adds	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b1f      	cmp	r3, #31
 800677a:	ddf5      	ble.n	8006768 <slalom_test+0x138>
					}
					half_sectionD();
 800677c:	f7fe fe16 	bl	80053ac <half_sectionD>
					break;
 8006780:	e07f      	b.n	8006882 <slalom_test+0x252>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 8006782:	4844      	ldr	r0, [pc, #272]	; (8006894 <slalom_test+0x264>)
 8006784:	f005 fedc 	bl	800c540 <puts>
					half_sectionA();
 8006788:	f7fe fdf6 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 8; i++){
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	e004      	b.n	800679c <slalom_test+0x16c>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8006792:	f7ff f947 	bl	8005a24 <slalom_R90>
					for(int i = 0; i < 8; i++){
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3301      	adds	r3, #1
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b07      	cmp	r3, #7
 80067a0:	ddf7      	ble.n	8006792 <slalom_test+0x162>
					}
					half_sectionD();
 80067a2:	f7fe fe03 	bl	80053ac <half_sectionD>
					break;
 80067a6:	e06c      	b.n	8006882 <slalom_test+0x252>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 80067a8:	483b      	ldr	r0, [pc, #236]	; (8006898 <slalom_test+0x268>)
 80067aa:	f005 fec9 	bl	800c540 <puts>
					half_sectionA();
 80067ae:	f7fe fde3 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 8; i++){
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	e004      	b.n	80067c2 <slalom_test+0x192>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80067b8:	f7ff fa2c 	bl	8005c14 <slalom_L90>
					for(int i = 0; i < 8; i++){
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b07      	cmp	r3, #7
 80067c6:	ddf7      	ble.n	80067b8 <slalom_test+0x188>
					}
					half_sectionD();
 80067c8:	f7fe fdf0 	bl	80053ac <half_sectionD>
					break;
 80067cc:	e059      	b.n	8006882 <slalom_test+0x252>
				case 5:
					//----slalom2右折----
					printf("slalom turn right .\n");
 80067ce:	4831      	ldr	r0, [pc, #196]	; (8006894 <slalom_test+0x264>)
 80067d0:	f005 feb6 	bl	800c540 <puts>
					half_sectionA2();
 80067d4:	f7fe fe26 	bl	8005424 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 80067d8:	2300      	movs	r3, #0
 80067da:	60bb      	str	r3, [r7, #8]
 80067dc:	e00c      	b.n	80067f8 <slalom_test+0x1c8>
						full_led_write(1);
 80067de:	2001      	movs	r0, #1
 80067e0:	f005 f8a6 	bl	800b930 <full_led_write>
						slalom_R902();	//一区画のパルス分デフォルトインターバルで走行
 80067e4:	f7ff fb0e 	bl	8005e04 <slalom_R902>
						full_led_write(2);
 80067e8:	2002      	movs	r0, #2
 80067ea:	f005 f8a1 	bl	800b930 <full_led_write>
						one_sectionU();
 80067ee:	f7fe fe9d 	bl	800552c <one_sectionU>
					for(int i = 0; i < 1; i++){
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	ddef      	ble.n	80067de <slalom_test+0x1ae>
					}
					full_led_write(3);
 80067fe:	2003      	movs	r0, #3
 8006800:	f005 f896 	bl	800b930 <full_led_write>
					half_sectionD2();
 8006804:	f7fe fe2a 	bl	800545c <half_sectionD2>
					break;
 8006808:	e03b      	b.n	8006882 <slalom_test+0x252>
				case 6:
					//----slalom2右折----
					printf("slalom turn right .\n");
 800680a:	4822      	ldr	r0, [pc, #136]	; (8006894 <slalom_test+0x264>)
 800680c:	f005 fe98 	bl	800c540 <puts>
					half_sectionA2();
 8006810:	f7fe fe08 	bl	8005424 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 8006814:	2300      	movs	r3, #0
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	e00c      	b.n	8006834 <slalom_test+0x204>
						full_led_write(1);
 800681a:	2001      	movs	r0, #1
 800681c:	f005 f888 	bl	800b930 <full_led_write>
						slalom_R902();	//一区画のパルス分デフォルトインターバルで走行
 8006820:	f7ff faf0 	bl	8005e04 <slalom_R902>
						full_led_write(2);
 8006824:	2002      	movs	r0, #2
 8006826:	f005 f883 	bl	800b930 <full_led_write>
						one_sectionU();
 800682a:	f7fe fe7f 	bl	800552c <one_sectionU>
					for(int i = 0; i < 16; i++){
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3301      	adds	r3, #1
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b0f      	cmp	r3, #15
 8006838:	ddef      	ble.n	800681a <slalom_test+0x1ea>
					}
					full_led_write(3);
 800683a:	2003      	movs	r0, #3
 800683c:	f005 f878 	bl	800b930 <full_led_write>
					half_sectionD2();
 8006840:	f7fe fe0c 	bl	800545c <half_sectionD2>
					break;
 8006844:	e01d      	b.n	8006882 <slalom_test+0x252>
				case 7:
					//----slalom2左折----
					printf("slalom turn left .\n");
 8006846:	4814      	ldr	r0, [pc, #80]	; (8006898 <slalom_test+0x268>)
 8006848:	f005 fe7a 	bl	800c540 <puts>
					half_sectionA2();
 800684c:	f7fe fdea 	bl	8005424 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 8006850:	2300      	movs	r3, #0
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	e00c      	b.n	8006870 <slalom_test+0x240>
						full_led_write(1);
 8006856:	2001      	movs	r0, #1
 8006858:	f005 f86a 	bl	800b930 <full_led_write>
						slalom_L902();				//16回右90度回転、つまり4周回転
 800685c:	f7ff fba4 	bl	8005fa8 <slalom_L902>
						full_led_write(2);
 8006860:	2002      	movs	r0, #2
 8006862:	f005 f865 	bl	800b930 <full_led_write>
						one_sectionU();
 8006866:	f7fe fe61 	bl	800552c <one_sectionU>
					for(int i = 0; i < 16; i++){
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	ddef      	ble.n	8006856 <slalom_test+0x226>
					}
					full_led_write(3);
 8006876:	2003      	movs	r0, #3
 8006878:	f005 f85a 	bl	800b930 <full_led_write>
					half_sectionD2();
 800687c:	f7fe fdee 	bl	800545c <half_sectionD2>
					break;
 8006880:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006882:	e6de      	b.n	8006642 <slalom_test+0x12>
 8006884:	0800d73c 	.word	0x0800d73c
 8006888:	20000a68 	.word	0x20000a68
 800688c:	0800d6ac 	.word	0x0800d6ac
 8006890:	40020000 	.word	0x40020000
 8006894:	0800d758 	.word	0x0800d758
 8006898:	0800d76c 	.word	0x0800d76c

0800689c <v_test>:
//v_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0

	int mode = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
	printf("Test V Run, Mode : %d\n", mode);
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	484a      	ldr	r0, [pc, #296]	; (80069d4 <v_test+0x138>)
 80068aa:	f005 fdd5 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	b2d8      	uxtb	r0, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	b2d9      	uxtb	r1, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	f004 fff5 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 80068d2:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <v_test+0x13c>)
 80068d4:	edd3 7a00 	vldr	s15, [r3]
 80068d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80068dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e4:	db0f      	blt.n	8006906 <v_test+0x6a>
			  mode++;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3301      	adds	r3, #1
 80068ea:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80068ec:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <v_test+0x13c>)
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b07      	cmp	r3, #7
 80068f8:	dd01      	ble.n	80068fe <v_test+0x62>
				  mode = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4836      	ldr	r0, [pc, #216]	; (80069dc <v_test+0x140>)
 8006902:	f005 fda9 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006906:	4b34      	ldr	r3, [pc, #208]	; (80069d8 <v_test+0x13c>)
 8006908:	edd3 7a00 	vldr	s15, [r3]
 800690c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006918:	d80f      	bhi.n	800693a <v_test+0x9e>
			  mode--;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3b01      	subs	r3, #1
 800691e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <v_test+0x13c>)
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da01      	bge.n	8006932 <v_test+0x96>
				  mode = 7;
 800692e:	2307      	movs	r3, #7
 8006930:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4829      	ldr	r0, [pc, #164]	; (80069dc <v_test+0x140>)
 8006936:	f005 fd8f 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800693a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800693e:	4828      	ldr	r0, [pc, #160]	; (80069e0 <v_test+0x144>)
 8006940:	f7fb fca0 	bl	8002284 <HAL_GPIO_ReadPin>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1b1      	bne.n	80068ae <v_test+0x12>
			  HAL_Delay(50);
 800694a:	2032      	movs	r0, #50	; 0x32
 800694c:	f7fa fb3e 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006950:	bf00      	nop
 8006952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006956:	4822      	ldr	r0, [pc, #136]	; (80069e0 <v_test+0x144>)
 8006958:	f7fb fc94 	bl	8002284 <HAL_GPIO_ReadPin>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f7      	beq.n	8006952 <v_test+0xb6>
			  drive_ready();
 8006962:	f7fe f95f 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b07      	cmp	r3, #7
 800696a:	d8a0      	bhi.n	80068ae <v_test+0x12>
 800696c:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <v_test+0xd8>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	08006995 	.word	0x08006995
 8006978:	0800699b 	.word	0x0800699b
 800697c:	080068af 	.word	0x080068af
 8006980:	080068af 	.word	0x080068af
 8006984:	080068af 	.word	0x080068af
 8006988:	080068af 	.word	0x080068af
 800698c:	080068af 	.word	0x080068af
 8006990:	080068af 	.word	0x080068af
				case 0:
					get_base();
 8006994:	f004 ff3a 	bl	800b80c <get_base>
					break;
 8006998:	e01a      	b.n	80069d0 <v_test+0x134>
				case 1:
					//----V左45----
					printf("V 45 right .\n");
 800699a:	4812      	ldr	r0, [pc, #72]	; (80069e4 <v_test+0x148>)
 800699c:	f005 fdd0 	bl	800c540 <puts>
					full_led_write(7);
 80069a0:	2007      	movs	r0, #7
 80069a2:	f004 ffc5 	bl	800b930 <full_led_write>
					half_sectionA();
 80069a6:	f7fe fce7 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80069aa:	2300      	movs	r3, #0
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	e006      	b.n	80069be <v_test+0x122>
						v_R45();
 80069b0:	f7ff fbdc 	bl	800616c <v_R45>
						v_R45();
 80069b4:	f7ff fbda 	bl	800616c <v_R45>
					for(int i = 0; i < 1; i++){
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	603b      	str	r3, [r7, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	ddf5      	ble.n	80069b0 <v_test+0x114>
					}
					full_led_write(7);
 80069c4:	2007      	movs	r0, #7
 80069c6:	f004 ffb3 	bl	800b930 <full_led_write>
					half_sectionD();
 80069ca:	f7fe fcef 	bl	80053ac <half_sectionD>
					break;
 80069ce:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80069d0:	e76d      	b.n	80068ae <v_test+0x12>
 80069d2:	bf00      	nop
 80069d4:	0800d780 	.word	0x0800d780
 80069d8:	20000a68 	.word	0x20000a68
 80069dc:	0800d6ac 	.word	0x0800d6ac
 80069e0:	40020000 	.word	0x40020000
 80069e4:	0800d798 	.word	0x0800d798

080069e8 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0

	int mode = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4874      	ldr	r0, [pc, #464]	; (8006bc8 <simple_run+0x1e0>)
 80069f6:	f005 fd2f 	bl	800c458 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	b2d8      	uxtb	r0, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	b2d9      	uxtb	r1, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f004 ff4f 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 8006a1e:	4b6b      	ldr	r3, [pc, #428]	; (8006bcc <simple_run+0x1e4>)
 8006a20:	edd3 7a00 	vldr	s15, [r3]
 8006a24:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a30:	db0f      	blt.n	8006a52 <simple_run+0x6a>
			  mode++;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3301      	adds	r3, #1
 8006a36:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006a38:	4b64      	ldr	r3, [pc, #400]	; (8006bcc <simple_run+0x1e4>)
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b07      	cmp	r3, #7
 8006a44:	dd01      	ble.n	8006a4a <simple_run+0x62>
				  mode = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4860      	ldr	r0, [pc, #384]	; (8006bd0 <simple_run+0x1e8>)
 8006a4e:	f005 fd03 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006a52:	4b5e      	ldr	r3, [pc, #376]	; (8006bcc <simple_run+0x1e4>)
 8006a54:	edd3 7a00 	vldr	s15, [r3]
 8006a58:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a64:	d80f      	bhi.n	8006a86 <simple_run+0x9e>
			  mode--;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006a6c:	4b57      	ldr	r3, [pc, #348]	; (8006bcc <simple_run+0x1e4>)
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da01      	bge.n	8006a7e <simple_run+0x96>
				  mode = 7;
 8006a7a:	2307      	movs	r3, #7
 8006a7c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4853      	ldr	r0, [pc, #332]	; (8006bd0 <simple_run+0x1e8>)
 8006a82:	f005 fce9 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a8a:	4852      	ldr	r0, [pc, #328]	; (8006bd4 <simple_run+0x1ec>)
 8006a8c:	f7fb fbfa 	bl	8002284 <HAL_GPIO_ReadPin>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1b1      	bne.n	80069fa <simple_run+0x12>
			  HAL_Delay(50);
 8006a96:	2032      	movs	r0, #50	; 0x32
 8006a98:	f7fa fa98 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006a9c:	bf00      	nop
 8006a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006aa2:	484c      	ldr	r0, [pc, #304]	; (8006bd4 <simple_run+0x1ec>)
 8006aa4:	f7fb fbee 	bl	8002284 <HAL_GPIO_ReadPin>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f7      	beq.n	8006a9e <simple_run+0xb6>
			  drive_ready();
 8006aae:	f7fe f8b9 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b07      	cmp	r3, #7
 8006ab6:	d8a0      	bhi.n	80069fa <simple_run+0x12>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <simple_run+0xd8>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	080069fb 	.word	0x080069fb
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006b2d 	.word	0x08006b2d
 8006acc:	08006b79 	.word	0x08006b79
 8006ad0:	080069fb 	.word	0x080069fb
 8006ad4:	080069fb 	.word	0x080069fb
 8006ad8:	080069fb 	.word	0x080069fb
 8006adc:	080069fb 	.word	0x080069fb

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 8006ae0:	483d      	ldr	r0, [pc, #244]	; (8006bd8 <simple_run+0x1f0>)
 8006ae2:	f005 fd2d 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 8006ae6:	4a3d      	ldr	r2, [pc, #244]	; (8006bdc <simple_run+0x1f4>)
 8006ae8:	8813      	ldrh	r3, [r2, #0]
 8006aea:	f36f 1345 	bfc	r3, #5, #1
 8006aee:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006af0:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <simple_run+0x1f8>)
 8006af2:	2209      	movs	r2, #9
 8006af4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006af6:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <simple_run+0x1fc>)
 8006af8:	2206      	movs	r2, #6
 8006afa:	701a      	strb	r2, [r3, #0]

					get_base();
 8006afc:	f004 fe86 	bl	800b80c <get_base>

					searchA();
 8006b00:	f002 ff6c 	bl	80099dc <searchA>
					HAL_Delay(500);
 8006b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b08:	f7fa fa60 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006b0c:	4b35      	ldr	r3, [pc, #212]	; (8006be4 <simple_run+0x1fc>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	4b34      	ldr	r3, [pc, #208]	; (8006be4 <simple_run+0x1fc>)
 8006b14:	781a      	ldrb	r2, [r3, #0]
 8006b16:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <simple_run+0x1f8>)
 8006b18:	701a      	strb	r2, [r3, #0]
					searchA();
 8006b1a:	f002 ff5f 	bl	80099dc <searchA>

					goal_x = GOAL_X;
 8006b1e:	4b30      	ldr	r3, [pc, #192]	; (8006be0 <simple_run+0x1f8>)
 8006b20:	2209      	movs	r2, #9
 8006b22:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b24:	4b2f      	ldr	r3, [pc, #188]	; (8006be4 <simple_run+0x1fc>)
 8006b26:	2206      	movs	r2, #6
 8006b28:	701a      	strb	r2, [r3, #0]

					break;
 8006b2a:	e04b      	b.n	8006bc4 <simple_run+0x1dc>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8006b2c:	482e      	ldr	r0, [pc, #184]	; (8006be8 <simple_run+0x200>)
 8006b2e:	f005 fd07 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 8006b32:	4a2a      	ldr	r2, [pc, #168]	; (8006bdc <simple_run+0x1f4>)
 8006b34:	8813      	ldrh	r3, [r2, #0]
 8006b36:	f36f 1345 	bfc	r3, #5, #1
 8006b3a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006b3c:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <simple_run+0x1f8>)
 8006b3e:	2209      	movs	r2, #9
 8006b40:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b42:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <simple_run+0x1fc>)
 8006b44:	2206      	movs	r2, #6
 8006b46:	701a      	strb	r2, [r3, #0]

					get_base();
 8006b48:	f004 fe60 	bl	800b80c <get_base>

					searchB();
 8006b4c:	f002 ffc8 	bl	8009ae0 <searchB>
					HAL_Delay(500);
 8006b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b54:	f7fa fa3a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006b58:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <simple_run+0x1fc>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <simple_run+0x1fc>)
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <simple_run+0x1f8>)
 8006b64:	701a      	strb	r2, [r3, #0]
					searchB();
 8006b66:	f002 ffbb 	bl	8009ae0 <searchB>

					goal_x = GOAL_X;
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <simple_run+0x1f8>)
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b70:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <simple_run+0x1fc>)
 8006b72:	2206      	movs	r2, #6
 8006b74:	701a      	strb	r2, [r3, #0]

					break;
 8006b76:	e025      	b.n	8006bc4 <simple_run+0x1dc>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8006b78:	481c      	ldr	r0, [pc, #112]	; (8006bec <simple_run+0x204>)
 8006b7a:	f005 fce1 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <simple_run+0x1f4>)
 8006b80:	8813      	ldrh	r3, [r2, #0]
 8006b82:	f043 0320 	orr.w	r3, r3, #32
 8006b86:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <simple_run+0x1f8>)
 8006b8a:	2209      	movs	r2, #9
 8006b8c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b8e:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <simple_run+0x1fc>)
 8006b90:	2206      	movs	r2, #6
 8006b92:	701a      	strb	r2, [r3, #0]

					get_base();
 8006b94:	f004 fe3a 	bl	800b80c <get_base>

					searchB();
 8006b98:	f002 ffa2 	bl	8009ae0 <searchB>
					HAL_Delay(500);
 8006b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ba0:	f7fa fa14 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <simple_run+0x1fc>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <simple_run+0x1fc>)
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <simple_run+0x1f8>)
 8006bb0:	701a      	strb	r2, [r3, #0]
					searchB();
 8006bb2:	f002 ff95 	bl	8009ae0 <searchB>

					goal_x = GOAL_X;
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <simple_run+0x1f8>)
 8006bb8:	2209      	movs	r2, #9
 8006bba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006bbc:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <simple_run+0x1fc>)
 8006bbe:	2206      	movs	r2, #6
 8006bc0:	701a      	strb	r2, [r3, #0]

					break;
 8006bc2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006bc4:	e719      	b.n	80069fa <simple_run+0x12>
 8006bc6:	bf00      	nop
 8006bc8:	0800d7a8 	.word	0x0800d7a8
 8006bcc:	20000a68 	.word	0x20000a68
 8006bd0:	0800d6ac 	.word	0x0800d6ac
 8006bd4:	40020000 	.word	0x40020000
 8006bd8:	0800d7c0 	.word	0x0800d7c0
 8006bdc:	20000ee4 	.word	0x20000ee4
 8006be0:	20000b2d 	.word	0x20000b2d
 8006be4:	20000ac8 	.word	0x20000ac8
 8006be8:	0800d7cc 	.word	0x0800d7cc
 8006bec:	0800d7e4 	.word	0x0800d7e4

08006bf0 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0

	int mode = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	48b1      	ldr	r0, [pc, #708]	; (8006ec4 <slalom_run+0x2d4>)
 8006bfe:	f005 fc2b 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	b2d8      	uxtb	r0, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	b2d9      	uxtb	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	f004 fe4b 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 8006c26:	4ba8      	ldr	r3, [pc, #672]	; (8006ec8 <slalom_run+0x2d8>)
 8006c28:	edd3 7a00 	vldr	s15, [r3]
 8006c2c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c38:	db0f      	blt.n	8006c5a <slalom_run+0x6a>
			  mode++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006c40:	4ba1      	ldr	r3, [pc, #644]	; (8006ec8 <slalom_run+0x2d8>)
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b07      	cmp	r3, #7
 8006c4c:	dd01      	ble.n	8006c52 <slalom_run+0x62>
				  mode = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	489d      	ldr	r0, [pc, #628]	; (8006ecc <slalom_run+0x2dc>)
 8006c56:	f005 fbff 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006c5a:	4b9b      	ldr	r3, [pc, #620]	; (8006ec8 <slalom_run+0x2d8>)
 8006c5c:	edd3 7a00 	vldr	s15, [r3]
 8006c60:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6c:	d80f      	bhi.n	8006c8e <slalom_run+0x9e>
			  mode--;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006c74:	4b94      	ldr	r3, [pc, #592]	; (8006ec8 <slalom_run+0x2d8>)
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da01      	bge.n	8006c86 <slalom_run+0x96>
				  mode = 7;
 8006c82:	2307      	movs	r3, #7
 8006c84:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4890      	ldr	r0, [pc, #576]	; (8006ecc <slalom_run+0x2dc>)
 8006c8a:	f005 fbe5 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c92:	488f      	ldr	r0, [pc, #572]	; (8006ed0 <slalom_run+0x2e0>)
 8006c94:	f7fb faf6 	bl	8002284 <HAL_GPIO_ReadPin>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1b1      	bne.n	8006c02 <slalom_run+0x12>
			  HAL_Delay(50);
 8006c9e:	2032      	movs	r0, #50	; 0x32
 8006ca0:	f7fa f994 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006ca4:	bf00      	nop
 8006ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006caa:	4889      	ldr	r0, [pc, #548]	; (8006ed0 <slalom_run+0x2e0>)
 8006cac:	f7fb faea 	bl	8002284 <HAL_GPIO_ReadPin>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f7      	beq.n	8006ca6 <slalom_run+0xb6>
			  drive_ready();
 8006cb6:	f7fd ffb5 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b07      	cmp	r3, #7
 8006cbe:	d8a0      	bhi.n	8006c02 <slalom_run+0x12>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <slalom_run+0xd8>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006ce9 	.word	0x08006ce9
 8006ccc:	08006d3b 	.word	0x08006d3b
 8006cd0:	08006d8d 	.word	0x08006d8d
 8006cd4:	08006df9 	.word	0x08006df9
 8006cd8:	08006e5f 	.word	0x08006e5f
 8006cdc:	08006ef9 	.word	0x08006ef9
 8006ce0:	08006f5d 	.word	0x08006f5d
 8006ce4:	08006c03 	.word	0x08006c03

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8006ce8:	487a      	ldr	r0, [pc, #488]	; (8006ed4 <slalom_run+0x2e4>)
 8006cea:	f005 fc29 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 8006cee:	4a7a      	ldr	r2, [pc, #488]	; (8006ed8 <slalom_run+0x2e8>)
 8006cf0:	8813      	ldrh	r3, [r2, #0]
 8006cf2:	f36f 1345 	bfc	r3, #5, #1
 8006cf6:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006cf8:	4b78      	ldr	r3, [pc, #480]	; (8006edc <slalom_run+0x2ec>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006cfe:	4b78      	ldr	r3, [pc, #480]	; (8006ee0 <slalom_run+0x2f0>)
 8006d00:	2209      	movs	r2, #9
 8006d02:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d04:	4b77      	ldr	r3, [pc, #476]	; (8006ee4 <slalom_run+0x2f4>)
 8006d06:	2206      	movs	r2, #6
 8006d08:	701a      	strb	r2, [r3, #0]

					get_base();
 8006d0a:	f004 fd7f 	bl	800b80c <get_base>

					searchC();
 8006d0e:	f002 ff71 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8006d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d16:	f7fa f959 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006d1a:	4b72      	ldr	r3, [pc, #456]	; (8006ee4 <slalom_run+0x2f4>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	4b70      	ldr	r3, [pc, #448]	; (8006ee4 <slalom_run+0x2f4>)
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	4b6e      	ldr	r3, [pc, #440]	; (8006ee0 <slalom_run+0x2f0>)
 8006d26:	701a      	strb	r2, [r3, #0]
					searchC();
 8006d28:	f002 ff64 	bl	8009bf4 <searchC>

					goal_x = GOAL_X;
 8006d2c:	4b6c      	ldr	r3, [pc, #432]	; (8006ee0 <slalom_run+0x2f0>)
 8006d2e:	2209      	movs	r2, #9
 8006d30:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d32:	4b6c      	ldr	r3, [pc, #432]	; (8006ee4 <slalom_run+0x2f4>)
 8006d34:	2206      	movs	r2, #6
 8006d36:	701a      	strb	r2, [r3, #0]
					break;
 8006d38:	e13d      	b.n	8006fb6 <slalom_run+0x3c6>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8006d3a:	486b      	ldr	r0, [pc, #428]	; (8006ee8 <slalom_run+0x2f8>)
 8006d3c:	f005 fc00 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006d40:	4a65      	ldr	r2, [pc, #404]	; (8006ed8 <slalom_run+0x2e8>)
 8006d42:	8813      	ldrh	r3, [r2, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006d4a:	4b64      	ldr	r3, [pc, #400]	; (8006edc <slalom_run+0x2ec>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006d50:	4b63      	ldr	r3, [pc, #396]	; (8006ee0 <slalom_run+0x2f0>)
 8006d52:	2209      	movs	r2, #9
 8006d54:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d56:	4b63      	ldr	r3, [pc, #396]	; (8006ee4 <slalom_run+0x2f4>)
 8006d58:	2206      	movs	r2, #6
 8006d5a:	701a      	strb	r2, [r3, #0]

					get_base();
 8006d5c:	f004 fd56 	bl	800b80c <get_base>

					searchC();
 8006d60:	f002 ff48 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8006d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d68:	f7fa f930 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006d6c:	4b5d      	ldr	r3, [pc, #372]	; (8006ee4 <slalom_run+0x2f4>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	4b5c      	ldr	r3, [pc, #368]	; (8006ee4 <slalom_run+0x2f4>)
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	4b5a      	ldr	r3, [pc, #360]	; (8006ee0 <slalom_run+0x2f0>)
 8006d78:	701a      	strb	r2, [r3, #0]
					searchC();
 8006d7a:	f002 ff3b 	bl	8009bf4 <searchC>

					goal_x = GOAL_X;
 8006d7e:	4b58      	ldr	r3, [pc, #352]	; (8006ee0 <slalom_run+0x2f0>)
 8006d80:	2209      	movs	r2, #9
 8006d82:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d84:	4b57      	ldr	r3, [pc, #348]	; (8006ee4 <slalom_run+0x2f4>)
 8006d86:	2206      	movs	r2, #6
 8006d88:	701a      	strb	r2, [r3, #0]
					break;
 8006d8a:	e114      	b.n	8006fb6 <slalom_run+0x3c6>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006d8c:	4857      	ldr	r0, [pc, #348]	; (8006eec <slalom_run+0x2fc>)
 8006d8e:	f005 fbd7 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006d92:	4a51      	ldr	r2, [pc, #324]	; (8006ed8 <slalom_run+0x2e8>)
 8006d94:	8813      	ldrh	r3, [r2, #0]
 8006d96:	f043 0320 	orr.w	r3, r3, #32
 8006d9a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006d9c:	4a4e      	ldr	r2, [pc, #312]	; (8006ed8 <slalom_run+0x2e8>)
 8006d9e:	8813      	ldrh	r3, [r2, #0]
 8006da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006da4:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006da6:	4b4d      	ldr	r3, [pc, #308]	; (8006edc <slalom_run+0x2ec>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8006dac:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <slalom_run+0x300>)
 8006dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8006db4:	4b4f      	ldr	r3, [pc, #316]	; (8006ef4 <slalom_run+0x304>)
 8006db6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006dba:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006dbc:	4b48      	ldr	r3, [pc, #288]	; (8006ee0 <slalom_run+0x2f0>)
 8006dbe:	2209      	movs	r2, #9
 8006dc0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006dc2:	4b48      	ldr	r3, [pc, #288]	; (8006ee4 <slalom_run+0x2f4>)
 8006dc4:	2206      	movs	r2, #6
 8006dc6:	701a      	strb	r2, [r3, #0]

					get_base();
 8006dc8:	f004 fd20 	bl	800b80c <get_base>

					searchD();
 8006dcc:	f003 f864 	bl	8009e98 <searchD>
					HAL_Delay(500);
 8006dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006dd4:	f7fa f8fa 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006dd8:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <slalom_run+0x2f4>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <slalom_run+0x2f4>)
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	4b3f      	ldr	r3, [pc, #252]	; (8006ee0 <slalom_run+0x2f0>)
 8006de4:	701a      	strb	r2, [r3, #0]
					searchD();
 8006de6:	f003 f857 	bl	8009e98 <searchD>

					goal_x = GOAL_X;
 8006dea:	4b3d      	ldr	r3, [pc, #244]	; (8006ee0 <slalom_run+0x2f0>)
 8006dec:	2209      	movs	r2, #9
 8006dee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006df0:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <slalom_run+0x2f4>)
 8006df2:	2206      	movs	r2, #6
 8006df4:	701a      	strb	r2, [r3, #0]
					break;
 8006df6:	e0de      	b.n	8006fb6 <slalom_run+0x3c6>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006df8:	483c      	ldr	r0, [pc, #240]	; (8006eec <slalom_run+0x2fc>)
 8006dfa:	f005 fba1 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006dfe:	4a36      	ldr	r2, [pc, #216]	; (8006ed8 <slalom_run+0x2e8>)
 8006e00:	8813      	ldrh	r3, [r2, #0]
 8006e02:	f043 0320 	orr.w	r3, r3, #32
 8006e06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006e08:	4a33      	ldr	r2, [pc, #204]	; (8006ed8 <slalom_run+0x2e8>)
 8006e0a:	8813      	ldrh	r3, [r2, #0]
 8006e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e10:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <slalom_run+0x300>)
 8006e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e18:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8006e1a:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <slalom_run+0x304>)
 8006e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e20:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006e22:	4b2f      	ldr	r3, [pc, #188]	; (8006ee0 <slalom_run+0x2f0>)
 8006e24:	2209      	movs	r2, #9
 8006e26:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e28:	4b2e      	ldr	r3, [pc, #184]	; (8006ee4 <slalom_run+0x2f4>)
 8006e2a:	2206      	movs	r2, #6
 8006e2c:	701a      	strb	r2, [r3, #0]

					get_base();
 8006e2e:	f004 fced 	bl	800b80c <get_base>

					searchD();
 8006e32:	f003 f831 	bl	8009e98 <searchD>
					HAL_Delay(500);
 8006e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e3a:	f7fa f8c7 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <slalom_run+0x2f4>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <slalom_run+0x2f4>)
 8006e46:	781a      	ldrb	r2, [r3, #0]
 8006e48:	4b25      	ldr	r3, [pc, #148]	; (8006ee0 <slalom_run+0x2f0>)
 8006e4a:	701a      	strb	r2, [r3, #0]
					searchD();
 8006e4c:	f003 f824 	bl	8009e98 <searchD>

					goal_x = GOAL_X;
 8006e50:	4b23      	ldr	r3, [pc, #140]	; (8006ee0 <slalom_run+0x2f0>)
 8006e52:	2209      	movs	r2, #9
 8006e54:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e56:	4b23      	ldr	r3, [pc, #140]	; (8006ee4 <slalom_run+0x2f4>)
 8006e58:	2206      	movs	r2, #6
 8006e5a:	701a      	strb	r2, [r3, #0]
					break;
 8006e5c:	e0ab      	b.n	8006fb6 <slalom_run+0x3c6>

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006e5e:	4823      	ldr	r0, [pc, #140]	; (8006eec <slalom_run+0x2fc>)
 8006e60:	f005 fb6e 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006e64:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <slalom_run+0x2e8>)
 8006e66:	8813      	ldrh	r3, [r2, #0]
 8006e68:	f043 0320 	orr.w	r3, r3, #32
 8006e6c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <slalom_run+0x2e8>)
 8006e70:	8813      	ldrh	r3, [r2, #0]
 8006e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e76:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8006e78:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <slalom_run+0x300>)
 8006e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 8006e80:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <slalom_run+0x304>)
 8006e82:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e86:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <slalom_run+0x2f0>)
 8006e8a:	2209      	movs	r2, #9
 8006e8c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <slalom_run+0x2f4>)
 8006e90:	2206      	movs	r2, #6
 8006e92:	701a      	strb	r2, [r3, #0]

					get_base();
 8006e94:	f004 fcba 	bl	800b80c <get_base>

					searchD();
 8006e98:	f002 fffe 	bl	8009e98 <searchD>
					HAL_Delay(500);
 8006e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ea0:	f7fa f894 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <slalom_run+0x2f4>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <slalom_run+0x2f4>)
 8006eac:	781a      	ldrb	r2, [r3, #0]
 8006eae:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <slalom_run+0x2f0>)
 8006eb0:	701a      	strb	r2, [r3, #0]
					searchD();
 8006eb2:	f002 fff1 	bl	8009e98 <searchD>

					goal_x = GOAL_X;
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <slalom_run+0x2f0>)
 8006eb8:	2209      	movs	r2, #9
 8006eba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006ebc:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <slalom_run+0x2f4>)
 8006ebe:	2206      	movs	r2, #6
 8006ec0:	701a      	strb	r2, [r3, #0]
					break;
 8006ec2:	e078      	b.n	8006fb6 <slalom_run+0x3c6>
 8006ec4:	0800d800 	.word	0x0800d800
 8006ec8:	20000a68 	.word	0x20000a68
 8006ecc:	0800d6ac 	.word	0x0800d6ac
 8006ed0:	40020000 	.word	0x40020000
 8006ed4:	0800d818 	.word	0x0800d818
 8006ed8:	20000ee4 	.word	0x20000ee4
 8006edc:	20000f04 	.word	0x20000f04
 8006ee0:	20000b2d 	.word	0x20000b2d
 8006ee4:	20000ac8 	.word	0x20000ac8
 8006ee8:	0800d82c 	.word	0x0800d82c
 8006eec:	0800d844 	.word	0x0800d844
 8006ef0:	200003d0 	.word	0x200003d0
 8006ef4:	20000ef8 	.word	0x20000ef8

				case 5:
					//----二次走行+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8006ef8:	482f      	ldr	r0, [pc, #188]	; (8006fb8 <slalom_run+0x3c8>)
 8006efa:	f005 fb21 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006efe:	4a2f      	ldr	r2, [pc, #188]	; (8006fbc <slalom_run+0x3cc>)
 8006f00:	8813      	ldrh	r3, [r2, #0]
 8006f02:	f043 0320 	orr.w	r3, r3, #32
 8006f06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <slalom_run+0x3cc>)
 8006f0a:	8813      	ldrh	r3, [r2, #0]
 8006f0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f10:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006f12:	4b2b      	ldr	r3, [pc, #172]	; (8006fc0 <slalom_run+0x3d0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006f18:	4b2a      	ldr	r3, [pc, #168]	; (8006fc4 <slalom_run+0x3d4>)
 8006f1a:	2209      	movs	r2, #9
 8006f1c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f1e:	4b2a      	ldr	r3, [pc, #168]	; (8006fc8 <slalom_run+0x3d8>)
 8006f20:	2206      	movs	r2, #6
 8006f22:	701a      	strb	r2, [r3, #0]

					get_base();
 8006f24:	f004 fc72 	bl	800b80c <get_base>

					HAL_Delay(5000);
 8006f28:	f241 3088 	movw	r0, #5000	; 0x1388
 8006f2c:	f7fa f84e 	bl	8000fcc <HAL_Delay>
					searchC();
 8006f30:	f002 fe60 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8006f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f38:	f7fa f848 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006f3c:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <slalom_run+0x3d8>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <slalom_run+0x3d8>)
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <slalom_run+0x3d4>)
 8006f48:	701a      	strb	r2, [r3, #0]
					searchC();
 8006f4a:	f002 fe53 	bl	8009bf4 <searchC>

					goal_x = GOAL_X;
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <slalom_run+0x3d4>)
 8006f50:	2209      	movs	r2, #9
 8006f52:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <slalom_run+0x3d8>)
 8006f56:	2206      	movs	r2, #6
 8006f58:	701a      	strb	r2, [r3, #0]
					break;
 8006f5a:	e02c      	b.n	8006fb6 <slalom_run+0x3c6>

				case 6:
					//----二次走行+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8006f5c:	4816      	ldr	r0, [pc, #88]	; (8006fb8 <slalom_run+0x3c8>)
 8006f5e:	f005 faef 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 8006f62:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <slalom_run+0x3cc>)
 8006f64:	8813      	ldrh	r3, [r2, #0]
 8006f66:	f043 0320 	orr.w	r3, r3, #32
 8006f6a:	8013      	strh	r3, [r2, #0]
//					MF.FLAG.STRAIGHT = 1;
					start_flag = 0;
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <slalom_run+0x3d0>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <slalom_run+0x3d4>)
 8006f74:	2209      	movs	r2, #9
 8006f76:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f78:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <slalom_run+0x3d8>)
 8006f7a:	2206      	movs	r2, #6
 8006f7c:	701a      	strb	r2, [r3, #0]

					get_base();
 8006f7e:	f004 fc45 	bl	800b80c <get_base>

					HAL_Delay(5000);
 8006f82:	f241 3088 	movw	r0, #5000	; 0x1388
 8006f86:	f7fa f821 	bl	8000fcc <HAL_Delay>
					searchC2();
 8006f8a:	f002 fedf 	bl	8009d4c <searchC2>
					HAL_Delay(500);
 8006f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f92:	f7fa f81b 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <slalom_run+0x3d8>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <slalom_run+0x3d8>)
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <slalom_run+0x3d4>)
 8006fa2:	701a      	strb	r2, [r3, #0]
					searchC2();
 8006fa4:	f002 fed2 	bl	8009d4c <searchC2>

					goal_x = GOAL_X;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <slalom_run+0x3d4>)
 8006faa:	2209      	movs	r2, #9
 8006fac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <slalom_run+0x3d8>)
 8006fb0:	2206      	movs	r2, #6
 8006fb2:	701a      	strb	r2, [r3, #0]
					break;
 8006fb4:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006fb6:	e624      	b.n	8006c02 <slalom_run+0x12>
 8006fb8:	0800d860 	.word	0x0800d860
 8006fbc:	20000ee4 	.word	0x20000ee4
 8006fc0:	20000f04 	.word	0x20000f04
 8006fc4:	20000b2d 	.word	0x20000b2d
 8006fc8:	20000ac8 	.word	0x20000ac8

08006fcc <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0

	int mode = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	487a      	ldr	r0, [pc, #488]	; (80071c4 <sample_course_run+0x1f8>)
 8006fda:	f005 fa3d 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b2d8      	uxtb	r0, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	b2d9      	uxtb	r1, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f004 fc5d 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 8007002:	4b71      	ldr	r3, [pc, #452]	; (80071c8 <sample_course_run+0x1fc>)
 8007004:	edd3 7a00 	vldr	s15, [r3]
 8007008:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800700c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007014:	db0f      	blt.n	8007036 <sample_course_run+0x6a>
			  mode++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3301      	adds	r3, #1
 800701a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800701c:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <sample_course_run+0x1fc>)
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b07      	cmp	r3, #7
 8007028:	dd01      	ble.n	800702e <sample_course_run+0x62>
				  mode = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4866      	ldr	r0, [pc, #408]	; (80071cc <sample_course_run+0x200>)
 8007032:	f005 fa11 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007036:	4b64      	ldr	r3, [pc, #400]	; (80071c8 <sample_course_run+0x1fc>)
 8007038:	edd3 7a00 	vldr	s15, [r3]
 800703c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007048:	d80f      	bhi.n	800706a <sample_course_run+0x9e>
			  mode--;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3b01      	subs	r3, #1
 800704e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007050:	4b5d      	ldr	r3, [pc, #372]	; (80071c8 <sample_course_run+0x1fc>)
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da01      	bge.n	8007062 <sample_course_run+0x96>
				  mode = 7;
 800705e:	2307      	movs	r3, #7
 8007060:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4859      	ldr	r0, [pc, #356]	; (80071cc <sample_course_run+0x200>)
 8007066:	f005 f9f7 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800706a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800706e:	4858      	ldr	r0, [pc, #352]	; (80071d0 <sample_course_run+0x204>)
 8007070:	f7fb f908 	bl	8002284 <HAL_GPIO_ReadPin>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1b1      	bne.n	8006fde <sample_course_run+0x12>
			  HAL_Delay(50);
 800707a:	2032      	movs	r0, #50	; 0x32
 800707c:	f7f9 ffa6 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007080:	bf00      	nop
 8007082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007086:	4852      	ldr	r0, [pc, #328]	; (80071d0 <sample_course_run+0x204>)
 8007088:	f7fb f8fc 	bl	8002284 <HAL_GPIO_ReadPin>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f7      	beq.n	8007082 <sample_course_run+0xb6>
			  drive_ready();
 8007092:	f7fd fdc7 	bl	8004c24 <drive_ready>

			  switch(mode){
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b07      	cmp	r3, #7
 800709a:	d8a0      	bhi.n	8006fde <sample_course_run+0x12>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <sample_course_run+0xd8>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070c5 	.word	0x080070c5
 80070a8:	080070cb 	.word	0x080070cb
 80070ac:	080070ed 	.word	0x080070ed
 80070b0:	0800710f 	.word	0x0800710f
 80070b4:	08006fdf 	.word	0x08006fdf
 80070b8:	08007121 	.word	0x08007121
 80070bc:	08007171 	.word	0x08007171
 80070c0:	08006fdf 	.word	0x08006fdf
				case 0:
					get_base();
 80070c4:	f004 fba2 	bl	800b80c <get_base>
					break;
 80070c8:	e07a      	b.n	80071c0 <sample_course_run+0x1f4>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 80070ca:	f7fe f955 	bl	8005378 <half_sectionA>
					half_sectionD();
 80070ce:	f7fe f96d 	bl	80053ac <half_sectionD>
					rotate_R90();
 80070d2:	f7fe fa45 	bl	8005560 <rotate_R90>
					half_sectionA();
 80070d6:	f7fe f94f 	bl	8005378 <half_sectionA>
					half_sectionD();
 80070da:	f7fe f967 	bl	80053ac <half_sectionD>
					rotate_R90();
 80070de:	f7fe fa3f 	bl	8005560 <rotate_R90>
					half_sectionA();
 80070e2:	f7fe f949 	bl	8005378 <half_sectionA>
					half_sectionD();
 80070e6:	f7fe f961 	bl	80053ac <half_sectionD>
					break;
 80070ea:	e069      	b.n	80071c0 <sample_course_run+0x1f4>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 80070ec:	f7fe f944 	bl	8005378 <half_sectionA>
					half_sectionD();
 80070f0:	f7fe f95c 	bl	80053ac <half_sectionD>
					rotate_L90();
 80070f4:	f7fe fb00 	bl	80056f8 <rotate_L90>
					half_sectionA();
 80070f8:	f7fe f93e 	bl	8005378 <half_sectionA>
					half_sectionD();
 80070fc:	f7fe f956 	bl	80053ac <half_sectionD>
					rotate_L90();
 8007100:	f7fe fafa 	bl	80056f8 <rotate_L90>
					half_sectionA();
 8007104:	f7fe f938 	bl	8005378 <half_sectionA>
					half_sectionD();
 8007108:	f7fe f950 	bl	80053ac <half_sectionD>
					break;
 800710c:	e058      	b.n	80071c0 <sample_course_run+0x1f4>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800710e:	f7fe f933 	bl	8005378 <half_sectionA>
					slalom_R90();
 8007112:	f7fe fc87 	bl	8005a24 <slalom_R90>
					slalom_R90();
 8007116:	f7fe fc85 	bl	8005a24 <slalom_R90>
					half_sectionD();
 800711a:	f7fe f947 	bl	80053ac <half_sectionD>
					break;
 800711e:	e04f      	b.n	80071c0 <sample_course_run+0x1f4>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8007120:	482c      	ldr	r0, [pc, #176]	; (80071d4 <sample_course_run+0x208>)
 8007122:	f005 fa0d 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 8007126:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <sample_course_run+0x20c>)
 8007128:	8813      	ldrh	r3, [r2, #0]
 800712a:	f36f 1345 	bfc	r3, #5, #1
 800712e:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8007130:	4b2a      	ldr	r3, [pc, #168]	; (80071dc <sample_course_run+0x210>)
 8007132:	2209      	movs	r2, #9
 8007134:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007136:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <sample_course_run+0x214>)
 8007138:	2206      	movs	r2, #6
 800713a:	701a      	strb	r2, [r3, #0]

					get_base();
 800713c:	f004 fb66 	bl	800b80c <get_base>

					searchC();
 8007140:	f002 fd58 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8007144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007148:	f7f9 ff40 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800714c:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <sample_course_run+0x214>)
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	4b23      	ldr	r3, [pc, #140]	; (80071e0 <sample_course_run+0x214>)
 8007154:	781a      	ldrb	r2, [r3, #0]
 8007156:	4b21      	ldr	r3, [pc, #132]	; (80071dc <sample_course_run+0x210>)
 8007158:	701a      	strb	r2, [r3, #0]
					searchE();
 800715a:	f003 f86d 	bl	800a238 <searchE>

					searchC();
 800715e:	f002 fd49 	bl	8009bf4 <searchC>
					goal_x = GOAL_X;
 8007162:	4b1e      	ldr	r3, [pc, #120]	; (80071dc <sample_course_run+0x210>)
 8007164:	2209      	movs	r2, #9
 8007166:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007168:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <sample_course_run+0x214>)
 800716a:	2206      	movs	r2, #6
 800716c:	701a      	strb	r2, [r3, #0]

					break;
 800716e:	e027      	b.n	80071c0 <sample_course_run+0x1f4>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8007170:	4818      	ldr	r0, [pc, #96]	; (80071d4 <sample_course_run+0x208>)
 8007172:	f005 f9e5 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <sample_course_run+0x20c>)
 8007178:	8813      	ldrh	r3, [r2, #0]
 800717a:	f36f 1345 	bfc	r3, #5, #1
 800717e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8007180:	4b16      	ldr	r3, [pc, #88]	; (80071dc <sample_course_run+0x210>)
 8007182:	2207      	movs	r2, #7
 8007184:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007186:	4b16      	ldr	r3, [pc, #88]	; (80071e0 <sample_course_run+0x214>)
 8007188:	2207      	movs	r2, #7
 800718a:	701a      	strb	r2, [r3, #0]

					get_base();
 800718c:	f004 fb3e 	bl	800b80c <get_base>

					searchC();
 8007190:	f002 fd30 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8007194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007198:	f7f9 ff18 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800719c:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <sample_course_run+0x214>)
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <sample_course_run+0x214>)
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <sample_course_run+0x210>)
 80071a8:	701a      	strb	r2, [r3, #0]
					searchE();
 80071aa:	f003 f845 	bl	800a238 <searchE>

					searchC();
 80071ae:	f002 fd21 	bl	8009bf4 <searchC>
					goal_x = 7;
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <sample_course_run+0x210>)
 80071b4:	2207      	movs	r2, #7
 80071b6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80071b8:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <sample_course_run+0x214>)
 80071ba:	2207      	movs	r2, #7
 80071bc:	701a      	strb	r2, [r3, #0]

					break;
 80071be:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80071c0:	e70d      	b.n	8006fde <sample_course_run+0x12>
 80071c2:	bf00      	nop
 80071c4:	0800d87c 	.word	0x0800d87c
 80071c8:	20000a68 	.word	0x20000a68
 80071cc:	0800d6ac 	.word	0x0800d6ac
 80071d0:	40020000 	.word	0x40020000
 80071d4:	0800d89c 	.word	0x0800d89c
 80071d8:	20000ee4 	.word	0x20000ee4
 80071dc:	20000b2d 	.word	0x20000b2d
 80071e0:	20000ac8 	.word	0x20000ac8

080071e4 <perfect_run>:
//perfect_run
// 本番用走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0

	int mode = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4892      	ldr	r0, [pc, #584]	; (800743c <perfect_run+0x258>)
 80071f2:	f005 f931 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	b2d8      	uxtb	r0, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	b2d9      	uxtb	r1, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 0304 	and.w	r3, r3, #4
 8007212:	b2db      	uxtb	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	f004 fb51 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 800721a:	4b89      	ldr	r3, [pc, #548]	; (8007440 <perfect_run+0x25c>)
 800721c:	edd3 7a00 	vldr	s15, [r3]
 8007220:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722c:	db0f      	blt.n	800724e <perfect_run+0x6a>
			  mode++;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3301      	adds	r3, #1
 8007232:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007234:	4b82      	ldr	r3, [pc, #520]	; (8007440 <perfect_run+0x25c>)
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b07      	cmp	r3, #7
 8007240:	dd01      	ble.n	8007246 <perfect_run+0x62>
				  mode = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	487e      	ldr	r0, [pc, #504]	; (8007444 <perfect_run+0x260>)
 800724a:	f005 f905 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800724e:	4b7c      	ldr	r3, [pc, #496]	; (8007440 <perfect_run+0x25c>)
 8007250:	edd3 7a00 	vldr	s15, [r3]
 8007254:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007260:	d80f      	bhi.n	8007282 <perfect_run+0x9e>
			  mode--;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3b01      	subs	r3, #1
 8007266:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007268:	4b75      	ldr	r3, [pc, #468]	; (8007440 <perfect_run+0x25c>)
 800726a:	f04f 0200 	mov.w	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	da01      	bge.n	800727a <perfect_run+0x96>
				  mode = 7;
 8007276:	2307      	movs	r3, #7
 8007278:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4871      	ldr	r0, [pc, #452]	; (8007444 <perfect_run+0x260>)
 800727e:	f005 f8eb 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007286:	4870      	ldr	r0, [pc, #448]	; (8007448 <perfect_run+0x264>)
 8007288:	f7fa fffc 	bl	8002284 <HAL_GPIO_ReadPin>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1b1      	bne.n	80071f6 <perfect_run+0x12>
			  HAL_Delay(50);
 8007292:	2032      	movs	r0, #50	; 0x32
 8007294:	f7f9 fe9a 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007298:	bf00      	nop
 800729a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800729e:	486a      	ldr	r0, [pc, #424]	; (8007448 <perfect_run+0x264>)
 80072a0:	f7fa fff0 	bl	8002284 <HAL_GPIO_ReadPin>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f7      	beq.n	800729a <perfect_run+0xb6>
			  switch(mode){
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b07      	cmp	r3, #7
 80072ae:	d8a2      	bhi.n	80071f6 <perfect_run+0x12>
 80072b0:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <perfect_run+0xd4>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080071f7 	.word	0x080071f7
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	08007325 	.word	0x08007325
 80072c4:	08007371 	.word	0x08007371
 80072c8:	080073bd 	.word	0x080073bd
 80072cc:	080071f7 	.word	0x080071f7
 80072d0:	080071f7 	.word	0x080071f7
 80072d4:	08007409 	.word	0x08007409
				case 0:
					break;

				case 1:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 80072d8:	485c      	ldr	r0, [pc, #368]	; (800744c <perfect_run+0x268>)
 80072da:	f005 f931 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 80072de:	4a5c      	ldr	r2, [pc, #368]	; (8007450 <perfect_run+0x26c>)
 80072e0:	8813      	ldrh	r3, [r2, #0]
 80072e2:	f36f 1345 	bfc	r3, #5, #1
 80072e6:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80072e8:	4b5a      	ldr	r3, [pc, #360]	; (8007454 <perfect_run+0x270>)
 80072ea:	2207      	movs	r2, #7
 80072ec:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80072ee:	4b5a      	ldr	r3, [pc, #360]	; (8007458 <perfect_run+0x274>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	701a      	strb	r2, [r3, #0]

					get_base();
 80072f4:	f004 fa8a 	bl	800b80c <get_base>

					searchB();
 80072f8:	f002 fbf2 	bl	8009ae0 <searchB>
					HAL_Delay(500);
 80072fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007300:	f7f9 fe64 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007304:	4b54      	ldr	r3, [pc, #336]	; (8007458 <perfect_run+0x274>)
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	4b53      	ldr	r3, [pc, #332]	; (8007458 <perfect_run+0x274>)
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	4b51      	ldr	r3, [pc, #324]	; (8007454 <perfect_run+0x270>)
 8007310:	701a      	strb	r2, [r3, #0]
					searchB();
 8007312:	f002 fbe5 	bl	8009ae0 <searchB>

					goal_x = 7;
 8007316:	4b4f      	ldr	r3, [pc, #316]	; (8007454 <perfect_run+0x270>)
 8007318:	2207      	movs	r2, #7
 800731a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800731c:	4b4e      	ldr	r3, [pc, #312]	; (8007458 <perfect_run+0x274>)
 800731e:	2207      	movs	r2, #7
 8007320:	701a      	strb	r2, [r3, #0]

					break;
 8007322:	e089      	b.n	8007438 <perfect_run+0x254>

				case 2:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8007324:	484d      	ldr	r0, [pc, #308]	; (800745c <perfect_run+0x278>)
 8007326:	f005 f90b 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 800732a:	4a49      	ldr	r2, [pc, #292]	; (8007450 <perfect_run+0x26c>)
 800732c:	8813      	ldrh	r3, [r2, #0]
 800732e:	f043 0320 	orr.w	r3, r3, #32
 8007332:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8007334:	4b47      	ldr	r3, [pc, #284]	; (8007454 <perfect_run+0x270>)
 8007336:	2207      	movs	r2, #7
 8007338:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800733a:	4b47      	ldr	r3, [pc, #284]	; (8007458 <perfect_run+0x274>)
 800733c:	2207      	movs	r2, #7
 800733e:	701a      	strb	r2, [r3, #0]

					get_base();
 8007340:	f004 fa64 	bl	800b80c <get_base>

					searchB();
 8007344:	f002 fbcc 	bl	8009ae0 <searchB>
					HAL_Delay(500);
 8007348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800734c:	f7f9 fe3e 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007350:	4b41      	ldr	r3, [pc, #260]	; (8007458 <perfect_run+0x274>)
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	4b40      	ldr	r3, [pc, #256]	; (8007458 <perfect_run+0x274>)
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	4b3e      	ldr	r3, [pc, #248]	; (8007454 <perfect_run+0x270>)
 800735c:	701a      	strb	r2, [r3, #0]
					searchB();
 800735e:	f002 fbbf 	bl	8009ae0 <searchB>

					goal_x = 7;
 8007362:	4b3c      	ldr	r3, [pc, #240]	; (8007454 <perfect_run+0x270>)
 8007364:	2207      	movs	r2, #7
 8007366:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007368:	4b3b      	ldr	r3, [pc, #236]	; (8007458 <perfect_run+0x274>)
 800736a:	2207      	movs	r2, #7
 800736c:	701a      	strb	r2, [r3, #0]

					break;
 800736e:	e063      	b.n	8007438 <perfect_run+0x254>

				case 3:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8007370:	483b      	ldr	r0, [pc, #236]	; (8007460 <perfect_run+0x27c>)
 8007372:	f005 f8e5 	bl	800c540 <puts>

					MF.FLAG.SCND = 0;
 8007376:	4a36      	ldr	r2, [pc, #216]	; (8007450 <perfect_run+0x26c>)
 8007378:	8813      	ldrh	r3, [r2, #0]
 800737a:	f36f 1345 	bfc	r3, #5, #1
 800737e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8007380:	4b34      	ldr	r3, [pc, #208]	; (8007454 <perfect_run+0x270>)
 8007382:	2207      	movs	r2, #7
 8007384:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007386:	4b34      	ldr	r3, [pc, #208]	; (8007458 <perfect_run+0x274>)
 8007388:	2207      	movs	r2, #7
 800738a:	701a      	strb	r2, [r3, #0]

					get_base();
 800738c:	f004 fa3e 	bl	800b80c <get_base>

					searchC();
 8007390:	f002 fc30 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8007394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007398:	f7f9 fe18 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800739c:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <perfect_run+0x274>)
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	4b2d      	ldr	r3, [pc, #180]	; (8007458 <perfect_run+0x274>)
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	4b2b      	ldr	r3, [pc, #172]	; (8007454 <perfect_run+0x270>)
 80073a8:	701a      	strb	r2, [r3, #0]
					searchC();
 80073aa:	f002 fc23 	bl	8009bf4 <searchC>

					goal_x = 7;
 80073ae:	4b29      	ldr	r3, [pc, #164]	; (8007454 <perfect_run+0x270>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80073b4:	4b28      	ldr	r3, [pc, #160]	; (8007458 <perfect_run+0x274>)
 80073b6:	2207      	movs	r2, #7
 80073b8:	701a      	strb	r2, [r3, #0]

					break;
 80073ba:	e03d      	b.n	8007438 <perfect_run+0x254>

				case 4:
					//---二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 80073bc:	4829      	ldr	r0, [pc, #164]	; (8007464 <perfect_run+0x280>)
 80073be:	f005 f8bf 	bl	800c540 <puts>

					MF.FLAG.SCND = 1;
 80073c2:	4a23      	ldr	r2, [pc, #140]	; (8007450 <perfect_run+0x26c>)
 80073c4:	8813      	ldrh	r3, [r2, #0]
 80073c6:	f043 0320 	orr.w	r3, r3, #32
 80073ca:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <perfect_run+0x270>)
 80073ce:	2207      	movs	r2, #7
 80073d0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80073d2:	4b21      	ldr	r3, [pc, #132]	; (8007458 <perfect_run+0x274>)
 80073d4:	2207      	movs	r2, #7
 80073d6:	701a      	strb	r2, [r3, #0]

					get_base();
 80073d8:	f004 fa18 	bl	800b80c <get_base>

					searchC();
 80073dc:	f002 fc0a 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 80073e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073e4:	f7f9 fdf2 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80073e8:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <perfect_run+0x274>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <perfect_run+0x274>)
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	4b18      	ldr	r3, [pc, #96]	; (8007454 <perfect_run+0x270>)
 80073f4:	701a      	strb	r2, [r3, #0]
					searchC();
 80073f6:	f002 fbfd 	bl	8009bf4 <searchC>

					goal_x = 7;
 80073fa:	4b16      	ldr	r3, [pc, #88]	; (8007454 <perfect_run+0x270>)
 80073fc:	2207      	movs	r2, #7
 80073fe:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007400:	4b15      	ldr	r3, [pc, #84]	; (8007458 <perfect_run+0x274>)
 8007402:	2207      	movs	r2, #7
 8007404:	701a      	strb	r2, [r3, #0]

					break;
 8007406:	e017      	b.n	8007438 <perfect_run+0x254>
					break;

				case 6:
					break;
				case 7:
			  		  for(int i=0; i<m_select; i++){
 8007408:	2300      	movs	r3, #0
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	e00e      	b.n	800742c <perfect_run+0x248>
			  			  buzzer(mario_select[i][0], mario_select[i][1]);
 800740e:	4a16      	ldr	r2, [pc, #88]	; (8007468 <perfect_run+0x284>)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007416:	4a14      	ldr	r2, [pc, #80]	; (8007468 <perfect_run+0x284>)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	4413      	add	r3, r2
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4619      	mov	r1, r3
 8007422:	f002 fa4f 	bl	80098c4 <buzzer>
			  		  for(int i=0; i<m_select; i++){
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b01      	cmp	r3, #1
 8007430:	dded      	ble.n	800740e <perfect_run+0x22a>
			  		  }
					perfect_slalom();
 8007432:	f000 f81b 	bl	800746c <perfect_slalom>
					break;
 8007436:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007438:	e6dd      	b.n	80071f6 <perfect_run+0x12>
 800743a:	bf00      	nop
 800743c:	0800d8b8 	.word	0x0800d8b8
 8007440:	20000a68 	.word	0x20000a68
 8007444:	0800d6ac 	.word	0x0800d6ac
 8007448:	40020000 	.word	0x40020000
 800744c:	0800d7cc 	.word	0x0800d7cc
 8007450:	20000ee4 	.word	0x20000ee4
 8007454:	20000b2d 	.word	0x20000b2d
 8007458:	20000ac8 	.word	0x20000ac8
 800745c:	0800d7e4 	.word	0x0800d7e4
 8007460:	0800d818 	.word	0x0800d818
 8007464:	0800d82c 	.word	0x0800d82c
 8007468:	20000040 	.word	0x20000040

0800746c <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0

	int mode = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
	printf("Perfect Slalom, Mode : %d\n", mode);
 8007476:	6979      	ldr	r1, [r7, #20]
 8007478:	48b4      	ldr	r0, [pc, #720]	; (800774c <perfect_slalom+0x2e0>)
 800747a:	f004 ffed 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	b2d8      	uxtb	r0, r3
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	b2d9      	uxtb	r1, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f004 fa0d 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 80074a2:	4bab      	ldr	r3, [pc, #684]	; (8007750 <perfect_slalom+0x2e4>)
 80074a4:	edd3 7a00 	vldr	s15, [r3]
 80074a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80074ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b4:	db24      	blt.n	8007500 <perfect_slalom+0x94>
			  mode++;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	3301      	adds	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80074bc:	4ba4      	ldr	r3, [pc, #656]	; (8007750 <perfect_slalom+0x2e4>)
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b07      	cmp	r3, #7
 80074c8:	dd01      	ble.n	80074ce <perfect_slalom+0x62>
				  mode = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	48a0      	ldr	r0, [pc, #640]	; (8007754 <perfect_slalom+0x2e8>)
 80074d2:	f004 ffc1 	bl	800c458 <iprintf>
	  		  for(int i=0; i<m_select; i++){
 80074d6:	2300      	movs	r3, #0
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e00e      	b.n	80074fa <perfect_slalom+0x8e>
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
 80074dc:	4a9e      	ldr	r2, [pc, #632]	; (8007758 <perfect_slalom+0x2ec>)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80074e4:	4a9c      	ldr	r2, [pc, #624]	; (8007758 <perfect_slalom+0x2ec>)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	4413      	add	r3, r2
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4619      	mov	r1, r3
 80074f0:	f002 f9e8 	bl	80098c4 <buzzer>
	  		  for(int i=0; i<m_select; i++){
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	3301      	adds	r3, #1
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	dded      	ble.n	80074dc <perfect_slalom+0x70>
	  		  }
		  }
		  if(dist_r <= -20){
 8007500:	4b93      	ldr	r3, [pc, #588]	; (8007750 <perfect_slalom+0x2e4>)
 8007502:	edd3 7a00 	vldr	s15, [r3]
 8007506:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800750a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007512:	d824      	bhi.n	800755e <perfect_slalom+0xf2>
			  mode--;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	3b01      	subs	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800751a:	4b8d      	ldr	r3, [pc, #564]	; (8007750 <perfect_slalom+0x2e4>)
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da01      	bge.n	800752c <perfect_slalom+0xc0>
				  mode = 7;
 8007528:	2307      	movs	r3, #7
 800752a:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800752c:	6979      	ldr	r1, [r7, #20]
 800752e:	4889      	ldr	r0, [pc, #548]	; (8007754 <perfect_slalom+0x2e8>)
 8007530:	f004 ff92 	bl	800c458 <iprintf>
	  		  for(int i=0; i<m_select; i++){
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e00e      	b.n	8007558 <perfect_slalom+0xec>
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
 800753a:	4a87      	ldr	r2, [pc, #540]	; (8007758 <perfect_slalom+0x2ec>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007542:	4a85      	ldr	r2, [pc, #532]	; (8007758 <perfect_slalom+0x2ec>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	4413      	add	r3, r2
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4619      	mov	r1, r3
 800754e:	f002 f9b9 	bl	80098c4 <buzzer>
	  		  for(int i=0; i<m_select; i++){
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b01      	cmp	r3, #1
 800755c:	dded      	ble.n	800753a <perfect_slalom+0xce>
	  		  }
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800755e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007562:	487e      	ldr	r0, [pc, #504]	; (800775c <perfect_slalom+0x2f0>)
 8007564:	f7fa fe8e 	bl	8002284 <HAL_GPIO_ReadPin>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d187      	bne.n	800747e <perfect_slalom+0x12>
			  HAL_Delay(50);
 800756e:	2032      	movs	r0, #50	; 0x32
 8007570:	f7f9 fd2c 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007574:	bf00      	nop
 8007576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800757a:	4878      	ldr	r0, [pc, #480]	; (800775c <perfect_slalom+0x2f0>)
 800757c:	f7fa fe82 	bl	8002284 <HAL_GPIO_ReadPin>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0f7      	beq.n	8007576 <perfect_slalom+0x10a>
			  for(int i=0; i<m_ok; i++){
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]
 800758a:	e00e      	b.n	80075aa <perfect_slalom+0x13e>
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
 800758c:	4a74      	ldr	r2, [pc, #464]	; (8007760 <perfect_slalom+0x2f4>)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007594:	4a72      	ldr	r2, [pc, #456]	; (8007760 <perfect_slalom+0x2f4>)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	4619      	mov	r1, r3
 80075a0:	f002 f990 	bl	80098c4 <buzzer>
			  for(int i=0; i<m_ok; i++){
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	dded      	ble.n	800758c <perfect_slalom+0x120>
	  		  }

			  drive_ready();
 80075b0:	f7fd fb38 	bl	8004c24 <drive_ready>
	  		  for(int i=0; i<m_start; i++){
 80075b4:	2300      	movs	r3, #0
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	e011      	b.n	80075de <perfect_slalom+0x172>
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
 80075ba:	4a6a      	ldr	r2, [pc, #424]	; (8007764 <perfect_slalom+0x2f8>)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80075c2:	4a68      	ldr	r2, [pc, #416]	; (8007764 <perfect_slalom+0x2f8>)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4413      	add	r3, r2
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4619      	mov	r1, r3
 80075ce:	f002 f979 	bl	80098c4 <buzzer>
	  			  full_led_write(1);
 80075d2:	2001      	movs	r0, #1
 80075d4:	f004 f9ac 	bl	800b930 <full_led_write>
	  		  for(int i=0; i<m_start; i++){
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3301      	adds	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b06      	cmp	r3, #6
 80075e2:	ddea      	ble.n	80075ba <perfect_slalom+0x14e>
	  		  }

			  switch(mode){
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	f63f af49 	bhi.w	800747e <perfect_slalom+0x12>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <perfect_slalom+0x188>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	0800747f 	.word	0x0800747f
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800766b 	.word	0x0800766b
 8007600:	080076db 	.word	0x080076db
 8007604:	08007789 	.word	0x08007789
 8007608:	080077f9 	.word	0x080077f9
 800760c:	08007859 	.word	0x08007859
 8007610:	080078c9 	.word	0x080078c9
				case 0:
					break;

				case 1:
					//----一次探索スラローム走行----
					printf("First Run.\n");
 8007614:	4854      	ldr	r0, [pc, #336]	; (8007768 <perfect_slalom+0x2fc>)
 8007616:	f004 ff93 	bl	800c540 <puts>
					MF.FLAG.SCND = 0;
 800761a:	4a54      	ldr	r2, [pc, #336]	; (800776c <perfect_slalom+0x300>)
 800761c:	8813      	ldrh	r3, [r2, #0]
 800761e:	f36f 1345 	bfc	r3, #5, #1
 8007622:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8007624:	4a51      	ldr	r2, [pc, #324]	; (800776c <perfect_slalom+0x300>)
 8007626:	8813      	ldrh	r3, [r2, #0]
 8007628:	f36f 2349 	bfc	r3, #9, #1
 800762c:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 800762e:	4b50      	ldr	r3, [pc, #320]	; (8007770 <perfect_slalom+0x304>)
 8007630:	2207      	movs	r2, #7
 8007632:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007634:	4b4f      	ldr	r3, [pc, #316]	; (8007774 <perfect_slalom+0x308>)
 8007636:	2207      	movs	r2, #7
 8007638:	701a      	strb	r2, [r3, #0]

					get_base();
 800763a:	f004 f8e7 	bl	800b80c <get_base>

					searchC();
 800763e:	f002 fad9 	bl	8009bf4 <searchC>
					HAL_Delay(500);
 8007642:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007646:	f7f9 fcc1 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800764a:	4b4a      	ldr	r3, [pc, #296]	; (8007774 <perfect_slalom+0x308>)
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	4b48      	ldr	r3, [pc, #288]	; (8007774 <perfect_slalom+0x308>)
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	4b46      	ldr	r3, [pc, #280]	; (8007770 <perfect_slalom+0x304>)
 8007656:	701a      	strb	r2, [r3, #0]
					searchC();
 8007658:	f002 facc 	bl	8009bf4 <searchC>

					goal_x = 7;
 800765c:	4b44      	ldr	r3, [pc, #272]	; (8007770 <perfect_slalom+0x304>)
 800765e:	2207      	movs	r2, #7
 8007660:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007662:	4b44      	ldr	r3, [pc, #272]	; (8007774 <perfect_slalom+0x308>)
 8007664:	2207      	movs	r2, #7
 8007666:	701a      	strb	r2, [r3, #0]
					break;
 8007668:	e166      	b.n	8007938 <perfect_slalom+0x4cc>

				case 2:
					//----二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800766a:	4843      	ldr	r0, [pc, #268]	; (8007778 <perfect_slalom+0x30c>)
 800766c:	f004 ff68 	bl	800c540 <puts>
					MF.FLAG.SCND = 1;
 8007670:	4a3e      	ldr	r2, [pc, #248]	; (800776c <perfect_slalom+0x300>)
 8007672:	8813      	ldrh	r3, [r2, #0]
 8007674:	f043 0320 	orr.w	r3, r3, #32
 8007678:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800767a:	4a3c      	ldr	r2, [pc, #240]	; (800776c <perfect_slalom+0x300>)
 800767c:	8813      	ldrh	r3, [r2, #0]
 800767e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007682:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8007684:	4a39      	ldr	r2, [pc, #228]	; (800776c <perfect_slalom+0x300>)
 8007686:	8813      	ldrh	r3, [r2, #0]
 8007688:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800768c:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800768e:	4b3b      	ldr	r3, [pc, #236]	; (800777c <perfect_slalom+0x310>)
 8007690:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007694:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8007696:	4b3a      	ldr	r3, [pc, #232]	; (8007780 <perfect_slalom+0x314>)
 8007698:	f44f 7216 	mov.w	r2, #600	; 0x258
 800769c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800769e:	4b34      	ldr	r3, [pc, #208]	; (8007770 <perfect_slalom+0x304>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80076a4:	4b33      	ldr	r3, [pc, #204]	; (8007774 <perfect_slalom+0x308>)
 80076a6:	2207      	movs	r2, #7
 80076a8:	701a      	strb	r2, [r3, #0]

					get_base();
 80076aa:	f004 f8af 	bl	800b80c <get_base>

					searchD();
 80076ae:	f002 fbf3 	bl	8009e98 <searchD>
					HAL_Delay(500);
 80076b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076b6:	f7f9 fc89 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80076ba:	4b2e      	ldr	r3, [pc, #184]	; (8007774 <perfect_slalom+0x308>)
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	4b2c      	ldr	r3, [pc, #176]	; (8007774 <perfect_slalom+0x308>)
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	4b2a      	ldr	r3, [pc, #168]	; (8007770 <perfect_slalom+0x304>)
 80076c6:	701a      	strb	r2, [r3, #0]
					searchD();
 80076c8:	f002 fbe6 	bl	8009e98 <searchD>

					goal_x = 7;
 80076cc:	4b28      	ldr	r3, [pc, #160]	; (8007770 <perfect_slalom+0x304>)
 80076ce:	2207      	movs	r2, #7
 80076d0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80076d2:	4b28      	ldr	r3, [pc, #160]	; (8007774 <perfect_slalom+0x308>)
 80076d4:	2207      	movs	r2, #7
 80076d6:	701a      	strb	r2, [r3, #0]
					break;
 80076d8:	e12e      	b.n	8007938 <perfect_slalom+0x4cc>

				case 3:
					//----二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 80076da:	482a      	ldr	r0, [pc, #168]	; (8007784 <perfect_slalom+0x318>)
 80076dc:	f004 ff30 	bl	800c540 <puts>
					MF.FLAG.SCND = 1;
 80076e0:	4a22      	ldr	r2, [pc, #136]	; (800776c <perfect_slalom+0x300>)
 80076e2:	8813      	ldrh	r3, [r2, #0]
 80076e4:	f043 0320 	orr.w	r3, r3, #32
 80076e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80076ea:	4a20      	ldr	r2, [pc, #128]	; (800776c <perfect_slalom+0x300>)
 80076ec:	8813      	ldrh	r3, [r2, #0]
 80076ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076f2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80076f4:	4a1d      	ldr	r2, [pc, #116]	; (800776c <perfect_slalom+0x300>)
 80076f6:	8813      	ldrh	r3, [r2, #0]
 80076f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076fc:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80076fe:	4b1f      	ldr	r3, [pc, #124]	; (800777c <perfect_slalom+0x310>)
 8007700:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007704:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8007706:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <perfect_slalom+0x314>)
 8007708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800770c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800770e:	4b18      	ldr	r3, [pc, #96]	; (8007770 <perfect_slalom+0x304>)
 8007710:	2207      	movs	r2, #7
 8007712:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007714:	4b17      	ldr	r3, [pc, #92]	; (8007774 <perfect_slalom+0x308>)
 8007716:	2207      	movs	r2, #7
 8007718:	701a      	strb	r2, [r3, #0]

					get_base();
 800771a:	f004 f877 	bl	800b80c <get_base>

					searchD();
 800771e:	f002 fbbb 	bl	8009e98 <searchD>
					HAL_Delay(500);
 8007722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007726:	f7f9 fc51 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <perfect_slalom+0x308>)
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <perfect_slalom+0x308>)
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <perfect_slalom+0x304>)
 8007736:	701a      	strb	r2, [r3, #0]
					searchD();
 8007738:	f002 fbae 	bl	8009e98 <searchD>

					goal_x = 7;
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <perfect_slalom+0x304>)
 800773e:	2207      	movs	r2, #7
 8007740:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <perfect_slalom+0x308>)
 8007744:	2207      	movs	r2, #7
 8007746:	701a      	strb	r2, [r3, #0]
					break;
 8007748:	e0f6      	b.n	8007938 <perfect_slalom+0x4cc>
 800774a:	bf00      	nop
 800774c:	0800d8d0 	.word	0x0800d8d0
 8007750:	20000a68 	.word	0x20000a68
 8007754:	0800d6ac 	.word	0x0800d6ac
 8007758:	20000040 	.word	0x20000040
 800775c:	40020000 	.word	0x40020000
 8007760:	20000050 	.word	0x20000050
 8007764:	20000008 	.word	0x20000008
 8007768:	0800d7c0 	.word	0x0800d7c0
 800776c:	20000ee4 	.word	0x20000ee4
 8007770:	20000b2d 	.word	0x20000b2d
 8007774:	20000ac8 	.word	0x20000ac8
 8007778:	0800d7cc 	.word	0x0800d7cc
 800777c:	200003d0 	.word	0x200003d0
 8007780:	20000ef8 	.word	0x20000ef8
 8007784:	0800d7e4 	.word	0x0800d7e4

				case 4:
					//----二次探索スラローム+既知区間加速走行 speed3----
					printf("First Run. (Slalom)\n");
 8007788:	486c      	ldr	r0, [pc, #432]	; (800793c <perfect_slalom+0x4d0>)
 800778a:	f004 fed9 	bl	800c540 <puts>
					MF.FLAG.SCND = 1;
 800778e:	4a6c      	ldr	r2, [pc, #432]	; (8007940 <perfect_slalom+0x4d4>)
 8007790:	8813      	ldrh	r3, [r2, #0]
 8007792:	f043 0320 	orr.w	r3, r3, #32
 8007796:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007798:	4a69      	ldr	r2, [pc, #420]	; (8007940 <perfect_slalom+0x4d4>)
 800779a:	8813      	ldrh	r3, [r2, #0]
 800779c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80077a2:	4a67      	ldr	r2, [pc, #412]	; (8007940 <perfect_slalom+0x4d4>)
 80077a4:	8813      	ldrh	r3, [r2, #0]
 80077a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077aa:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80077ac:	4b65      	ldr	r3, [pc, #404]	; (8007944 <perfect_slalom+0x4d8>)
 80077ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80077b2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 80077b4:	4b64      	ldr	r3, [pc, #400]	; (8007948 <perfect_slalom+0x4dc>)
 80077b6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80077ba:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80077bc:	4b63      	ldr	r3, [pc, #396]	; (800794c <perfect_slalom+0x4e0>)
 80077be:	2207      	movs	r2, #7
 80077c0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80077c2:	4b63      	ldr	r3, [pc, #396]	; (8007950 <perfect_slalom+0x4e4>)
 80077c4:	2207      	movs	r2, #7
 80077c6:	701a      	strb	r2, [r3, #0]

					get_base();
 80077c8:	f004 f820 	bl	800b80c <get_base>

					searchD();
 80077cc:	f002 fb64 	bl	8009e98 <searchD>
					HAL_Delay(500);
 80077d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077d4:	f7f9 fbfa 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80077d8:	4b5d      	ldr	r3, [pc, #372]	; (8007950 <perfect_slalom+0x4e4>)
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	4b5c      	ldr	r3, [pc, #368]	; (8007950 <perfect_slalom+0x4e4>)
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	4b5a      	ldr	r3, [pc, #360]	; (800794c <perfect_slalom+0x4e0>)
 80077e4:	701a      	strb	r2, [r3, #0]
					searchD();
 80077e6:	f002 fb57 	bl	8009e98 <searchD>

					goal_x = 7;
 80077ea:	4b58      	ldr	r3, [pc, #352]	; (800794c <perfect_slalom+0x4e0>)
 80077ec:	2207      	movs	r2, #7
 80077ee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80077f0:	4b57      	ldr	r3, [pc, #348]	; (8007950 <perfect_slalom+0x4e4>)
 80077f2:	2207      	movs	r2, #7
 80077f4:	701a      	strb	r2, [r3, #0]
					break;
 80077f6:	e09f      	b.n	8007938 <perfect_slalom+0x4cc>

				case 5:
					//----二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 80077f8:	4856      	ldr	r0, [pc, #344]	; (8007954 <perfect_slalom+0x4e8>)
 80077fa:	f004 fea1 	bl	800c540 <puts>
					MF.FLAG.SCND = 1;
 80077fe:	4a50      	ldr	r2, [pc, #320]	; (8007940 <perfect_slalom+0x4d4>)
 8007800:	8813      	ldrh	r3, [r2, #0]
 8007802:	f043 0320 	orr.w	r3, r3, #32
 8007806:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8007808:	4a4d      	ldr	r2, [pc, #308]	; (8007940 <perfect_slalom+0x4d4>)
 800780a:	8813      	ldrh	r3, [r2, #0]
 800780c:	f36f 2349 	bfc	r3, #9, #1
 8007810:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8007812:	4a4b      	ldr	r2, [pc, #300]	; (8007940 <perfect_slalom+0x4d4>)
 8007814:	8813      	ldrh	r3, [r2, #0]
 8007816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800781a:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 800781c:	4b4b      	ldr	r3, [pc, #300]	; (800794c <perfect_slalom+0x4e0>)
 800781e:	2207      	movs	r2, #7
 8007820:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007822:	4b4b      	ldr	r3, [pc, #300]	; (8007950 <perfect_slalom+0x4e4>)
 8007824:	2207      	movs	r2, #7
 8007826:	701a      	strb	r2, [r3, #0]

					get_base();
 8007828:	f003 fff0 	bl	800b80c <get_base>

					searchC2();
 800782c:	f002 fa8e 	bl	8009d4c <searchC2>
					HAL_Delay(500);
 8007830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007834:	f7f9 fbca 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007838:	4b45      	ldr	r3, [pc, #276]	; (8007950 <perfect_slalom+0x4e4>)
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	4b44      	ldr	r3, [pc, #272]	; (8007950 <perfect_slalom+0x4e4>)
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	4b42      	ldr	r3, [pc, #264]	; (800794c <perfect_slalom+0x4e0>)
 8007844:	701a      	strb	r2, [r3, #0]
					searchC2();
 8007846:	f002 fa81 	bl	8009d4c <searchC2>

					goal_x = 7;
 800784a:	4b40      	ldr	r3, [pc, #256]	; (800794c <perfect_slalom+0x4e0>)
 800784c:	2207      	movs	r2, #7
 800784e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007850:	4b3f      	ldr	r3, [pc, #252]	; (8007950 <perfect_slalom+0x4e4>)
 8007852:	2207      	movs	r2, #7
 8007854:	701a      	strb	r2, [r3, #0]
					break;
 8007856:	e06f      	b.n	8007938 <perfect_slalom+0x4cc>

				case 6:
					//----二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 8007858:	483e      	ldr	r0, [pc, #248]	; (8007954 <perfect_slalom+0x4e8>)
 800785a:	f004 fe71 	bl	800c540 <puts>
					MF.FLAG.SCND = 1;
 800785e:	4a38      	ldr	r2, [pc, #224]	; (8007940 <perfect_slalom+0x4d4>)
 8007860:	8813      	ldrh	r3, [r2, #0]
 8007862:	f043 0320 	orr.w	r3, r3, #32
 8007866:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007868:	4a35      	ldr	r2, [pc, #212]	; (8007940 <perfect_slalom+0x4d4>)
 800786a:	8813      	ldrh	r3, [r2, #0]
 800786c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007870:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8007872:	4a33      	ldr	r2, [pc, #204]	; (8007940 <perfect_slalom+0x4d4>)
 8007874:	8813      	ldrh	r3, [r2, #0]
 8007876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800787a:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800787c:	4b31      	ldr	r3, [pc, #196]	; (8007944 <perfect_slalom+0x4d8>)
 800787e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007882:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8007884:	4b30      	ldr	r3, [pc, #192]	; (8007948 <perfect_slalom+0x4dc>)
 8007886:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800788a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800788c:	4b2f      	ldr	r3, [pc, #188]	; (800794c <perfect_slalom+0x4e0>)
 800788e:	2207      	movs	r2, #7
 8007890:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007892:	4b2f      	ldr	r3, [pc, #188]	; (8007950 <perfect_slalom+0x4e4>)
 8007894:	2207      	movs	r2, #7
 8007896:	701a      	strb	r2, [r3, #0]

					get_base();
 8007898:	f003 ffb8 	bl	800b80c <get_base>

					searchD2();
 800789c:	f002 fbe4 	bl	800a068 <searchD2>
					HAL_Delay(500);
 80078a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078a4:	f7f9 fb92 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80078a8:	4b29      	ldr	r3, [pc, #164]	; (8007950 <perfect_slalom+0x4e4>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	4b28      	ldr	r3, [pc, #160]	; (8007950 <perfect_slalom+0x4e4>)
 80078b0:	781a      	ldrb	r2, [r3, #0]
 80078b2:	4b26      	ldr	r3, [pc, #152]	; (800794c <perfect_slalom+0x4e0>)
 80078b4:	701a      	strb	r2, [r3, #0]
					searchD2();
 80078b6:	f002 fbd7 	bl	800a068 <searchD2>

					goal_x = 7;
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <perfect_slalom+0x4e0>)
 80078bc:	2207      	movs	r2, #7
 80078be:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80078c0:	4b23      	ldr	r3, [pc, #140]	; (8007950 <perfect_slalom+0x4e4>)
 80078c2:	2207      	movs	r2, #7
 80078c4:	701a      	strb	r2, [r3, #0]
					break;
 80078c6:	e037      	b.n	8007938 <perfect_slalom+0x4cc>

				case 7:
					//----二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 80078c8:	4822      	ldr	r0, [pc, #136]	; (8007954 <perfect_slalom+0x4e8>)
 80078ca:	f004 fe39 	bl	800c540 <puts>
					MF.FLAG.SCND = 1;
 80078ce:	4a1c      	ldr	r2, [pc, #112]	; (8007940 <perfect_slalom+0x4d4>)
 80078d0:	8813      	ldrh	r3, [r2, #0]
 80078d2:	f043 0320 	orr.w	r3, r3, #32
 80078d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <perfect_slalom+0x4d4>)
 80078da:	8813      	ldrh	r3, [r2, #0]
 80078dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80078e2:	4a17      	ldr	r2, [pc, #92]	; (8007940 <perfect_slalom+0x4d4>)
 80078e4:	8813      	ldrh	r3, [r2, #0]
 80078e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078ea:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <perfect_slalom+0x4d8>)
 80078ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80078f2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 80078f4:	4b14      	ldr	r3, [pc, #80]	; (8007948 <perfect_slalom+0x4dc>)
 80078f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80078fa:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80078fc:	4b13      	ldr	r3, [pc, #76]	; (800794c <perfect_slalom+0x4e0>)
 80078fe:	2207      	movs	r2, #7
 8007900:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007902:	4b13      	ldr	r3, [pc, #76]	; (8007950 <perfect_slalom+0x4e4>)
 8007904:	2207      	movs	r2, #7
 8007906:	701a      	strb	r2, [r3, #0]

					get_base();
 8007908:	f003 ff80 	bl	800b80c <get_base>

					searchD2();
 800790c:	f002 fbac 	bl	800a068 <searchD2>
					HAL_Delay(500);
 8007910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007914:	f7f9 fb5a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007918:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <perfect_slalom+0x4e4>)
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <perfect_slalom+0x4e4>)
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <perfect_slalom+0x4e0>)
 8007924:	701a      	strb	r2, [r3, #0]
					searchD2();
 8007926:	f002 fb9f 	bl	800a068 <searchD2>

					goal_x = 7;
 800792a:	4b08      	ldr	r3, [pc, #32]	; (800794c <perfect_slalom+0x4e0>)
 800792c:	2207      	movs	r2, #7
 800792e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <perfect_slalom+0x4e4>)
 8007932:	2207      	movs	r2, #7
 8007934:	701a      	strb	r2, [r3, #0]
					break;
 8007936:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007938:	e5a1      	b.n	800747e <perfect_slalom+0x12>
 800793a:	bf00      	nop
 800793c:	0800d818 	.word	0x0800d818
 8007940:	20000ee4 	.word	0x20000ee4
 8007944:	200003d0 	.word	0x200003d0
 8007948:	20000ef8 	.word	0x20000ef8
 800794c:	20000b2d 	.word	0x20000b2d
 8007950:	20000ac8 	.word	0x20000ac8
 8007954:	0800d82c 	.word	0x0800d82c

08007958 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 8007966:	230b      	movs	r3, #11
 8007968:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800796e:	2302      	movs	r3, #2
 8007970:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 8007972:	f7fa f86d 	bl	8001a50 <HAL_FLASH_Unlock>
 8007976:	4603      	mov	r3, r0
 8007978:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800797a:	7ffb      	ldrb	r3, [r7, #31]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <eeprom_enable_write+0x2c>
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	e009      	b.n	8007998 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8007984:	1d3a      	adds	r2, r7, #4
 8007986:	f107 0308 	add.w	r3, r7, #8
 800798a:	4611      	mov	r1, r2
 800798c:	4618      	mov	r0, r3
 800798e:	f7fa f9bd 	bl	8001d0c <HAL_FLASHEx_Erase>
 8007992:	4603      	mov	r3, r0
 8007994:	77fb      	strb	r3, [r7, #31]
  return status;
 8007996:	7ffb      	ldrb	r3, [r7, #31]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 80079a4:	f7fa f876 	bl	8001a94 <HAL_FLASH_Lock>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	bd80      	pop	{r7, pc}

080079ae <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 80079ae:	b590      	push	{r4, r7, lr}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80079c0:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 80079c8:	887b      	ldrh	r3, [r7, #2]
 80079ca:	f04f 0400 	mov.w	r4, #0
 80079ce:	461a      	mov	r2, r3
 80079d0:	4623      	mov	r3, r4
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	2001      	movs	r0, #1
 80079d6:	f7f9 ffe7 	bl	80019a8 <HAL_FLASH_Program>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd90      	pop	{r4, r7, pc}

080079e8 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80079fa:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	81fb      	strh	r3, [r7, #14]
  return val;
 8007a08:	89fb      	ldrh	r3, [r7, #14]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 8007a1e:	2064      	movs	r0, #100	; 0x64
 8007a20:	f7f9 fad4 	bl	8000fcc <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 8007a24:	2075      	movs	r0, #117	; 0x75
 8007a26:	f000 f82f 	bl	8007a88 <read_byte>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	4619      	mov	r1, r3
 8007a32:	4813      	ldr	r0, [pc, #76]	; (8007a80 <gyro_init+0x68>)
 8007a34:	f004 fd10 	bl	800c458 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	2b98      	cmp	r3, #152	; 0x98
 8007a3c:	d003      	beq.n	8007a46 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 8007a3e:	4811      	ldr	r0, [pc, #68]	; (8007a84 <gyro_init+0x6c>)
 8007a40:	f004 fd0a 	bl	800c458 <iprintf>
 8007a44:	e7fb      	b.n	8007a3e <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 8007a46:	2032      	movs	r0, #50	; 0x32
 8007a48:	f7f9 fac0 	bl	8000fcc <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	206b      	movs	r0, #107	; 0x6b
 8007a50:	f000 f846 	bl	8007ae0 <write_byte>

  HAL_Delay(50);
 8007a54:	2032      	movs	r0, #50	; 0x32
 8007a56:	f7f9 fab9 	bl	8000fcc <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	201a      	movs	r0, #26
 8007a5e:	f000 f83f 	bl	8007ae0 <write_byte>

  HAL_Delay(50);
 8007a62:	2032      	movs	r0, #50	; 0x32
 8007a64:	f7f9 fab2 	bl	8000fcc <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 8007a68:	2118      	movs	r1, #24
 8007a6a:	201b      	movs	r0, #27
 8007a6c:	f000 f838 	bl	8007ae0 <write_byte>

  HAL_Delay(50);
 8007a70:	2032      	movs	r0, #50	; 0x32
 8007a72:	f7f9 faab 	bl	8000fcc <HAL_Delay>
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800d8ec 	.word	0x0800d8ec
 8007a84:	0800d8f4 	.word	0x0800d8f4

08007a88 <read_byte>:


uint8_t read_byte(uint8_t reg){
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 8007a92:	2200      	movs	r2, #0
 8007a94:	2104      	movs	r1, #4
 8007a96:	4810      	ldr	r0, [pc, #64]	; (8007ad8 <read_byte+0x50>)
 8007a98:	f7fa fc0c 	bl	80022b4 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8007aa6:	f107 010f 	add.w	r1, r7, #15
 8007aaa:	2364      	movs	r3, #100	; 0x64
 8007aac:	2201      	movs	r2, #1
 8007aae:	480b      	ldr	r0, [pc, #44]	; (8007adc <read_byte+0x54>)
 8007ab0:	f7fb f888 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 8007ab4:	f107 010e 	add.w	r1, r7, #14
 8007ab8:	2364      	movs	r3, #100	; 0x64
 8007aba:	2201      	movs	r2, #1
 8007abc:	4807      	ldr	r0, [pc, #28]	; (8007adc <read_byte+0x54>)
 8007abe:	f7fb f9b5 	bl	8002e2c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2104      	movs	r1, #4
 8007ac6:	4804      	ldr	r0, [pc, #16]	; (8007ad8 <read_byte+0x50>)
 8007ac8:	f7fa fbf4 	bl	80022b4 <HAL_GPIO_WritePin>
  return val;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40020c00 	.word	0x40020c00
 8007adc:	200001c4 	.word	0x200001c4

08007ae0 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	460a      	mov	r2, r1
 8007aea:	71fb      	strb	r3, [r7, #7]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 8007afa:	2200      	movs	r2, #0
 8007afc:	2104      	movs	r1, #4
 8007afe:	480c      	ldr	r0, [pc, #48]	; (8007b30 <write_byte+0x50>)
 8007b00:	f7fa fbd8 	bl	80022b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8007b04:	f107 010f 	add.w	r1, r7, #15
 8007b08:	2364      	movs	r3, #100	; 0x64
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	4809      	ldr	r0, [pc, #36]	; (8007b34 <write_byte+0x54>)
 8007b0e:	f7fb f859 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 8007b12:	1db9      	adds	r1, r7, #6
 8007b14:	2364      	movs	r3, #100	; 0x64
 8007b16:	2201      	movs	r2, #1
 8007b18:	4806      	ldr	r0, [pc, #24]	; (8007b34 <write_byte+0x54>)
 8007b1a:	f7fb f853 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 8007b1e:	2201      	movs	r2, #1
 8007b20:	2104      	movs	r1, #4
 8007b22:	4803      	ldr	r0, [pc, #12]	; (8007b30 <write_byte+0x50>)
 8007b24:	f7fa fbc6 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40020c00 	.word	0x40020c00
 8007b34:	200001c4 	.word	0x200001c4

08007b38 <accel_read_x>:


float accel_read_x(void){
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 8007b3e:	203b      	movs	r0, #59	; 0x3b
 8007b40:	f7ff ffa2 	bl	8007a88 <read_byte>
 8007b44:	4603      	mov	r3, r0
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	b21c      	sxth	r4, r3
 8007b4a:	203c      	movs	r0, #60	; 0x3c
 8007b4c:	f7ff ff9c 	bl	8007a88 <read_byte>
 8007b50:	4603      	mov	r3, r0
 8007b52:	b21b      	sxth	r3, r3
 8007b54:	4323      	orrs	r3, r4
 8007b56:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 8007b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da01      	bge.n	8007b64 <accel_read_x+0x2c>
 8007b60:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007b64:	12db      	asrs	r3, r3, #11
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	ee07 3a90 	vmov	s15, r3
 8007b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b70:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	ee07 3a90 	vmov	s15, r3
}
 8007b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd90      	pop	{r4, r7, pc}

08007b84 <accel_read_y>:


float accel_read_y(void){
 8007b84:	b590      	push	{r4, r7, lr}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 8007b8a:	203d      	movs	r0, #61	; 0x3d
 8007b8c:	f7ff ff7c 	bl	8007a88 <read_byte>
 8007b90:	4603      	mov	r3, r0
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	b21c      	sxth	r4, r3
 8007b96:	203e      	movs	r0, #62	; 0x3e
 8007b98:	f7ff ff76 	bl	8007a88 <read_byte>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	4323      	orrs	r3, r4
 8007ba2:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 8007ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	da01      	bge.n	8007bb0 <accel_read_y+0x2c>
 8007bac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007bb0:	12db      	asrs	r3, r3, #11
 8007bb2:	b21b      	sxth	r3, r3
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bbc:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	ee07 3a90 	vmov	s15, r3
}
 8007bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd90      	pop	{r4, r7, pc}

08007bd0 <accel_read_z>:


float accel_read_z(void){
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 8007bd6:	203f      	movs	r0, #63	; 0x3f
 8007bd8:	f7ff ff56 	bl	8007a88 <read_byte>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	b21c      	sxth	r4, r3
 8007be2:	2040      	movs	r0, #64	; 0x40
 8007be4:	f7ff ff50 	bl	8007a88 <read_byte>
 8007be8:	4603      	mov	r3, r0
 8007bea:	b21b      	sxth	r3, r3
 8007bec:	4323      	orrs	r3, r4
 8007bee:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 8007bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da01      	bge.n	8007bfc <accel_read_z+0x2c>
 8007bf8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007bfc:	12db      	asrs	r3, r3, #11
 8007bfe:	b21b      	sxth	r3, r3
 8007c00:	3b07      	subs	r3, #7
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c0a:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	ee07 3a90 	vmov	s15, r3
}
 8007c14:	eeb0 0a67 	vmov.f32	s0, s15
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd90      	pop	{r4, r7, pc}
	...

08007c20 <gyro_read_x>:


float gyro_read_x(void){
 8007c20:	b590      	push	{r4, r7, lr}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 8007c26:	2043      	movs	r0, #67	; 0x43
 8007c28:	f7ff ff2e 	bl	8007a88 <read_byte>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	b21c      	sxth	r4, r3
 8007c32:	2044      	movs	r0, #68	; 0x44
 8007c34:	f7ff ff28 	bl	8007a88 <read_byte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	4323      	orrs	r3, r4
 8007c3e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 8007c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7f8 fc65 	bl	8000514 <__aeabi_i2d>
 8007c4a:	a30f      	add	r3, pc, #60	; (adr r3, 8007c88 <gyro_read_x+0x68>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fdf4 	bl	800083c <__aeabi_ddiv>
 8007c54:	4603      	mov	r3, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	a30c      	add	r3, pc, #48	; (adr r3, 8007c90 <gyro_read_x+0x70>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fb0b 	bl	800027c <__adddf3>
 8007c66:	4603      	mov	r3, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f7f8 ff6b 	bl	8000b48 <__aeabi_d2f>
 8007c72:	4603      	mov	r3, r0
 8007c74:	603b      	str	r3, [r7, #0]
  return omega;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	ee07 3a90 	vmov	s15, r3
}
 8007c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd90      	pop	{r4, r7, pc}
 8007c86:	bf00      	nop
 8007c88:	66666666 	.word	0x66666666
 8007c8c:	40306666 	.word	0x40306666
 8007c90:	66666666 	.word	0x66666666
 8007c94:	3ff66666 	.word	0x3ff66666

08007c98 <gyro_read_y>:


float gyro_read_y(void){
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 8007c9e:	2045      	movs	r0, #69	; 0x45
 8007ca0:	f7ff fef2 	bl	8007a88 <read_byte>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	b21c      	sxth	r4, r3
 8007caa:	2046      	movs	r0, #70	; 0x46
 8007cac:	f7ff feec 	bl	8007a88 <read_byte>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	4323      	orrs	r3, r4
 8007cb6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 8007cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f8 fc29 	bl	8000514 <__aeabi_i2d>
 8007cc2:	a310      	add	r3, pc, #64	; (adr r3, 8007d04 <gyro_read_y+0x6c>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fdb8 	bl	800083c <__aeabi_ddiv>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <gyro_read_y+0x68>)
 8007cda:	f7f8 facd 	bl	8000278 <__aeabi_dsub>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f7f8 ff2f 	bl	8000b48 <__aeabi_d2f>
 8007cea:	4603      	mov	r3, r0
 8007cec:	603b      	str	r3, [r7, #0]
  return omega;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	ee07 3a90 	vmov	s15, r3
}
 8007cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd90      	pop	{r4, r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	3fe80000 	.word	0x3fe80000
 8007d04:	66666666 	.word	0x66666666
 8007d08:	40306666 	.word	0x40306666
 8007d0c:	00000000 	.word	0x00000000

08007d10 <gyro_read_z>:


float gyro_read_z(void){
 8007d10:	b5b0      	push	{r4, r5, r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 8007d16:	2047      	movs	r0, #71	; 0x47
 8007d18:	f7ff feb6 	bl	8007a88 <read_byte>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	b21c      	sxth	r4, r3
 8007d22:	2048      	movs	r0, #72	; 0x48
 8007d24:	f7ff feb0 	bl	8007a88 <read_byte>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	4323      	orrs	r3, r4
 8007d2e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 8007d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7f8 fbed 	bl	8000514 <__aeabi_i2d>
 8007d3a:	a314      	add	r3, pc, #80	; (adr r3, 8007d8c <gyro_read_z+0x7c>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fd7c 	bl	800083c <__aeabi_ddiv>
 8007d44:	4603      	mov	r3, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	4625      	mov	r5, r4
 8007d4a:	461c      	mov	r4, r3
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <gyro_read_z+0x78>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7f8 fbf1 	bl	8000538 <__aeabi_f2d>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f7f8 fa8b 	bl	8000278 <__aeabi_dsub>
 8007d62:	4603      	mov	r3, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	4618      	mov	r0, r3
 8007d68:	4621      	mov	r1, r4
 8007d6a:	f7f8 feed 	bl	8000b48 <__aeabi_d2f>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	603b      	str	r3, [r7, #0]
  return omega;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	ee07 3a90 	vmov	s15, r3
}
 8007d78:	eeb0 0a67 	vmov.f32	s0, s15
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdb0      	pop	{r4, r5, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	f3af 8000 	nop.w
 8007d88:	20000b70 	.word	0x20000b70
 8007d8c:	66666666 	.word	0x66666666
 8007d90:	40306666 	.word	0x40306666

08007d94 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b0a      	cmp	r3, #10
 8007da0:	d108      	bne.n	8007db4 <__io_putchar+0x20>
    int _c = '\r';
 8007da2:	230d      	movs	r3, #13
 8007da4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8007da6:	f107 010c 	add.w	r1, r7, #12
 8007daa:	2301      	movs	r3, #1
 8007dac:	2201      	movs	r2, #1
 8007dae:	4807      	ldr	r0, [pc, #28]	; (8007dcc <__io_putchar+0x38>)
 8007db0:	f7fc fc3f 	bl	8004632 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8007db4:	1d39      	adds	r1, r7, #4
 8007db6:	2301      	movs	r3, #1
 8007db8:	2201      	movs	r2, #1
 8007dba:	4804      	ldr	r0, [pc, #16]	; (8007dcc <__io_putchar+0x38>)
 8007dbc:	f7fc fc39 	bl	8004632 <HAL_UART_Transmit>
  return 0;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000ae0 	.word	0x20000ae0

08007dd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b5b0      	push	{r4, r5, r7, lr}
 8007dd2:	ed2d 8b02 	vpush	{d8}
 8007dd6:	b08c      	sub	sp, #48	; 0x30
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ddc:	2360      	movs	r3, #96	; 0x60
 8007dde:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4ab5      	ldr	r2, [pc, #724]	; (80080c0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	f041 8060 	bne.w	8008eb2 <HAL_TIM_PeriodElapsedCallback+0x10e2>
		cnt_l = TIM4 -> CNT;
 8007df2:	4bb4      	ldr	r3, [pc, #720]	; (80080c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	4bb2      	ldr	r3, [pc, #712]	; (80080c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007e00:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 8007e04:	4bb1      	ldr	r3, [pc, #708]	; (80080cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e10:	4baf      	ldr	r3, [pc, #700]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007e12:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 8007e16:	4bac      	ldr	r3, [pc, #688]	; (80080c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007e18:	edd3 7a00 	vldr	s15, [r3]
 8007e1c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80080d4 <HAL_TIM_PeriodElapsedCallback+0x304>
 8007e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e28:	dd09      	ble.n	8007e3e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8007e2a:	4ba7      	ldr	r3, [pc, #668]	; (80080c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007e2c:	edd3 7a00 	vldr	s15, [r3]
 8007e30:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80080d8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8007e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e38:	4ba3      	ldr	r3, [pc, #652]	; (80080c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007e3a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 8007e3e:	4ba4      	ldr	r3, [pc, #656]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007e40:	edd3 7a00 	vldr	s15, [r3]
 8007e44:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80080d4 <HAL_TIM_PeriodElapsedCallback+0x304>
 8007e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e50:	dd09      	ble.n	8007e66 <HAL_TIM_PeriodElapsedCallback+0x96>
 8007e52:	4b9f      	ldr	r3, [pc, #636]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007e54:	edd3 7a00 	vldr	s15, [r3]
 8007e58:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80080d8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8007e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e60:	4b9b      	ldr	r3, [pc, #620]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007e62:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//回転方向合わせ
 8007e66:	4b9a      	ldr	r3, [pc, #616]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007e68:	edd3 7a00 	vldr	s15, [r3]
 8007e6c:	eef1 7a67 	vneg.f32	s15, s15
 8007e70:	4b97      	ldr	r3, [pc, #604]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007e72:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8007e76:	4b99      	ldr	r3, [pc, #612]	; (80080dc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7f8 fb5c 	bl	8000538 <__aeabi_f2d>
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	4b90      	ldr	r3, [pc, #576]	; (80080c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7f8 fb55 	bl	8000538 <__aeabi_f2d>
 8007e8e:	a388      	add	r3, pc, #544	; (adr r3, 80080b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 fba8 	bl	80005e8 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7f8 f9ec 	bl	800027c <__adddf3>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	4621      	mov	r1, r4
 8007eac:	f7f8 fe4c 	bl	8000b48 <__aeabi_d2f>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4b8a      	ldr	r3, [pc, #552]	; (80080dc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8007eb4:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8007eb6:	4b8a      	ldr	r3, [pc, #552]	; (80080e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f8 fb3c 	bl	8000538 <__aeabi_f2d>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	4b82      	ldr	r3, [pc, #520]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f8 fb35 	bl	8000538 <__aeabi_f2d>
 8007ece:	a378      	add	r3, pc, #480	; (adr r3, 80080b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 fb88 	bl	80005e8 <__aeabi_dmul>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 f9cc 	bl	800027c <__adddf3>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	4621      	mov	r1, r4
 8007eec:	f7f8 fe2c 	bl	8000b48 <__aeabi_d2f>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4b7b      	ldr	r3, [pc, #492]	; (80080e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8007ef4:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8007ef6:	4b74      	ldr	r3, [pc, #464]	; (80080c8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7f8 fb1c 	bl	8000538 <__aeabi_f2d>
 8007f00:	a36b      	add	r3, pc, #428	; (adr r3, 80080b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f7f8 fb6f 	bl	80005e8 <__aeabi_dmul>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	4618      	mov	r0, r3
 8007f10:	4621      	mov	r1, r4
 8007f12:	a369      	add	r3, pc, #420	; (adr r3, 80080b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f7f8 fc90 	bl	800083c <__aeabi_ddiv>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	4618      	mov	r0, r3
 8007f22:	4621      	mov	r1, r4
 8007f24:	f7f8 fe10 	bl	8000b48 <__aeabi_d2f>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b6e      	ldr	r3, [pc, #440]	; (80080e4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8007f2c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8007f2e:	4b68      	ldr	r3, [pc, #416]	; (80080d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7f8 fb00 	bl	8000538 <__aeabi_f2d>
 8007f38:	a35d      	add	r3, pc, #372	; (adr r3, 80080b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 fb53 	bl	80005e8 <__aeabi_dmul>
 8007f42:	4603      	mov	r3, r0
 8007f44:	460c      	mov	r4, r1
 8007f46:	4618      	mov	r0, r3
 8007f48:	4621      	mov	r1, r4
 8007f4a:	a35b      	add	r3, pc, #364	; (adr r3, 80080b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 fc74 	bl	800083c <__aeabi_ddiv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f7f8 fdf4 	bl	8000b48 <__aeabi_d2f>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4b61      	ldr	r3, [pc, #388]	; (80080e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8007f64:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8007f66:	4b57      	ldr	r3, [pc, #348]	; (80080c4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 8007f6c:	4b57      	ldr	r3, [pc, #348]	; (80080cc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 8007f72:	4b5e      	ldr	r3, [pc, #376]	; (80080ec <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80fe 	beq.w	800817e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 8007f82:	4b5b      	ldr	r3, [pc, #364]	; (80080f0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7f8 fad6 	bl	8000538 <__aeabi_f2d>
 8007f8c:	a34a      	add	r3, pc, #296	; (adr r3, 80080b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 fb29 	bl	80005e8 <__aeabi_dmul>
 8007f96:	4603      	mov	r3, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	4625      	mov	r5, r4
 8007f9c:	461c      	mov	r4, r3
 8007f9e:	4b55      	ldr	r3, [pc, #340]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7f8 fac8 	bl	8000538 <__aeabi_f2d>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4620      	mov	r0, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 f964 	bl	800027c <__adddf3>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4618      	mov	r0, r3
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f7f8 fdc4 	bl	8000b48 <__aeabi_d2f>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	4b4c      	ldr	r3, [pc, #304]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007fc4:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 8007fc6:	4b4b      	ldr	r3, [pc, #300]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007fc8:	ed93 7a00 	vldr	s14, [r3]
 8007fcc:	4b4a      	ldr	r3, [pc, #296]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8007fce:	edd3 7a00 	vldr	s15, [r3]
 8007fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fda:	dd03      	ble.n	8007fe4 <HAL_TIM_PeriodElapsedCallback+0x214>
 8007fdc:	4b46      	ldr	r3, [pc, #280]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8007fde:	edd3 7a00 	vldr	s15, [r3]
 8007fe2:	e002      	b.n	8007fea <HAL_TIM_PeriodElapsedCallback+0x21a>
 8007fe4:	4b43      	ldr	r3, [pc, #268]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007fe6:	edd3 7a00 	vldr	s15, [r3]
 8007fea:	4b44      	ldr	r3, [pc, #272]	; (80080fc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8007fec:	ed93 7a00 	vldr	s14, [r3]
 8007ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff8:	dd10      	ble.n	800801c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8007ffa:	4b3e      	ldr	r3, [pc, #248]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007ffc:	ed93 7a00 	vldr	s14, [r3]
 8008000:	4b3d      	ldr	r3, [pc, #244]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8008002:	edd3 7a00 	vldr	s15, [r3]
 8008006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800e:	dd02      	ble.n	8008016 <HAL_TIM_PeriodElapsedCallback+0x246>
 8008010:	4b39      	ldr	r3, [pc, #228]	; (80080f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	e004      	b.n	8008020 <HAL_TIM_PeriodElapsedCallback+0x250>
 8008016:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	e001      	b.n	8008020 <HAL_TIM_PeriodElapsedCallback+0x250>
 800801c:	4b37      	ldr	r3, [pc, #220]	; (80080fc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a34      	ldr	r2, [pc, #208]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8008022:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 8008024:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8008026:	ed93 7a00 	vldr	s14, [r3]
 800802a:	4b2e      	ldr	r3, [pc, #184]	; (80080e4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800802c:	edd3 7a00 	vldr	s15, [r3]
 8008030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008034:	4b32      	ldr	r3, [pc, #200]	; (8008100 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8008036:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800803a:	4b31      	ldr	r3, [pc, #196]	; (8008100 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800803c:	edd3 7a00 	vldr	s15, [r3]
 8008040:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008048:	4b2e      	ldr	r3, [pc, #184]	; (8008104 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800804a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800804e:	4b2e      	ldr	r3, [pc, #184]	; (8008108 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f7f8 fa70 	bl	8000538 <__aeabi_f2d>
 8008058:	a317      	add	r3, pc, #92	; (adr r3, 80080b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 fac3 	bl	80005e8 <__aeabi_dmul>
 8008062:	4603      	mov	r3, r0
 8008064:	460c      	mov	r4, r1
 8008066:	4625      	mov	r5, r4
 8008068:	461c      	mov	r4, r3
 800806a:	4b28      	ldr	r3, [pc, #160]	; (800810c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f7f8 fa62 	bl	8000538 <__aeabi_f2d>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4620      	mov	r0, r4
 800807a:	4629      	mov	r1, r5
 800807c:	f7f8 f8fe 	bl	800027c <__adddf3>
 8008080:	4603      	mov	r3, r0
 8008082:	460c      	mov	r4, r1
 8008084:	4618      	mov	r0, r3
 8008086:	4621      	mov	r1, r4
 8008088:	f7f8 fd5e 	bl	8000b48 <__aeabi_d2f>
 800808c:	4602      	mov	r2, r0
 800808e:	4b1f      	ldr	r3, [pc, #124]	; (800810c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8008090:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 8008092:	4b1e      	ldr	r3, [pc, #120]	; (800810c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8008094:	ed93 7a00 	vldr	s14, [r3]
 8008098:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800809a:	edd3 7a00 	vldr	s15, [r3]
 800809e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	dd35      	ble.n	8008114 <HAL_TIM_PeriodElapsedCallback+0x344>
 80080a8:	4b19      	ldr	r3, [pc, #100]	; (8008110 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80080aa:	edd3 7a00 	vldr	s15, [r3]
 80080ae:	e034      	b.n	800811a <HAL_TIM_PeriodElapsedCallback+0x34a>
 80080b0:	775e3793 	.word	0x775e3793
 80080b4:	3f552a9e 	.word	0x3f552a9e
 80080b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80080bc:	3f50624d 	.word	0x3f50624d
 80080c0:	20000b30 	.word	0x20000b30
 80080c4:	40000800 	.word	0x40000800
 80080c8:	2000032c 	.word	0x2000032c
 80080cc:	40010400 	.word	0x40010400
 80080d0:	20000b28 	.word	0x20000b28
 80080d4:	471c4000 	.word	0x471c4000
 80080d8:	477fff00 	.word	0x477fff00
 80080dc:	20000f00 	.word	0x20000f00
 80080e0:	20000a68 	.word	0x20000a68
 80080e4:	20000a6c 	.word	0x20000a6c
 80080e8:	20000338 	.word	0x20000338
 80080ec:	20000ee4 	.word	0x20000ee4
 80080f0:	20000cd8 	.word	0x20000cd8
 80080f4:	20000b7c 	.word	0x20000b7c
 80080f8:	200006f4 	.word	0x200006f4
 80080fc:	20000ad0 	.word	0x20000ad0
 8008100:	20000adc 	.word	0x20000adc
 8008104:	20000b24 	.word	0x20000b24
 8008108:	20000a60 	.word	0x20000a60
 800810c:	20000220 	.word	0x20000220
 8008110:	20000224 	.word	0x20000224
 8008114:	4b9a      	ldr	r3, [pc, #616]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008116:	edd3 7a00 	vldr	s15, [r3]
 800811a:	4b9a      	ldr	r3, [pc, #616]	; (8008384 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800811c:	ed93 7a00 	vldr	s14, [r3]
 8008120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008128:	dd10      	ble.n	800814c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800812a:	4b95      	ldr	r3, [pc, #596]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800812c:	ed93 7a00 	vldr	s14, [r3]
 8008130:	4b95      	ldr	r3, [pc, #596]	; (8008388 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8008132:	edd3 7a00 	vldr	s15, [r3]
 8008136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800813a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813e:	dd02      	ble.n	8008146 <HAL_TIM_PeriodElapsedCallback+0x376>
 8008140:	4b91      	ldr	r3, [pc, #580]	; (8008388 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	e004      	b.n	8008150 <HAL_TIM_PeriodElapsedCallback+0x380>
 8008146:	4b8e      	ldr	r3, [pc, #568]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	e001      	b.n	8008150 <HAL_TIM_PeriodElapsedCallback+0x380>
 800814c:	4b8d      	ldr	r3, [pc, #564]	; (8008384 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a8b      	ldr	r2, [pc, #556]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008152:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 8008154:	4b8a      	ldr	r3, [pc, #552]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008156:	ed93 7a00 	vldr	s14, [r3]
 800815a:	4b8c      	ldr	r3, [pc, #560]	; (800838c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800815c:	edd3 7a00 	vldr	s15, [r3]
 8008160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008164:	4b8a      	ldr	r3, [pc, #552]	; (8008390 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8008166:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800816a:	4b89      	ldr	r3, [pc, #548]	; (8008390 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800816c:	edd3 7a00 	vldr	s15, [r3]
 8008170:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008178:	4b86      	ldr	r3, [pc, #536]	; (8008394 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800817a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800817e:	4b86      	ldr	r3, [pc, #536]	; (8008398 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a84      	ldr	r2, [pc, #528]	; (8008398 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8008186:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 8008188:	4b83      	ldr	r3, [pc, #524]	; (8008398 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b04      	cmp	r3, #4
 800818e:	dd2a      	ble.n	80081e6 <HAL_TIM_PeriodElapsedCallback+0x416>
 8008190:	4b82      	ldr	r3, [pc, #520]	; (800839c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d023      	beq.n	80081e6 <HAL_TIM_PeriodElapsedCallback+0x416>
			log_cnt = 0;
 800819e:	4b7e      	ldr	r3, [pc, #504]	; (8008398 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 80081a4:	4b7e      	ldr	r3, [pc, #504]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2bc7      	cmp	r3, #199	; 0xc7
 80081aa:	dc1c      	bgt.n	80081e6 <HAL_TIM_PeriodElapsedCallback+0x416>
				get_speed_l[get_cnt] = speed_l;
 80081ac:	4b7d      	ldr	r3, [pc, #500]	; (80083a4 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80081ae:	edd3 7a00 	vldr	s15, [r3]
 80081b2:	4b7b      	ldr	r3, [pc, #492]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081ba:	ee17 1a90 	vmov	r1, s15
 80081be:	4a7a      	ldr	r2, [pc, #488]	; (80083a8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80081c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 80081c4:	4b71      	ldr	r3, [pc, #452]	; (800838c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80081c6:	edd3 7a00 	vldr	s15, [r3]
 80081ca:	4b75      	ldr	r3, [pc, #468]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081d2:	ee17 1a90 	vmov	r1, s15
 80081d6:	4a75      	ldr	r2, [pc, #468]	; (80083ac <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80081d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 80081dc:	4b70      	ldr	r3, [pc, #448]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3301      	adds	r3, #1
 80081e2:	4a6f      	ldr	r2, [pc, #444]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80081e4:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 80081e6:	f7ff fd93 	bl	8007d10 <gyro_read_z>
 80081ea:	ee10 3a10 	vmov	r3, s0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f8 f9a2 	bl	8000538 <__aeabi_f2d>
 80081f4:	a35e      	add	r3, pc, #376	; (adr r3, 8008370 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f7f8 f9f5 	bl	80005e8 <__aeabi_dmul>
 80081fe:	4603      	mov	r3, r0
 8008200:	460c      	mov	r4, r1
 8008202:	4625      	mov	r5, r4
 8008204:	461c      	mov	r4, r3
 8008206:	4b6a      	ldr	r3, [pc, #424]	; (80083b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7f8 f994 	bl	8000538 <__aeabi_f2d>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4620      	mov	r0, r4
 8008216:	4629      	mov	r1, r5
 8008218:	f7f8 f830 	bl	800027c <__adddf3>
 800821c:	4603      	mov	r3, r0
 800821e:	460c      	mov	r4, r1
 8008220:	4618      	mov	r0, r3
 8008222:	4621      	mov	r1, r4
 8008224:	f7f8 fc90 	bl	8000b48 <__aeabi_d2f>
 8008228:	4602      	mov	r2, r0
 800822a:	4b61      	ldr	r3, [pc, #388]	; (80083b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800822c:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag == 1){
 800822e:	4b61      	ldr	r3, [pc, #388]	; (80083b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d14b      	bne.n	80082d0 <HAL_TIM_PeriodElapsedCallback+0x500>
			gyro_cnt ++;
 8008238:	4b5f      	ldr	r3, [pc, #380]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	4a5e      	ldr	r2, [pc, #376]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008240:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 8008242:	4b5d      	ldr	r3, [pc, #372]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b01      	cmp	r3, #1
 8008248:	dd10      	ble.n	800826c <HAL_TIM_PeriodElapsedCallback+0x49c>
 800824a:	4b5c      	ldr	r3, [pc, #368]	; (80083bc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800824c:	ed93 8a00 	vldr	s16, [r3]
 8008250:	f7ff fd5e 	bl	8007d10 <gyro_read_z>
 8008254:	eef0 7a40 	vmov.f32	s15, s0
 8008258:	ee38 7a67 	vsub.f32	s14, s16, s15
 800825c:	4b58      	ldr	r3, [pc, #352]	; (80083c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800825e:	edd3 7a00 	vldr	s15, [r3]
 8008262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008266:	4b56      	ldr	r3, [pc, #344]	; (80083c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8008268:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800826c:	f7ff fd50 	bl	8007d10 <gyro_read_z>
 8008270:	eef0 7a40 	vmov.f32	s15, s0
 8008274:	4b51      	ldr	r3, [pc, #324]	; (80083bc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8008276:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(6);
 800827a:	2006      	movs	r0, #6
 800827c:	f003 fb58 	bl	800b930 <full_led_write>
			if(gyro_cnt >= 1001) {
 8008280:	4b4d      	ldr	r3, [pc, #308]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008288:	dd1a      	ble.n	80082c0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
				gyro_drift_flag = 0;
 800828a:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 8008290:	4b4b      	ldr	r3, [pc, #300]	; (80083c0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8008292:	edd3 6a00 	vldr	s13, [r3]
 8008296:	4b48      	ldr	r3, [pc, #288]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082ae:	4b45      	ldr	r3, [pc, #276]	; (80083c4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80082b0:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 80082b4:	4b40      	ldr	r3, [pc, #256]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
				full_led_write(4);
 80082ba:	2004      	movs	r0, #4
 80082bc:	f003 fb38 	bl	800b930 <full_led_write>
			}
			degree_z = 0;
 80082c0:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 80082c8:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
		}


		if(MF.FLAG.ENKAI){
 80082d0:	4b32      	ldr	r3, [pc, #200]	; (800839c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80d3 	beq.w	8008486 <HAL_TIM_PeriodElapsedCallback+0x6b6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 80082e0:	4b33      	ldr	r3, [pc, #204]	; (80083b0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80082e2:	ed93 7a00 	vldr	s14, [r3]
 80082e6:	4b38      	ldr	r3, [pc, #224]	; (80083c8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80082e8:	edd3 7a00 	vldr	s15, [r3]
 80082ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082f0:	ee17 0a90 	vmov	r0, s15
 80082f4:	f7f8 f920 	bl	8000538 <__aeabi_f2d>
 80082f8:	a31f      	add	r3, pc, #124	; (adr r3, 8008378 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f973 	bl	80005e8 <__aeabi_dmul>
 8008302:	4603      	mov	r3, r0
 8008304:	460c      	mov	r4, r1
 8008306:	4618      	mov	r0, r3
 8008308:	4621      	mov	r1, r4
 800830a:	f7f8 fc1d 	bl	8000b48 <__aeabi_d2f>
 800830e:	4602      	mov	r2, r0
 8008310:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8008312:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 8008314:	4b2d      	ldr	r3, [pc, #180]	; (80083cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8008316:	edd3 7a00 	vldr	s15, [r3]
 800831a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800831e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008322:	dd59      	ble.n	80083d8 <HAL_TIM_PeriodElapsedCallback+0x608>
				target_speed_l = sqrt(2*accel_l*target_dist);
 8008324:	4b2a      	ldr	r3, [pc, #168]	; (80083d0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8008326:	edd3 7a00 	vldr	s15, [r3]
 800832a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800832e:	4b27      	ldr	r3, [pc, #156]	; (80083cc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8008330:	edd3 7a00 	vldr	s15, [r3]
 8008334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008338:	ee17 0a90 	vmov	r0, s15
 800833c:	f7f8 f8fc 	bl	8000538 <__aeabi_f2d>
 8008340:	4603      	mov	r3, r0
 8008342:	460c      	mov	r4, r1
 8008344:	ec44 3b10 	vmov	d0, r3, r4
 8008348:	f005 f88c 	bl	800d464 <sqrt>
 800834c:	ec54 3b10 	vmov	r3, r4, d0
 8008350:	4618      	mov	r0, r3
 8008352:	4621      	mov	r1, r4
 8008354:	f7f8 fbf8 	bl	8000b48 <__aeabi_d2f>
 8008358:	4602      	mov	r2, r0
 800835a:	4b1e      	ldr	r3, [pc, #120]	; (80083d4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800835c:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800835e:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8008360:	edd3 7a00 	vldr	s15, [r3]
 8008364:	eef1 7a67 	vneg.f32	s15, s15
 8008368:	4b05      	ldr	r3, [pc, #20]	; (8008380 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800836a:	edc3 7a00 	vstr	s15, [r3]
 800836e:	e060      	b.n	8008432 <HAL_TIM_PeriodElapsedCallback+0x662>
 8008370:	d2f1a9fc 	.word	0xd2f1a9fc
 8008374:	3f50624d 	.word	0x3f50624d
 8008378:	d7653223 	.word	0xd7653223
 800837c:	3fe26e40 	.word	0x3fe26e40
 8008380:	20000220 	.word	0x20000220
 8008384:	20000ee8 	.word	0x20000ee8
 8008388:	20000224 	.word	0x20000224
 800838c:	20000338 	.word	0x20000338
 8008390:	20000b88 	.word	0x20000b88
 8008394:	200006f8 	.word	0x200006f8
 8008398:	20000188 	.word	0x20000188
 800839c:	20000ee4 	.word	0x20000ee4
 80083a0:	20000190 	.word	0x20000190
 80083a4:	20000a6c 	.word	0x20000a6c
 80083a8:	200006fc 	.word	0x200006fc
 80083ac:	200003d4 	.word	0x200003d4
 80083b0:	20000ad8 	.word	0x20000ad8
 80083b4:	20000a1c 	.word	0x20000a1c
 80083b8:	2000018c 	.word	0x2000018c
 80083bc:	20000f08 	.word	0x20000f08
 80083c0:	20000b20 	.word	0x20000b20
 80083c4:	20000b70 	.word	0x20000b70
 80083c8:	20000b78 	.word	0x20000b78
 80083cc:	20000ef4 	.word	0x20000ef4
 80083d0:	20000cd8 	.word	0x20000cd8
 80083d4:	20000b7c 	.word	0x20000b7c
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 80083d8:	4bcb      	ldr	r3, [pc, #812]	; (8008708 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80083da:	edd3 7a00 	vldr	s15, [r3]
 80083de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80083e2:	4bca      	ldr	r3, [pc, #808]	; (800870c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80083e4:	edd3 7a00 	vldr	s15, [r3]
 80083e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ec:	eef1 7a67 	vneg.f32	s15, s15
 80083f0:	ee17 3a90 	vmov	r3, s15
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7f8 f89f 	bl	8000538 <__aeabi_f2d>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	ec44 3b10 	vmov	d0, r3, r4
 8008402:	f005 f82f 	bl	800d464 <sqrt>
 8008406:	ec54 3b10 	vmov	r3, r4, d0
 800840a:	4618      	mov	r0, r3
 800840c:	4621      	mov	r1, r4
 800840e:	f7f8 fb9b 	bl	8000b48 <__aeabi_d2f>
 8008412:	4603      	mov	r3, r0
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eef1 7a67 	vneg.f32	s15, s15
 800841c:	4bbc      	ldr	r3, [pc, #752]	; (8008710 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800841e:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 8008422:	4bbb      	ldr	r3, [pc, #748]	; (8008710 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8008424:	edd3 7a00 	vldr	s15, [r3]
 8008428:	eef1 7a67 	vneg.f32	s15, s15
 800842c:	4bb9      	ldr	r3, [pc, #740]	; (8008714 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800842e:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 8008432:	4bb7      	ldr	r3, [pc, #732]	; (8008710 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8008434:	ed93 7a00 	vldr	s14, [r3]
 8008438:	4bb7      	ldr	r3, [pc, #732]	; (8008718 <HAL_TIM_PeriodElapsedCallback+0x948>)
 800843a:	edd3 7a00 	vldr	s15, [r3]
 800843e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008442:	4bb6      	ldr	r3, [pc, #728]	; (800871c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8008444:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8008448:	4bb4      	ldr	r3, [pc, #720]	; (800871c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800844a:	edd3 7a00 	vldr	s15, [r3]
 800844e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008456:	4bb2      	ldr	r3, [pc, #712]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008458:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800845c:	4bad      	ldr	r3, [pc, #692]	; (8008714 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800845e:	ed93 7a00 	vldr	s14, [r3]
 8008462:	4bb0      	ldr	r3, [pc, #704]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8008464:	edd3 7a00 	vldr	s15, [r3]
 8008468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800846c:	4bae      	ldr	r3, [pc, #696]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800846e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8008472:	4bad      	ldr	r3, [pc, #692]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8008474:	edd3 7a00 	vldr	s15, [r3]
 8008478:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800847c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008480:	4baa      	ldr	r3, [pc, #680]	; (800872c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8008482:	edc3 7a00 	vstr	s15, [r3]
		}

		if(MF.FLAG.GYRO){
 8008486:	4baa      	ldr	r3, [pc, #680]	; (8008730 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80ed 	beq.w	8008670 <HAL_TIM_PeriodElapsedCallback+0x8a0>
			target_omega_z += target_degaccel_z * 0.001;
 8008496:	4ba7      	ldr	r3, [pc, #668]	; (8008734 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f7f8 f84c 	bl	8000538 <__aeabi_f2d>
 80084a0:	a395      	add	r3, pc, #596	; (adr r3, 80086f8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f8 f89f 	bl	80005e8 <__aeabi_dmul>
 80084aa:	4603      	mov	r3, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	4625      	mov	r5, r4
 80084b0:	461c      	mov	r4, r3
 80084b2:	4ba1      	ldr	r3, [pc, #644]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f8 f83e 	bl	8000538 <__aeabi_f2d>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4620      	mov	r0, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f7 feda 	bl	800027c <__adddf3>
 80084c8:	4603      	mov	r3, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4618      	mov	r0, r3
 80084ce:	4621      	mov	r1, r4
 80084d0:	f7f8 fb3a 	bl	8000b48 <__aeabi_d2f>
 80084d4:	4602      	mov	r2, r0
 80084d6:	4b98      	ldr	r3, [pc, #608]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80084d8:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 80084da:	4b97      	ldr	r3, [pc, #604]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80084dc:	ed93 7a00 	vldr	s14, [r3]
 80084e0:	4b96      	ldr	r3, [pc, #600]	; (800873c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80084e2:	edd3 7a00 	vldr	s15, [r3]
 80084e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ee:	dd03      	ble.n	80084f8 <HAL_TIM_PeriodElapsedCallback+0x728>
 80084f0:	4b92      	ldr	r3, [pc, #584]	; (800873c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80084f2:	edd3 7a00 	vldr	s15, [r3]
 80084f6:	e002      	b.n	80084fe <HAL_TIM_PeriodElapsedCallback+0x72e>
 80084f8:	4b8f      	ldr	r3, [pc, #572]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	4b90      	ldr	r3, [pc, #576]	; (8008740 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8008500:	ed93 7a00 	vldr	s14, [r3]
 8008504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850c:	dd10      	ble.n	8008530 <HAL_TIM_PeriodElapsedCallback+0x760>
 800850e:	4b8a      	ldr	r3, [pc, #552]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008510:	ed93 7a00 	vldr	s14, [r3]
 8008514:	4b89      	ldr	r3, [pc, #548]	; (800873c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8008516:	edd3 7a00 	vldr	s15, [r3]
 800851a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	dd02      	ble.n	800852a <HAL_TIM_PeriodElapsedCallback+0x75a>
 8008524:	4b85      	ldr	r3, [pc, #532]	; (800873c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	e004      	b.n	8008534 <HAL_TIM_PeriodElapsedCallback+0x764>
 800852a:	4b83      	ldr	r3, [pc, #524]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	e001      	b.n	8008534 <HAL_TIM_PeriodElapsedCallback+0x764>
 8008530:	4b83      	ldr	r3, [pc, #524]	; (8008740 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a80      	ldr	r2, [pc, #512]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008536:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 8008538:	4b82      	ldr	r3, [pc, #520]	; (8008744 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f7f7 fffb 	bl	8000538 <__aeabi_f2d>
 8008542:	4604      	mov	r4, r0
 8008544:	460d      	mov	r5, r1
 8008546:	4b7c      	ldr	r3, [pc, #496]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008548:	edd3 7a00 	vldr	s15, [r3]
 800854c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008748 <HAL_TIM_PeriodElapsedCallback+0x978>
 8008550:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008554:	ee16 0a90 	vmov	r0, s13
 8008558:	f7f7 ffee 	bl	8000538 <__aeabi_f2d>
 800855c:	a368      	add	r3, pc, #416	; (adr r3, 8008700 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f8 f841 	bl	80005e8 <__aeabi_dmul>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4610      	mov	r0, r2
 800856c:	4619      	mov	r1, r3
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	4b76      	ldr	r3, [pc, #472]	; (800874c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8008574:	f7f8 f838 	bl	80005e8 <__aeabi_dmul>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4610      	mov	r0, r2
 800857e:	4619      	mov	r1, r3
 8008580:	f04f 0200 	mov.w	r2, #0
 8008584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008588:	f7f8 f958 	bl	800083c <__aeabi_ddiv>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4620      	mov	r0, r4
 8008592:	4629      	mov	r1, r5
 8008594:	f7f7 fe72 	bl	800027c <__adddf3>
 8008598:	4603      	mov	r3, r0
 800859a:	460c      	mov	r4, r1
 800859c:	4618      	mov	r0, r3
 800859e:	4621      	mov	r1, r4
 80085a0:	f7f8 fad2 	bl	8000b48 <__aeabi_d2f>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b5a      	ldr	r3, [pc, #360]	; (8008710 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80085a8:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 80085aa:	4b66      	ldr	r3, [pc, #408]	; (8008744 <HAL_TIM_PeriodElapsedCallback+0x974>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7f7 ffc2 	bl	8000538 <__aeabi_f2d>
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	4b5f      	ldr	r3, [pc, #380]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80085ba:	edd3 7a00 	vldr	s15, [r3]
 80085be:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8008748 <HAL_TIM_PeriodElapsedCallback+0x978>
 80085c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80085c6:	ee16 0a90 	vmov	r0, s13
 80085ca:	f7f7 ffb5 	bl	8000538 <__aeabi_f2d>
 80085ce:	a34c      	add	r3, pc, #304	; (adr r3, 8008700 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f8 f808 	bl	80005e8 <__aeabi_dmul>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4610      	mov	r0, r2
 80085de:	4619      	mov	r1, r3
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	4b59      	ldr	r3, [pc, #356]	; (800874c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80085e6:	f7f7 ffff 	bl	80005e8 <__aeabi_dmul>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4610      	mov	r0, r2
 80085f0:	4619      	mov	r1, r3
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085fa:	f7f8 f91f 	bl	800083c <__aeabi_ddiv>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4620      	mov	r0, r4
 8008604:	4629      	mov	r1, r5
 8008606:	f7f7 fe37 	bl	8000278 <__aeabi_dsub>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	4618      	mov	r0, r3
 8008610:	4621      	mov	r1, r4
 8008612:	f7f8 fa99 	bl	8000b48 <__aeabi_d2f>
 8008616:	4602      	mov	r2, r0
 8008618:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800861a:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800861c:	4b3c      	ldr	r3, [pc, #240]	; (8008710 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800861e:	ed93 7a00 	vldr	s14, [r3]
 8008622:	4b3d      	ldr	r3, [pc, #244]	; (8008718 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8008624:	edd3 7a00 	vldr	s15, [r3]
 8008628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800862c:	4b3b      	ldr	r3, [pc, #236]	; (800871c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800862e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8008632:	4b3a      	ldr	r3, [pc, #232]	; (800871c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8008634:	edd3 7a00 	vldr	s15, [r3]
 8008638:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800863c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008640:	4b37      	ldr	r3, [pc, #220]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008642:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 8008646:	4b33      	ldr	r3, [pc, #204]	; (8008714 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8008648:	ed93 7a00 	vldr	s14, [r3]
 800864c:	4b35      	ldr	r3, [pc, #212]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800864e:	edd3 7a00 	vldr	s15, [r3]
 8008652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008656:	4b34      	ldr	r3, [pc, #208]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8008658:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800865c:	4b32      	ldr	r3, [pc, #200]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800865e:	edd3 7a00 	vldr	s15, [r3]
 8008662:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800866a:	4b30      	ldr	r3, [pc, #192]	; (800872c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800866c:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 8008670:	4b37      	ldr	r3, [pc, #220]	; (8008750 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	4b37      	ldr	r3, [pc, #220]	; (8008754 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8008678:	fb83 3102 	smull	r3, r1, r3, r2
 800867c:	17d3      	asrs	r3, r2, #31
 800867e:	1ac9      	subs	r1, r1, r3
 8008680:	460b      	mov	r3, r1
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	440b      	add	r3, r1
 8008686:	1ad1      	subs	r1, r2, r3
 8008688:	b2ca      	uxtb	r2, r1
 800868a:	4b31      	ldr	r3, [pc, #196]	; (8008750 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800868c:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800868e:	4b30      	ldr	r3, [pc, #192]	; (8008750 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d07f      	beq.n	8008796 <HAL_TIM_PeriodElapsedCallback+0x9c6>
 8008696:	2b02      	cmp	r3, #2
 8008698:	f000 80bc 	beq.w	8008814 <HAL_TIM_PeriodElapsedCallback+0xa44>
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 81f3 	bne.w	8008a88 <HAL_TIM_PeriodElapsedCallback+0xcb8>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 80086a2:	2201      	movs	r2, #1
 80086a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80086a8:	482b      	ldr	r0, [pc, #172]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80086aa:	f7f9 fe03 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80086ae:	2300      	movs	r3, #0
 80086b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086b2:	e002      	b.n	80086ba <HAL_TIM_PeriodElapsedCallback+0x8ea>
 80086b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086b6:	3301      	adds	r3, #1
 80086b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086bc:	f640 52ab 	movw	r2, #3499	; 0xdab
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d9f7      	bls.n	80086b4 <HAL_TIM_PeriodElapsedCallback+0x8e4>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 80086c4:	2103      	movs	r1, #3
 80086c6:	4825      	ldr	r0, [pc, #148]	; (800875c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 80086c8:	f001 f93c 	bl	8009944 <get_adc_value>
 80086cc:	4603      	mov	r3, r0
 80086ce:	461a      	mov	r2, r3
 80086d0:	4b23      	ldr	r3, [pc, #140]	; (8008760 <HAL_TIM_PeriodElapsedCallback+0x990>)
 80086d2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80086d4:	2200      	movs	r2, #0
 80086d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80086da:	481f      	ldr	r0, [pc, #124]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80086dc:	f7f9 fdea 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 80086e0:	2201      	movs	r2, #1
 80086e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086e6:	481f      	ldr	r0, [pc, #124]	; (8008764 <HAL_TIM_PeriodElapsedCallback+0x994>)
 80086e8:	f7f9 fde4 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80086ec:	2300      	movs	r3, #0
 80086ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086f0:	e03d      	b.n	800876e <HAL_TIM_PeriodElapsedCallback+0x99e>
 80086f2:	bf00      	nop
 80086f4:	f3af 8000 	nop.w
 80086f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80086fc:	3f50624d 	.word	0x3f50624d
 8008700:	54442d18 	.word	0x54442d18
 8008704:	400921fb 	.word	0x400921fb
 8008708:	20000cd8 	.word	0x20000cd8
 800870c:	20000ef4 	.word	0x20000ef4
 8008710:	20000b7c 	.word	0x20000b7c
 8008714:	20000220 	.word	0x20000220
 8008718:	20000a6c 	.word	0x20000a6c
 800871c:	20000adc 	.word	0x20000adc
 8008720:	20000b24 	.word	0x20000b24
 8008724:	20000338 	.word	0x20000338
 8008728:	20000b88 	.word	0x20000b88
 800872c:	200006f8 	.word	0x200006f8
 8008730:	20000ee4 	.word	0x20000ee4
 8008734:	20000ad4 	.word	0x20000ad4
 8008738:	20000228 	.word	0x20000228
 800873c:	20000a64 	.word	0x20000a64
 8008740:	20000334 	.word	0x20000334
 8008744:	20000a70 	.word	0x20000a70
 8008748:	43340000 	.word	0x43340000
 800874c:	40508000 	.word	0x40508000
 8008750:	20000efb 	.word	0x20000efb
 8008754:	55555556 	.word	0x55555556
 8008758:	40020800 	.word	0x40020800
 800875c:	20000a7c 	.word	0x20000a7c
 8008760:	20000a78 	.word	0x20000a78
 8008764:	40020000 	.word	0x40020000
 8008768:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800876a:	3301      	adds	r3, #1
 800876c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800876e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008770:	f640 52ab 	movw	r2, #3499	; 0xdab
 8008774:	4293      	cmp	r3, r2
 8008776:	d9f7      	bls.n	8008768 <HAL_TIM_PeriodElapsedCallback+0x998>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 8008778:	2101      	movs	r1, #1
 800877a:	48aa      	ldr	r0, [pc, #680]	; (8008a24 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800877c:	f001 f8e2 	bl	8009944 <get_adc_value>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	4ba8      	ldr	r3, [pc, #672]	; (8008a28 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8008786:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8008788:	2200      	movs	r2, #0
 800878a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800878e:	48a7      	ldr	r0, [pc, #668]	; (8008a2c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8008790:	f7f9 fd90 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 8008794:	e178      	b.n	8008a88 <HAL_TIM_PeriodElapsedCallback+0xcb8>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 8008796:	2201      	movs	r2, #1
 8008798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800879c:	48a4      	ldr	r0, [pc, #656]	; (8008a30 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800879e:	f7f9 fd89 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80087a2:	2300      	movs	r3, #0
 80087a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087a6:	e002      	b.n	80087ae <HAL_TIM_PeriodElapsedCallback+0x9de>
 80087a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087aa:	3301      	adds	r3, #1
 80087ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087b0:	f640 52ab 	movw	r2, #3499	; 0xdab
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d9f7      	bls.n	80087a8 <HAL_TIM_PeriodElapsedCallback+0x9d8>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 80087b8:	2102      	movs	r1, #2
 80087ba:	489a      	ldr	r0, [pc, #616]	; (8008a24 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80087bc:	f001 f8c2 	bl	8009944 <get_adc_value>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	4b9b      	ldr	r3, [pc, #620]	; (8008a34 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 80087c6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80087c8:	2200      	movs	r2, #0
 80087ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ce:	4898      	ldr	r0, [pc, #608]	; (8008a30 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80087d0:	f7f9 fd70 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 80087d4:	2201      	movs	r2, #1
 80087d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087da:	4895      	ldr	r0, [pc, #596]	; (8008a30 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80087dc:	f7f9 fd6a 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80087e0:	2300      	movs	r3, #0
 80087e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087e4:	e002      	b.n	80087ec <HAL_TIM_PeriodElapsedCallback+0xa1c>
 80087e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087e8:	3301      	adds	r3, #1
 80087ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087ee:	f640 52ab 	movw	r2, #3499	; 0xdab
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d9f7      	bls.n	80087e6 <HAL_TIM_PeriodElapsedCallback+0xa16>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 80087f6:	2100      	movs	r1, #0
 80087f8:	488a      	ldr	r0, [pc, #552]	; (8008a24 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80087fa:	f001 f8a3 	bl	8009944 <get_adc_value>
 80087fe:	4603      	mov	r3, r0
 8008800:	461a      	mov	r2, r3
 8008802:	4b8d      	ldr	r3, [pc, #564]	; (8008a38 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 8008804:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008806:	2200      	movs	r2, #0
 8008808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800880c:	4888      	ldr	r0, [pc, #544]	; (8008a30 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800880e:	f7f9 fd51 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 8008812:	e139      	b.n	8008a88 <HAL_TIM_PeriodElapsedCallback+0xcb8>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 8008814:	4b89      	ldr	r3, [pc, #548]	; (8008a3c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 80b7 	beq.w	8008992 <HAL_TIM_PeriodElapsedCallback+0xbc2>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008828:	2300      	movs	r3, #0
 800882a:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 800882c:	4b84      	ldr	r3, [pc, #528]	; (8008a40 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	b29a      	uxth	r2, r3
 8008832:	4b84      	ldr	r3, [pc, #528]	; (8008a44 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	b29b      	uxth	r3, r3
 800883a:	b21a      	sxth	r2, r3
 800883c:	4b82      	ldr	r3, [pc, #520]	; (8008a48 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800883e:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 8008840:	4b79      	ldr	r3, [pc, #484]	; (8008a28 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	b29a      	uxth	r2, r3
 8008846:	4b81      	ldr	r3, [pc, #516]	; (8008a4c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	b29b      	uxth	r3, r3
 800884e:	b21a      	sxth	r2, r3
 8008850:	4b7f      	ldr	r3, [pc, #508]	; (8008a50 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8008852:	801a      	strh	r2, [r3, #0]

					if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 8008854:	4b7c      	ldr	r3, [pc, #496]	; (8008a48 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8008856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800885a:	2b1e      	cmp	r3, #30
 800885c:	dc04      	bgt.n	8008868 <HAL_TIM_PeriodElapsedCallback+0xa98>
 800885e:	4b7c      	ldr	r3, [pc, #496]	; (8008a50 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8008860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008864:	2b1e      	cmp	r3, #30
 8008866:	dd6e      	ble.n	8008946 <HAL_TIM_PeriodElapsedCallback+0xb76>
						if(CTRL_BASE_L < dif_l){
 8008868:	4b77      	ldr	r3, [pc, #476]	; (8008a48 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800886a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800886e:	2b1e      	cmp	r3, #30
 8008870:	dd30      	ble.n	80088d4 <HAL_TIM_PeriodElapsedCallback+0xb04>
							dwl_tmp += CTRL_CONT_W * dif_l;				//a比例制御値を決定
 8008872:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800887e:	4b72      	ldr	r3, [pc, #456]	; (8008a48 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8008880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800888c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008890:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800889c:	ee17 3a90 	vmov	r3, s15
 80088a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += -1 * CTRL_CONT_W * dif_l;		//a比例制御値を決定
 80088a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088ae:	4b66      	ldr	r3, [pc, #408]	; (8008a48 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80088b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088bc:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80088c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80088c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088cc:	ee17 3a90 	vmov	r3, s15
 80088d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80088d2:	e034      	b.n	800893e <HAL_TIM_PeriodElapsedCallback+0xb6e>
						}
						else if(CTRL_BASE_R < dif_r){
 80088d4:	4b5e      	ldr	r3, [pc, #376]	; (8008a50 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80088d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088da:	2b1e      	cmp	r3, #30
 80088dc:	dd2f      	ble.n	800893e <HAL_TIM_PeriodElapsedCallback+0xb6e>
							dwl_tmp += -1 * CTRL_CONT_W * dif_r;		//a比例制御値を決定
 80088de:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088ea:	4b59      	ldr	r3, [pc, #356]	; (8008a50 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80088ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088f0:	ee07 3a90 	vmov	s15, r3
 80088f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088f8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80088fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008908:	ee17 3a90 	vmov	r3, s15
 800890c:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += CTRL_CONT_W * dif_r;				//a比例制御値を決定
 800890e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800891a:	4b4d      	ldr	r3, [pc, #308]	; (8008a50 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800891c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008928:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800892c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008938:	ee17 3a90 	vmov	r3, s15
 800893c:	857b      	strh	r3, [r7, #42]	; 0x2a
						}
						W_G_flag = 1;
 800893e:	4b45      	ldr	r3, [pc, #276]	; (8008a54 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8008940:	2201      	movs	r2, #1
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	e002      	b.n	800894c <HAL_TIM_PeriodElapsedCallback+0xb7c>
					}else{
						W_G_flag = 0;
 8008946:	4b43      	ldr	r3, [pc, #268]	; (8008a54 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800894c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008950:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008954:	dd08      	ble.n	8008968 <HAL_TIM_PeriodElapsedCallback+0xb98>
 8008956:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800895a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800895e:	bfa8      	it	ge
 8008960:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8008964:	b21b      	sxth	r3, r3
 8008966:	e000      	b.n	800896a <HAL_TIM_PeriodElapsedCallback+0xb9a>
 8008968:	4b3b      	ldr	r3, [pc, #236]	; (8008a58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800896a:	4a3c      	ldr	r2, [pc, #240]	; (8008a5c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800896c:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800896e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008972:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008976:	dd08      	ble.n	800898a <HAL_TIM_PeriodElapsedCallback+0xbba>
 8008978:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800897c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008980:	bfa8      	it	ge
 8008982:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8008986:	b21b      	sxth	r3, r3
 8008988:	e000      	b.n	800898c <HAL_TIM_PeriodElapsedCallback+0xbbc>
 800898a:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800898c:	4a34      	ldr	r2, [pc, #208]	; (8008a60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800898e:	8013      	strh	r3, [r2, #0]
 8008990:	e006      	b.n	80089a0 <HAL_TIM_PeriodElapsedCallback+0xbd0>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 8008992:	2100      	movs	r1, #0
 8008994:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8008996:	460a      	mov	r2, r1
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	4b30      	ldr	r3, [pc, #192]	; (8008a5c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800899c:	460a      	mov	r2, r1
 800899e:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d064      	beq.n	8008a78 <HAL_TIM_PeriodElapsedCallback+0xca8>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (degree_z - target_degree_z);		//角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 80089ae:	4b2d      	ldr	r3, [pc, #180]	; (8008a64 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 80089b0:	ed93 7a00 	vldr	s14, [r3]
 80089b4:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 80089b6:	edd3 7a00 	vldr	s15, [r3]
 80089ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089c2:	ee17 3a90 	vmov	r3, s15
 80089c6:	b21a      	sxth	r2, r3
 80089c8:	4b28      	ldr	r3, [pc, #160]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80089ca:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 80089cc:	4b27      	ldr	r3, [pc, #156]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80089d6:	da05      	bge.n	80089e4 <HAL_TIM_PeriodElapsedCallback+0xc14>
 80089d8:	4b24      	ldr	r3, [pc, #144]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	b21b      	sxth	r3, r3
 80089de:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80089e2:	dd0c      	ble.n	80089fe <HAL_TIM_PeriodElapsedCallback+0xc2e>
 80089e4:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b21b      	sxth	r3, r3
 80089ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80089ee:	da03      	bge.n	80089f8 <HAL_TIM_PeriodElapsedCallback+0xc28>
 80089f0:	4b1e      	ldr	r3, [pc, #120]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	b21b      	sxth	r3, r3
 80089f6:	e003      	b.n	8008a00 <HAL_TIM_PeriodElapsedCallback+0xc30>
 80089f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80089fc:	e000      	b.n	8008a00 <HAL_TIM_PeriodElapsedCallback+0xc30>
 80089fe:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8008a00:	4a1a      	ldr	r2, [pc, #104]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008a02:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 8008a04:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b21a      	sxth	r2, r3
 8008a0a:	4b19      	ldr	r3, [pc, #100]	; (8008a70 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8008a0c:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 8008a0e:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b21b      	sxth	r3, r3
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	425b      	negs	r3, r3
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	b21a      	sxth	r2, r3
 8008a1c:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 8008a1e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}

				break;
 8008a20:	e031      	b.n	8008a86 <HAL_TIM_PeriodElapsedCallback+0xcb6>
 8008a22:	bf00      	nop
 8008a24:	20000a7c 	.word	0x20000a7c
 8008a28:	20000ee0 	.word	0x20000ee0
 8008a2c:	40020000 	.word	0x40020000
 8008a30:	40020800 	.word	0x40020800
 8008a34:	20000cd4 	.word	0x20000cd4
 8008a38:	20000b80 	.word	0x20000b80
 8008a3c:	20000ee4 	.word	0x20000ee4
 8008a40:	20000a78 	.word	0x20000a78
 8008a44:	200003c8 	.word	0x200003c8
 8008a48:	20000acc 	.word	0x20000acc
 8008a4c:	2000033c 	.word	0x2000033c
 8008a50:	20000b2e 	.word	0x20000b2e
 8008a54:	20000b74 	.word	0x20000b74
 8008a58:	fffff830 	.word	0xfffff830
 8008a5c:	20000a74 	.word	0x20000a74
 8008a60:	20000ef0 	.word	0x20000ef0
 8008a64:	20000ad8 	.word	0x20000ad8
 8008a68:	20000b78 	.word	0x20000b78
 8008a6c:	20000b90 	.word	0x20000b90
 8008a70:	2000021c 	.word	0x2000021c
 8008a74:	20000aca 	.word	0x20000aca
					dgl = dgr = 0;
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4bb6      	ldr	r3, [pc, #728]	; (8008d54 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8008a7c:	460a      	mov	r2, r1
 8008a7e:	801a      	strh	r2, [r3, #0]
 8008a80:	4bb5      	ldr	r3, [pc, #724]	; (8008d58 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 8008a82:	460a      	mov	r2, r1
 8008a84:	801a      	strh	r2, [r3, #0]
				break;
 8008a86:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 8008a88:	4bb4      	ldr	r3, [pc, #720]	; (8008d5c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 8193 	beq.w	8008dbe <HAL_TIM_PeriodElapsedCallback+0xfee>
			if(W_G_flag == 0){
 8008a98:	4bb1      	ldr	r3, [pc, #708]	; (8008d60 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d130      	bne.n	8008b02 <HAL_TIM_PeriodElapsedCallback+0xd32>
				pulse_l = pulse_l + dgl + dwl;
 8008aa0:	4bad      	ldr	r3, [pc, #692]	; (8008d58 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b21b      	sxth	r3, r3
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008aae:	4bad      	ldr	r3, [pc, #692]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008ab0:	edd3 7a00 	vldr	s15, [r3]
 8008ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ab8:	4bab      	ldr	r3, [pc, #684]	; (8008d68 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	b21b      	sxth	r3, r3
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aca:	4ba6      	ldr	r3, [pc, #664]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008acc:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 8008ad0:	4ba0      	ldr	r3, [pc, #640]	; (8008d54 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b21b      	sxth	r3, r3
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ade:	4ba3      	ldr	r3, [pc, #652]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008ae0:	edd3 7a00 	vldr	s15, [r3]
 8008ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ae8:	4ba1      	ldr	r3, [pc, #644]	; (8008d70 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b21b      	sxth	r3, r3
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008afa:	4b9c      	ldr	r3, [pc, #624]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008afc:	edc3 7a00 	vstr	s15, [r3]
 8008b00:	e01d      	b.n	8008b3e <HAL_TIM_PeriodElapsedCallback+0xd6e>
			}else{
				pulse_l = pulse_l + dwl;
 8008b02:	4b99      	ldr	r3, [pc, #612]	; (8008d68 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b21b      	sxth	r3, r3
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b10:	4b94      	ldr	r3, [pc, #592]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b12:	edd3 7a00 	vldr	s15, [r3]
 8008b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b1a:	4b92      	ldr	r3, [pc, #584]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b1c:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 8008b20:	4b93      	ldr	r3, [pc, #588]	; (8008d70 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b21b      	sxth	r3, r3
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b2e:	4b8f      	ldr	r3, [pc, #572]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008b30:	edd3 7a00 	vldr	s15, [r3]
 8008b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b38:	4b8c      	ldr	r3, [pc, #560]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008b3a:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 8008b3e:	4b89      	ldr	r3, [pc, #548]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b40:	edd3 7a00 	vldr	s15, [r3]
 8008b44:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8008d74 <HAL_TIM_PeriodElapsedCallback+0xfa4>
 8008b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b50:	bfcc      	ite	gt
 8008b52:	2301      	movgt	r3, #1
 8008b54:	2300      	movle	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f083 0301 	eor.w	r3, r3, #1
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d111      	bne.n	8008b86 <HAL_TIM_PeriodElapsedCallback+0xdb6>
 8008b62:	4b80      	ldr	r3, [pc, #512]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b64:	edd3 7a00 	vldr	s15, [r3]
 8008b68:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008d78 <HAL_TIM_PeriodElapsedCallback+0xfa8>
 8008b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b74:	bfcc      	ite	gt
 8008b76:	2301      	movgt	r3, #1
 8008b78:	2300      	movle	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f083 0301 	eor.w	r3, r3, #1
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00e      	beq.n	8008ba4 <HAL_TIM_PeriodElapsedCallback+0xdd4>
 8008b86:	4b77      	ldr	r3, [pc, #476]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b88:	edd3 7a00 	vldr	s15, [r3]
 8008b8c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008d74 <HAL_TIM_PeriodElapsedCallback+0xfa4>
 8008b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b98:	dd02      	ble.n	8008ba0 <HAL_TIM_PeriodElapsedCallback+0xdd0>
 8008b9a:	4b72      	ldr	r3, [pc, #456]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <HAL_TIM_PeriodElapsedCallback+0xdd6>
 8008ba0:	4b76      	ldr	r3, [pc, #472]	; (8008d7c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008ba2:	e000      	b.n	8008ba6 <HAL_TIM_PeriodElapsedCallback+0xdd6>
 8008ba4:	4b76      	ldr	r3, [pc, #472]	; (8008d80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8008ba6:	4a6f      	ldr	r2, [pc, #444]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008ba8:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 8008baa:	4b70      	ldr	r3, [pc, #448]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008bac:	edd3 7a00 	vldr	s15, [r3]
 8008bb0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8008d74 <HAL_TIM_PeriodElapsedCallback+0xfa4>
 8008bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bbc:	bfcc      	ite	gt
 8008bbe:	2301      	movgt	r3, #1
 8008bc0:	2300      	movle	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f083 0301 	eor.w	r3, r3, #1
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d111      	bne.n	8008bf2 <HAL_TIM_PeriodElapsedCallback+0xe22>
 8008bce:	4b67      	ldr	r3, [pc, #412]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008bd0:	edd3 7a00 	vldr	s15, [r3]
 8008bd4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008d78 <HAL_TIM_PeriodElapsedCallback+0xfa8>
 8008bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be0:	bfcc      	ite	gt
 8008be2:	2301      	movgt	r3, #1
 8008be4:	2300      	movle	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	f083 0301 	eor.w	r3, r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <HAL_TIM_PeriodElapsedCallback+0xe40>
 8008bf2:	4b5e      	ldr	r3, [pc, #376]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008bf4:	edd3 7a00 	vldr	s15, [r3]
 8008bf8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008d74 <HAL_TIM_PeriodElapsedCallback+0xfa4>
 8008bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	dd02      	ble.n	8008c0c <HAL_TIM_PeriodElapsedCallback+0xe3c>
 8008c06:	4b59      	ldr	r3, [pc, #356]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	e002      	b.n	8008c12 <HAL_TIM_PeriodElapsedCallback+0xe42>
 8008c0c:	4b5b      	ldr	r3, [pc, #364]	; (8008d7c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008c0e:	e000      	b.n	8008c12 <HAL_TIM_PeriodElapsedCallback+0xe42>
 8008c10:	4b5b      	ldr	r3, [pc, #364]	; (8008d80 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8008c12:	4a56      	ldr	r2, [pc, #344]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008c14:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 8008c16:	4b53      	ldr	r3, [pc, #332]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008c18:	edd3 7a00 	vldr	s15, [r3]
 8008c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	dd17      	ble.n	8008c56 <HAL_TIM_PeriodElapsedCallback+0xe86>
				drive_dir(0, 0);
 8008c26:	2100      	movs	r1, #0
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f7fc f8a3 	bl	8004d74 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 8008c2e:	4b4d      	ldr	r3, [pc, #308]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008c30:	edd3 7a00 	vldr	s15, [r3]
 8008c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c38:	ee17 3a90 	vmov	r3, s15
 8008c3c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	2200      	movs	r2, #0
 8008c44:	4619      	mov	r1, r3
 8008c46:	484f      	ldr	r0, [pc, #316]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008c48:	f7fa ff98 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	484d      	ldr	r0, [pc, #308]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008c50:	f7fa fd2c 	bl	80036ac <HAL_TIM_PWM_Start>
 8008c54:	e020      	b.n	8008c98 <HAL_TIM_PeriodElapsedCallback+0xec8>
			}
			else if(pulse_l < 0){
 8008c56:	4b43      	ldr	r3, [pc, #268]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008c58:	edd3 7a00 	vldr	s15, [r3]
 8008c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c64:	d518      	bpl.n	8008c98 <HAL_TIM_PeriodElapsedCallback+0xec8>
				drive_dir(0, 1);
 8008c66:	2101      	movs	r1, #1
 8008c68:	2000      	movs	r0, #0
 8008c6a:	f7fc f883 	bl	8004d74 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 8008c6e:	4b3d      	ldr	r3, [pc, #244]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008c70:	edd3 7a00 	vldr	s15, [r3]
 8008c74:	eef1 7a67 	vneg.f32	s15, s15
 8008c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c7c:	ee17 3a90 	vmov	r3, s15
 8008c80:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8008c82:	f107 030c 	add.w	r3, r7, #12
 8008c86:	2200      	movs	r2, #0
 8008c88:	4619      	mov	r1, r3
 8008c8a:	483e      	ldr	r0, [pc, #248]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008c8c:	f7fa ff76 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8008c90:	2100      	movs	r1, #0
 8008c92:	483c      	ldr	r0, [pc, #240]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008c94:	f7fa fd0a 	bl	80036ac <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 8008c98:	4b34      	ldr	r3, [pc, #208]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008c9a:	edd3 7a00 	vldr	s15, [r3]
 8008c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	dd17      	ble.n	8008cd8 <HAL_TIM_PeriodElapsedCallback+0xf08>
				drive_dir(1, 0);
 8008ca8:	2100      	movs	r1, #0
 8008caa:	2001      	movs	r0, #1
 8008cac:	f7fc f862 	bl	8004d74 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8008cb0:	4b2e      	ldr	r3, [pc, #184]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008cb2:	edd3 7a00 	vldr	s15, [r3]
 8008cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cba:	ee17 3a90 	vmov	r3, s15
 8008cbe:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8008cc0:	f107 030c 	add.w	r3, r7, #12
 8008cc4:	220c      	movs	r2, #12
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	482e      	ldr	r0, [pc, #184]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008cca:	f7fa ff57 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8008cce:	210c      	movs	r1, #12
 8008cd0:	482c      	ldr	r0, [pc, #176]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008cd2:	f7fa fceb 	bl	80036ac <HAL_TIM_PWM_Start>
 8008cd6:	e020      	b.n	8008d1a <HAL_TIM_PeriodElapsedCallback+0xf4a>
			}
			else if(pulse_r < 0){
 8008cd8:	4b24      	ldr	r3, [pc, #144]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008cda:	edd3 7a00 	vldr	s15, [r3]
 8008cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce6:	d518      	bpl.n	8008d1a <HAL_TIM_PeriodElapsedCallback+0xf4a>
				drive_dir(1, 1);
 8008ce8:	2101      	movs	r1, #1
 8008cea:	2001      	movs	r0, #1
 8008cec:	f7fc f842 	bl	8004d74 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8008cf0:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008cf2:	edd3 7a00 	vldr	s15, [r3]
 8008cf6:	eef1 7a67 	vneg.f32	s15, s15
 8008cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cfe:	ee17 3a90 	vmov	r3, s15
 8008d02:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8008d04:	f107 030c 	add.w	r3, r7, #12
 8008d08:	220c      	movs	r2, #12
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	481d      	ldr	r0, [pc, #116]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008d0e:	f7fa ff35 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8008d12:	210c      	movs	r1, #12
 8008d14:	481b      	ldr	r0, [pc, #108]	; (8008d84 <HAL_TIM_PeriodElapsedCallback+0xfb4>)
 8008d16:	f7fa fcc9 	bl	80036ac <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
			}else{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
			}
*/			//----look forward----
			if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <HAL_TIM_PeriodElapsedCallback+0xfb8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b46      	cmp	r3, #70	; 0x46
 8008d20:	d803      	bhi.n	8008d2a <HAL_TIM_PeriodElapsedCallback+0xf5a>
 8008d22:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b50      	cmp	r3, #80	; 0x50
 8008d28:	d905      	bls.n	8008d36 <HAL_TIM_PeriodElapsedCallback+0xf66>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	2140      	movs	r1, #64	; 0x40
 8008d2e:	4818      	ldr	r0, [pc, #96]	; (8008d90 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8008d30:	f7f9 fac0 	bl	80022b4 <HAL_GPIO_WritePin>
 8008d34:	e004      	b.n	8008d40 <HAL_TIM_PeriodElapsedCallback+0xf70>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8008d36:	2200      	movs	r2, #0
 8008d38:	2140      	movs	r1, #64	; 0x40
 8008d3a:	4815      	ldr	r0, [pc, #84]	; (8008d90 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8008d3c:	f7f9 faba 	bl	80022b4 <HAL_GPIO_WritePin>
			}
			//----look forwardL----
			if(ad_fl > WALL_BASE_FL){
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b50      	cmp	r3, #80	; 0x50
 8008d46:	d925      	bls.n	8008d94 <HAL_TIM_PeriodElapsedCallback+0xfc4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008d48:	2201      	movs	r2, #1
 8008d4a:	2110      	movs	r1, #16
 8008d4c:	4810      	ldr	r0, [pc, #64]	; (8008d90 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8008d4e:	f7f9 fab1 	bl	80022b4 <HAL_GPIO_WritePin>
 8008d52:	e024      	b.n	8008d9e <HAL_TIM_PeriodElapsedCallback+0xfce>
 8008d54:	20000aca 	.word	0x20000aca
 8008d58:	2000021c 	.word	0x2000021c
 8008d5c:	20000ee4 	.word	0x20000ee4
 8008d60:	20000b74 	.word	0x20000b74
 8008d64:	20000b24 	.word	0x20000b24
 8008d68:	20000a74 	.word	0x20000a74
 8008d6c:	200006f8 	.word	0x200006f8
 8008d70:	20000ef0 	.word	0x20000ef0
 8008d74:	c47a0000 	.word	0xc47a0000
 8008d78:	447a0000 	.word	0x447a0000
 8008d7c:	c47a0000 	.word	0xc47a0000
 8008d80:	447a0000 	.word	0x447a0000
 8008d84:	20000b94 	.word	0x20000b94
 8008d88:	20000b80 	.word	0x20000b80
 8008d8c:	20000cd4 	.word	0x20000cd4
 8008d90:	40020000 	.word	0x40020000
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8008d94:	2200      	movs	r2, #0
 8008d96:	2110      	movs	r1, #16
 8008d98:	4849      	ldr	r0, [pc, #292]	; (8008ec0 <HAL_TIM_PeriodElapsedCallback+0x10f0>)
 8008d9a:	f7f9 fa8b 	bl	80022b4 <HAL_GPIO_WritePin>
			}
			//----look forward-R---
			if(ad_fr > WALL_BASE_FR){
 8008d9e:	4b49      	ldr	r3, [pc, #292]	; (8008ec4 <HAL_TIM_PeriodElapsedCallback+0x10f4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b46      	cmp	r3, #70	; 0x46
 8008da4:	d905      	bls.n	8008db2 <HAL_TIM_PeriodElapsedCallback+0xfe2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8008da6:	2201      	movs	r2, #1
 8008da8:	2180      	movs	r1, #128	; 0x80
 8008daa:	4845      	ldr	r0, [pc, #276]	; (8008ec0 <HAL_TIM_PeriodElapsedCallback+0x10f0>)
 8008dac:	f7f9 fa82 	bl	80022b4 <HAL_GPIO_WritePin>
 8008db0:	e00d      	b.n	8008dce <HAL_TIM_PeriodElapsedCallback+0xffe>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8008db2:	2200      	movs	r2, #0
 8008db4:	2180      	movs	r1, #128	; 0x80
 8008db6:	4842      	ldr	r0, [pc, #264]	; (8008ec0 <HAL_TIM_PeriodElapsedCallback+0x10f0>)
 8008db8:	f7f9 fa7c 	bl	80022b4 <HAL_GPIO_WritePin>
 8008dbc:	e007      	b.n	8008dce <HAL_TIM_PeriodElapsedCallback+0xffe>
			}
		}else{
			drive_dir(0, 2);
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f7fb ffd7 	bl	8004d74 <drive_dir>
			drive_dir(1, 2);
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	2001      	movs	r0, #1
 8008dca:	f7fb ffd3 	bl	8004d74 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 8008dce:	4b3e      	ldr	r3, [pc, #248]	; (8008ec8 <HAL_TIM_PeriodElapsedCallback+0x10f8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b2d      	cmp	r3, #45	; 0x2d
 8008dd4:	d906      	bls.n	8008de4 <HAL_TIM_PeriodElapsedCallback+0x1014>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008ddc:	483b      	ldr	r0, [pc, #236]	; (8008ecc <HAL_TIM_PeriodElapsedCallback+0x10fc>)
 8008dde:	f7f9 fa69 	bl	80022b4 <HAL_GPIO_WritePin>
 8008de2:	e005      	b.n	8008df0 <HAL_TIM_PeriodElapsedCallback+0x1020>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8008de4:	2200      	movs	r2, #0
 8008de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dea:	4838      	ldr	r0, [pc, #224]	; (8008ecc <HAL_TIM_PeriodElapsedCallback+0x10fc>)
 8008dec:	f7f9 fa62 	bl	80022b4 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 8008df0:	4b37      	ldr	r3, [pc, #220]	; (8008ed0 <HAL_TIM_PeriodElapsedCallback+0x1100>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b2d      	cmp	r3, #45	; 0x2d
 8008df6:	d905      	bls.n	8008e04 <HAL_TIM_PeriodElapsedCallback+0x1034>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8008df8:	2201      	movs	r2, #1
 8008dfa:	2104      	movs	r1, #4
 8008dfc:	4835      	ldr	r0, [pc, #212]	; (8008ed4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8008dfe:	f7f9 fa59 	bl	80022b4 <HAL_GPIO_WritePin>
 8008e02:	e004      	b.n	8008e0e <HAL_TIM_PeriodElapsedCallback+0x103e>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8008e04:	2200      	movs	r2, #0
 8008e06:	2104      	movs	r1, #4
 8008e08:	4832      	ldr	r0, [pc, #200]	; (8008ed4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8008e0a:	f7f9 fa53 	bl	80022b4 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 8008e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e12:	482e      	ldr	r0, [pc, #184]	; (8008ecc <HAL_TIM_PeriodElapsedCallback+0x10fc>)
 8008e14:	f7f9 fa36 	bl	8002284 <HAL_GPIO_ReadPin>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <HAL_TIM_PeriodElapsedCallback+0x105a>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8008e1e:	2201      	movs	r2, #1
 8008e20:	2108      	movs	r1, #8
 8008e22:	482c      	ldr	r0, [pc, #176]	; (8008ed4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8008e24:	f7f9 fa46 	bl	80022b4 <HAL_GPIO_WritePin>
 8008e28:	e004      	b.n	8008e34 <HAL_TIM_PeriodElapsedCallback+0x1064>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2108      	movs	r1, #8
 8008e2e:	4829      	ldr	r0, [pc, #164]	; (8008ed4 <HAL_TIM_PeriodElapsedCallback+0x1104>)
 8008e30:	f7f9 fa40 	bl	80022b4 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+360 || degree_z <= target_degree_z-360 || dist_r >= 360 || dist_l >= 360){	//360度以上回転発生でFail Safe
 8008e34:	4b28      	ldr	r3, [pc, #160]	; (8008ed8 <HAL_TIM_PeriodElapsedCallback+0x1108>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008edc <HAL_TIM_PeriodElapsedCallback+0x110c>
 8008e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e42:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0x1110>)
 8008e44:	edd3 7a00 	vldr	s15, [r3]
 8008e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e50:	d923      	bls.n	8008e9a <HAL_TIM_PeriodElapsedCallback+0x10ca>
 8008e52:	4b21      	ldr	r3, [pc, #132]	; (8008ed8 <HAL_TIM_PeriodElapsedCallback+0x1108>)
 8008e54:	edd3 7a00 	vldr	s15, [r3]
 8008e58:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008edc <HAL_TIM_PeriodElapsedCallback+0x110c>
 8008e5c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008e60:	4b1f      	ldr	r3, [pc, #124]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0x1110>)
 8008e62:	edd3 7a00 	vldr	s15, [r3]
 8008e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	da14      	bge.n	8008e9a <HAL_TIM_PeriodElapsedCallback+0x10ca>
 8008e70:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <HAL_TIM_PeriodElapsedCallback+0x1114>)
 8008e72:	edd3 7a00 	vldr	s15, [r3]
 8008e76:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008edc <HAL_TIM_PeriodElapsedCallback+0x110c>
 8008e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e82:	da0a      	bge.n	8008e9a <HAL_TIM_PeriodElapsedCallback+0x10ca>
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <HAL_TIM_PeriodElapsedCallback+0x1118>)
 8008e86:	edd3 7a00 	vldr	s15, [r3]
 8008e8a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008edc <HAL_TIM_PeriodElapsedCallback+0x110c>
 8008e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	da00      	bge.n	8008e9a <HAL_TIM_PeriodElapsedCallback+0x10ca>
			   drive_dir(1, 2);
			   full_led_write(1);
		   }
		}
	}
}
 8008e98:	e00b      	b.n	8008eb2 <HAL_TIM_PeriodElapsedCallback+0x10e2>
			   drive_dir(0, 2);
 8008e9a:	2102      	movs	r1, #2
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7fb ff69 	bl	8004d74 <drive_dir>
			   drive_dir(1, 2);
 8008ea2:	2102      	movs	r1, #2
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f7fb ff65 	bl	8004d74 <drive_dir>
			   full_led_write(1);
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f002 fd40 	bl	800b930 <full_led_write>
			   drive_dir(0, 2);
 8008eb0:	e7f3      	b.n	8008e9a <HAL_TIM_PeriodElapsedCallback+0x10ca>
}
 8008eb2:	bf00      	nop
 8008eb4:	3730      	adds	r7, #48	; 0x30
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	ecbd 8b02 	vpop	{d8}
 8008ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40020000 	.word	0x40020000
 8008ec4:	20000b80 	.word	0x20000b80
 8008ec8:	20000ee0 	.word	0x20000ee0
 8008ecc:	40020400 	.word	0x40020400
 8008ed0:	20000a78 	.word	0x20000a78
 8008ed4:	40020800 	.word	0x40020800
 8008ed8:	20000b78 	.word	0x20000b78
 8008edc:	43b40000 	.word	0x43b40000
 8008ee0:	20000ad8 	.word	0x20000ad8
 8008ee4:	20000a68 	.word	0x20000a68
 8008ee8:	20000f00 	.word	0x20000f00

08008eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008ef2:	f7f7 fff9 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008ef6:	f000 f933 	bl	8009160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008efa:	f000 fc25 	bl	8009748 <MX_GPIO_Init>
  MX_ADC1_Init();
 8008efe:	f000 f999 	bl	8009234 <MX_ADC1_Init>
  MX_TIM2_Init();
 8008f02:	f000 fa1f 	bl	8009344 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008f06:	f000 fa9d 	bl	8009444 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008f0a:	f000 fb11 	bl	8009530 <MX_TIM4_Init>
  MX_TIM6_Init();
 8008f0e:	f000 fb63 	bl	80095d8 <MX_TIM6_Init>
  MX_TIM8_Init();
 8008f12:	f000 fb97 	bl	8009644 <MX_TIM8_Init>
  MX_SPI3_Init();
 8008f16:	f000 f9df 	bl	80092d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8008f1a:	f000 fbeb 	bl	80096f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 8008f1e:	f7fb fe75 	bl	8004c0c <drive_init>
  gyro_init();
 8008f22:	f7fe fd79 	bl	8007a18 <gyro_init>
  search_init();
 8008f26:	f000 fd3d 	bl	80099a4 <search_init>
  sensor_init();
 8008f2a:	f002 fc41 	bl	800b7b0 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 8008f2e:	487c      	ldr	r0, [pc, #496]	; (8009120 <main+0x234>)
 8008f30:	f003 fb06 	bl	800c540 <puts>

  setbuf(stdout, NULL);
 8008f34:	4b7b      	ldr	r3, [pc, #492]	; (8009124 <main+0x238>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f003 fb07 	bl	800c550 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8008f42:	213c      	movs	r1, #60	; 0x3c
 8008f44:	4878      	ldr	r0, [pc, #480]	; (8009128 <main+0x23c>)
 8008f46:	f7fa fcd9 	bl	80038fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8008f4a:	213c      	movs	r1, #60	; 0x3c
 8008f4c:	4877      	ldr	r0, [pc, #476]	; (800912c <main+0x240>)
 8008f4e:	f7fa fcd5 	bl	80038fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8008f52:	4877      	ldr	r0, [pc, #476]	; (8009130 <main+0x244>)
 8008f54:	f7fa fb51 	bl	80035fa <HAL_TIM_Base_Start_IT>

  int mode = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]
  printf("Mode : %d\n", mode);
 8008f5c:	68f9      	ldr	r1, [r7, #12]
 8008f5e:	4875      	ldr	r0, [pc, #468]	; (8009134 <main+0x248>)
 8008f60:	f003 fa7a 	bl	800c458 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	b2d8      	uxtb	r0, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	b2d9      	uxtb	r1, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	f002 fc9a 	bl	800b8bc <led_write>
	  if(dist_r >= 20){
 8008f88:	4b6b      	ldr	r3, [pc, #428]	; (8009138 <main+0x24c>)
 8008f8a:	edd3 7a00 	vldr	s15, [r3]
 8008f8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9a:	db0f      	blt.n	8008fbc <main+0xd0>
		  mode++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]
		  dist_r = 0;
 8008fa2:	4b65      	ldr	r3, [pc, #404]	; (8009138 <main+0x24c>)
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	dd01      	ble.n	8008fb4 <main+0xc8>
			  mode = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]
		  }
		  printf("Mode : %d\n", mode);
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	485f      	ldr	r0, [pc, #380]	; (8009134 <main+0x248>)
 8008fb8:	f003 fa4e 	bl	800c458 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 8008fbc:	4b5e      	ldr	r3, [pc, #376]	; (8009138 <main+0x24c>)
 8008fbe:	edd3 7a00 	vldr	s15, [r3]
 8008fc2:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fce:	d80f      	bhi.n	8008ff0 <main+0x104>
		  mode--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	60fb      	str	r3, [r7, #12]
		  dist_r = 0;
 8008fd6:	4b58      	ldr	r3, [pc, #352]	; (8009138 <main+0x24c>)
 8008fd8:	f04f 0200 	mov.w	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	da01      	bge.n	8008fe8 <main+0xfc>
			  mode = 7;
 8008fe4:	2307      	movs	r3, #7
 8008fe6:	60fb      	str	r3, [r7, #12]
		  }
		  printf("Mode : %d\n", mode);
 8008fe8:	68f9      	ldr	r1, [r7, #12]
 8008fea:	4852      	ldr	r0, [pc, #328]	; (8009134 <main+0x248>)
 8008fec:	f003 fa34 	bl	800c458 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ff4:	4851      	ldr	r0, [pc, #324]	; (800913c <main+0x250>)
 8008ff6:	f7f9 f945 	bl	8002284 <HAL_GPIO_ReadPin>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1b1      	bne.n	8008f64 <main+0x78>
		  HAL_Delay(50);
 8009000:	2032      	movs	r0, #50	; 0x32
 8009002:	f7f7 ffe3 	bl	8000fcc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009006:	bf00      	nop
 8009008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800900c:	484b      	ldr	r0, [pc, #300]	; (800913c <main+0x250>)
 800900e:	f7f9 f939 	bl	8002284 <HAL_GPIO_ReadPin>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0f7      	beq.n	8009008 <main+0x11c>
		  switch(mode){
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b07      	cmp	r3, #7
 800901c:	d8a2      	bhi.n	8008f64 <main+0x78>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <main+0x138>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009045 	.word	0x08009045
 8009028:	0800904f 	.word	0x0800904f
 800902c:	0800905b 	.word	0x0800905b
 8009030:	08009067 	.word	0x08009067
 8009034:	08009079 	.word	0x08009079
 8009038:	0800907f 	.word	0x0800907f
 800903c:	080090ab 	.word	0x080090ab
 8009040:	080090ed 	.word	0x080090ed

		  	  case 0:
		  		  HAL_Delay(5000);
 8009044:	f241 3088 	movw	r0, #5000	; 0x1388
 8009048:	f7f7 ffc0 	bl	8000fcc <HAL_Delay>
		  		  break;
 800904c:	e066      	b.n	800911c <main+0x230>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800904e:	483c      	ldr	r0, [pc, #240]	; (8009140 <main+0x254>)
 8009050:	f003 fa76 	bl	800c540 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 8009054:	f7fd fcc8 	bl	80069e8 <simple_run>
		  		  break;
 8009058:	e060      	b.n	800911c <main+0x230>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800905a:	483a      	ldr	r0, [pc, #232]	; (8009144 <main+0x258>)
 800905c:	f003 fa70 	bl	800c540 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 8009060:	f7fd fdc6 	bl	8006bf0 <slalom_run>
		  		  break;
 8009064:	e05a      	b.n	800911c <main+0x230>

		  	  case 3:
		  		  //----flash 動作確認----
		  		  printf("eprom start \n");
 8009066:	4838      	ldr	r0, [pc, #224]	; (8009148 <main+0x25c>)
 8009068:	f003 fa6a 	bl	800c540 <puts>
		  		  store_map_in_eeprom();
 800906c:	f002 fb3a 	bl	800b6e4 <store_map_in_eeprom>
		  		  printf("eprom fin \n");
 8009070:	4836      	ldr	r0, [pc, #216]	; (800914c <main+0x260>)
 8009072:	f003 fa65 	bl	800c540 <puts>
		  		  break;
 8009076:	e051      	b.n	800911c <main+0x230>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 8009078:	f7fd f94c 	bl	8006314 <test_select>
		  		  break;
 800907c:	e04e      	b.n	800911c <main+0x230>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800907e:	4834      	ldr	r0, [pc, #208]	; (8009150 <main+0x264>)
 8009080:	f003 fa5e 	bl	800c540 <puts>
		  		  sensor_test();
 8009084:	f002 fd10 	bl	800baa8 <sensor_test>
		  		  break;
 8009088:	e048      	b.n	800911c <main+0x230>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800908a:	2201      	movs	r2, #1
 800908c:	2101      	movs	r1, #1
 800908e:	2001      	movs	r0, #1
 8009090:	f002 fc14 	bl	800b8bc <led_write>
					  HAL_Delay(200);
 8009094:	20c8      	movs	r0, #200	; 0xc8
 8009096:	f7f7 ff99 	bl	8000fcc <HAL_Delay>
					  led_write(0, 0, 0);
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	2000      	movs	r0, #0
 80090a0:	f002 fc0c 	bl	800b8bc <led_write>
					  HAL_Delay(200);
 80090a4:	20c8      	movs	r0, #200	; 0xc8
 80090a6:	f7f7 ff91 	bl	8000fcc <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <main+0x268>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b50      	cmp	r3, #80	; 0x50
 80090b0:	d9eb      	bls.n	800908a <main+0x19e>
				  }
				  HAL_Delay(200);
 80090b2:	20c8      	movs	r0, #200	; 0xc8
 80090b4:	f7f7 ff8a 	bl	8000fcc <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 80090b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80090bc:	f7f7 ff86 	bl	8000fcc <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 80090c0:	2300      	movs	r3, #0
 80090c2:	60bb      	str	r3, [r7, #8]
 80090c4:	e00e      	b.n	80090e4 <main+0x1f8>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 80090c6:	4a24      	ldr	r2, [pc, #144]	; (8009158 <main+0x26c>)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80090ce:	4a22      	ldr	r2, [pc, #136]	; (8009158 <main+0x26c>)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4413      	add	r3, r2
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	4619      	mov	r1, r3
 80090da:	f000 fbf3 	bl	80098c4 <buzzer>
				  for(int i=0; i<m_goal; i++){
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	3301      	adds	r3, #1
 80090e2:	60bb      	str	r3, [r7, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b0e      	cmp	r3, #14
 80090e8:	dded      	ble.n	80090c6 <main+0x1da>
		  		  }
		  		  break;
 80090ea:	e017      	b.n	800911c <main+0x230>

		  	  case 7:
		  		  //----a本番走行用----
		  		  //MF.FLAG.WEDGE = 1;
		  		  for(int i=0; i<m_select; i++){
 80090ec:	2300      	movs	r3, #0
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	e00e      	b.n	8009110 <main+0x224>
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
 80090f2:	4a1a      	ldr	r2, [pc, #104]	; (800915c <main+0x270>)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80090fa:	4a18      	ldr	r2, [pc, #96]	; (800915c <main+0x270>)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4619      	mov	r1, r3
 8009106:	f000 fbdd 	bl	80098c4 <buzzer>
		  		  for(int i=0; i<m_select; i++){
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3301      	adds	r3, #1
 800910e:	607b      	str	r3, [r7, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b01      	cmp	r3, #1
 8009114:	dded      	ble.n	80090f2 <main+0x206>
		  		  }
		  		  perfect_run();
 8009116:	f7fe f865 	bl	80071e4 <perfect_run>
		  		  break;
 800911a:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800911c:	e722      	b.n	8008f64 <main+0x78>
 800911e:	bf00      	nop
 8009120:	0800d900 	.word	0x0800d900
 8009124:	20000104 	.word	0x20000104
 8009128:	20000388 	.word	0x20000388
 800912c:	20000348 	.word	0x20000348
 8009130:	20000b30 	.word	0x20000b30
 8009134:	0800d91c 	.word	0x0800d91c
 8009138:	20000a68 	.word	0x20000a68
 800913c:	40020000 	.word	0x40020000
 8009140:	0800d928 	.word	0x0800d928
 8009144:	0800d934 	.word	0x0800d934
 8009148:	0800d940 	.word	0x0800d940
 800914c:	0800d950 	.word	0x0800d950
 8009150:	0800d95c 	.word	0x0800d95c
 8009154:	20000cd4 	.word	0x20000cd4
 8009158:	20000088 	.word	0x20000088
 800915c:	20000040 	.word	0x20000040

08009160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b094      	sub	sp, #80	; 0x50
 8009164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009166:	f107 0320 	add.w	r3, r7, #32
 800916a:	2230      	movs	r2, #48	; 0x30
 800916c:	2100      	movs	r1, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f003 f96a 	bl	800c448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	609a      	str	r2, [r3, #8]
 8009180:	60da      	str	r2, [r3, #12]
 8009182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009184:	2300      	movs	r3, #0
 8009186:	60bb      	str	r3, [r7, #8]
 8009188:	4b28      	ldr	r3, [pc, #160]	; (800922c <SystemClock_Config+0xcc>)
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	4a27      	ldr	r2, [pc, #156]	; (800922c <SystemClock_Config+0xcc>)
 800918e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009192:	6413      	str	r3, [r2, #64]	; 0x40
 8009194:	4b25      	ldr	r3, [pc, #148]	; (800922c <SystemClock_Config+0xcc>)
 8009196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800919c:	60bb      	str	r3, [r7, #8]
 800919e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091a0:	2300      	movs	r3, #0
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	4b22      	ldr	r3, [pc, #136]	; (8009230 <SystemClock_Config+0xd0>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a21      	ldr	r2, [pc, #132]	; (8009230 <SystemClock_Config+0xd0>)
 80091aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <SystemClock_Config+0xd0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091b8:	607b      	str	r3, [r7, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80091bc:	2302      	movs	r3, #2
 80091be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80091c0:	2301      	movs	r3, #1
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80091c4:	2310      	movs	r3, #16
 80091c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091c8:	2302      	movs	r3, #2
 80091ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80091cc:	2300      	movs	r3, #0
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80091d0:	2308      	movs	r3, #8
 80091d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80091d4:	23a8      	movs	r3, #168	; 0xa8
 80091d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091d8:	2302      	movs	r3, #2
 80091da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80091dc:	2304      	movs	r3, #4
 80091de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091e0:	f107 0320 	add.w	r3, r7, #32
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7f9 f87f 	bl	80022e8 <HAL_RCC_OscConfig>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80091f0:	f000 fbd1 	bl	8009996 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091f4:	230f      	movs	r3, #15
 80091f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091f8:	2302      	movs	r3, #2
 80091fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009200:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800920a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800920c:	f107 030c 	add.w	r3, r7, #12
 8009210:	2105      	movs	r1, #5
 8009212:	4618      	mov	r0, r3
 8009214:	f7f9 faaa 	bl	800276c <HAL_RCC_ClockConfig>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800921e:	f000 fbba 	bl	8009996 <Error_Handler>
  }
}
 8009222:	bf00      	nop
 8009224:	3750      	adds	r7, #80	; 0x50
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40023800 	.word	0x40023800
 8009230:	40007000 	.word	0x40007000

08009234 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800923a:	463b      	mov	r3, r7
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	605a      	str	r2, [r3, #4]
 8009242:	609a      	str	r2, [r3, #8]
 8009244:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009246:	4b21      	ldr	r3, [pc, #132]	; (80092cc <MX_ADC1_Init+0x98>)
 8009248:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <MX_ADC1_Init+0x9c>)
 800924a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800924c:	4b1f      	ldr	r3, [pc, #124]	; (80092cc <MX_ADC1_Init+0x98>)
 800924e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009252:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009254:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <MX_ADC1_Init+0x98>)
 8009256:	2200      	movs	r2, #0
 8009258:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800925a:	4b1c      	ldr	r3, [pc, #112]	; (80092cc <MX_ADC1_Init+0x98>)
 800925c:	2200      	movs	r2, #0
 800925e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009260:	4b1a      	ldr	r3, [pc, #104]	; (80092cc <MX_ADC1_Init+0x98>)
 8009262:	2200      	movs	r2, #0
 8009264:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009266:	4b19      	ldr	r3, [pc, #100]	; (80092cc <MX_ADC1_Init+0x98>)
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800926e:	4b17      	ldr	r3, [pc, #92]	; (80092cc <MX_ADC1_Init+0x98>)
 8009270:	2200      	movs	r2, #0
 8009272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009274:	4b15      	ldr	r3, [pc, #84]	; (80092cc <MX_ADC1_Init+0x98>)
 8009276:	4a17      	ldr	r2, [pc, #92]	; (80092d4 <MX_ADC1_Init+0xa0>)
 8009278:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800927a:	4b14      	ldr	r3, [pc, #80]	; (80092cc <MX_ADC1_Init+0x98>)
 800927c:	2200      	movs	r2, #0
 800927e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009280:	4b12      	ldr	r3, [pc, #72]	; (80092cc <MX_ADC1_Init+0x98>)
 8009282:	2201      	movs	r2, #1
 8009284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <MX_ADC1_Init+0x98>)
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <MX_ADC1_Init+0x98>)
 8009290:	2201      	movs	r2, #1
 8009292:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009294:	480d      	ldr	r0, [pc, #52]	; (80092cc <MX_ADC1_Init+0x98>)
 8009296:	f7f7 febb 	bl	8001010 <HAL_ADC_Init>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80092a0:	f000 fb79 	bl	8009996 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80092a8:	2301      	movs	r3, #1
 80092aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80092b0:	463b      	mov	r3, r7
 80092b2:	4619      	mov	r1, r3
 80092b4:	4805      	ldr	r0, [pc, #20]	; (80092cc <MX_ADC1_Init+0x98>)
 80092b6:	f7f8 f847 	bl	8001348 <HAL_ADC_ConfigChannel>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80092c0:	f000 fb69 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80092c4:	bf00      	nop
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000a7c 	.word	0x20000a7c
 80092d0:	40012000 	.word	0x40012000
 80092d4:	0f000001 	.word	0x0f000001

080092d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <MX_SPI3_Init+0x64>)
 80092de:	4a18      	ldr	r2, [pc, #96]	; (8009340 <MX_SPI3_Init+0x68>)
 80092e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <MX_SPI3_Init+0x64>)
 80092e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80092e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <MX_SPI3_Init+0x64>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80092f0:	4b12      	ldr	r3, [pc, #72]	; (800933c <MX_SPI3_Init+0x64>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <MX_SPI3_Init+0x64>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80092fc:	4b0f      	ldr	r3, [pc, #60]	; (800933c <MX_SPI3_Init+0x64>)
 80092fe:	2200      	movs	r2, #0
 8009300:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009302:	4b0e      	ldr	r3, [pc, #56]	; (800933c <MX_SPI3_Init+0x64>)
 8009304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009308:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <MX_SPI3_Init+0x64>)
 800930c:	2218      	movs	r2, #24
 800930e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <MX_SPI3_Init+0x64>)
 8009312:	2200      	movs	r2, #0
 8009314:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <MX_SPI3_Init+0x64>)
 8009318:	2200      	movs	r2, #0
 800931a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <MX_SPI3_Init+0x64>)
 800931e:	2200      	movs	r2, #0
 8009320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009322:	4b06      	ldr	r3, [pc, #24]	; (800933c <MX_SPI3_Init+0x64>)
 8009324:	220a      	movs	r2, #10
 8009326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009328:	4804      	ldr	r0, [pc, #16]	; (800933c <MX_SPI3_Init+0x64>)
 800932a:	f7f9 fbe7 	bl	8002afc <HAL_SPI_Init>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009334:	f000 fb2f 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009338:	bf00      	nop
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200001c4 	.word	0x200001c4
 8009340:	40003c00 	.word	0x40003c00

08009344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08e      	sub	sp, #56	; 0x38
 8009348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800934a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	605a      	str	r2, [r3, #4]
 8009354:	609a      	str	r2, [r3, #8]
 8009356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009358:	f107 0320 	add.w	r3, r7, #32
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009362:	1d3b      	adds	r3, r7, #4
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	605a      	str	r2, [r3, #4]
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	611a      	str	r2, [r3, #16]
 8009370:	615a      	str	r2, [r3, #20]
 8009372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009374:	4b32      	ldr	r3, [pc, #200]	; (8009440 <MX_TIM2_Init+0xfc>)
 8009376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800937a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800937c:	4b30      	ldr	r3, [pc, #192]	; (8009440 <MX_TIM2_Init+0xfc>)
 800937e:	2200      	movs	r2, #0
 8009380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009382:	4b2f      	ldr	r3, [pc, #188]	; (8009440 <MX_TIM2_Init+0xfc>)
 8009384:	2200      	movs	r2, #0
 8009386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <MX_TIM2_Init+0xfc>)
 800938a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800938e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009390:	4b2b      	ldr	r3, [pc, #172]	; (8009440 <MX_TIM2_Init+0xfc>)
 8009392:	2200      	movs	r2, #0
 8009394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009396:	4b2a      	ldr	r3, [pc, #168]	; (8009440 <MX_TIM2_Init+0xfc>)
 8009398:	2200      	movs	r2, #0
 800939a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800939c:	4828      	ldr	r0, [pc, #160]	; (8009440 <MX_TIM2_Init+0xfc>)
 800939e:	f7fa f901 	bl	80035a4 <HAL_TIM_Base_Init>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80093a8:	f000 faf5 	bl	8009996 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80093b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093b6:	4619      	mov	r1, r3
 80093b8:	4821      	ldr	r0, [pc, #132]	; (8009440 <MX_TIM2_Init+0xfc>)
 80093ba:	f7fa fca5 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80093c4:	f000 fae7 	bl	8009996 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80093c8:	481d      	ldr	r0, [pc, #116]	; (8009440 <MX_TIM2_Init+0xfc>)
 80093ca:	f7fa f93a 	bl	8003642 <HAL_TIM_PWM_Init>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80093d4:	f000 fadf 	bl	8009996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093d8:	2300      	movs	r3, #0
 80093da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093dc:	2300      	movs	r3, #0
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80093e0:	f107 0320 	add.w	r3, r7, #32
 80093e4:	4619      	mov	r1, r3
 80093e6:	4816      	ldr	r0, [pc, #88]	; (8009440 <MX_TIM2_Init+0xfc>)
 80093e8:	f7fb f87d 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80093f2:	f000 fad0 	bl	8009996 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093f6:	2360      	movs	r3, #96	; 0x60
 80093f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009402:	2300      	movs	r3, #0
 8009404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009406:	1d3b      	adds	r3, r7, #4
 8009408:	2200      	movs	r2, #0
 800940a:	4619      	mov	r1, r3
 800940c:	480c      	ldr	r0, [pc, #48]	; (8009440 <MX_TIM2_Init+0xfc>)
 800940e:	f7fa fbb5 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009418:	f000 fabd 	bl	8009996 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800941c:	1d3b      	adds	r3, r7, #4
 800941e:	220c      	movs	r2, #12
 8009420:	4619      	mov	r1, r3
 8009422:	4807      	ldr	r0, [pc, #28]	; (8009440 <MX_TIM2_Init+0xfc>)
 8009424:	f7fa fbaa 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800942e:	f000 fab2 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009432:	4803      	ldr	r0, [pc, #12]	; (8009440 <MX_TIM2_Init+0xfc>)
 8009434:	f002 fde6 	bl	800c004 <HAL_TIM_MspPostInit>

}
 8009438:	bf00      	nop
 800943a:	3738      	adds	r7, #56	; 0x38
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000b94 	.word	0x20000b94

08009444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08e      	sub	sp, #56	; 0x38
 8009448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800944a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	605a      	str	r2, [r3, #4]
 8009454:	609a      	str	r2, [r3, #8]
 8009456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009458:	f107 0320 	add.w	r3, r7, #32
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009462:	1d3b      	adds	r3, r7, #4
 8009464:	2200      	movs	r2, #0
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	605a      	str	r2, [r3, #4]
 800946a:	609a      	str	r2, [r3, #8]
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	611a      	str	r2, [r3, #16]
 8009470:	615a      	str	r2, [r3, #20]
 8009472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009474:	4b2c      	ldr	r3, [pc, #176]	; (8009528 <MX_TIM3_Init+0xe4>)
 8009476:	4a2d      	ldr	r2, [pc, #180]	; (800952c <MX_TIM3_Init+0xe8>)
 8009478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800947a:	4b2b      	ldr	r3, [pc, #172]	; (8009528 <MX_TIM3_Init+0xe4>)
 800947c:	223f      	movs	r2, #63	; 0x3f
 800947e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009480:	4b29      	ldr	r3, [pc, #164]	; (8009528 <MX_TIM3_Init+0xe4>)
 8009482:	2200      	movs	r2, #0
 8009484:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009486:	4b28      	ldr	r3, [pc, #160]	; (8009528 <MX_TIM3_Init+0xe4>)
 8009488:	2200      	movs	r2, #0
 800948a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800948c:	4b26      	ldr	r3, [pc, #152]	; (8009528 <MX_TIM3_Init+0xe4>)
 800948e:	2200      	movs	r2, #0
 8009490:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009492:	4b25      	ldr	r3, [pc, #148]	; (8009528 <MX_TIM3_Init+0xe4>)
 8009494:	2200      	movs	r2, #0
 8009496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009498:	4823      	ldr	r0, [pc, #140]	; (8009528 <MX_TIM3_Init+0xe4>)
 800949a:	f7fa f883 	bl	80035a4 <HAL_TIM_Base_Init>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80094a4:	f000 fa77 	bl	8009996 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80094ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094b2:	4619      	mov	r1, r3
 80094b4:	481c      	ldr	r0, [pc, #112]	; (8009528 <MX_TIM3_Init+0xe4>)
 80094b6:	f7fa fc27 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80094c0:	f000 fa69 	bl	8009996 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80094c4:	4818      	ldr	r0, [pc, #96]	; (8009528 <MX_TIM3_Init+0xe4>)
 80094c6:	f7fa f8bc 	bl	8003642 <HAL_TIM_PWM_Init>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80094d0:	f000 fa61 	bl	8009996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094d4:	2300      	movs	r3, #0
 80094d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094d8:	2300      	movs	r3, #0
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80094dc:	f107 0320 	add.w	r3, r7, #32
 80094e0:	4619      	mov	r1, r3
 80094e2:	4811      	ldr	r0, [pc, #68]	; (8009528 <MX_TIM3_Init+0xe4>)
 80094e4:	f7fa ffff 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80094ee:	f000 fa52 	bl	8009996 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094f2:	2360      	movs	r3, #96	; 0x60
 80094f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	2204      	movs	r2, #4
 8009506:	4619      	mov	r1, r3
 8009508:	4807      	ldr	r0, [pc, #28]	; (8009528 <MX_TIM3_Init+0xe4>)
 800950a:	f7fa fb37 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8009514:	f000 fa3f 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009518:	4803      	ldr	r0, [pc, #12]	; (8009528 <MX_TIM3_Init+0xe4>)
 800951a:	f002 fd73 	bl	800c004 <HAL_TIM_MspPostInit>

}
 800951e:	bf00      	nop
 8009520:	3738      	adds	r7, #56	; 0x38
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20000a20 	.word	0x20000a20
 800952c:	40000400 	.word	0x40000400

08009530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08c      	sub	sp, #48	; 0x30
 8009534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009536:	f107 030c 	add.w	r3, r7, #12
 800953a:	2224      	movs	r2, #36	; 0x24
 800953c:	2100      	movs	r1, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f002 ff82 	bl	800c448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009544:	1d3b      	adds	r3, r7, #4
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800954c:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <MX_TIM4_Init+0xa0>)
 800954e:	4a21      	ldr	r2, [pc, #132]	; (80095d4 <MX_TIM4_Init+0xa4>)
 8009550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009552:	4b1f      	ldr	r3, [pc, #124]	; (80095d0 <MX_TIM4_Init+0xa0>)
 8009554:	2200      	movs	r2, #0
 8009556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009558:	4b1d      	ldr	r3, [pc, #116]	; (80095d0 <MX_TIM4_Init+0xa0>)
 800955a:	2200      	movs	r2, #0
 800955c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800955e:	4b1c      	ldr	r3, [pc, #112]	; (80095d0 <MX_TIM4_Init+0xa0>)
 8009560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009566:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <MX_TIM4_Init+0xa0>)
 8009568:	2200      	movs	r2, #0
 800956a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800956c:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <MX_TIM4_Init+0xa0>)
 800956e:	2200      	movs	r2, #0
 8009570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009572:	2303      	movs	r3, #3
 8009574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009576:	2300      	movs	r3, #0
 8009578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800957a:	2301      	movs	r3, #1
 800957c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800957e:	2300      	movs	r3, #0
 8009580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009586:	2300      	movs	r3, #0
 8009588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800958a:	2301      	movs	r3, #1
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800958e:	2300      	movs	r3, #0
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009596:	f107 030c 	add.w	r3, r7, #12
 800959a:	4619      	mov	r1, r3
 800959c:	480c      	ldr	r0, [pc, #48]	; (80095d0 <MX_TIM4_Init+0xa0>)
 800959e:	f7fa f91b 	bl	80037d8 <HAL_TIM_Encoder_Init>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80095a8:	f000 f9f5 	bl	8009996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095ac:	2300      	movs	r3, #0
 80095ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	4619      	mov	r1, r3
 80095b8:	4805      	ldr	r0, [pc, #20]	; (80095d0 <MX_TIM4_Init+0xa0>)
 80095ba:	f7fa ff94 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80095c4:	f000 f9e7 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80095c8:	bf00      	nop
 80095ca:	3730      	adds	r7, #48	; 0x30
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000388 	.word	0x20000388
 80095d4:	40000800 	.word	0x40000800

080095d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095de:	463b      	mov	r3, r7
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80095e6:	4b15      	ldr	r3, [pc, #84]	; (800963c <MX_TIM6_Init+0x64>)
 80095e8:	4a15      	ldr	r2, [pc, #84]	; (8009640 <MX_TIM6_Init+0x68>)
 80095ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 80095ec:	4b13      	ldr	r3, [pc, #76]	; (800963c <MX_TIM6_Init+0x64>)
 80095ee:	2253      	movs	r2, #83	; 0x53
 80095f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095f2:	4b12      	ldr	r3, [pc, #72]	; (800963c <MX_TIM6_Init+0x64>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80095f8:	4b10      	ldr	r3, [pc, #64]	; (800963c <MX_TIM6_Init+0x64>)
 80095fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80095fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <MX_TIM6_Init+0x64>)
 8009602:	2200      	movs	r2, #0
 8009604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009606:	480d      	ldr	r0, [pc, #52]	; (800963c <MX_TIM6_Init+0x64>)
 8009608:	f7f9 ffcc 	bl	80035a4 <HAL_TIM_Base_Init>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8009612:	f000 f9c0 	bl	8009996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009616:	2300      	movs	r3, #0
 8009618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800961e:	463b      	mov	r3, r7
 8009620:	4619      	mov	r1, r3
 8009622:	4806      	ldr	r0, [pc, #24]	; (800963c <MX_TIM6_Init+0x64>)
 8009624:	f7fa ff5f 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800962e:	f000 f9b2 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000b30 	.word	0x20000b30
 8009640:	40001000 	.word	0x40001000

08009644 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08c      	sub	sp, #48	; 0x30
 8009648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	2224      	movs	r2, #36	; 0x24
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f002 fef8 	bl	800c448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009658:	1d3b      	adds	r3, r7, #4
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009660:	4b22      	ldr	r3, [pc, #136]	; (80096ec <MX_TIM8_Init+0xa8>)
 8009662:	4a23      	ldr	r2, [pc, #140]	; (80096f0 <MX_TIM8_Init+0xac>)
 8009664:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009666:	4b21      	ldr	r3, [pc, #132]	; (80096ec <MX_TIM8_Init+0xa8>)
 8009668:	2200      	movs	r2, #0
 800966a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800966c:	4b1f      	ldr	r3, [pc, #124]	; (80096ec <MX_TIM8_Init+0xa8>)
 800966e:	2200      	movs	r2, #0
 8009670:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009672:	4b1e      	ldr	r3, [pc, #120]	; (80096ec <MX_TIM8_Init+0xa8>)
 8009674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009678:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800967a:	4b1c      	ldr	r3, [pc, #112]	; (80096ec <MX_TIM8_Init+0xa8>)
 800967c:	2200      	movs	r2, #0
 800967e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009680:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <MX_TIM8_Init+0xa8>)
 8009682:	2200      	movs	r2, #0
 8009684:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009686:	4b19      	ldr	r3, [pc, #100]	; (80096ec <MX_TIM8_Init+0xa8>)
 8009688:	2200      	movs	r2, #0
 800968a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800968c:	2303      	movs	r3, #3
 800968e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009694:	2301      	movs	r3, #1
 8009696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009698:	2300      	movs	r3, #0
 800969a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80096a0:	2300      	movs	r3, #0
 80096a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80096a4:	2301      	movs	r3, #1
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80096a8:	2300      	movs	r3, #0
 80096aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80096b0:	f107 030c 	add.w	r3, r7, #12
 80096b4:	4619      	mov	r1, r3
 80096b6:	480d      	ldr	r0, [pc, #52]	; (80096ec <MX_TIM8_Init+0xa8>)
 80096b8:	f7fa f88e 	bl	80037d8 <HAL_TIM_Encoder_Init>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80096c2:	f000 f968 	bl	8009996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80096ce:	1d3b      	adds	r3, r7, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	4806      	ldr	r0, [pc, #24]	; (80096ec <MX_TIM8_Init+0xa8>)
 80096d4:	f7fa ff07 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80096de:	f000 f95a 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80096e2:	bf00      	nop
 80096e4:	3730      	adds	r7, #48	; 0x30
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000348 	.word	0x20000348
 80096f0:	40010400 	.word	0x40010400

080096f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80096f8:	4b11      	ldr	r3, [pc, #68]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 80096fa:	4a12      	ldr	r2, [pc, #72]	; (8009744 <MX_USART1_UART_Init+0x50>)
 80096fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80096fe:	4b10      	ldr	r3, [pc, #64]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 8009700:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009706:	4b0e      	ldr	r3, [pc, #56]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 8009708:	2200      	movs	r2, #0
 800970a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800970c:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 800970e:	2200      	movs	r2, #0
 8009710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009712:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 8009714:	2200      	movs	r2, #0
 8009716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009718:	4b09      	ldr	r3, [pc, #36]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 800971a:	220c      	movs	r2, #12
 800971c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800971e:	4b08      	ldr	r3, [pc, #32]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 8009720:	2200      	movs	r2, #0
 8009722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 8009726:	2200      	movs	r2, #0
 8009728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800972a:	4805      	ldr	r0, [pc, #20]	; (8009740 <MX_USART1_UART_Init+0x4c>)
 800972c:	f7fa ff34 	bl	8004598 <HAL_UART_Init>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009736:	f000 f92e 	bl	8009996 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800973a:	bf00      	nop
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000ae0 	.word	0x20000ae0
 8009744:	40011000 	.word	0x40011000

08009748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800974e:	f107 0314 	add.w	r3, r7, #20
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	605a      	str	r2, [r3, #4]
 8009758:	609a      	str	r2, [r3, #8]
 800975a:	60da      	str	r2, [r3, #12]
 800975c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800975e:	2300      	movs	r3, #0
 8009760:	613b      	str	r3, [r7, #16]
 8009762:	4b53      	ldr	r3, [pc, #332]	; (80098b0 <MX_GPIO_Init+0x168>)
 8009764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009766:	4a52      	ldr	r2, [pc, #328]	; (80098b0 <MX_GPIO_Init+0x168>)
 8009768:	f043 0304 	orr.w	r3, r3, #4
 800976c:	6313      	str	r3, [r2, #48]	; 0x30
 800976e:	4b50      	ldr	r3, [pc, #320]	; (80098b0 <MX_GPIO_Init+0x168>)
 8009770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	613b      	str	r3, [r7, #16]
 8009778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	4b4c      	ldr	r3, [pc, #304]	; (80098b0 <MX_GPIO_Init+0x168>)
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009782:	4a4b      	ldr	r2, [pc, #300]	; (80098b0 <MX_GPIO_Init+0x168>)
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	6313      	str	r3, [r2, #48]	; 0x30
 800978a:	4b49      	ldr	r3, [pc, #292]	; (80098b0 <MX_GPIO_Init+0x168>)
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009796:	2300      	movs	r3, #0
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	4b45      	ldr	r3, [pc, #276]	; (80098b0 <MX_GPIO_Init+0x168>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979e:	4a44      	ldr	r2, [pc, #272]	; (80098b0 <MX_GPIO_Init+0x168>)
 80097a0:	f043 0302 	orr.w	r3, r3, #2
 80097a4:	6313      	str	r3, [r2, #48]	; 0x30
 80097a6:	4b42      	ldr	r3, [pc, #264]	; (80098b0 <MX_GPIO_Init+0x168>)
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	60bb      	str	r3, [r7, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80097b2:	2300      	movs	r3, #0
 80097b4:	607b      	str	r3, [r7, #4]
 80097b6:	4b3e      	ldr	r3, [pc, #248]	; (80098b0 <MX_GPIO_Init+0x168>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	4a3d      	ldr	r2, [pc, #244]	; (80098b0 <MX_GPIO_Init+0x168>)
 80097bc:	f043 0308 	orr.w	r3, r3, #8
 80097c0:	6313      	str	r3, [r2, #48]	; 0x30
 80097c2:	4b3b      	ldr	r3, [pc, #236]	; (80098b0 <MX_GPIO_Init+0x168>)
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	607b      	str	r3, [r7, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80097ce:	2200      	movs	r2, #0
 80097d0:	f24e 213c 	movw	r1, #57916	; 0xe23c
 80097d4:	4837      	ldr	r0, [pc, #220]	; (80098b4 <MX_GPIO_Init+0x16c>)
 80097d6:	f7f8 fd6d 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80097da:	2200      	movs	r2, #0
 80097dc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80097e0:	4835      	ldr	r0, [pc, #212]	; (80098b8 <MX_GPIO_Init+0x170>)
 80097e2:	f7f8 fd67 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 80097e6:	2200      	movs	r2, #0
 80097e8:	f242 7103 	movw	r1, #9987	; 0x2703
 80097ec:	4833      	ldr	r0, [pc, #204]	; (80098bc <MX_GPIO_Init+0x174>)
 80097ee:	f7f8 fd61 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80097f2:	2200      	movs	r2, #0
 80097f4:	2104      	movs	r1, #4
 80097f6:	4832      	ldr	r0, [pc, #200]	; (80098c0 <MX_GPIO_Init+0x178>)
 80097f8:	f7f8 fd5c 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80097fc:	f24e 233c 	movw	r3, #57916	; 0xe23c
 8009800:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009802:	2301      	movs	r3, #1
 8009804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800980a:	2300      	movs	r3, #0
 800980c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800980e:	f107 0314 	add.w	r3, r7, #20
 8009812:	4619      	mov	r1, r3
 8009814:	4827      	ldr	r0, [pc, #156]	; (80098b4 <MX_GPIO_Init+0x16c>)
 8009816:	f7f8 fb9b 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800981a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800981e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009820:	2301      	movs	r3, #1
 8009822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009824:	2300      	movs	r3, #0
 8009826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009828:	2300      	movs	r3, #0
 800982a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	4619      	mov	r1, r3
 8009832:	4821      	ldr	r0, [pc, #132]	; (80098b8 <MX_GPIO_Init+0x170>)
 8009834:	f7f8 fb8c 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 8009838:	f242 7303 	movw	r3, #9987	; 0x2703
 800983c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800983e:	2301      	movs	r3, #1
 8009840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009842:	2300      	movs	r3, #0
 8009844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009846:	2300      	movs	r3, #0
 8009848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800984a:	f107 0314 	add.w	r3, r7, #20
 800984e:	4619      	mov	r1, r3
 8009850:	481a      	ldr	r0, [pc, #104]	; (80098bc <MX_GPIO_Init+0x174>)
 8009852:	f7f8 fb7d 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800985a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009860:	2301      	movs	r3, #1
 8009862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009864:	f107 0314 	add.w	r3, r7, #20
 8009868:	4619      	mov	r1, r3
 800986a:	4814      	ldr	r0, [pc, #80]	; (80098bc <MX_GPIO_Init+0x174>)
 800986c:	f7f8 fb70 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009876:	2300      	movs	r3, #0
 8009878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987a:	2300      	movs	r3, #0
 800987c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800987e:	f107 0314 	add.w	r3, r7, #20
 8009882:	4619      	mov	r1, r3
 8009884:	480c      	ldr	r0, [pc, #48]	; (80098b8 <MX_GPIO_Init+0x170>)
 8009886:	f7f8 fb63 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800988a:	2304      	movs	r3, #4
 800988c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800988e:	2301      	movs	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009896:	2300      	movs	r3, #0
 8009898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800989a:	f107 0314 	add.w	r3, r7, #20
 800989e:	4619      	mov	r1, r3
 80098a0:	4807      	ldr	r0, [pc, #28]	; (80098c0 <MX_GPIO_Init+0x178>)
 80098a2:	f7f8 fb55 	bl	8001f50 <HAL_GPIO_Init>

}
 80098a6:	bf00      	nop
 80098a8:	3728      	adds	r7, #40	; 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	40023800 	.word	0x40023800
 80098b4:	40020800 	.word	0x40020800
 80098b8:	40020000 	.word	0x40020000
 80098bc:	40020400 	.word	0x40020400
 80098c0:	40020c00 	.word	0x40020c00

080098c4 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	; 0x28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098ce:	2360      	movs	r3, #96	; 0x60
 80098d0:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 80098da:	4a15      	ldr	r2, [pc, #84]	; (8009930 <buzzer+0x6c>)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	fb92 f3f3 	sdiv	r3, r2, r3
 80098e2:	4a14      	ldr	r2, [pc, #80]	; (8009934 <buzzer+0x70>)
 80098e4:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 80098e6:	4b13      	ldr	r3, [pc, #76]	; (8009934 <buzzer+0x70>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4b13      	ldr	r3, [pc, #76]	; (8009938 <buzzer+0x74>)
 80098ec:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 80098ee:	4b11      	ldr	r3, [pc, #68]	; (8009934 <buzzer+0x70>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a12      	ldr	r2, [pc, #72]	; (800993c <buzzer+0x78>)
 80098f4:	fb82 1203 	smull	r1, r2, r2, r3
 80098f8:	1092      	asrs	r2, r2, #2
 80098fa:	17db      	asrs	r3, r3, #31
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 8009900:	f107 030c 	add.w	r3, r7, #12
 8009904:	2204      	movs	r2, #4
 8009906:	4619      	mov	r1, r3
 8009908:	480d      	ldr	r0, [pc, #52]	; (8009940 <buzzer+0x7c>)
 800990a:	f7fa f937 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800990e:	2104      	movs	r1, #4
 8009910:	480b      	ldr	r0, [pc, #44]	; (8009940 <buzzer+0x7c>)
 8009912:	f7f9 fecb 	bl	80036ac <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	f7f7 fb57 	bl	8000fcc <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800991e:	2104      	movs	r1, #4
 8009920:	4807      	ldr	r0, [pc, #28]	; (8009940 <buzzer+0x7c>)
 8009922:	f7f9 ff01 	bl	8003728 <HAL_TIM_PWM_Stop>
}
 8009926:	bf00      	nop
 8009928:	3728      	adds	r7, #40	; 0x28
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	000f4240 	.word	0x000f4240
 8009934:	20000340 	.word	0x20000340
 8009938:	40000400 	.word	0x40000400
 800993c:	66666667 	.word	0x66666667
 8009940:	20000a20 	.word	0x20000a20

08009944 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800994e:	f107 0308 	add.w	r3, r7, #8
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	609a      	str	r2, [r3, #8]
 800995a:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8009960:	2301      	movs	r3, #1
 8009962:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009964:	2300      	movs	r3, #0
 8009966:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7f7 fce8 	bl	8001348 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7f7 fb8d 	bl	8001098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800997e:	2164      	movs	r1, #100	; 0x64
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7f7 fc4f 	bl	8001224 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7f7 fcd0 	bl	800132c <HAL_ADC_GetValue>
 800998c:	4603      	mov	r3, r0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009996:	b480      	push	{r7}
 8009998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <search_init>:

#include "global.h"

void search_init(void){
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 80099a8:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <search_init+0x2c>)
 80099aa:	2209      	movs	r2, #9
 80099ac:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 80099ae:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <search_init+0x30>)
 80099b0:	2206      	movs	r2, #6
 80099b2:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 80099b4:	f000 fd36 	bl	800a424 <map_Init>
	mouse.x = 0;
 80099b8:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <search_init+0x34>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 80099be:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <search_init+0x34>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <search_init+0x34>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	709a      	strb	r2, [r3, #2]
}
 80099ca:	bf00      	nop
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000b2d 	.word	0x20000b2d
 80099d4:	20000ac8 	.word	0x20000ac8
 80099d8:	20000b8c 	.word	0x20000b8c

080099dc <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 80099e0:	4b37      	ldr	r3, [pc, #220]	; (8009ac0 <searchA+0xe4>)
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <searchA+0x16>
		load_map_from_eeprom();
 80099ee:	f001 feb3 	bl	800b758 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 80099f2:	f001 ff29 	bl	800b848 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 80099f6:	4b33      	ldr	r3, [pc, #204]	; (8009ac4 <searchA+0xe8>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	4b30      	ldr	r3, [pc, #192]	; (8009ac4 <searchA+0xe8>)
 8009a02:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 8009a04:	f000 fd7a 	bl	800a4fc <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 8009a08:	4b2f      	ldr	r3, [pc, #188]	; (8009ac8 <searchA+0xec>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009a0e:	f000 fee9 	bl	800a7e4 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009a12:	f001 fa25 	bl	800ae60 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009a16:	4b2c      	ldr	r3, [pc, #176]	; (8009ac8 <searchA+0xec>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	b2d1      	uxtb	r1, r2
 8009a1e:	4a2a      	ldr	r2, [pc, #168]	; (8009ac8 <searchA+0xec>)
 8009a20:	7011      	strb	r1, [r2, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <searchA+0xf0>)
 8009a26:	5c9b      	ldrb	r3, [r3, r2]
 8009a28:	2b22      	cmp	r3, #34	; 0x22
 8009a2a:	d00b      	beq.n	8009a44 <searchA+0x68>
 8009a2c:	2b22      	cmp	r3, #34	; 0x22
 8009a2e:	dc02      	bgt.n	8009a36 <searchA+0x5a>
 8009a30:	2b11      	cmp	r3, #17
 8009a32:	d012      	beq.n	8009a5a <searchA+0x7e>
 8009a34:	e015      	b.n	8009a62 <searchA+0x86>
 8009a36:	2b44      	cmp	r3, #68	; 0x44
 8009a38:	d001      	beq.n	8009a3e <searchA+0x62>
 8009a3a:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 8009a3c:	e011      	b.n	8009a62 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 8009a3e:	f7fb fd8f 	bl	8005560 <rotate_R90>
				break;
 8009a42:	e00e      	b.n	8009a62 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 8009a44:	f7fb ff24 	bl	8005890 <rotate_180>
				if(wall_info & 0x88){
 8009a48:	4b1e      	ldr	r3, [pc, #120]	; (8009ac4 <searchA+0xe8>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <searchA+0x84>
					set_position();
 8009a54:	f7fb fc5a 	bl	800530c <set_position>
				}
				break;
 8009a58:	e002      	b.n	8009a60 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 8009a5a:	f7fb fe4d 	bl	80056f8 <rotate_L90>
				break;
 8009a5e:	e000      	b.n	8009a62 <searchA+0x86>
				break;
 8009a60:	bf00      	nop
		}

		drive_wait();
 8009a62:	2032      	movs	r0, #50	; 0x32
 8009a64:	f7f7 fab2 	bl	8000fcc <HAL_Delay>
		one_section();										//a前進する
 8009a68:	f7fb fd0a 	bl	8005480 <one_section>
		drive_wait();
 8009a6c:	2032      	movs	r0, #50	; 0x32
 8009a6e:	f7f7 faad 	bl	8000fcc <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 8009a72:	f000 fc7f 	bl	800a374 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 8009a76:	f000 fcb7 	bl	800a3e8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 8009a7a:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <searchA+0xf4>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <searchA+0xf8>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d1c6      	bne.n	8009a16 <searchA+0x3a>
 8009a88:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <searchA+0xf4>)
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	4b12      	ldr	r3, [pc, #72]	; (8009ad8 <searchA+0xfc>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d1bf      	bne.n	8009a16 <searchA+0x3a>

	printf("goal\n");
 8009a96:	4811      	ldr	r0, [pc, #68]	; (8009adc <searchA+0x100>)
 8009a98:	f002 fd52 	bl	800c540 <puts>
	HAL_Delay(2000);										//aスタートでは***2秒以上***停止しなくてはならない
 8009a9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009aa0:	f7f7 fa94 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009aa4:	f7fb fef4 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <searchA+0xe4>)
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <searchA+0xde>
		store_map_in_eeprom();
 8009ab6:	f001 fe15 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 8009aba:	bf00      	nop
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000ee4 	.word	0x20000ee4
 8009ac4:	20000344 	.word	0x20000344
 8009ac8:	20000f0c 	.word	0x20000f0c
 8009acc:	20000bd4 	.word	0x20000bd4
 8009ad0:	20000b8c 	.word	0x20000b8c
 8009ad4:	20000b2d 	.word	0x20000b2d
 8009ad8:	20000ac8 	.word	0x20000ac8
 8009adc:	0800d96c 	.word	0x0800d96c

08009ae0 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009ae4:	4b3c      	ldr	r3, [pc, #240]	; (8009bd8 <searchB+0xf8>)
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <searchB+0x16>
		load_map_from_eeprom();
 8009af2:	f001 fe31 	bl	800b758 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009af6:	f001 fea7 	bl	800b848 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009afa:	4b38      	ldr	r3, [pc, #224]	; (8009bdc <searchB+0xfc>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	4b35      	ldr	r3, [pc, #212]	; (8009bdc <searchB+0xfc>)
 8009b06:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 8009b08:	f000 fcf8 	bl	800a4fc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 8009b0c:	f7fb fc08 	bl	8005320 <start_sectionA>
	adv_pos();
 8009b10:	f000 fc30 	bl	800a374 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 8009b14:	f000 fcf2 	bl	800a4fc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009b18:	4b31      	ldr	r3, [pc, #196]	; (8009be0 <searchB+0x100>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009b1e:	f000 fe61 	bl	800a7e4 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009b22:	f001 f99d 	bl	800ae60 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009b26:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <searchB+0x100>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	b2d1      	uxtb	r1, r2
 8009b2e:	4a2c      	ldr	r2, [pc, #176]	; (8009be0 <searchB+0x100>)
 8009b30:	7011      	strb	r1, [r2, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	4b2b      	ldr	r3, [pc, #172]	; (8009be4 <searchB+0x104>)
 8009b36:	5c9b      	ldrb	r3, [r3, r2]
 8009b38:	2b22      	cmp	r3, #34	; 0x22
 8009b3a:	d012      	beq.n	8009b62 <searchB+0x82>
 8009b3c:	2b22      	cmp	r3, #34	; 0x22
 8009b3e:	dc02      	bgt.n	8009b46 <searchB+0x66>
 8009b40:	2b11      	cmp	r3, #17
 8009b42:	d01d      	beq.n	8009b80 <searchB+0xa0>
 8009b44:	e023      	b.n	8009b8e <searchB+0xae>
 8009b46:	2b44      	cmp	r3, #68	; 0x44
 8009b48:	d004      	beq.n	8009b54 <searchB+0x74>
 8009b4a:	2b88      	cmp	r3, #136	; 0x88
 8009b4c:	d11f      	bne.n	8009b8e <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 8009b4e:	f7fb fced 	bl	800552c <one_sectionU>
				break;
 8009b52:	e01c      	b.n	8009b8e <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 8009b54:	f7fb fc2a 	bl	80053ac <half_sectionD>
				rotate_R90();
 8009b58:	f7fb fd02 	bl	8005560 <rotate_R90>
				half_sectionA();
 8009b5c:	f7fb fc0c 	bl	8005378 <half_sectionA>
				break;
 8009b60:	e015      	b.n	8009b8e <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009b62:	f7fb fc23 	bl	80053ac <half_sectionD>
				rotate_180();
 8009b66:	f7fb fe93 	bl	8005890 <rotate_180>
				if(wall_info & 0x88){
 8009b6a:	4b1c      	ldr	r3, [pc, #112]	; (8009bdc <searchB+0xfc>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <searchB+0x9a>
					set_position();
 8009b76:	f7fb fbc9 	bl	800530c <set_position>
				}
				half_sectionA();
 8009b7a:	f7fb fbfd 	bl	8005378 <half_sectionA>
				break;
 8009b7e:	e006      	b.n	8009b8e <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 8009b80:	f7fb fc14 	bl	80053ac <half_sectionD>
				rotate_L90();
 8009b84:	f7fb fdb8 	bl	80056f8 <rotate_L90>
				half_sectionA();
 8009b88:	f7fb fbf6 	bl	8005378 <half_sectionA>
				break;
 8009b8c:	bf00      	nop
		}
		adv_pos();
 8009b8e:	f000 fbf1 	bl	800a374 <adv_pos>
		conf_route();
 8009b92:	f000 fc29 	bl	800a3e8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <searchB+0x108>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	4b13      	ldr	r3, [pc, #76]	; (8009bec <searchB+0x10c>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d1c0      	bne.n	8009b26 <searchB+0x46>
 8009ba4:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <searchB+0x108>)
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <searchB+0x110>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d1b9      	bne.n	8009b26 <searchB+0x46>

	half_sectionD();
 8009bb2:	f7fb fbfb 	bl	80053ac <half_sectionD>

	HAL_Delay(2000);
 8009bb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009bba:	f7f7 fa07 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009bbe:	f7fb fe67 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 8009bc2:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <searchB+0xf8>)
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <searchB+0xf4>
		store_map_in_eeprom();
 8009bd0:	f001 fd88 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 8009bd4:	bf00      	nop
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000ee4 	.word	0x20000ee4
 8009bdc:	20000344 	.word	0x20000344
 8009be0:	20000f0c 	.word	0x20000f0c
 8009be4:	20000bd4 	.word	0x20000bd4
 8009be8:	20000b8c 	.word	0x20000b8c
 8009bec:	20000b2d 	.word	0x20000b2d
 8009bf0:	20000ac8 	.word	0x20000ac8

08009bf4 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009bf8:	4b4d      	ldr	r3, [pc, #308]	; (8009d30 <searchC+0x13c>)
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <searchC+0x16>
		load_map_from_eeprom();
 8009c06:	f001 fda7 	bl	800b758 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009c0a:	4b49      	ldr	r3, [pc, #292]	; (8009d30 <searchC+0x13c>)
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <searchC+0x28>
 8009c18:	f001 fe16 	bl	800b848 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009c1c:	4b44      	ldr	r3, [pc, #272]	; (8009d30 <searchC+0x13c>)
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <searchC+0x44>
 8009c2a:	4b42      	ldr	r3, [pc, #264]	; (8009d34 <searchC+0x140>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	4b3f      	ldr	r3, [pc, #252]	; (8009d34 <searchC+0x140>)
 8009c36:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009c38:	4b3d      	ldr	r3, [pc, #244]	; (8009d30 <searchC+0x13c>)
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <searchC+0x56>
 8009c46:	f000 fc59 	bl	800a4fc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 8009c4a:	f7fb fb69 	bl	8005320 <start_sectionA>
	adv_pos();
 8009c4e:	f000 fb91 	bl	800a374 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009c52:	4b37      	ldr	r3, [pc, #220]	; (8009d30 <searchC+0x13c>)
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <searchC+0x70>
 8009c60:	f000 fc4c 	bl	800a4fc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009c64:	4b34      	ldr	r3, [pc, #208]	; (8009d38 <searchC+0x144>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009c6a:	f000 fdbb 	bl	800a7e4 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009c6e:	f001 f8f7 	bl	800ae60 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009c72:	4b31      	ldr	r3, [pc, #196]	; (8009d38 <searchC+0x144>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	b2d1      	uxtb	r1, r2
 8009c7a:	4a2f      	ldr	r2, [pc, #188]	; (8009d38 <searchC+0x144>)
 8009c7c:	7011      	strb	r1, [r2, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	4b2e      	ldr	r3, [pc, #184]	; (8009d3c <searchC+0x148>)
 8009c82:	5c9b      	ldrb	r3, [r3, r2]
 8009c84:	2b22      	cmp	r3, #34	; 0x22
 8009c86:	d00e      	beq.n	8009ca6 <searchC+0xb2>
 8009c88:	2b22      	cmp	r3, #34	; 0x22
 8009c8a:	dc02      	bgt.n	8009c92 <searchC+0x9e>
 8009c8c:	2b11      	cmp	r3, #17
 8009c8e:	d020      	beq.n	8009cd2 <searchC+0xde>
 8009c90:	e022      	b.n	8009cd8 <searchC+0xe4>
 8009c92:	2b44      	cmp	r3, #68	; 0x44
 8009c94:	d004      	beq.n	8009ca0 <searchC+0xac>
 8009c96:	2b88      	cmp	r3, #136	; 0x88
 8009c98:	d11e      	bne.n	8009cd8 <searchC+0xe4>
			//----a前進----
			case 0x88:
				one_sectionU();
 8009c9a:	f7fb fc47 	bl	800552c <one_sectionU>
				break;
 8009c9e:	e01b      	b.n	8009cd8 <searchC+0xe4>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 8009ca0:	f7fb fec0 	bl	8005a24 <slalom_R90>

				break;
 8009ca4:	e018      	b.n	8009cd8 <searchC+0xe4>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009ca6:	f7fb fb81 	bl	80053ac <half_sectionD>
				rotate_180();
 8009caa:	f7fb fdf1 	bl	8005890 <rotate_180>
				if(wall_info & 0x88 && MF.FLAG.SCND == 0){
 8009cae:	4b21      	ldr	r3, [pc, #132]	; (8009d34 <searchC+0x140>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d008      	beq.n	8009ccc <searchC+0xd8>
 8009cba:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <searchC+0x13c>)
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d101      	bne.n	8009ccc <searchC+0xd8>
					set_position();
 8009cc8:	f7fb fb20 	bl	800530c <set_position>
				}
				half_sectionA();
 8009ccc:	f7fb fb54 	bl	8005378 <half_sectionA>
				break;
 8009cd0:	e002      	b.n	8009cd8 <searchC+0xe4>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 8009cd2:	f7fb ff9f 	bl	8005c14 <slalom_L90>
				break;
 8009cd6:	bf00      	nop
		}
		adv_pos();
 8009cd8:	f000 fb4c 	bl	800a374 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 8009cdc:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <searchC+0x13c>)
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <searchC+0xfa>
 8009cea:	f000 fb7d 	bl	800a3e8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <searchC+0x14c>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	4b13      	ldr	r3, [pc, #76]	; (8009d44 <searchC+0x150>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d1ba      	bne.n	8009c72 <searchC+0x7e>
 8009cfc:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <searchC+0x14c>)
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <searchC+0x154>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d1b3      	bne.n	8009c72 <searchC+0x7e>

	half_sectionD();
 8009d0a:	f7fb fb4f 	bl	80053ac <half_sectionD>

	HAL_Delay(2000);
 8009d0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d12:	f7f7 f95b 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009d16:	f7fb fdbb 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 8009d1a:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <searchC+0x13c>)
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <searchC+0x138>
		store_map_in_eeprom();
 8009d28:	f001 fcdc 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 8009d2c:	bf00      	nop
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20000ee4 	.word	0x20000ee4
 8009d34:	20000344 	.word	0x20000344
 8009d38:	20000f0c 	.word	0x20000f0c
 8009d3c:	20000bd4 	.word	0x20000bd4
 8009d40:	20000b8c 	.word	0x20000b8c
 8009d44:	20000b2d 	.word	0x20000b2d
 8009d48:	20000ac8 	.word	0x20000ac8

08009d4c <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009d50:	4b4a      	ldr	r3, [pc, #296]	; (8009e7c <searchC2+0x130>)
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <searchC2+0x16>
		load_map_from_eeprom();
 8009d5e:	f001 fcfb 	bl	800b758 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009d62:	4b46      	ldr	r3, [pc, #280]	; (8009e7c <searchC2+0x130>)
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <searchC2+0x28>
 8009d70:	f001 fd6a 	bl	800b848 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009d74:	4b41      	ldr	r3, [pc, #260]	; (8009e7c <searchC2+0x130>)
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <searchC2+0x44>
 8009d82:	4b3f      	ldr	r3, [pc, #252]	; (8009e80 <searchC2+0x134>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	4b3c      	ldr	r3, [pc, #240]	; (8009e80 <searchC2+0x134>)
 8009d8e:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009d90:	4b3a      	ldr	r3, [pc, #232]	; (8009e7c <searchC2+0x130>)
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d101      	bne.n	8009da2 <searchC2+0x56>
 8009d9e:	f000 fbad 	bl	800a4fc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 8009da2:	f7fb fb13 	bl	80053cc <start_sectionA2>
	adv_pos();
 8009da6:	f000 fae5 	bl	800a374 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009daa:	4b34      	ldr	r3, [pc, #208]	; (8009e7c <searchC2+0x130>)
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <searchC2+0x70>
 8009db8:	f000 fba0 	bl	800a4fc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009dbc:	4b31      	ldr	r3, [pc, #196]	; (8009e84 <searchC2+0x138>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009dc2:	f000 fd0f 	bl	800a7e4 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009dc6:	f001 f84b 	bl	800ae60 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009dca:	4b2e      	ldr	r3, [pc, #184]	; (8009e84 <searchC2+0x138>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	b2d1      	uxtb	r1, r2
 8009dd2:	4a2c      	ldr	r2, [pc, #176]	; (8009e84 <searchC2+0x138>)
 8009dd4:	7011      	strb	r1, [r2, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4b2b      	ldr	r3, [pc, #172]	; (8009e88 <searchC2+0x13c>)
 8009dda:	5c9b      	ldrb	r3, [r3, r2]
 8009ddc:	2b22      	cmp	r3, #34	; 0x22
 8009dde:	d00e      	beq.n	8009dfe <searchC2+0xb2>
 8009de0:	2b22      	cmp	r3, #34	; 0x22
 8009de2:	dc02      	bgt.n	8009dea <searchC2+0x9e>
 8009de4:	2b11      	cmp	r3, #17
 8009de6:	d019      	beq.n	8009e1c <searchC2+0xd0>
 8009de8:	e01b      	b.n	8009e22 <searchC2+0xd6>
 8009dea:	2b44      	cmp	r3, #68	; 0x44
 8009dec:	d004      	beq.n	8009df8 <searchC2+0xac>
 8009dee:	2b88      	cmp	r3, #136	; 0x88
 8009df0:	d117      	bne.n	8009e22 <searchC2+0xd6>
			//----a前進----
			case 0x88:
				one_sectionU();
 8009df2:	f7fb fb9b 	bl	800552c <one_sectionU>
				break;
 8009df6:	e014      	b.n	8009e22 <searchC2+0xd6>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 8009df8:	f7fc f804 	bl	8005e04 <slalom_R902>

				break;
 8009dfc:	e011      	b.n	8009e22 <searchC2+0xd6>
			//----180回転----
			case 0x22:
				half_sectionD2();
 8009dfe:	f7fb fb2d 	bl	800545c <half_sectionD2>
				rotate_180();
 8009e02:	f7fb fd45 	bl	8005890 <rotate_180>
				if(wall_info & 0x88){
 8009e06:	4b1e      	ldr	r3, [pc, #120]	; (8009e80 <searchC2+0x134>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <searchC2+0xca>
					set_position();
 8009e12:	f7fb fa7b 	bl	800530c <set_position>
				}
				half_sectionA2();
 8009e16:	f7fb fb05 	bl	8005424 <half_sectionA2>
				break;
 8009e1a:	e002      	b.n	8009e22 <searchC2+0xd6>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 8009e1c:	f7fc f8c4 	bl	8005fa8 <slalom_L902>
				break;
 8009e20:	bf00      	nop
		}
		adv_pos();
 8009e22:	f000 faa7 	bl	800a374 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 8009e26:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <searchC2+0x130>)
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <searchC2+0xec>
 8009e34:	f000 fad8 	bl	800a3e8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009e38:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <searchC2+0x140>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	4b14      	ldr	r3, [pc, #80]	; (8009e90 <searchC2+0x144>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d1c1      	bne.n	8009dca <searchC2+0x7e>
 8009e46:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <searchC2+0x140>)
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <searchC2+0x148>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d1ba      	bne.n	8009dca <searchC2+0x7e>

	half_sectionD2();
 8009e54:	f7fb fb02 	bl	800545c <half_sectionD2>

	HAL_Delay(2000);
 8009e58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e5c:	f7f7 f8b6 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009e60:	f7fb fd16 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <searchC2+0x130>)
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <searchC2+0x12a>
		store_map_in_eeprom();
 8009e72:	f001 fc37 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 8009e76:	bf00      	nop
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000ee4 	.word	0x20000ee4
 8009e80:	20000344 	.word	0x20000344
 8009e84:	20000f0c 	.word	0x20000f0c
 8009e88:	20000bd4 	.word	0x20000bd4
 8009e8c:	20000b8c 	.word	0x20000b8c
 8009e90:	20000b2d 	.word	0x20000b2d
 8009e94:	20000ac8 	.word	0x20000ac8

08009e98 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009e9c:	4b6a      	ldr	r3, [pc, #424]	; (800a048 <searchD+0x1b0>)
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <searchD+0x16>
		load_map_from_eeprom();
 8009eaa:	f001 fc55 	bl	800b758 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009eae:	4b66      	ldr	r3, [pc, #408]	; (800a048 <searchD+0x1b0>)
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <searchD+0x28>
 8009ebc:	f001 fcc4 	bl	800b848 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009ec0:	4b61      	ldr	r3, [pc, #388]	; (800a048 <searchD+0x1b0>)
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <searchD+0x44>
 8009ece:	4b5f      	ldr	r3, [pc, #380]	; (800a04c <searchD+0x1b4>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	4b5c      	ldr	r3, [pc, #368]	; (800a04c <searchD+0x1b4>)
 8009eda:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009edc:	4b5a      	ldr	r3, [pc, #360]	; (800a048 <searchD+0x1b0>)
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <searchD+0x56>
 8009eea:	f000 fb07 	bl	800a4fc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 8009eee:	f7fb fa17 	bl	8005320 <start_sectionA>
	adv_pos();
 8009ef2:	f000 fa3f 	bl	800a374 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009ef6:	4b54      	ldr	r3, [pc, #336]	; (800a048 <searchD+0x1b0>)
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <searchD+0x70>
 8009f04:	f000 fafa 	bl	800a4fc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009f08:	4b51      	ldr	r3, [pc, #324]	; (800a050 <searchD+0x1b8>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009f0e:	f000 fc69 	bl	800a7e4 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009f12:	f000 ffa5 	bl	800ae60 <make_route>

	H_accel_flag = 0;
 8009f16:	4b4f      	ldr	r3, [pc, #316]	; (800a054 <searchD+0x1bc>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009f1c:	4b4c      	ldr	r3, [pc, #304]	; (800a050 <searchD+0x1b8>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	b2d1      	uxtb	r1, r2
 8009f24:	4a4a      	ldr	r2, [pc, #296]	; (800a050 <searchD+0x1b8>)
 8009f26:	7011      	strb	r1, [r2, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4b4b      	ldr	r3, [pc, #300]	; (800a058 <searchD+0x1c0>)
 8009f2c:	5c9b      	ldrb	r3, [r3, r2]
 8009f2e:	2b22      	cmp	r3, #34	; 0x22
 8009f30:	d053      	beq.n	8009fda <searchD+0x142>
 8009f32:	2b22      	cmp	r3, #34	; 0x22
 8009f34:	dc02      	bgt.n	8009f3c <searchD+0xa4>
 8009f36:	2b11      	cmp	r3, #17
 8009f38:	d056      	beq.n	8009fe8 <searchD+0x150>
 8009f3a:	e058      	b.n	8009fee <searchD+0x156>
 8009f3c:	2b44      	cmp	r3, #68	; 0x44
 8009f3e:	d049      	beq.n	8009fd4 <searchD+0x13c>
 8009f40:	2b88      	cmp	r3, #136	; 0x88
 8009f42:	d154      	bne.n	8009fee <searchD+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 8009f44:	4b40      	ldr	r3, [pc, #256]	; (800a048 <searchD+0x1b0>)
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d13c      	bne.n	8009fcc <searchD+0x134>
 8009f52:	4b3d      	ldr	r3, [pc, #244]	; (800a048 <searchD+0x1b0>)
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d135      	bne.n	8009fcc <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 8009f60:	4b3b      	ldr	r3, [pc, #236]	; (800a050 <searchD+0x1b8>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	4a3c      	ldr	r2, [pc, #240]	; (800a058 <searchD+0x1c0>)
 8009f68:	5cd2      	ldrb	r2, [r2, r3]
 8009f6a:	4b39      	ldr	r3, [pc, #228]	; (800a050 <searchD+0x1b8>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4b39      	ldr	r3, [pc, #228]	; (800a058 <searchD+0x1c0>)
 8009f72:	5c5b      	ldrb	r3, [r3, r1]
 8009f74:	4013      	ands	r3, r2
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b88      	cmp	r3, #136	; 0x88
 8009f7a:	d110      	bne.n	8009f9e <searchD+0x106>
 8009f7c:	4b34      	ldr	r3, [pc, #208]	; (800a050 <searchD+0x1b8>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b35      	ldr	r3, [pc, #212]	; (800a058 <searchD+0x1c0>)
 8009f84:	5c9b      	ldrb	r3, [r3, r2]
 8009f86:	2bff      	cmp	r3, #255	; 0xff
 8009f88:	d009      	beq.n	8009f9e <searchD+0x106>
 8009f8a:	4b32      	ldr	r3, [pc, #200]	; (800a054 <searchD+0x1bc>)
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <searchD+0x106>
						one_sectionA();
 8009f92:	f7fb fa7d 	bl	8005490 <one_sectionA>
						H_accel_flag = 1;
 8009f96:	4b2f      	ldr	r3, [pc, #188]	; (800a054 <searchD+0x1bc>)
 8009f98:	2201      	movs	r2, #1
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	e015      	b.n	8009fca <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 8009f9e:	4b2c      	ldr	r3, [pc, #176]	; (800a050 <searchD+0x1b8>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4b2c      	ldr	r3, [pc, #176]	; (800a058 <searchD+0x1c0>)
 8009fa6:	5c9b      	ldrb	r3, [r3, r2]
 8009fa8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <searchD+0x12c>
 8009fb0:	4b28      	ldr	r3, [pc, #160]	; (800a054 <searchD+0x1bc>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d105      	bne.n	8009fc4 <searchD+0x12c>
						one_sectionD();
 8009fb8:	f7fb fa90 	bl	80054dc <one_sectionD>
						H_accel_flag = 0;
 8009fbc:	4b25      	ldr	r3, [pc, #148]	; (800a054 <searchD+0x1bc>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	e002      	b.n	8009fca <searchD+0x132>
					}else{
						one_sectionU();
 8009fc4:	f7fb fab2 	bl	800552c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 8009fc8:	e003      	b.n	8009fd2 <searchD+0x13a>
 8009fca:	e002      	b.n	8009fd2 <searchD+0x13a>
					}
				}else{
					one_sectionU();
 8009fcc:	f7fb faae 	bl	800552c <one_sectionU>
				}
				break;
 8009fd0:	e00d      	b.n	8009fee <searchD+0x156>
 8009fd2:	e00c      	b.n	8009fee <searchD+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 8009fd4:	f7fb fd26 	bl	8005a24 <slalom_R90>

				break;
 8009fd8:	e009      	b.n	8009fee <searchD+0x156>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009fda:	f7fb f9e7 	bl	80053ac <half_sectionD>
				rotate_180();
 8009fde:	f7fb fc57 	bl	8005890 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 8009fe2:	f7fb f9c9 	bl	8005378 <half_sectionA>
				break;
 8009fe6:	e002      	b.n	8009fee <searchD+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 8009fe8:	f7fb fe14 	bl	8005c14 <slalom_L90>
				break;
 8009fec:	bf00      	nop
		}
		adv_pos();
 8009fee:	f000 f9c1 	bl	800a374 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 8009ff2:	4b15      	ldr	r3, [pc, #84]	; (800a048 <searchD+0x1b0>)
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <searchD+0x16c>
 800a000:	f000 f9f2 	bl	800a3e8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800a004:	4b15      	ldr	r3, [pc, #84]	; (800a05c <searchD+0x1c4>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <searchD+0x1c8>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d184      	bne.n	8009f1c <searchD+0x84>
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <searchD+0x1c4>)
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	b2da      	uxtb	r2, r3
 800a018:	4b12      	ldr	r3, [pc, #72]	; (800a064 <searchD+0x1cc>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	f47f af7d 	bne.w	8009f1c <searchD+0x84>

	half_sectionD();
 800a022:	f7fb f9c3 	bl	80053ac <half_sectionD>

	HAL_Delay(2000);
 800a026:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a02a:	f7f6 ffcf 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800a02e:	f7fb fc2f 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 800a032:	4b05      	ldr	r3, [pc, #20]	; (800a048 <searchD+0x1b0>)
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <searchD+0x1ac>
		store_map_in_eeprom();
 800a040:	f001 fb50 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 800a044:	bf00      	nop
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20000ee4 	.word	0x20000ee4
 800a04c:	20000344 	.word	0x20000344
 800a050:	20000f0c 	.word	0x20000f0c
 800a054:	20000345 	.word	0x20000345
 800a058:	20000bd4 	.word	0x20000bd4
 800a05c:	20000b8c 	.word	0x20000b8c
 800a060:	20000b2d 	.word	0x20000b2d
 800a064:	20000ac8 	.word	0x20000ac8

0800a068 <searchD2>:
//searchD2
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD2(){
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800a06c:	4b6a      	ldr	r3, [pc, #424]	; (800a218 <searchD2+0x1b0>)
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <searchD2+0x16>
		load_map_from_eeprom();
 800a07a:	f001 fb6d 	bl	800b758 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800a07e:	4b66      	ldr	r3, [pc, #408]	; (800a218 <searchD2+0x1b0>)
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <searchD2+0x28>
 800a08c:	f001 fbdc 	bl	800b848 <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800a090:	4b61      	ldr	r3, [pc, #388]	; (800a218 <searchD2+0x1b0>)
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <searchD2+0x44>
 800a09e:	4b5f      	ldr	r3, [pc, #380]	; (800a21c <searchD2+0x1b4>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	4b5c      	ldr	r3, [pc, #368]	; (800a21c <searchD2+0x1b4>)
 800a0aa:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800a0ac:	4b5a      	ldr	r3, [pc, #360]	; (800a218 <searchD2+0x1b0>)
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <searchD2+0x56>
 800a0ba:	f000 fa1f 	bl	800a4fc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800a0be:	f7fb f985 	bl	80053cc <start_sectionA2>
	adv_pos();
 800a0c2:	f000 f957 	bl	800a374 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800a0c6:	4b54      	ldr	r3, [pc, #336]	; (800a218 <searchD2+0x1b0>)
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <searchD2+0x70>
 800a0d4:	f000 fa12 	bl	800a4fc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800a0d8:	4b51      	ldr	r3, [pc, #324]	; (800a220 <searchD2+0x1b8>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800a0de:	f000 fb81 	bl	800a7e4 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800a0e2:	f000 febd 	bl	800ae60 <make_route>

	H_accel_flag = 0;
 800a0e6:	4b4f      	ldr	r3, [pc, #316]	; (800a224 <searchD2+0x1bc>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800a0ec:	4b4c      	ldr	r3, [pc, #304]	; (800a220 <searchD2+0x1b8>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	b2d1      	uxtb	r1, r2
 800a0f4:	4a4a      	ldr	r2, [pc, #296]	; (800a220 <searchD2+0x1b8>)
 800a0f6:	7011      	strb	r1, [r2, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b4b      	ldr	r3, [pc, #300]	; (800a228 <searchD2+0x1c0>)
 800a0fc:	5c9b      	ldrb	r3, [r3, r2]
 800a0fe:	2b22      	cmp	r3, #34	; 0x22
 800a100:	d053      	beq.n	800a1aa <searchD2+0x142>
 800a102:	2b22      	cmp	r3, #34	; 0x22
 800a104:	dc02      	bgt.n	800a10c <searchD2+0xa4>
 800a106:	2b11      	cmp	r3, #17
 800a108:	d056      	beq.n	800a1b8 <searchD2+0x150>
 800a10a:	e058      	b.n	800a1be <searchD2+0x156>
 800a10c:	2b44      	cmp	r3, #68	; 0x44
 800a10e:	d049      	beq.n	800a1a4 <searchD2+0x13c>
 800a110:	2b88      	cmp	r3, #136	; 0x88
 800a112:	d154      	bne.n	800a1be <searchD2+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800a114:	4b40      	ldr	r3, [pc, #256]	; (800a218 <searchD2+0x1b0>)
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d13c      	bne.n	800a19c <searchD2+0x134>
 800a122:	4b3d      	ldr	r3, [pc, #244]	; (800a218 <searchD2+0x1b0>)
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d135      	bne.n	800a19c <searchD2+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800a130:	4b3b      	ldr	r3, [pc, #236]	; (800a220 <searchD2+0x1b8>)
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	3b01      	subs	r3, #1
 800a136:	4a3c      	ldr	r2, [pc, #240]	; (800a228 <searchD2+0x1c0>)
 800a138:	5cd2      	ldrb	r2, [r2, r3]
 800a13a:	4b39      	ldr	r3, [pc, #228]	; (800a220 <searchD2+0x1b8>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	4619      	mov	r1, r3
 800a140:	4b39      	ldr	r3, [pc, #228]	; (800a228 <searchD2+0x1c0>)
 800a142:	5c5b      	ldrb	r3, [r3, r1]
 800a144:	4013      	ands	r3, r2
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b88      	cmp	r3, #136	; 0x88
 800a14a:	d110      	bne.n	800a16e <searchD2+0x106>
 800a14c:	4b34      	ldr	r3, [pc, #208]	; (800a220 <searchD2+0x1b8>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	4b35      	ldr	r3, [pc, #212]	; (800a228 <searchD2+0x1c0>)
 800a154:	5c9b      	ldrb	r3, [r3, r2]
 800a156:	2bff      	cmp	r3, #255	; 0xff
 800a158:	d009      	beq.n	800a16e <searchD2+0x106>
 800a15a:	4b32      	ldr	r3, [pc, #200]	; (800a224 <searchD2+0x1bc>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d105      	bne.n	800a16e <searchD2+0x106>
						one_sectionA();
 800a162:	f7fb f995 	bl	8005490 <one_sectionA>
						H_accel_flag = 1;
 800a166:	4b2f      	ldr	r3, [pc, #188]	; (800a224 <searchD2+0x1bc>)
 800a168:	2201      	movs	r2, #1
 800a16a:	701a      	strb	r2, [r3, #0]
 800a16c:	e015      	b.n	800a19a <searchD2+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800a16e:	4b2c      	ldr	r3, [pc, #176]	; (800a220 <searchD2+0x1b8>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	4b2c      	ldr	r3, [pc, #176]	; (800a228 <searchD2+0x1c0>)
 800a176:	5c9b      	ldrb	r3, [r3, r2]
 800a178:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <searchD2+0x12c>
 800a180:	4b28      	ldr	r3, [pc, #160]	; (800a224 <searchD2+0x1bc>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d105      	bne.n	800a194 <searchD2+0x12c>
						one_sectionD();
 800a188:	f7fb f9a8 	bl	80054dc <one_sectionD>
						H_accel_flag = 0;
 800a18c:	4b25      	ldr	r3, [pc, #148]	; (800a224 <searchD2+0x1bc>)
 800a18e:	2200      	movs	r2, #0
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	e002      	b.n	800a19a <searchD2+0x132>
					}else{
						one_sectionU();
 800a194:	f7fb f9ca 	bl	800552c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800a198:	e003      	b.n	800a1a2 <searchD2+0x13a>
 800a19a:	e002      	b.n	800a1a2 <searchD2+0x13a>
					}
				}else{
					one_sectionU();
 800a19c:	f7fb f9c6 	bl	800552c <one_sectionU>
				}
				break;
 800a1a0:	e00d      	b.n	800a1be <searchD2+0x156>
 800a1a2:	e00c      	b.n	800a1be <searchD2+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800a1a4:	f7fb fe2e 	bl	8005e04 <slalom_R902>

				break;
 800a1a8:	e009      	b.n	800a1be <searchD2+0x156>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800a1aa:	f7fb f957 	bl	800545c <half_sectionD2>
				rotate_180();
 800a1ae:	f7fb fb6f 	bl	8005890 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA2();
 800a1b2:	f7fb f937 	bl	8005424 <half_sectionA2>
				break;
 800a1b6:	e002      	b.n	800a1be <searchD2+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800a1b8:	f7fb fef6 	bl	8005fa8 <slalom_L902>
				break;
 800a1bc:	bf00      	nop
		}
		adv_pos();
 800a1be:	f000 f8d9 	bl	800a374 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <searchD2+0x1b0>)
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <searchD2+0x16c>
 800a1d0:	f000 f90a 	bl	800a3e8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800a1d4:	4b15      	ldr	r3, [pc, #84]	; (800a22c <searchD2+0x1c4>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	4b15      	ldr	r3, [pc, #84]	; (800a230 <searchD2+0x1c8>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d184      	bne.n	800a0ec <searchD2+0x84>
 800a1e2:	4b12      	ldr	r3, [pc, #72]	; (800a22c <searchD2+0x1c4>)
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	4b12      	ldr	r3, [pc, #72]	; (800a234 <searchD2+0x1cc>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	f47f af7d 	bne.w	800a0ec <searchD2+0x84>

	half_sectionD2();
 800a1f2:	f7fb f933 	bl	800545c <half_sectionD2>

	HAL_Delay(2000);
 800a1f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1fa:	f7f6 fee7 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800a1fe:	f7fb fb47 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 800a202:	4b05      	ldr	r3, [pc, #20]	; (800a218 <searchD2+0x1b0>)
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <searchD2+0x1ac>
		store_map_in_eeprom();
 800a210:	f001 fa68 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 800a214:	bf00      	nop
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000ee4 	.word	0x20000ee4
 800a21c:	20000344 	.word	0x20000344
 800a220:	20000f0c 	.word	0x20000f0c
 800a224:	20000345 	.word	0x20000345
 800a228:	20000bd4 	.word	0x20000bd4
 800a22c:	20000b8c 	.word	0x20000b8c
 800a230:	20000b2d 	.word	0x20000b2d
 800a234:	20000ac8 	.word	0x20000ac8

0800a238 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0

	int i = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	607b      	str	r3, [r7, #4]
	int j = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d111      	bne.n	800a270 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800a24c:	f7fb f894 	bl	8005378 <half_sectionA>
			adv_pos();
 800a250:	f000 f890 	bl	800a374 <adv_pos>
			write_map();														//地図の初期化
 800a254:	f000 f952 	bl	800a4fc <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800a258:	4b3e      	ldr	r3, [pc, #248]	; (800a354 <searchE+0x11c>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	4b3e      	ldr	r3, [pc, #248]	; (800a358 <searchE+0x120>)
 800a260:	2200      	movs	r2, #0
 800a262:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800a264:	f000 ff2e 	bl	800b0c4 <find_pregoal>
			make_smap2();
 800a268:	f001 f918 	bl	800b49c <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800a26c:	f000 fdf8 	bl	800ae60 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800a270:	4b38      	ldr	r3, [pc, #224]	; (800a354 <searchE+0x11c>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	b2d1      	uxtb	r1, r2
 800a278:	4a36      	ldr	r2, [pc, #216]	; (800a354 <searchE+0x11c>)
 800a27a:	7011      	strb	r1, [r2, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b37      	ldr	r3, [pc, #220]	; (800a35c <searchE+0x124>)
 800a280:	5c9b      	ldrb	r3, [r3, r2]
 800a282:	2b22      	cmp	r3, #34	; 0x22
 800a284:	d00e      	beq.n	800a2a4 <searchE+0x6c>
 800a286:	2b22      	cmp	r3, #34	; 0x22
 800a288:	dc02      	bgt.n	800a290 <searchE+0x58>
 800a28a:	2b11      	cmp	r3, #17
 800a28c:	d011      	beq.n	800a2b2 <searchE+0x7a>
 800a28e:	e013      	b.n	800a2b8 <searchE+0x80>
 800a290:	2b44      	cmp	r3, #68	; 0x44
 800a292:	d004      	beq.n	800a29e <searchE+0x66>
 800a294:	2b88      	cmp	r3, #136	; 0x88
 800a296:	d10f      	bne.n	800a2b8 <searchE+0x80>
				//----a前進----
			case 0x88:
				one_sectionU();
 800a298:	f7fb f948 	bl	800552c <one_sectionU>
				break;
 800a29c:	e00c      	b.n	800a2b8 <searchE+0x80>
				//----a右折----
			case 0x44:
				slalom_R90();
 800a29e:	f7fb fbc1 	bl	8005a24 <slalom_R90>
				break;
 800a2a2:	e009      	b.n	800a2b8 <searchE+0x80>
				//----180回転----
			case 0x22:
				half_sectionD();
 800a2a4:	f7fb f882 	bl	80053ac <half_sectionD>
				rotate_180();
 800a2a8:	f7fb faf2 	bl	8005890 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 800a2ac:	f7fb f864 	bl	8005378 <half_sectionA>
				break;
 800a2b0:	e002      	b.n	800a2b8 <searchE+0x80>
				//----a左折----
			case 0x11:
				slalom_L90();
 800a2b2:	f7fb fcaf 	bl	8005c14 <slalom_L90>
				break;
 800a2b6:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800a2b8:	f000 f85c 	bl	800a374 <adv_pos>
			j++;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b96      	cmp	r3, #150	; 0x96
 800a2c6:	dc0e      	bgt.n	800a2e6 <searchE+0xae>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800a2c8:	4b25      	ldr	r3, [pc, #148]	; (800a360 <searchE+0x128>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	4b25      	ldr	r3, [pc, #148]	; (800a364 <searchE+0x12c>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d1cc      	bne.n	800a270 <searchE+0x38>
 800a2d6:	4b22      	ldr	r3, [pc, #136]	; (800a360 <searchE+0x128>)
 800a2d8:	785b      	ldrb	r3, [r3, #1]
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	4b22      	ldr	r3, [pc, #136]	; (800a368 <searchE+0x130>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d1c5      	bne.n	800a270 <searchE+0x38>
 800a2e4:	e000      	b.n	800a2e8 <searchE+0xb0>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800a2e6:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800a2e8:	f001 faae 	bl	800b848 <get_wall_info>
		write_map();														//a地図の初期化
 800a2ec:	f000 f906 	bl	800a4fc <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800a2f0:	4b18      	ldr	r3, [pc, #96]	; (800a354 <searchE+0x11c>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	4b18      	ldr	r3, [pc, #96]	; (800a358 <searchE+0x120>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800a2fc:	f000 fee2 	bl	800b0c4 <find_pregoal>
		if (allmap_comp_flag) {
 800a300:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <searchE+0x134>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <searchE+0xd6>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800a308:	f7fb f850 	bl	80053ac <half_sectionD>
			break;
 800a30c:	e00e      	b.n	800a32c <searchE+0xf4>
		}
		make_smap2();
 800a30e:	f001 f8c5 	bl	800b49c <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800a312:	f000 fda5 	bl	800ae60 <make_route>

		if (j > 150) {
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b96      	cmp	r3, #150	; 0x96
 800a31a:	dc06      	bgt.n	800a32a <searchE+0xf2>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3301      	adds	r3, #1
 800a320:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b95      	cmp	r3, #149	; 0x95
 800a326:	dd8e      	ble.n	800a246 <searchE+0xe>
 800a328:	e000      	b.n	800a32c <searchE+0xf4>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800a32a:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(2000);
 800a32c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a330:	f7f6 fe4c 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800a334:	f7fb faac 	bl	8005890 <rotate_180>

	if(!MF.FLAG.SCND){
 800a338:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <searchE+0x138>)
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <searchE+0x112>
		store_map_in_eeprom();
 800a346:	f001 f9cd 	bl	800b6e4 <store_map_in_eeprom>
	}
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000f0c 	.word	0x20000f0c
 800a358:	200003ca 	.word	0x200003ca
 800a35c:	20000bd4 	.word	0x20000bd4
 800a360:	20000b8c 	.word	0x20000b8c
 800a364:	20000cdc 	.word	0x20000cdc
 800a368:	20000efc 	.word	0x20000efc
 800a36c:	20000b2c 	.word	0x20000b2c
 800a370:	20000ee4 	.word	0x20000ee4

0800a374 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800a378:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <adv_pos+0x70>)
 800a37a:	789b      	ldrb	r3, [r3, #2]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d82a      	bhi.n	800a3d8 <adv_pos+0x64>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <adv_pos+0x14>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a399 	.word	0x0800a399
 800a38c:	0800a3a9 	.word	0x0800a3a9
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3c9 	.word	0x0800a3c9
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800a398:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <adv_pos+0x70>)
 800a39a:	785b      	ldrb	r3, [r3, #1]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	3301      	adds	r3, #1
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <adv_pos+0x70>)
 800a3a4:	705a      	strb	r2, [r3, #1]
		break;
 800a3a6:	e017      	b.n	800a3d8 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <adv_pos+0x70>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <adv_pos+0x70>)
 800a3b4:	701a      	strb	r2, [r3, #0]
		break;
 800a3b6:	e00f      	b.n	800a3d8 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <adv_pos+0x70>)
 800a3ba:	785b      	ldrb	r3, [r3, #1]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <adv_pos+0x70>)
 800a3c4:	705a      	strb	r2, [r3, #1]
		break;
 800a3c6:	e007      	b.n	800a3d8 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <adv_pos+0x70>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <adv_pos+0x70>)
 800a3d4:	701a      	strb	r2, [r3, #0]
		break;
 800a3d6:	bf00      	nop
	}
}
 800a3d8:	bf00      	nop
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000b8c 	.word	0x20000b8c

0800a3e8 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800a3ec:	f000 f886 	bl	800a4fc <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800a3f0:	4b09      	ldr	r3, [pc, #36]	; (800a418 <conf_route+0x30>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <conf_route+0x34>)
 800a3f8:	5c9a      	ldrb	r2, [r3, r2]
 800a3fa:	4b09      	ldr	r3, [pc, #36]	; (800a420 <conf_route+0x38>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	4013      	ands	r3, r2
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d006      	beq.n	800a414 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800a406:	f000 f9ed 	bl	800a7e4 <make_smap>
		make_route();										//a最短経路を更新
 800a40a:	f000 fd29 	bl	800ae60 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800a40e:	4b02      	ldr	r3, [pc, #8]	; (800a418 <conf_route+0x30>)
 800a410:	2200      	movs	r2, #0
 800a412:	701a      	strb	r2, [r3, #0]
	}
}
 800a414:	bf00      	nop
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000f0c 	.word	0x20000f0c
 800a41c:	20000bd4 	.word	0x20000bd4
 800a420:	20000344 	.word	0x20000344

0800a424 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a42a:	2300      	movs	r3, #0
 800a42c:	71bb      	strb	r3, [r7, #6]
 800a42e:	e013      	b.n	800a458 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a430:	2300      	movs	r3, #0
 800a432:	71fb      	strb	r3, [r7, #7]
 800a434:	e00a      	b.n	800a44c <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800a436:	79ba      	ldrb	r2, [r7, #6]
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	492f      	ldr	r1, [pc, #188]	; (800a4f8 <map_Init+0xd4>)
 800a43c:	0112      	lsls	r2, r2, #4
 800a43e:	440a      	add	r2, r1
 800a440:	4413      	add	r3, r2
 800a442:	22f0      	movs	r2, #240	; 0xf0
 800a444:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	3301      	adds	r3, #1
 800a44a:	71fb      	strb	r3, [r7, #7]
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	2b0f      	cmp	r3, #15
 800a450:	d9f1      	bls.n	800a436 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a452:	79bb      	ldrb	r3, [r7, #6]
 800a454:	3301      	adds	r3, #1
 800a456:	71bb      	strb	r3, [r7, #6]
 800a458:	79bb      	ldrb	r3, [r7, #6]
 800a45a:	2b0f      	cmp	r3, #15
 800a45c:	d9e8      	bls.n	800a430 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a45e:	2300      	movs	r3, #0
 800a460:	71bb      	strb	r3, [r7, #6]
 800a462:	e020      	b.n	800a4a6 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800a464:	79bb      	ldrb	r3, [r7, #6]
 800a466:	4a24      	ldr	r2, [pc, #144]	; (800a4f8 <map_Init+0xd4>)
 800a468:	011b      	lsls	r3, r3, #4
 800a46a:	4413      	add	r3, r2
 800a46c:	781a      	ldrb	r2, [r3, #0]
 800a46e:	79bb      	ldrb	r3, [r7, #6]
 800a470:	f062 020e 	orn	r2, r2, #14
 800a474:	b2d1      	uxtb	r1, r2
 800a476:	4a20      	ldr	r2, [pc, #128]	; (800a4f8 <map_Init+0xd4>)
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	4413      	add	r3, r2
 800a47c:	460a      	mov	r2, r1
 800a47e:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800a480:	79bb      	ldrb	r3, [r7, #6]
 800a482:	4a1d      	ldr	r2, [pc, #116]	; (800a4f8 <map_Init+0xd4>)
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	4413      	add	r3, r2
 800a488:	330f      	adds	r3, #15
 800a48a:	781a      	ldrb	r2, [r3, #0]
 800a48c:	79bb      	ldrb	r3, [r7, #6]
 800a48e:	f062 020b 	orn	r2, r2, #11
 800a492:	b2d1      	uxtb	r1, r2
 800a494:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <map_Init+0xd4>)
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	4413      	add	r3, r2
 800a49a:	330f      	adds	r3, #15
 800a49c:	460a      	mov	r2, r1
 800a49e:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a4a0:	79bb      	ldrb	r3, [r7, #6]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	71bb      	strb	r3, [r7, #6]
 800a4a6:	79bb      	ldrb	r3, [r7, #6]
 800a4a8:	2b0f      	cmp	r3, #15
 800a4aa:	d9db      	bls.n	800a464 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	71fb      	strb	r3, [r7, #7]
 800a4b0:	e019      	b.n	800a4e6 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	4a10      	ldr	r2, [pc, #64]	; (800a4f8 <map_Init+0xd4>)
 800a4b6:	5cd2      	ldrb	r2, [r2, r3]
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	f062 020d 	orn	r2, r2, #13
 800a4be:	b2d1      	uxtb	r1, r2
 800a4c0:	4a0d      	ldr	r2, [pc, #52]	; (800a4f8 <map_Init+0xd4>)
 800a4c2:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800a4c4:	79fb      	ldrb	r3, [r7, #7]
 800a4c6:	4a0c      	ldr	r2, [pc, #48]	; (800a4f8 <map_Init+0xd4>)
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	f062 0207 	orn	r2, r2, #7
 800a4d4:	b2d1      	uxtb	r1, r2
 800a4d6:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <map_Init+0xd4>)
 800a4d8:	4413      	add	r3, r2
 800a4da:	460a      	mov	r2, r1
 800a4dc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	71fb      	strb	r3, [r7, #7]
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	2b0f      	cmp	r3, #15
 800a4ea:	d9e2      	bls.n	800a4b2 <map_Init+0x8e>
	}
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	2000022c 	.word	0x2000022c

0800a4fc <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800a4fc:	b490      	push	{r4, r7}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800a502:	4b8f      	ldr	r3, [pc, #572]	; (800a740 <write_map+0x244>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	4b8e      	ldr	r3, [pc, #568]	; (800a744 <write_map+0x248>)
 800a50a:	789b      	ldrb	r3, [r3, #2]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	fa42 f303 	asr.w	r3, r2, r3
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	b25a      	sxtb	r2, r3
 800a520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a524:	4313      	orrs	r3, r2
 800a526:	b25b      	sxtb	r3, r3
 800a528:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800a52a:	4b86      	ldr	r3, [pc, #536]	; (800a744 <write_map+0x248>)
 800a52c:	785b      	ldrb	r3, [r3, #1]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	4618      	mov	r0, r3
 800a532:	4b84      	ldr	r3, [pc, #528]	; (800a744 <write_map+0x248>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	b2db      	uxtb	r3, r3
 800a538:	4619      	mov	r1, r3
 800a53a:	4a83      	ldr	r2, [pc, #524]	; (800a748 <write_map+0x24c>)
 800a53c:	0103      	lsls	r3, r0, #4
 800a53e:	4413      	add	r3, r2
 800a540:	440b      	add	r3, r1
 800a542:	79fa      	ldrb	r2, [r7, #7]
 800a544:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800a546:	4b7f      	ldr	r3, [pc, #508]	; (800a744 <write_map+0x248>)
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b0f      	cmp	r3, #15
 800a54e:	d039      	beq.n	800a5c4 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800a556:	2b00      	cmp	r3, #0
 800a558:	d01a      	beq.n	800a590 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800a55a:	4b7a      	ldr	r3, [pc, #488]	; (800a744 <write_map+0x248>)
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	b2d8      	uxtb	r0, r3
 800a560:	4603      	mov	r3, r0
 800a562:	3301      	adds	r3, #1
 800a564:	4a77      	ldr	r2, [pc, #476]	; (800a744 <write_map+0x248>)
 800a566:	7812      	ldrb	r2, [r2, #0]
 800a568:	b2d1      	uxtb	r1, r2
 800a56a:	460c      	mov	r4, r1
 800a56c:	4a76      	ldr	r2, [pc, #472]	; (800a748 <write_map+0x24c>)
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	4413      	add	r3, r2
 800a572:	4423      	add	r3, r4
 800a574:	781a      	ldrb	r2, [r3, #0]
 800a576:	4603      	mov	r3, r0
 800a578:	3301      	adds	r3, #1
 800a57a:	4608      	mov	r0, r1
 800a57c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800a580:	b2d1      	uxtb	r1, r2
 800a582:	4a71      	ldr	r2, [pc, #452]	; (800a748 <write_map+0x24c>)
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	4413      	add	r3, r2
 800a588:	4403      	add	r3, r0
 800a58a:	460a      	mov	r2, r1
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	e019      	b.n	800a5c4 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800a590:	4b6c      	ldr	r3, [pc, #432]	; (800a744 <write_map+0x248>)
 800a592:	785b      	ldrb	r3, [r3, #1]
 800a594:	b2d8      	uxtb	r0, r3
 800a596:	4603      	mov	r3, r0
 800a598:	3301      	adds	r3, #1
 800a59a:	4a6a      	ldr	r2, [pc, #424]	; (800a744 <write_map+0x248>)
 800a59c:	7812      	ldrb	r2, [r2, #0]
 800a59e:	b2d1      	uxtb	r1, r2
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	4a69      	ldr	r2, [pc, #420]	; (800a748 <write_map+0x24c>)
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	4413      	add	r3, r2
 800a5a8:	4423      	add	r3, r4
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a5b6:	b2d1      	uxtb	r1, r2
 800a5b8:	4a63      	ldr	r2, [pc, #396]	; (800a748 <write_map+0x24c>)
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	4413      	add	r3, r2
 800a5be:	4403      	add	r3, r0
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800a5c4:	4b5f      	ldr	r3, [pc, #380]	; (800a744 <write_map+0x248>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b0f      	cmp	r3, #15
 800a5cc:	d037      	beq.n	800a63e <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d019      	beq.n	800a60c <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800a5d8:	4b5a      	ldr	r3, [pc, #360]	; (800a744 <write_map+0x248>)
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	b2dc      	uxtb	r4, r3
 800a5de:	4622      	mov	r2, r4
 800a5e0:	4b58      	ldr	r3, [pc, #352]	; (800a744 <write_map+0x248>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	b2d8      	uxtb	r0, r3
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	4957      	ldr	r1, [pc, #348]	; (800a748 <write_map+0x24c>)
 800a5ec:	0112      	lsls	r2, r2, #4
 800a5ee:	440a      	add	r2, r1
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	f042 0211 	orr.w	r2, r2, #17
 800a5fc:	b2d0      	uxtb	r0, r2
 800a5fe:	4952      	ldr	r1, [pc, #328]	; (800a748 <write_map+0x24c>)
 800a600:	0122      	lsls	r2, r4, #4
 800a602:	440a      	add	r2, r1
 800a604:	4413      	add	r3, r2
 800a606:	4602      	mov	r2, r0
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	e018      	b.n	800a63e <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800a60c:	4b4d      	ldr	r3, [pc, #308]	; (800a744 <write_map+0x248>)
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	b2dc      	uxtb	r4, r3
 800a612:	4622      	mov	r2, r4
 800a614:	4b4b      	ldr	r3, [pc, #300]	; (800a744 <write_map+0x248>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b2d8      	uxtb	r0, r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	3301      	adds	r3, #1
 800a61e:	494a      	ldr	r1, [pc, #296]	; (800a748 <write_map+0x24c>)
 800a620:	0112      	lsls	r2, r2, #4
 800a622:	440a      	add	r2, r1
 800a624:	4413      	add	r3, r2
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	4603      	mov	r3, r0
 800a62a:	3301      	adds	r3, #1
 800a62c:	f022 0211 	bic.w	r2, r2, #17
 800a630:	b2d0      	uxtb	r0, r2
 800a632:	4945      	ldr	r1, [pc, #276]	; (800a748 <write_map+0x24c>)
 800a634:	0122      	lsls	r2, r4, #4
 800a636:	440a      	add	r2, r1
 800a638:	4413      	add	r3, r2
 800a63a:	4602      	mov	r2, r0
 800a63c:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800a63e:	4b41      	ldr	r3, [pc, #260]	; (800a744 <write_map+0x248>)
 800a640:	785b      	ldrb	r3, [r3, #1]
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d039      	beq.n	800a6bc <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d01a      	beq.n	800a688 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800a652:	4b3c      	ldr	r3, [pc, #240]	; (800a744 <write_map+0x248>)
 800a654:	785b      	ldrb	r3, [r3, #1]
 800a656:	b2d8      	uxtb	r0, r3
 800a658:	4603      	mov	r3, r0
 800a65a:	3b01      	subs	r3, #1
 800a65c:	4a39      	ldr	r2, [pc, #228]	; (800a744 <write_map+0x248>)
 800a65e:	7812      	ldrb	r2, [r2, #0]
 800a660:	b2d1      	uxtb	r1, r2
 800a662:	460c      	mov	r4, r1
 800a664:	4a38      	ldr	r2, [pc, #224]	; (800a748 <write_map+0x24c>)
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	4413      	add	r3, r2
 800a66a:	4423      	add	r3, r4
 800a66c:	781a      	ldrb	r2, [r3, #0]
 800a66e:	4603      	mov	r3, r0
 800a670:	3b01      	subs	r3, #1
 800a672:	4608      	mov	r0, r1
 800a674:	f062 0277 	orn	r2, r2, #119	; 0x77
 800a678:	b2d1      	uxtb	r1, r2
 800a67a:	4a33      	ldr	r2, [pc, #204]	; (800a748 <write_map+0x24c>)
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	4413      	add	r3, r2
 800a680:	4403      	add	r3, r0
 800a682:	460a      	mov	r2, r1
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e019      	b.n	800a6bc <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800a688:	4b2e      	ldr	r3, [pc, #184]	; (800a744 <write_map+0x248>)
 800a68a:	785b      	ldrb	r3, [r3, #1]
 800a68c:	b2d8      	uxtb	r0, r3
 800a68e:	4603      	mov	r3, r0
 800a690:	3b01      	subs	r3, #1
 800a692:	4a2c      	ldr	r2, [pc, #176]	; (800a744 <write_map+0x248>)
 800a694:	7812      	ldrb	r2, [r2, #0]
 800a696:	b2d1      	uxtb	r1, r2
 800a698:	460c      	mov	r4, r1
 800a69a:	4a2b      	ldr	r2, [pc, #172]	; (800a748 <write_map+0x24c>)
 800a69c:	011b      	lsls	r3, r3, #4
 800a69e:	4413      	add	r3, r2
 800a6a0:	4423      	add	r3, r4
 800a6a2:	781a      	ldrb	r2, [r3, #0]
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	4608      	mov	r0, r1
 800a6aa:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800a6ae:	b2d1      	uxtb	r1, r2
 800a6b0:	4a25      	ldr	r2, [pc, #148]	; (800a748 <write_map+0x24c>)
 800a6b2:	011b      	lsls	r3, r3, #4
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4403      	add	r3, r0
 800a6b8:	460a      	mov	r2, r1
 800a6ba:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800a6bc:	4b21      	ldr	r3, [pc, #132]	; (800a744 <write_map+0x248>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d037      	beq.n	800a736 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	f003 0311 	and.w	r3, r3, #17
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d019      	beq.n	800a704 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800a6d0:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <write_map+0x248>)
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	b2dc      	uxtb	r4, r3
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <write_map+0x248>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b2d8      	uxtb	r0, r3
 800a6de:	4603      	mov	r3, r0
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	4919      	ldr	r1, [pc, #100]	; (800a748 <write_map+0x24c>)
 800a6e4:	0112      	lsls	r2, r2, #4
 800a6e6:	440a      	add	r2, r1
 800a6e8:	4413      	add	r3, r2
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800a6f4:	b2d0      	uxtb	r0, r2
 800a6f6:	4914      	ldr	r1, [pc, #80]	; (800a748 <write_map+0x24c>)
 800a6f8:	0122      	lsls	r2, r4, #4
 800a6fa:	440a      	add	r2, r1
 800a6fc:	4413      	add	r3, r2
 800a6fe:	4602      	mov	r2, r0
 800a700:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800a702:	e018      	b.n	800a736 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800a704:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <write_map+0x248>)
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	b2dc      	uxtb	r4, r3
 800a70a:	4622      	mov	r2, r4
 800a70c:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <write_map+0x248>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	b2d8      	uxtb	r0, r3
 800a712:	4603      	mov	r3, r0
 800a714:	3b01      	subs	r3, #1
 800a716:	490c      	ldr	r1, [pc, #48]	; (800a748 <write_map+0x24c>)
 800a718:	0112      	lsls	r2, r2, #4
 800a71a:	440a      	add	r2, r1
 800a71c:	4413      	add	r3, r2
 800a71e:	781a      	ldrb	r2, [r3, #0]
 800a720:	4603      	mov	r3, r0
 800a722:	3b01      	subs	r3, #1
 800a724:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800a728:	b2d0      	uxtb	r0, r2
 800a72a:	4907      	ldr	r1, [pc, #28]	; (800a748 <write_map+0x24c>)
 800a72c:	0122      	lsls	r2, r4, #4
 800a72e:	440a      	add	r2, r1
 800a730:	4413      	add	r3, r2
 800a732:	4602      	mov	r2, r0
 800a734:	701a      	strb	r2, [r3, #0]
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bc90      	pop	{r4, r7}
 800a73e:	4770      	bx	lr
 800a740:	20000344 	.word	0x20000344
 800a744:	20000b8c 	.word	0x20000b8c
 800a748:	2000022c 	.word	0x2000022c

0800a74c <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	460a      	mov	r2, r1
 800a756:	71fb      	strb	r3, [r7, #7]
 800a758:	4613      	mov	r3, r2
 800a75a:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800a75c:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <turn_dir+0x88>)
 800a75e:	789b      	ldrb	r3, [r3, #2]
 800a760:	b2da      	uxtb	r2, r3
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	4413      	add	r3, r2
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 0303 	and.w	r3, r3, #3
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	4b19      	ldr	r3, [pc, #100]	; (800a7d4 <turn_dir+0x88>)
 800a770:	709a      	strb	r2, [r3, #2]
	if(t_mode == 1){
 800a772:	79bb      	ldrb	r3, [r7, #6]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d126      	bne.n	800a7c6 <turn_dir+0x7a>
		if(t_pat == 0x01) target_degree_z -= 90.5;				//目標角度+右90度
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d109      	bne.n	800a792 <turn_dir+0x46>
 800a77e:	4b16      	ldr	r3, [pc, #88]	; (800a7d8 <turn_dir+0x8c>)
 800a780:	edd3 7a00 	vldr	s15, [r3]
 800a784:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a7dc <turn_dir+0x90>
 800a788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a78c:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <turn_dir+0x8c>)
 800a78e:	edc3 7a00 	vstr	s15, [r3]
		if(t_pat == 0xff) target_degree_z += 90.5;				//目標角度+左90度
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	2bff      	cmp	r3, #255	; 0xff
 800a796:	d109      	bne.n	800a7ac <turn_dir+0x60>
 800a798:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <turn_dir+0x8c>)
 800a79a:	edd3 7a00 	vldr	s15, [r3]
 800a79e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a7dc <turn_dir+0x90>
 800a7a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <turn_dir+0x8c>)
 800a7a8:	edc3 7a00 	vstr	s15, [r3]
		if(t_pat == 0x02) target_degree_z -= 181;				//目標角度+右180度
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d109      	bne.n	800a7c6 <turn_dir+0x7a>
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <turn_dir+0x8c>)
 800a7b4:	edd3 7a00 	vldr	s15, [r3]
 800a7b8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a7e0 <turn_dir+0x94>
 800a7bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7c0:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <turn_dir+0x8c>)
 800a7c2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000b8c 	.word	0x20000b8c
 800a7d8:	20000b78 	.word	0x20000b78
 800a7dc:	42b50000 	.word	0x42b50000
 800a7e0:	43350000 	.word	0x43350000

0800a7e4 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800a7e4:	b490      	push	{r4, r7}
 800a7e6:	b08c      	sub	sp, #48	; 0x30
 800a7e8:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a7f0:	e01c      	b.n	800a82c <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7f8:	e00f      	b.n	800a81a <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800a7fa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a802:	499c      	ldr	r1, [pc, #624]	; (800aa74 <make_smap+0x290>)
 800a804:	0112      	lsls	r2, r2, #4
 800a806:	4413      	add	r3, r2
 800a808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a80c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a814:	3301      	adds	r3, #1
 800a816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a81e:	2b0f      	cmp	r3, #15
 800a820:	d9eb      	bls.n	800a7fa <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a822:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a826:	3301      	adds	r3, #1
 800a828:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a82c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a830:	2b0f      	cmp	r3, #15
 800a832:	d9de      	bls.n	800a7f2 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800a834:	4b90      	ldr	r3, [pc, #576]	; (800aa78 <make_smap+0x294>)
 800a836:	2200      	movs	r2, #0
 800a838:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800a83a:	4b90      	ldr	r3, [pc, #576]	; (800aa7c <make_smap+0x298>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	4618      	mov	r0, r3
 800a840:	4b8f      	ldr	r3, [pc, #572]	; (800aa80 <make_smap+0x29c>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	4619      	mov	r1, r3
 800a846:	4a8b      	ldr	r2, [pc, #556]	; (800aa74 <make_smap+0x290>)
 800a848:	0103      	lsls	r3, r0, #4
 800a84a:	440b      	add	r3, r1
 800a84c:	2100      	movs	r1, #0
 800a84e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800a852:	2303      	movs	r3, #3
 800a854:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 800a856:	2305      	movs	r3, #5
 800a858:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a860:	e2d1      	b.n	800ae06 <make_smap+0x622>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800a862:	2300      	movs	r3, #0
 800a864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a868:	e2c3      	b.n	800adf2 <make_smap+0x60e>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800a86a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a872:	4980      	ldr	r1, [pc, #512]	; (800aa74 <make_smap+0x290>)
 800a874:	0112      	lsls	r2, r2, #4
 800a876:	4413      	add	r3, r2
 800a878:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800a87c:	4b7e      	ldr	r3, [pc, #504]	; (800aa78 <make_smap+0x294>)
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	f040 82b1 	bne.w	800ade8 <make_smap+0x604>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800a886:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a88a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a88e:	497d      	ldr	r1, [pc, #500]	; (800aa84 <make_smap+0x2a0>)
 800a890:	0112      	lsls	r2, r2, #4
 800a892:	440a      	add	r2, r1
 800a894:	4413      	add	r3, r2
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800a89c:	4b7a      	ldr	r3, [pc, #488]	; (800aa88 <make_smap+0x2a4>)
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d004      	beq.n	800a8b4 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800a8aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a8ae:	091b      	lsrs	r3, r3, #4
 800a8b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800a8b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a8b8:	f003 0308 	and.w	r3, r3, #8
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f040 809c 	bne.w	800a9fa <make_smap+0x216>
 800a8c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a8c6:	2b0f      	cmp	r3, #15
 800a8c8:	f000 8097 	beq.w	800a9fa <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800a8cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8d6:	4967      	ldr	r1, [pc, #412]	; (800aa74 <make_smap+0x290>)
 800a8d8:	0112      	lsls	r2, r2, #4
 800a8da:	4413      	add	r3, r2
 800a8dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a8e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	f040 8088 	bne.w	800a9fa <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800a8ea:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8f2:	4960      	ldr	r1, [pc, #384]	; (800aa74 <make_smap+0x290>)
 800a8f4:	0112      	lsls	r2, r2, #4
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	b299      	uxth	r1, r3
 800a900:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a90a:	4401      	add	r1, r0
 800a90c:	b288      	uxth	r0, r1
 800a90e:	4959      	ldr	r1, [pc, #356]	; (800aa74 <make_smap+0x290>)
 800a910:	0112      	lsls	r2, r2, #4
 800a912:	4413      	add	r3, r2
 800a914:	4602      	mov	r2, r0
 800a916:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800a91a:	4b5b      	ldr	r3, [pc, #364]	; (800aa88 <make_smap+0x2a4>)
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d068      	beq.n	800a9fa <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800a928:	2301      	movs	r3, #1
 800a92a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a92c:	e05e      	b.n	800a9ec <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800a92e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	441a      	add	r2, r3
 800a936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a93a:	4952      	ldr	r1, [pc, #328]	; (800aa84 <make_smap+0x2a0>)
 800a93c:	0112      	lsls	r2, r2, #4
 800a93e:	440a      	add	r2, r1
 800a940:	4413      	add	r3, r2
 800a942:	7819      	ldrb	r1, [r3, #0]
 800a944:	1d3a      	adds	r2, r7, #4
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	4413      	add	r3, r2
 800a94a:	460a      	mov	r2, r1
 800a94c:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800a94e:	4b4e      	ldr	r3, [pc, #312]	; (800aa88 <make_smap+0x2a4>)
 800a950:	881b      	ldrh	r3, [r3, #0]
 800a952:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00a      	beq.n	800a972 <make_smap+0x18e>
 800a95c:	1d3a      	adds	r2, r7, #4
 800a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a960:	4413      	add	r3, r2
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	091b      	lsrs	r3, r3, #4
 800a966:	b2d9      	uxtb	r1, r3
 800a968:	1d3a      	adds	r2, r7, #4
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	4413      	add	r3, r2
 800a96e:	460a      	mov	r2, r1
 800a970:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800a972:	1d3a      	adds	r2, r7, #4
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	4413      	add	r3, r2
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d13b      	bne.n	800a9fa <make_smap+0x216>
 800a982:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	4413      	add	r3, r2
 800a98a:	2b0f      	cmp	r3, #15
 800a98c:	d035      	beq.n	800a9fa <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800a98e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	4413      	add	r3, r2
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a99c:	4935      	ldr	r1, [pc, #212]	; (800aa74 <make_smap+0x290>)
 800a99e:	0112      	lsls	r2, r2, #4
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a9a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d11b      	bne.n	800a9e6 <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800a9ae:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	441a      	add	r2, r3
 800a9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9ba:	492e      	ldr	r1, [pc, #184]	; (800aa74 <make_smap+0x290>)
 800a9bc:	0112      	lsls	r2, r2, #4
 800a9be:	4413      	add	r3, r2
 800a9c0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	b299      	uxth	r1, r3
 800a9c8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	4413      	add	r3, r2
 800a9d0:	1c5a      	adds	r2, r3, #1
 800a9d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9d6:	4401      	add	r1, r0
 800a9d8:	b288      	uxth	r0, r1
 800a9da:	4926      	ldr	r1, [pc, #152]	; (800aa74 <make_smap+0x290>)
 800a9dc:	0112      	lsls	r2, r2, #4
 800a9de:	4413      	add	r3, r2
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a9f0:	f1c3 0310 	rsb	r3, r3, #16
 800a9f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	db99      	blt.n	800a92e <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800a9fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a9fe:	f003 0304 	and.w	r3, r3, #4
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f040 80a8 	bne.w	800ab58 <make_smap+0x374>
 800aa08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa0c:	2b0f      	cmp	r3, #15
 800aa0e:	f000 80a3 	beq.w	800ab58 <make_smap+0x374>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800aa12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	4915      	ldr	r1, [pc, #84]	; (800aa74 <make_smap+0x290>)
 800aa1e:	0112      	lsls	r2, r2, #4
 800aa20:	4413      	add	r3, r2
 800aa22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aa26:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	f040 8094 	bne.w	800ab58 <make_smap+0x374>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800aa30:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa38:	490e      	ldr	r1, [pc, #56]	; (800aa74 <make_smap+0x290>)
 800aa3a:	0112      	lsls	r2, r2, #4
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	b299      	uxth	r1, r3
 800aa46:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa4e:	3301      	adds	r3, #1
 800aa50:	4401      	add	r1, r0
 800aa52:	b288      	uxth	r0, r1
 800aa54:	4907      	ldr	r1, [pc, #28]	; (800aa74 <make_smap+0x290>)
 800aa56:	0112      	lsls	r2, r2, #4
 800aa58:	4413      	add	r3, r2
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800aa60:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <make_smap+0x2a4>)
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d074      	beq.n	800ab58 <make_smap+0x374>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800aa6e:	2301      	movs	r3, #1
 800aa70:	627b      	str	r3, [r7, #36]	; 0x24
 800aa72:	e06a      	b.n	800ab4a <make_smap+0x366>
 800aa74:	20000ce0 	.word	0x20000ce0
 800aa78:	200003ca 	.word	0x200003ca
 800aa7c:	20000ac8 	.word	0x20000ac8
 800aa80:	20000b2d 	.word	0x20000b2d
 800aa84:	2000022c 	.word	0x2000022c
 800aa88:	20000ee4 	.word	0x20000ee4
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800aa8c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa90:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	440b      	add	r3, r1
 800aa98:	499e      	ldr	r1, [pc, #632]	; (800ad14 <make_smap+0x530>)
 800aa9a:	0112      	lsls	r2, r2, #4
 800aa9c:	440a      	add	r2, r1
 800aa9e:	4413      	add	r3, r2
 800aaa0:	7819      	ldrb	r1, [r3, #0]
 800aaa2:	1d3a      	adds	r2, r7, #4
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	4413      	add	r3, r2
 800aaa8:	460a      	mov	r2, r1
 800aaaa:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800aaac:	4b9a      	ldr	r3, [pc, #616]	; (800ad18 <make_smap+0x534>)
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <make_smap+0x2ec>
 800aaba:	1d3a      	adds	r2, r7, #4
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	4413      	add	r3, r2
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	091b      	lsrs	r3, r3, #4
 800aac4:	b2d9      	uxtb	r1, r3
 800aac6:	1d3a      	adds	r2, r7, #4
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	4413      	add	r3, r2
 800aacc:	460a      	mov	r2, r1
 800aace:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800aad0:	1d3a      	adds	r2, r7, #4
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	4413      	add	r3, r2
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d13b      	bne.n	800ab58 <make_smap+0x374>
 800aae0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	4413      	add	r3, r2
 800aae8:	2b0f      	cmp	r3, #15
 800aaea:	d035      	beq.n	800ab58 <make_smap+0x374>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800aaec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aaf0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	440b      	add	r3, r1
 800aaf8:	3301      	adds	r3, #1
 800aafa:	4988      	ldr	r1, [pc, #544]	; (800ad1c <make_smap+0x538>)
 800aafc:	0112      	lsls	r2, r2, #4
 800aafe:	4413      	add	r3, r2
 800ab00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab04:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d11b      	bne.n	800ab44 <make_smap+0x360>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ab0c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab10:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	440b      	add	r3, r1
 800ab18:	4980      	ldr	r1, [pc, #512]	; (800ad1c <make_smap+0x538>)
 800ab1a:	0112      	lsls	r2, r2, #4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	b299      	uxth	r1, r3
 800ab26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab2a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	4423      	add	r3, r4
 800ab32:	3301      	adds	r3, #1
 800ab34:	4401      	add	r1, r0
 800ab36:	b288      	uxth	r0, r1
 800ab38:	4978      	ldr	r1, [pc, #480]	; (800ad1c <make_smap+0x538>)
 800ab3a:	0112      	lsls	r2, r2, #4
 800ab3c:	4413      	add	r3, r2
 800ab3e:	4602      	mov	r2, r0
 800ab40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	3301      	adds	r3, #1
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
 800ab4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab4e:	f1c3 0310 	rsb	r3, r3, #16
 800ab52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab54:	429a      	cmp	r2, r3
 800ab56:	db99      	blt.n	800aa8c <make_smap+0x2a8>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800ab58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f040 809a 	bne.w	800ac9a <make_smap+0x4b6>
 800ab66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 8095 	beq.w	800ac9a <make_smap+0x4b6>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800ab70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ab74:	1e5a      	subs	r2, r3, #1
 800ab76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab7a:	4968      	ldr	r1, [pc, #416]	; (800ad1c <make_smap+0x538>)
 800ab7c:	0112      	lsls	r2, r2, #4
 800ab7e:	4413      	add	r3, r2
 800ab80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab84:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	f040 8086 	bne.w	800ac9a <make_smap+0x4b6>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800ab8e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab96:	4961      	ldr	r1, [pc, #388]	; (800ad1c <make_smap+0x538>)
 800ab98:	0112      	lsls	r2, r2, #4
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	b299      	uxth	r1, r3
 800aba4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aba8:	1e5a      	subs	r2, r3, #1
 800abaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abae:	4401      	add	r1, r0
 800abb0:	b288      	uxth	r0, r1
 800abb2:	495a      	ldr	r1, [pc, #360]	; (800ad1c <make_smap+0x538>)
 800abb4:	0112      	lsls	r2, r2, #4
 800abb6:	4413      	add	r3, r2
 800abb8:	4602      	mov	r2, r0
 800abba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800abbe:	4b56      	ldr	r3, [pc, #344]	; (800ad18 <make_smap+0x534>)
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d066      	beq.n	800ac9a <make_smap+0x4b6>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800abcc:	2301      	movs	r3, #1
 800abce:	623b      	str	r3, [r7, #32]
 800abd0:	e05e      	b.n	800ac90 <make_smap+0x4ac>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800abd2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	1ad2      	subs	r2, r2, r3
 800abda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abde:	494d      	ldr	r1, [pc, #308]	; (800ad14 <make_smap+0x530>)
 800abe0:	0112      	lsls	r2, r2, #4
 800abe2:	440a      	add	r2, r1
 800abe4:	4413      	add	r3, r2
 800abe6:	7819      	ldrb	r1, [r3, #0]
 800abe8:	1d3a      	adds	r2, r7, #4
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	4413      	add	r3, r2
 800abee:	460a      	mov	r2, r1
 800abf0:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800abf2:	4b49      	ldr	r3, [pc, #292]	; (800ad18 <make_smap+0x534>)
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00a      	beq.n	800ac16 <make_smap+0x432>
 800ac00:	1d3a      	adds	r2, r7, #4
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	091b      	lsrs	r3, r3, #4
 800ac0a:	b2d9      	uxtb	r1, r3
 800ac0c:	1d3a      	adds	r2, r7, #4
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	4413      	add	r3, r2
 800ac12:	460a      	mov	r2, r1
 800ac14:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800ac16:	1d3a      	adds	r2, r7, #4
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d139      	bne.n	800ac9a <make_smap+0x4b6>
 800ac26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	2b0f      	cmp	r3, #15
 800ac30:	d033      	beq.n	800ac9a <make_smap+0x4b6>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800ac32:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	1e5a      	subs	r2, r3, #1
 800ac3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac40:	4936      	ldr	r1, [pc, #216]	; (800ad1c <make_smap+0x538>)
 800ac42:	0112      	lsls	r2, r2, #4
 800ac44:	4413      	add	r3, r2
 800ac46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ac4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d11b      	bne.n	800ac8a <make_smap+0x4a6>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ac52:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	1ad2      	subs	r2, r2, r3
 800ac5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac5e:	492f      	ldr	r1, [pc, #188]	; (800ad1c <make_smap+0x538>)
 800ac60:	0112      	lsls	r2, r2, #4
 800ac62:	4413      	add	r3, r2
 800ac64:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	b299      	uxth	r1, r3
 800ac6c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	1e5a      	subs	r2, r3, #1
 800ac76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac7a:	4401      	add	r1, r0
 800ac7c:	b288      	uxth	r0, r1
 800ac7e:	4927      	ldr	r1, [pc, #156]	; (800ad1c <make_smap+0x538>)
 800ac80:	0112      	lsls	r2, r2, #4
 800ac82:	4413      	add	r3, r2
 800ac84:	4602      	mov	r2, r0
 800ac86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	623b      	str	r3, [r7, #32]
 800ac90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac94:	6a3a      	ldr	r2, [r7, #32]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	db9b      	blt.n	800abd2 <make_smap+0x3ee>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800ac9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f040 80a0 	bne.w	800ade8 <make_smap+0x604>
 800aca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 809b 	beq.w	800ade8 <make_smap+0x604>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800acb2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800acb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acba:	3b01      	subs	r3, #1
 800acbc:	4917      	ldr	r1, [pc, #92]	; (800ad1c <make_smap+0x538>)
 800acbe:	0112      	lsls	r2, r2, #4
 800acc0:	4413      	add	r3, r2
 800acc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800acc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800acca:	4293      	cmp	r3, r2
 800accc:	f040 808c 	bne.w	800ade8 <make_smap+0x604>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800acd0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800acd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acd8:	4910      	ldr	r1, [pc, #64]	; (800ad1c <make_smap+0x538>)
 800acda:	0112      	lsls	r2, r2, #4
 800acdc:	4413      	add	r3, r2
 800acde:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	b299      	uxth	r1, r3
 800ace6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800acea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acee:	3b01      	subs	r3, #1
 800acf0:	4401      	add	r1, r0
 800acf2:	b288      	uxth	r0, r1
 800acf4:	4909      	ldr	r1, [pc, #36]	; (800ad1c <make_smap+0x538>)
 800acf6:	0112      	lsls	r2, r2, #4
 800acf8:	4413      	add	r3, r2
 800acfa:	4602      	mov	r2, r0
 800acfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800ad00:	4b05      	ldr	r3, [pc, #20]	; (800ad18 <make_smap+0x534>)
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d06c      	beq.n	800ade8 <make_smap+0x604>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800ad0e:	2301      	movs	r3, #1
 800ad10:	61fb      	str	r3, [r7, #28]
 800ad12:	e064      	b.n	800adde <make_smap+0x5fa>
 800ad14:	2000022c 	.word	0x2000022c
 800ad18:	20000ee4 	.word	0x20000ee4
 800ad1c:	20000ce0 	.word	0x20000ce0
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800ad20:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ad24:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	1acb      	subs	r3, r1, r3
 800ad2c:	4947      	ldr	r1, [pc, #284]	; (800ae4c <make_smap+0x668>)
 800ad2e:	0112      	lsls	r2, r2, #4
 800ad30:	440a      	add	r2, r1
 800ad32:	4413      	add	r3, r2
 800ad34:	7819      	ldrb	r1, [r3, #0]
 800ad36:	1d3a      	adds	r2, r7, #4
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	460a      	mov	r2, r1
 800ad3e:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800ad40:	4b43      	ldr	r3, [pc, #268]	; (800ae50 <make_smap+0x66c>)
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <make_smap+0x580>
 800ad4e:	1d3a      	adds	r2, r7, #4
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	4413      	add	r3, r2
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	091b      	lsrs	r3, r3, #4
 800ad58:	b2d9      	uxtb	r1, r3
 800ad5a:	1d3a      	adds	r2, r7, #4
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	4413      	add	r3, r2
 800ad60:	460a      	mov	r2, r1
 800ad62:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800ad64:	1d3a      	adds	r2, r7, #4
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d139      	bne.n	800ade8 <make_smap+0x604>
 800ad74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	2b0f      	cmp	r3, #15
 800ad7e:	d033      	beq.n	800ade8 <make_smap+0x604>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800ad80:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ad84:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	1acb      	subs	r3, r1, r3
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	4931      	ldr	r1, [pc, #196]	; (800ae54 <make_smap+0x670>)
 800ad90:	0112      	lsls	r2, r2, #4
 800ad92:	4413      	add	r3, r2
 800ad94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ad98:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d11b      	bne.n	800add8 <make_smap+0x5f4>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ada0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ada4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	1acb      	subs	r3, r1, r3
 800adac:	4929      	ldr	r1, [pc, #164]	; (800ae54 <make_smap+0x670>)
 800adae:	0112      	lsls	r2, r2, #4
 800adb0:	4413      	add	r3, r2
 800adb2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	b299      	uxth	r1, r3
 800adba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800adbe:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	1ae3      	subs	r3, r4, r3
 800adc6:	3b01      	subs	r3, #1
 800adc8:	4401      	add	r1, r0
 800adca:	b288      	uxth	r0, r1
 800adcc:	4921      	ldr	r1, [pc, #132]	; (800ae54 <make_smap+0x670>)
 800adce:	0112      	lsls	r2, r2, #4
 800add0:	4413      	add	r3, r2
 800add2:	4602      	mov	r2, r0
 800add4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	3301      	adds	r3, #1
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	db9b      	blt.n	800ad20 <make_smap+0x53c>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800ade8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adec:	3301      	adds	r3, #1
 800adee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800adf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adf6:	2b0f      	cmp	r3, #15
 800adf8:	f67f ad37 	bls.w	800a86a <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800adfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ae00:	3301      	adds	r3, #1
 800ae02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ae06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ae0a:	2b0f      	cmp	r3, #15
 800ae0c:	f67f ad29 	bls.w	800a862 <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800ae10:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <make_smap+0x674>)
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	3301      	adds	r3, #1
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <make_smap+0x674>)
 800ae1a:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800ae1c:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <make_smap+0x678>)
 800ae1e:	785b      	ldrb	r3, [r3, #1]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	4618      	mov	r0, r3
 800ae24:	4b0d      	ldr	r3, [pc, #52]	; (800ae5c <make_smap+0x678>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	4a09      	ldr	r2, [pc, #36]	; (800ae54 <make_smap+0x670>)
 800ae2e:	0103      	lsls	r3, r0, #4
 800ae30:	440b      	add	r3, r1
 800ae32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae36:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	f43f ad0d 	beq.w	800a85a <make_smap+0x76>
}
 800ae40:	bf00      	nop
 800ae42:	3730      	adds	r7, #48	; 0x30
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bc90      	pop	{r4, r7}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	2000022c 	.word	0x2000022c
 800ae50:	20000ee4 	.word	0x20000ee4
 800ae54:	20000ce0 	.word	0x20000ce0
 800ae58:	200003ca 	.word	0x200003ca
 800ae5c:	20000b8c 	.word	0x20000b8c

0800ae60 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800ae66:	4b92      	ldr	r3, [pc, #584]	; (800b0b0 <make_route+0x250>)
 800ae68:	789b      	ldrb	r3, [r3, #2]
 800ae6a:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	80bb      	strh	r3, [r7, #4]
 800ae70:	e006      	b.n	800ae80 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	4a8f      	ldr	r2, [pc, #572]	; (800b0b4 <make_route+0x254>)
 800ae76:	21ff      	movs	r1, #255	; 0xff
 800ae78:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800ae7a:	88bb      	ldrh	r3, [r7, #4]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	80bb      	strh	r3, [r7, #4]
 800ae80:	88bb      	ldrh	r3, [r7, #4]
 800ae82:	2bff      	cmp	r3, #255	; 0xff
 800ae84:	d9f5      	bls.n	800ae72 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800ae86:	4b8a      	ldr	r3, [pc, #552]	; (800b0b0 <make_route+0x250>)
 800ae88:	785b      	ldrb	r3, [r3, #1]
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	4b88      	ldr	r3, [pc, #544]	; (800b0b0 <make_route+0x250>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	4619      	mov	r1, r3
 800ae96:	4a88      	ldr	r2, [pc, #544]	; (800b0b8 <make_route+0x258>)
 800ae98:	0103      	lsls	r3, r0, #4
 800ae9a:	440b      	add	r3, r1
 800ae9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea0:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800aea2:	4b83      	ldr	r3, [pc, #524]	; (800b0b0 <make_route+0x250>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800aea8:	4b81      	ldr	r3, [pc, #516]	; (800b0b0 <make_route+0x250>)
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	i = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	80bb      	strh	r3, [r7, #4]
	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800aeb2:	79ba      	ldrb	r2, [r7, #6]
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	4981      	ldr	r1, [pc, #516]	; (800b0bc <make_route+0x25c>)
 800aeb8:	0112      	lsls	r2, r2, #4
 800aeba:	440a      	add	r2, r1
 800aebc:	4413      	add	r3, r2
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800aec2:	4b7f      	ldr	r3, [pc, #508]	; (800b0c0 <make_route+0x260>)
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <make_route+0x76>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800aed0:	787b      	ldrb	r3, [r7, #1]
 800aed2:	091b      	lsrs	r3, r3, #4
 800aed4:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800aed6:	787b      	ldrb	r3, [r7, #1]
 800aed8:	f003 0308 	and.w	r3, r3, #8
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d122      	bne.n	800af26 <make_route+0xc6>
 800aee0:	79bb      	ldrb	r3, [r7, #6]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	4974      	ldr	r1, [pc, #464]	; (800b0b8 <make_route+0x258>)
 800aee8:	0112      	lsls	r2, r2, #4
 800aeea:	4413      	add	r3, r2
 800aeec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aef0:	887a      	ldrh	r2, [r7, #2]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d917      	bls.n	800af26 <make_route+0xc6>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800aef6:	4b6e      	ldr	r3, [pc, #440]	; (800b0b0 <make_route+0x250>)
 800aef8:	789b      	ldrb	r3, [r3, #2]
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	425b      	negs	r3, r3
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	88bb      	ldrh	r3, [r7, #4]
 800af02:	f002 0203 	and.w	r2, r2, #3
 800af06:	b2d1      	uxtb	r1, r2
 800af08:	4a6a      	ldr	r2, [pc, #424]	; (800b0b4 <make_route+0x254>)
 800af0a:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800af0c:	79bb      	ldrb	r3, [r7, #6]
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	4969      	ldr	r1, [pc, #420]	; (800b0b8 <make_route+0x258>)
 800af14:	0112      	lsls	r2, r2, #4
 800af16:	4413      	add	r3, r2
 800af18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af1c:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800af1e:	79bb      	ldrb	r3, [r7, #6]
 800af20:	3301      	adds	r3, #1
 800af22:	71bb      	strb	r3, [r7, #6]
 800af24:	e079      	b.n	800b01a <make_route+0x1ba>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800af26:	787b      	ldrb	r3, [r7, #1]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d123      	bne.n	800af78 <make_route+0x118>
 800af30:	79ba      	ldrb	r2, [r7, #6]
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	3301      	adds	r3, #1
 800af36:	4960      	ldr	r1, [pc, #384]	; (800b0b8 <make_route+0x258>)
 800af38:	0112      	lsls	r2, r2, #4
 800af3a:	4413      	add	r3, r2
 800af3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af40:	887a      	ldrh	r2, [r7, #2]
 800af42:	429a      	cmp	r2, r3
 800af44:	d918      	bls.n	800af78 <make_route+0x118>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800af46:	4b5a      	ldr	r3, [pc, #360]	; (800b0b0 <make_route+0x250>)
 800af48:	789b      	ldrb	r3, [r3, #2]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f1c3 0301 	rsb	r3, r3, #1
 800af50:	b2da      	uxtb	r2, r3
 800af52:	88bb      	ldrh	r3, [r7, #4]
 800af54:	f002 0203 	and.w	r2, r2, #3
 800af58:	b2d1      	uxtb	r1, r2
 800af5a:	4a56      	ldr	r2, [pc, #344]	; (800b0b4 <make_route+0x254>)
 800af5c:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800af5e:	79ba      	ldrb	r2, [r7, #6]
 800af60:	79fb      	ldrb	r3, [r7, #7]
 800af62:	3301      	adds	r3, #1
 800af64:	4954      	ldr	r1, [pc, #336]	; (800b0b8 <make_route+0x258>)
 800af66:	0112      	lsls	r2, r2, #4
 800af68:	4413      	add	r3, r2
 800af6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af6e:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	3301      	adds	r3, #1
 800af74:	71fb      	strb	r3, [r7, #7]
 800af76:	e050      	b.n	800b01a <make_route+0x1ba>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800af78:	787b      	ldrb	r3, [r7, #1]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d123      	bne.n	800afca <make_route+0x16a>
 800af82:	79bb      	ldrb	r3, [r7, #6]
 800af84:	1e5a      	subs	r2, r3, #1
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	494b      	ldr	r1, [pc, #300]	; (800b0b8 <make_route+0x258>)
 800af8a:	0112      	lsls	r2, r2, #4
 800af8c:	4413      	add	r3, r2
 800af8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af92:	887a      	ldrh	r2, [r7, #2]
 800af94:	429a      	cmp	r2, r3
 800af96:	d918      	bls.n	800afca <make_route+0x16a>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800af98:	4b45      	ldr	r3, [pc, #276]	; (800b0b0 <make_route+0x250>)
 800af9a:	789b      	ldrb	r3, [r3, #2]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f1c3 0302 	rsb	r3, r3, #2
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	88bb      	ldrh	r3, [r7, #4]
 800afa6:	f002 0203 	and.w	r2, r2, #3
 800afaa:	b2d1      	uxtb	r1, r2
 800afac:	4a41      	ldr	r2, [pc, #260]	; (800b0b4 <make_route+0x254>)
 800afae:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800afb0:	79bb      	ldrb	r3, [r7, #6]
 800afb2:	1e5a      	subs	r2, r3, #1
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	4940      	ldr	r1, [pc, #256]	; (800b0b8 <make_route+0x258>)
 800afb8:	0112      	lsls	r2, r2, #4
 800afba:	4413      	add	r3, r2
 800afbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800afc0:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800afc2:	79bb      	ldrb	r3, [r7, #6]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	71bb      	strb	r3, [r7, #6]
 800afc8:	e027      	b.n	800b01a <make_route+0x1ba>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800afca:	787b      	ldrb	r3, [r7, #1]
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d122      	bne.n	800b01a <make_route+0x1ba>
 800afd4:	79ba      	ldrb	r2, [r7, #6]
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	3b01      	subs	r3, #1
 800afda:	4937      	ldr	r1, [pc, #220]	; (800b0b8 <make_route+0x258>)
 800afdc:	0112      	lsls	r2, r2, #4
 800afde:	4413      	add	r3, r2
 800afe0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800afe4:	887a      	ldrh	r2, [r7, #2]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d917      	bls.n	800b01a <make_route+0x1ba>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800afea:	4b31      	ldr	r3, [pc, #196]	; (800b0b0 <make_route+0x250>)
 800afec:	789b      	ldrb	r3, [r3, #2]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f1c3 0303 	rsb	r3, r3, #3
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	88bb      	ldrh	r3, [r7, #4]
 800aff8:	f002 0203 	and.w	r2, r2, #3
 800affc:	b2d1      	uxtb	r1, r2
 800affe:	4a2d      	ldr	r2, [pc, #180]	; (800b0b4 <make_route+0x254>)
 800b000:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800b002:	79ba      	ldrb	r2, [r7, #6]
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	3b01      	subs	r3, #1
 800b008:	492b      	ldr	r1, [pc, #172]	; (800b0b8 <make_route+0x258>)
 800b00a:	0112      	lsls	r2, r2, #4
 800b00c:	4413      	add	r3, r2
 800b00e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b012:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	3b01      	subs	r3, #1
 800b018:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800b01a:	88bb      	ldrh	r3, [r7, #4]
 800b01c:	4a25      	ldr	r2, [pc, #148]	; (800b0b4 <make_route+0x254>)
 800b01e:	5cd3      	ldrb	r3, [r2, r3]
 800b020:	2b03      	cmp	r3, #3
 800b022:	d82b      	bhi.n	800b07c <make_route+0x21c>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <make_route+0x1cc>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b03d 	.word	0x0800b03d
 800b030:	0800b047 	.word	0x0800b047
 800b034:	0800b059 	.word	0x0800b059
 800b038:	0800b06b 	.word	0x0800b06b
		case 0x00:												//a前進する場合
			route[i] = 0x88;									//a格納データ形式を変更
 800b03c:	88bb      	ldrh	r3, [r7, #4]
 800b03e:	4a1d      	ldr	r2, [pc, #116]	; (800b0b4 <make_route+0x254>)
 800b040:	2188      	movs	r1, #136	; 0x88
 800b042:	54d1      	strb	r1, [r2, r3]
			break;
 800b044:	e01f      	b.n	800b086 <make_route+0x226>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800b046:	2100      	movs	r1, #0
 800b048:	2001      	movs	r0, #1
 800b04a:	f7ff fb7f 	bl	800a74c <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800b04e:	88bb      	ldrh	r3, [r7, #4]
 800b050:	4a18      	ldr	r2, [pc, #96]	; (800b0b4 <make_route+0x254>)
 800b052:	2144      	movs	r1, #68	; 0x44
 800b054:	54d1      	strb	r1, [r2, r3]
			break;
 800b056:	e016      	b.n	800b086 <make_route+0x226>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800b058:	2100      	movs	r1, #0
 800b05a:	2002      	movs	r0, #2
 800b05c:	f7ff fb76 	bl	800a74c <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800b060:	88bb      	ldrh	r3, [r7, #4]
 800b062:	4a14      	ldr	r2, [pc, #80]	; (800b0b4 <make_route+0x254>)
 800b064:	2122      	movs	r1, #34	; 0x22
 800b066:	54d1      	strb	r1, [r2, r3]
			break;
 800b068:	e00d      	b.n	800b086 <make_route+0x226>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800b06a:	2100      	movs	r1, #0
 800b06c:	20ff      	movs	r0, #255	; 0xff
 800b06e:	f7ff fb6d 	bl	800a74c <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800b072:	88bb      	ldrh	r3, [r7, #4]
 800b074:	4a0f      	ldr	r2, [pc, #60]	; (800b0b4 <make_route+0x254>)
 800b076:	2111      	movs	r1, #17
 800b078:	54d1      	strb	r1, [r2, r3]
			break;
 800b07a:	e004      	b.n	800b086 <make_route+0x226>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800b07c:	88bb      	ldrh	r3, [r7, #4]
 800b07e:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <make_route+0x254>)
 800b080:	2100      	movs	r1, #0
 800b082:	54d1      	strb	r1, [r2, r3]
			break;
 800b084:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800b086:	88bb      	ldrh	r3, [r7, #4]
 800b088:	3301      	adds	r3, #1
 800b08a:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800b08c:	79ba      	ldrb	r2, [r7, #6]
 800b08e:	79fb      	ldrb	r3, [r7, #7]
 800b090:	4909      	ldr	r1, [pc, #36]	; (800b0b8 <make_route+0x258>)
 800b092:	0112      	lsls	r2, r2, #4
 800b094:	4413      	add	r3, r2
 800b096:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f47f af09 	bne.w	800aeb2 <make_route+0x52>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800b0a0:	4a03      	ldr	r2, [pc, #12]	; (800b0b0 <make_route+0x250>)
 800b0a2:	783b      	ldrb	r3, [r7, #0]
 800b0a4:	7093      	strb	r3, [r2, #2]
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000b8c 	.word	0x20000b8c
 800b0b4:	20000bd4 	.word	0x20000bd4
 800b0b8:	20000ce0 	.word	0x20000ce0
 800b0bc:	2000022c 	.word	0x2000022c
 800b0c0:	20000ee4 	.word	0x20000ee4

0800b0c4 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73bb      	strb	r3, [r7, #14]
 800b0d2:	e014      	b.n	800b0fe <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]
 800b0d8:	e00b      	b.n	800b0f2 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800b0da:	7bba      	ldrb	r2, [r7, #14]
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	499f      	ldr	r1, [pc, #636]	; (800b35c <find_pregoal+0x298>)
 800b0e0:	0112      	lsls	r2, r2, #4
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b0e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	73fb      	strb	r3, [r7, #15]
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	2b0f      	cmp	r3, #15
 800b0f6:	d9f0      	bls.n	800b0da <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	73bb      	strb	r3, [r7, #14]
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	2b0f      	cmp	r3, #15
 800b102:	d9e7      	bls.n	800b0d4 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800b104:	4b96      	ldr	r3, [pc, #600]	; (800b360 <find_pregoal+0x29c>)
 800b106:	2200      	movs	r2, #0
 800b108:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800b10a:	4b96      	ldr	r3, [pc, #600]	; (800b364 <find_pregoal+0x2a0>)
 800b10c:	785b      	ldrb	r3, [r3, #1]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	4618      	mov	r0, r3
 800b112:	4b94      	ldr	r3, [pc, #592]	; (800b364 <find_pregoal+0x2a0>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b2db      	uxtb	r3, r3
 800b118:	4619      	mov	r1, r3
 800b11a:	4a90      	ldr	r2, [pc, #576]	; (800b35c <find_pregoal+0x298>)
 800b11c:	0103      	lsls	r3, r0, #4
 800b11e:	440b      	add	r3, r1
 800b120:	2100      	movs	r1, #0
 800b122:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800b126:	4b90      	ldr	r3, [pc, #576]	; (800b368 <find_pregoal+0x2a4>)
 800b128:	2200      	movs	r2, #0
 800b12a:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800b12c:	2303      	movs	r3, #3
 800b12e:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800b130:	2301      	movs	r3, #1
 800b132:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b134:	2300      	movs	r3, #0
 800b136:	73bb      	strb	r3, [r7, #14]
 800b138:	e180      	b.n	800b43c <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
 800b13e:	e173      	b.n	800b428 <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800b140:	7bba      	ldrb	r2, [r7, #14]
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	4985      	ldr	r1, [pc, #532]	; (800b35c <find_pregoal+0x298>)
 800b146:	0112      	lsls	r2, r2, #4
 800b148:	4413      	add	r3, r2
 800b14a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b14e:	4b86      	ldr	r3, [pc, #536]	; (800b368 <find_pregoal+0x2a4>)
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	429a      	cmp	r2, r3
 800b154:	f040 8165 	bne.w	800b422 <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800b158:	7bba      	ldrb	r2, [r7, #14]
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	4983      	ldr	r1, [pc, #524]	; (800b36c <find_pregoal+0x2a8>)
 800b15e:	0112      	lsls	r2, r2, #4
 800b160:	440a      	add	r2, r1
 800b162:	4413      	add	r3, r2
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d14d      	bne.n	800b20e <find_pregoal+0x14a>
 800b172:	7bbb      	ldrb	r3, [r7, #14]
 800b174:	2b0f      	cmp	r3, #15
 800b176:	d04a      	beq.n	800b20e <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	4977      	ldr	r1, [pc, #476]	; (800b35c <find_pregoal+0x298>)
 800b180:	0112      	lsls	r2, r2, #4
 800b182:	4413      	add	r3, r2
 800b184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d13e      	bne.n	800b20e <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b190:	7bba      	ldrb	r2, [r7, #14]
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	4971      	ldr	r1, [pc, #452]	; (800b35c <find_pregoal+0x298>)
 800b196:	0112      	lsls	r2, r2, #4
 800b198:	4413      	add	r3, r2
 800b19a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	b299      	uxth	r1, r3
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	4401      	add	r1, r0
 800b1aa:	b288      	uxth	r0, r1
 800b1ac:	496b      	ldr	r1, [pc, #428]	; (800b35c <find_pregoal+0x298>)
 800b1ae:	0112      	lsls	r2, r2, #4
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	496b      	ldr	r1, [pc, #428]	; (800b36c <find_pregoal+0x2a8>)
 800b1c0:	0112      	lsls	r2, r2, #4
 800b1c2:	440a      	add	r2, r1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	011b      	lsls	r3, r3, #4
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	1c59      	adds	r1, r3, #1
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	4866      	ldr	r0, [pc, #408]	; (800b36c <find_pregoal+0x2a8>)
 800b1d4:	0109      	lsls	r1, r1, #4
 800b1d6:	4401      	add	r1, r0
 800b1d8:	440b      	add	r3, r1
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d014      	beq.n	800b20e <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	495b      	ldr	r1, [pc, #364]	; (800b35c <find_pregoal+0x298>)
 800b1f0:	0112      	lsls	r2, r2, #4
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b1f8:	4b5d      	ldr	r3, [pc, #372]	; (800b370 <find_pregoal+0x2ac>)
 800b1fa:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800b1fc:	4a5d      	ldr	r2, [pc, #372]	; (800b374 <find_pregoal+0x2b0>)
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800b202:	7bbb      	ldrb	r3, [r7, #14]
 800b204:	3301      	adds	r3, #1
 800b206:	b2da      	uxtb	r2, r3
 800b208:	4b5b      	ldr	r3, [pc, #364]	; (800b378 <find_pregoal+0x2b4>)
 800b20a:	701a      	strb	r2, [r3, #0]
								break;
 800b20c:	e110      	b.n	800b430 <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800b20e:	78fb      	ldrb	r3, [r7, #3]
 800b210:	f003 0304 	and.w	r3, r3, #4
 800b214:	2b00      	cmp	r3, #0
 800b216:	d14d      	bne.n	800b2b4 <find_pregoal+0x1f0>
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b0f      	cmp	r3, #15
 800b21c:	d04a      	beq.n	800b2b4 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800b21e:	7bba      	ldrb	r2, [r7, #14]
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	3301      	adds	r3, #1
 800b224:	494d      	ldr	r1, [pc, #308]	; (800b35c <find_pregoal+0x298>)
 800b226:	0112      	lsls	r2, r2, #4
 800b228:	4413      	add	r3, r2
 800b22a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b22e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b232:	4293      	cmp	r3, r2
 800b234:	d13e      	bne.n	800b2b4 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b236:	7bba      	ldrb	r2, [r7, #14]
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	4948      	ldr	r1, [pc, #288]	; (800b35c <find_pregoal+0x298>)
 800b23c:	0112      	lsls	r2, r2, #4
 800b23e:	4413      	add	r3, r2
 800b240:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	b299      	uxth	r1, r3
 800b248:	7bba      	ldrb	r2, [r7, #14]
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	3301      	adds	r3, #1
 800b24e:	4401      	add	r1, r0
 800b250:	b288      	uxth	r0, r1
 800b252:	4942      	ldr	r1, [pc, #264]	; (800b35c <find_pregoal+0x298>)
 800b254:	0112      	lsls	r2, r2, #4
 800b256:	4413      	add	r3, r2
 800b258:	4602      	mov	r2, r0
 800b25a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b25e:	7bba      	ldrb	r2, [r7, #14]
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	3301      	adds	r3, #1
 800b264:	4941      	ldr	r1, [pc, #260]	; (800b36c <find_pregoal+0x2a8>)
 800b266:	0112      	lsls	r2, r2, #4
 800b268:	440a      	add	r2, r1
 800b26a:	4413      	add	r3, r2
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	011b      	lsls	r3, r3, #4
 800b270:	b2da      	uxtb	r2, r3
 800b272:	7bb9      	ldrb	r1, [r7, #14]
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	3301      	adds	r3, #1
 800b278:	483c      	ldr	r0, [pc, #240]	; (800b36c <find_pregoal+0x2a8>)
 800b27a:	0109      	lsls	r1, r1, #4
 800b27c:	4401      	add	r1, r0
 800b27e:	440b      	add	r3, r1
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b286:	429a      	cmp	r2, r3
 800b288:	d014      	beq.n	800b2b4 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b28a:	2301      	movs	r3, #1
 800b28c:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800b28e:	7bba      	ldrb	r2, [r7, #14]
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	3301      	adds	r3, #1
 800b294:	4931      	ldr	r1, [pc, #196]	; (800b35c <find_pregoal+0x298>)
 800b296:	0112      	lsls	r2, r2, #4
 800b298:	4413      	add	r3, r2
 800b29a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b29e:	4b34      	ldr	r3, [pc, #208]	; (800b370 <find_pregoal+0x2ac>)
 800b2a0:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	4b32      	ldr	r3, [pc, #200]	; (800b374 <find_pregoal+0x2b0>)
 800b2aa:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800b2ac:	4a32      	ldr	r2, [pc, #200]	; (800b378 <find_pregoal+0x2b4>)
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	7013      	strb	r3, [r2, #0]
								break;
 800b2b2:	e0bd      	b.n	800b430 <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	f003 0302 	and.w	r3, r3, #2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d15e      	bne.n	800b37c <find_pregoal+0x2b8>
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d05b      	beq.n	800b37c <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	1e5a      	subs	r2, r3, #1
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	4924      	ldr	r1, [pc, #144]	; (800b35c <find_pregoal+0x298>)
 800b2cc:	0112      	lsls	r2, r2, #4
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b2d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d14f      	bne.n	800b37c <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b2dc:	7bba      	ldrb	r2, [r7, #14]
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	491e      	ldr	r1, [pc, #120]	; (800b35c <find_pregoal+0x298>)
 800b2e2:	0112      	lsls	r2, r2, #4
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	b299      	uxth	r1, r3
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	1e5a      	subs	r2, r3, #1
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	4401      	add	r1, r0
 800b2f6:	b288      	uxth	r0, r1
 800b2f8:	4918      	ldr	r1, [pc, #96]	; (800b35c <find_pregoal+0x298>)
 800b2fa:	0112      	lsls	r2, r2, #4
 800b2fc:	4413      	add	r3, r2
 800b2fe:	4602      	mov	r2, r0
 800b300:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	1e5a      	subs	r2, r3, #1
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	4918      	ldr	r1, [pc, #96]	; (800b36c <find_pregoal+0x2a8>)
 800b30c:	0112      	lsls	r2, r2, #4
 800b30e:	440a      	add	r2, r1
 800b310:	4413      	add	r3, r2
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	b2da      	uxtb	r2, r3
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	1e59      	subs	r1, r3, #1
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	4813      	ldr	r0, [pc, #76]	; (800b36c <find_pregoal+0x2a8>)
 800b320:	0109      	lsls	r1, r1, #4
 800b322:	4401      	add	r1, r0
 800b324:	440b      	add	r3, r1
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d025      	beq.n	800b37c <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b330:	2301      	movs	r3, #1
 800b332:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	1e5a      	subs	r2, r3, #1
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	4908      	ldr	r1, [pc, #32]	; (800b35c <find_pregoal+0x298>)
 800b33c:	0112      	lsls	r2, r2, #4
 800b33e:	4413      	add	r3, r2
 800b340:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <find_pregoal+0x2ac>)
 800b346:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800b348:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <find_pregoal+0x2b0>)
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	3b01      	subs	r3, #1
 800b352:	b2da      	uxtb	r2, r3
 800b354:	4b08      	ldr	r3, [pc, #32]	; (800b378 <find_pregoal+0x2b4>)
 800b356:	701a      	strb	r2, [r3, #0]
								break;
 800b358:	e06a      	b.n	800b430 <find_pregoal+0x36c>
 800b35a:	bf00      	nop
 800b35c:	20000ce0 	.word	0x20000ce0
 800b360:	20000b2c 	.word	0x20000b2c
 800b364:	20000b8c 	.word	0x20000b8c
 800b368:	200003ca 	.word	0x200003ca
 800b36c:	2000022c 	.word	0x2000022c
 800b370:	20000b84 	.word	0x20000b84
 800b374:	20000cdc 	.word	0x20000cdc
 800b378:	20000efc 	.word	0x20000efc
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800b37c:	78fb      	ldrb	r3, [r7, #3]
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	d14d      	bne.n	800b422 <find_pregoal+0x35e>
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d04a      	beq.n	800b422 <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800b38c:	7bba      	ldrb	r2, [r7, #14]
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	3b01      	subs	r3, #1
 800b392:	493b      	ldr	r1, [pc, #236]	; (800b480 <find_pregoal+0x3bc>)
 800b394:	0112      	lsls	r2, r2, #4
 800b396:	4413      	add	r3, r2
 800b398:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b39c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d13e      	bne.n	800b422 <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800b3a4:	7bba      	ldrb	r2, [r7, #14]
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	4935      	ldr	r1, [pc, #212]	; (800b480 <find_pregoal+0x3bc>)
 800b3aa:	0112      	lsls	r2, r2, #4
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	b299      	uxth	r1, r3
 800b3b6:	7bba      	ldrb	r2, [r7, #14]
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4401      	add	r1, r0
 800b3be:	b288      	uxth	r0, r1
 800b3c0:	492f      	ldr	r1, [pc, #188]	; (800b480 <find_pregoal+0x3bc>)
 800b3c2:	0112      	lsls	r2, r2, #4
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b3cc:	7bba      	ldrb	r2, [r7, #14]
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	492c      	ldr	r1, [pc, #176]	; (800b484 <find_pregoal+0x3c0>)
 800b3d4:	0112      	lsls	r2, r2, #4
 800b3d6:	440a      	add	r2, r1
 800b3d8:	4413      	add	r3, r2
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	b2da      	uxtb	r2, r3
 800b3e0:	7bb9      	ldrb	r1, [r7, #14]
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	4827      	ldr	r0, [pc, #156]	; (800b484 <find_pregoal+0x3c0>)
 800b3e8:	0109      	lsls	r1, r1, #4
 800b3ea:	4401      	add	r1, r0
 800b3ec:	440b      	add	r3, r1
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d014      	beq.n	800b422 <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800b3fc:	7bba      	ldrb	r2, [r7, #14]
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	3b01      	subs	r3, #1
 800b402:	491f      	ldr	r1, [pc, #124]	; (800b480 <find_pregoal+0x3bc>)
 800b404:	0112      	lsls	r2, r2, #4
 800b406:	4413      	add	r3, r2
 800b408:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b40c:	4b1e      	ldr	r3, [pc, #120]	; (800b488 <find_pregoal+0x3c4>)
 800b40e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	3b01      	subs	r3, #1
 800b414:	b2da      	uxtb	r2, r3
 800b416:	4b1d      	ldr	r3, [pc, #116]	; (800b48c <find_pregoal+0x3c8>)
 800b418:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800b41a:	4a1d      	ldr	r2, [pc, #116]	; (800b490 <find_pregoal+0x3cc>)
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	7013      	strb	r3, [r2, #0]
								break;							}
 800b420:	e006      	b.n	800b430 <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	3301      	adds	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]
 800b428:	7bfb      	ldrb	r3, [r7, #15]
 800b42a:	2b0f      	cmp	r3, #15
 800b42c:	f67f ae88 	bls.w	800b140 <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800b430:	7b7b      	ldrb	r3, [r7, #13]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d107      	bne.n	800b446 <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	3301      	adds	r3, #1
 800b43a:	73bb      	strb	r3, [r7, #14]
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	2b0f      	cmp	r3, #15
 800b440:	f67f ae7b 	bls.w	800b13a <find_pregoal+0x76>
 800b444:	e000      	b.n	800b448 <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800b446:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800b448:	4b12      	ldr	r3, [pc, #72]	; (800b494 <find_pregoal+0x3d0>)
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	b29a      	uxth	r2, r3
 800b450:	4b10      	ldr	r3, [pc, #64]	; (800b494 <find_pregoal+0x3d0>)
 800b452:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800b454:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <find_pregoal+0x3d0>)
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b45c:	d902      	bls.n	800b464 <find_pregoal+0x3a0>
 800b45e:	4b0e      	ldr	r3, [pc, #56]	; (800b498 <find_pregoal+0x3d4>)
 800b460:	2201      	movs	r2, #1
 800b462:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800b464:	7b7b      	ldrb	r3, [r7, #13]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d104      	bne.n	800b474 <find_pregoal+0x3b0>
 800b46a:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <find_pregoal+0x3d4>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	f47f ae60 	bne.w	800b134 <find_pregoal+0x70>
}
 800b474:	bf00      	nop
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	20000ce0 	.word	0x20000ce0
 800b484:	2000022c 	.word	0x2000022c
 800b488:	20000b84 	.word	0x20000b84
 800b48c:	20000cdc 	.word	0x20000cdc
 800b490:	20000efc 	.word	0x20000efc
 800b494:	200003ca 	.word	0x200003ca
 800b498:	20000b2c 	.word	0x20000b2c

0800b49c <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73bb      	strb	r3, [r7, #14]
 800b4a6:	e014      	b.n	800b4d2 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
 800b4ac:	e00b      	b.n	800b4c6 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800b4ae:	7bba      	ldrb	r2, [r7, #14]
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	4986      	ldr	r1, [pc, #536]	; (800b6cc <make_smap2+0x230>)
 800b4b4:	0112      	lsls	r2, r2, #4
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	73fb      	strb	r3, [r7, #15]
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	2b0f      	cmp	r3, #15
 800b4ca:	d9f0      	bls.n	800b4ae <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	73bb      	strb	r3, [r7, #14]
 800b4d2:	7bbb      	ldrb	r3, [r7, #14]
 800b4d4:	2b0f      	cmp	r3, #15
 800b4d6:	d9e7      	bls.n	800b4a8 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800b4d8:	4b7d      	ldr	r3, [pc, #500]	; (800b6d0 <make_smap2+0x234>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	4b7d      	ldr	r3, [pc, #500]	; (800b6d4 <make_smap2+0x238>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4a79      	ldr	r2, [pc, #484]	; (800b6cc <make_smap2+0x230>)
 800b4e6:	0103      	lsls	r3, r0, #4
 800b4e8:	440b      	add	r3, r1
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800b4f0:	4b79      	ldr	r3, [pc, #484]	; (800b6d8 <make_smap2+0x23c>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800b4fa:	2305      	movs	r3, #5
 800b4fc:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b4fe:	2300      	movs	r3, #0
 800b500:	73bb      	strb	r3, [r7, #14]
 800b502:	e0c0      	b.n	800b686 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b504:	2300      	movs	r3, #0
 800b506:	73fb      	strb	r3, [r7, #15]
 800b508:	e0b6      	b.n	800b678 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800b50a:	7bba      	ldrb	r2, [r7, #14]
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	496f      	ldr	r1, [pc, #444]	; (800b6cc <make_smap2+0x230>)
 800b510:	0112      	lsls	r2, r2, #4
 800b512:	4413      	add	r3, r2
 800b514:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b518:	4b6f      	ldr	r3, [pc, #444]	; (800b6d8 <make_smap2+0x23c>)
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	f040 80a8 	bne.w	800b672 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800b522:	7bba      	ldrb	r2, [r7, #14]
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	496d      	ldr	r1, [pc, #436]	; (800b6dc <make_smap2+0x240>)
 800b528:	0112      	lsls	r2, r2, #4
 800b52a:	440a      	add	r2, r1
 800b52c:	4413      	add	r3, r2
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800b532:	78fb      	ldrb	r3, [r7, #3]
 800b534:	f003 0308 	and.w	r3, r3, #8
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d122      	bne.n	800b582 <make_smap2+0xe6>
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	2b0f      	cmp	r3, #15
 800b540:	d01f      	beq.n	800b582 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	4960      	ldr	r1, [pc, #384]	; (800b6cc <make_smap2+0x230>)
 800b54a:	0112      	lsls	r2, r2, #4
 800b54c:	4413      	add	r3, r2
 800b54e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b552:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b556:	4293      	cmp	r3, r2
 800b558:	d113      	bne.n	800b582 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b55a:	7bba      	ldrb	r2, [r7, #14]
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	495b      	ldr	r1, [pc, #364]	; (800b6cc <make_smap2+0x230>)
 800b560:	0112      	lsls	r2, r2, #4
 800b562:	4413      	add	r3, r2
 800b564:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	b299      	uxth	r1, r3
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	4401      	add	r1, r0
 800b574:	b288      	uxth	r0, r1
 800b576:	4955      	ldr	r1, [pc, #340]	; (800b6cc <make_smap2+0x230>)
 800b578:	0112      	lsls	r2, r2, #4
 800b57a:	4413      	add	r3, r2
 800b57c:	4602      	mov	r2, r0
 800b57e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d122      	bne.n	800b5d2 <make_smap2+0x136>
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b0f      	cmp	r3, #15
 800b590:	d01f      	beq.n	800b5d2 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800b592:	7bba      	ldrb	r2, [r7, #14]
 800b594:	7bfb      	ldrb	r3, [r7, #15]
 800b596:	3301      	adds	r3, #1
 800b598:	494c      	ldr	r1, [pc, #304]	; (800b6cc <make_smap2+0x230>)
 800b59a:	0112      	lsls	r2, r2, #4
 800b59c:	4413      	add	r3, r2
 800b59e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b5a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d113      	bne.n	800b5d2 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b5aa:	7bba      	ldrb	r2, [r7, #14]
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
 800b5ae:	4947      	ldr	r1, [pc, #284]	; (800b6cc <make_smap2+0x230>)
 800b5b0:	0112      	lsls	r2, r2, #4
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	b299      	uxth	r1, r3
 800b5bc:	7bba      	ldrb	r2, [r7, #14]
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	4401      	add	r1, r0
 800b5c4:	b288      	uxth	r0, r1
 800b5c6:	4941      	ldr	r1, [pc, #260]	; (800b6cc <make_smap2+0x230>)
 800b5c8:	0112      	lsls	r2, r2, #4
 800b5ca:	4413      	add	r3, r2
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d122      	bne.n	800b622 <make_smap2+0x186>
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01f      	beq.n	800b622 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	1e5a      	subs	r2, r3, #1
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	4938      	ldr	r1, [pc, #224]	; (800b6cc <make_smap2+0x230>)
 800b5ea:	0112      	lsls	r2, r2, #4
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b5f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d113      	bne.n	800b622 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b5fa:	7bba      	ldrb	r2, [r7, #14]
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	4933      	ldr	r1, [pc, #204]	; (800b6cc <make_smap2+0x230>)
 800b600:	0112      	lsls	r2, r2, #4
 800b602:	4413      	add	r3, r2
 800b604:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	b299      	uxth	r1, r3
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	1e5a      	subs	r2, r3, #1
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	4401      	add	r1, r0
 800b614:	b288      	uxth	r0, r1
 800b616:	492d      	ldr	r1, [pc, #180]	; (800b6cc <make_smap2+0x230>)
 800b618:	0112      	lsls	r2, r2, #4
 800b61a:	4413      	add	r3, r2
 800b61c:	4602      	mov	r2, r0
 800b61e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d122      	bne.n	800b672 <make_smap2+0x1d6>
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d01f      	beq.n	800b672 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800b632:	7bba      	ldrb	r2, [r7, #14]
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	3b01      	subs	r3, #1
 800b638:	4924      	ldr	r1, [pc, #144]	; (800b6cc <make_smap2+0x230>)
 800b63a:	0112      	lsls	r2, r2, #4
 800b63c:	4413      	add	r3, r2
 800b63e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b642:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b646:	4293      	cmp	r3, r2
 800b648:	d113      	bne.n	800b672 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800b64a:	7bba      	ldrb	r2, [r7, #14]
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	491f      	ldr	r1, [pc, #124]	; (800b6cc <make_smap2+0x230>)
 800b650:	0112      	lsls	r2, r2, #4
 800b652:	4413      	add	r3, r2
 800b654:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	b299      	uxth	r1, r3
 800b65c:	7bba      	ldrb	r2, [r7, #14]
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	3b01      	subs	r3, #1
 800b662:	4401      	add	r1, r0
 800b664:	b288      	uxth	r0, r1
 800b666:	4919      	ldr	r1, [pc, #100]	; (800b6cc <make_smap2+0x230>)
 800b668:	0112      	lsls	r2, r2, #4
 800b66a:	4413      	add	r3, r2
 800b66c:	4602      	mov	r2, r0
 800b66e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	3301      	adds	r3, #1
 800b676:	73fb      	strb	r3, [r7, #15]
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	2b0f      	cmp	r3, #15
 800b67c:	f67f af45 	bls.w	800b50a <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	3301      	adds	r3, #1
 800b684:	73bb      	strb	r3, [r7, #14]
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b0f      	cmp	r3, #15
 800b68a:	f67f af3b 	bls.w	800b504 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800b68e:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <make_smap2+0x23c>)
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	3301      	adds	r3, #1
 800b694:	b29a      	uxth	r2, r3
 800b696:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <make_smap2+0x23c>)
 800b698:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800b69a:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <make_smap2+0x244>)
 800b69c:	785b      	ldrb	r3, [r3, #1]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	4b0f      	ldr	r3, [pc, #60]	; (800b6e0 <make_smap2+0x244>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4a08      	ldr	r2, [pc, #32]	; (800b6cc <make_smap2+0x230>)
 800b6ac:	0103      	lsls	r3, r0, #4
 800b6ae:	440b      	add	r3, r1
 800b6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	f43f af20 	beq.w	800b4fe <make_smap2+0x62>
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	20000ce0 	.word	0x20000ce0
 800b6d0:	20000efc 	.word	0x20000efc
 800b6d4:	20000cdc 	.word	0x20000cdc
 800b6d8:	200003ca 	.word	0x200003ca
 800b6dc:	2000022c 	.word	0x2000022c
 800b6e0:	20000b8c 	.word	0x20000b8c

0800b6e4 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800b6ea:	4818      	ldr	r0, [pc, #96]	; (800b74c <store_map_in_eeprom+0x68>)
 800b6ec:	f000 ff28 	bl	800c540 <puts>
	eeprom_enable_write();
 800b6f0:	f7fc f932 	bl	8007958 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800b6f4:	4816      	ldr	r0, [pc, #88]	; (800b750 <store_map_in_eeprom+0x6c>)
 800b6f6:	f000 ff23 	bl	800c540 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	607b      	str	r3, [r7, #4]
 800b6fe:	e01b      	b.n	800b738 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800b700:	2300      	movs	r3, #0
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	e012      	b.n	800b72c <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	011a      	lsls	r2, r3, #4
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	4413      	add	r3, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	4a10      	ldr	r2, [pc, #64]	; (800b754 <store_map_in_eeprom+0x70>)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	011b      	lsls	r3, r3, #4
 800b716:	441a      	add	r2, r3
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	4413      	add	r3, r2
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	4619      	mov	r1, r3
 800b722:	f7fc f944 	bl	80079ae <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	3301      	adds	r3, #1
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	2b0f      	cmp	r3, #15
 800b730:	dde9      	ble.n	800b706 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3301      	adds	r3, #1
 800b736:	607b      	str	r3, [r7, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b0f      	cmp	r3, #15
 800b73c:	dde0      	ble.n	800b700 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800b73e:	f7fc f92f 	bl	80079a0 <eeprom_disable_write>
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0800d974 	.word	0x0800d974
 800b750:	0800d988 	.word	0x0800d988
 800b754:	2000022c 	.word	0x2000022c

0800b758 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800b75e:	2300      	movs	r3, #0
 800b760:	607b      	str	r3, [r7, #4]
 800b762:	e01c      	b.n	800b79e <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	e013      	b.n	800b792 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	011a      	lsls	r2, r3, #4
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	4413      	add	r3, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f7fc f938 	bl	80079e8 <eeprom_read_halfword>
 800b778:	4603      	mov	r3, r0
 800b77a:	b2d9      	uxtb	r1, r3
 800b77c:	4a0b      	ldr	r2, [pc, #44]	; (800b7ac <load_map_from_eeprom+0x54>)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	011b      	lsls	r3, r3, #4
 800b782:	441a      	add	r2, r3
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	4413      	add	r3, r2
 800b788:	460a      	mov	r2, r1
 800b78a:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	3301      	adds	r3, #1
 800b790:	603b      	str	r3, [r7, #0]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b0f      	cmp	r3, #15
 800b796:	dde8      	ble.n	800b76a <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3301      	adds	r3, #1
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b0f      	cmp	r3, #15
 800b7a2:	dddf      	ble.n	800b764 <load_map_from_eeprom+0xc>
		}
	}
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	2000022c 	.word	0x2000022c

0800b7b0 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
	tp = 0;
 800b7b4:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <sensor_init+0x40>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800b7ba:	4b0e      	ldr	r3, [pc, #56]	; (800b7f4 <sensor_init+0x44>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	601a      	str	r2, [r3, #0]
 800b7c0:	4b0c      	ldr	r3, [pc, #48]	; (800b7f4 <sensor_init+0x44>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a0c      	ldr	r2, [pc, #48]	; (800b7f8 <sensor_init+0x48>)
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <sensor_init+0x48>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a0b      	ldr	r2, [pc, #44]	; (800b7fc <sensor_init+0x4c>)
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <sensor_init+0x4c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0a      	ldr	r2, [pc, #40]	; (800b800 <sensor_init+0x50>)
 800b7d6:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <sensor_init+0x54>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	801a      	strh	r2, [r3, #0]
 800b7de:	4b09      	ldr	r3, [pc, #36]	; (800b804 <sensor_init+0x54>)
 800b7e0:	881a      	ldrh	r2, [r3, #0]
 800b7e2:	4b09      	ldr	r3, [pc, #36]	; (800b808 <sensor_init+0x58>)
 800b7e4:	801a      	strh	r2, [r3, #0]
}
 800b7e6:	bf00      	nop
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	20000efb 	.word	0x20000efb
 800b7f4:	20000cd4 	.word	0x20000cd4
 800b7f8:	20000b80 	.word	0x20000b80
 800b7fc:	20000ee0 	.word	0x20000ee0
 800b800:	20000a78 	.word	0x20000a78
 800b804:	2000033c 	.word	0x2000033c
 800b808:	200003c8 	.word	0x200003c8

0800b80c <get_base>:


uint8_t get_base(){
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800b812:	2301      	movs	r3, #1
 800b814:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800b816:	4b08      	ldr	r3, [pc, #32]	; (800b838 <get_base+0x2c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	4b07      	ldr	r3, [pc, #28]	; (800b83c <get_base+0x30>)
 800b81e:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800b820:	4b07      	ldr	r3, [pc, #28]	; (800b840 <get_base+0x34>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	b29a      	uxth	r2, r3
 800b826:	4b07      	ldr	r3, [pc, #28]	; (800b844 <get_base+0x38>)
 800b828:	801a      	strh	r2, [r3, #0]

	return res;											//
 800b82a:	79fb      	ldrb	r3, [r7, #7]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	20000a78 	.word	0x20000a78
 800b83c:	200003c8 	.word	0x200003c8
 800b840:	20000ee0 	.word	0x20000ee0
 800b844:	2000033c 	.word	0x2000033c

0800b848 <get_wall_info>:


void get_wall_info(){
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800b84c:	4b16      	ldr	r3, [pc, #88]	; (800b8a8 <get_wall_info+0x60>)
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800b852:	4b16      	ldr	r3, [pc, #88]	; (800b8ac <get_wall_info+0x64>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b46      	cmp	r3, #70	; 0x46
 800b858:	d803      	bhi.n	800b862 <get_wall_info+0x1a>
 800b85a:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <get_wall_info+0x68>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b50      	cmp	r3, #80	; 0x50
 800b860:	d906      	bls.n	800b870 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800b862:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <get_wall_info+0x60>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	f063 0377 	orn	r3, r3, #119	; 0x77
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <get_wall_info+0x60>)
 800b86e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800b870:	4b10      	ldr	r3, [pc, #64]	; (800b8b4 <get_wall_info+0x6c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b2d      	cmp	r3, #45	; 0x2d
 800b876:	d906      	bls.n	800b886 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800b878:	4b0b      	ldr	r3, [pc, #44]	; (800b8a8 <get_wall_info+0x60>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b880:	b2da      	uxtb	r2, r3
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <get_wall_info+0x60>)
 800b884:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <get_wall_info+0x70>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b2d      	cmp	r3, #45	; 0x2d
 800b88c:	d906      	bls.n	800b89c <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800b88e:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <get_wall_info+0x60>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	f043 0311 	orr.w	r3, r3, #17
 800b896:	b2da      	uxtb	r2, r3
 800b898:	4b03      	ldr	r3, [pc, #12]	; (800b8a8 <get_wall_info+0x60>)
 800b89a:	701a      	strb	r2, [r3, #0]
	}
}
 800b89c:	bf00      	nop
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	20000344 	.word	0x20000344
 800b8ac:	20000b80 	.word	0x20000b80
 800b8b0:	20000cd4 	.word	0x20000cd4
 800b8b4:	20000ee0 	.word	0x20000ee0
 800b8b8:	20000a78 	.word	0x20000a78

0800b8bc <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	71bb      	strb	r3, [r7, #6]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d005      	beq.n	800b8e0 <led_write+0x24>
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	2110      	movs	r1, #16
 800b8d8:	4814      	ldr	r0, [pc, #80]	; (800b92c <led_write+0x70>)
 800b8da:	f7f6 fceb 	bl	80022b4 <HAL_GPIO_WritePin>
 800b8de:	e004      	b.n	800b8ea <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2110      	movs	r1, #16
 800b8e4:	4811      	ldr	r0, [pc, #68]	; (800b92c <led_write+0x70>)
 800b8e6:	f7f6 fce5 	bl	80022b4 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800b8ea:	79bb      	ldrb	r3, [r7, #6]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <led_write+0x40>
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	2140      	movs	r1, #64	; 0x40
 800b8f4:	480d      	ldr	r0, [pc, #52]	; (800b92c <led_write+0x70>)
 800b8f6:	f7f6 fcdd 	bl	80022b4 <HAL_GPIO_WritePin>
 800b8fa:	e004      	b.n	800b906 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2140      	movs	r1, #64	; 0x40
 800b900:	480a      	ldr	r0, [pc, #40]	; (800b92c <led_write+0x70>)
 800b902:	f7f6 fcd7 	bl	80022b4 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800b906:	797b      	ldrb	r3, [r7, #5]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <led_write+0x5c>
 800b90c:	2201      	movs	r2, #1
 800b90e:	2180      	movs	r1, #128	; 0x80
 800b910:	4806      	ldr	r0, [pc, #24]	; (800b92c <led_write+0x70>)
 800b912:	f7f6 fccf 	bl	80022b4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800b916:	e004      	b.n	800b922 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800b918:	2200      	movs	r2, #0
 800b91a:	2180      	movs	r1, #128	; 0x80
 800b91c:	4803      	ldr	r0, [pc, #12]	; (800b92c <led_write+0x70>)
 800b91e:	f7f6 fcc9 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	40020000 	.word	0x40020000

0800b930 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	4603      	mov	r3, r0
 800b938:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800b93a:	79fb      	ldrb	r3, [r7, #7]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d112      	bne.n	800b966 <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b940:	2201      	movs	r2, #1
 800b942:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b946:	4856      	ldr	r0, [pc, #344]	; (800baa0 <full_led_write+0x170>)
 800b948:	f7f6 fcb4 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b94c:	2201      	movs	r2, #1
 800b94e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b952:	4853      	ldr	r0, [pc, #332]	; (800baa0 <full_led_write+0x170>)
 800b954:	f7f6 fcae 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b958:	2201      	movs	r2, #1
 800b95a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b95e:	4851      	ldr	r0, [pc, #324]	; (800baa4 <full_led_write+0x174>)
 800b960:	f7f6 fca8 	bl	80022b4 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800b964:	e098      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 1){
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d112      	bne.n	800b992 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b96c:	2201      	movs	r2, #1
 800b96e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b972:	484b      	ldr	r0, [pc, #300]	; (800baa0 <full_led_write+0x170>)
 800b974:	f7f6 fc9e 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b978:	2201      	movs	r2, #1
 800b97a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b97e:	4848      	ldr	r0, [pc, #288]	; (800baa0 <full_led_write+0x170>)
 800b980:	f7f6 fc98 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b984:	2200      	movs	r2, #0
 800b986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b98a:	4846      	ldr	r0, [pc, #280]	; (800baa4 <full_led_write+0x174>)
 800b98c:	f7f6 fc92 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b990:	e082      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 2){
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d112      	bne.n	800b9be <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b998:	2201      	movs	r2, #1
 800b99a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b99e:	4840      	ldr	r0, [pc, #256]	; (800baa0 <full_led_write+0x170>)
 800b9a0:	f7f6 fc88 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9aa:	483d      	ldr	r0, [pc, #244]	; (800baa0 <full_led_write+0x170>)
 800b9ac:	f7f6 fc82 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b9b6:	483b      	ldr	r0, [pc, #236]	; (800baa4 <full_led_write+0x174>)
 800b9b8:	f7f6 fc7c 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b9bc:	e06c      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 3){
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d112      	bne.n	800b9ea <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9ca:	4835      	ldr	r0, [pc, #212]	; (800baa0 <full_led_write+0x170>)
 800b9cc:	f7f6 fc72 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9d6:	4832      	ldr	r0, [pc, #200]	; (800baa0 <full_led_write+0x170>)
 800b9d8:	f7f6 fc6c 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b9e2:	4830      	ldr	r0, [pc, #192]	; (800baa4 <full_led_write+0x174>)
 800b9e4:	f7f6 fc66 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b9e8:	e056      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 4){
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	d112      	bne.n	800ba16 <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9f6:	482a      	ldr	r0, [pc, #168]	; (800baa0 <full_led_write+0x170>)
 800b9f8:	f7f6 fc5c 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba02:	4827      	ldr	r0, [pc, #156]	; (800baa0 <full_led_write+0x170>)
 800ba04:	f7f6 fc56 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba0e:	4825      	ldr	r0, [pc, #148]	; (800baa4 <full_led_write+0x174>)
 800ba10:	f7f6 fc50 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba14:	e040      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 5){
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	2b05      	cmp	r3, #5
 800ba1a:	d112      	bne.n	800ba42 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba22:	481f      	ldr	r0, [pc, #124]	; (800baa0 <full_led_write+0x170>)
 800ba24:	f7f6 fc46 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba2e:	481c      	ldr	r0, [pc, #112]	; (800baa0 <full_led_write+0x170>)
 800ba30:	f7f6 fc40 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ba34:	2200      	movs	r2, #0
 800ba36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba3a:	481a      	ldr	r0, [pc, #104]	; (800baa4 <full_led_write+0x174>)
 800ba3c:	f7f6 fc3a 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba40:	e02a      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 6){
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	2b06      	cmp	r3, #6
 800ba46:	d112      	bne.n	800ba6e <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba4e:	4814      	ldr	r0, [pc, #80]	; (800baa0 <full_led_write+0x170>)
 800ba50:	f7f6 fc30 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ba54:	2200      	movs	r2, #0
 800ba56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba5a:	4811      	ldr	r0, [pc, #68]	; (800baa0 <full_led_write+0x170>)
 800ba5c:	f7f6 fc2a 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ba60:	2200      	movs	r2, #0
 800ba62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba66:	480f      	ldr	r0, [pc, #60]	; (800baa4 <full_led_write+0x174>)
 800ba68:	f7f6 fc24 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba6c:	e014      	b.n	800ba98 <full_led_write+0x168>
	else if(fulled == 7){
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	2b07      	cmp	r3, #7
 800ba72:	d111      	bne.n	800ba98 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ba74:	2200      	movs	r2, #0
 800ba76:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba7a:	4809      	ldr	r0, [pc, #36]	; (800baa0 <full_led_write+0x170>)
 800ba7c:	f7f6 fc1a 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ba80:	2200      	movs	r2, #0
 800ba82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba86:	4806      	ldr	r0, [pc, #24]	; (800baa0 <full_led_write+0x170>)
 800ba88:	f7f6 fc14 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba92:	4804      	ldr	r0, [pc, #16]	; (800baa4 <full_led_write+0x174>)
 800ba94:	f7f6 fc0e 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	40020400 	.word	0x40020400
 800baa4:	40020800 	.word	0x40020800

0800baa8 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08c      	sub	sp, #48	; 0x30
 800baac:	af02      	add	r7, sp, #8

	int mode = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800bab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bab4:	4881      	ldr	r0, [pc, #516]	; (800bcbc <sensor_test+0x214>)
 800bab6:	f000 fccf 	bl	800c458 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	b2d8      	uxtb	r0, r3
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	b2d9      	uxtb	r1, r3
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	f003 0304 	and.w	r3, r3, #4
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	461a      	mov	r2, r3
 800bada:	f7ff feef 	bl	800b8bc <led_write>
		  if(dist_r >= 20){
 800bade:	4b78      	ldr	r3, [pc, #480]	; (800bcc0 <sensor_test+0x218>)
 800bae0:	edd3 7a00 	vldr	s15, [r3]
 800bae4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf0:	db0f      	blt.n	800bb12 <sensor_test+0x6a>
			  mode++;
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	3301      	adds	r3, #1
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800baf8:	4b71      	ldr	r3, [pc, #452]	; (800bcc0 <sensor_test+0x218>)
 800bafa:	f04f 0200 	mov.w	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	2b07      	cmp	r3, #7
 800bb04:	dd01      	ble.n	800bb0a <sensor_test+0x62>
				  mode = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800bb0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb0c:	486b      	ldr	r0, [pc, #428]	; (800bcbc <sensor_test+0x214>)
 800bb0e:	f000 fca3 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800bb12:	4b6b      	ldr	r3, [pc, #428]	; (800bcc0 <sensor_test+0x218>)
 800bb14:	edd3 7a00 	vldr	s15, [r3]
 800bb18:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800bb1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	d80f      	bhi.n	800bb46 <sensor_test+0x9e>
			  mode--;
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800bb2c:	4b64      	ldr	r3, [pc, #400]	; (800bcc0 <sensor_test+0x218>)
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da01      	bge.n	800bb3e <sensor_test+0x96>
				  mode = 7;
 800bb3a:	2307      	movs	r3, #7
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800bb3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb40:	485e      	ldr	r0, [pc, #376]	; (800bcbc <sensor_test+0x214>)
 800bb42:	f000 fc89 	bl	800c458 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800bb46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb4a:	485e      	ldr	r0, [pc, #376]	; (800bcc4 <sensor_test+0x21c>)
 800bb4c:	f7f6 fb9a 	bl	8002284 <HAL_GPIO_ReadPin>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1b1      	bne.n	800baba <sensor_test+0x12>
			  HAL_Delay(50);
 800bb56:	2032      	movs	r0, #50	; 0x32
 800bb58:	f7f5 fa38 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800bb5c:	bf00      	nop
 800bb5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb62:	4858      	ldr	r0, [pc, #352]	; (800bcc4 <sensor_test+0x21c>)
 800bb64:	f7f6 fb8e 	bl	8002284 <HAL_GPIO_ReadPin>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0f7      	beq.n	800bb5e <sensor_test+0xb6>

			  drive_ready();
 800bb6e:	f7f9 f859 	bl	8004c24 <drive_ready>

			  switch(mode){
 800bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb74:	2b07      	cmp	r3, #7
 800bb76:	d8a0      	bhi.n	800baba <sensor_test+0x12>
 800bb78:	a201      	add	r2, pc, #4	; (adr r2, 800bb80 <sensor_test+0xd8>)
 800bb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7e:	bf00      	nop
 800bb80:	0800bba1 	.word	0x0800bba1
 800bb84:	0800bba7 	.word	0x0800bba7
 800bb88:	0800bbf9 	.word	0x0800bbf9
 800bb8c:	0800babb 	.word	0x0800babb
 800bb90:	0800babb 	.word	0x0800babb
 800bb94:	0800babb 	.word	0x0800babb
 800bb98:	0800babb 	.word	0x0800babb
 800bb9c:	0800babb 	.word	0x0800babb
				case 0:
					get_base();
 800bba0:	f7ff fe34 	bl	800b80c <get_base>
					break;
 800bba4:	e089      	b.n	800bcba <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 800bba6:	4848      	ldr	r0, [pc, #288]	; (800bcc8 <sensor_test+0x220>)
 800bba8:	f000 fcca 	bl	800c540 <puts>
			  		  while(1){
			  			  get_wall_info();
 800bbac:	f7ff fe4c 	bl	800b848 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 800bbb0:	4b46      	ldr	r3, [pc, #280]	; (800bccc <sensor_test+0x224>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	f003 0311 	and.w	r3, r3, #17
 800bbb8:	b2d8      	uxtb	r0, r3
 800bbba:	4b44      	ldr	r3, [pc, #272]	; (800bccc <sensor_test+0x224>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bbc2:	b2d9      	uxtb	r1, r3
 800bbc4:	4b41      	ldr	r3, [pc, #260]	; (800bccc <sensor_test+0x224>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	461a      	mov	r2, r3
 800bbd0:	f7ff fe74 	bl	800b8bc <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 800bbd4:	4b3e      	ldr	r3, [pc, #248]	; (800bcd0 <sensor_test+0x228>)
 800bbd6:	6819      	ldr	r1, [r3, #0]
 800bbd8:	4b3e      	ldr	r3, [pc, #248]	; (800bcd4 <sensor_test+0x22c>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	4b3e      	ldr	r3, [pc, #248]	; (800bcd8 <sensor_test+0x230>)
 800bbde:	6818      	ldr	r0, [r3, #0]
 800bbe0:	4b3e      	ldr	r3, [pc, #248]	; (800bcdc <sensor_test+0x234>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	483d      	ldr	r0, [pc, #244]	; (800bce0 <sensor_test+0x238>)
 800bbea:	f000 fc35 	bl	800c458 <iprintf>
			  			  HAL_Delay(333);
 800bbee:	f240 104d 	movw	r0, #333	; 0x14d
 800bbf2:	f7f5 f9eb 	bl	8000fcc <HAL_Delay>
			  			  get_wall_info();
 800bbf6:	e7d9      	b.n	800bbac <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 800bbf8:	483a      	ldr	r0, [pc, #232]	; (800bce4 <sensor_test+0x23c>)
 800bbfa:	f000 fca1 	bl	800c540 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 800bbfe:	f7fb ff9b 	bl	8007b38 <accel_read_x>
 800bc02:	eef0 7a40 	vmov.f32	s15, s0
 800bc06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc0a:	ee17 3a90 	vmov	r3, s15
 800bc0e:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 800bc10:	f7fb ffb8 	bl	8007b84 <accel_read_y>
 800bc14:	eef0 7a40 	vmov.f32	s15, s0
 800bc18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc1c:	ee17 3a90 	vmov	r3, s15
 800bc20:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 800bc22:	f7fb ffd5 	bl	8007bd0 <accel_read_z>
 800bc26:	eef0 7a40 	vmov.f32	s15, s0
 800bc2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc2e:	ee17 3a90 	vmov	r3, s15
 800bc32:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 800bc34:	f7fb fff4 	bl	8007c20 <gyro_read_x>
 800bc38:	eef0 7a40 	vmov.f32	s15, s0
 800bc3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc40:	ee17 3a90 	vmov	r3, s15
 800bc44:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 800bc46:	f7fc f827 	bl	8007c98 <gyro_read_y>
 800bc4a:	eef0 7a40 	vmov.f32	s15, s0
 800bc4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc52:	ee17 3a90 	vmov	r3, s15
 800bc56:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 800bc58:	f7fc f85a 	bl	8007d10 <gyro_read_z>
 800bc5c:	eef0 7a40 	vmov.f32	s15, s0
 800bc60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc64:	ee17 3a90 	vmov	r3, s15
 800bc68:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 800bc6a:	4b1f      	ldr	r3, [pc, #124]	; (800bce8 <sensor_test+0x240>)
 800bc6c:	edd3 7a00 	vldr	s15, [r3]
 800bc70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc74:	ee17 3a90 	vmov	r3, s15
 800bc78:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 800bc7a:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <sensor_test+0x244>)
 800bc7c:	edd3 7a00 	vldr	s15, [r3]
 800bc80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc84:	ee17 3a90 	vmov	r3, s15
 800bc88:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 800bc8a:	4b19      	ldr	r3, [pc, #100]	; (800bcf0 <sensor_test+0x248>)
 800bc8c:	edd3 7a00 	vldr	s15, [r3]
 800bc90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc94:	ee17 3a90 	vmov	r3, s15
 800bc98:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	6979      	ldr	r1, [r7, #20]
 800bca0:	4814      	ldr	r0, [pc, #80]	; (800bcf4 <sensor_test+0x24c>)
 800bca2:	f000 fbd9 	bl	800c458 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	68b9      	ldr	r1, [r7, #8]
 800bcac:	4812      	ldr	r0, [pc, #72]	; (800bcf8 <sensor_test+0x250>)
 800bcae:	f000 fbd3 	bl	800c458 <iprintf>
			  			  HAL_Delay(111);
 800bcb2:	206f      	movs	r0, #111	; 0x6f
 800bcb4:	f7f5 f98a 	bl	8000fcc <HAL_Delay>
			  			  accel_x = accel_read_x();
 800bcb8:	e7a1      	b.n	800bbfe <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bcba:	e6fe      	b.n	800baba <sensor_test+0x12>
 800bcbc:	0800d9a0 	.word	0x0800d9a0
 800bcc0:	20000a68 	.word	0x20000a68
 800bcc4:	40020000 	.word	0x40020000
 800bcc8:	0800d9ac 	.word	0x0800d9ac
 800bccc:	20000344 	.word	0x20000344
 800bcd0:	20000a78 	.word	0x20000a78
 800bcd4:	20000cd4 	.word	0x20000cd4
 800bcd8:	20000b80 	.word	0x20000b80
 800bcdc:	20000ee0 	.word	0x20000ee0
 800bce0:	0800d9c0 	.word	0x0800d9c0
 800bce4:	0800d9f0 	.word	0x0800d9f0
 800bce8:	200003cc 	.word	0x200003cc
 800bcec:	20000eec 	.word	0x20000eec
 800bcf0:	20000ad8 	.word	0x20000ad8
 800bcf4:	0800da04 	.word	0x0800da04
 800bcf8:	0800da24 	.word	0x0800da24

0800bcfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
 800bd06:	4b10      	ldr	r3, [pc, #64]	; (800bd48 <HAL_MspInit+0x4c>)
 800bd08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0a:	4a0f      	ldr	r2, [pc, #60]	; (800bd48 <HAL_MspInit+0x4c>)
 800bd0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd10:	6453      	str	r3, [r2, #68]	; 0x44
 800bd12:	4b0d      	ldr	r3, [pc, #52]	; (800bd48 <HAL_MspInit+0x4c>)
 800bd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd1a:	607b      	str	r3, [r7, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd1e:	2300      	movs	r3, #0
 800bd20:	603b      	str	r3, [r7, #0]
 800bd22:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <HAL_MspInit+0x4c>)
 800bd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd26:	4a08      	ldr	r2, [pc, #32]	; (800bd48 <HAL_MspInit+0x4c>)
 800bd28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd2c:	6413      	str	r3, [r2, #64]	; 0x40
 800bd2e:	4b06      	ldr	r3, [pc, #24]	; (800bd48 <HAL_MspInit+0x4c>)
 800bd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	40023800 	.word	0x40023800

0800bd4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	; 0x28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd54:	f107 0314 	add.w	r3, r7, #20
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	605a      	str	r2, [r3, #4]
 800bd5e:	609a      	str	r2, [r3, #8]
 800bd60:	60da      	str	r2, [r3, #12]
 800bd62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a17      	ldr	r2, [pc, #92]	; (800bdc8 <HAL_ADC_MspInit+0x7c>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d127      	bne.n	800bdbe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bd6e:	2300      	movs	r3, #0
 800bd70:	613b      	str	r3, [r7, #16]
 800bd72:	4b16      	ldr	r3, [pc, #88]	; (800bdcc <HAL_ADC_MspInit+0x80>)
 800bd74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd76:	4a15      	ldr	r2, [pc, #84]	; (800bdcc <HAL_ADC_MspInit+0x80>)
 800bd78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd7c:	6453      	str	r3, [r2, #68]	; 0x44
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <HAL_ADC_MspInit+0x80>)
 800bd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd86:	613b      	str	r3, [r7, #16]
 800bd88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <HAL_ADC_MspInit+0x80>)
 800bd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd92:	4a0e      	ldr	r2, [pc, #56]	; (800bdcc <HAL_ADC_MspInit+0x80>)
 800bd94:	f043 0301 	orr.w	r3, r3, #1
 800bd98:	6313      	str	r3, [r2, #48]	; 0x30
 800bd9a:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <HAL_ADC_MspInit+0x80>)
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	60fb      	str	r3, [r7, #12]
 800bda4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800bda6:	230f      	movs	r3, #15
 800bda8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdb2:	f107 0314 	add.w	r3, r7, #20
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4805      	ldr	r0, [pc, #20]	; (800bdd0 <HAL_ADC_MspInit+0x84>)
 800bdba:	f7f6 f8c9 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800bdbe:	bf00      	nop
 800bdc0:	3728      	adds	r7, #40	; 0x28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	40012000 	.word	0x40012000
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	40020000 	.word	0x40020000

0800bdd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08a      	sub	sp, #40	; 0x28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bddc:	f107 0314 	add.w	r3, r7, #20
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	605a      	str	r2, [r3, #4]
 800bde6:	609a      	str	r2, [r3, #8]
 800bde8:	60da      	str	r2, [r3, #12]
 800bdea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a19      	ldr	r2, [pc, #100]	; (800be58 <HAL_SPI_MspInit+0x84>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d12c      	bne.n	800be50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	613b      	str	r3, [r7, #16]
 800bdfa:	4b18      	ldr	r3, [pc, #96]	; (800be5c <HAL_SPI_MspInit+0x88>)
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	4a17      	ldr	r2, [pc, #92]	; (800be5c <HAL_SPI_MspInit+0x88>)
 800be00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be04:	6413      	str	r3, [r2, #64]	; 0x40
 800be06:	4b15      	ldr	r3, [pc, #84]	; (800be5c <HAL_SPI_MspInit+0x88>)
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be0e:	613b      	str	r3, [r7, #16]
 800be10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	4b11      	ldr	r3, [pc, #68]	; (800be5c <HAL_SPI_MspInit+0x88>)
 800be18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1a:	4a10      	ldr	r2, [pc, #64]	; (800be5c <HAL_SPI_MspInit+0x88>)
 800be1c:	f043 0304 	orr.w	r3, r3, #4
 800be20:	6313      	str	r3, [r2, #48]	; 0x30
 800be22:	4b0e      	ldr	r3, [pc, #56]	; (800be5c <HAL_SPI_MspInit+0x88>)
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	f003 0304 	and.w	r3, r3, #4
 800be2a:	60fb      	str	r3, [r7, #12]
 800be2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800be2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800be32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be34:	2302      	movs	r3, #2
 800be36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be3c:	2303      	movs	r3, #3
 800be3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800be40:	2306      	movs	r3, #6
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be44:	f107 0314 	add.w	r3, r7, #20
 800be48:	4619      	mov	r1, r3
 800be4a:	4805      	ldr	r0, [pc, #20]	; (800be60 <HAL_SPI_MspInit+0x8c>)
 800be4c:	f7f6 f880 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800be50:	bf00      	nop
 800be52:	3728      	adds	r7, #40	; 0x28
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	40003c00 	.word	0x40003c00
 800be5c:	40023800 	.word	0x40023800
 800be60:	40020800 	.word	0x40020800

0800be64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be74:	d10e      	bne.n	800be94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800be76:	2300      	movs	r3, #0
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	4b20      	ldr	r3, [pc, #128]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7e:	4a1f      	ldr	r2, [pc, #124]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800be80:	f043 0301 	orr.w	r3, r3, #1
 800be84:	6413      	str	r3, [r2, #64]	; 0x40
 800be86:	4b1d      	ldr	r3, [pc, #116]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800be92:	e02e      	b.n	800bef2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a19      	ldr	r2, [pc, #100]	; (800bf00 <HAL_TIM_Base_MspInit+0x9c>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d10e      	bne.n	800bebc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800be9e:	2300      	movs	r3, #0
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	4b16      	ldr	r3, [pc, #88]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	4a15      	ldr	r2, [pc, #84]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800bea8:	f043 0302 	orr.w	r3, r3, #2
 800beac:	6413      	str	r3, [r2, #64]	; 0x40
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	613b      	str	r3, [r7, #16]
 800beb8:	693b      	ldr	r3, [r7, #16]
}
 800beba:	e01a      	b.n	800bef2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a10      	ldr	r2, [pc, #64]	; (800bf04 <HAL_TIM_Base_MspInit+0xa0>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d115      	bne.n	800bef2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
 800beca:	4b0c      	ldr	r3, [pc, #48]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	4a0b      	ldr	r2, [pc, #44]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800bed0:	f043 0310 	orr.w	r3, r3, #16
 800bed4:	6413      	str	r3, [r2, #64]	; 0x40
 800bed6:	4b09      	ldr	r3, [pc, #36]	; (800befc <HAL_TIM_Base_MspInit+0x98>)
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	f003 0310 	and.w	r3, r3, #16
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800bee2:	2200      	movs	r2, #0
 800bee4:	2100      	movs	r1, #0
 800bee6:	2036      	movs	r0, #54	; 0x36
 800bee8:	f7f5 fd27 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800beec:	2036      	movs	r0, #54	; 0x36
 800beee:	f7f5 fd40 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 800bef2:	bf00      	nop
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	40023800 	.word	0x40023800
 800bf00:	40000400 	.word	0x40000400
 800bf04:	40001000 	.word	0x40001000

0800bf08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08c      	sub	sp, #48	; 0x30
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf10:	f107 031c 	add.w	r3, r7, #28
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	605a      	str	r2, [r3, #4]
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	60da      	str	r2, [r3, #12]
 800bf1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a32      	ldr	r2, [pc, #200]	; (800bff0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d12c      	bne.n	800bf84 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	61bb      	str	r3, [r7, #24]
 800bf2e:	4b31      	ldr	r3, [pc, #196]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	4a30      	ldr	r2, [pc, #192]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf34:	f043 0304 	orr.w	r3, r3, #4
 800bf38:	6413      	str	r3, [r2, #64]	; 0x40
 800bf3a:	4b2e      	ldr	r3, [pc, #184]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	61bb      	str	r3, [r7, #24]
 800bf44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]
 800bf4a:	4b2a      	ldr	r3, [pc, #168]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4e:	4a29      	ldr	r2, [pc, #164]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf50:	f043 0302 	orr.w	r3, r3, #2
 800bf54:	6313      	str	r3, [r2, #48]	; 0x30
 800bf56:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	617b      	str	r3, [r7, #20]
 800bf60:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bf62:	23c0      	movs	r3, #192	; 0xc0
 800bf64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf66:	2302      	movs	r3, #2
 800bf68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800bf72:	2302      	movs	r3, #2
 800bf74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf76:	f107 031c 	add.w	r3, r7, #28
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	481e      	ldr	r0, [pc, #120]	; (800bff8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800bf7e:	f7f5 ffe7 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800bf82:	e030      	b.n	800bfe6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a1c      	ldr	r2, [pc, #112]	; (800bffc <HAL_TIM_Encoder_MspInit+0xf4>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d12b      	bne.n	800bfe6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bf8e:	2300      	movs	r3, #0
 800bf90:	613b      	str	r3, [r7, #16]
 800bf92:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf96:	4a17      	ldr	r2, [pc, #92]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf98:	f043 0302 	orr.w	r3, r3, #2
 800bf9c:	6453      	str	r3, [r2, #68]	; 0x44
 800bf9e:	4b15      	ldr	r3, [pc, #84]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	613b      	str	r3, [r7, #16]
 800bfa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	4b11      	ldr	r3, [pc, #68]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb2:	4a10      	ldr	r2, [pc, #64]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfb4:	f043 0304 	orr.w	r3, r3, #4
 800bfb8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfba:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbe:	f003 0304 	and.w	r3, r3, #4
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bfc6:	23c0      	movs	r3, #192	; 0xc0
 800bfc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfca:	2302      	movs	r3, #2
 800bfcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfda:	f107 031c 	add.w	r3, r7, #28
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4807      	ldr	r0, [pc, #28]	; (800c000 <HAL_TIM_Encoder_MspInit+0xf8>)
 800bfe2:	f7f5 ffb5 	bl	8001f50 <HAL_GPIO_Init>
}
 800bfe6:	bf00      	nop
 800bfe8:	3730      	adds	r7, #48	; 0x30
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	40000800 	.word	0x40000800
 800bff4:	40023800 	.word	0x40023800
 800bff8:	40020400 	.word	0x40020400
 800bffc:	40010400 	.word	0x40010400
 800c000:	40020800 	.word	0x40020800

0800c004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	; 0x28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c00c:	f107 0314 	add.w	r3, r7, #20
 800c010:	2200      	movs	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	609a      	str	r2, [r3, #8]
 800c018:	60da      	str	r2, [r3, #12]
 800c01a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c024:	d13d      	bne.n	800c0a2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c026:	2300      	movs	r3, #0
 800c028:	613b      	str	r3, [r7, #16]
 800c02a:	4b31      	ldr	r3, [pc, #196]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	4a30      	ldr	r2, [pc, #192]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c030:	f043 0301 	orr.w	r3, r3, #1
 800c034:	6313      	str	r3, [r2, #48]	; 0x30
 800c036:	4b2e      	ldr	r3, [pc, #184]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
 800c046:	4b2a      	ldr	r3, [pc, #168]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	4a29      	ldr	r2, [pc, #164]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c04c:	f043 0302 	orr.w	r3, r3, #2
 800c050:	6313      	str	r3, [r2, #48]	; 0x30
 800c052:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c05e:	2320      	movs	r3, #32
 800c060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c062:	2302      	movs	r3, #2
 800c064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c066:	2300      	movs	r3, #0
 800c068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c06a:	2300      	movs	r3, #0
 800c06c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c06e:	2301      	movs	r3, #1
 800c070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c072:	f107 0314 	add.w	r3, r7, #20
 800c076:	4619      	mov	r1, r3
 800c078:	481e      	ldr	r0, [pc, #120]	; (800c0f4 <HAL_TIM_MspPostInit+0xf0>)
 800c07a:	f7f5 ff69 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c07e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c084:	2302      	movs	r3, #2
 800c086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c08c:	2300      	movs	r3, #0
 800c08e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c090:	2301      	movs	r3, #1
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	4619      	mov	r1, r3
 800c09a:	4817      	ldr	r0, [pc, #92]	; (800c0f8 <HAL_TIM_MspPostInit+0xf4>)
 800c09c:	f7f5 ff58 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c0a0:	e022      	b.n	800c0e8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a15      	ldr	r2, [pc, #84]	; (800c0fc <HAL_TIM_MspPostInit+0xf8>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d11d      	bne.n	800c0e8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60bb      	str	r3, [r7, #8]
 800c0b0:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b4:	4a0e      	ldr	r2, [pc, #56]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c0b6:	f043 0302 	orr.w	r3, r3, #2
 800c0ba:	6313      	str	r3, [r2, #48]	; 0x30
 800c0bc:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <HAL_TIM_MspPostInit+0xec>)
 800c0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c0:	f003 0302 	and.w	r3, r3, #2
 800c0c4:	60bb      	str	r3, [r7, #8]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c0d8:	2302      	movs	r3, #2
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0dc:	f107 0314 	add.w	r3, r7, #20
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4805      	ldr	r0, [pc, #20]	; (800c0f8 <HAL_TIM_MspPostInit+0xf4>)
 800c0e4:	f7f5 ff34 	bl	8001f50 <HAL_GPIO_Init>
}
 800c0e8:	bf00      	nop
 800c0ea:	3728      	adds	r7, #40	; 0x28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	40023800 	.word	0x40023800
 800c0f4:	40020000 	.word	0x40020000
 800c0f8:	40020400 	.word	0x40020400
 800c0fc:	40000400 	.word	0x40000400

0800c100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c108:	f107 0314 	add.w	r3, r7, #20
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	605a      	str	r2, [r3, #4]
 800c112:	609a      	str	r2, [r3, #8]
 800c114:	60da      	str	r2, [r3, #12]
 800c116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a19      	ldr	r2, [pc, #100]	; (800c184 <HAL_UART_MspInit+0x84>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d12c      	bne.n	800c17c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	4b18      	ldr	r3, [pc, #96]	; (800c188 <HAL_UART_MspInit+0x88>)
 800c128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12a:	4a17      	ldr	r2, [pc, #92]	; (800c188 <HAL_UART_MspInit+0x88>)
 800c12c:	f043 0310 	orr.w	r3, r3, #16
 800c130:	6453      	str	r3, [r2, #68]	; 0x44
 800c132:	4b15      	ldr	r3, [pc, #84]	; (800c188 <HAL_UART_MspInit+0x88>)
 800c134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c136:	f003 0310 	and.w	r3, r3, #16
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	4b11      	ldr	r3, [pc, #68]	; (800c188 <HAL_UART_MspInit+0x88>)
 800c144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c146:	4a10      	ldr	r2, [pc, #64]	; (800c188 <HAL_UART_MspInit+0x88>)
 800c148:	f043 0301 	orr.w	r3, r3, #1
 800c14c:	6313      	str	r3, [r2, #48]	; 0x30
 800c14e:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <HAL_UART_MspInit+0x88>)
 800c150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c15a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c15e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c160:	2302      	movs	r3, #2
 800c162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c164:	2301      	movs	r3, #1
 800c166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c168:	2303      	movs	r3, #3
 800c16a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c16c:	2307      	movs	r3, #7
 800c16e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c170:	f107 0314 	add.w	r3, r7, #20
 800c174:	4619      	mov	r1, r3
 800c176:	4805      	ldr	r0, [pc, #20]	; (800c18c <HAL_UART_MspInit+0x8c>)
 800c178:	f7f5 feea 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c17c:	bf00      	nop
 800c17e:	3728      	adds	r7, #40	; 0x28
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	40011000 	.word	0x40011000
 800c188:	40023800 	.word	0x40023800
 800c18c:	40020000 	.word	0x40020000

0800c190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c190:	b480      	push	{r7}
 800c192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1a2:	e7fe      	b.n	800c1a2 <HardFault_Handler+0x4>

0800c1a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1a8:	e7fe      	b.n	800c1a8 <MemManage_Handler+0x4>

0800c1aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1ae:	e7fe      	b.n	800c1ae <BusFault_Handler+0x4>

0800c1b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1b4:	e7fe      	b.n	800c1b4 <UsageFault_Handler+0x4>

0800c1b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1ba:	bf00      	nop
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c1c8:	bf00      	nop
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c1d6:	bf00      	nop
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c1e4:	f7f4 fed2 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c1e8:	bf00      	nop
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c1f0:	4802      	ldr	r0, [pc, #8]	; (800c1fc <TIM6_DAC_IRQHandler+0x10>)
 800c1f2:	f7f7 fbba 	bl	800396a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c1f6:	bf00      	nop
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000b30 	.word	0x20000b30

0800c200 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c20c:	2300      	movs	r3, #0
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	e00a      	b.n	800c228 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c212:	f3af 8000 	nop.w
 800c216:	4601      	mov	r1, r0
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	60ba      	str	r2, [r7, #8]
 800c21e:	b2ca      	uxtb	r2, r1
 800c220:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	3301      	adds	r3, #1
 800c226:	617b      	str	r3, [r7, #20]
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	dbf0      	blt.n	800c212 <_read+0x12>
	}

return len;
 800c230:	687b      	ldr	r3, [r7, #4]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b086      	sub	sp, #24
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	60b9      	str	r1, [r7, #8]
 800c244:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]
 800c24a:	e009      	b.n	800c260 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	60ba      	str	r2, [r7, #8]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	4618      	mov	r0, r3
 800c256:	f7fb fd9d 	bl	8007d94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	3301      	adds	r3, #1
 800c25e:	617b      	str	r3, [r7, #20]
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	429a      	cmp	r2, r3
 800c266:	dbf1      	blt.n	800c24c <_write+0x12>
	}
	return len;
 800c268:	687b      	ldr	r3, [r7, #4]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <_close>:

int _close(int file)
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
	return -1;
 800c27a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c27e:	4618      	mov	r0, r3
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b083      	sub	sp, #12
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c29a:	605a      	str	r2, [r3, #4]
	return 0;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <_isatty>:

int _isatty(int file)
{
 800c2aa:	b480      	push	{r7}
 800c2ac:	b083      	sub	sp, #12
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
	return 1;
 800c2b2:	2301      	movs	r3, #1
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
	return 0;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
	...

0800c2dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c2e4:	4b11      	ldr	r3, [pc, #68]	; (800c32c <_sbrk+0x50>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d102      	bne.n	800c2f2 <_sbrk+0x16>
		heap_end = &end;
 800c2ec:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <_sbrk+0x50>)
 800c2ee:	4a10      	ldr	r2, [pc, #64]	; (800c330 <_sbrk+0x54>)
 800c2f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c2f2:	4b0e      	ldr	r3, [pc, #56]	; (800c32c <_sbrk+0x50>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c2f8:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <_sbrk+0x50>)
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	466a      	mov	r2, sp
 800c302:	4293      	cmp	r3, r2
 800c304:	d907      	bls.n	800c316 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c306:	f000 f875 	bl	800c3f4 <__errno>
 800c30a:	4602      	mov	r2, r0
 800c30c:	230c      	movs	r3, #12
 800c30e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c310:	f04f 33ff 	mov.w	r3, #4294967295
 800c314:	e006      	b.n	800c324 <_sbrk+0x48>
	}

	heap_end += incr;
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <_sbrk+0x50>)
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4413      	add	r3, r2
 800c31e:	4a03      	ldr	r2, [pc, #12]	; (800c32c <_sbrk+0x50>)
 800c320:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c322:	68fb      	ldr	r3, [r7, #12]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20000194 	.word	0x20000194
 800c330:	20000f18 	.word	0x20000f18

0800c334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c338:	4b16      	ldr	r3, [pc, #88]	; (800c394 <SystemInit+0x60>)
 800c33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c33e:	4a15      	ldr	r2, [pc, #84]	; (800c394 <SystemInit+0x60>)
 800c340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c348:	4b13      	ldr	r3, [pc, #76]	; (800c398 <SystemInit+0x64>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a12      	ldr	r2, [pc, #72]	; (800c398 <SystemInit+0x64>)
 800c34e:	f043 0301 	orr.w	r3, r3, #1
 800c352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c354:	4b10      	ldr	r3, [pc, #64]	; (800c398 <SystemInit+0x64>)
 800c356:	2200      	movs	r2, #0
 800c358:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c35a:	4b0f      	ldr	r3, [pc, #60]	; (800c398 <SystemInit+0x64>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a0e      	ldr	r2, [pc, #56]	; (800c398 <SystemInit+0x64>)
 800c360:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c368:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <SystemInit+0x64>)
 800c36c:	4a0b      	ldr	r2, [pc, #44]	; (800c39c <SystemInit+0x68>)
 800c36e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c370:	4b09      	ldr	r3, [pc, #36]	; (800c398 <SystemInit+0x64>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a08      	ldr	r2, [pc, #32]	; (800c398 <SystemInit+0x64>)
 800c376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c37a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c37c:	4b06      	ldr	r3, [pc, #24]	; (800c398 <SystemInit+0x64>)
 800c37e:	2200      	movs	r2, #0
 800c380:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c382:	4b04      	ldr	r3, [pc, #16]	; (800c394 <SystemInit+0x60>)
 800c384:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c388:	609a      	str	r2, [r3, #8]
#endif
}
 800c38a:	bf00      	nop
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	e000ed00 	.word	0xe000ed00
 800c398:	40023800 	.word	0x40023800
 800c39c:	24003010 	.word	0x24003010

0800c3a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c3a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c3d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c3a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c3a6:	e003      	b.n	800c3b0 <LoopCopyDataInit>

0800c3a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c3a8:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c3aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c3ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c3ae:	3104      	adds	r1, #4

0800c3b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c3b0:	480b      	ldr	r0, [pc, #44]	; (800c3e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c3b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c3b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c3b8:	d3f6      	bcc.n	800c3a8 <CopyDataInit>
  ldr  r2, =_sbss
 800c3ba:	4a0b      	ldr	r2, [pc, #44]	; (800c3e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c3bc:	e002      	b.n	800c3c4 <LoopFillZerobss>

0800c3be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c3be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c3c0:	f842 3b04 	str.w	r3, [r2], #4

0800c3c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c3c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c3c8:	d3f9      	bcc.n	800c3be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c3ca:	f7ff ffb3 	bl	800c334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c3ce:	f000 f817 	bl	800c400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c3d2:	f7fc fd8b 	bl	8008eec <main>
  bx  lr    
 800c3d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c3d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c3dc:	0800db08 	.word	0x0800db08
  ldr  r0, =_sdata
 800c3e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c3e4:	2000016c 	.word	0x2000016c
  ldr  r2, =_sbss
 800c3e8:	2000016c 	.word	0x2000016c
  ldr  r3, = _ebss
 800c3ec:	20000f18 	.word	0x20000f18

0800c3f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c3f0:	e7fe      	b.n	800c3f0 <ADC_IRQHandler>
	...

0800c3f4 <__errno>:
 800c3f4:	4b01      	ldr	r3, [pc, #4]	; (800c3fc <__errno+0x8>)
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	20000104 	.word	0x20000104

0800c400 <__libc_init_array>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	4e0d      	ldr	r6, [pc, #52]	; (800c438 <__libc_init_array+0x38>)
 800c404:	4c0d      	ldr	r4, [pc, #52]	; (800c43c <__libc_init_array+0x3c>)
 800c406:	1ba4      	subs	r4, r4, r6
 800c408:	10a4      	asrs	r4, r4, #2
 800c40a:	2500      	movs	r5, #0
 800c40c:	42a5      	cmp	r5, r4
 800c40e:	d109      	bne.n	800c424 <__libc_init_array+0x24>
 800c410:	4e0b      	ldr	r6, [pc, #44]	; (800c440 <__libc_init_array+0x40>)
 800c412:	4c0c      	ldr	r4, [pc, #48]	; (800c444 <__libc_init_array+0x44>)
 800c414:	f001 f932 	bl	800d67c <_init>
 800c418:	1ba4      	subs	r4, r4, r6
 800c41a:	10a4      	asrs	r4, r4, #2
 800c41c:	2500      	movs	r5, #0
 800c41e:	42a5      	cmp	r5, r4
 800c420:	d105      	bne.n	800c42e <__libc_init_array+0x2e>
 800c422:	bd70      	pop	{r4, r5, r6, pc}
 800c424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c428:	4798      	blx	r3
 800c42a:	3501      	adds	r5, #1
 800c42c:	e7ee      	b.n	800c40c <__libc_init_array+0xc>
 800c42e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c432:	4798      	blx	r3
 800c434:	3501      	adds	r5, #1
 800c436:	e7f2      	b.n	800c41e <__libc_init_array+0x1e>
 800c438:	0800db00 	.word	0x0800db00
 800c43c:	0800db00 	.word	0x0800db00
 800c440:	0800db00 	.word	0x0800db00
 800c444:	0800db04 	.word	0x0800db04

0800c448 <memset>:
 800c448:	4402      	add	r2, r0
 800c44a:	4603      	mov	r3, r0
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d100      	bne.n	800c452 <memset+0xa>
 800c450:	4770      	bx	lr
 800c452:	f803 1b01 	strb.w	r1, [r3], #1
 800c456:	e7f9      	b.n	800c44c <memset+0x4>

0800c458 <iprintf>:
 800c458:	b40f      	push	{r0, r1, r2, r3}
 800c45a:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <iprintf+0x2c>)
 800c45c:	b513      	push	{r0, r1, r4, lr}
 800c45e:	681c      	ldr	r4, [r3, #0]
 800c460:	b124      	cbz	r4, 800c46c <iprintf+0x14>
 800c462:	69a3      	ldr	r3, [r4, #24]
 800c464:	b913      	cbnz	r3, 800c46c <iprintf+0x14>
 800c466:	4620      	mov	r0, r4
 800c468:	f000 fad8 	bl	800ca1c <__sinit>
 800c46c:	ab05      	add	r3, sp, #20
 800c46e:	9a04      	ldr	r2, [sp, #16]
 800c470:	68a1      	ldr	r1, [r4, #8]
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	4620      	mov	r0, r4
 800c476:	f000 fc99 	bl	800cdac <_vfiprintf_r>
 800c47a:	b002      	add	sp, #8
 800c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c480:	b004      	add	sp, #16
 800c482:	4770      	bx	lr
 800c484:	20000104 	.word	0x20000104

0800c488 <_puts_r>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	460e      	mov	r6, r1
 800c48c:	4605      	mov	r5, r0
 800c48e:	b118      	cbz	r0, 800c498 <_puts_r+0x10>
 800c490:	6983      	ldr	r3, [r0, #24]
 800c492:	b90b      	cbnz	r3, 800c498 <_puts_r+0x10>
 800c494:	f000 fac2 	bl	800ca1c <__sinit>
 800c498:	69ab      	ldr	r3, [r5, #24]
 800c49a:	68ac      	ldr	r4, [r5, #8]
 800c49c:	b913      	cbnz	r3, 800c4a4 <_puts_r+0x1c>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 fabc 	bl	800ca1c <__sinit>
 800c4a4:	4b23      	ldr	r3, [pc, #140]	; (800c534 <_puts_r+0xac>)
 800c4a6:	429c      	cmp	r4, r3
 800c4a8:	d117      	bne.n	800c4da <_puts_r+0x52>
 800c4aa:	686c      	ldr	r4, [r5, #4]
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	071b      	lsls	r3, r3, #28
 800c4b0:	d51d      	bpl.n	800c4ee <_puts_r+0x66>
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	b1db      	cbz	r3, 800c4ee <_puts_r+0x66>
 800c4b6:	3e01      	subs	r6, #1
 800c4b8:	68a3      	ldr	r3, [r4, #8]
 800c4ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	60a3      	str	r3, [r4, #8]
 800c4c2:	b9e9      	cbnz	r1, 800c500 <_puts_r+0x78>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	da2e      	bge.n	800c526 <_puts_r+0x9e>
 800c4c8:	4622      	mov	r2, r4
 800c4ca:	210a      	movs	r1, #10
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f000 f8f5 	bl	800c6bc <__swbuf_r>
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	d011      	beq.n	800c4fa <_puts_r+0x72>
 800c4d6:	200a      	movs	r0, #10
 800c4d8:	e011      	b.n	800c4fe <_puts_r+0x76>
 800c4da:	4b17      	ldr	r3, [pc, #92]	; (800c538 <_puts_r+0xb0>)
 800c4dc:	429c      	cmp	r4, r3
 800c4de:	d101      	bne.n	800c4e4 <_puts_r+0x5c>
 800c4e0:	68ac      	ldr	r4, [r5, #8]
 800c4e2:	e7e3      	b.n	800c4ac <_puts_r+0x24>
 800c4e4:	4b15      	ldr	r3, [pc, #84]	; (800c53c <_puts_r+0xb4>)
 800c4e6:	429c      	cmp	r4, r3
 800c4e8:	bf08      	it	eq
 800c4ea:	68ec      	ldreq	r4, [r5, #12]
 800c4ec:	e7de      	b.n	800c4ac <_puts_r+0x24>
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f000 f935 	bl	800c760 <__swsetup_r>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d0dd      	beq.n	800c4b6 <_puts_r+0x2e>
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fe:	bd70      	pop	{r4, r5, r6, pc}
 800c500:	2b00      	cmp	r3, #0
 800c502:	da04      	bge.n	800c50e <_puts_r+0x86>
 800c504:	69a2      	ldr	r2, [r4, #24]
 800c506:	429a      	cmp	r2, r3
 800c508:	dc06      	bgt.n	800c518 <_puts_r+0x90>
 800c50a:	290a      	cmp	r1, #10
 800c50c:	d004      	beq.n	800c518 <_puts_r+0x90>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	1c5a      	adds	r2, r3, #1
 800c512:	6022      	str	r2, [r4, #0]
 800c514:	7019      	strb	r1, [r3, #0]
 800c516:	e7cf      	b.n	800c4b8 <_puts_r+0x30>
 800c518:	4622      	mov	r2, r4
 800c51a:	4628      	mov	r0, r5
 800c51c:	f000 f8ce 	bl	800c6bc <__swbuf_r>
 800c520:	3001      	adds	r0, #1
 800c522:	d1c9      	bne.n	800c4b8 <_puts_r+0x30>
 800c524:	e7e9      	b.n	800c4fa <_puts_r+0x72>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	200a      	movs	r0, #10
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	7018      	strb	r0, [r3, #0]
 800c530:	e7e5      	b.n	800c4fe <_puts_r+0x76>
 800c532:	bf00      	nop
 800c534:	0800da80 	.word	0x0800da80
 800c538:	0800daa0 	.word	0x0800daa0
 800c53c:	0800da60 	.word	0x0800da60

0800c540 <puts>:
 800c540:	4b02      	ldr	r3, [pc, #8]	; (800c54c <puts+0xc>)
 800c542:	4601      	mov	r1, r0
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f7ff bf9f 	b.w	800c488 <_puts_r>
 800c54a:	bf00      	nop
 800c54c:	20000104 	.word	0x20000104

0800c550 <setbuf>:
 800c550:	2900      	cmp	r1, #0
 800c552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c556:	bf0c      	ite	eq
 800c558:	2202      	moveq	r2, #2
 800c55a:	2200      	movne	r2, #0
 800c55c:	f000 b800 	b.w	800c560 <setvbuf>

0800c560 <setvbuf>:
 800c560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c564:	461d      	mov	r5, r3
 800c566:	4b51      	ldr	r3, [pc, #324]	; (800c6ac <setvbuf+0x14c>)
 800c568:	681e      	ldr	r6, [r3, #0]
 800c56a:	4604      	mov	r4, r0
 800c56c:	460f      	mov	r7, r1
 800c56e:	4690      	mov	r8, r2
 800c570:	b126      	cbz	r6, 800c57c <setvbuf+0x1c>
 800c572:	69b3      	ldr	r3, [r6, #24]
 800c574:	b913      	cbnz	r3, 800c57c <setvbuf+0x1c>
 800c576:	4630      	mov	r0, r6
 800c578:	f000 fa50 	bl	800ca1c <__sinit>
 800c57c:	4b4c      	ldr	r3, [pc, #304]	; (800c6b0 <setvbuf+0x150>)
 800c57e:	429c      	cmp	r4, r3
 800c580:	d152      	bne.n	800c628 <setvbuf+0xc8>
 800c582:	6874      	ldr	r4, [r6, #4]
 800c584:	f1b8 0f02 	cmp.w	r8, #2
 800c588:	d006      	beq.n	800c598 <setvbuf+0x38>
 800c58a:	f1b8 0f01 	cmp.w	r8, #1
 800c58e:	f200 8089 	bhi.w	800c6a4 <setvbuf+0x144>
 800c592:	2d00      	cmp	r5, #0
 800c594:	f2c0 8086 	blt.w	800c6a4 <setvbuf+0x144>
 800c598:	4621      	mov	r1, r4
 800c59a:	4630      	mov	r0, r6
 800c59c:	f000 f9d4 	bl	800c948 <_fflush_r>
 800c5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5a2:	b141      	cbz	r1, 800c5b6 <setvbuf+0x56>
 800c5a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5a8:	4299      	cmp	r1, r3
 800c5aa:	d002      	beq.n	800c5b2 <setvbuf+0x52>
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f000 fb2b 	bl	800cc08 <_free_r>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	6363      	str	r3, [r4, #52]	; 0x34
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	61a3      	str	r3, [r4, #24]
 800c5ba:	6063      	str	r3, [r4, #4]
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	061b      	lsls	r3, r3, #24
 800c5c0:	d503      	bpl.n	800c5ca <setvbuf+0x6a>
 800c5c2:	6921      	ldr	r1, [r4, #16]
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f000 fb1f 	bl	800cc08 <_free_r>
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c5d0:	f023 0303 	bic.w	r3, r3, #3
 800c5d4:	f1b8 0f02 	cmp.w	r8, #2
 800c5d8:	81a3      	strh	r3, [r4, #12]
 800c5da:	d05d      	beq.n	800c698 <setvbuf+0x138>
 800c5dc:	ab01      	add	r3, sp, #4
 800c5de:	466a      	mov	r2, sp
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f000 faa4 	bl	800cb30 <__swhatbuf_r>
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	4318      	orrs	r0, r3
 800c5ec:	81a0      	strh	r0, [r4, #12]
 800c5ee:	bb2d      	cbnz	r5, 800c63c <setvbuf+0xdc>
 800c5f0:	9d00      	ldr	r5, [sp, #0]
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	f000 fb00 	bl	800cbf8 <malloc>
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d14e      	bne.n	800c69c <setvbuf+0x13c>
 800c5fe:	f8dd 9000 	ldr.w	r9, [sp]
 800c602:	45a9      	cmp	r9, r5
 800c604:	d13c      	bne.n	800c680 <setvbuf+0x120>
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f043 0302 	orr.w	r3, r3, #2
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	2300      	movs	r3, #0
 800c614:	60a3      	str	r3, [r4, #8]
 800c616:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	6123      	str	r3, [r4, #16]
 800c61e:	2301      	movs	r3, #1
 800c620:	6163      	str	r3, [r4, #20]
 800c622:	b003      	add	sp, #12
 800c624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c628:	4b22      	ldr	r3, [pc, #136]	; (800c6b4 <setvbuf+0x154>)
 800c62a:	429c      	cmp	r4, r3
 800c62c:	d101      	bne.n	800c632 <setvbuf+0xd2>
 800c62e:	68b4      	ldr	r4, [r6, #8]
 800c630:	e7a8      	b.n	800c584 <setvbuf+0x24>
 800c632:	4b21      	ldr	r3, [pc, #132]	; (800c6b8 <setvbuf+0x158>)
 800c634:	429c      	cmp	r4, r3
 800c636:	bf08      	it	eq
 800c638:	68f4      	ldreq	r4, [r6, #12]
 800c63a:	e7a3      	b.n	800c584 <setvbuf+0x24>
 800c63c:	2f00      	cmp	r7, #0
 800c63e:	d0d8      	beq.n	800c5f2 <setvbuf+0x92>
 800c640:	69b3      	ldr	r3, [r6, #24]
 800c642:	b913      	cbnz	r3, 800c64a <setvbuf+0xea>
 800c644:	4630      	mov	r0, r6
 800c646:	f000 f9e9 	bl	800ca1c <__sinit>
 800c64a:	f1b8 0f01 	cmp.w	r8, #1
 800c64e:	bf08      	it	eq
 800c650:	89a3      	ldrheq	r3, [r4, #12]
 800c652:	6027      	str	r7, [r4, #0]
 800c654:	bf04      	itt	eq
 800c656:	f043 0301 	orreq.w	r3, r3, #1
 800c65a:	81a3      	strheq	r3, [r4, #12]
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	f013 0008 	ands.w	r0, r3, #8
 800c662:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800c666:	d01b      	beq.n	800c6a0 <setvbuf+0x140>
 800c668:	f013 0001 	ands.w	r0, r3, #1
 800c66c:	bf18      	it	ne
 800c66e:	426d      	negne	r5, r5
 800c670:	f04f 0300 	mov.w	r3, #0
 800c674:	bf1d      	ittte	ne
 800c676:	60a3      	strne	r3, [r4, #8]
 800c678:	61a5      	strne	r5, [r4, #24]
 800c67a:	4618      	movne	r0, r3
 800c67c:	60a5      	streq	r5, [r4, #8]
 800c67e:	e7d0      	b.n	800c622 <setvbuf+0xc2>
 800c680:	4648      	mov	r0, r9
 800c682:	f000 fab9 	bl	800cbf8 <malloc>
 800c686:	4607      	mov	r7, r0
 800c688:	2800      	cmp	r0, #0
 800c68a:	d0bc      	beq.n	800c606 <setvbuf+0xa6>
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	464d      	mov	r5, r9
 800c696:	e7d3      	b.n	800c640 <setvbuf+0xe0>
 800c698:	2000      	movs	r0, #0
 800c69a:	e7b6      	b.n	800c60a <setvbuf+0xaa>
 800c69c:	46a9      	mov	r9, r5
 800c69e:	e7f5      	b.n	800c68c <setvbuf+0x12c>
 800c6a0:	60a0      	str	r0, [r4, #8]
 800c6a2:	e7be      	b.n	800c622 <setvbuf+0xc2>
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	e7bb      	b.n	800c622 <setvbuf+0xc2>
 800c6aa:	bf00      	nop
 800c6ac:	20000104 	.word	0x20000104
 800c6b0:	0800da80 	.word	0x0800da80
 800c6b4:	0800daa0 	.word	0x0800daa0
 800c6b8:	0800da60 	.word	0x0800da60

0800c6bc <__swbuf_r>:
 800c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6be:	460e      	mov	r6, r1
 800c6c0:	4614      	mov	r4, r2
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	b118      	cbz	r0, 800c6ce <__swbuf_r+0x12>
 800c6c6:	6983      	ldr	r3, [r0, #24]
 800c6c8:	b90b      	cbnz	r3, 800c6ce <__swbuf_r+0x12>
 800c6ca:	f000 f9a7 	bl	800ca1c <__sinit>
 800c6ce:	4b21      	ldr	r3, [pc, #132]	; (800c754 <__swbuf_r+0x98>)
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d12a      	bne.n	800c72a <__swbuf_r+0x6e>
 800c6d4:	686c      	ldr	r4, [r5, #4]
 800c6d6:	69a3      	ldr	r3, [r4, #24]
 800c6d8:	60a3      	str	r3, [r4, #8]
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	071a      	lsls	r2, r3, #28
 800c6de:	d52e      	bpl.n	800c73e <__swbuf_r+0x82>
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	b363      	cbz	r3, 800c73e <__swbuf_r+0x82>
 800c6e4:	6923      	ldr	r3, [r4, #16]
 800c6e6:	6820      	ldr	r0, [r4, #0]
 800c6e8:	1ac0      	subs	r0, r0, r3
 800c6ea:	6963      	ldr	r3, [r4, #20]
 800c6ec:	b2f6      	uxtb	r6, r6
 800c6ee:	4283      	cmp	r3, r0
 800c6f0:	4637      	mov	r7, r6
 800c6f2:	dc04      	bgt.n	800c6fe <__swbuf_r+0x42>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 f926 	bl	800c948 <_fflush_r>
 800c6fc:	bb28      	cbnz	r0, 800c74a <__swbuf_r+0x8e>
 800c6fe:	68a3      	ldr	r3, [r4, #8]
 800c700:	3b01      	subs	r3, #1
 800c702:	60a3      	str	r3, [r4, #8]
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	6022      	str	r2, [r4, #0]
 800c70a:	701e      	strb	r6, [r3, #0]
 800c70c:	6963      	ldr	r3, [r4, #20]
 800c70e:	3001      	adds	r0, #1
 800c710:	4283      	cmp	r3, r0
 800c712:	d004      	beq.n	800c71e <__swbuf_r+0x62>
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	07db      	lsls	r3, r3, #31
 800c718:	d519      	bpl.n	800c74e <__swbuf_r+0x92>
 800c71a:	2e0a      	cmp	r6, #10
 800c71c:	d117      	bne.n	800c74e <__swbuf_r+0x92>
 800c71e:	4621      	mov	r1, r4
 800c720:	4628      	mov	r0, r5
 800c722:	f000 f911 	bl	800c948 <_fflush_r>
 800c726:	b190      	cbz	r0, 800c74e <__swbuf_r+0x92>
 800c728:	e00f      	b.n	800c74a <__swbuf_r+0x8e>
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <__swbuf_r+0x9c>)
 800c72c:	429c      	cmp	r4, r3
 800c72e:	d101      	bne.n	800c734 <__swbuf_r+0x78>
 800c730:	68ac      	ldr	r4, [r5, #8]
 800c732:	e7d0      	b.n	800c6d6 <__swbuf_r+0x1a>
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <__swbuf_r+0xa0>)
 800c736:	429c      	cmp	r4, r3
 800c738:	bf08      	it	eq
 800c73a:	68ec      	ldreq	r4, [r5, #12]
 800c73c:	e7cb      	b.n	800c6d6 <__swbuf_r+0x1a>
 800c73e:	4621      	mov	r1, r4
 800c740:	4628      	mov	r0, r5
 800c742:	f000 f80d 	bl	800c760 <__swsetup_r>
 800c746:	2800      	cmp	r0, #0
 800c748:	d0cc      	beq.n	800c6e4 <__swbuf_r+0x28>
 800c74a:	f04f 37ff 	mov.w	r7, #4294967295
 800c74e:	4638      	mov	r0, r7
 800c750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c752:	bf00      	nop
 800c754:	0800da80 	.word	0x0800da80
 800c758:	0800daa0 	.word	0x0800daa0
 800c75c:	0800da60 	.word	0x0800da60

0800c760 <__swsetup_r>:
 800c760:	4b32      	ldr	r3, [pc, #200]	; (800c82c <__swsetup_r+0xcc>)
 800c762:	b570      	push	{r4, r5, r6, lr}
 800c764:	681d      	ldr	r5, [r3, #0]
 800c766:	4606      	mov	r6, r0
 800c768:	460c      	mov	r4, r1
 800c76a:	b125      	cbz	r5, 800c776 <__swsetup_r+0x16>
 800c76c:	69ab      	ldr	r3, [r5, #24]
 800c76e:	b913      	cbnz	r3, 800c776 <__swsetup_r+0x16>
 800c770:	4628      	mov	r0, r5
 800c772:	f000 f953 	bl	800ca1c <__sinit>
 800c776:	4b2e      	ldr	r3, [pc, #184]	; (800c830 <__swsetup_r+0xd0>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	d10f      	bne.n	800c79c <__swsetup_r+0x3c>
 800c77c:	686c      	ldr	r4, [r5, #4]
 800c77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c782:	b29a      	uxth	r2, r3
 800c784:	0715      	lsls	r5, r2, #28
 800c786:	d42c      	bmi.n	800c7e2 <__swsetup_r+0x82>
 800c788:	06d0      	lsls	r0, r2, #27
 800c78a:	d411      	bmi.n	800c7b0 <__swsetup_r+0x50>
 800c78c:	2209      	movs	r2, #9
 800c78e:	6032      	str	r2, [r6, #0]
 800c790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c794:	81a3      	strh	r3, [r4, #12]
 800c796:	f04f 30ff 	mov.w	r0, #4294967295
 800c79a:	e03e      	b.n	800c81a <__swsetup_r+0xba>
 800c79c:	4b25      	ldr	r3, [pc, #148]	; (800c834 <__swsetup_r+0xd4>)
 800c79e:	429c      	cmp	r4, r3
 800c7a0:	d101      	bne.n	800c7a6 <__swsetup_r+0x46>
 800c7a2:	68ac      	ldr	r4, [r5, #8]
 800c7a4:	e7eb      	b.n	800c77e <__swsetup_r+0x1e>
 800c7a6:	4b24      	ldr	r3, [pc, #144]	; (800c838 <__swsetup_r+0xd8>)
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	bf08      	it	eq
 800c7ac:	68ec      	ldreq	r4, [r5, #12]
 800c7ae:	e7e6      	b.n	800c77e <__swsetup_r+0x1e>
 800c7b0:	0751      	lsls	r1, r2, #29
 800c7b2:	d512      	bpl.n	800c7da <__swsetup_r+0x7a>
 800c7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7b6:	b141      	cbz	r1, 800c7ca <__swsetup_r+0x6a>
 800c7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7bc:	4299      	cmp	r1, r3
 800c7be:	d002      	beq.n	800c7c6 <__swsetup_r+0x66>
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f000 fa21 	bl	800cc08 <_free_r>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	6363      	str	r3, [r4, #52]	; 0x34
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7d0:	81a3      	strh	r3, [r4, #12]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	6063      	str	r3, [r4, #4]
 800c7d6:	6923      	ldr	r3, [r4, #16]
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	f043 0308 	orr.w	r3, r3, #8
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	6923      	ldr	r3, [r4, #16]
 800c7e4:	b94b      	cbnz	r3, 800c7fa <__swsetup_r+0x9a>
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7f0:	d003      	beq.n	800c7fa <__swsetup_r+0x9a>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f000 f9bf 	bl	800cb78 <__smakebuf_r>
 800c7fa:	89a2      	ldrh	r2, [r4, #12]
 800c7fc:	f012 0301 	ands.w	r3, r2, #1
 800c800:	d00c      	beq.n	800c81c <__swsetup_r+0xbc>
 800c802:	2300      	movs	r3, #0
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	6963      	ldr	r3, [r4, #20]
 800c808:	425b      	negs	r3, r3
 800c80a:	61a3      	str	r3, [r4, #24]
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	b953      	cbnz	r3, 800c826 <__swsetup_r+0xc6>
 800c810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c814:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c818:	d1ba      	bne.n	800c790 <__swsetup_r+0x30>
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
 800c81c:	0792      	lsls	r2, r2, #30
 800c81e:	bf58      	it	pl
 800c820:	6963      	ldrpl	r3, [r4, #20]
 800c822:	60a3      	str	r3, [r4, #8]
 800c824:	e7f2      	b.n	800c80c <__swsetup_r+0xac>
 800c826:	2000      	movs	r0, #0
 800c828:	e7f7      	b.n	800c81a <__swsetup_r+0xba>
 800c82a:	bf00      	nop
 800c82c:	20000104 	.word	0x20000104
 800c830:	0800da80 	.word	0x0800da80
 800c834:	0800daa0 	.word	0x0800daa0
 800c838:	0800da60 	.word	0x0800da60

0800c83c <__sflush_r>:
 800c83c:	898a      	ldrh	r2, [r1, #12]
 800c83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	4605      	mov	r5, r0
 800c844:	0710      	lsls	r0, r2, #28
 800c846:	460c      	mov	r4, r1
 800c848:	d458      	bmi.n	800c8fc <__sflush_r+0xc0>
 800c84a:	684b      	ldr	r3, [r1, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dc05      	bgt.n	800c85c <__sflush_r+0x20>
 800c850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c852:	2b00      	cmp	r3, #0
 800c854:	dc02      	bgt.n	800c85c <__sflush_r+0x20>
 800c856:	2000      	movs	r0, #0
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c85e:	2e00      	cmp	r6, #0
 800c860:	d0f9      	beq.n	800c856 <__sflush_r+0x1a>
 800c862:	2300      	movs	r3, #0
 800c864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c868:	682f      	ldr	r7, [r5, #0]
 800c86a:	6a21      	ldr	r1, [r4, #32]
 800c86c:	602b      	str	r3, [r5, #0]
 800c86e:	d032      	beq.n	800c8d6 <__sflush_r+0x9a>
 800c870:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	075a      	lsls	r2, r3, #29
 800c876:	d505      	bpl.n	800c884 <__sflush_r+0x48>
 800c878:	6863      	ldr	r3, [r4, #4]
 800c87a:	1ac0      	subs	r0, r0, r3
 800c87c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c87e:	b10b      	cbz	r3, 800c884 <__sflush_r+0x48>
 800c880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c882:	1ac0      	subs	r0, r0, r3
 800c884:	2300      	movs	r3, #0
 800c886:	4602      	mov	r2, r0
 800c888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c88a:	6a21      	ldr	r1, [r4, #32]
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b0      	blx	r6
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	d106      	bne.n	800c8a4 <__sflush_r+0x68>
 800c896:	6829      	ldr	r1, [r5, #0]
 800c898:	291d      	cmp	r1, #29
 800c89a:	d848      	bhi.n	800c92e <__sflush_r+0xf2>
 800c89c:	4a29      	ldr	r2, [pc, #164]	; (800c944 <__sflush_r+0x108>)
 800c89e:	40ca      	lsrs	r2, r1
 800c8a0:	07d6      	lsls	r6, r2, #31
 800c8a2:	d544      	bpl.n	800c92e <__sflush_r+0xf2>
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	6062      	str	r2, [r4, #4]
 800c8a8:	04d9      	lsls	r1, r3, #19
 800c8aa:	6922      	ldr	r2, [r4, #16]
 800c8ac:	6022      	str	r2, [r4, #0]
 800c8ae:	d504      	bpl.n	800c8ba <__sflush_r+0x7e>
 800c8b0:	1c42      	adds	r2, r0, #1
 800c8b2:	d101      	bne.n	800c8b8 <__sflush_r+0x7c>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b903      	cbnz	r3, 800c8ba <__sflush_r+0x7e>
 800c8b8:	6560      	str	r0, [r4, #84]	; 0x54
 800c8ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8bc:	602f      	str	r7, [r5, #0]
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	d0c9      	beq.n	800c856 <__sflush_r+0x1a>
 800c8c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c6:	4299      	cmp	r1, r3
 800c8c8:	d002      	beq.n	800c8d0 <__sflush_r+0x94>
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f000 f99c 	bl	800cc08 <_free_r>
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	6360      	str	r0, [r4, #52]	; 0x34
 800c8d4:	e7c0      	b.n	800c858 <__sflush_r+0x1c>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b0      	blx	r6
 800c8dc:	1c41      	adds	r1, r0, #1
 800c8de:	d1c8      	bne.n	800c872 <__sflush_r+0x36>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0c5      	beq.n	800c872 <__sflush_r+0x36>
 800c8e6:	2b1d      	cmp	r3, #29
 800c8e8:	d001      	beq.n	800c8ee <__sflush_r+0xb2>
 800c8ea:	2b16      	cmp	r3, #22
 800c8ec:	d101      	bne.n	800c8f2 <__sflush_r+0xb6>
 800c8ee:	602f      	str	r7, [r5, #0]
 800c8f0:	e7b1      	b.n	800c856 <__sflush_r+0x1a>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8f8:	81a3      	strh	r3, [r4, #12]
 800c8fa:	e7ad      	b.n	800c858 <__sflush_r+0x1c>
 800c8fc:	690f      	ldr	r7, [r1, #16]
 800c8fe:	2f00      	cmp	r7, #0
 800c900:	d0a9      	beq.n	800c856 <__sflush_r+0x1a>
 800c902:	0793      	lsls	r3, r2, #30
 800c904:	680e      	ldr	r6, [r1, #0]
 800c906:	bf08      	it	eq
 800c908:	694b      	ldreq	r3, [r1, #20]
 800c90a:	600f      	str	r7, [r1, #0]
 800c90c:	bf18      	it	ne
 800c90e:	2300      	movne	r3, #0
 800c910:	eba6 0807 	sub.w	r8, r6, r7
 800c914:	608b      	str	r3, [r1, #8]
 800c916:	f1b8 0f00 	cmp.w	r8, #0
 800c91a:	dd9c      	ble.n	800c856 <__sflush_r+0x1a>
 800c91c:	4643      	mov	r3, r8
 800c91e:	463a      	mov	r2, r7
 800c920:	6a21      	ldr	r1, [r4, #32]
 800c922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c924:	4628      	mov	r0, r5
 800c926:	47b0      	blx	r6
 800c928:	2800      	cmp	r0, #0
 800c92a:	dc06      	bgt.n	800c93a <__sflush_r+0xfe>
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c932:	81a3      	strh	r3, [r4, #12]
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	e78e      	b.n	800c858 <__sflush_r+0x1c>
 800c93a:	4407      	add	r7, r0
 800c93c:	eba8 0800 	sub.w	r8, r8, r0
 800c940:	e7e9      	b.n	800c916 <__sflush_r+0xda>
 800c942:	bf00      	nop
 800c944:	20400001 	.word	0x20400001

0800c948 <_fflush_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	690b      	ldr	r3, [r1, #16]
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b1db      	cbz	r3, 800c98a <_fflush_r+0x42>
 800c952:	b118      	cbz	r0, 800c95c <_fflush_r+0x14>
 800c954:	6983      	ldr	r3, [r0, #24]
 800c956:	b90b      	cbnz	r3, 800c95c <_fflush_r+0x14>
 800c958:	f000 f860 	bl	800ca1c <__sinit>
 800c95c:	4b0c      	ldr	r3, [pc, #48]	; (800c990 <_fflush_r+0x48>)
 800c95e:	429c      	cmp	r4, r3
 800c960:	d109      	bne.n	800c976 <_fflush_r+0x2e>
 800c962:	686c      	ldr	r4, [r5, #4]
 800c964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c968:	b17b      	cbz	r3, 800c98a <_fflush_r+0x42>
 800c96a:	4621      	mov	r1, r4
 800c96c:	4628      	mov	r0, r5
 800c96e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c972:	f7ff bf63 	b.w	800c83c <__sflush_r>
 800c976:	4b07      	ldr	r3, [pc, #28]	; (800c994 <_fflush_r+0x4c>)
 800c978:	429c      	cmp	r4, r3
 800c97a:	d101      	bne.n	800c980 <_fflush_r+0x38>
 800c97c:	68ac      	ldr	r4, [r5, #8]
 800c97e:	e7f1      	b.n	800c964 <_fflush_r+0x1c>
 800c980:	4b05      	ldr	r3, [pc, #20]	; (800c998 <_fflush_r+0x50>)
 800c982:	429c      	cmp	r4, r3
 800c984:	bf08      	it	eq
 800c986:	68ec      	ldreq	r4, [r5, #12]
 800c988:	e7ec      	b.n	800c964 <_fflush_r+0x1c>
 800c98a:	2000      	movs	r0, #0
 800c98c:	bd38      	pop	{r3, r4, r5, pc}
 800c98e:	bf00      	nop
 800c990:	0800da80 	.word	0x0800da80
 800c994:	0800daa0 	.word	0x0800daa0
 800c998:	0800da60 	.word	0x0800da60

0800c99c <std>:
 800c99c:	2300      	movs	r3, #0
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9a6:	6083      	str	r3, [r0, #8]
 800c9a8:	8181      	strh	r1, [r0, #12]
 800c9aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c9ac:	81c2      	strh	r2, [r0, #14]
 800c9ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9b2:	6183      	str	r3, [r0, #24]
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	2208      	movs	r2, #8
 800c9b8:	305c      	adds	r0, #92	; 0x5c
 800c9ba:	f7ff fd45 	bl	800c448 <memset>
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <std+0x38>)
 800c9c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c9c2:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <std+0x3c>)
 800c9c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <std+0x40>)
 800c9c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9ca:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <std+0x44>)
 800c9cc:	6224      	str	r4, [r4, #32]
 800c9ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c9d0:	bd10      	pop	{r4, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0800d309 	.word	0x0800d309
 800c9d8:	0800d32b 	.word	0x0800d32b
 800c9dc:	0800d363 	.word	0x0800d363
 800c9e0:	0800d387 	.word	0x0800d387

0800c9e4 <_cleanup_r>:
 800c9e4:	4901      	ldr	r1, [pc, #4]	; (800c9ec <_cleanup_r+0x8>)
 800c9e6:	f000 b885 	b.w	800caf4 <_fwalk_reent>
 800c9ea:	bf00      	nop
 800c9ec:	0800c949 	.word	0x0800c949

0800c9f0 <__sfmoreglue>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	1e4a      	subs	r2, r1, #1
 800c9f4:	2568      	movs	r5, #104	; 0x68
 800c9f6:	4355      	muls	r5, r2
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9fe:	f000 f951 	bl	800cca4 <_malloc_r>
 800ca02:	4604      	mov	r4, r0
 800ca04:	b140      	cbz	r0, 800ca18 <__sfmoreglue+0x28>
 800ca06:	2100      	movs	r1, #0
 800ca08:	e9c0 1600 	strd	r1, r6, [r0]
 800ca0c:	300c      	adds	r0, #12
 800ca0e:	60a0      	str	r0, [r4, #8]
 800ca10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca14:	f7ff fd18 	bl	800c448 <memset>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	bd70      	pop	{r4, r5, r6, pc}

0800ca1c <__sinit>:
 800ca1c:	6983      	ldr	r3, [r0, #24]
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	4604      	mov	r4, r0
 800ca22:	bb33      	cbnz	r3, 800ca72 <__sinit+0x56>
 800ca24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ca28:	6503      	str	r3, [r0, #80]	; 0x50
 800ca2a:	4b12      	ldr	r3, [pc, #72]	; (800ca74 <__sinit+0x58>)
 800ca2c:	4a12      	ldr	r2, [pc, #72]	; (800ca78 <__sinit+0x5c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6282      	str	r2, [r0, #40]	; 0x28
 800ca32:	4298      	cmp	r0, r3
 800ca34:	bf04      	itt	eq
 800ca36:	2301      	moveq	r3, #1
 800ca38:	6183      	streq	r3, [r0, #24]
 800ca3a:	f000 f81f 	bl	800ca7c <__sfp>
 800ca3e:	6060      	str	r0, [r4, #4]
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 f81b 	bl	800ca7c <__sfp>
 800ca46:	60a0      	str	r0, [r4, #8]
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f000 f817 	bl	800ca7c <__sfp>
 800ca4e:	2200      	movs	r2, #0
 800ca50:	60e0      	str	r0, [r4, #12]
 800ca52:	2104      	movs	r1, #4
 800ca54:	6860      	ldr	r0, [r4, #4]
 800ca56:	f7ff ffa1 	bl	800c99c <std>
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	2109      	movs	r1, #9
 800ca5e:	68a0      	ldr	r0, [r4, #8]
 800ca60:	f7ff ff9c 	bl	800c99c <std>
 800ca64:	2202      	movs	r2, #2
 800ca66:	2112      	movs	r1, #18
 800ca68:	68e0      	ldr	r0, [r4, #12]
 800ca6a:	f7ff ff97 	bl	800c99c <std>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	61a3      	str	r3, [r4, #24]
 800ca72:	bd10      	pop	{r4, pc}
 800ca74:	0800da5c 	.word	0x0800da5c
 800ca78:	0800c9e5 	.word	0x0800c9e5

0800ca7c <__sfp>:
 800ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7e:	4b1b      	ldr	r3, [pc, #108]	; (800caec <__sfp+0x70>)
 800ca80:	681e      	ldr	r6, [r3, #0]
 800ca82:	69b3      	ldr	r3, [r6, #24]
 800ca84:	4607      	mov	r7, r0
 800ca86:	b913      	cbnz	r3, 800ca8e <__sfp+0x12>
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f7ff ffc7 	bl	800ca1c <__sinit>
 800ca8e:	3648      	adds	r6, #72	; 0x48
 800ca90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	d503      	bpl.n	800caa0 <__sfp+0x24>
 800ca98:	6833      	ldr	r3, [r6, #0]
 800ca9a:	b133      	cbz	r3, 800caaa <__sfp+0x2e>
 800ca9c:	6836      	ldr	r6, [r6, #0]
 800ca9e:	e7f7      	b.n	800ca90 <__sfp+0x14>
 800caa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800caa4:	b16d      	cbz	r5, 800cac2 <__sfp+0x46>
 800caa6:	3468      	adds	r4, #104	; 0x68
 800caa8:	e7f4      	b.n	800ca94 <__sfp+0x18>
 800caaa:	2104      	movs	r1, #4
 800caac:	4638      	mov	r0, r7
 800caae:	f7ff ff9f 	bl	800c9f0 <__sfmoreglue>
 800cab2:	6030      	str	r0, [r6, #0]
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d1f1      	bne.n	800ca9c <__sfp+0x20>
 800cab8:	230c      	movs	r3, #12
 800caba:	603b      	str	r3, [r7, #0]
 800cabc:	4604      	mov	r4, r0
 800cabe:	4620      	mov	r0, r4
 800cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac2:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <__sfp+0x74>)
 800cac4:	6665      	str	r5, [r4, #100]	; 0x64
 800cac6:	e9c4 5500 	strd	r5, r5, [r4]
 800caca:	60a5      	str	r5, [r4, #8]
 800cacc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cad0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cad4:	2208      	movs	r2, #8
 800cad6:	4629      	mov	r1, r5
 800cad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cadc:	f7ff fcb4 	bl	800c448 <memset>
 800cae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cae8:	e7e9      	b.n	800cabe <__sfp+0x42>
 800caea:	bf00      	nop
 800caec:	0800da5c 	.word	0x0800da5c
 800caf0:	ffff0001 	.word	0xffff0001

0800caf4 <_fwalk_reent>:
 800caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	4680      	mov	r8, r0
 800cafa:	4689      	mov	r9, r1
 800cafc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb00:	2600      	movs	r6, #0
 800cb02:	b914      	cbnz	r4, 800cb0a <_fwalk_reent+0x16>
 800cb04:	4630      	mov	r0, r6
 800cb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cb0e:	3f01      	subs	r7, #1
 800cb10:	d501      	bpl.n	800cb16 <_fwalk_reent+0x22>
 800cb12:	6824      	ldr	r4, [r4, #0]
 800cb14:	e7f5      	b.n	800cb02 <_fwalk_reent+0xe>
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d907      	bls.n	800cb2c <_fwalk_reent+0x38>
 800cb1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb20:	3301      	adds	r3, #1
 800cb22:	d003      	beq.n	800cb2c <_fwalk_reent+0x38>
 800cb24:	4629      	mov	r1, r5
 800cb26:	4640      	mov	r0, r8
 800cb28:	47c8      	blx	r9
 800cb2a:	4306      	orrs	r6, r0
 800cb2c:	3568      	adds	r5, #104	; 0x68
 800cb2e:	e7ee      	b.n	800cb0e <_fwalk_reent+0x1a>

0800cb30 <__swhatbuf_r>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	460e      	mov	r6, r1
 800cb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb38:	2900      	cmp	r1, #0
 800cb3a:	b096      	sub	sp, #88	; 0x58
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	461d      	mov	r5, r3
 800cb40:	da07      	bge.n	800cb52 <__swhatbuf_r+0x22>
 800cb42:	2300      	movs	r3, #0
 800cb44:	602b      	str	r3, [r5, #0]
 800cb46:	89b3      	ldrh	r3, [r6, #12]
 800cb48:	061a      	lsls	r2, r3, #24
 800cb4a:	d410      	bmi.n	800cb6e <__swhatbuf_r+0x3e>
 800cb4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb50:	e00e      	b.n	800cb70 <__swhatbuf_r+0x40>
 800cb52:	466a      	mov	r2, sp
 800cb54:	f000 fc3e 	bl	800d3d4 <_fstat_r>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	dbf2      	blt.n	800cb42 <__swhatbuf_r+0x12>
 800cb5c:	9a01      	ldr	r2, [sp, #4]
 800cb5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb66:	425a      	negs	r2, r3
 800cb68:	415a      	adcs	r2, r3
 800cb6a:	602a      	str	r2, [r5, #0]
 800cb6c:	e7ee      	b.n	800cb4c <__swhatbuf_r+0x1c>
 800cb6e:	2340      	movs	r3, #64	; 0x40
 800cb70:	2000      	movs	r0, #0
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	b016      	add	sp, #88	; 0x58
 800cb76:	bd70      	pop	{r4, r5, r6, pc}

0800cb78 <__smakebuf_r>:
 800cb78:	898b      	ldrh	r3, [r1, #12]
 800cb7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb7c:	079d      	lsls	r5, r3, #30
 800cb7e:	4606      	mov	r6, r0
 800cb80:	460c      	mov	r4, r1
 800cb82:	d507      	bpl.n	800cb94 <__smakebuf_r+0x1c>
 800cb84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	6123      	str	r3, [r4, #16]
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	6163      	str	r3, [r4, #20]
 800cb90:	b002      	add	sp, #8
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	ab01      	add	r3, sp, #4
 800cb96:	466a      	mov	r2, sp
 800cb98:	f7ff ffca 	bl	800cb30 <__swhatbuf_r>
 800cb9c:	9900      	ldr	r1, [sp, #0]
 800cb9e:	4605      	mov	r5, r0
 800cba0:	4630      	mov	r0, r6
 800cba2:	f000 f87f 	bl	800cca4 <_malloc_r>
 800cba6:	b948      	cbnz	r0, 800cbbc <__smakebuf_r+0x44>
 800cba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbac:	059a      	lsls	r2, r3, #22
 800cbae:	d4ef      	bmi.n	800cb90 <__smakebuf_r+0x18>
 800cbb0:	f023 0303 	bic.w	r3, r3, #3
 800cbb4:	f043 0302 	orr.w	r3, r3, #2
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	e7e3      	b.n	800cb84 <__smakebuf_r+0xc>
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <__smakebuf_r+0x7c>)
 800cbbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	6020      	str	r0, [r4, #0]
 800cbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	9b00      	ldr	r3, [sp, #0]
 800cbcc:	6163      	str	r3, [r4, #20]
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	6120      	str	r0, [r4, #16]
 800cbd2:	b15b      	cbz	r3, 800cbec <__smakebuf_r+0x74>
 800cbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 fc0d 	bl	800d3f8 <_isatty_r>
 800cbde:	b128      	cbz	r0, 800cbec <__smakebuf_r+0x74>
 800cbe0:	89a3      	ldrh	r3, [r4, #12]
 800cbe2:	f023 0303 	bic.w	r3, r3, #3
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	81a3      	strh	r3, [r4, #12]
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	431d      	orrs	r5, r3
 800cbf0:	81a5      	strh	r5, [r4, #12]
 800cbf2:	e7cd      	b.n	800cb90 <__smakebuf_r+0x18>
 800cbf4:	0800c9e5 	.word	0x0800c9e5

0800cbf8 <malloc>:
 800cbf8:	4b02      	ldr	r3, [pc, #8]	; (800cc04 <malloc+0xc>)
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	6818      	ldr	r0, [r3, #0]
 800cbfe:	f000 b851 	b.w	800cca4 <_malloc_r>
 800cc02:	bf00      	nop
 800cc04:	20000104 	.word	0x20000104

0800cc08 <_free_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	d045      	beq.n	800cc9c <_free_r+0x94>
 800cc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc14:	1f0c      	subs	r4, r1, #4
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	bfb8      	it	lt
 800cc1a:	18e4      	addlt	r4, r4, r3
 800cc1c:	f000 fc0e 	bl	800d43c <__malloc_lock>
 800cc20:	4a1f      	ldr	r2, [pc, #124]	; (800cca0 <_free_r+0x98>)
 800cc22:	6813      	ldr	r3, [r2, #0]
 800cc24:	4610      	mov	r0, r2
 800cc26:	b933      	cbnz	r3, 800cc36 <_free_r+0x2e>
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	6014      	str	r4, [r2, #0]
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc32:	f000 bc04 	b.w	800d43e <__malloc_unlock>
 800cc36:	42a3      	cmp	r3, r4
 800cc38:	d90c      	bls.n	800cc54 <_free_r+0x4c>
 800cc3a:	6821      	ldr	r1, [r4, #0]
 800cc3c:	1862      	adds	r2, r4, r1
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	bf04      	itt	eq
 800cc42:	681a      	ldreq	r2, [r3, #0]
 800cc44:	685b      	ldreq	r3, [r3, #4]
 800cc46:	6063      	str	r3, [r4, #4]
 800cc48:	bf04      	itt	eq
 800cc4a:	1852      	addeq	r2, r2, r1
 800cc4c:	6022      	streq	r2, [r4, #0]
 800cc4e:	6004      	str	r4, [r0, #0]
 800cc50:	e7ec      	b.n	800cc2c <_free_r+0x24>
 800cc52:	4613      	mov	r3, r2
 800cc54:	685a      	ldr	r2, [r3, #4]
 800cc56:	b10a      	cbz	r2, 800cc5c <_free_r+0x54>
 800cc58:	42a2      	cmp	r2, r4
 800cc5a:	d9fa      	bls.n	800cc52 <_free_r+0x4a>
 800cc5c:	6819      	ldr	r1, [r3, #0]
 800cc5e:	1858      	adds	r0, r3, r1
 800cc60:	42a0      	cmp	r0, r4
 800cc62:	d10b      	bne.n	800cc7c <_free_r+0x74>
 800cc64:	6820      	ldr	r0, [r4, #0]
 800cc66:	4401      	add	r1, r0
 800cc68:	1858      	adds	r0, r3, r1
 800cc6a:	4282      	cmp	r2, r0
 800cc6c:	6019      	str	r1, [r3, #0]
 800cc6e:	d1dd      	bne.n	800cc2c <_free_r+0x24>
 800cc70:	6810      	ldr	r0, [r2, #0]
 800cc72:	6852      	ldr	r2, [r2, #4]
 800cc74:	605a      	str	r2, [r3, #4]
 800cc76:	4401      	add	r1, r0
 800cc78:	6019      	str	r1, [r3, #0]
 800cc7a:	e7d7      	b.n	800cc2c <_free_r+0x24>
 800cc7c:	d902      	bls.n	800cc84 <_free_r+0x7c>
 800cc7e:	230c      	movs	r3, #12
 800cc80:	602b      	str	r3, [r5, #0]
 800cc82:	e7d3      	b.n	800cc2c <_free_r+0x24>
 800cc84:	6820      	ldr	r0, [r4, #0]
 800cc86:	1821      	adds	r1, r4, r0
 800cc88:	428a      	cmp	r2, r1
 800cc8a:	bf04      	itt	eq
 800cc8c:	6811      	ldreq	r1, [r2, #0]
 800cc8e:	6852      	ldreq	r2, [r2, #4]
 800cc90:	6062      	str	r2, [r4, #4]
 800cc92:	bf04      	itt	eq
 800cc94:	1809      	addeq	r1, r1, r0
 800cc96:	6021      	streq	r1, [r4, #0]
 800cc98:	605c      	str	r4, [r3, #4]
 800cc9a:	e7c7      	b.n	800cc2c <_free_r+0x24>
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	bf00      	nop
 800cca0:	20000198 	.word	0x20000198

0800cca4 <_malloc_r>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	1ccd      	adds	r5, r1, #3
 800cca8:	f025 0503 	bic.w	r5, r5, #3
 800ccac:	3508      	adds	r5, #8
 800ccae:	2d0c      	cmp	r5, #12
 800ccb0:	bf38      	it	cc
 800ccb2:	250c      	movcc	r5, #12
 800ccb4:	2d00      	cmp	r5, #0
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	db01      	blt.n	800ccbe <_malloc_r+0x1a>
 800ccba:	42a9      	cmp	r1, r5
 800ccbc:	d903      	bls.n	800ccc6 <_malloc_r+0x22>
 800ccbe:	230c      	movs	r3, #12
 800ccc0:	6033      	str	r3, [r6, #0]
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	bd70      	pop	{r4, r5, r6, pc}
 800ccc6:	f000 fbb9 	bl	800d43c <__malloc_lock>
 800ccca:	4a21      	ldr	r2, [pc, #132]	; (800cd50 <_malloc_r+0xac>)
 800cccc:	6814      	ldr	r4, [r2, #0]
 800ccce:	4621      	mov	r1, r4
 800ccd0:	b991      	cbnz	r1, 800ccf8 <_malloc_r+0x54>
 800ccd2:	4c20      	ldr	r4, [pc, #128]	; (800cd54 <_malloc_r+0xb0>)
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	b91b      	cbnz	r3, 800cce0 <_malloc_r+0x3c>
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f000 fb05 	bl	800d2e8 <_sbrk_r>
 800ccde:	6020      	str	r0, [r4, #0]
 800cce0:	4629      	mov	r1, r5
 800cce2:	4630      	mov	r0, r6
 800cce4:	f000 fb00 	bl	800d2e8 <_sbrk_r>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d124      	bne.n	800cd36 <_malloc_r+0x92>
 800ccec:	230c      	movs	r3, #12
 800ccee:	6033      	str	r3, [r6, #0]
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f000 fba4 	bl	800d43e <__malloc_unlock>
 800ccf6:	e7e4      	b.n	800ccc2 <_malloc_r+0x1e>
 800ccf8:	680b      	ldr	r3, [r1, #0]
 800ccfa:	1b5b      	subs	r3, r3, r5
 800ccfc:	d418      	bmi.n	800cd30 <_malloc_r+0x8c>
 800ccfe:	2b0b      	cmp	r3, #11
 800cd00:	d90f      	bls.n	800cd22 <_malloc_r+0x7e>
 800cd02:	600b      	str	r3, [r1, #0]
 800cd04:	50cd      	str	r5, [r1, r3]
 800cd06:	18cc      	adds	r4, r1, r3
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f000 fb98 	bl	800d43e <__malloc_unlock>
 800cd0e:	f104 000b 	add.w	r0, r4, #11
 800cd12:	1d23      	adds	r3, r4, #4
 800cd14:	f020 0007 	bic.w	r0, r0, #7
 800cd18:	1ac3      	subs	r3, r0, r3
 800cd1a:	d0d3      	beq.n	800ccc4 <_malloc_r+0x20>
 800cd1c:	425a      	negs	r2, r3
 800cd1e:	50e2      	str	r2, [r4, r3]
 800cd20:	e7d0      	b.n	800ccc4 <_malloc_r+0x20>
 800cd22:	428c      	cmp	r4, r1
 800cd24:	684b      	ldr	r3, [r1, #4]
 800cd26:	bf16      	itet	ne
 800cd28:	6063      	strne	r3, [r4, #4]
 800cd2a:	6013      	streq	r3, [r2, #0]
 800cd2c:	460c      	movne	r4, r1
 800cd2e:	e7eb      	b.n	800cd08 <_malloc_r+0x64>
 800cd30:	460c      	mov	r4, r1
 800cd32:	6849      	ldr	r1, [r1, #4]
 800cd34:	e7cc      	b.n	800ccd0 <_malloc_r+0x2c>
 800cd36:	1cc4      	adds	r4, r0, #3
 800cd38:	f024 0403 	bic.w	r4, r4, #3
 800cd3c:	42a0      	cmp	r0, r4
 800cd3e:	d005      	beq.n	800cd4c <_malloc_r+0xa8>
 800cd40:	1a21      	subs	r1, r4, r0
 800cd42:	4630      	mov	r0, r6
 800cd44:	f000 fad0 	bl	800d2e8 <_sbrk_r>
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d0cf      	beq.n	800ccec <_malloc_r+0x48>
 800cd4c:	6025      	str	r5, [r4, #0]
 800cd4e:	e7db      	b.n	800cd08 <_malloc_r+0x64>
 800cd50:	20000198 	.word	0x20000198
 800cd54:	2000019c 	.word	0x2000019c

0800cd58 <__sfputc_r>:
 800cd58:	6893      	ldr	r3, [r2, #8]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	b410      	push	{r4}
 800cd60:	6093      	str	r3, [r2, #8]
 800cd62:	da08      	bge.n	800cd76 <__sfputc_r+0x1e>
 800cd64:	6994      	ldr	r4, [r2, #24]
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	db01      	blt.n	800cd6e <__sfputc_r+0x16>
 800cd6a:	290a      	cmp	r1, #10
 800cd6c:	d103      	bne.n	800cd76 <__sfputc_r+0x1e>
 800cd6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd72:	f7ff bca3 	b.w	800c6bc <__swbuf_r>
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	1c58      	adds	r0, r3, #1
 800cd7a:	6010      	str	r0, [r2, #0]
 800cd7c:	7019      	strb	r1, [r3, #0]
 800cd7e:	4608      	mov	r0, r1
 800cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <__sfputs_r>:
 800cd86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd88:	4606      	mov	r6, r0
 800cd8a:	460f      	mov	r7, r1
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	18d5      	adds	r5, r2, r3
 800cd90:	42ac      	cmp	r4, r5
 800cd92:	d101      	bne.n	800cd98 <__sfputs_r+0x12>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e007      	b.n	800cda8 <__sfputs_r+0x22>
 800cd98:	463a      	mov	r2, r7
 800cd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f7ff ffda 	bl	800cd58 <__sfputc_r>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d1f3      	bne.n	800cd90 <__sfputs_r+0xa>
 800cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdac <_vfiprintf_r>:
 800cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb0:	460c      	mov	r4, r1
 800cdb2:	b09d      	sub	sp, #116	; 0x74
 800cdb4:	4617      	mov	r7, r2
 800cdb6:	461d      	mov	r5, r3
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b118      	cbz	r0, 800cdc4 <_vfiprintf_r+0x18>
 800cdbc:	6983      	ldr	r3, [r0, #24]
 800cdbe:	b90b      	cbnz	r3, 800cdc4 <_vfiprintf_r+0x18>
 800cdc0:	f7ff fe2c 	bl	800ca1c <__sinit>
 800cdc4:	4b7c      	ldr	r3, [pc, #496]	; (800cfb8 <_vfiprintf_r+0x20c>)
 800cdc6:	429c      	cmp	r4, r3
 800cdc8:	d158      	bne.n	800ce7c <_vfiprintf_r+0xd0>
 800cdca:	6874      	ldr	r4, [r6, #4]
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	0718      	lsls	r0, r3, #28
 800cdd0:	d55e      	bpl.n	800ce90 <_vfiprintf_r+0xe4>
 800cdd2:	6923      	ldr	r3, [r4, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d05b      	beq.n	800ce90 <_vfiprintf_r+0xe4>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9309      	str	r3, [sp, #36]	; 0x24
 800cddc:	2320      	movs	r3, #32
 800cdde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cde2:	2330      	movs	r3, #48	; 0x30
 800cde4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cde8:	9503      	str	r5, [sp, #12]
 800cdea:	f04f 0b01 	mov.w	fp, #1
 800cdee:	46b8      	mov	r8, r7
 800cdf0:	4645      	mov	r5, r8
 800cdf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cdf6:	b10b      	cbz	r3, 800cdfc <_vfiprintf_r+0x50>
 800cdf8:	2b25      	cmp	r3, #37	; 0x25
 800cdfa:	d154      	bne.n	800cea6 <_vfiprintf_r+0xfa>
 800cdfc:	ebb8 0a07 	subs.w	sl, r8, r7
 800ce00:	d00b      	beq.n	800ce1a <_vfiprintf_r+0x6e>
 800ce02:	4653      	mov	r3, sl
 800ce04:	463a      	mov	r2, r7
 800ce06:	4621      	mov	r1, r4
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f7ff ffbc 	bl	800cd86 <__sfputs_r>
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f000 80c2 	beq.w	800cf98 <_vfiprintf_r+0x1ec>
 800ce14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce16:	4453      	add	r3, sl
 800ce18:	9309      	str	r3, [sp, #36]	; 0x24
 800ce1a:	f898 3000 	ldrb.w	r3, [r8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f000 80ba 	beq.w	800cf98 <_vfiprintf_r+0x1ec>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce2e:	9304      	str	r3, [sp, #16]
 800ce30:	9307      	str	r3, [sp, #28]
 800ce32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce36:	931a      	str	r3, [sp, #104]	; 0x68
 800ce38:	46a8      	mov	r8, r5
 800ce3a:	2205      	movs	r2, #5
 800ce3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ce40:	485e      	ldr	r0, [pc, #376]	; (800cfbc <_vfiprintf_r+0x210>)
 800ce42:	f7f3 f9c5 	bl	80001d0 <memchr>
 800ce46:	9b04      	ldr	r3, [sp, #16]
 800ce48:	bb78      	cbnz	r0, 800ceaa <_vfiprintf_r+0xfe>
 800ce4a:	06d9      	lsls	r1, r3, #27
 800ce4c:	bf44      	itt	mi
 800ce4e:	2220      	movmi	r2, #32
 800ce50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce54:	071a      	lsls	r2, r3, #28
 800ce56:	bf44      	itt	mi
 800ce58:	222b      	movmi	r2, #43	; 0x2b
 800ce5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce5e:	782a      	ldrb	r2, [r5, #0]
 800ce60:	2a2a      	cmp	r2, #42	; 0x2a
 800ce62:	d02a      	beq.n	800ceba <_vfiprintf_r+0x10e>
 800ce64:	9a07      	ldr	r2, [sp, #28]
 800ce66:	46a8      	mov	r8, r5
 800ce68:	2000      	movs	r0, #0
 800ce6a:	250a      	movs	r5, #10
 800ce6c:	4641      	mov	r1, r8
 800ce6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce72:	3b30      	subs	r3, #48	; 0x30
 800ce74:	2b09      	cmp	r3, #9
 800ce76:	d969      	bls.n	800cf4c <_vfiprintf_r+0x1a0>
 800ce78:	b360      	cbz	r0, 800ced4 <_vfiprintf_r+0x128>
 800ce7a:	e024      	b.n	800cec6 <_vfiprintf_r+0x11a>
 800ce7c:	4b50      	ldr	r3, [pc, #320]	; (800cfc0 <_vfiprintf_r+0x214>)
 800ce7e:	429c      	cmp	r4, r3
 800ce80:	d101      	bne.n	800ce86 <_vfiprintf_r+0xda>
 800ce82:	68b4      	ldr	r4, [r6, #8]
 800ce84:	e7a2      	b.n	800cdcc <_vfiprintf_r+0x20>
 800ce86:	4b4f      	ldr	r3, [pc, #316]	; (800cfc4 <_vfiprintf_r+0x218>)
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	bf08      	it	eq
 800ce8c:	68f4      	ldreq	r4, [r6, #12]
 800ce8e:	e79d      	b.n	800cdcc <_vfiprintf_r+0x20>
 800ce90:	4621      	mov	r1, r4
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7ff fc64 	bl	800c760 <__swsetup_r>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d09d      	beq.n	800cdd8 <_vfiprintf_r+0x2c>
 800ce9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cea0:	b01d      	add	sp, #116	; 0x74
 800cea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea6:	46a8      	mov	r8, r5
 800cea8:	e7a2      	b.n	800cdf0 <_vfiprintf_r+0x44>
 800ceaa:	4a44      	ldr	r2, [pc, #272]	; (800cfbc <_vfiprintf_r+0x210>)
 800ceac:	1a80      	subs	r0, r0, r2
 800ceae:	fa0b f000 	lsl.w	r0, fp, r0
 800ceb2:	4318      	orrs	r0, r3
 800ceb4:	9004      	str	r0, [sp, #16]
 800ceb6:	4645      	mov	r5, r8
 800ceb8:	e7be      	b.n	800ce38 <_vfiprintf_r+0x8c>
 800ceba:	9a03      	ldr	r2, [sp, #12]
 800cebc:	1d11      	adds	r1, r2, #4
 800cebe:	6812      	ldr	r2, [r2, #0]
 800cec0:	9103      	str	r1, [sp, #12]
 800cec2:	2a00      	cmp	r2, #0
 800cec4:	db01      	blt.n	800ceca <_vfiprintf_r+0x11e>
 800cec6:	9207      	str	r2, [sp, #28]
 800cec8:	e004      	b.n	800ced4 <_vfiprintf_r+0x128>
 800ceca:	4252      	negs	r2, r2
 800cecc:	f043 0302 	orr.w	r3, r3, #2
 800ced0:	9207      	str	r2, [sp, #28]
 800ced2:	9304      	str	r3, [sp, #16]
 800ced4:	f898 3000 	ldrb.w	r3, [r8]
 800ced8:	2b2e      	cmp	r3, #46	; 0x2e
 800ceda:	d10e      	bne.n	800cefa <_vfiprintf_r+0x14e>
 800cedc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cee0:	2b2a      	cmp	r3, #42	; 0x2a
 800cee2:	d138      	bne.n	800cf56 <_vfiprintf_r+0x1aa>
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	1d1a      	adds	r2, r3, #4
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	9203      	str	r2, [sp, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bfb8      	it	lt
 800cef0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cef4:	f108 0802 	add.w	r8, r8, #2
 800cef8:	9305      	str	r3, [sp, #20]
 800cefa:	4d33      	ldr	r5, [pc, #204]	; (800cfc8 <_vfiprintf_r+0x21c>)
 800cefc:	f898 1000 	ldrb.w	r1, [r8]
 800cf00:	2203      	movs	r2, #3
 800cf02:	4628      	mov	r0, r5
 800cf04:	f7f3 f964 	bl	80001d0 <memchr>
 800cf08:	b140      	cbz	r0, 800cf1c <_vfiprintf_r+0x170>
 800cf0a:	2340      	movs	r3, #64	; 0x40
 800cf0c:	1b40      	subs	r0, r0, r5
 800cf0e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf12:	9b04      	ldr	r3, [sp, #16]
 800cf14:	4303      	orrs	r3, r0
 800cf16:	f108 0801 	add.w	r8, r8, #1
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	f898 1000 	ldrb.w	r1, [r8]
 800cf20:	482a      	ldr	r0, [pc, #168]	; (800cfcc <_vfiprintf_r+0x220>)
 800cf22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf26:	2206      	movs	r2, #6
 800cf28:	f108 0701 	add.w	r7, r8, #1
 800cf2c:	f7f3 f950 	bl	80001d0 <memchr>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d037      	beq.n	800cfa4 <_vfiprintf_r+0x1f8>
 800cf34:	4b26      	ldr	r3, [pc, #152]	; (800cfd0 <_vfiprintf_r+0x224>)
 800cf36:	bb1b      	cbnz	r3, 800cf80 <_vfiprintf_r+0x1d4>
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	3307      	adds	r3, #7
 800cf3c:	f023 0307 	bic.w	r3, r3, #7
 800cf40:	3308      	adds	r3, #8
 800cf42:	9303      	str	r3, [sp, #12]
 800cf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf46:	444b      	add	r3, r9
 800cf48:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4a:	e750      	b.n	800cdee <_vfiprintf_r+0x42>
 800cf4c:	fb05 3202 	mla	r2, r5, r2, r3
 800cf50:	2001      	movs	r0, #1
 800cf52:	4688      	mov	r8, r1
 800cf54:	e78a      	b.n	800ce6c <_vfiprintf_r+0xc0>
 800cf56:	2300      	movs	r3, #0
 800cf58:	f108 0801 	add.w	r8, r8, #1
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	250a      	movs	r5, #10
 800cf62:	4640      	mov	r0, r8
 800cf64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf68:	3a30      	subs	r2, #48	; 0x30
 800cf6a:	2a09      	cmp	r2, #9
 800cf6c:	d903      	bls.n	800cf76 <_vfiprintf_r+0x1ca>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d0c3      	beq.n	800cefa <_vfiprintf_r+0x14e>
 800cf72:	9105      	str	r1, [sp, #20]
 800cf74:	e7c1      	b.n	800cefa <_vfiprintf_r+0x14e>
 800cf76:	fb05 2101 	mla	r1, r5, r1, r2
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4680      	mov	r8, r0
 800cf7e:	e7f0      	b.n	800cf62 <_vfiprintf_r+0x1b6>
 800cf80:	ab03      	add	r3, sp, #12
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	4622      	mov	r2, r4
 800cf86:	4b13      	ldr	r3, [pc, #76]	; (800cfd4 <_vfiprintf_r+0x228>)
 800cf88:	a904      	add	r1, sp, #16
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f3af 8000 	nop.w
 800cf90:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf94:	4681      	mov	r9, r0
 800cf96:	d1d5      	bne.n	800cf44 <_vfiprintf_r+0x198>
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	065b      	lsls	r3, r3, #25
 800cf9c:	f53f af7e 	bmi.w	800ce9c <_vfiprintf_r+0xf0>
 800cfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfa2:	e77d      	b.n	800cea0 <_vfiprintf_r+0xf4>
 800cfa4:	ab03      	add	r3, sp, #12
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4b0a      	ldr	r3, [pc, #40]	; (800cfd4 <_vfiprintf_r+0x228>)
 800cfac:	a904      	add	r1, sp, #16
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f000 f888 	bl	800d0c4 <_printf_i>
 800cfb4:	e7ec      	b.n	800cf90 <_vfiprintf_r+0x1e4>
 800cfb6:	bf00      	nop
 800cfb8:	0800da80 	.word	0x0800da80
 800cfbc:	0800dac0 	.word	0x0800dac0
 800cfc0:	0800daa0 	.word	0x0800daa0
 800cfc4:	0800da60 	.word	0x0800da60
 800cfc8:	0800dac6 	.word	0x0800dac6
 800cfcc:	0800daca 	.word	0x0800daca
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	0800cd87 	.word	0x0800cd87

0800cfd8 <_printf_common>:
 800cfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfdc:	4691      	mov	r9, r2
 800cfde:	461f      	mov	r7, r3
 800cfe0:	688a      	ldr	r2, [r1, #8]
 800cfe2:	690b      	ldr	r3, [r1, #16]
 800cfe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	bfb8      	it	lt
 800cfec:	4613      	movlt	r3, r2
 800cfee:	f8c9 3000 	str.w	r3, [r9]
 800cff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cff6:	4606      	mov	r6, r0
 800cff8:	460c      	mov	r4, r1
 800cffa:	b112      	cbz	r2, 800d002 <_printf_common+0x2a>
 800cffc:	3301      	adds	r3, #1
 800cffe:	f8c9 3000 	str.w	r3, [r9]
 800d002:	6823      	ldr	r3, [r4, #0]
 800d004:	0699      	lsls	r1, r3, #26
 800d006:	bf42      	ittt	mi
 800d008:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d00c:	3302      	addmi	r3, #2
 800d00e:	f8c9 3000 	strmi.w	r3, [r9]
 800d012:	6825      	ldr	r5, [r4, #0]
 800d014:	f015 0506 	ands.w	r5, r5, #6
 800d018:	d107      	bne.n	800d02a <_printf_common+0x52>
 800d01a:	f104 0a19 	add.w	sl, r4, #25
 800d01e:	68e3      	ldr	r3, [r4, #12]
 800d020:	f8d9 2000 	ldr.w	r2, [r9]
 800d024:	1a9b      	subs	r3, r3, r2
 800d026:	42ab      	cmp	r3, r5
 800d028:	dc28      	bgt.n	800d07c <_printf_common+0xa4>
 800d02a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d02e:	6822      	ldr	r2, [r4, #0]
 800d030:	3300      	adds	r3, #0
 800d032:	bf18      	it	ne
 800d034:	2301      	movne	r3, #1
 800d036:	0692      	lsls	r2, r2, #26
 800d038:	d42d      	bmi.n	800d096 <_printf_common+0xbe>
 800d03a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d03e:	4639      	mov	r1, r7
 800d040:	4630      	mov	r0, r6
 800d042:	47c0      	blx	r8
 800d044:	3001      	adds	r0, #1
 800d046:	d020      	beq.n	800d08a <_printf_common+0xb2>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	68e5      	ldr	r5, [r4, #12]
 800d04c:	f8d9 2000 	ldr.w	r2, [r9]
 800d050:	f003 0306 	and.w	r3, r3, #6
 800d054:	2b04      	cmp	r3, #4
 800d056:	bf08      	it	eq
 800d058:	1aad      	subeq	r5, r5, r2
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	6922      	ldr	r2, [r4, #16]
 800d05e:	bf0c      	ite	eq
 800d060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d064:	2500      	movne	r5, #0
 800d066:	4293      	cmp	r3, r2
 800d068:	bfc4      	itt	gt
 800d06a:	1a9b      	subgt	r3, r3, r2
 800d06c:	18ed      	addgt	r5, r5, r3
 800d06e:	f04f 0900 	mov.w	r9, #0
 800d072:	341a      	adds	r4, #26
 800d074:	454d      	cmp	r5, r9
 800d076:	d11a      	bne.n	800d0ae <_printf_common+0xd6>
 800d078:	2000      	movs	r0, #0
 800d07a:	e008      	b.n	800d08e <_printf_common+0xb6>
 800d07c:	2301      	movs	r3, #1
 800d07e:	4652      	mov	r2, sl
 800d080:	4639      	mov	r1, r7
 800d082:	4630      	mov	r0, r6
 800d084:	47c0      	blx	r8
 800d086:	3001      	adds	r0, #1
 800d088:	d103      	bne.n	800d092 <_printf_common+0xba>
 800d08a:	f04f 30ff 	mov.w	r0, #4294967295
 800d08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d092:	3501      	adds	r5, #1
 800d094:	e7c3      	b.n	800d01e <_printf_common+0x46>
 800d096:	18e1      	adds	r1, r4, r3
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	2030      	movs	r0, #48	; 0x30
 800d09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0a0:	4422      	add	r2, r4
 800d0a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0aa:	3302      	adds	r3, #2
 800d0ac:	e7c5      	b.n	800d03a <_printf_common+0x62>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	47c0      	blx	r8
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d0e6      	beq.n	800d08a <_printf_common+0xb2>
 800d0bc:	f109 0901 	add.w	r9, r9, #1
 800d0c0:	e7d8      	b.n	800d074 <_printf_common+0x9c>
	...

0800d0c4 <_printf_i>:
 800d0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	7e09      	ldrb	r1, [r1, #24]
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	296e      	cmp	r1, #110	; 0x6e
 800d0d4:	4617      	mov	r7, r2
 800d0d6:	4606      	mov	r6, r0
 800d0d8:	4698      	mov	r8, r3
 800d0da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0dc:	f000 80b3 	beq.w	800d246 <_printf_i+0x182>
 800d0e0:	d822      	bhi.n	800d128 <_printf_i+0x64>
 800d0e2:	2963      	cmp	r1, #99	; 0x63
 800d0e4:	d036      	beq.n	800d154 <_printf_i+0x90>
 800d0e6:	d80a      	bhi.n	800d0fe <_printf_i+0x3a>
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	f000 80b9 	beq.w	800d260 <_printf_i+0x19c>
 800d0ee:	2958      	cmp	r1, #88	; 0x58
 800d0f0:	f000 8083 	beq.w	800d1fa <_printf_i+0x136>
 800d0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d0fc:	e032      	b.n	800d164 <_printf_i+0xa0>
 800d0fe:	2964      	cmp	r1, #100	; 0x64
 800d100:	d001      	beq.n	800d106 <_printf_i+0x42>
 800d102:	2969      	cmp	r1, #105	; 0x69
 800d104:	d1f6      	bne.n	800d0f4 <_printf_i+0x30>
 800d106:	6820      	ldr	r0, [r4, #0]
 800d108:	6813      	ldr	r3, [r2, #0]
 800d10a:	0605      	lsls	r5, r0, #24
 800d10c:	f103 0104 	add.w	r1, r3, #4
 800d110:	d52a      	bpl.n	800d168 <_printf_i+0xa4>
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6011      	str	r1, [r2, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	da03      	bge.n	800d122 <_printf_i+0x5e>
 800d11a:	222d      	movs	r2, #45	; 0x2d
 800d11c:	425b      	negs	r3, r3
 800d11e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d122:	486f      	ldr	r0, [pc, #444]	; (800d2e0 <_printf_i+0x21c>)
 800d124:	220a      	movs	r2, #10
 800d126:	e039      	b.n	800d19c <_printf_i+0xd8>
 800d128:	2973      	cmp	r1, #115	; 0x73
 800d12a:	f000 809d 	beq.w	800d268 <_printf_i+0x1a4>
 800d12e:	d808      	bhi.n	800d142 <_printf_i+0x7e>
 800d130:	296f      	cmp	r1, #111	; 0x6f
 800d132:	d020      	beq.n	800d176 <_printf_i+0xb2>
 800d134:	2970      	cmp	r1, #112	; 0x70
 800d136:	d1dd      	bne.n	800d0f4 <_printf_i+0x30>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	f043 0320 	orr.w	r3, r3, #32
 800d13e:	6023      	str	r3, [r4, #0]
 800d140:	e003      	b.n	800d14a <_printf_i+0x86>
 800d142:	2975      	cmp	r1, #117	; 0x75
 800d144:	d017      	beq.n	800d176 <_printf_i+0xb2>
 800d146:	2978      	cmp	r1, #120	; 0x78
 800d148:	d1d4      	bne.n	800d0f4 <_printf_i+0x30>
 800d14a:	2378      	movs	r3, #120	; 0x78
 800d14c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d150:	4864      	ldr	r0, [pc, #400]	; (800d2e4 <_printf_i+0x220>)
 800d152:	e055      	b.n	800d200 <_printf_i+0x13c>
 800d154:	6813      	ldr	r3, [r2, #0]
 800d156:	1d19      	adds	r1, r3, #4
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6011      	str	r1, [r2, #0]
 800d15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d164:	2301      	movs	r3, #1
 800d166:	e08c      	b.n	800d282 <_printf_i+0x1be>
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6011      	str	r1, [r2, #0]
 800d16c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d170:	bf18      	it	ne
 800d172:	b21b      	sxthne	r3, r3
 800d174:	e7cf      	b.n	800d116 <_printf_i+0x52>
 800d176:	6813      	ldr	r3, [r2, #0]
 800d178:	6825      	ldr	r5, [r4, #0]
 800d17a:	1d18      	adds	r0, r3, #4
 800d17c:	6010      	str	r0, [r2, #0]
 800d17e:	0628      	lsls	r0, r5, #24
 800d180:	d501      	bpl.n	800d186 <_printf_i+0xc2>
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	e002      	b.n	800d18c <_printf_i+0xc8>
 800d186:	0668      	lsls	r0, r5, #25
 800d188:	d5fb      	bpl.n	800d182 <_printf_i+0xbe>
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	4854      	ldr	r0, [pc, #336]	; (800d2e0 <_printf_i+0x21c>)
 800d18e:	296f      	cmp	r1, #111	; 0x6f
 800d190:	bf14      	ite	ne
 800d192:	220a      	movne	r2, #10
 800d194:	2208      	moveq	r2, #8
 800d196:	2100      	movs	r1, #0
 800d198:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d19c:	6865      	ldr	r5, [r4, #4]
 800d19e:	60a5      	str	r5, [r4, #8]
 800d1a0:	2d00      	cmp	r5, #0
 800d1a2:	f2c0 8095 	blt.w	800d2d0 <_printf_i+0x20c>
 800d1a6:	6821      	ldr	r1, [r4, #0]
 800d1a8:	f021 0104 	bic.w	r1, r1, #4
 800d1ac:	6021      	str	r1, [r4, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d13d      	bne.n	800d22e <_printf_i+0x16a>
 800d1b2:	2d00      	cmp	r5, #0
 800d1b4:	f040 808e 	bne.w	800d2d4 <_printf_i+0x210>
 800d1b8:	4665      	mov	r5, ip
 800d1ba:	2a08      	cmp	r2, #8
 800d1bc:	d10b      	bne.n	800d1d6 <_printf_i+0x112>
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	07db      	lsls	r3, r3, #31
 800d1c2:	d508      	bpl.n	800d1d6 <_printf_i+0x112>
 800d1c4:	6923      	ldr	r3, [r4, #16]
 800d1c6:	6862      	ldr	r2, [r4, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	bfde      	ittt	le
 800d1cc:	2330      	movle	r3, #48	; 0x30
 800d1ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1d6:	ebac 0305 	sub.w	r3, ip, r5
 800d1da:	6123      	str	r3, [r4, #16]
 800d1dc:	f8cd 8000 	str.w	r8, [sp]
 800d1e0:	463b      	mov	r3, r7
 800d1e2:	aa03      	add	r2, sp, #12
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7ff fef6 	bl	800cfd8 <_printf_common>
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	d14d      	bne.n	800d28c <_printf_i+0x1c8>
 800d1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f4:	b005      	add	sp, #20
 800d1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1fa:	4839      	ldr	r0, [pc, #228]	; (800d2e0 <_printf_i+0x21c>)
 800d1fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d200:	6813      	ldr	r3, [r2, #0]
 800d202:	6821      	ldr	r1, [r4, #0]
 800d204:	1d1d      	adds	r5, r3, #4
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6015      	str	r5, [r2, #0]
 800d20a:	060a      	lsls	r2, r1, #24
 800d20c:	d50b      	bpl.n	800d226 <_printf_i+0x162>
 800d20e:	07ca      	lsls	r2, r1, #31
 800d210:	bf44      	itt	mi
 800d212:	f041 0120 	orrmi.w	r1, r1, #32
 800d216:	6021      	strmi	r1, [r4, #0]
 800d218:	b91b      	cbnz	r3, 800d222 <_printf_i+0x15e>
 800d21a:	6822      	ldr	r2, [r4, #0]
 800d21c:	f022 0220 	bic.w	r2, r2, #32
 800d220:	6022      	str	r2, [r4, #0]
 800d222:	2210      	movs	r2, #16
 800d224:	e7b7      	b.n	800d196 <_printf_i+0xd2>
 800d226:	064d      	lsls	r5, r1, #25
 800d228:	bf48      	it	mi
 800d22a:	b29b      	uxthmi	r3, r3
 800d22c:	e7ef      	b.n	800d20e <_printf_i+0x14a>
 800d22e:	4665      	mov	r5, ip
 800d230:	fbb3 f1f2 	udiv	r1, r3, r2
 800d234:	fb02 3311 	mls	r3, r2, r1, r3
 800d238:	5cc3      	ldrb	r3, [r0, r3]
 800d23a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d23e:	460b      	mov	r3, r1
 800d240:	2900      	cmp	r1, #0
 800d242:	d1f5      	bne.n	800d230 <_printf_i+0x16c>
 800d244:	e7b9      	b.n	800d1ba <_printf_i+0xf6>
 800d246:	6813      	ldr	r3, [r2, #0]
 800d248:	6825      	ldr	r5, [r4, #0]
 800d24a:	6961      	ldr	r1, [r4, #20]
 800d24c:	1d18      	adds	r0, r3, #4
 800d24e:	6010      	str	r0, [r2, #0]
 800d250:	0628      	lsls	r0, r5, #24
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	d501      	bpl.n	800d25a <_printf_i+0x196>
 800d256:	6019      	str	r1, [r3, #0]
 800d258:	e002      	b.n	800d260 <_printf_i+0x19c>
 800d25a:	066a      	lsls	r2, r5, #25
 800d25c:	d5fb      	bpl.n	800d256 <_printf_i+0x192>
 800d25e:	8019      	strh	r1, [r3, #0]
 800d260:	2300      	movs	r3, #0
 800d262:	6123      	str	r3, [r4, #16]
 800d264:	4665      	mov	r5, ip
 800d266:	e7b9      	b.n	800d1dc <_printf_i+0x118>
 800d268:	6813      	ldr	r3, [r2, #0]
 800d26a:	1d19      	adds	r1, r3, #4
 800d26c:	6011      	str	r1, [r2, #0]
 800d26e:	681d      	ldr	r5, [r3, #0]
 800d270:	6862      	ldr	r2, [r4, #4]
 800d272:	2100      	movs	r1, #0
 800d274:	4628      	mov	r0, r5
 800d276:	f7f2 ffab 	bl	80001d0 <memchr>
 800d27a:	b108      	cbz	r0, 800d280 <_printf_i+0x1bc>
 800d27c:	1b40      	subs	r0, r0, r5
 800d27e:	6060      	str	r0, [r4, #4]
 800d280:	6863      	ldr	r3, [r4, #4]
 800d282:	6123      	str	r3, [r4, #16]
 800d284:	2300      	movs	r3, #0
 800d286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d28a:	e7a7      	b.n	800d1dc <_printf_i+0x118>
 800d28c:	6923      	ldr	r3, [r4, #16]
 800d28e:	462a      	mov	r2, r5
 800d290:	4639      	mov	r1, r7
 800d292:	4630      	mov	r0, r6
 800d294:	47c0      	blx	r8
 800d296:	3001      	adds	r0, #1
 800d298:	d0aa      	beq.n	800d1f0 <_printf_i+0x12c>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	079b      	lsls	r3, r3, #30
 800d29e:	d413      	bmi.n	800d2c8 <_printf_i+0x204>
 800d2a0:	68e0      	ldr	r0, [r4, #12]
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	4298      	cmp	r0, r3
 800d2a6:	bfb8      	it	lt
 800d2a8:	4618      	movlt	r0, r3
 800d2aa:	e7a3      	b.n	800d1f4 <_printf_i+0x130>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	464a      	mov	r2, r9
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	47c0      	blx	r8
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	d09a      	beq.n	800d1f0 <_printf_i+0x12c>
 800d2ba:	3501      	adds	r5, #1
 800d2bc:	68e3      	ldr	r3, [r4, #12]
 800d2be:	9a03      	ldr	r2, [sp, #12]
 800d2c0:	1a9b      	subs	r3, r3, r2
 800d2c2:	42ab      	cmp	r3, r5
 800d2c4:	dcf2      	bgt.n	800d2ac <_printf_i+0x1e8>
 800d2c6:	e7eb      	b.n	800d2a0 <_printf_i+0x1dc>
 800d2c8:	2500      	movs	r5, #0
 800d2ca:	f104 0919 	add.w	r9, r4, #25
 800d2ce:	e7f5      	b.n	800d2bc <_printf_i+0x1f8>
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1ac      	bne.n	800d22e <_printf_i+0x16a>
 800d2d4:	7803      	ldrb	r3, [r0, #0]
 800d2d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2de:	e76c      	b.n	800d1ba <_printf_i+0xf6>
 800d2e0:	0800dad1 	.word	0x0800dad1
 800d2e4:	0800dae2 	.word	0x0800dae2

0800d2e8 <_sbrk_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4c06      	ldr	r4, [pc, #24]	; (800d304 <_sbrk_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	f7fe fff2 	bl	800c2dc <_sbrk>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_sbrk_r+0x1a>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_sbrk_r+0x1a>
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	20000f14 	.word	0x20000f14

0800d308 <__sread>:
 800d308:	b510      	push	{r4, lr}
 800d30a:	460c      	mov	r4, r1
 800d30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d310:	f000 f896 	bl	800d440 <_read_r>
 800d314:	2800      	cmp	r0, #0
 800d316:	bfab      	itete	ge
 800d318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d31a:	89a3      	ldrhlt	r3, [r4, #12]
 800d31c:	181b      	addge	r3, r3, r0
 800d31e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d322:	bfac      	ite	ge
 800d324:	6563      	strge	r3, [r4, #84]	; 0x54
 800d326:	81a3      	strhlt	r3, [r4, #12]
 800d328:	bd10      	pop	{r4, pc}

0800d32a <__swrite>:
 800d32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d32e:	461f      	mov	r7, r3
 800d330:	898b      	ldrh	r3, [r1, #12]
 800d332:	05db      	lsls	r3, r3, #23
 800d334:	4605      	mov	r5, r0
 800d336:	460c      	mov	r4, r1
 800d338:	4616      	mov	r6, r2
 800d33a:	d505      	bpl.n	800d348 <__swrite+0x1e>
 800d33c:	2302      	movs	r3, #2
 800d33e:	2200      	movs	r2, #0
 800d340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d344:	f000 f868 	bl	800d418 <_lseek_r>
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d352:	81a3      	strh	r3, [r4, #12]
 800d354:	4632      	mov	r2, r6
 800d356:	463b      	mov	r3, r7
 800d358:	4628      	mov	r0, r5
 800d35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	f000 b817 	b.w	800d390 <_write_r>

0800d362 <__sseek>:
 800d362:	b510      	push	{r4, lr}
 800d364:	460c      	mov	r4, r1
 800d366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36a:	f000 f855 	bl	800d418 <_lseek_r>
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	bf15      	itete	ne
 800d374:	6560      	strne	r0, [r4, #84]	; 0x54
 800d376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d37a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d37e:	81a3      	strheq	r3, [r4, #12]
 800d380:	bf18      	it	ne
 800d382:	81a3      	strhne	r3, [r4, #12]
 800d384:	bd10      	pop	{r4, pc}

0800d386 <__sclose>:
 800d386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d38a:	f000 b813 	b.w	800d3b4 <_close_r>
	...

0800d390 <_write_r>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4c07      	ldr	r4, [pc, #28]	; (800d3b0 <_write_r+0x20>)
 800d394:	4605      	mov	r5, r0
 800d396:	4608      	mov	r0, r1
 800d398:	4611      	mov	r1, r2
 800d39a:	2200      	movs	r2, #0
 800d39c:	6022      	str	r2, [r4, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f7fe ff4b 	bl	800c23a <_write>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d102      	bne.n	800d3ae <_write_r+0x1e>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	b103      	cbz	r3, 800d3ae <_write_r+0x1e>
 800d3ac:	602b      	str	r3, [r5, #0]
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	20000f14 	.word	0x20000f14

0800d3b4 <_close_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4c06      	ldr	r4, [pc, #24]	; (800d3d0 <_close_r+0x1c>)
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	4608      	mov	r0, r1
 800d3be:	6023      	str	r3, [r4, #0]
 800d3c0:	f7fe ff57 	bl	800c272 <_close>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_close_r+0x1a>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_close_r+0x1a>
 800d3cc:	602b      	str	r3, [r5, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	20000f14 	.word	0x20000f14

0800d3d4 <_fstat_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4c07      	ldr	r4, [pc, #28]	; (800d3f4 <_fstat_r+0x20>)
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4605      	mov	r5, r0
 800d3dc:	4608      	mov	r0, r1
 800d3de:	4611      	mov	r1, r2
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	f7fe ff52 	bl	800c28a <_fstat>
 800d3e6:	1c43      	adds	r3, r0, #1
 800d3e8:	d102      	bne.n	800d3f0 <_fstat_r+0x1c>
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	b103      	cbz	r3, 800d3f0 <_fstat_r+0x1c>
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	bd38      	pop	{r3, r4, r5, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20000f14 	.word	0x20000f14

0800d3f8 <_isatty_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4c06      	ldr	r4, [pc, #24]	; (800d414 <_isatty_r+0x1c>)
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4605      	mov	r5, r0
 800d400:	4608      	mov	r0, r1
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	f7fe ff51 	bl	800c2aa <_isatty>
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	d102      	bne.n	800d412 <_isatty_r+0x1a>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	b103      	cbz	r3, 800d412 <_isatty_r+0x1a>
 800d410:	602b      	str	r3, [r5, #0]
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	20000f14 	.word	0x20000f14

0800d418 <_lseek_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4c07      	ldr	r4, [pc, #28]	; (800d438 <_lseek_r+0x20>)
 800d41c:	4605      	mov	r5, r0
 800d41e:	4608      	mov	r0, r1
 800d420:	4611      	mov	r1, r2
 800d422:	2200      	movs	r2, #0
 800d424:	6022      	str	r2, [r4, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	f7fe ff4a 	bl	800c2c0 <_lseek>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_lseek_r+0x1e>
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	b103      	cbz	r3, 800d436 <_lseek_r+0x1e>
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	20000f14 	.word	0x20000f14

0800d43c <__malloc_lock>:
 800d43c:	4770      	bx	lr

0800d43e <__malloc_unlock>:
 800d43e:	4770      	bx	lr

0800d440 <_read_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	4c07      	ldr	r4, [pc, #28]	; (800d460 <_read_r+0x20>)
 800d444:	4605      	mov	r5, r0
 800d446:	4608      	mov	r0, r1
 800d448:	4611      	mov	r1, r2
 800d44a:	2200      	movs	r2, #0
 800d44c:	6022      	str	r2, [r4, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	f7fe fed6 	bl	800c200 <_read>
 800d454:	1c43      	adds	r3, r0, #1
 800d456:	d102      	bne.n	800d45e <_read_r+0x1e>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	b103      	cbz	r3, 800d45e <_read_r+0x1e>
 800d45c:	602b      	str	r3, [r5, #0]
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	20000f14 	.word	0x20000f14

0800d464 <sqrt>:
 800d464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d468:	ed2d 8b02 	vpush	{d8}
 800d46c:	b08b      	sub	sp, #44	; 0x2c
 800d46e:	ec55 4b10 	vmov	r4, r5, d0
 800d472:	f000 f851 	bl	800d518 <__ieee754_sqrt>
 800d476:	4b26      	ldr	r3, [pc, #152]	; (800d510 <sqrt+0xac>)
 800d478:	eeb0 8a40 	vmov.f32	s16, s0
 800d47c:	eef0 8a60 	vmov.f32	s17, s1
 800d480:	f993 6000 	ldrsb.w	r6, [r3]
 800d484:	1c73      	adds	r3, r6, #1
 800d486:	d02a      	beq.n	800d4de <sqrt+0x7a>
 800d488:	4622      	mov	r2, r4
 800d48a:	462b      	mov	r3, r5
 800d48c:	4620      	mov	r0, r4
 800d48e:	4629      	mov	r1, r5
 800d490:	f7f3 fb44 	bl	8000b1c <__aeabi_dcmpun>
 800d494:	4607      	mov	r7, r0
 800d496:	bb10      	cbnz	r0, 800d4de <sqrt+0x7a>
 800d498:	f04f 0800 	mov.w	r8, #0
 800d49c:	f04f 0900 	mov.w	r9, #0
 800d4a0:	4642      	mov	r2, r8
 800d4a2:	464b      	mov	r3, r9
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	f7f3 fb10 	bl	8000acc <__aeabi_dcmplt>
 800d4ac:	b1b8      	cbz	r0, 800d4de <sqrt+0x7a>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	4b18      	ldr	r3, [pc, #96]	; (800d514 <sqrt+0xb0>)
 800d4b4:	9301      	str	r3, [sp, #4]
 800d4b6:	9708      	str	r7, [sp, #32]
 800d4b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d4bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d4c0:	b9b6      	cbnz	r6, 800d4f0 <sqrt+0x8c>
 800d4c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d4c6:	4668      	mov	r0, sp
 800d4c8:	f000 f8d6 	bl	800d678 <matherr>
 800d4cc:	b1d0      	cbz	r0, 800d504 <sqrt+0xa0>
 800d4ce:	9b08      	ldr	r3, [sp, #32]
 800d4d0:	b11b      	cbz	r3, 800d4da <sqrt+0x76>
 800d4d2:	f7fe ff8f 	bl	800c3f4 <__errno>
 800d4d6:	9b08      	ldr	r3, [sp, #32]
 800d4d8:	6003      	str	r3, [r0, #0]
 800d4da:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d4de:	eeb0 0a48 	vmov.f32	s0, s16
 800d4e2:	eef0 0a68 	vmov.f32	s1, s17
 800d4e6:	b00b      	add	sp, #44	; 0x2c
 800d4e8:	ecbd 8b02 	vpop	{d8}
 800d4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4f0:	4642      	mov	r2, r8
 800d4f2:	464b      	mov	r3, r9
 800d4f4:	4640      	mov	r0, r8
 800d4f6:	4649      	mov	r1, r9
 800d4f8:	f7f3 f9a0 	bl	800083c <__aeabi_ddiv>
 800d4fc:	2e02      	cmp	r6, #2
 800d4fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d502:	d1e0      	bne.n	800d4c6 <sqrt+0x62>
 800d504:	f7fe ff76 	bl	800c3f4 <__errno>
 800d508:	2321      	movs	r3, #33	; 0x21
 800d50a:	6003      	str	r3, [r0, #0]
 800d50c:	e7df      	b.n	800d4ce <sqrt+0x6a>
 800d50e:	bf00      	nop
 800d510:	20000168 	.word	0x20000168
 800d514:	0800daf3 	.word	0x0800daf3

0800d518 <__ieee754_sqrt>:
 800d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	4955      	ldr	r1, [pc, #340]	; (800d674 <__ieee754_sqrt+0x15c>)
 800d51e:	ec55 4b10 	vmov	r4, r5, d0
 800d522:	43a9      	bics	r1, r5
 800d524:	462b      	mov	r3, r5
 800d526:	462a      	mov	r2, r5
 800d528:	d112      	bne.n	800d550 <__ieee754_sqrt+0x38>
 800d52a:	ee10 2a10 	vmov	r2, s0
 800d52e:	ee10 0a10 	vmov	r0, s0
 800d532:	4629      	mov	r1, r5
 800d534:	f7f3 f858 	bl	80005e8 <__aeabi_dmul>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f2 fe9c 	bl	800027c <__adddf3>
 800d544:	4604      	mov	r4, r0
 800d546:	460d      	mov	r5, r1
 800d548:	ec45 4b10 	vmov	d0, r4, r5
 800d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d550:	2d00      	cmp	r5, #0
 800d552:	ee10 0a10 	vmov	r0, s0
 800d556:	4621      	mov	r1, r4
 800d558:	dc0f      	bgt.n	800d57a <__ieee754_sqrt+0x62>
 800d55a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d55e:	4330      	orrs	r0, r6
 800d560:	d0f2      	beq.n	800d548 <__ieee754_sqrt+0x30>
 800d562:	b155      	cbz	r5, 800d57a <__ieee754_sqrt+0x62>
 800d564:	ee10 2a10 	vmov	r2, s0
 800d568:	4620      	mov	r0, r4
 800d56a:	4629      	mov	r1, r5
 800d56c:	f7f2 fe84 	bl	8000278 <__aeabi_dsub>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	f7f3 f962 	bl	800083c <__aeabi_ddiv>
 800d578:	e7e4      	b.n	800d544 <__ieee754_sqrt+0x2c>
 800d57a:	151b      	asrs	r3, r3, #20
 800d57c:	d073      	beq.n	800d666 <__ieee754_sqrt+0x14e>
 800d57e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d582:	07dd      	lsls	r5, r3, #31
 800d584:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d588:	bf48      	it	mi
 800d58a:	0fc8      	lsrmi	r0, r1, #31
 800d58c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d590:	bf44      	itt	mi
 800d592:	0049      	lslmi	r1, r1, #1
 800d594:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d598:	2500      	movs	r5, #0
 800d59a:	1058      	asrs	r0, r3, #1
 800d59c:	0fcb      	lsrs	r3, r1, #31
 800d59e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d5a2:	0049      	lsls	r1, r1, #1
 800d5a4:	2316      	movs	r3, #22
 800d5a6:	462c      	mov	r4, r5
 800d5a8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d5ac:	19a7      	adds	r7, r4, r6
 800d5ae:	4297      	cmp	r7, r2
 800d5b0:	bfde      	ittt	le
 800d5b2:	19bc      	addle	r4, r7, r6
 800d5b4:	1bd2      	suble	r2, r2, r7
 800d5b6:	19ad      	addle	r5, r5, r6
 800d5b8:	0fcf      	lsrs	r7, r1, #31
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d5c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d5c8:	d1f0      	bne.n	800d5ac <__ieee754_sqrt+0x94>
 800d5ca:	f04f 0c20 	mov.w	ip, #32
 800d5ce:	469e      	mov	lr, r3
 800d5d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d5d4:	42a2      	cmp	r2, r4
 800d5d6:	eb06 070e 	add.w	r7, r6, lr
 800d5da:	dc02      	bgt.n	800d5e2 <__ieee754_sqrt+0xca>
 800d5dc:	d112      	bne.n	800d604 <__ieee754_sqrt+0xec>
 800d5de:	428f      	cmp	r7, r1
 800d5e0:	d810      	bhi.n	800d604 <__ieee754_sqrt+0xec>
 800d5e2:	2f00      	cmp	r7, #0
 800d5e4:	eb07 0e06 	add.w	lr, r7, r6
 800d5e8:	da42      	bge.n	800d670 <__ieee754_sqrt+0x158>
 800d5ea:	f1be 0f00 	cmp.w	lr, #0
 800d5ee:	db3f      	blt.n	800d670 <__ieee754_sqrt+0x158>
 800d5f0:	f104 0801 	add.w	r8, r4, #1
 800d5f4:	1b12      	subs	r2, r2, r4
 800d5f6:	428f      	cmp	r7, r1
 800d5f8:	bf88      	it	hi
 800d5fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d5fe:	1bc9      	subs	r1, r1, r7
 800d600:	4433      	add	r3, r6
 800d602:	4644      	mov	r4, r8
 800d604:	0052      	lsls	r2, r2, #1
 800d606:	f1bc 0c01 	subs.w	ip, ip, #1
 800d60a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d60e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d612:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d616:	d1dd      	bne.n	800d5d4 <__ieee754_sqrt+0xbc>
 800d618:	430a      	orrs	r2, r1
 800d61a:	d006      	beq.n	800d62a <__ieee754_sqrt+0x112>
 800d61c:	1c5c      	adds	r4, r3, #1
 800d61e:	bf13      	iteet	ne
 800d620:	3301      	addne	r3, #1
 800d622:	3501      	addeq	r5, #1
 800d624:	4663      	moveq	r3, ip
 800d626:	f023 0301 	bicne.w	r3, r3, #1
 800d62a:	106a      	asrs	r2, r5, #1
 800d62c:	085b      	lsrs	r3, r3, #1
 800d62e:	07e9      	lsls	r1, r5, #31
 800d630:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d634:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d638:	bf48      	it	mi
 800d63a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d63e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d642:	461c      	mov	r4, r3
 800d644:	e780      	b.n	800d548 <__ieee754_sqrt+0x30>
 800d646:	0aca      	lsrs	r2, r1, #11
 800d648:	3815      	subs	r0, #21
 800d64a:	0549      	lsls	r1, r1, #21
 800d64c:	2a00      	cmp	r2, #0
 800d64e:	d0fa      	beq.n	800d646 <__ieee754_sqrt+0x12e>
 800d650:	02d6      	lsls	r6, r2, #11
 800d652:	d50a      	bpl.n	800d66a <__ieee754_sqrt+0x152>
 800d654:	f1c3 0420 	rsb	r4, r3, #32
 800d658:	fa21 f404 	lsr.w	r4, r1, r4
 800d65c:	1e5d      	subs	r5, r3, #1
 800d65e:	4099      	lsls	r1, r3
 800d660:	4322      	orrs	r2, r4
 800d662:	1b43      	subs	r3, r0, r5
 800d664:	e78b      	b.n	800d57e <__ieee754_sqrt+0x66>
 800d666:	4618      	mov	r0, r3
 800d668:	e7f0      	b.n	800d64c <__ieee754_sqrt+0x134>
 800d66a:	0052      	lsls	r2, r2, #1
 800d66c:	3301      	adds	r3, #1
 800d66e:	e7ef      	b.n	800d650 <__ieee754_sqrt+0x138>
 800d670:	46a0      	mov	r8, r4
 800d672:	e7bf      	b.n	800d5f4 <__ieee754_sqrt+0xdc>
 800d674:	7ff00000 	.word	0x7ff00000

0800d678 <matherr>:
 800d678:	2000      	movs	r0, #0
 800d67a:	4770      	bx	lr

0800d67c <_init>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	bf00      	nop
 800d680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d682:	bc08      	pop	{r3}
 800d684:	469e      	mov	lr, r3
 800d686:	4770      	bx	lr

0800d688 <_fini>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr
