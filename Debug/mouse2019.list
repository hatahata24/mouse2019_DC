
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080132c0  080132c0  000232c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013878  08013878  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013878  08013878  00023878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013880  08013880  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013880  08013880  00023880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013884  08013884  00023884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08013888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  08013974  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08013974  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016df8  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  00046f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00049fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0004b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b04  00000000  00000000  0004c660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bd5  00000000  00000000  0006f164  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8693  00000000  00000000  0007fd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001483cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d54  00000000  00000000  00148448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080132a8 	.word	0x080132a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	080132a8 	.word	0x080132a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f010 fcdc 	bl	8011928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f010 fc7a 	bl	8011978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	080137c4 	.word	0x080137c4
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	080137d4 	.word	0x080137d4

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	080137d4 	.word	0x080137d4

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00e ff41 	bl	8011a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00e fa38 	bl	8011a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00e f96f 	bl	8011b34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f008 fb59 	bl	800c1f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00d fb8c 	bl	8011d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00c fc2c 	bl	80114e8 <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00c fc24 	bl	80114e8 <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <control_start+0x24>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <control_start+0x24>)
 8004d98:	8813      	ldrh	r3, [r2, #0]
 8004d9a:	f043 0310 	orr.w	r3, r3, #16
 8004d9e:	8013      	strh	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000f68 	.word	0x20000f68

08004db0 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004db4:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <control_stop+0x24>)
 8004db6:	8813      	ldrh	r3, [r2, #0]
 8004db8:	f36f 03c3 	bfc	r3, #3, #1
 8004dbc:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <control_stop+0x24>)
 8004dc0:	8813      	ldrh	r3, [r2, #0]
 8004dc2:	f36f 1304 	bfc	r3, #4, #1
 8004dc6:	8013      	strh	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000f68 	.word	0x20000f68

08004dd8 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13e      	bne.n	8004e6c <drive_dir+0x94>
		if(dir == 0){
 8004dee:	79bb      	ldrb	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004df4:	2201      	movs	r2, #1
 8004df6:	2120      	movs	r1, #32
 8004df8:	483f      	ldr	r0, [pc, #252]	; (8004ef8 <drive_dir+0x120>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2110      	movs	r1, #16
 8004e02:	483d      	ldr	r0, [pc, #244]	; (8004ef8 <drive_dir+0x120>)
 8004e04:	f7fd fa7e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	483b      	ldr	r0, [pc, #236]	; (8004efc <drive_dir+0x124>)
 8004e0e:	f7fd fa79 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e12:	e06c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e14:	79bb      	ldrb	r3, [r7, #6]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10f      	bne.n	8004e3a <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	4836      	ldr	r0, [pc, #216]	; (8004ef8 <drive_dir+0x120>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e24:	2201      	movs	r2, #1
 8004e26:	2110      	movs	r1, #16
 8004e28:	4833      	ldr	r0, [pc, #204]	; (8004ef8 <drive_dir+0x120>)
 8004e2a:	f7fd fa6b 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2101      	movs	r1, #1
 8004e32:	4832      	ldr	r0, [pc, #200]	; (8004efc <drive_dir+0x124>)
 8004e34:	f7fd fa66 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e38:	e059      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004e3a:	79bb      	ldrb	r3, [r7, #6]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d10f      	bne.n	8004e60 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e40:	2201      	movs	r2, #1
 8004e42:	2120      	movs	r1, #32
 8004e44:	482c      	ldr	r0, [pc, #176]	; (8004ef8 <drive_dir+0x120>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	482a      	ldr	r0, [pc, #168]	; (8004ef8 <drive_dir+0x120>)
 8004e50:	f7fd fa58 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e54:	2201      	movs	r2, #1
 8004e56:	2101      	movs	r1, #1
 8004e58:	4828      	ldr	r0, [pc, #160]	; (8004efc <drive_dir+0x124>)
 8004e5a:	f7fd fa53 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e5e:	e046      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e60:	2200      	movs	r2, #0
 8004e62:	2101      	movs	r1, #1
 8004e64:	4825      	ldr	r0, [pc, #148]	; (8004efc <drive_dir+0x124>)
 8004e66:	f7fd fa4d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e6a:	e040      	b.n	8004eee <drive_dir+0x116>
		if(dir == 0){
 8004e6c:	79bb      	ldrb	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2102      	movs	r1, #2
 8004e76:	4821      	ldr	r0, [pc, #132]	; (8004efc <drive_dir+0x124>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e82:	481e      	ldr	r0, [pc, #120]	; (8004efc <drive_dir+0x124>)
 8004e84:	f7fd fa3e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	481b      	ldr	r0, [pc, #108]	; (8004efc <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e02c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4817      	ldr	r0, [pc, #92]	; (8004efc <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	4814      	ldr	r0, [pc, #80]	; (8004efc <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4811      	ldr	r0, [pc, #68]	; (8004efc <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e018      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	480a      	ldr	r0, [pc, #40]	; (8004efc <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e004      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4804      	ldr	r0, [pc, #16]	; (8004efc <drive_dir+0x124>)
 8004eea:	f7fd fa0b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40020800 	.word	0x40020800
 8004efc:	40020400 	.word	0x40020400

08004f00 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f06:	2006      	movs	r0, #6
 8004f08:	f00c fb28 	bl	801155c <full_led_write>
	int mode = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	b2d8      	uxtb	r0, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f00c fada 	bl	80114e8 <led_write>
		if(dist_r >= 20){
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <run_select+0xbc>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	db0f      	blt.n	8004f68 <run_select+0x68>
			  mode++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <run_select+0xbc>)
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	dd01      	ble.n	8004f60 <run_select+0x60>
				  mode = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4817      	ldr	r0, [pc, #92]	; (8004fc0 <run_select+0xc0>)
 8004f64:	f00d f88e 	bl	8012084 <iprintf>
		}
		if(dist_r <= -20){
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <run_select+0xbc>)
 8004f6a:	edd3 7a00 	vldr	s15, [r3]
 8004f6e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7a:	d80f      	bhi.n	8004f9c <run_select+0x9c>
			  mode--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <run_select+0xbc>)
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da01      	bge.n	8004f94 <run_select+0x94>
				  mode = 7;
 8004f90:	2307      	movs	r3, #7
 8004f92:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <run_select+0xc0>)
 8004f98:	f00d f874 	bl	8012084 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <run_select+0xc4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8004fa2:	d9b5      	bls.n	8004f10 <run_select+0x10>
			  run_mode = mode;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <run_select+0xc8>)
 8004faa:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fac:	2004      	movs	r0, #4
 8004fae:	f00c fad5 	bl	801155c <full_led_write>
			  break;
 8004fb2:	bf00      	nop
		}
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000aec 	.word	0x20000aec
 8004fc0:	080132c0 	.word	0x080132c0
 8004fc4:	20000d54 	.word	0x20000d54
 8004fc8:	20000456 	.word	0x20000456

08004fcc <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	80fb      	strh	r3, [r7, #6]
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80bb      	strh	r3, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004fea:	88bb      	ldrh	r3, [r7, #4]
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <driveA+0xc8>)
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <driveA+0xcc>)
 8004ffc:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <driveA+0xd0>)
 800500c:	edc3 7a00 	vstr	s15, [r3]
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <driveA+0xd4>)
 8005012:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <driveA+0xd8>)
 8005022:	edc3 7a00 	vstr	s15, [r3]
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <driveA+0xdc>)
 8005028:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 800502c:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <driveA+0xe0>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <driveA+0x84>
 800503a:	88bb      	ldrh	r3, [r7, #4]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <driveA+0xe4>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <driveA+0xe8>)
 800504c:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005050:	f7ff fe42 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8005054:	bf00      	nop
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <driveA+0xec>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dcf2      	bgt.n	8005056 <driveA+0x8a>
 8005070:	883b      	ldrh	r3, [r7, #0]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <driveA+0xf0>)
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	dce5      	bgt.n	8005056 <driveA+0x8a>

//	drive_stop();
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000f6c 	.word	0x20000f6c
 8005098:	20000b54 	.word	0x20000b54
 800509c:	200001a4 	.word	0x200001a4
 80050a0:	2000077c 	.word	0x2000077c
 80050a4:	20000ae4 	.word	0x20000ae4
 80050a8:	20000d58 	.word	0x20000d58
 80050ac:	20000f64 	.word	0x20000f64
 80050b0:	200001a0 	.word	0x200001a0
 80050b4:	20000bfc 	.word	0x20000bfc
 80050b8:	200015c4 	.word	0x200015c4
 80050bc:	20000aec 	.word	0x20000aec

080050c0 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	80fb      	strh	r3, [r7, #6]
 80050d2:	4603      	mov	r3, r0
 80050d4:	80bb      	strh	r3, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]
 80050da:	4613      	mov	r3, r2
 80050dc:	803b      	strh	r3, [r7, #0]

//	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
	float speed_0 = (target_speed_l + target_speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 80050de:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <driveD+0x188>)
 80050e0:	ed93 7a00 	vldr	s14, [r3]
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <driveD+0x18c>)
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f6:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <driveD+0x190>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
 800510a:	4b52      	ldr	r3, [pc, #328]	; (8005254 <driveD+0x194>)
 800510c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	4b4f      	ldr	r3, [pc, #316]	; (8005258 <driveD+0x198>)
 800511c:	edc3 7a00 	vstr	s15, [r3]
 8005120:	4b4e      	ldr	r3, [pc, #312]	; (800525c <driveD+0x19c>)
 8005122:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <driveD+0x1a0>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <driveD+0x1a4>)
 800513a:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 800513e:	883b      	ldrh	r3, [r7, #0]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <driveD+0x194>)
 800514a:	edd3 6a00 	vldr	s13, [r3]
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <driveD+0x194>)
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005158:	ed97 6a03 	vldr	s12, [r7, #12]
 800515c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005160:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005164:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <driveD+0x1a4>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005172:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517e:	ee17 3a90 	vmov	r3, s15
 8005182:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	4a35      	ldr	r2, [pc, #212]	; (8005260 <driveD+0x1a0>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4a35      	ldr	r2, [pc, #212]	; (8005264 <driveD+0x1a4>)
 800518e:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	4a34      	ldr	r2, [pc, #208]	; (8005268 <driveD+0x1a8>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4a34      	ldr	r2, [pc, #208]	; (800526c <driveD+0x1ac>)
 800519a:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800519c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dd1c      	ble.n	80051de <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051a4:	bf00      	nop
 80051a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <driveD+0x1ac>)
 80051b4:	edd3 7a00 	vldr	s15, [r3]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dcf1      	bgt.n	80051a6 <driveD+0xe6>
 80051c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <driveD+0x1a8>)
 80051d0:	edd3 7a00 	vldr	s15, [r3]
 80051d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	dce3      	bgt.n	80051a6 <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80051de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <driveD+0x1a0>)
 80051ec:	edc3 7a00 	vstr	s15, [r3]
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <driveD+0x1a4>)
 80051f2:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) && (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80051f6:	bf00      	nop
 80051f8:	883b      	ldrh	r3, [r7, #0]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <driveD+0x1ac>)
 8005204:	edd3 7a00 	vldr	s15, [r3]
 8005208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	dd0c      	ble.n	800522c <driveD+0x16c>
 8005212:	883b      	ldrh	r3, [r7, #0]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <driveD+0x1a8>)
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	dce5      	bgt.n	80051f8 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <driveD+0x1b0>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <driveD+0x17e>
 800523a:	f7ff fd7d 	bl	8004d38 <drive_stop>
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	bf00      	nop
 8005248:	20000bfc 	.word	0x20000bfc
 800524c:	200001a0 	.word	0x200001a0
 8005250:	20000f6c 	.word	0x20000f6c
 8005254:	20000b54 	.word	0x20000b54
 8005258:	200001a4 	.word	0x200001a4
 800525c:	2000077c 	.word	0x2000077c
 8005260:	20000ae4 	.word	0x20000ae4
 8005264:	20000d58 	.word	0x20000d58
 8005268:	20000aec 	.word	0x20000aec
 800526c:	200015c4 	.word	0x200015c4
 8005270:	20000f64 	.word	0x20000f64

08005274 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <driveU+0xb0>)
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4a28      	ldr	r2, [pc, #160]	; (8005328 <driveU+0xb4>)
 8005288:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <driveU+0xb8>)
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4a27      	ldr	r2, [pc, #156]	; (8005330 <driveU+0xbc>)
 8005294:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005296:	e024      	b.n	80052e2 <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 8005298:	4b26      	ldr	r3, [pc, #152]	; (8005334 <driveU+0xc0>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01d      	beq.n	80052e2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <driveU+0xc4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b6d      	cmp	r3, #109	; 0x6d
 80052ac:	d903      	bls.n	80052b6 <driveU+0x42>
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <driveU+0xc8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b6d      	cmp	r3, #109	; 0x6d
 80052b4:	d815      	bhi.n	80052e2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052b6:	bf00      	nop
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <driveU+0xbc>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005340 <driveU+0xcc>
 80052c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d4f5      	bmi.n	80052b8 <driveU+0x44>
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <driveU+0xb8>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005340 <driveU+0xcc>
 80052d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d4eb      	bmi.n	80052b8 <driveU+0x44>
			break;
 80052e0:	e019      	b.n	8005316 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <driveU+0xbc>)
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	dccd      	bgt.n	8005298 <driveU+0x24>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <driveU+0xb8>)
 8005308:	edd3 7a00 	vldr	s15, [r3]
 800530c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	dcc0      	bgt.n	8005298 <driveU+0x24>
			}
		}
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000ae4 	.word	0x20000ae4
 8005328:	20000d58 	.word	0x20000d58
 800532c:	20000aec 	.word	0x20000aec
 8005330:	200015c4 	.word	0x200015c4
 8005334:	20000f68 	.word	0x20000f68
 8005338:	20000afc 	.word	0x20000afc
 800533c:	20000f60 	.word	0x20000f60
 8005340:	428c0000 	.word	0x428c0000

08005344 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <driveC+0x70>)
 8005350:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <driveC+0x74>)
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <driveC+0x78>)
 8005356:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <driveC+0x70>)
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <driveC+0x7c>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <driveC+0x80>)
 8005360:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <driveC+0x84>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <driveC+0x88>)
 800536c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800536e:	f7ff fcb3 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005372:	bf00      	nop
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <driveC+0x8c>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	dcf2      	bgt.n	8005374 <driveC+0x30>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <driveC+0x90>)
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	dce5      	bgt.n	8005374 <driveC+0x30>

	drive_stop();											//走行停止
 80053a8:	f7ff fcc6 	bl	8004d38 <drive_stop>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	43160000 	.word	0x43160000
 80053b8:	20000f6c 	.word	0x20000f6c
 80053bc:	20000b54 	.word	0x20000b54
 80053c0:	200001a4 	.word	0x200001a4
 80053c4:	2000077c 	.word	0x2000077c
 80053c8:	20000ae4 	.word	0x20000ae4
 80053cc:	20000d58 	.word	0x20000d58
 80053d0:	200015c4 	.word	0x200015c4
 80053d4:	20000aec 	.word	0x20000aec

080053d8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <driveC2+0x74>)
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <driveC2+0x78>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <driveC2+0x7c>)
 80053ea:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <driveC2+0x74>)
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <driveC2+0x80>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <driveC2+0x84>)
 80053f4:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <driveC2+0x88>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <driveC2+0x8c>)
 8005400:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005402:	f7ff fc69 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005406:	bf00      	nop
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	425b      	negs	r3, r3
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <driveC2+0x90>)
 8005416:	edd3 7a00 	vldr	s15, [r3]
 800541a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	d4f1      	bmi.n	8005408 <driveC2+0x30>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	425b      	negs	r3, r3
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <driveC2+0x94>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543e:	d4e3      	bmi.n	8005408 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005440:	f7ff fc7a 	bl	8004d38 <drive_stop>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	c37a0000 	.word	0xc37a0000
 8005450:	20000f6c 	.word	0x20000f6c
 8005454:	20000b54 	.word	0x20000b54
 8005458:	200001a4 	.word	0x200001a4
 800545c:	2000077c 	.word	0x2000077c
 8005460:	20000ae4 	.word	0x20000ae4
 8005464:	20000d58 	.word	0x20000d58
 8005468:	200015c4 	.word	0x200015c4
 800546c:	20000aec 	.word	0x20000aec

08005470 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	80fb      	strh	r3, [r7, #6]
 8005482:	4603      	mov	r3, r0
 8005484:	80bb      	strh	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	70fb      	strb	r3, [r7, #3]
 800548a:	4613      	mov	r3, r2
 800548c:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <slalomF+0xd4>)
 8005490:	8813      	ldrh	r3, [r2, #0]
 8005492:	f36f 2308 	bfc	r3, #8, #1
 8005496:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <slalomF+0xd4>)
 800549a:	8813      	ldrh	r3, [r2, #0]
 800549c:	f043 0304 	orr.w	r3, r3, #4
 80054a0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <slalomF+0xd8>)
 80054b0:	edc3 7a00 	vstr	s15, [r3]
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <slalomF+0xdc>)
 80054b6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <slalomF+0xe0>)
 80054c8:	edc3 7a00 	vstr	s15, [r3]
 80054cc:	4b21      	ldr	r3, [pc, #132]	; (8005554 <slalomF+0xe4>)
 80054ce:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054d2:	f7ff fc59 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <slalomF+0xe8>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <slalomF+0xec>)
 80054e0:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p){
 80054e2:	e00d      	b.n	8005500 <slalomF+0x90>
		if(ad_fl > wall_fl || ad_fr > wall_fr){
 80054e4:	883a      	ldrh	r2, [r7, #0]
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <slalomF+0xf0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d304      	bcc.n	80054f8 <slalomF+0x88>
 80054ee:	8b3a      	ldrh	r2, [r7, #24]
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <slalomF+0xf4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d203      	bcs.n	8005500 <slalomF+0x90>
			full_led_write(RED);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f00c f82f 	bl	801155c <full_led_write>
			break;
 80054fe:	e019      	b.n	8005534 <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <slalomF+0xec>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	dd0c      	ble.n	8005534 <slalomF+0xc4>
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <slalomF+0xe8>)
 8005526:	edd3 7a00 	vldr	s15, [r3]
 800552a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	dcd7      	bgt.n	80054e4 <slalomF+0x74>
		}
	}
	drive_stop();
 8005534:	f7ff fc00 	bl	8004d38 <drive_stop>
	control_stop();
 8005538:	f7ff fc3a 	bl	8004db0 <control_stop>
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	20000f68 	.word	0x20000f68
 8005548:	20000ae4 	.word	0x20000ae4
 800554c:	20000d58 	.word	0x20000d58
 8005550:	200001a4 	.word	0x200001a4
 8005554:	2000077c 	.word	0x2000077c
 8005558:	20000aec 	.word	0x20000aec
 800555c:	200015c4 	.word	0x200015c4
 8005560:	20000d54 	.word	0x20000d54
 8005564:	20000c00 	.word	0x20000c00

08005568 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int32_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4603      	mov	r3, r0
 8005578:	817b      	strh	r3, [r7, #10]
 800557a:	460b      	mov	r3, r1
 800557c:	813b      	strh	r3, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
	MF.FLAG.GYRO = 1;
 8005582:	4a82      	ldr	r2, [pc, #520]	; (800578c <slalomR+0x224>)
 8005584:	8813      	ldrh	r3, [r2, #0]
 8005586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558a:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005596:	4b7e      	ldr	r3, [pc, #504]	; (8005790 <slalomR+0x228>)
 8005598:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 800559c:	4b7d      	ldr	r3, [pc, #500]	; (8005794 <slalomR+0x22c>)
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 80055a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b0:	4b79      	ldr	r3, [pc, #484]	; (8005798 <slalomR+0x230>)
 80055b2:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 80055b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da1f      	bge.n	80055fe <slalomR+0x96>
		omega_min = omega_p;
 80055be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ca:	4b74      	ldr	r3, [pc, #464]	; (800579c <slalomR+0x234>)
 80055cc:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80055d0:	4b72      	ldr	r3, [pc, #456]	; (800579c <slalomR+0x234>)
 80055d2:	ed93 7a00 	vldr	s14, [r3]
 80055d6:	4b71      	ldr	r3, [pc, #452]	; (800579c <slalomR+0x234>)
 80055d8:	edd3 7a00 	vldr	s15, [r3]
 80055dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055e0:	4b6b      	ldr	r3, [pc, #428]	; (8005790 <slalomR+0x228>)
 80055e2:	edd3 7a00 	vldr	s15, [r3]
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f6:	ee17 3a90 	vmov	r3, s15
 80055fa:	82fb      	strh	r3, [r7, #22]
 80055fc:	e01e      	b.n	800563c <slalomR+0xd4>
	}else{
		omega_max = omega_p;
 80055fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800560a:	4b65      	ldr	r3, [pc, #404]	; (80057a0 <slalomR+0x238>)
 800560c:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 8005610:	4b63      	ldr	r3, [pc, #396]	; (80057a0 <slalomR+0x238>)
 8005612:	ed93 7a00 	vldr	s14, [r3]
 8005616:	4b62      	ldr	r3, [pc, #392]	; (80057a0 <slalomR+0x238>)
 8005618:	edd3 7a00 	vldr	s15, [r3]
 800561c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005620:	4b5b      	ldr	r3, [pc, #364]	; (8005790 <slalomR+0x228>)
 8005622:	edd3 7a00 	vldr	s15, [r3]
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800562e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005636:	ee17 3a90 	vmov	r3, s15
 800563a:	82fb      	strh	r3, [r7, #22]
	}

	MF.FLAG.DRV = 1;
 800563c:	4a53      	ldr	r2, [pc, #332]	; (800578c <slalomR+0x224>)
 800563e:	8813      	ldrh	r3, [r2, #0]
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 8005646:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800564a:	2b00      	cmp	r3, #0
 800564c:	da14      	bge.n	8005678 <slalomR+0x110>
		while(degree_z > target_degree_z+c_degree);
 800564e:	bf00      	nop
 8005650:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800565c:	4b51      	ldr	r3, [pc, #324]	; (80057a4 <slalomR+0x23c>)
 800565e:	edd3 7a00 	vldr	s15, [r3]
 8005662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005666:	4b50      	ldr	r3, [pc, #320]	; (80057a8 <slalomR+0x240>)
 8005668:	edd3 7a00 	vldr	s15, [r3]
 800566c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005674:	d4ec      	bmi.n	8005650 <slalomR+0xe8>
 8005676:	e013      	b.n	80056a0 <slalomR+0x138>
	}else{
		while(degree_z < target_degree_z+c_degree);
 8005678:	bf00      	nop
 800567a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <slalomR+0x23c>)
 8005688:	edd3 7a00 	vldr	s15, [r3]
 800568c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005690:	4b45      	ldr	r3, [pc, #276]	; (80057a8 <slalomR+0x240>)
 8005692:	edd3 7a00 	vldr	s15, [r3]
 8005696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800569a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569e:	dcec      	bgt.n	800567a <slalomR+0x112>
	}

	target_degaccel_z = 0;
 80056a0:	4b3b      	ldr	r3, [pc, #236]	; (8005790 <slalomR+0x228>)
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 80056a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da18      	bge.n	80056e2 <slalomR+0x17a>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80056b0:	bf00      	nop
 80056b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80056b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	3b04      	subs	r3, #4
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056c6:	4b37      	ldr	r3, [pc, #220]	; (80057a4 <slalomR+0x23c>)
 80056c8:	edd3 7a00 	vldr	s15, [r3]
 80056cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056d0:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <slalomR+0x240>)
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	d4e8      	bmi.n	80056b2 <slalomR+0x14a>
 80056e0:	e017      	b.n	8005712 <slalomR+0x1aa>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 80056e2:	bf00      	nop
 80056e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80056e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	3304      	adds	r3, #4
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <slalomR+0x23c>)
 80056fa:	edd3 7a00 	vldr	s15, [r3]
 80056fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <slalomR+0x240>)
 8005704:	edd3 7a00 	vldr	s15, [r3]
 8005708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	dce8      	bgt.n	80056e4 <slalomR+0x17c>
	}

	target_degaccel_z = -degaccel_p;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	425b      	negs	r3, r3
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571e:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <slalomR+0x228>)
 8005720:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 8005724:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005728:	2b00      	cmp	r3, #0
 800572a:	da14      	bge.n	8005756 <slalomR+0x1ee>
		while(degree_z > target_degree_z+degree_p);
 800572c:	bf00      	nop
 800572e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <slalomR+0x23c>)
 800573c:	edd3 7a00 	vldr	s15, [r3]
 8005740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005744:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <slalomR+0x240>)
 8005746:	edd3 7a00 	vldr	s15, [r3]
 800574a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d4ec      	bmi.n	800572e <slalomR+0x1c6>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 8005754:	e013      	b.n	800577e <slalomR+0x216>
		while(degree_z < target_degree_z+degree_p);
 8005756:	bf00      	nop
 8005758:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <slalomR+0x23c>)
 8005766:	edd3 7a00 	vldr	s15, [r3]
 800576a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800576e:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <slalomR+0x240>)
 8005770:	edd3 7a00 	vldr	s15, [r3]
 8005774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	dcec      	bgt.n	8005758 <slalomR+0x1f0>
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000f68 	.word	0x20000f68
 8005790:	20000b58 	.word	0x20000b58
 8005794:	200001a8 	.word	0x200001a8
 8005798:	20000af4 	.word	0x20000af4
 800579c:	200002b8 	.word	0x200002b8
 80057a0:	20000ae8 	.word	0x20000ae8
 80057a4:	20000bf8 	.word	0x20000bf8
 80057a8:	20000b5c 	.word	0x20000b5c

080057ac <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
 80057b6:	460b      	mov	r3, r1
 80057b8:	80bb      	strh	r3, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 80057be:	4a25      	ldr	r2, [pc, #148]	; (8005854 <slalomB+0xa8>)
 80057c0:	8813      	ldrh	r3, [r2, #0]
 80057c2:	f36f 2308 	bfc	r3, #8, #1
 80057c6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <slalomB+0xa8>)
 80057ca:	8813      	ldrh	r3, [r2, #0]
 80057cc:	f043 0304 	orr.w	r3, r3, #4
 80057d0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80057d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <slalomB+0xac>)
 80057e0:	edc3 7a00 	vstr	s15, [r3]
 80057e4:	4b1d      	ldr	r3, [pc, #116]	; (800585c <slalomB+0xb0>)
 80057e6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80057ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <slalomB+0xb4>)
 80057f8:	edc3 7a00 	vstr	s15, [r3]
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <slalomB+0xb8>)
 80057fe:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 8005802:	f7ff fac1 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	4a17      	ldr	r2, [pc, #92]	; (8005868 <slalomB+0xbc>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <slalomB+0xc0>)
 8005810:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 8005812:	bf00      	nop
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <slalomB+0xc0>)
 8005820:	edd3 7a00 	vldr	s15, [r3]
 8005824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582c:	dc00      	bgt.n	8005830 <slalomB+0x84>
}
 800582e:	e00c      	b.n	800584a <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <slalomB+0xbc>)
 800583c:	edd3 7a00 	vldr	s15, [r3]
 8005840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005848:	dce4      	bgt.n	8005814 <slalomB+0x68>
}
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000f68 	.word	0x20000f68
 8005858:	20000ae4 	.word	0x20000ae4
 800585c:	20000d58 	.word	0x20000d58
 8005860:	200001a4 	.word	0x200001a4
 8005864:	2000077c 	.word	0x2000077c
 8005868:	20000aec 	.word	0x20000aec
 800586c:	200015c4 	.word	0x200015c4

08005870 <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005874:	2064      	movs	r0, #100	; 0x64
 8005876:	f7ff fdaf 	bl	80053d8 <driveC2>
  degree_z = target_degree_z;
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <set_position+0x20>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <set_position+0x24>)
 8005880:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <set_position+0x28>)
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005888:	f000 f826 	bl	80058d8 <start_sectionA>
}
 800588c:	bf00      	nop
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000bf8 	.word	0x20000bf8
 8005894:	20000b5c 	.word	0x20000b5c
 8005898:	200015c8 	.word	0x200015c8

0800589c <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0

	full_led_write(RED);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f00b fe5b 	bl	801155c <full_led_write>
	HAL_Delay(100);
 80058a6:	2064      	movs	r0, #100	; 0x64
 80058a8:	f7fb fbb8 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 80058ac:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <set_positionF+0x38>)
 80058ae:	8813      	ldrh	r3, [r2, #0]
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 80058b6:	4a07      	ldr	r2, [pc, #28]	; (80058d4 <set_positionF+0x38>)
 80058b8:	8813      	ldrh	r3, [r2, #0]
 80058ba:	f043 0310 	orr.w	r3, r3, #16
 80058be:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 80058c0:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <set_positionF+0x38>)
 80058c2:	8813      	ldrh	r3, [r2, #0]
 80058c4:	f36f 1304 	bfc	r3, #4, #1
 80058c8:	8013      	strh	r3, [r2, #0]
	drive_stop();
 80058ca:	f7ff fa35 	bl	8004d38 <drive_stop>
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000f68 	.word	0x20000f68

080058d8 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0

	control_start();
 80058dc:	f7ff fa54 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 80058e0:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <start_sectionA+0x19c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d12a      	bne.n	8005940 <start_sectionA+0x68>
		if(start_mode == 0){
 80058ea:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <start_sectionA+0x1a0>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80058f4:	237d      	movs	r3, #125	; 0x7d
 80058f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80058fa:	211e      	movs	r1, #30
 80058fc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005900:	f7ff fb64 	bl	8004fcc <driveA>
 8005904:	e0a8      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005906:	4b5c      	ldr	r3, [pc, #368]	; (8005a78 <start_sectionA+0x1a0>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d108      	bne.n	8005922 <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005910:	235b      	movs	r3, #91	; 0x5b
 8005912:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005916:	211e      	movs	r1, #30
 8005918:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800591c:	f7ff fb56 	bl	8004fcc <driveA>
 8005920:	e09a      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005922:	4b55      	ldr	r3, [pc, #340]	; (8005a78 <start_sectionA+0x1a0>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	f040 8095 	bne.w	8005a58 <start_sectionA+0x180>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 800592e:	2323      	movs	r3, #35	; 0x23
 8005930:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005934:	211e      	movs	r1, #30
 8005936:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800593a:	f7ff fb47 	bl	8004fcc <driveA>
 800593e:	e08b      	b.n	8005a58 <start_sectionA+0x180>
		}
	}else if(run_mode == MIDDLE){
 8005940:	4b4c      	ldr	r3, [pc, #304]	; (8005a74 <start_sectionA+0x19c>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d129      	bne.n	800599e <start_sectionA+0xc6>
		if(start_mode == 0){
 800594a:	4b4b      	ldr	r3, [pc, #300]	; (8005a78 <start_sectionA+0x1a0>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d108      	bne.n	8005966 <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 8005954:	237d      	movs	r3, #125	; 0x7d
 8005956:	f44f 7216 	mov.w	r2, #600	; 0x258
 800595a:	211e      	movs	r1, #30
 800595c:	f241 7070 	movw	r0, #6000	; 0x1770
 8005960:	f7ff fb34 	bl	8004fcc <driveA>
 8005964:	e078      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005966:	4b44      	ldr	r3, [pc, #272]	; (8005a78 <start_sectionA+0x1a0>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	d108      	bne.n	8005982 <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005970:	235b      	movs	r3, #91	; 0x5b
 8005972:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005976:	211e      	movs	r1, #30
 8005978:	f241 7070 	movw	r0, #6000	; 0x1770
 800597c:	f7ff fb26 	bl	8004fcc <driveA>
 8005980:	e06a      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005982:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <start_sectionA+0x1a0>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d165      	bne.n	8005a58 <start_sectionA+0x180>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 800598c:	2323      	movs	r3, #35	; 0x23
 800598e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005992:	211e      	movs	r1, #30
 8005994:	f241 7070 	movw	r0, #6000	; 0x1770
 8005998:	f7ff fb18 	bl	8004fcc <driveA>
 800599c:	e05c      	b.n	8005a58 <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH){
 800599e:	4b35      	ldr	r3, [pc, #212]	; (8005a74 <start_sectionA+0x19c>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d129      	bne.n	80059fc <start_sectionA+0x124>
		if(start_mode == 0){
 80059a8:	4b33      	ldr	r3, [pc, #204]	; (8005a78 <start_sectionA+0x1a0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <start_sectionA+0xec>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80059b2:	237d      	movs	r3, #125	; 0x7d
 80059b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059b8:	211e      	movs	r1, #30
 80059ba:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059be:	f7ff fb05 	bl	8004fcc <driveA>
 80059c2:	e049      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 1){
 80059c4:	4b2c      	ldr	r3, [pc, #176]	; (8005a78 <start_sectionA+0x1a0>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d108      	bne.n	80059e0 <start_sectionA+0x108>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059ce:	235b      	movs	r3, #91	; 0x5b
 80059d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059d4:	211e      	movs	r1, #30
 80059d6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059da:	f7ff faf7 	bl	8004fcc <driveA>
 80059de:	e03b      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 2){
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <start_sectionA+0x1a0>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d136      	bne.n	8005a58 <start_sectionA+0x180>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ea:	2323      	movs	r3, #35	; 0x23
 80059ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059f0:	211e      	movs	r1, #30
 80059f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80059f6:	f7ff fae9 	bl	8004fcc <driveA>
 80059fa:	e02d      	b.n	8005a58 <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH_HIGH){
 80059fc:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <start_sectionA+0x19c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d128      	bne.n	8005a58 <start_sectionA+0x180>
		if(start_mode == 0){
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <start_sectionA+0x1a0>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d108      	bne.n	8005a22 <start_sectionA+0x14a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a10:	237d      	movs	r3, #125	; 0x7d
 8005a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a16:	211e      	movs	r1, #30
 8005a18:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a1c:	f7ff fad6 	bl	8004fcc <driveA>
 8005a20:	e01a      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <start_sectionA+0x1a0>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d108      	bne.n	8005a3e <start_sectionA+0x166>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a2c:	235b      	movs	r3, #91	; 0x5b
 8005a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a32:	211e      	movs	r1, #30
 8005a34:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a38:	f7ff fac8 	bl	8004fcc <driveA>
 8005a3c:	e00c      	b.n	8005a58 <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <start_sectionA+0x1a0>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d107      	bne.n	8005a58 <start_sectionA+0x180>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a48:	2323      	movs	r3, #35	; 0x23
 8005a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a4e:	211e      	movs	r1, #30
 8005a50:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005a54:	f7ff faba 	bl	8004fcc <driveA>
		}
	}
	start_mode = 1;
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <start_sectionA+0x1a0>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <start_sectionA+0x1a4>)
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <start_sectionA+0x198>
 8005a6c:	f00b fd02 	bl	8011474 <get_wall_info>
}
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000456 	.word	0x20000456
 8005a78:	200015c8 	.word	0x200015c8
 8005a7c:	20000f68 	.word	0x20000f68

08005a80 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0

	control_start();
 8005a84:	f7ff f980 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005a88:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <half_sectionA+0x8c>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d108      	bne.n	8005aa4 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a92:	235b      	movs	r3, #91	; 0x5b
 8005a94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a98:	211e      	movs	r1, #30
 8005a9a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005a9e:	f7ff fa95 	bl	8004fcc <driveA>
 8005aa2:	e028      	b.n	8005af6 <half_sectionA+0x76>
	}else if(run_mode == MIDDLE){
 8005aa4:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <half_sectionA+0x8c>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d108      	bne.n	8005ac0 <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005aae:	235b      	movs	r3, #91	; 0x5b
 8005ab0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ab4:	211e      	movs	r1, #30
 8005ab6:	f241 7070 	movw	r0, #6000	; 0x1770
 8005aba:	f7ff fa87 	bl	8004fcc <driveA>
 8005abe:	e01a      	b.n	8005af6 <half_sectionA+0x76>
	}else if(run_mode == HIGH){
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <half_sectionA+0x8c>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d108      	bne.n	8005adc <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005aca:	235b      	movs	r3, #91	; 0x5b
 8005acc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ad0:	211e      	movs	r1, #30
 8005ad2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005ad6:	f7ff fa79 	bl	8004fcc <driveA>
 8005ada:	e00c      	b.n	8005af6 <half_sectionA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005adc:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <half_sectionA+0x8c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d107      	bne.n	8005af6 <half_sectionA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005ae6:	235b      	movs	r3, #91	; 0x5b
 8005ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005aec:	211e      	movs	r1, #30
 8005aee:	f242 7010 	movw	r0, #10000	; 0x2710
 8005af2:	f7ff fa6b 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <half_sectionA+0x90>)
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <half_sectionA+0x88>
 8005b04:	f00b fcb6 	bl	8011474 <get_wall_info>
}
 8005b08:	bf00      	nop
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000456 	.word	0x20000456
 8005b10:	20000f68 	.word	0x20000f68

08005b14 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005b18:	2003      	movs	r0, #3
 8005b1a:	f00b fd1f 	bl	801155c <full_led_write>

	control_start();
 8005b1e:	f7ff f933 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005b22:	4b1a      	ldr	r3, [pc, #104]	; (8005b8c <half_sectionD+0x78>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b2c:	235b      	movs	r3, #91	; 0x5b
 8005b2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b32:	211e      	movs	r1, #30
 8005b34:	4816      	ldr	r0, [pc, #88]	; (8005b90 <half_sectionD+0x7c>)
 8005b36:	f7ff fac3 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005b3a:	e025      	b.n	8005b88 <half_sectionD+0x74>
	}else if(run_mode == MIDDLE){
 8005b3c:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <half_sectionD+0x78>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d107      	bne.n	8005b56 <half_sectionD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005b46:	235b      	movs	r3, #91	; 0x5b
 8005b48:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b4c:	211e      	movs	r1, #30
 8005b4e:	4810      	ldr	r0, [pc, #64]	; (8005b90 <half_sectionD+0x7c>)
 8005b50:	f7ff fab6 	bl	80050c0 <driveD>
}
 8005b54:	e018      	b.n	8005b88 <half_sectionD+0x74>
	}else if(run_mode == HIGH){
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <half_sectionD+0x78>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d107      	bne.n	8005b70 <half_sectionD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b60:	235b      	movs	r3, #91	; 0x5b
 8005b62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b66:	211e      	movs	r1, #30
 8005b68:	4809      	ldr	r0, [pc, #36]	; (8005b90 <half_sectionD+0x7c>)
 8005b6a:	f7ff faa9 	bl	80050c0 <driveD>
}
 8005b6e:	e00b      	b.n	8005b88 <half_sectionD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005b70:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <half_sectionD+0x78>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d106      	bne.n	8005b88 <half_sectionD+0x74>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005b7a:	235b      	movs	r3, #91	; 0x5b
 8005b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b80:	211e      	movs	r1, #30
 8005b82:	4804      	ldr	r0, [pc, #16]	; (8005b94 <half_sectionD+0x80>)
 8005b84:	f7ff fa9c 	bl	80050c0 <driveD>
}
 8005b88:	bf00      	nop
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000456 	.word	0x20000456
 8005b90:	fffff060 	.word	0xfffff060
 8005b94:	ffffe890 	.word	0xffffe890

08005b98 <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0

	control_start();
 8005b9c:	f7ff f8f4 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005ba0:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <half_sectionVA+0x8c>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d108      	bne.n	8005bbc <half_sectionVA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005baa:	2382      	movs	r3, #130	; 0x82
 8005bac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bb0:	211e      	movs	r1, #30
 8005bb2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005bb6:	f7ff fa09 	bl	8004fcc <driveA>
 8005bba:	e028      	b.n	8005c0e <half_sectionVA+0x76>
	}else if(run_mode == MIDDLE){
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <half_sectionVA+0x8c>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d108      	bne.n	8005bd8 <half_sectionVA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005bc6:	2382      	movs	r3, #130	; 0x82
 8005bc8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005bcc:	211e      	movs	r1, #30
 8005bce:	f241 7070 	movw	r0, #6000	; 0x1770
 8005bd2:	f7ff f9fb 	bl	8004fcc <driveA>
 8005bd6:	e01a      	b.n	8005c0e <half_sectionVA+0x76>
	}else if(run_mode == HIGH){
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <half_sectionVA+0x8c>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d108      	bne.n	8005bf4 <half_sectionVA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005be2:	2382      	movs	r3, #130	; 0x82
 8005be4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005be8:	211e      	movs	r1, #30
 8005bea:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005bee:	f7ff f9ed 	bl	8004fcc <driveA>
 8005bf2:	e00c      	b.n	8005c0e <half_sectionVA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <half_sectionVA+0x8c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d107      	bne.n	8005c0e <half_sectionVA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005bfe:	2382      	movs	r3, #130	; 0x82
 8005c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c04:	211e      	movs	r1, #30
 8005c06:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c0a:	f7ff f9df 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <half_sectionVA+0x90>)
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <half_sectionVA+0x88>
 8005c1c:	f00b fc2a 	bl	8011474 <get_wall_info>
}
 8005c20:	bf00      	nop
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000456 	.word	0x20000456
 8005c28:	20000f68 	.word	0x20000f68

08005c2c <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005c30:	2003      	movs	r0, #3
 8005c32:	f00b fc93 	bl	801155c <full_led_write>

	control_start();
 8005c36:	f7ff f8a7 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <half_sectionVD+0x78>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d107      	bne.n	8005c54 <half_sectionVD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c44:	2382      	movs	r3, #130	; 0x82
 8005c46:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c4a:	211e      	movs	r1, #30
 8005c4c:	4816      	ldr	r0, [pc, #88]	; (8005ca8 <half_sectionVD+0x7c>)
 8005c4e:	f7ff fa37 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005c52:	e025      	b.n	8005ca0 <half_sectionVD+0x74>
	}else if(run_mode == MIDDLE){
 8005c54:	4b13      	ldr	r3, [pc, #76]	; (8005ca4 <half_sectionVD+0x78>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d107      	bne.n	8005c6e <half_sectionVD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005c5e:	2382      	movs	r3, #130	; 0x82
 8005c60:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c64:	211e      	movs	r1, #30
 8005c66:	4810      	ldr	r0, [pc, #64]	; (8005ca8 <half_sectionVD+0x7c>)
 8005c68:	f7ff fa2a 	bl	80050c0 <driveD>
}
 8005c6c:	e018      	b.n	8005ca0 <half_sectionVD+0x74>
	}else if(run_mode == HIGH){
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <half_sectionVD+0x78>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <half_sectionVD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c78:	2382      	movs	r3, #130	; 0x82
 8005c7a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c7e:	211e      	movs	r1, #30
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <half_sectionVD+0x7c>)
 8005c82:	f7ff fa1d 	bl	80050c0 <driveD>
}
 8005c86:	e00b      	b.n	8005ca0 <half_sectionVD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <half_sectionVD+0x78>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d106      	bne.n	8005ca0 <half_sectionVD+0x74>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c92:	2382      	movs	r3, #130	; 0x82
 8005c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c98:	211e      	movs	r1, #30
 8005c9a:	4804      	ldr	r0, [pc, #16]	; (8005cac <half_sectionVD+0x80>)
 8005c9c:	f7ff fa10 	bl	80050c0 <driveD>
}
 8005ca0:	bf00      	nop
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000456 	.word	0x20000456
 8005ca8:	fffff060 	.word	0xfffff060
 8005cac:	ffffe890 	.word	0xffffe890

08005cb0 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005cb4:	2007      	movs	r0, #7
 8005cb6:	f00b fc51 	bl	801155c <full_led_write>
	control_start();
 8005cba:	f7ff f865 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005cbe:	205b      	movs	r0, #91	; 0x5b
 8005cc0:	f7ff fad8 	bl	8005274 <driveU>
}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005ccc:	2007      	movs	r0, #7
 8005cce:	f00b fc45 	bl	801155c <full_led_write>
	control_start();
 8005cd2:	f7ff f859 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005cd6:	2082      	movs	r0, #130	; 0x82
 8005cd8:	f7ff facc 	bl	8005274 <driveU>
}
 8005cdc:	bf00      	nop
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005ce4:	f7ff fecc 	bl	8005a80 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005ce8:	f7ff ff14 	bl	8005b14 <half_sectionD>
}
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005cf4:	2004      	movs	r0, #4
 8005cf6:	f00b fc31 	bl	801155c <full_led_write>
	control_start();
 8005cfa:	f7ff f845 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005cfe:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <one_sectionA+0xbc>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d10d      	bne.n	8005d24 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d08:	4b29      	ldr	r3, [pc, #164]	; (8005db0 <one_sectionA+0xc0>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	b298      	uxth	r0, r3
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <one_sectionA+0xc4>)
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b21b      	sxth	r3, r3
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	23b6      	movs	r3, #182	; 0xb6
 8005d1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d1e:	f7ff f955 	bl	8004fcc <driveA>
 8005d22:	e037      	b.n	8005d94 <one_sectionA+0xa4>
	}else if(run_mode == MIDDLE){
 8005d24:	4b21      	ldr	r3, [pc, #132]	; (8005dac <one_sectionA+0xbc>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d10d      	bne.n	8005d4a <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <one_sectionA+0xc0>)
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	b298      	uxth	r0, r3
 8005d36:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <one_sectionA+0xc4>)
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	23b6      	movs	r3, #182	; 0xb6
 8005d40:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005d44:	f7ff f942 	bl	8004fcc <driveA>
 8005d48:	e024      	b.n	8005d94 <one_sectionA+0xa4>
	}else if(run_mode == HIGH){
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <one_sectionA+0xbc>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d10d      	bne.n	8005d70 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <one_sectionA+0xc0>)
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	b298      	uxth	r0, r3
 8005d5c:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <one_sectionA+0xc4>)
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	23b6      	movs	r3, #182	; 0xb6
 8005d66:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005d6a:	f7ff f92f 	bl	8004fcc <driveA>
 8005d6e:	e011      	b.n	8005d94 <one_sectionA+0xa4>
	}else if(run_mode == HIGH_HIGH){
 8005d70:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <one_sectionA+0xbc>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d10c      	bne.n	8005d94 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <one_sectionA+0xc0>)
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	b298      	uxth	r0, r3
 8005d82:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <one_sectionA+0xc4>)
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b21b      	sxth	r3, r3
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	23b6      	movs	r3, #182	; 0xb6
 8005d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d90:	f7ff f91c 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <one_sectionA+0xc8>)
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <one_sectionA+0xb6>
 8005da2:	f00b fb67 	bl	8011474 <get_wall_info>
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000456 	.word	0x20000456
 8005db0:	20000454 	.word	0x20000454
 8005db4:	20000f7c 	.word	0x20000f7c
 8005db8:	20000f68 	.word	0x20000f68

08005dbc <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005dc0:	2003      	movs	r0, #3
 8005dc2:	f00b fbcb 	bl	801155c <full_led_write>
	control_start();
 8005dc6:	f7fe ffdf 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005dca:	4b31      	ldr	r3, [pc, #196]	; (8005e90 <one_sectionD+0xd4>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d110      	bne.n	8005df6 <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <one_sectionD+0xd8>)
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	425b      	negs	r3, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	b218      	sxth	r0, r3
 8005de2:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <one_sectionD+0xdc>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b21b      	sxth	r3, r3
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	23b6      	movs	r3, #182	; 0xb6
 8005dec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005df0:	f7ff f966 	bl	80050c0 <driveD>
 8005df4:	e040      	b.n	8005e78 <one_sectionD+0xbc>
	}else if(run_mode == MIDDLE){
 8005df6:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <one_sectionD+0xd4>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d110      	bne.n	8005e22 <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e00:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <one_sectionD+0xd8>)
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b21b      	sxth	r3, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	425b      	negs	r3, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	b218      	sxth	r0, r3
 8005e0e:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <one_sectionD+0xdc>)
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	23b6      	movs	r3, #182	; 0xb6
 8005e18:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005e1c:	f7ff f950 	bl	80050c0 <driveD>
 8005e20:	e02a      	b.n	8005e78 <one_sectionD+0xbc>
	}else if(run_mode == HIGH){
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <one_sectionD+0xd4>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d110      	bne.n	8005e4e <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <one_sectionD+0xd8>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b21b      	sxth	r3, r3
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	425b      	negs	r3, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	b218      	sxth	r0, r3
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <one_sectionD+0xdc>)
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	23b6      	movs	r3, #182	; 0xb6
 8005e44:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005e48:	f7ff f93a 	bl	80050c0 <driveD>
 8005e4c:	e014      	b.n	8005e78 <one_sectionD+0xbc>
	}else if(run_mode == HIGH_HIGH){
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <one_sectionD+0xd4>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d10f      	bne.n	8005e78 <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <one_sectionD+0xd8>)
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	425b      	negs	r3, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b218      	sxth	r0, r3
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <one_sectionD+0xdc>)
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	23b6      	movs	r3, #182	; 0xb6
 8005e70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e74:	f7ff f924 	bl	80050c0 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <one_sectionD+0xe0>)
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <one_sectionD+0xce>
 8005e86:	f00b faf5 	bl	8011474 <get_wall_info>
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000456 	.word	0x20000456
 8005e94:	20000454 	.word	0x20000454
 8005e98:	20000f7c 	.word	0x20000f7c
 8005e9c:	20000f68 	.word	0x20000f68

08005ea0 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005ea4:	2004      	movs	r0, #4
 8005ea6:	f00b fb59 	bl	801155c <full_led_write>
	control_start();
 8005eaa:	f7fe ff6d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005eae:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <one_sectionVA+0xb0>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d10e      	bne.n	8005ed6 <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005eb8:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <one_sectionVA+0xb4>)
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b21b      	sxth	r3, r3
 8005ebe:	b298      	uxth	r0, r3
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <one_sectionVA+0xb8>)
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b21b      	sxth	r3, r3
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ecc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ed0:	f7ff f87c 	bl	8004fcc <driveA>
	}else if(run_mode == HIGH){
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8005ed4:	e03a      	b.n	8005f4c <one_sectionVA+0xac>
	}else if(run_mode == MIDDLE){
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <one_sectionVA+0xb0>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d10e      	bne.n	8005efe <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	; (8005f54 <one_sectionVA+0xb4>)
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b21b      	sxth	r3, r3
 8005ee6:	b298      	uxth	r0, r3
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <one_sectionVA+0xb8>)
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b21b      	sxth	r3, r3
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ef4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005ef8:	f7ff f868 	bl	8004fcc <driveA>
}
 8005efc:	e026      	b.n	8005f4c <one_sectionVA+0xac>
	}else if(run_mode == HIGH){
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <one_sectionVA+0xb0>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d10e      	bne.n	8005f26 <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <one_sectionVA+0xb4>)
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	b298      	uxth	r0, r3
 8005f10:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <one_sectionVA+0xb8>)
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b21b      	sxth	r3, r3
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f1c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f20:	f7ff f854 	bl	8004fcc <driveA>
}
 8005f24:	e012      	b.n	8005f4c <one_sectionVA+0xac>
	}else if(run_mode == HIGH_HIGH){
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <one_sectionVA+0xb0>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d10d      	bne.n	8005f4c <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <one_sectionVA+0xb4>)
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	b298      	uxth	r0, r3
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <one_sectionVA+0xb8>)
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f48:	f7ff f840 	bl	8004fcc <driveA>
}
 8005f4c:	bf00      	nop
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000456 	.word	0x20000456
 8005f54:	20000454 	.word	0x20000454
 8005f58:	20000f7c 	.word	0x20000f7c

08005f5c <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005f60:	2003      	movs	r0, #3
 8005f62:	f00b fafb 	bl	801155c <full_led_write>
	control_start();
 8005f66:	f7fe ff0f 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <one_sectionVD+0xc8>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d111      	bne.n	8005f98 <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005f74:	4b2c      	ldr	r3, [pc, #176]	; (8006028 <one_sectionVD+0xcc>)
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	425b      	negs	r3, r3
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	b218      	sxth	r0, r3
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <one_sectionVD+0xd0>)
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b21b      	sxth	r3, r3
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f8e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f92:	f7ff f895 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 8005f96:	e043      	b.n	8006020 <one_sectionVD+0xc4>
	}else if(run_mode == MIDDLE){
 8005f98:	4b22      	ldr	r3, [pc, #136]	; (8006024 <one_sectionVD+0xc8>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d111      	bne.n	8005fc6 <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8005fa2:	4b21      	ldr	r3, [pc, #132]	; (8006028 <one_sectionVD+0xcc>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b21b      	sxth	r3, r3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	425b      	negs	r3, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	b218      	sxth	r0, r3
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	; (800602c <one_sectionVD+0xd0>)
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fbc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005fc0:	f7ff f87e 	bl	80050c0 <driveD>
}
 8005fc4:	e02c      	b.n	8006020 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH){
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <one_sectionVD+0xc8>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d111      	bne.n	8005ff4 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005fd0:	4b15      	ldr	r3, [pc, #84]	; (8006028 <one_sectionVD+0xcc>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	425b      	negs	r3, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b218      	sxth	r0, r3
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <one_sectionVD+0xd0>)
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b21b      	sxth	r3, r3
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fea:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005fee:	f7ff f867 	bl	80050c0 <driveD>
}
 8005ff2:	e015      	b.n	8006020 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH_HIGH){
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <one_sectionVD+0xc8>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d110      	bne.n	8006020 <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <one_sectionVD+0xcc>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b21b      	sxth	r3, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	425b      	negs	r3, r3
 8006008:	b29b      	uxth	r3, r3
 800600a:	b218      	sxth	r0, r3
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <one_sectionVD+0xd0>)
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b21b      	sxth	r3, r3
 8006012:	b29a      	uxth	r2, r3
 8006014:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800601c:	f7ff f850 	bl	80050c0 <driveD>
}
 8006020:	bf00      	nop
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000456 	.word	0x20000456
 8006028:	20000454 	.word	0x20000454
 800602c:	20000f7c 	.word	0x20000f7c

08006030 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8006034:	2007      	movs	r0, #7
 8006036:	f00b fa91 	bl	801155c <full_led_write>
	control_start();
 800603a:	f7fe fea5 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 800603e:	20b6      	movs	r0, #182	; 0xb6
 8006040:	f7ff f918 	bl	8005274 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <one_sectionU+0x2c>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <one_sectionU+0x26>
 8006052:	f00b fa0f 	bl	8011474 <get_wall_info>
}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000f68 	.word	0x20000f68

08006060 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8006060:	b598      	push	{r3, r4, r7, lr}
 8006062:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8006064:	4b56      	ldr	r3, [pc, #344]	; (80061c0 <rotate_R90+0x160>)
 8006066:	4a57      	ldr	r2, [pc, #348]	; (80061c4 <rotate_R90+0x164>)
 8006068:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 800606a:	4b57      	ldr	r3, [pc, #348]	; (80061c8 <rotate_R90+0x168>)
 800606c:	4a57      	ldr	r2, [pc, #348]	; (80061cc <rotate_R90+0x16c>)
 800606e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006070:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <rotate_R90+0x170>)
 8006072:	4a58      	ldr	r2, [pc, #352]	; (80061d4 <rotate_R90+0x174>)
 8006074:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8006076:	4b52      	ldr	r3, [pc, #328]	; (80061c0 <rotate_R90+0x160>)
 8006078:	edd3 7a00 	vldr	s15, [r3]
 800607c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80061d8 <rotate_R90+0x178>
 8006080:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006084:	ee16 0a90 	vmov	r0, s13
 8006088:	f7fa fa56 	bl	8000538 <__aeabi_f2d>
 800608c:	a34a      	add	r3, pc, #296	; (adr r3, 80061b8 <rotate_R90+0x158>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa faa9 	bl	80005e8 <__aeabi_dmul>
 8006096:	4603      	mov	r3, r0
 8006098:	460c      	mov	r4, r1
 800609a:	4618      	mov	r0, r3
 800609c:	4621      	mov	r1, r4
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	4b4e      	ldr	r3, [pc, #312]	; (80061dc <rotate_R90+0x17c>)
 80060a4:	f7fa faa0 	bl	80005e8 <__aeabi_dmul>
 80060a8:	4603      	mov	r3, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	4618      	mov	r0, r3
 80060ae:	4621      	mov	r1, r4
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060b8:	f7fa fbc0 	bl	800083c <__aeabi_ddiv>
 80060bc:	4603      	mov	r3, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4618      	mov	r0, r3
 80060c2:	4621      	mov	r1, r4
 80060c4:	f7fa fd68 	bl	8000b98 <__aeabi_d2f>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b45      	ldr	r3, [pc, #276]	; (80061e0 <rotate_R90+0x180>)
 80060cc:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80060ce:	4b3c      	ldr	r3, [pc, #240]	; (80061c0 <rotate_R90+0x160>)
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	eef1 7a67 	vneg.f32	s15, s15
 80060d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80061d8 <rotate_R90+0x178>
 80060dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060e0:	ee16 0a90 	vmov	r0, s13
 80060e4:	f7fa fa28 	bl	8000538 <__aeabi_f2d>
 80060e8:	a333      	add	r3, pc, #204	; (adr r3, 80061b8 <rotate_R90+0x158>)
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f7fa fa7b 	bl	80005e8 <__aeabi_dmul>
 80060f2:	4603      	mov	r3, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	4618      	mov	r0, r3
 80060f8:	4621      	mov	r1, r4
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	4b37      	ldr	r3, [pc, #220]	; (80061dc <rotate_R90+0x17c>)
 8006100:	f7fa fa72 	bl	80005e8 <__aeabi_dmul>
 8006104:	4603      	mov	r3, r0
 8006106:	460c      	mov	r4, r1
 8006108:	4618      	mov	r0, r3
 800610a:	4621      	mov	r1, r4
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006114:	f7fa fb92 	bl	800083c <__aeabi_ddiv>
 8006118:	4603      	mov	r3, r0
 800611a:	460c      	mov	r4, r1
 800611c:	4618      	mov	r0, r3
 800611e:	4621      	mov	r1, r4
 8006120:	f7fa fd3a 	bl	8000b98 <__aeabi_d2f>
 8006124:	4602      	mov	r2, r0
 8006126:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <rotate_R90+0x184>)
 8006128:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800612a:	f7fe fdd5 	bl	8004cd8 <drive_start>
	control_stop();
 800612e:	f7fe fe3f 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-80);
 8006132:	bf00      	nop
 8006134:	4b2c      	ldr	r3, [pc, #176]	; (80061e8 <rotate_R90+0x188>)
 8006136:	edd3 7a00 	vldr	s15, [r3]
 800613a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80061ec <rotate_R90+0x18c>
 800613e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <rotate_R90+0x190>)
 8006144:	edd3 7a00 	vldr	s15, [r3]
 8006148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800614c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006150:	d4f0      	bmi.n	8006134 <rotate_R90+0xd4>

	accel_l = -10000;
 8006152:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <rotate_R90+0x168>)
 8006154:	4a27      	ldr	r2, [pc, #156]	; (80061f4 <rotate_R90+0x194>)
 8006156:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006158:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <rotate_R90+0x170>)
 800615a:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <rotate_R90+0x198>)
 800615c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800615e:	4b27      	ldr	r3, [pc, #156]	; (80061fc <rotate_R90+0x19c>)
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <rotate_R90+0x1a0>)
 8006162:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8006164:	4b27      	ldr	r3, [pc, #156]	; (8006204 <rotate_R90+0x1a4>)
 8006166:	4a28      	ldr	r2, [pc, #160]	; (8006208 <rotate_R90+0x1a8>)
 8006168:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 800616a:	bf00      	nop
 800616c:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <rotate_R90+0x188>)
 800616e:	edd3 7a00 	vldr	s15, [r3]
 8006172:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800620c <rotate_R90+0x1ac>
 8006176:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800617a:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <rotate_R90+0x190>)
 800617c:	edd3 7a00 	vldr	s15, [r3]
 8006180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	d4f0      	bmi.n	800616c <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 800618a:	4b21      	ldr	r3, [pc, #132]	; (8006210 <rotate_R90+0x1b0>)
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006198:	2101      	movs	r1, #1
 800619a:	2001      	movs	r0, #1
 800619c:	f009 fb54 	bl	800f848 <turn_dir>
 80061a0:	e003      	b.n	80061aa <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80061a2:	2103      	movs	r1, #3
 80061a4:	2002      	movs	r0, #2
 80061a6:	f009 fb4f 	bl	800f848 <turn_dir>
	}
	drive_stop();
 80061aa:	f7fe fdc5 	bl	8004d38 <drive_stop>
}
 80061ae:	bf00      	nop
 80061b0:	bd98      	pop	{r3, r4, r7, pc}
 80061b2:	bf00      	nop
 80061b4:	f3af 8000 	nop.w
 80061b8:	54442d18 	.word	0x54442d18
 80061bc:	400921fb 	.word	0x400921fb
 80061c0:	200001a8 	.word	0x200001a8
 80061c4:	44480000 	.word	0x44480000
 80061c8:	20000d58 	.word	0x20000d58
 80061cc:	453b8000 	.word	0x453b8000
 80061d0:	20000ae4 	.word	0x20000ae4
 80061d4:	c53b8000 	.word	0xc53b8000
 80061d8:	43340000 	.word	0x43340000
 80061dc:	40508000 	.word	0x40508000
 80061e0:	2000077c 	.word	0x2000077c
 80061e4:	20000f6c 	.word	0x20000f6c
 80061e8:	20000bf8 	.word	0x20000bf8
 80061ec:	42a00000 	.word	0x42a00000
 80061f0:	20000b5c 	.word	0x20000b5c
 80061f4:	c61c4000 	.word	0xc61c4000
 80061f8:	461c4000 	.word	0x461c4000
 80061fc:	20000b54 	.word	0x20000b54
 8006200:	42c80000 	.word	0x42c80000
 8006204:	200001a4 	.word	0x200001a4
 8006208:	c2c80000 	.word	0xc2c80000
 800620c:	42b40000 	.word	0x42b40000
 8006210:	20000f68 	.word	0x20000f68
 8006214:	00000000 	.word	0x00000000

08006218 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006218:	b598      	push	{r3, r4, r7, lr}
 800621a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800621c:	4b56      	ldr	r3, [pc, #344]	; (8006378 <rotate_L90+0x160>)
 800621e:	4a57      	ldr	r2, [pc, #348]	; (800637c <rotate_L90+0x164>)
 8006220:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8006222:	4b57      	ldr	r3, [pc, #348]	; (8006380 <rotate_L90+0x168>)
 8006224:	4a57      	ldr	r2, [pc, #348]	; (8006384 <rotate_L90+0x16c>)
 8006226:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8006228:	4b57      	ldr	r3, [pc, #348]	; (8006388 <rotate_L90+0x170>)
 800622a:	4a58      	ldr	r2, [pc, #352]	; (800638c <rotate_L90+0x174>)
 800622c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800622e:	4b52      	ldr	r3, [pc, #328]	; (8006378 <rotate_L90+0x160>)
 8006230:	edd3 7a00 	vldr	s15, [r3]
 8006234:	eef1 7a67 	vneg.f32	s15, s15
 8006238:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006390 <rotate_L90+0x178>
 800623c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006240:	ee16 0a90 	vmov	r0, s13
 8006244:	f7fa f978 	bl	8000538 <__aeabi_f2d>
 8006248:	a349      	add	r3, pc, #292	; (adr r3, 8006370 <rotate_L90+0x158>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f7fa f9cb 	bl	80005e8 <__aeabi_dmul>
 8006252:	4603      	mov	r3, r0
 8006254:	460c      	mov	r4, r1
 8006256:	4618      	mov	r0, r3
 8006258:	4621      	mov	r1, r4
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	4b4d      	ldr	r3, [pc, #308]	; (8006394 <rotate_L90+0x17c>)
 8006260:	f7fa f9c2 	bl	80005e8 <__aeabi_dmul>
 8006264:	4603      	mov	r3, r0
 8006266:	460c      	mov	r4, r1
 8006268:	4618      	mov	r0, r3
 800626a:	4621      	mov	r1, r4
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006274:	f7fa fae2 	bl	800083c <__aeabi_ddiv>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	4618      	mov	r0, r3
 800627e:	4621      	mov	r1, r4
 8006280:	f7fa fc8a 	bl	8000b98 <__aeabi_d2f>
 8006284:	4602      	mov	r2, r0
 8006286:	4b44      	ldr	r3, [pc, #272]	; (8006398 <rotate_L90+0x180>)
 8006288:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800628a:	4b3b      	ldr	r3, [pc, #236]	; (8006378 <rotate_L90+0x160>)
 800628c:	edd3 7a00 	vldr	s15, [r3]
 8006290:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006390 <rotate_L90+0x178>
 8006294:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006298:	ee16 0a90 	vmov	r0, s13
 800629c:	f7fa f94c 	bl	8000538 <__aeabi_f2d>
 80062a0:	a333      	add	r3, pc, #204	; (adr r3, 8006370 <rotate_L90+0x158>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa f99f 	bl	80005e8 <__aeabi_dmul>
 80062aa:	4603      	mov	r3, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	4618      	mov	r0, r3
 80062b0:	4621      	mov	r1, r4
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	4b37      	ldr	r3, [pc, #220]	; (8006394 <rotate_L90+0x17c>)
 80062b8:	f7fa f996 	bl	80005e8 <__aeabi_dmul>
 80062bc:	4603      	mov	r3, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	4618      	mov	r0, r3
 80062c2:	4621      	mov	r1, r4
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062cc:	f7fa fab6 	bl	800083c <__aeabi_ddiv>
 80062d0:	4603      	mov	r3, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4618      	mov	r0, r3
 80062d6:	4621      	mov	r1, r4
 80062d8:	f7fa fc5e 	bl	8000b98 <__aeabi_d2f>
 80062dc:	4602      	mov	r2, r0
 80062de:	4b2f      	ldr	r3, [pc, #188]	; (800639c <rotate_L90+0x184>)
 80062e0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80062e2:	f7fe fcf9 	bl	8004cd8 <drive_start>
	control_stop();
 80062e6:	f7fe fd63 	bl	8004db0 <control_stop>
	while(degree_z < target_degree_z+80);
 80062ea:	bf00      	nop
 80062ec:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <rotate_L90+0x188>)
 80062ee:	edd3 7a00 	vldr	s15, [r3]
 80062f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80063a4 <rotate_L90+0x18c>
 80062f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062fa:	4b2b      	ldr	r3, [pc, #172]	; (80063a8 <rotate_L90+0x190>)
 80062fc:	edd3 7a00 	vldr	s15, [r3]
 8006300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006308:	dcf0      	bgt.n	80062ec <rotate_L90+0xd4>

	accel_l = 10000;
 800630a:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <rotate_L90+0x168>)
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <rotate_L90+0x194>)
 800630e:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006310:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <rotate_L90+0x170>)
 8006312:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <rotate_L90+0x198>)
 8006314:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8006316:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <rotate_L90+0x19c>)
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <rotate_L90+0x1a0>)
 800631a:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 800631c:	4b27      	ldr	r3, [pc, #156]	; (80063bc <rotate_L90+0x1a4>)
 800631e:	4a28      	ldr	r2, [pc, #160]	; (80063c0 <rotate_L90+0x1a8>)
 8006320:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006322:	bf00      	nop
 8006324:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <rotate_L90+0x188>)
 8006326:	edd3 7a00 	vldr	s15, [r3]
 800632a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80063c4 <rotate_L90+0x1ac>
 800632e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006332:	4b1d      	ldr	r3, [pc, #116]	; (80063a8 <rotate_L90+0x190>)
 8006334:	edd3 7a00 	vldr	s15, [r3]
 8006338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800633c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006340:	dcf0      	bgt.n	8006324 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 8006342:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <rotate_L90+0x1b0>)
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006350:	2101      	movs	r1, #1
 8006352:	20ff      	movs	r0, #255	; 0xff
 8006354:	f009 fa78 	bl	800f848 <turn_dir>
 8006358:	e003      	b.n	8006362 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 800635a:	2103      	movs	r1, #3
 800635c:	20fe      	movs	r0, #254	; 0xfe
 800635e:	f009 fa73 	bl	800f848 <turn_dir>
	}
	drive_stop();
 8006362:	f7fe fce9 	bl	8004d38 <drive_stop>
}
 8006366:	bf00      	nop
 8006368:	bd98      	pop	{r3, r4, r7, pc}
 800636a:	bf00      	nop
 800636c:	f3af 8000 	nop.w
 8006370:	54442d18 	.word	0x54442d18
 8006374:	400921fb 	.word	0x400921fb
 8006378:	200001a8 	.word	0x200001a8
 800637c:	44480000 	.word	0x44480000
 8006380:	20000d58 	.word	0x20000d58
 8006384:	c53b8000 	.word	0xc53b8000
 8006388:	20000ae4 	.word	0x20000ae4
 800638c:	453b8000 	.word	0x453b8000
 8006390:	43340000 	.word	0x43340000
 8006394:	40508000 	.word	0x40508000
 8006398:	20000b54 	.word	0x20000b54
 800639c:	200001a4 	.word	0x200001a4
 80063a0:	20000bf8 	.word	0x20000bf8
 80063a4:	42a00000 	.word	0x42a00000
 80063a8:	20000b5c 	.word	0x20000b5c
 80063ac:	461c4000 	.word	0x461c4000
 80063b0:	c61c4000 	.word	0xc61c4000
 80063b4:	2000077c 	.word	0x2000077c
 80063b8:	c2c80000 	.word	0xc2c80000
 80063bc:	20000f6c 	.word	0x20000f6c
 80063c0:	42c80000 	.word	0x42c80000
 80063c4:	42b40000 	.word	0x42b40000
 80063c8:	20000f68 	.word	0x20000f68
 80063cc:	00000000 	.word	0x00000000

080063d0 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80063d0:	b598      	push	{r3, r4, r7, lr}
 80063d2:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 80063d4:	2002      	movs	r0, #2
 80063d6:	f00b f8c1 	bl	801155c <full_led_write>
	target_omega_z = 800;
 80063da:	4b55      	ldr	r3, [pc, #340]	; (8006530 <rotate_180+0x160>)
 80063dc:	4a55      	ldr	r2, [pc, #340]	; (8006534 <rotate_180+0x164>)
 80063de:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80063e0:	4b55      	ldr	r3, [pc, #340]	; (8006538 <rotate_180+0x168>)
 80063e2:	4a56      	ldr	r2, [pc, #344]	; (800653c <rotate_180+0x16c>)
 80063e4:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80063e6:	4b56      	ldr	r3, [pc, #344]	; (8006540 <rotate_180+0x170>)
 80063e8:	4a56      	ldr	r2, [pc, #344]	; (8006544 <rotate_180+0x174>)
 80063ea:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80063ec:	4b50      	ldr	r3, [pc, #320]	; (8006530 <rotate_180+0x160>)
 80063ee:	edd3 7a00 	vldr	s15, [r3]
 80063f2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006548 <rotate_180+0x178>
 80063f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063fa:	ee16 0a90 	vmov	r0, s13
 80063fe:	f7fa f89b 	bl	8000538 <__aeabi_f2d>
 8006402:	a349      	add	r3, pc, #292	; (adr r3, 8006528 <rotate_180+0x158>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7fa f8ee 	bl	80005e8 <__aeabi_dmul>
 800640c:	4603      	mov	r3, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4618      	mov	r0, r3
 8006412:	4621      	mov	r1, r4
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	4b4c      	ldr	r3, [pc, #304]	; (800654c <rotate_180+0x17c>)
 800641a:	f7fa f8e5 	bl	80005e8 <__aeabi_dmul>
 800641e:	4603      	mov	r3, r0
 8006420:	460c      	mov	r4, r1
 8006422:	4618      	mov	r0, r3
 8006424:	4621      	mov	r1, r4
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800642e:	f7fa fa05 	bl	800083c <__aeabi_ddiv>
 8006432:	4603      	mov	r3, r0
 8006434:	460c      	mov	r4, r1
 8006436:	4618      	mov	r0, r3
 8006438:	4621      	mov	r1, r4
 800643a:	f7fa fbad 	bl	8000b98 <__aeabi_d2f>
 800643e:	4602      	mov	r2, r0
 8006440:	4b43      	ldr	r3, [pc, #268]	; (8006550 <rotate_180+0x180>)
 8006442:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8006444:	4b3a      	ldr	r3, [pc, #232]	; (8006530 <rotate_180+0x160>)
 8006446:	edd3 7a00 	vldr	s15, [r3]
 800644a:	eef1 7a67 	vneg.f32	s15, s15
 800644e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006548 <rotate_180+0x178>
 8006452:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006456:	ee16 0a90 	vmov	r0, s13
 800645a:	f7fa f86d 	bl	8000538 <__aeabi_f2d>
 800645e:	a332      	add	r3, pc, #200	; (adr r3, 8006528 <rotate_180+0x158>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f7fa f8c0 	bl	80005e8 <__aeabi_dmul>
 8006468:	4603      	mov	r3, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4618      	mov	r0, r3
 800646e:	4621      	mov	r1, r4
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	4b35      	ldr	r3, [pc, #212]	; (800654c <rotate_180+0x17c>)
 8006476:	f7fa f8b7 	bl	80005e8 <__aeabi_dmul>
 800647a:	4603      	mov	r3, r0
 800647c:	460c      	mov	r4, r1
 800647e:	4618      	mov	r0, r3
 8006480:	4621      	mov	r1, r4
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800648a:	f7fa f9d7 	bl	800083c <__aeabi_ddiv>
 800648e:	4603      	mov	r3, r0
 8006490:	460c      	mov	r4, r1
 8006492:	4618      	mov	r0, r3
 8006494:	4621      	mov	r1, r4
 8006496:	f7fa fb7f 	bl	8000b98 <__aeabi_d2f>
 800649a:	4602      	mov	r2, r0
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <rotate_180+0x184>)
 800649e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80064a0:	f7fe fc1a 	bl	8004cd8 <drive_start>
	control_stop();
 80064a4:	f7fe fc84 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-160);
 80064a8:	bf00      	nop
 80064aa:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <rotate_180+0x188>)
 80064ac:	edd3 7a00 	vldr	s15, [r3]
 80064b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800655c <rotate_180+0x18c>
 80064b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064b8:	4b29      	ldr	r3, [pc, #164]	; (8006560 <rotate_180+0x190>)
 80064ba:	edd3 7a00 	vldr	s15, [r3]
 80064be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c6:	d4f0      	bmi.n	80064aa <rotate_180+0xda>

	accel_l = -10000;
 80064c8:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <rotate_180+0x168>)
 80064ca:	4a26      	ldr	r2, [pc, #152]	; (8006564 <rotate_180+0x194>)
 80064cc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064ce:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <rotate_180+0x170>)
 80064d0:	4a25      	ldr	r2, [pc, #148]	; (8006568 <rotate_180+0x198>)
 80064d2:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <rotate_180+0x19c>)
 80064d6:	4a26      	ldr	r2, [pc, #152]	; (8006570 <rotate_180+0x1a0>)
 80064d8:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80064da:	4b26      	ldr	r3, [pc, #152]	; (8006574 <rotate_180+0x1a4>)
 80064dc:	4a26      	ldr	r2, [pc, #152]	; (8006578 <rotate_180+0x1a8>)
 80064de:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80064e0:	bf00      	nop
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <rotate_180+0x188>)
 80064e4:	edd3 7a00 	vldr	s15, [r3]
 80064e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006548 <rotate_180+0x178>
 80064ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064f0:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <rotate_180+0x190>)
 80064f2:	edd3 7a00 	vldr	s15, [r3]
 80064f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fe:	d4f0      	bmi.n	80064e2 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006500:	4b1e      	ldr	r3, [pc, #120]	; (800657c <rotate_180+0x1ac>)
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 800650e:	2101      	movs	r1, #1
 8006510:	2002      	movs	r0, #2
 8006512:	f009 f999 	bl	800f848 <turn_dir>
 8006516:	e003      	b.n	8006520 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006518:	2103      	movs	r1, #3
 800651a:	2004      	movs	r0, #4
 800651c:	f009 f994 	bl	800f848 <turn_dir>
	}
	drive_stop();
 8006520:	f7fe fc0a 	bl	8004d38 <drive_stop>

}
 8006524:	bf00      	nop
 8006526:	bd98      	pop	{r3, r4, r7, pc}
 8006528:	54442d18 	.word	0x54442d18
 800652c:	400921fb 	.word	0x400921fb
 8006530:	200001a8 	.word	0x200001a8
 8006534:	44480000 	.word	0x44480000
 8006538:	20000d58 	.word	0x20000d58
 800653c:	453b8000 	.word	0x453b8000
 8006540:	20000ae4 	.word	0x20000ae4
 8006544:	c53b8000 	.word	0xc53b8000
 8006548:	43340000 	.word	0x43340000
 800654c:	40508000 	.word	0x40508000
 8006550:	2000077c 	.word	0x2000077c
 8006554:	20000f6c 	.word	0x20000f6c
 8006558:	20000bf8 	.word	0x20000bf8
 800655c:	43200000 	.word	0x43200000
 8006560:	20000b5c 	.word	0x20000b5c
 8006564:	c61c4000 	.word	0xc61c4000
 8006568:	461c4000 	.word	0x461c4000
 800656c:	20000b54 	.word	0x20000b54
 8006570:	42c80000 	.word	0x42c80000
 8006574:	200001a4 	.word	0x200001a4
 8006578:	c2c80000 	.word	0xc2c80000
 800657c:	20000f68 	.word	0x20000f68

08006580 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006586:	2005      	movs	r0, #5
 8006588:	f00a ffe8 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 800658c:	4b7d      	ldr	r3, [pc, #500]	; (8006784 <slalom_R90+0x204>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d12a      	bne.n	80065ec <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006596:	23fa      	movs	r3, #250	; 0xfa
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800659e:	2212      	movs	r2, #18
 80065a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80065a8:	f7fe ff62 	bl	8005470 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 80065ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80065b0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80065b4:	4974      	ldr	r1, [pc, #464]	; (8006788 <slalom_R90+0x208>)
 80065b6:	4875      	ldr	r0, [pc, #468]	; (800678c <slalom_R90+0x20c>)
 80065b8:	f7fe ffd6 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80065bc:	4b74      	ldr	r3, [pc, #464]	; (8006790 <slalom_R90+0x210>)
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065ca:	2101      	movs	r1, #1
 80065cc:	2001      	movs	r0, #1
 80065ce:	f009 f93b 	bl	800f848 <turn_dir>
 80065d2:	e003      	b.n	80065dc <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065d4:	2103      	movs	r1, #3
 80065d6:	2002      	movs	r0, #2
 80065d8:	f009 f936 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80065dc:	2219      	movs	r2, #25
 80065de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80065e6:	f7ff f8e1 	bl	80057ac <slalomB>
 80065ea:	e0be      	b.n	800676a <slalom_R90+0x1ea>
	}else if(run_mode == MIDDLE){
 80065ec:	4b65      	ldr	r3, [pc, #404]	; (8006784 <slalom_R90+0x204>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d12a      	bne.n	800664c <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 80065f6:	23f0      	movs	r3, #240	; 0xf0
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80065fe:	2219      	movs	r2, #25
 8006600:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006604:	f242 7010 	movw	r0, #10000	; 0x2710
 8006608:	f7fe ff32 	bl	8005470 <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -85, SPEED_MIDDLE);
 800660c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006610:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006614:	495f      	ldr	r1, [pc, #380]	; (8006794 <slalom_R90+0x214>)
 8006616:	4860      	ldr	r0, [pc, #384]	; (8006798 <slalom_R90+0x218>)
 8006618:	f7fe ffa6 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800661c:	4b5c      	ldr	r3, [pc, #368]	; (8006790 <slalom_R90+0x210>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800662a:	2101      	movs	r1, #1
 800662c:	2001      	movs	r0, #1
 800662e:	f009 f90b 	bl	800f848 <turn_dir>
 8006632:	e003      	b.n	800663c <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006634:	2103      	movs	r1, #3
 8006636:	2002      	movs	r0, #2
 8006638:	f009 f906 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 800663c:	223c      	movs	r2, #60	; 0x3c
 800663e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006642:	f242 7010 	movw	r0, #10000	; 0x2710
 8006646:	f7ff f8b1 	bl	80057ac <slalomB>
 800664a:	e08e      	b.n	800676a <slalom_R90+0x1ea>
	}else if(run_mode == HIGH){
 800664c:	4b4d      	ldr	r3, [pc, #308]	; (8006784 <slalom_R90+0x204>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b03      	cmp	r3, #3
 8006654:	d12a      	bne.n	80066ac <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006656:	23b4      	movs	r3, #180	; 0xb4
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800665e:	2216      	movs	r2, #22
 8006660:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006664:	f242 7010 	movw	r0, #10000	; 0x2710
 8006668:	f7fe ff02 	bl	8005470 <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -70, SPEED_HIGH);
 800666c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006670:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006674:	4949      	ldr	r1, [pc, #292]	; (800679c <slalom_R90+0x21c>)
 8006676:	484a      	ldr	r0, [pc, #296]	; (80067a0 <slalom_R90+0x220>)
 8006678:	f7fe ff76 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800667c:	4b44      	ldr	r3, [pc, #272]	; (8006790 <slalom_R90+0x210>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800668a:	2101      	movs	r1, #1
 800668c:	2001      	movs	r0, #1
 800668e:	f009 f8db 	bl	800f848 <turn_dir>
 8006692:	e003      	b.n	800669c <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006694:	2103      	movs	r1, #3
 8006696:	2002      	movs	r0, #2
 8006698:	f009 f8d6 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 800669c:	225a      	movs	r2, #90	; 0x5a
 800669e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80066a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80066a6:	f7ff f881 	bl	80057ac <slalomB>
 80066aa:	e05e      	b.n	800676a <slalom_R90+0x1ea>
	}else if(run_mode == HIGH_HIGH){
 80066ac:	4b35      	ldr	r3, [pc, #212]	; (8006784 <slalom_R90+0x204>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d12a      	bne.n	800670c <slalom_R90+0x18c>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 80066b6:	23b4      	movs	r3, #180	; 0xb4
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80066be:	220d      	movs	r2, #13
 80066c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80066c8:	f7fe fed2 	bl	8005470 <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -50, SPEED_HIGH_HIGH);
 80066cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066d0:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80066d4:	4931      	ldr	r1, [pc, #196]	; (800679c <slalom_R90+0x21c>)
 80066d6:	4833      	ldr	r0, [pc, #204]	; (80067a4 <slalom_R90+0x224>)
 80066d8:	f7fe ff46 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80066dc:	4b2c      	ldr	r3, [pc, #176]	; (8006790 <slalom_R90+0x210>)
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066ea:	2101      	movs	r1, #1
 80066ec:	2001      	movs	r0, #1
 80066ee:	f009 f8ab 	bl	800f848 <turn_dir>
 80066f2:	e003      	b.n	80066fc <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066f4:	2103      	movs	r1, #3
 80066f6:	2002      	movs	r0, #2
 80066f8:	f009 f8a6 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 80066fc:	2273      	movs	r2, #115	; 0x73
 80066fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006702:	f242 7010 	movw	r0, #10000	; 0x2710
 8006706:	f7ff f851 	bl	80057ac <slalomB>
 800670a:	e02e      	b.n	800676a <slalom_R90+0x1ea>
	}else if(run_mode == 5){
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <slalom_R90+0x204>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b05      	cmp	r3, #5
 8006714:	d129      	bne.n	800676a <slalom_R90+0x1ea>
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006716:	23b4      	movs	r3, #180	; 0xb4
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800671e:	220d      	movs	r2, #13
 8006720:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006724:	f242 7010 	movw	r0, #10000	; 0x2710
 8006728:	f7fe fea2 	bl	8005470 <slalomF>
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -45, SPEED_5);
 800672c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006730:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006734:	491c      	ldr	r1, [pc, #112]	; (80067a8 <slalom_R90+0x228>)
 8006736:	481d      	ldr	r0, [pc, #116]	; (80067ac <slalom_R90+0x22c>)
 8006738:	f7fe ff16 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800673c:	4b14      	ldr	r3, [pc, #80]	; (8006790 <slalom_R90+0x210>)
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <slalom_R90+0x1d4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800674a:	2101      	movs	r1, #1
 800674c:	2001      	movs	r0, #1
 800674e:	f009 f87b 	bl	800f848 <turn_dir>
 8006752:	e003      	b.n	800675c <slalom_R90+0x1dc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006754:	2103      	movs	r1, #3
 8006756:	2002      	movs	r0, #2
 8006758:	f009 f876 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 800675c:	2282      	movs	r2, #130	; 0x82
 800675e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006762:	f242 7010 	movw	r0, #10000	; 0x2710
 8006766:	f7ff f821 	bl	80057ac <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800676a:	4b09      	ldr	r3, [pc, #36]	; (8006790 <slalom_R90+0x210>)
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <slalom_R90+0x1fc>
 8006778:	f00a fe7c 	bl	8011474 <get_wall_info>
}
 800677c:	bf00      	nop
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000456 	.word	0x20000456
 8006788:	fffffdda 	.word	0xfffffdda
 800678c:	fffff060 	.word	0xfffff060
 8006790:	20000f68 	.word	0x20000f68
 8006794:	fffffc7c 	.word	0xfffffc7c
 8006798:	ffffd120 	.word	0xffffd120
 800679c:	fffffb50 	.word	0xfffffb50
 80067a0:	ffffa240 	.word	0xffffa240
 80067a4:	ffff8300 	.word	0xffff8300
 80067a8:	fffff8f8 	.word	0xfffff8f8
 80067ac:	ffff63c0 	.word	0xffff63c0

080067b0 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80067b6:	2006      	movs	r0, #6
 80067b8:	f00a fed0 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 80067bc:	4b7f      	ldr	r3, [pc, #508]	; (80069bc <slalom_L90+0x20c>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d12b      	bne.n	800681e <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 80067c6:	23fa      	movs	r3, #250	; 0xfa
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067ce:	2212      	movs	r2, #18
 80067d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80067d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80067d8:	f7fe fe4a 	bl	8005470 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 80067dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80067e0:	225a      	movs	r2, #90	; 0x5a
 80067e2:	f240 2126 	movw	r1, #550	; 0x226
 80067e6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80067ea:	f7fe febd 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80067ee:	4b74      	ldr	r3, [pc, #464]	; (80069c0 <slalom_L90+0x210>)
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067fc:	2101      	movs	r1, #1
 80067fe:	20ff      	movs	r0, #255	; 0xff
 8006800:	f009 f822 	bl	800f848 <turn_dir>
 8006804:	e003      	b.n	800680e <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006806:	2103      	movs	r1, #3
 8006808:	20fe      	movs	r0, #254	; 0xfe
 800680a:	f009 f81d 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 800680e:	2219      	movs	r2, #25
 8006810:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006814:	f242 7010 	movw	r0, #10000	; 0x2710
 8006818:	f7fe ffc8 	bl	80057ac <slalomB>
 800681c:	e0c2      	b.n	80069a4 <slalom_L90+0x1f4>
	}else if(run_mode == MIDDLE){
 800681e:	4b67      	ldr	r3, [pc, #412]	; (80069bc <slalom_L90+0x20c>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d12b      	bne.n	8006880 <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006828:	23f0      	movs	r3, #240	; 0xf0
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006830:	2219      	movs	r2, #25
 8006832:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006836:	f242 7010 	movw	r0, #10000	; 0x2710
 800683a:	f7fe fe19 	bl	8005470 <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 85, SPEED_MIDDLE);
 800683e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006842:	2255      	movs	r2, #85	; 0x55
 8006844:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006848:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800684c:	f7fe fe8c 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006850:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <slalom_L90+0x210>)
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800685e:	2101      	movs	r1, #1
 8006860:	20ff      	movs	r0, #255	; 0xff
 8006862:	f008 fff1 	bl	800f848 <turn_dir>
 8006866:	e003      	b.n	8006870 <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006868:	2103      	movs	r1, #3
 800686a:	20fe      	movs	r0, #254	; 0xfe
 800686c:	f008 ffec 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 8006870:	223c      	movs	r2, #60	; 0x3c
 8006872:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006876:	f242 7010 	movw	r0, #10000	; 0x2710
 800687a:	f7fe ff97 	bl	80057ac <slalomB>
 800687e:	e091      	b.n	80069a4 <slalom_L90+0x1f4>
	}else if(run_mode == HIGH){
 8006880:	4b4e      	ldr	r3, [pc, #312]	; (80069bc <slalom_L90+0x20c>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b03      	cmp	r3, #3
 8006888:	d12b      	bne.n	80068e2 <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 800688a:	23b4      	movs	r3, #180	; 0xb4
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006892:	2216      	movs	r2, #22
 8006894:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006898:	f242 7010 	movw	r0, #10000	; 0x2710
 800689c:	f7fe fde8 	bl	8005470 <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 70, SPEED_HIGH);
 80068a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80068a4:	2246      	movs	r2, #70	; 0x46
 80068a6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80068aa:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 80068ae:	f7fe fe5b 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80068b2:	4b43      	ldr	r3, [pc, #268]	; (80069c0 <slalom_L90+0x210>)
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068c0:	2101      	movs	r1, #1
 80068c2:	20ff      	movs	r0, #255	; 0xff
 80068c4:	f008 ffc0 	bl	800f848 <turn_dir>
 80068c8:	e003      	b.n	80068d2 <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068ca:	2103      	movs	r1, #3
 80068cc:	20fe      	movs	r0, #254	; 0xfe
 80068ce:	f008 ffbb 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 80068d2:	225a      	movs	r2, #90	; 0x5a
 80068d4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80068d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80068dc:	f7fe ff66 	bl	80057ac <slalomB>
 80068e0:	e060      	b.n	80069a4 <slalom_L90+0x1f4>
	}else if(run_mode == HIGH_HIGH){
 80068e2:	4b36      	ldr	r3, [pc, #216]	; (80069bc <slalom_L90+0x20c>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d12b      	bne.n	8006944 <slalom_L90+0x194>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 80068ec:	23b4      	movs	r3, #180	; 0xb4
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80068f4:	220d      	movs	r2, #13
 80068f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80068fe:	f7fe fdb7 	bl	8005470 <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 50, SPEED_HIGH_HIGH);
 8006902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006906:	2232      	movs	r2, #50	; 0x32
 8006908:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800690c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006910:	f7fe fe2a 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006914:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <slalom_L90+0x210>)
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006922:	2101      	movs	r1, #1
 8006924:	20ff      	movs	r0, #255	; 0xff
 8006926:	f008 ff8f 	bl	800f848 <turn_dir>
 800692a:	e003      	b.n	8006934 <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800692c:	2103      	movs	r1, #3
 800692e:	20fe      	movs	r0, #254	; 0xfe
 8006930:	f008 ff8a 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006934:	2273      	movs	r2, #115	; 0x73
 8006936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800693a:	f242 7010 	movw	r0, #10000	; 0x2710
 800693e:	f7fe ff35 	bl	80057ac <slalomB>
 8006942:	e02f      	b.n	80069a4 <slalom_L90+0x1f4>
	}else if(run_mode == 5){
 8006944:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <slalom_L90+0x20c>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b05      	cmp	r3, #5
 800694c:	d12a      	bne.n	80069a4 <slalom_L90+0x1f4>
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 800694e:	23b4      	movs	r3, #180	; 0xb4
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006956:	220d      	movs	r2, #13
 8006958:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800695c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006960:	f7fe fd86 	bl	8005470 <slalomF>
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 45, SPEED_5);
 8006964:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006968:	222d      	movs	r2, #45	; 0x2d
 800696a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800696e:	f649 4040 	movw	r0, #40000	; 0x9c40
 8006972:	f7fe fdf9 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <slalom_L90+0x210>)
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <slalom_L90+0x1de>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006984:	2101      	movs	r1, #1
 8006986:	20ff      	movs	r0, #255	; 0xff
 8006988:	f008 ff5e 	bl	800f848 <turn_dir>
 800698c:	e003      	b.n	8006996 <slalom_L90+0x1e6>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800698e:	2103      	movs	r1, #3
 8006990:	20fe      	movs	r0, #254	; 0xfe
 8006992:	f008 ff59 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006996:	2282      	movs	r2, #130	; 0x82
 8006998:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800699c:	f242 7010 	movw	r0, #10000	; 0x2710
 80069a0:	f7fe ff04 	bl	80057ac <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <slalom_L90+0x210>)
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <slalom_L90+0x206>
 80069b2:	f00a fd5f 	bl	8011474 <get_wall_info>
}
 80069b6:	bf00      	nop
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20000456 	.word	0x20000456
 80069c0:	20000f68 	.word	0x20000f68

080069c4 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80069ca:	2005      	movs	r0, #5
 80069cc:	f00a fdc6 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 80069d0:	4b76      	ldr	r3, [pc, #472]	; (8006bac <Lslalom_R90+0x1e8>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d12a      	bne.n	8006a30 <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 80069da:	2364      	movs	r3, #100	; 0x64
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	23c8      	movs	r3, #200	; 0xc8
 80069e0:	222d      	movs	r2, #45	; 0x2d
 80069e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80069ea:	f7fe fd41 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 80069ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80069f2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80069f6:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80069fa:	486d      	ldr	r0, [pc, #436]	; (8006bb0 <Lslalom_R90+0x1ec>)
 80069fc:	f7fe fdb4 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006a00:	4b6c      	ldr	r3, [pc, #432]	; (8006bb4 <Lslalom_R90+0x1f0>)
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a0e:	2101      	movs	r1, #1
 8006a10:	2001      	movs	r0, #1
 8006a12:	f008 ff19 	bl	800f848 <turn_dir>
 8006a16:	e003      	b.n	8006a20 <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a18:	2103      	movs	r1, #3
 8006a1a:	2002      	movs	r0, #2
 8006a1c:	f008 ff14 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006a20:	2235      	movs	r2, #53	; 0x35
 8006a22:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a26:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a2a:	f7fe febf 	bl	80057ac <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
	}
}
 8006a2e:	e0ba      	b.n	8006ba6 <Lslalom_R90+0x1e2>
	}else if(run_mode == MIDDLE){
 8006a30:	4b5e      	ldr	r3, [pc, #376]	; (8006bac <Lslalom_R90+0x1e8>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d129      	bne.n	8006a8e <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006a3a:	2378      	movs	r3, #120	; 0x78
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	23f0      	movs	r3, #240	; 0xf0
 8006a40:	223c      	movs	r2, #60	; 0x3c
 8006a42:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a46:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a4a:	f7fe fd11 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_MIDDLE);
 8006a4e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a52:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006a56:	4958      	ldr	r1, [pc, #352]	; (8006bb8 <Lslalom_R90+0x1f4>)
 8006a58:	4858      	ldr	r0, [pc, #352]	; (8006bbc <Lslalom_R90+0x1f8>)
 8006a5a:	f7fe fd85 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006a5e:	4b55      	ldr	r3, [pc, #340]	; (8006bb4 <Lslalom_R90+0x1f0>)
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f008 feea 	bl	800f848 <turn_dir>
 8006a74:	e003      	b.n	8006a7e <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a76:	2103      	movs	r1, #3
 8006a78:	2002      	movs	r0, #2
 8006a7a:	f008 fee5 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006a7e:	2258      	movs	r2, #88	; 0x58
 8006a80:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a84:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a88:	f7fe fe90 	bl	80057ac <slalomB>
}
 8006a8c:	e08b      	b.n	8006ba6 <Lslalom_R90+0x1e2>
	}else if(run_mode == HIGH){
 8006a8e:	4b47      	ldr	r3, [pc, #284]	; (8006bac <Lslalom_R90+0x1e8>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d129      	bne.n	8006aec <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006a98:	2364      	movs	r3, #100	; 0x64
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	23c8      	movs	r3, #200	; 0xc8
 8006a9e:	222d      	movs	r2, #45	; 0x2d
 8006aa0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006aa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aa8:	f7fe fce2 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_HIGH);
 8006aac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006ab0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006ab4:	4942      	ldr	r1, [pc, #264]	; (8006bc0 <Lslalom_R90+0x1fc>)
 8006ab6:	4843      	ldr	r0, [pc, #268]	; (8006bc4 <Lslalom_R90+0x200>)
 8006ab8:	f7fe fd56 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006abc:	4b3d      	ldr	r3, [pc, #244]	; (8006bb4 <Lslalom_R90+0x1f0>)
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006aca:	2101      	movs	r1, #1
 8006acc:	2001      	movs	r0, #1
 8006ace:	f008 febb 	bl	800f848 <turn_dir>
 8006ad2:	e003      	b.n	8006adc <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	2002      	movs	r0, #2
 8006ad8:	f008 feb6 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006adc:	2258      	movs	r2, #88	; 0x58
 8006ade:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ae2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ae6:	f7fe fe61 	bl	80057ac <slalomB>
}
 8006aea:	e05c      	b.n	8006ba6 <Lslalom_R90+0x1e2>
	}else if(run_mode == HIGH_HIGH){
 8006aec:	4b2f      	ldr	r3, [pc, #188]	; (8006bac <Lslalom_R90+0x1e8>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d129      	bne.n	8006b4a <Lslalom_R90+0x186>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006af6:	2364      	movs	r3, #100	; 0x64
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	23c8      	movs	r3, #200	; 0xc8
 8006afc:	2232      	movs	r2, #50	; 0x32
 8006afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b02:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b06:	f7fe fcb3 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_HIGH_HIGH);
 8006b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b0e:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006b12:	492d      	ldr	r1, [pc, #180]	; (8006bc8 <Lslalom_R90+0x204>)
 8006b14:	482d      	ldr	r0, [pc, #180]	; (8006bcc <Lslalom_R90+0x208>)
 8006b16:	f7fe fd27 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b1a:	4b26      	ldr	r3, [pc, #152]	; (8006bb4 <Lslalom_R90+0x1f0>)
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <Lslalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b28:	2101      	movs	r1, #1
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f008 fe8c 	bl	800f848 <turn_dir>
 8006b30:	e003      	b.n	8006b3a <Lslalom_R90+0x176>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b32:	2103      	movs	r1, #3
 8006b34:	2002      	movs	r0, #2
 8006b36:	f008 fe87 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006b3a:	226e      	movs	r2, #110	; 0x6e
 8006b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b40:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b44:	f7fe fe32 	bl	80057ac <slalomB>
}
 8006b48:	e02d      	b.n	8006ba6 <Lslalom_R90+0x1e2>
	}else if(run_mode == 5){
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <Lslalom_R90+0x1e8>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b05      	cmp	r3, #5
 8006b52:	d128      	bne.n	8006ba6 <Lslalom_R90+0x1e2>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006b54:	2364      	movs	r3, #100	; 0x64
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	23c8      	movs	r3, #200	; 0xc8
 8006b5a:	2214      	movs	r2, #20
 8006b5c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006b60:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b64:	f7fe fc84 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -80, SPEED_5);
 8006b68:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006b6c:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8006b70:	4915      	ldr	r1, [pc, #84]	; (8006bc8 <Lslalom_R90+0x204>)
 8006b72:	4816      	ldr	r0, [pc, #88]	; (8006bcc <Lslalom_R90+0x208>)
 8006b74:	f7fe fcf8 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b78:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <Lslalom_R90+0x1f0>)
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d104      	bne.n	8006b90 <Lslalom_R90+0x1cc>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b86:	2101      	movs	r1, #1
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f008 fe5d 	bl	800f848 <turn_dir>
 8006b8e:	e003      	b.n	8006b98 <Lslalom_R90+0x1d4>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b90:	2103      	movs	r1, #3
 8006b92:	2002      	movs	r0, #2
 8006b94:	f008 fe58 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006b98:	2264      	movs	r2, #100	; 0x64
 8006b9a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006b9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ba2:	f7fe fe03 	bl	80057ac <slalomB>
}
 8006ba6:	bf00      	nop
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	20000456 	.word	0x20000456
 8006bb0:	fffff830 	.word	0xfffff830
 8006bb4:	20000f68 	.word	0x20000f68
 8006bb8:	fffffe70 	.word	0xfffffe70
 8006bbc:	fffff060 	.word	0xfffff060
 8006bc0:	fffffda8 	.word	0xfffffda8
 8006bc4:	ffffee6c 	.word	0xffffee6c
 8006bc8:	fffffce0 	.word	0xfffffce0
 8006bcc:	ffffe0c0 	.word	0xffffe0c0

08006bd0 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006bd6:	2006      	movs	r0, #6
 8006bd8:	f00a fcc0 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8006bdc:	4b78      	ldr	r3, [pc, #480]	; (8006dc0 <Lslalom_L90+0x1f0>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d129      	bne.n	8006c3a <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006be6:	2364      	movs	r3, #100	; 0x64
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	23c8      	movs	r3, #200	; 0xc8
 8006bec:	222d      	movs	r2, #45	; 0x2d
 8006bee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bf2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bf6:	f7fe fc3b 	bl	8005470 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 8006bfa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006bfe:	225a      	movs	r2, #90	; 0x5a
 8006c00:	21c8      	movs	r1, #200	; 0xc8
 8006c02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c06:	f7fe fcaf 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c0a:	4b6e      	ldr	r3, [pc, #440]	; (8006dc4 <Lslalom_L90+0x1f4>)
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c18:	2101      	movs	r1, #1
 8006c1a:	20ff      	movs	r0, #255	; 0xff
 8006c1c:	f008 fe14 	bl	800f848 <turn_dir>
 8006c20:	e003      	b.n	8006c2a <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c22:	2103      	movs	r1, #3
 8006c24:	20fe      	movs	r0, #254	; 0xfe
 8006c26:	f008 fe0f 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006c2a:	2235      	movs	r2, #53	; 0x35
 8006c2c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c30:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c34:	f7fe fdba 	bl	80057ac <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
	}
}
 8006c38:	e0be      	b.n	8006db8 <Lslalom_L90+0x1e8>
	}else if(run_mode == MIDDLE){
 8006c3a:	4b61      	ldr	r3, [pc, #388]	; (8006dc0 <Lslalom_L90+0x1f0>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d12a      	bne.n	8006c9a <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006c44:	2378      	movs	r3, #120	; 0x78
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	23f0      	movs	r3, #240	; 0xf0
 8006c4a:	223c      	movs	r2, #60	; 0x3c
 8006c4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c50:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c54:	f7fe fc0c 	bl	8005470 <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_MIDDLE);
 8006c58:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006c5c:	225a      	movs	r2, #90	; 0x5a
 8006c5e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c62:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006c66:	f7fe fc7f 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006c6a:	4b56      	ldr	r3, [pc, #344]	; (8006dc4 <Lslalom_L90+0x1f4>)
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c78:	2101      	movs	r1, #1
 8006c7a:	20ff      	movs	r0, #255	; 0xff
 8006c7c:	f008 fde4 	bl	800f848 <turn_dir>
 8006c80:	e003      	b.n	8006c8a <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c82:	2103      	movs	r1, #3
 8006c84:	20fe      	movs	r0, #254	; 0xfe
 8006c86:	f008 fddf 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006c8a:	2258      	movs	r2, #88	; 0x58
 8006c8c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c90:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c94:	f7fe fd8a 	bl	80057ac <slalomB>
}
 8006c98:	e08e      	b.n	8006db8 <Lslalom_L90+0x1e8>
	}else if(run_mode == HIGH){
 8006c9a:	4b49      	ldr	r3, [pc, #292]	; (8006dc0 <Lslalom_L90+0x1f0>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d12a      	bne.n	8006cfa <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006ca4:	2364      	movs	r3, #100	; 0x64
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	23c8      	movs	r3, #200	; 0xc8
 8006caa:	222d      	movs	r2, #45	; 0x2d
 8006cac:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006cb0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cb4:	f7fe fbdc 	bl	8005470 <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_HIGH);
 8006cb8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006cbc:	225a      	movs	r2, #90	; 0x5a
 8006cbe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006cc2:	f241 1094 	movw	r0, #4500	; 0x1194
 8006cc6:	f7fe fc4f 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006cca:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <Lslalom_L90+0x1f4>)
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d104      	bne.n	8006ce2 <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cd8:	2101      	movs	r1, #1
 8006cda:	20ff      	movs	r0, #255	; 0xff
 8006cdc:	f008 fdb4 	bl	800f848 <turn_dir>
 8006ce0:	e003      	b.n	8006cea <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ce2:	2103      	movs	r1, #3
 8006ce4:	20fe      	movs	r0, #254	; 0xfe
 8006ce6:	f008 fdaf 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006cea:	2258      	movs	r2, #88	; 0x58
 8006cec:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006cf0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cf4:	f7fe fd5a 	bl	80057ac <slalomB>
}
 8006cf8:	e05e      	b.n	8006db8 <Lslalom_L90+0x1e8>
	}else if(run_mode == HIGH_HIGH){
 8006cfa:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <Lslalom_L90+0x1f0>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d12a      	bne.n	8006d5a <Lslalom_L90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006d04:	2364      	movs	r3, #100	; 0x64
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	23c8      	movs	r3, #200	; 0xc8
 8006d0a:	2232      	movs	r2, #50	; 0x32
 8006d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d10:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d14:	f7fe fbac 	bl	8005470 <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_HIGH_HIGH);
 8006d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d1c:	2255      	movs	r2, #85	; 0x55
 8006d1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d22:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006d26:	f7fe fc1f 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <Lslalom_L90+0x1f4>)
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <Lslalom_L90+0x172>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d38:	2101      	movs	r1, #1
 8006d3a:	20ff      	movs	r0, #255	; 0xff
 8006d3c:	f008 fd84 	bl	800f848 <turn_dir>
 8006d40:	e003      	b.n	8006d4a <Lslalom_L90+0x17a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d42:	2103      	movs	r1, #3
 8006d44:	20fe      	movs	r0, #254	; 0xfe
 8006d46:	f008 fd7f 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006d4a:	226e      	movs	r2, #110	; 0x6e
 8006d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d50:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d54:	f7fe fd2a 	bl	80057ac <slalomB>
}
 8006d58:	e02e      	b.n	8006db8 <Lslalom_L90+0x1e8>
	}else if(run_mode == 5){
 8006d5a:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <Lslalom_L90+0x1f0>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	d129      	bne.n	8006db8 <Lslalom_L90+0x1e8>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006d64:	2364      	movs	r3, #100	; 0x64
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	23c8      	movs	r3, #200	; 0xc8
 8006d6a:	2214      	movs	r2, #20
 8006d6c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d70:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d74:	f7fe fb7c 	bl	8005470 <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 80, SPEED_5);
 8006d78:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006d7c:	2250      	movs	r2, #80	; 0x50
 8006d7e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d82:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006d86:	f7fe fbef 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d8a:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <Lslalom_L90+0x1f4>)
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <Lslalom_L90+0x1d2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d98:	2101      	movs	r1, #1
 8006d9a:	20ff      	movs	r0, #255	; 0xff
 8006d9c:	f008 fd54 	bl	800f848 <turn_dir>
 8006da0:	e003      	b.n	8006daa <Lslalom_L90+0x1da>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006da2:	2103      	movs	r1, #3
 8006da4:	20fe      	movs	r0, #254	; 0xfe
 8006da6:	f008 fd4f 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006daa:	2264      	movs	r2, #100	; 0x64
 8006dac:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006db0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006db4:	f7fe fcfa 	bl	80057ac <slalomB>
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000456 	.word	0x20000456
 8006dc4:	20000f68 	.word	0x20000f68

08006dc8 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006dce:	2002      	movs	r0, #2
 8006dd0:	f00a fbc4 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8006dd4:	4b80      	ldr	r3, [pc, #512]	; (8006fd8 <Lslalom_R180+0x210>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d12d      	bne.n	8006e3a <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006dde:	2364      	movs	r3, #100	; 0x64
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	23c8      	movs	r3, #200	; 0xc8
 8006de4:	223c      	movs	r2, #60	; 0x3c
 8006de6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006dea:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dee:	f7fe fb3f 	bl	8005470 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 8006df2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006df6:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006dfa:	4978      	ldr	r1, [pc, #480]	; (8006fdc <Lslalom_R180+0x214>)
 8006dfc:	4878      	ldr	r0, [pc, #480]	; (8006fe0 <Lslalom_R180+0x218>)
 8006dfe:	f7fe fbb3 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006e02:	4b78      	ldr	r3, [pc, #480]	; (8006fe4 <Lslalom_R180+0x21c>)
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d108      	bne.n	8006e22 <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e10:	2101      	movs	r1, #1
 8006e12:	2001      	movs	r0, #1
 8006e14:	f008 fd18 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e18:	2101      	movs	r1, #1
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f008 fd14 	bl	800f848 <turn_dir>
 8006e20:	e003      	b.n	8006e2a <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e22:	2103      	movs	r1, #3
 8006e24:	2004      	movs	r0, #4
 8006e26:	f008 fd0f 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006e2a:	2250      	movs	r2, #80	; 0x50
 8006e2c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e30:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e34:	f7fe fcba 	bl	80057ac <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
	}
}
 8006e38:	e0ca      	b.n	8006fd0 <Lslalom_R180+0x208>
	}else if(run_mode == MIDDLE){
 8006e3a:	4b67      	ldr	r3, [pc, #412]	; (8006fd8 <Lslalom_R180+0x210>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d12d      	bne.n	8006ea0 <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8006e44:	2364      	movs	r3, #100	; 0x64
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	23c8      	movs	r3, #200	; 0xc8
 8006e4a:	2232      	movs	r2, #50	; 0x32
 8006e4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e50:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e54:	f7fe fb0c 	bl	8005470 <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_MIDDLE);
 8006e58:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006e5c:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006e60:	4961      	ldr	r1, [pc, #388]	; (8006fe8 <Lslalom_R180+0x220>)
 8006e62:	4862      	ldr	r0, [pc, #392]	; (8006fec <Lslalom_R180+0x224>)
 8006e64:	f7fe fb80 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e68:	4b5e      	ldr	r3, [pc, #376]	; (8006fe4 <Lslalom_R180+0x21c>)
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d108      	bne.n	8006e88 <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e76:	2101      	movs	r1, #1
 8006e78:	2001      	movs	r0, #1
 8006e7a:	f008 fce5 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e7e:	2101      	movs	r1, #1
 8006e80:	2001      	movs	r0, #1
 8006e82:	f008 fce1 	bl	800f848 <turn_dir>
 8006e86:	e003      	b.n	8006e90 <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e88:	2103      	movs	r1, #3
 8006e8a:	2004      	movs	r0, #4
 8006e8c:	f008 fcdc 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 8006e90:	224e      	movs	r2, #78	; 0x4e
 8006e92:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e96:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e9a:	f7fe fc87 	bl	80057ac <slalomB>
}
 8006e9e:	e097      	b.n	8006fd0 <Lslalom_R180+0x208>
	}else if(run_mode == HIGH){
 8006ea0:	4b4d      	ldr	r3, [pc, #308]	; (8006fd8 <Lslalom_R180+0x210>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d12d      	bne.n	8006f06 <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 8006eaa:	235a      	movs	r3, #90	; 0x5a
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	23b4      	movs	r3, #180	; 0xb4
 8006eb0:	221c      	movs	r2, #28
 8006eb2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006eb6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eba:	f7fe fad9 	bl	8005470 <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -180, SPEED_HIGH);
 8006ebe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006ec2:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006ec6:	494a      	ldr	r1, [pc, #296]	; (8006ff0 <Lslalom_R180+0x228>)
 8006ec8:	4848      	ldr	r0, [pc, #288]	; (8006fec <Lslalom_R180+0x224>)
 8006eca:	f7fe fb4d 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ece:	4b45      	ldr	r3, [pc, #276]	; (8006fe4 <Lslalom_R180+0x21c>)
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006edc:	2101      	movs	r1, #1
 8006ede:	2001      	movs	r0, #1
 8006ee0:	f008 fcb2 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f008 fcae 	bl	800f848 <turn_dir>
 8006eec:	e003      	b.n	8006ef6 <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006eee:	2103      	movs	r1, #3
 8006ef0:	2004      	movs	r0, #4
 8006ef2:	f008 fca9 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 8006ef6:	224e      	movs	r2, #78	; 0x4e
 8006ef8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f00:	f7fe fc54 	bl	80057ac <slalomB>
}
 8006f04:	e064      	b.n	8006fd0 <Lslalom_R180+0x208>
	}else if(run_mode == HIGH_HIGH){
 8006f06:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <Lslalom_R180+0x210>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d12d      	bne.n	8006f6c <Lslalom_R180+0x1a4>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 8006f10:	235a      	movs	r3, #90	; 0x5a
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	23b4      	movs	r3, #180	; 0xb4
 8006f16:	2232      	movs	r2, #50	; 0x32
 8006f18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f20:	f7fe faa6 	bl	8005470 <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_HIGH_HIGH);
 8006f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f28:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8006f2c:	4931      	ldr	r1, [pc, #196]	; (8006ff4 <Lslalom_R180+0x22c>)
 8006f2e:	4832      	ldr	r0, [pc, #200]	; (8006ff8 <Lslalom_R180+0x230>)
 8006f30:	f7fe fb1a 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f34:	4b2b      	ldr	r3, [pc, #172]	; (8006fe4 <Lslalom_R180+0x21c>)
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d108      	bne.n	8006f54 <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f42:	2101      	movs	r1, #1
 8006f44:	2001      	movs	r0, #1
 8006f46:	f008 fc7f 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f008 fc7b 	bl	800f848 <turn_dir>
 8006f52:	e003      	b.n	8006f5c <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f54:	2103      	movs	r1, #3
 8006f56:	2004      	movs	r0, #4
 8006f58:	f008 fc76 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 8006f5c:	227d      	movs	r2, #125	; 0x7d
 8006f5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f62:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f66:	f7fe fc21 	bl	80057ac <slalomB>
}
 8006f6a:	e031      	b.n	8006fd0 <Lslalom_R180+0x208>
	}else if(run_mode == 5){
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <Lslalom_R180+0x210>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	d12c      	bne.n	8006fd0 <Lslalom_R180+0x208>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8006f76:	235a      	movs	r3, #90	; 0x5a
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	23b4      	movs	r3, #180	; 0xb4
 8006f7c:	2228      	movs	r2, #40	; 0x28
 8006f7e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006f82:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f86:	f7fe fa73 	bl	8005470 <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 8006f8a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006f8e:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8006f92:	491a      	ldr	r1, [pc, #104]	; (8006ffc <Lslalom_R180+0x234>)
 8006f94:	4818      	ldr	r0, [pc, #96]	; (8006ff8 <Lslalom_R180+0x230>)
 8006f96:	f7fe fae7 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <Lslalom_R180+0x21c>)
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d108      	bne.n	8006fba <Lslalom_R180+0x1f2>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fa8:	2101      	movs	r1, #1
 8006faa:	2001      	movs	r0, #1
 8006fac:	f008 fc4c 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f008 fc48 	bl	800f848 <turn_dir>
 8006fb8:	e003      	b.n	8006fc2 <Lslalom_R180+0x1fa>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fba:	2103      	movs	r1, #3
 8006fbc:	2004      	movs	r0, #4
 8006fbe:	f008 fc43 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8006fc2:	2264      	movs	r2, #100	; 0x64
 8006fc4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006fc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fcc:	f7fe fbee 	bl	80057ac <slalomB>
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000456 	.word	0x20000456
 8006fdc:	fffffefc 	.word	0xfffffefc
 8006fe0:	fffff830 	.word	0xfffff830
 8006fe4:	20000f68 	.word	0x20000f68
 8006fe8:	fffffe74 	.word	0xfffffe74
 8006fec:	fffff448 	.word	0xfffff448
 8006ff0:	fffffdd0 	.word	0xfffffdd0
 8006ff4:	fffffd85 	.word	0xfffffd85
 8006ff8:	ffffe0c0 	.word	0xffffe0c0
 8006ffc:	fffffce0 	.word	0xfffffce0

08007000 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8007006:	2002      	movs	r0, #2
 8007008:	f00a faa8 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 800700c:	4b82      	ldr	r3, [pc, #520]	; (8007218 <Lslalom_L180+0x218>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d12e      	bne.n	8007074 <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8007016:	2364      	movs	r3, #100	; 0x64
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	23c8      	movs	r3, #200	; 0xc8
 800701c:	223c      	movs	r2, #60	; 0x3c
 800701e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007022:	f242 7010 	movw	r0, #10000	; 0x2710
 8007026:	f7fe fa23 	bl	8005470 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 800702a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800702e:	22b4      	movs	r2, #180	; 0xb4
 8007030:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007034:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007038:	f7fe fa96 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 800703c:	4b77      	ldr	r3, [pc, #476]	; (800721c <Lslalom_L180+0x21c>)
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d108      	bne.n	800705c <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800704a:	2101      	movs	r1, #1
 800704c:	20ff      	movs	r0, #255	; 0xff
 800704e:	f008 fbfb 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007052:	2101      	movs	r1, #1
 8007054:	20ff      	movs	r0, #255	; 0xff
 8007056:	f008 fbf7 	bl	800f848 <turn_dir>
 800705a:	e003      	b.n	8007064 <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800705c:	2103      	movs	r1, #3
 800705e:	20fc      	movs	r0, #252	; 0xfc
 8007060:	f008 fbf2 	bl	800f848 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8007064:	2250      	movs	r2, #80	; 0x50
 8007066:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800706a:	f242 7010 	movw	r0, #10000	; 0x2710
 800706e:	f7fe fb9d 	bl	80057ac <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
	}
}
 8007072:	e0ce      	b.n	8007212 <Lslalom_L180+0x212>
	}else if(run_mode == MIDDLE){
 8007074:	4b68      	ldr	r3, [pc, #416]	; (8007218 <Lslalom_L180+0x218>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d12e      	bne.n	80070dc <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 800707e:	2364      	movs	r3, #100	; 0x64
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	23c8      	movs	r3, #200	; 0xc8
 8007084:	2232      	movs	r2, #50	; 0x32
 8007086:	f44f 7116 	mov.w	r1, #600	; 0x258
 800708a:	f242 7010 	movw	r0, #10000	; 0x2710
 800708e:	f7fe f9ef 	bl	8005470 <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_MIDDLE);
 8007092:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007096:	22b4      	movs	r2, #180	; 0xb4
 8007098:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800709c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80070a0:	f7fe fa62 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 80070a4:	4b5d      	ldr	r3, [pc, #372]	; (800721c <Lslalom_L180+0x21c>)
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d108      	bne.n	80070c4 <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070b2:	2101      	movs	r1, #1
 80070b4:	20ff      	movs	r0, #255	; 0xff
 80070b6:	f008 fbc7 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070ba:	2101      	movs	r1, #1
 80070bc:	20ff      	movs	r0, #255	; 0xff
 80070be:	f008 fbc3 	bl	800f848 <turn_dir>
 80070c2:	e003      	b.n	80070cc <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070c4:	2103      	movs	r1, #3
 80070c6:	20fc      	movs	r0, #252	; 0xfc
 80070c8:	f008 fbbe 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 80070cc:	224e      	movs	r2, #78	; 0x4e
 80070ce:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80070d6:	f7fe fb69 	bl	80057ac <slalomB>
}
 80070da:	e09a      	b.n	8007212 <Lslalom_L180+0x212>
	}else if(run_mode == HIGH){
 80070dc:	4b4e      	ldr	r3, [pc, #312]	; (8007218 <Lslalom_L180+0x218>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d12e      	bne.n	8007144 <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 80070e6:	235a      	movs	r3, #90	; 0x5a
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	23b4      	movs	r3, #180	; 0xb4
 80070ec:	221c      	movs	r2, #28
 80070ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80070f6:	f7fe f9bb 	bl	8005470 <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 180, SPEED_HIGH);
 80070fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80070fe:	22b4      	movs	r2, #180	; 0xb4
 8007100:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007104:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007108:	f7fe fa2e 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 800710c:	4b43      	ldr	r3, [pc, #268]	; (800721c <Lslalom_L180+0x21c>)
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800711a:	2101      	movs	r1, #1
 800711c:	20ff      	movs	r0, #255	; 0xff
 800711e:	f008 fb93 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007122:	2101      	movs	r1, #1
 8007124:	20ff      	movs	r0, #255	; 0xff
 8007126:	f008 fb8f 	bl	800f848 <turn_dir>
 800712a:	e003      	b.n	8007134 <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800712c:	2103      	movs	r1, #3
 800712e:	20fc      	movs	r0, #252	; 0xfc
 8007130:	f008 fb8a 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 8007134:	224e      	movs	r2, #78	; 0x4e
 8007136:	f44f 7148 	mov.w	r1, #800	; 0x320
 800713a:	f242 7010 	movw	r0, #10000	; 0x2710
 800713e:	f7fe fb35 	bl	80057ac <slalomB>
}
 8007142:	e066      	b.n	8007212 <Lslalom_L180+0x212>
	}else if(run_mode == HIGH_HIGH){
 8007144:	4b34      	ldr	r3, [pc, #208]	; (8007218 <Lslalom_L180+0x218>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b04      	cmp	r3, #4
 800714c:	d12e      	bne.n	80071ac <Lslalom_L180+0x1ac>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 800714e:	235a      	movs	r3, #90	; 0x5a
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	23b4      	movs	r3, #180	; 0xb4
 8007154:	2232      	movs	r2, #50	; 0x32
 8007156:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800715a:	f242 7010 	movw	r0, #10000	; 0x2710
 800715e:	f7fe f987 	bl	8005470 <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_HIGH_HIGH);
 8007162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007166:	22aa      	movs	r2, #170	; 0xaa
 8007168:	f240 217b 	movw	r1, #635	; 0x27b
 800716c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007170:	f7fe f9fa 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8007174:	4b29      	ldr	r3, [pc, #164]	; (800721c <Lslalom_L180+0x21c>)
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d108      	bne.n	8007194 <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007182:	2101      	movs	r1, #1
 8007184:	20ff      	movs	r0, #255	; 0xff
 8007186:	f008 fb5f 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800718a:	2101      	movs	r1, #1
 800718c:	20ff      	movs	r0, #255	; 0xff
 800718e:	f008 fb5b 	bl	800f848 <turn_dir>
 8007192:	e003      	b.n	800719c <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007194:	2103      	movs	r1, #3
 8007196:	20fc      	movs	r0, #252	; 0xfc
 8007198:	f008 fb56 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 800719c:	227d      	movs	r2, #125	; 0x7d
 800719e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80071a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80071a6:	f7fe fb01 	bl	80057ac <slalomB>
}
 80071aa:	e032      	b.n	8007212 <Lslalom_L180+0x212>
	}else if(run_mode == 5){
 80071ac:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <Lslalom_L180+0x218>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d12d      	bne.n	8007212 <Lslalom_L180+0x212>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 80071b6:	235a      	movs	r3, #90	; 0x5a
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	23b4      	movs	r3, #180	; 0xb4
 80071bc:	2228      	movs	r2, #40	; 0x28
 80071be:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80071c6:	f7fe f953 	bl	8005470 <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 80071ca:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80071ce:	22aa      	movs	r2, #170	; 0xaa
 80071d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071d4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80071d8:	f7fe f9c6 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <Lslalom_L180+0x21c>)
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d108      	bne.n	80071fc <Lslalom_L180+0x1fc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071ea:	2101      	movs	r1, #1
 80071ec:	20ff      	movs	r0, #255	; 0xff
 80071ee:	f008 fb2b 	bl	800f848 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071f2:	2101      	movs	r1, #1
 80071f4:	20ff      	movs	r0, #255	; 0xff
 80071f6:	f008 fb27 	bl	800f848 <turn_dir>
 80071fa:	e003      	b.n	8007204 <Lslalom_L180+0x204>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071fc:	2103      	movs	r1, #3
 80071fe:	20fc      	movs	r0, #252	; 0xfc
 8007200:	f008 fb22 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007204:	2264      	movs	r2, #100	; 0x64
 8007206:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800720a:	f242 7010 	movw	r0, #10000	; 0x2710
 800720e:	f7fe facd 	bl	80057ac <slalomB>
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000456 	.word	0x20000456
 800721c:	20000f68 	.word	0x20000f68

08007220 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007226:	2005      	movs	r0, #5
 8007228:	f00a f998 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 800722c:	4bc2      	ldr	r3, [pc, #776]	; (8007538 <v_R45+0x318>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b01      	cmp	r3, #1
 8007234:	d155      	bne.n	80072e2 <v_R45+0xc2>
		if(!MF2.FLAG.V){
 8007236:	4bc1      	ldr	r3, [pc, #772]	; (800753c <v_R45+0x31c>)
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10c      	bne.n	800725e <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007244:	f241 3388 	movw	r3, #5000	; 0x1388
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	f241 3388 	movw	r3, #5000	; 0x1388
 800724e:	2228      	movs	r2, #40	; 0x28
 8007250:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007254:	f242 7010 	movw	r0, #10000	; 0x2710
 8007258:	f7fe f90a 	bl	8005470 <slalomF>
 800725c:	e00b      	b.n	8007276 <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 800725e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	f241 3388 	movw	r3, #5000	; 0x1388
 8007268:	2255      	movs	r2, #85	; 0x55
 800726a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800726e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007272:	f7fe f8fd 	bl	8005470 <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 8007276:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800727a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800727e:	49b0      	ldr	r1, [pc, #704]	; (8007540 <v_R45+0x320>)
 8007280:	48b0      	ldr	r0, [pc, #704]	; (8007544 <v_R45+0x324>)
 8007282:	f7fe f971 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007286:	2103      	movs	r1, #3
 8007288:	2001      	movs	r0, #1
 800728a:	f008 fadd 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800728e:	4bab      	ldr	r3, [pc, #684]	; (800753c <v_R45+0x31c>)
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	3301      	adds	r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	bfb8      	it	lt
 80072a2:	425b      	neglt	r3, r3
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	b2d9      	uxtb	r1, r3
 80072aa:	4aa4      	ldr	r2, [pc, #656]	; (800753c <v_R45+0x31c>)
 80072ac:	8813      	ldrh	r3, [r2, #0]
 80072ae:	f361 03c3 	bfi	r3, r1, #3, #1
 80072b2:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 80072b4:	4ba1      	ldr	r3, [pc, #644]	; (800753c <v_R45+0x31c>)
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d107      	bne.n	80072d2 <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 80072c2:	2228      	movs	r2, #40	; 0x28
 80072c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80072cc:	f7fe fa6e 	bl	80057ac <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 80072d0:	e183      	b.n	80075da <v_R45+0x3ba>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 80072d2:	2255      	movs	r2, #85	; 0x55
 80072d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80072dc:	f7fe fa66 	bl	80057ac <slalomB>
}
 80072e0:	e17b      	b.n	80075da <v_R45+0x3ba>
	}else if(run_mode == MIDDLE){
 80072e2:	4b95      	ldr	r3, [pc, #596]	; (8007538 <v_R45+0x318>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d155      	bne.n	8007398 <v_R45+0x178>
		if(!MF2.FLAG.V){
 80072ec:	4b93      	ldr	r3, [pc, #588]	; (800753c <v_R45+0x31c>)
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 80072fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	f241 3388 	movw	r3, #5000	; 0x1388
 8007304:	2228      	movs	r2, #40	; 0x28
 8007306:	f44f 7116 	mov.w	r1, #600	; 0x258
 800730a:	f242 7010 	movw	r0, #10000	; 0x2710
 800730e:	f7fe f8af 	bl	8005470 <slalomF>
 8007312:	e00b      	b.n	800732c <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007314:	f241 3388 	movw	r3, #5000	; 0x1388
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f241 3388 	movw	r3, #5000	; 0x1388
 800731e:	2249      	movs	r2, #73	; 0x49
 8007320:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007324:	f242 7010 	movw	r0, #10000	; 0x2710
 8007328:	f7fe f8a2 	bl	8005470 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 800732c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007330:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007334:	4984      	ldr	r1, [pc, #528]	; (8007548 <v_R45+0x328>)
 8007336:	4885      	ldr	r0, [pc, #532]	; (800754c <v_R45+0x32c>)
 8007338:	f7fe f916 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800733c:	2103      	movs	r1, #3
 800733e:	2001      	movs	r0, #1
 8007340:	f008 fa82 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007344:	4b7d      	ldr	r3, [pc, #500]	; (800753c <v_R45+0x31c>)
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800734c:	b2db      	uxtb	r3, r3
 800734e:	3301      	adds	r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	bfb8      	it	lt
 8007358:	425b      	neglt	r3, r3
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	b2d9      	uxtb	r1, r3
 8007360:	4a76      	ldr	r2, [pc, #472]	; (800753c <v_R45+0x31c>)
 8007362:	8813      	ldrh	r3, [r2, #0]
 8007364:	f361 03c3 	bfi	r3, r1, #3, #1
 8007368:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800736a:	4b74      	ldr	r3, [pc, #464]	; (800753c <v_R45+0x31c>)
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007378:	2237      	movs	r2, #55	; 0x37
 800737a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800737e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007382:	f7fe fa13 	bl	80057ac <slalomB>
}
 8007386:	e128      	b.n	80075da <v_R45+0x3ba>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007388:	225d      	movs	r2, #93	; 0x5d
 800738a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800738e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007392:	f7fe fa0b 	bl	80057ac <slalomB>
}
 8007396:	e120      	b.n	80075da <v_R45+0x3ba>
	}else if(run_mode == HIGH){
 8007398:	4b67      	ldr	r3, [pc, #412]	; (8007538 <v_R45+0x318>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d155      	bne.n	800744e <v_R45+0x22e>
		if(!MF2.FLAG.V){
 80073a2:	4b66      	ldr	r3, [pc, #408]	; (800753c <v_R45+0x31c>)
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10c      	bne.n	80073ca <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 80073b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ba:	2217      	movs	r2, #23
 80073bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80073c4:	f7fe f854 	bl	8005470 <slalomF>
 80073c8:	e00b      	b.n	80073e2 <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80073ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d4:	2237      	movs	r2, #55	; 0x37
 80073d6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073da:	f242 7010 	movw	r0, #10000	; 0x2710
 80073de:	f7fe f847 	bl	8005470 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 80073e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80073e6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80073ea:	4957      	ldr	r1, [pc, #348]	; (8007548 <v_R45+0x328>)
 80073ec:	4857      	ldr	r0, [pc, #348]	; (800754c <v_R45+0x32c>)
 80073ee:	f7fe f8bb 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80073f2:	2103      	movs	r1, #3
 80073f4:	2001      	movs	r0, #1
 80073f6:	f008 fa27 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80073fa:	4b50      	ldr	r3, [pc, #320]	; (800753c <v_R45+0x31c>)
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	3301      	adds	r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	bfb8      	it	lt
 800740e:	425b      	neglt	r3, r3
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	b2d9      	uxtb	r1, r3
 8007416:	4a49      	ldr	r2, [pc, #292]	; (800753c <v_R45+0x31c>)
 8007418:	8813      	ldrh	r3, [r2, #0]
 800741a:	f361 03c3 	bfi	r3, r1, #3, #1
 800741e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007420:	4b46      	ldr	r3, [pc, #280]	; (800753c <v_R45+0x31c>)
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 800742e:	2233      	movs	r2, #51	; 0x33
 8007430:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007434:	f242 7010 	movw	r0, #10000	; 0x2710
 8007438:	f7fe f9b8 	bl	80057ac <slalomB>
}
 800743c:	e0cd      	b.n	80075da <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 800743e:	224b      	movs	r2, #75	; 0x4b
 8007440:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007444:	f242 7010 	movw	r0, #10000	; 0x2710
 8007448:	f7fe f9b0 	bl	80057ac <slalomB>
}
 800744c:	e0c5      	b.n	80075da <v_R45+0x3ba>
	}else if(run_mode == HIGH_HIGH){
 800744e:	4b3a      	ldr	r3, [pc, #232]	; (8007538 <v_R45+0x318>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b04      	cmp	r3, #4
 8007456:	d155      	bne.n	8007504 <v_R45+0x2e4>
		if(!MF2.FLAG.V){
 8007458:	4b38      	ldr	r3, [pc, #224]	; (800753c <v_R45+0x31c>)
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10c      	bne.n	8007480 <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007466:	f241 3388 	movw	r3, #5000	; 0x1388
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007470:	2214      	movs	r2, #20
 8007472:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007476:	f242 7010 	movw	r0, #10000	; 0x2710
 800747a:	f7fd fff9 	bl	8005470 <slalomF>
 800747e:	e00b      	b.n	8007498 <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007480:	f241 3388 	movw	r3, #5000	; 0x1388
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	f241 3388 	movw	r3, #5000	; 0x1388
 800748a:	2214      	movs	r2, #20
 800748c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007490:	f242 7010 	movw	r0, #10000	; 0x2710
 8007494:	f7fd ffec 	bl	8005470 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 8007498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800749c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80074a0:	492b      	ldr	r1, [pc, #172]	; (8007550 <v_R45+0x330>)
 80074a2:	482c      	ldr	r0, [pc, #176]	; (8007554 <v_R45+0x334>)
 80074a4:	f7fe f860 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80074a8:	2103      	movs	r1, #3
 80074aa:	2001      	movs	r0, #1
 80074ac:	f008 f9cc 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80074b0:	4b22      	ldr	r3, [pc, #136]	; (800753c <v_R45+0x31c>)
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	3301      	adds	r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	bfb8      	it	lt
 80074c4:	425b      	neglt	r3, r3
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	b2d9      	uxtb	r1, r3
 80074cc:	4a1b      	ldr	r2, [pc, #108]	; (800753c <v_R45+0x31c>)
 80074ce:	8813      	ldrh	r3, [r2, #0]
 80074d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80074d4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80074d6:	4b19      	ldr	r3, [pc, #100]	; (800753c <v_R45+0x31c>)
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 80074e4:	223a      	movs	r2, #58	; 0x3a
 80074e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80074ee:	f7fe f95d 	bl	80057ac <slalomB>
}
 80074f2:	e072      	b.n	80075da <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 80074f4:	223a      	movs	r2, #58	; 0x3a
 80074f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80074fe:	f7fe f955 	bl	80057ac <slalomB>
}
 8007502:	e06a      	b.n	80075da <v_R45+0x3ba>
	}else if(run_mode == 5){
 8007504:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <v_R45+0x318>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b05      	cmp	r3, #5
 800750c:	d165      	bne.n	80075da <v_R45+0x3ba>
		if(!MF2.FLAG.V){
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <v_R45+0x31c>)
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11d      	bne.n	8007558 <v_R45+0x338>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 800751c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	f241 3388 	movw	r3, #5000	; 0x1388
 8007526:	2218      	movs	r2, #24
 8007528:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800752c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007530:	f7fd ff9e 	bl	8005470 <slalomF>
 8007534:	e01c      	b.n	8007570 <v_R45+0x350>
 8007536:	bf00      	nop
 8007538:	20000456 	.word	0x20000456
 800753c:	20000f64 	.word	0x20000f64
 8007540:	fffffed4 	.word	0xfffffed4
 8007544:	fffff448 	.word	0xfffff448
 8007548:	fffffe70 	.word	0xfffffe70
 800754c:	ffffe0c0 	.word	0xffffe0c0
 8007550:	fffffda8 	.word	0xfffffda8
 8007554:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007558:	f241 3388 	movw	r3, #5000	; 0x1388
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007562:	2214      	movs	r2, #20
 8007564:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007568:	f242 7010 	movw	r0, #10000	; 0x2710
 800756c:	f7fd ff80 	bl	8005470 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007570:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007574:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007578:	4919      	ldr	r1, [pc, #100]	; (80075e0 <v_R45+0x3c0>)
 800757a:	481a      	ldr	r0, [pc, #104]	; (80075e4 <v_R45+0x3c4>)
 800757c:	f7fd fff4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007580:	2103      	movs	r1, #3
 8007582:	2001      	movs	r0, #1
 8007584:	f008 f960 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <v_R45+0x3c8>)
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3301      	adds	r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	bfb8      	it	lt
 800759c:	425b      	neglt	r3, r3
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	b2d9      	uxtb	r1, r3
 80075a4:	4a10      	ldr	r2, [pc, #64]	; (80075e8 <v_R45+0x3c8>)
 80075a6:	8813      	ldrh	r3, [r2, #0]
 80075a8:	f361 03c3 	bfi	r3, r1, #3, #1
 80075ac:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <v_R45+0x3c8>)
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d107      	bne.n	80075cc <v_R45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 80075bc:	223a      	movs	r2, #58	; 0x3a
 80075be:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80075c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80075c6:	f7fe f8f1 	bl	80057ac <slalomB>
}
 80075ca:	e006      	b.n	80075da <v_R45+0x3ba>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 80075cc:	223d      	movs	r2, #61	; 0x3d
 80075ce:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80075d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80075d6:	f7fe f8e9 	bl	80057ac <slalomB>
}
 80075da:	bf00      	nop
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	fffffce0 	.word	0xfffffce0
 80075e4:	ffffc180 	.word	0xffffc180
 80075e8:	20000f64 	.word	0x20000f64

080075ec <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80075f2:	2006      	movs	r0, #6
 80075f4:	f009 ffb2 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 80075f8:	4bc4      	ldr	r3, [pc, #784]	; (800790c <v_L45+0x320>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d156      	bne.n	80076b0 <v_L45+0xc4>
		if(!MF2.FLAG.V){
 8007602:	4bc3      	ldr	r3, [pc, #780]	; (8007910 <v_L45+0x324>)
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007610:	f241 3388 	movw	r3, #5000	; 0x1388
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	f241 3388 	movw	r3, #5000	; 0x1388
 800761a:	2228      	movs	r2, #40	; 0x28
 800761c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007620:	f242 7010 	movw	r0, #10000	; 0x2710
 8007624:	f7fd ff24 	bl	8005470 <slalomF>
 8007628:	e00b      	b.n	8007642 <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 800762a:	f241 3388 	movw	r3, #5000	; 0x1388
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	f241 3388 	movw	r3, #5000	; 0x1388
 8007634:	2255      	movs	r2, #85	; 0x55
 8007636:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800763a:	f242 7010 	movw	r0, #10000	; 0x2710
 800763e:	f7fd ff17 	bl	8005470 <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_LOW);
 8007642:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007646:	222d      	movs	r2, #45	; 0x2d
 8007648:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800764c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007650:	f7fd ff8a 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007654:	2103      	movs	r1, #3
 8007656:	20ff      	movs	r0, #255	; 0xff
 8007658:	f008 f8f6 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800765c:	4bac      	ldr	r3, [pc, #688]	; (8007910 <v_L45+0x324>)
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007664:	b2db      	uxtb	r3, r3
 8007666:	3301      	adds	r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	bfb8      	it	lt
 8007670:	425b      	neglt	r3, r3
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	b2d9      	uxtb	r1, r3
 8007678:	4aa5      	ldr	r2, [pc, #660]	; (8007910 <v_L45+0x324>)
 800767a:	8813      	ldrh	r3, [r2, #0]
 800767c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007680:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007682:	4ba3      	ldr	r3, [pc, #652]	; (8007910 <v_L45+0x324>)
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 8007690:	2228      	movs	r2, #40	; 0x28
 8007692:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007696:	f242 7010 	movw	r0, #10000	; 0x2710
 800769a:	f7fe f887 	bl	80057ac <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 800769e:	e17b      	b.n	8007998 <v_L45+0x3ac>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 80076a0:	2255      	movs	r2, #85	; 0x55
 80076a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80076aa:	f7fe f87f 	bl	80057ac <slalomB>
}
 80076ae:	e173      	b.n	8007998 <v_L45+0x3ac>
	}else if(run_mode == MIDDLE){
 80076b0:	4b96      	ldr	r3, [pc, #600]	; (800790c <v_L45+0x320>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d156      	bne.n	8007768 <v_L45+0x17c>
		if(!MF2.FLAG.V){
 80076ba:	4b95      	ldr	r3, [pc, #596]	; (8007910 <v_L45+0x324>)
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10c      	bne.n	80076e2 <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 80076c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80076d2:	2228      	movs	r2, #40	; 0x28
 80076d4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80076dc:	f7fd fec8 	bl	8005470 <slalomF>
 80076e0:	e00b      	b.n	80076fa <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80076e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ec:	2249      	movs	r2, #73	; 0x49
 80076ee:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80076f6:	f7fd febb 	bl	8005470 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 80076fa:	f44f 7316 	mov.w	r3, #600	; 0x258
 80076fe:	222d      	movs	r2, #45	; 0x2d
 8007700:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007704:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007708:	f7fd ff2e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800770c:	2103      	movs	r1, #3
 800770e:	20ff      	movs	r0, #255	; 0xff
 8007710:	f008 f89a 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007714:	4b7e      	ldr	r3, [pc, #504]	; (8007910 <v_L45+0x324>)
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800771c:	b2db      	uxtb	r3, r3
 800771e:	3301      	adds	r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	bfb8      	it	lt
 8007728:	425b      	neglt	r3, r3
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	b2d9      	uxtb	r1, r3
 8007730:	4a77      	ldr	r2, [pc, #476]	; (8007910 <v_L45+0x324>)
 8007732:	8813      	ldrh	r3, [r2, #0]
 8007734:	f361 03c3 	bfi	r3, r1, #3, #1
 8007738:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800773a:	4b75      	ldr	r3, [pc, #468]	; (8007910 <v_L45+0x324>)
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d107      	bne.n	8007758 <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007748:	2237      	movs	r2, #55	; 0x37
 800774a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800774e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007752:	f7fe f82b 	bl	80057ac <slalomB>
}
 8007756:	e11f      	b.n	8007998 <v_L45+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007758:	225d      	movs	r2, #93	; 0x5d
 800775a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800775e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007762:	f7fe f823 	bl	80057ac <slalomB>
}
 8007766:	e117      	b.n	8007998 <v_L45+0x3ac>
	}else if(run_mode == HIGH){
 8007768:	4b68      	ldr	r3, [pc, #416]	; (800790c <v_L45+0x320>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b03      	cmp	r3, #3
 8007770:	d156      	bne.n	8007820 <v_L45+0x234>
		if(!MF2.FLAG.V){
 8007772:	4b67      	ldr	r3, [pc, #412]	; (8007910 <v_L45+0x324>)
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007780:	f241 3388 	movw	r3, #5000	; 0x1388
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	f241 3388 	movw	r3, #5000	; 0x1388
 800778a:	221c      	movs	r2, #28
 800778c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007790:	f242 7010 	movw	r0, #10000	; 0x2710
 8007794:	f7fd fe6c 	bl	8005470 <slalomF>
 8007798:	e00b      	b.n	80077b2 <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 800779a:	f241 3388 	movw	r3, #5000	; 0x1388
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80077a4:	2237      	movs	r2, #55	; 0x37
 80077a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80077aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80077ae:	f7fd fe5f 	bl	8005470 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 80077b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80077b6:	222d      	movs	r2, #45	; 0x2d
 80077b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077bc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80077c0:	f7fd fed2 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077c4:	2103      	movs	r1, #3
 80077c6:	20ff      	movs	r0, #255	; 0xff
 80077c8:	f008 f83e 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80077cc:	4b50      	ldr	r3, [pc, #320]	; (8007910 <v_L45+0x324>)
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	3301      	adds	r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	bfb8      	it	lt
 80077e0:	425b      	neglt	r3, r3
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	b2d9      	uxtb	r1, r3
 80077e8:	4a49      	ldr	r2, [pc, #292]	; (8007910 <v_L45+0x324>)
 80077ea:	8813      	ldrh	r3, [r2, #0]
 80077ec:	f361 03c3 	bfi	r3, r1, #3, #1
 80077f0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80077f2:	4b47      	ldr	r3, [pc, #284]	; (8007910 <v_L45+0x324>)
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d107      	bne.n	8007810 <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 8007800:	2233      	movs	r2, #51	; 0x33
 8007802:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007806:	f242 7010 	movw	r0, #10000	; 0x2710
 800780a:	f7fd ffcf 	bl	80057ac <slalomB>
}
 800780e:	e0c3      	b.n	8007998 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 8007810:	224b      	movs	r2, #75	; 0x4b
 8007812:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007816:	f242 7010 	movw	r0, #10000	; 0x2710
 800781a:	f7fd ffc7 	bl	80057ac <slalomB>
}
 800781e:	e0bb      	b.n	8007998 <v_L45+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8007820:	4b3a      	ldr	r3, [pc, #232]	; (800790c <v_L45+0x320>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b04      	cmp	r3, #4
 8007828:	d156      	bne.n	80078d8 <v_L45+0x2ec>
		if(!MF2.FLAG.V){
 800782a:	4b39      	ldr	r3, [pc, #228]	; (8007910 <v_L45+0x324>)
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10c      	bne.n	8007852 <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007838:	f241 3388 	movw	r3, #5000	; 0x1388
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007842:	2214      	movs	r2, #20
 8007844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007848:	f242 7010 	movw	r0, #10000	; 0x2710
 800784c:	f7fd fe10 	bl	8005470 <slalomF>
 8007850:	e00b      	b.n	800786a <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007852:	f241 3388 	movw	r3, #5000	; 0x1388
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	f241 3388 	movw	r3, #5000	; 0x1388
 800785c:	2214      	movs	r2, #20
 800785e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007862:	f242 7010 	movw	r0, #10000	; 0x2710
 8007866:	f7fd fe03 	bl	8005470 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 800786a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800786e:	222d      	movs	r2, #45	; 0x2d
 8007870:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007874:	f242 7010 	movw	r0, #10000	; 0x2710
 8007878:	f7fd fe76 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800787c:	2103      	movs	r1, #3
 800787e:	20ff      	movs	r0, #255	; 0xff
 8007880:	f007 ffe2 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007884:	4b22      	ldr	r3, [pc, #136]	; (8007910 <v_L45+0x324>)
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800788c:	b2db      	uxtb	r3, r3
 800788e:	3301      	adds	r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	bfb8      	it	lt
 8007898:	425b      	neglt	r3, r3
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	b2d9      	uxtb	r1, r3
 80078a0:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <v_L45+0x324>)
 80078a2:	8813      	ldrh	r3, [r2, #0]
 80078a4:	f361 03c3 	bfi	r3, r1, #3, #1
 80078a8:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <v_L45+0x324>)
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d107      	bne.n	80078c8 <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 80078b8:	223a      	movs	r2, #58	; 0x3a
 80078ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078be:	f242 7010 	movw	r0, #10000	; 0x2710
 80078c2:	f7fd ff73 	bl	80057ac <slalomB>
}
 80078c6:	e067      	b.n	8007998 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 80078c8:	223a      	movs	r2, #58	; 0x3a
 80078ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80078d2:	f7fd ff6b 	bl	80057ac <slalomB>
}
 80078d6:	e05f      	b.n	8007998 <v_L45+0x3ac>
	}else if(run_mode == 5){
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <v_L45+0x320>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d15a      	bne.n	8007998 <v_L45+0x3ac>
		if(!MF2.FLAG.V){
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <v_L45+0x324>)
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d111      	bne.n	8007914 <v_L45+0x328>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 80078f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80078fa:	2218      	movs	r2, #24
 80078fc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007900:	f242 7010 	movw	r0, #10000	; 0x2710
 8007904:	f7fd fdb4 	bl	8005470 <slalomF>
 8007908:	e010      	b.n	800792c <v_L45+0x340>
 800790a:	bf00      	nop
 800790c:	20000456 	.word	0x20000456
 8007910:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007914:	f241 3388 	movw	r3, #5000	; 0x1388
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	f241 3388 	movw	r3, #5000	; 0x1388
 800791e:	2214      	movs	r2, #20
 8007920:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007924:	f242 7010 	movw	r0, #10000	; 0x2710
 8007928:	f7fd fda2 	bl	8005470 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 800792c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007930:	222d      	movs	r2, #45	; 0x2d
 8007932:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007936:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800793a:	f7fd fe15 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800793e:	2103      	movs	r1, #3
 8007940:	20ff      	movs	r0, #255	; 0xff
 8007942:	f007 ff81 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007946:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <v_L45+0x3b4>)
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800794e:	b2db      	uxtb	r3, r3
 8007950:	3301      	adds	r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	bfb8      	it	lt
 800795a:	425b      	neglt	r3, r3
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	b2d9      	uxtb	r1, r3
 8007962:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <v_L45+0x3b4>)
 8007964:	8813      	ldrh	r3, [r2, #0]
 8007966:	f361 03c3 	bfi	r3, r1, #3, #1
 800796a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800796c:	4b0c      	ldr	r3, [pc, #48]	; (80079a0 <v_L45+0x3b4>)
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d107      	bne.n	800798a <v_L45+0x39e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 800797a:	223a      	movs	r2, #58	; 0x3a
 800797c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007980:	f242 7010 	movw	r0, #10000	; 0x2710
 8007984:	f7fd ff12 	bl	80057ac <slalomB>
}
 8007988:	e006      	b.n	8007998 <v_L45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 800798a:	223d      	movs	r2, #61	; 0x3d
 800798c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007990:	f242 7010 	movw	r0, #10000	; 0x2710
 8007994:	f7fd ff0a 	bl	80057ac <slalomB>
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000f64 	.word	0x20000f64

080079a4 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80079aa:	2005      	movs	r0, #5
 80079ac:	f009 fdd6 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 80079b0:	4b9e      	ldr	r3, [pc, #632]	; (8007c2c <v_R45D+0x288>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d139      	bne.n	8007a2e <v_R45D+0x8a>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80079ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80079c4:	2255      	movs	r2, #85	; 0x55
 80079c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80079ce:	f7fd fd4f 	bl	8005470 <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 80079d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80079d6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80079da:	4995      	ldr	r1, [pc, #596]	; (8007c30 <v_R45D+0x28c>)
 80079dc:	4895      	ldr	r0, [pc, #596]	; (8007c34 <v_R45D+0x290>)
 80079de:	f7fd fdc3 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80079e2:	2103      	movs	r1, #3
 80079e4:	2001      	movs	r0, #1
 80079e6:	f007 ff2f 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80079ea:	4b93      	ldr	r3, [pc, #588]	; (8007c38 <v_R45D+0x294>)
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	3301      	adds	r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	bfb8      	it	lt
 80079fe:	425b      	neglt	r3, r3
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	b2d9      	uxtb	r1, r3
 8007a06:	4a8c      	ldr	r2, [pc, #560]	; (8007c38 <v_R45D+0x294>)
 8007a08:	8813      	ldrh	r3, [r2, #0]
 8007a0a:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a0e:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007a10:	220a      	movs	r2, #10
 8007a12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007a16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a1a:	f7fd fec7 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007a1e:	231e      	movs	r3, #30
 8007a20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007a24:	211e      	movs	r1, #30
 8007a26:	4885      	ldr	r0, [pc, #532]	; (8007c3c <v_R45D+0x298>)
 8007a28:	f7fd fb4a 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007a2c:	e0fa      	b.n	8007c24 <v_R45D+0x280>
	}else if(run_mode == MIDDLE){
 8007a2e:	4b7f      	ldr	r3, [pc, #508]	; (8007c2c <v_R45D+0x288>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d139      	bne.n	8007aac <v_R45D+0x108>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007a38:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a42:	2249      	movs	r2, #73	; 0x49
 8007a44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a4c:	f7fd fd10 	bl	8005470 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007a50:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007a54:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a58:	4979      	ldr	r1, [pc, #484]	; (8007c40 <v_R45D+0x29c>)
 8007a5a:	487a      	ldr	r0, [pc, #488]	; (8007c44 <v_R45D+0x2a0>)
 8007a5c:	f7fd fd84 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a60:	2103      	movs	r1, #3
 8007a62:	2001      	movs	r0, #1
 8007a64:	f007 fef0 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007a68:	4b73      	ldr	r3, [pc, #460]	; (8007c38 <v_R45D+0x294>)
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	3301      	adds	r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	bfb8      	it	lt
 8007a7c:	425b      	neglt	r3, r3
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	b2d9      	uxtb	r1, r3
 8007a84:	4a6c      	ldr	r2, [pc, #432]	; (8007c38 <v_R45D+0x294>)
 8007a86:	8813      	ldrh	r3, [r2, #0]
 8007a88:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a8c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8007a8e:	2219      	movs	r2, #25
 8007a90:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a94:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a98:	f7fd fe88 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8007a9c:	231e      	movs	r3, #30
 8007a9e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007aa2:	211e      	movs	r1, #30
 8007aa4:	4865      	ldr	r0, [pc, #404]	; (8007c3c <v_R45D+0x298>)
 8007aa6:	f7fd fb0b 	bl	80050c0 <driveD>
}
 8007aaa:	e0bb      	b.n	8007c24 <v_R45D+0x280>
	}else if(run_mode == HIGH){
 8007aac:	4b5f      	ldr	r3, [pc, #380]	; (8007c2c <v_R45D+0x288>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d139      	bne.n	8007b2a <v_R45D+0x186>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007ab6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ac0:	2237      	movs	r2, #55	; 0x37
 8007ac2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ac6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007aca:	f7fd fcd1 	bl	8005470 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 8007ace:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007ad2:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007ad6:	495a      	ldr	r1, [pc, #360]	; (8007c40 <v_R45D+0x29c>)
 8007ad8:	485a      	ldr	r0, [pc, #360]	; (8007c44 <v_R45D+0x2a0>)
 8007ada:	f7fd fd45 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007ade:	2103      	movs	r1, #3
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	f007 feb1 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ae6:	4b54      	ldr	r3, [pc, #336]	; (8007c38 <v_R45D+0x294>)
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	3301      	adds	r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	bfb8      	it	lt
 8007afa:	425b      	neglt	r3, r3
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	b2d9      	uxtb	r1, r3
 8007b02:	4a4d      	ldr	r2, [pc, #308]	; (8007c38 <v_R45D+0x294>)
 8007b04:	8813      	ldrh	r3, [r2, #0]
 8007b06:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b0a:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8007b0c:	2215      	movs	r2, #21
 8007b0e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b12:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b16:	f7fd fe49 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8007b1a:	231e      	movs	r3, #30
 8007b1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007b20:	211e      	movs	r1, #30
 8007b22:	4846      	ldr	r0, [pc, #280]	; (8007c3c <v_R45D+0x298>)
 8007b24:	f7fd facc 	bl	80050c0 <driveD>
}
 8007b28:	e07c      	b.n	8007c24 <v_R45D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8007b2a:	4b40      	ldr	r3, [pc, #256]	; (8007c2c <v_R45D+0x288>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d139      	bne.n	8007ba8 <v_R45D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b3e:	2214      	movs	r2, #20
 8007b40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b44:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b48:	f7fd fc92 	bl	8005470 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 8007b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b50:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007b54:	493c      	ldr	r1, [pc, #240]	; (8007c48 <v_R45D+0x2a4>)
 8007b56:	483d      	ldr	r0, [pc, #244]	; (8007c4c <v_R45D+0x2a8>)
 8007b58:	f7fd fd06 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b5c:	2103      	movs	r1, #3
 8007b5e:	2001      	movs	r0, #1
 8007b60:	f007 fe72 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007b64:	4b34      	ldr	r3, [pc, #208]	; (8007c38 <v_R45D+0x294>)
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	3301      	adds	r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	bfb8      	it	lt
 8007b78:	425b      	neglt	r3, r3
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	b2d9      	uxtb	r1, r3
 8007b80:	4a2d      	ldr	r2, [pc, #180]	; (8007c38 <v_R45D+0x294>)
 8007b82:	8813      	ldrh	r3, [r2, #0]
 8007b84:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b88:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 8007b8a:	221c      	movs	r2, #28
 8007b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b90:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b94:	f7fd fe0a 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8007b98:	231e      	movs	r3, #30
 8007b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b9e:	211e      	movs	r1, #30
 8007ba0:	4826      	ldr	r0, [pc, #152]	; (8007c3c <v_R45D+0x298>)
 8007ba2:	f7fd fa8d 	bl	80050c0 <driveD>
}
 8007ba6:	e03d      	b.n	8007c24 <v_R45D+0x280>
	}else if(run_mode == 5){
 8007ba8:	4b20      	ldr	r3, [pc, #128]	; (8007c2c <v_R45D+0x288>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d138      	bne.n	8007c24 <v_R45D+0x280>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007bb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bbc:	2214      	movs	r2, #20
 8007bbe:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007bc2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bc6:	f7fd fc53 	bl	8005470 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007bca:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007bce:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007bd2:	491f      	ldr	r1, [pc, #124]	; (8007c50 <v_R45D+0x2ac>)
 8007bd4:	481f      	ldr	r0, [pc, #124]	; (8007c54 <v_R45D+0x2b0>)
 8007bd6:	f7fd fcc7 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bda:	2103      	movs	r1, #3
 8007bdc:	2001      	movs	r0, #1
 8007bde:	f007 fe33 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <v_R45D+0x294>)
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	bfb8      	it	lt
 8007bf6:	425b      	neglt	r3, r3
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	b2d9      	uxtb	r1, r3
 8007bfe:	4a0e      	ldr	r2, [pc, #56]	; (8007c38 <v_R45D+0x294>)
 8007c00:	8813      	ldrh	r3, [r2, #0]
 8007c02:	f361 03c3 	bfi	r3, r1, #3, #1
 8007c06:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8007c08:	221c      	movs	r2, #28
 8007c0a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007c0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c12:	f7fd fdcb 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8007c16:	231e      	movs	r3, #30
 8007c18:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8007c1c:	211e      	movs	r1, #30
 8007c1e:	4807      	ldr	r0, [pc, #28]	; (8007c3c <v_R45D+0x298>)
 8007c20:	f7fd fa4e 	bl	80050c0 <driveD>
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000456 	.word	0x20000456
 8007c30:	fffffed4 	.word	0xfffffed4
 8007c34:	fffff448 	.word	0xfffff448
 8007c38:	20000f64 	.word	0x20000f64
 8007c3c:	ffff8ad0 	.word	0xffff8ad0
 8007c40:	fffffe70 	.word	0xfffffe70
 8007c44:	ffffe0c0 	.word	0xffffe0c0
 8007c48:	fffffda8 	.word	0xfffffda8
 8007c4c:	ffffd8f0 	.word	0xffffd8f0
 8007c50:	fffffce0 	.word	0xfffffce0
 8007c54:	ffffc180 	.word	0xffffc180

08007c58 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007c5e:	2006      	movs	r0, #6
 8007c60:	f009 fc7c 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8007c64:	4ba0      	ldr	r3, [pc, #640]	; (8007ee8 <v_L45D+0x290>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d13a      	bne.n	8007ce4 <v_L45D+0x8c>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007c6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c78:	2255      	movs	r2, #85	; 0x55
 8007c7a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c82:	f7fd fbf5 	bl	8005470 <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_LOW);
 8007c86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007c8a:	2237      	movs	r2, #55	; 0x37
 8007c8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007c90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007c94:	f7fd fc68 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c98:	2103      	movs	r1, #3
 8007c9a:	20ff      	movs	r0, #255	; 0xff
 8007c9c:	f007 fdd4 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ca0:	4b92      	ldr	r3, [pc, #584]	; (8007eec <v_L45D+0x294>)
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	3301      	adds	r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	bfb8      	it	lt
 8007cb4:	425b      	neglt	r3, r3
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	b2d9      	uxtb	r1, r3
 8007cbc:	4a8b      	ldr	r2, [pc, #556]	; (8007eec <v_L45D+0x294>)
 8007cbe:	8813      	ldrh	r3, [r2, #0]
 8007cc0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007cc4:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007cc6:	220a      	movs	r2, #10
 8007cc8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ccc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cd0:	f7fd fd6c 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007cd4:	231e      	movs	r3, #30
 8007cd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007cda:	211e      	movs	r1, #30
 8007cdc:	4884      	ldr	r0, [pc, #528]	; (8007ef0 <v_L45D+0x298>)
 8007cde:	f7fd f9ef 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007ce2:	e0fe      	b.n	8007ee2 <v_L45D+0x28a>
	}else if(run_mode == MIDDLE){
 8007ce4:	4b80      	ldr	r3, [pc, #512]	; (8007ee8 <v_L45D+0x290>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d13a      	bne.n	8007d64 <v_L45D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007cee:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf8:	2249      	movs	r2, #73	; 0x49
 8007cfa:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d02:	f7fd fbb5 	bl	8005470 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8007d06:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007d0a:	222d      	movs	r2, #45	; 0x2d
 8007d0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d10:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d14:	f7fd fc28 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d18:	2103      	movs	r1, #3
 8007d1a:	20ff      	movs	r0, #255	; 0xff
 8007d1c:	f007 fd94 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d20:	4b72      	ldr	r3, [pc, #456]	; (8007eec <v_L45D+0x294>)
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	bfb8      	it	lt
 8007d34:	425b      	neglt	r3, r3
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	b2d9      	uxtb	r1, r3
 8007d3c:	4a6b      	ldr	r2, [pc, #428]	; (8007eec <v_L45D+0x294>)
 8007d3e:	8813      	ldrh	r3, [r2, #0]
 8007d40:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d44:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8007d46:	2219      	movs	r2, #25
 8007d48:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007d4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d50:	f7fd fd2c 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8007d54:	231e      	movs	r3, #30
 8007d56:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007d5a:	211e      	movs	r1, #30
 8007d5c:	4864      	ldr	r0, [pc, #400]	; (8007ef0 <v_L45D+0x298>)
 8007d5e:	f7fd f9af 	bl	80050c0 <driveD>
}
 8007d62:	e0be      	b.n	8007ee2 <v_L45D+0x28a>
	}else if(run_mode == HIGH){
 8007d64:	4b60      	ldr	r3, [pc, #384]	; (8007ee8 <v_L45D+0x290>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d13a      	bne.n	8007de4 <v_L45D+0x18c>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d78:	2237      	movs	r2, #55	; 0x37
 8007d7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d82:	f7fd fb75 	bl	8005470 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 8007d86:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d8a:	222d      	movs	r2, #45	; 0x2d
 8007d8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d90:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d94:	f7fd fbe8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d98:	2103      	movs	r1, #3
 8007d9a:	20ff      	movs	r0, #255	; 0xff
 8007d9c:	f007 fd54 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007da0:	4b52      	ldr	r3, [pc, #328]	; (8007eec <v_L45D+0x294>)
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	3301      	adds	r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	bfb8      	it	lt
 8007db4:	425b      	neglt	r3, r3
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	b2d9      	uxtb	r1, r3
 8007dbc:	4a4b      	ldr	r2, [pc, #300]	; (8007eec <v_L45D+0x294>)
 8007dbe:	8813      	ldrh	r3, [r2, #0]
 8007dc0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007dc4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8007dc6:	2215      	movs	r2, #21
 8007dc8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007dcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dd0:	f7fd fcec 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8007dd4:	231e      	movs	r3, #30
 8007dd6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007dda:	211e      	movs	r1, #30
 8007ddc:	4844      	ldr	r0, [pc, #272]	; (8007ef0 <v_L45D+0x298>)
 8007dde:	f7fd f96f 	bl	80050c0 <driveD>
}
 8007de2:	e07e      	b.n	8007ee2 <v_L45D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8007de4:	4b40      	ldr	r3, [pc, #256]	; (8007ee8 <v_L45D+0x290>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d13a      	bne.n	8007e64 <v_L45D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007dee:	f241 3388 	movw	r3, #5000	; 0x1388
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007df8:	2214      	movs	r2, #20
 8007dfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e02:	f7fd fb35 	bl	8005470 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8007e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e0a:	222d      	movs	r2, #45	; 0x2d
 8007e0c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007e10:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e14:	f7fd fba8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e18:	2103      	movs	r1, #3
 8007e1a:	20ff      	movs	r0, #255	; 0xff
 8007e1c:	f007 fd14 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007e20:	4b32      	ldr	r3, [pc, #200]	; (8007eec <v_L45D+0x294>)
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	bfb8      	it	lt
 8007e34:	425b      	neglt	r3, r3
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	b2d9      	uxtb	r1, r3
 8007e3c:	4a2b      	ldr	r2, [pc, #172]	; (8007eec <v_L45D+0x294>)
 8007e3e:	8813      	ldrh	r3, [r2, #0]
 8007e40:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e44:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 8007e46:	221c      	movs	r2, #28
 8007e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e50:	f7fd fcac 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8007e54:	231e      	movs	r3, #30
 8007e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e5a:	211e      	movs	r1, #30
 8007e5c:	4824      	ldr	r0, [pc, #144]	; (8007ef0 <v_L45D+0x298>)
 8007e5e:	f7fd f92f 	bl	80050c0 <driveD>
}
 8007e62:	e03e      	b.n	8007ee2 <v_L45D+0x28a>
	}else if(run_mode == 5){
 8007e64:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <v_L45D+0x290>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d139      	bne.n	8007ee2 <v_L45D+0x28a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007e6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e78:	2214      	movs	r2, #20
 8007e7a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e82:	f7fd faf5 	bl	8005470 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8007e86:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007e8a:	222d      	movs	r2, #45	; 0x2d
 8007e8c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007e90:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007e94:	f7fd fb68 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e98:	2103      	movs	r1, #3
 8007e9a:	20ff      	movs	r0, #255	; 0xff
 8007e9c:	f007 fcd4 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ea0:	4b12      	ldr	r3, [pc, #72]	; (8007eec <v_L45D+0x294>)
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	3301      	adds	r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	bfb8      	it	lt
 8007eb4:	425b      	neglt	r3, r3
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	b2d9      	uxtb	r1, r3
 8007ebc:	4a0b      	ldr	r2, [pc, #44]	; (8007eec <v_L45D+0x294>)
 8007ebe:	8813      	ldrh	r3, [r2, #0]
 8007ec0:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ec4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8007ec6:	221c      	movs	r2, #28
 8007ec8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007ecc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ed0:	f7fd fc6c 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8007ed4:	231e      	movs	r3, #30
 8007ed6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8007eda:	211e      	movs	r1, #30
 8007edc:	4804      	ldr	r0, [pc, #16]	; (8007ef0 <v_L45D+0x298>)
 8007ede:	f7fd f8ef 	bl	80050c0 <driveD>
}
 8007ee2:	bf00      	nop
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000456 	.word	0x20000456
 8007eec:	20000f64 	.word	0x20000f64
 8007ef0:	ffff8ad0 	.word	0xffff8ad0

08007ef4 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007efa:	2006      	movs	r0, #6
 8007efc:	f009 fb2e 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8007f00:	4b5d      	ldr	r3, [pc, #372]	; (8008078 <v_R90+0x184>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d11f      	bne.n	8007f4a <v_R90+0x56>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 8007f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f14:	222d      	movs	r2, #45	; 0x2d
 8007f16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f1e:	f7fd faa7 	bl	8005470 <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_LOW);
 8007f22:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f26:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007f2a:	4954      	ldr	r1, [pc, #336]	; (800807c <v_R90+0x188>)
 8007f2c:	4854      	ldr	r0, [pc, #336]	; (8008080 <v_R90+0x18c>)
 8007f2e:	f7fd fb1b 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f32:	2103      	movs	r1, #3
 8007f34:	2002      	movs	r0, #2
 8007f36:	f007 fc87 	bl	800f848 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 8007f3a:	222d      	movs	r2, #45	; 0x2d
 8007f3c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f40:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f44:	f7fd fc32 	bl	80057ac <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 8007f48:	e092      	b.n	8008070 <v_R90+0x17c>
	}else if(run_mode == MIDDLE){
 8007f4a:	4b4b      	ldr	r3, [pc, #300]	; (8008078 <v_R90+0x184>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d11f      	bne.n	8007f94 <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 8007f54:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f5e:	223a      	movs	r2, #58	; 0x3a
 8007f60:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f64:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f68:	f7fd fa82 	bl	8005470 <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_MIDDLE);
 8007f6c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007f70:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007f74:	4943      	ldr	r1, [pc, #268]	; (8008084 <v_R90+0x190>)
 8007f76:	4844      	ldr	r0, [pc, #272]	; (8008088 <v_R90+0x194>)
 8007f78:	f7fd faf6 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007f7c:	2103      	movs	r1, #3
 8007f7e:	2002      	movs	r0, #2
 8007f80:	f007 fc62 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 8007f84:	2252      	movs	r2, #82	; 0x52
 8007f86:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f8e:	f7fd fc0d 	bl	80057ac <slalomB>
}
 8007f92:	e06d      	b.n	8008070 <v_R90+0x17c>
	}else if(run_mode == HIGH){
 8007f94:	4b38      	ldr	r3, [pc, #224]	; (8008078 <v_R90+0x184>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d11f      	bne.n	8007fde <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8007f9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fa8:	2223      	movs	r2, #35	; 0x23
 8007faa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fae:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fb2:	f7fd fa5d 	bl	8005470 <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_HIGH);
 8007fb6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007fba:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007fbe:	4931      	ldr	r1, [pc, #196]	; (8008084 <v_R90+0x190>)
 8007fc0:	4831      	ldr	r0, [pc, #196]	; (8008088 <v_R90+0x194>)
 8007fc2:	f7fd fad1 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007fc6:	2103      	movs	r1, #3
 8007fc8:	2002      	movs	r0, #2
 8007fca:	f007 fc3d 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 8007fce:	2241      	movs	r2, #65	; 0x41
 8007fd0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fd8:	f7fd fbe8 	bl	80057ac <slalomB>
}
 8007fdc:	e048      	b.n	8008070 <v_R90+0x17c>
	}else if(run_mode == HIGH_HIGH){
 8007fde:	4b26      	ldr	r3, [pc, #152]	; (8008078 <v_R90+0x184>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d11f      	bne.n	8008028 <v_R90+0x134>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8007fe8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ff2:	221e      	movs	r2, #30
 8007ff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ff8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ffc:	f7fd fa38 	bl	8005470 <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_HIGH_HIGH);
 8008000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008004:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008008:	491e      	ldr	r1, [pc, #120]	; (8008084 <v_R90+0x190>)
 800800a:	4820      	ldr	r0, [pc, #128]	; (800808c <v_R90+0x198>)
 800800c:	f7fd faac 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8008010:	2103      	movs	r1, #3
 8008012:	2002      	movs	r0, #2
 8008014:	f007 fc18 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 8008018:	221e      	movs	r2, #30
 800801a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800801e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008022:	f7fd fbc3 	bl	80057ac <slalomB>
}
 8008026:	e023      	b.n	8008070 <v_R90+0x17c>
	}else if(run_mode == 5){
 8008028:	4b13      	ldr	r3, [pc, #76]	; (8008078 <v_R90+0x184>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b05      	cmp	r3, #5
 8008030:	d11e      	bne.n	8008070 <v_R90+0x17c>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008032:	f241 3388 	movw	r3, #5000	; 0x1388
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	f241 3388 	movw	r3, #5000	; 0x1388
 800803c:	2214      	movs	r2, #20
 800803e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008042:	f242 7010 	movw	r0, #10000	; 0x2710
 8008046:	f7fd fa13 	bl	8005470 <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 800804a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800804e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008052:	490f      	ldr	r1, [pc, #60]	; (8008090 <v_R90+0x19c>)
 8008054:	480d      	ldr	r0, [pc, #52]	; (800808c <v_R90+0x198>)
 8008056:	f7fd fa87 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 800805a:	2103      	movs	r1, #3
 800805c:	2002      	movs	r0, #2
 800805e:	f007 fbf3 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008062:	2214      	movs	r2, #20
 8008064:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008068:	f242 7010 	movw	r0, #10000	; 0x2710
 800806c:	f7fd fb9e 	bl	80057ac <slalomB>
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000456 	.word	0x20000456
 800807c:	fffffea2 	.word	0xfffffea2
 8008080:	fffff254 	.word	0xfffff254
 8008084:	fffffce0 	.word	0xfffffce0
 8008088:	ffffd8f0 	.word	0xffffd8f0
 800808c:	ffffc180 	.word	0xffffc180
 8008090:	fffffc18 	.word	0xfffffc18

08008094 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800809a:	2005      	movs	r0, #5
 800809c:	f009 fa5e 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 80080a0:	4b5f      	ldr	r3, [pc, #380]	; (8008220 <v_L90+0x18c>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d120      	bne.n	80080ec <v_L90+0x58>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 80080aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80080b4:	222d      	movs	r2, #45	; 0x2d
 80080b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80080ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80080be:	f7fd f9d7 	bl	8005470 <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_LOW);
 80080c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80080c6:	225a      	movs	r2, #90	; 0x5a
 80080c8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80080cc:	f640 50ac 	movw	r0, #3500	; 0xdac
 80080d0:	f7fd fa4a 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80080d4:	2103      	movs	r1, #3
 80080d6:	20fe      	movs	r0, #254	; 0xfe
 80080d8:	f007 fbb6 	bl	800f848 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 80080dc:	222d      	movs	r2, #45	; 0x2d
 80080de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80080e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80080e6:	f7fd fb61 	bl	80057ac <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80080ea:	e096      	b.n	800821a <v_L90+0x186>
	}else if(run_mode == MIDDLE){
 80080ec:	4b4c      	ldr	r3, [pc, #304]	; (8008220 <v_L90+0x18c>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d120      	bne.n	8008138 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80080f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008100:	223a      	movs	r2, #58	; 0x3a
 8008102:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008106:	f242 7010 	movw	r0, #10000	; 0x2710
 800810a:	f7fd f9b1 	bl	8005470 <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_MIDDLE);
 800810e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008112:	225a      	movs	r2, #90	; 0x5a
 8008114:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008118:	f242 7010 	movw	r0, #10000	; 0x2710
 800811c:	f7fd fa24 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008120:	2103      	movs	r1, #3
 8008122:	20fe      	movs	r0, #254	; 0xfe
 8008124:	f007 fb90 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 8008128:	2252      	movs	r2, #82	; 0x52
 800812a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800812e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008132:	f7fd fb3b 	bl	80057ac <slalomB>
}
 8008136:	e070      	b.n	800821a <v_L90+0x186>
	}else if(run_mode == HIGH){
 8008138:	4b39      	ldr	r3, [pc, #228]	; (8008220 <v_L90+0x18c>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d120      	bne.n	8008184 <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8008142:	f241 3388 	movw	r3, #5000	; 0x1388
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	f241 3388 	movw	r3, #5000	; 0x1388
 800814c:	2223      	movs	r2, #35	; 0x23
 800814e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008152:	f242 7010 	movw	r0, #10000	; 0x2710
 8008156:	f7fd f98b 	bl	8005470 <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_HIGH);
 800815a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800815e:	225a      	movs	r2, #90	; 0x5a
 8008160:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008164:	f242 7010 	movw	r0, #10000	; 0x2710
 8008168:	f7fd f9fe 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800816c:	2103      	movs	r1, #3
 800816e:	20fe      	movs	r0, #254	; 0xfe
 8008170:	f007 fb6a 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 8008174:	2241      	movs	r2, #65	; 0x41
 8008176:	f44f 7148 	mov.w	r1, #800	; 0x320
 800817a:	f242 7010 	movw	r0, #10000	; 0x2710
 800817e:	f7fd fb15 	bl	80057ac <slalomB>
}
 8008182:	e04a      	b.n	800821a <v_L90+0x186>
	}else if(run_mode == HIGH_HIGH){
 8008184:	4b26      	ldr	r3, [pc, #152]	; (8008220 <v_L90+0x18c>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b04      	cmp	r3, #4
 800818c:	d120      	bne.n	80081d0 <v_L90+0x13c>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 800818e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	f241 3388 	movw	r3, #5000	; 0x1388
 8008198:	221e      	movs	r2, #30
 800819a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800819e:	f242 7010 	movw	r0, #10000	; 0x2710
 80081a2:	f7fd f965 	bl	8005470 <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_HIGH_HIGH);
 80081a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081aa:	225a      	movs	r2, #90	; 0x5a
 80081ac:	f44f 7148 	mov.w	r1, #800	; 0x320
 80081b0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80081b4:	f7fd f9d8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80081b8:	2103      	movs	r1, #3
 80081ba:	20fe      	movs	r0, #254	; 0xfe
 80081bc:	f007 fb44 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 80081c0:	221e      	movs	r2, #30
 80081c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80081ca:	f7fd faef 	bl	80057ac <slalomB>
}
 80081ce:	e024      	b.n	800821a <v_L90+0x186>
	}else if(run_mode == 5){
 80081d0:	4b13      	ldr	r3, [pc, #76]	; (8008220 <v_L90+0x18c>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	d11f      	bne.n	800821a <v_L90+0x186>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 80081da:	f241 3388 	movw	r3, #5000	; 0x1388
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80081e4:	2214      	movs	r2, #20
 80081e6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80081ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80081ee:	f7fd f93f 	bl	8005470 <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 80081f2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80081f6:	225a      	movs	r2, #90	; 0x5a
 80081f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081fc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008200:	f7fd f9b2 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008204:	2103      	movs	r1, #3
 8008206:	20fe      	movs	r0, #254	; 0xfe
 8008208:	f007 fb1e 	bl	800f848 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 800820c:	2214      	movs	r2, #20
 800820e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008212:	f242 7010 	movw	r0, #10000	; 0x2710
 8008216:	f7fd fac9 	bl	80057ac <slalomB>
}
 800821a:	bf00      	nop
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20000456 	.word	0x20000456

08008224 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800822a:	2006      	movs	r0, #6
 800822c:	f009 f996 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8008230:	4bc2      	ldr	r3, [pc, #776]	; (800853c <v_R135+0x318>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d155      	bne.n	80082e6 <v_R135+0xc2>
		if(!MF2.FLAG.V){
 800823a:	4bc1      	ldr	r3, [pc, #772]	; (8008540 <v_R135+0x31c>)
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008248:	f241 3388 	movw	r3, #5000	; 0x1388
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008252:	2244      	movs	r2, #68	; 0x44
 8008254:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008258:	f242 7010 	movw	r0, #10000	; 0x2710
 800825c:	f7fd f908 	bl	8005470 <slalomF>
 8008260:	e00b      	b.n	800827a <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008262:	f241 3388 	movw	r3, #5000	; 0x1388
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	f241 3388 	movw	r3, #5000	; 0x1388
 800826c:	223a      	movs	r2, #58	; 0x3a
 800826e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008272:	f242 7010 	movw	r0, #10000	; 0x2710
 8008276:	f7fd f8fb 	bl	8005470 <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 800827a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800827e:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008282:	49b0      	ldr	r1, [pc, #704]	; (8008544 <v_R135+0x320>)
 8008284:	48b0      	ldr	r0, [pc, #704]	; (8008548 <v_R135+0x324>)
 8008286:	f7fd f96f 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800828a:	2103      	movs	r1, #3
 800828c:	2003      	movs	r0, #3
 800828e:	f007 fadb 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008292:	4bab      	ldr	r3, [pc, #684]	; (8008540 <v_R135+0x31c>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	3301      	adds	r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	bfb8      	it	lt
 80082a6:	425b      	neglt	r3, r3
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	b2d9      	uxtb	r1, r3
 80082ae:	4aa4      	ldr	r2, [pc, #656]	; (8008540 <v_R135+0x31c>)
 80082b0:	8813      	ldrh	r3, [r2, #0]
 80082b2:	f361 03c3 	bfi	r3, r1, #3, #1
 80082b6:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 80082b8:	4ba1      	ldr	r3, [pc, #644]	; (8008540 <v_R135+0x31c>)
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d107      	bne.n	80082d6 <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 80082c6:	2244      	movs	r2, #68	; 0x44
 80082c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80082cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80082d0:	f7fd fa6c 	bl	80057ac <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 80082d4:	e187      	b.n	80085e6 <v_R135+0x3c2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 80082d6:	223a      	movs	r2, #58	; 0x3a
 80082d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80082dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80082e0:	f7fd fa64 	bl	80057ac <slalomB>
}
 80082e4:	e17f      	b.n	80085e6 <v_R135+0x3c2>
	}else if(run_mode == MIDDLE){
 80082e6:	4b95      	ldr	r3, [pc, #596]	; (800853c <v_R135+0x318>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d155      	bne.n	800839c <v_R135+0x178>
		if(!MF2.FLAG.V){
 80082f0:	4b93      	ldr	r3, [pc, #588]	; (8008540 <v_R135+0x31c>)
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10c      	bne.n	8008318 <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 80082fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	f241 3388 	movw	r3, #5000	; 0x1388
 8008308:	2246      	movs	r2, #70	; 0x46
 800830a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800830e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008312:	f7fd f8ad 	bl	8005470 <slalomF>
 8008316:	e00b      	b.n	8008330 <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008318:	f241 3388 	movw	r3, #5000	; 0x1388
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008322:	2237      	movs	r2, #55	; 0x37
 8008324:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008328:	f242 7010 	movw	r0, #10000	; 0x2710
 800832c:	f7fd f8a0 	bl	8005470 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008330:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008334:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008338:	4984      	ldr	r1, [pc, #528]	; (800854c <v_R135+0x328>)
 800833a:	4885      	ldr	r0, [pc, #532]	; (8008550 <v_R135+0x32c>)
 800833c:	f7fd f914 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008340:	2103      	movs	r1, #3
 8008342:	2003      	movs	r0, #3
 8008344:	f007 fa80 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008348:	4b7d      	ldr	r3, [pc, #500]	; (8008540 <v_R135+0x31c>)
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	3301      	adds	r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	bfb8      	it	lt
 800835c:	425b      	neglt	r3, r3
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	b2d9      	uxtb	r1, r3
 8008364:	4a76      	ldr	r2, [pc, #472]	; (8008540 <v_R135+0x31c>)
 8008366:	8813      	ldrh	r3, [r2, #0]
 8008368:	f361 03c3 	bfi	r3, r1, #3, #1
 800836c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800836e:	4b74      	ldr	r3, [pc, #464]	; (8008540 <v_R135+0x31c>)
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 800837c:	225f      	movs	r2, #95	; 0x5f
 800837e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008382:	f242 7010 	movw	r0, #10000	; 0x2710
 8008386:	f7fd fa11 	bl	80057ac <slalomB>
}
 800838a:	e12c      	b.n	80085e6 <v_R135+0x3c2>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 800838c:	2250      	movs	r2, #80	; 0x50
 800838e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008392:	f242 7010 	movw	r0, #10000	; 0x2710
 8008396:	f7fd fa09 	bl	80057ac <slalomB>
}
 800839a:	e124      	b.n	80085e6 <v_R135+0x3c2>
	}else if(run_mode == HIGH){
 800839c:	4b67      	ldr	r3, [pc, #412]	; (800853c <v_R135+0x318>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d155      	bne.n	8008452 <v_R135+0x22e>
		if(!MF2.FLAG.V){
 80083a6:	4b66      	ldr	r3, [pc, #408]	; (8008540 <v_R135+0x31c>)
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10c      	bne.n	80083ce <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 80083b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80083be:	2255      	movs	r2, #85	; 0x55
 80083c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80083c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80083c8:	f7fd f852 	bl	8005470 <slalomF>
 80083cc:	e00b      	b.n	80083e6 <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80083ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80083d8:	224b      	movs	r2, #75	; 0x4b
 80083da:	f44f 7148 	mov.w	r1, #800	; 0x320
 80083de:	f242 7010 	movw	r0, #10000	; 0x2710
 80083e2:	f7fd f845 	bl	8005470 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 80083e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80083ea:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80083ee:	4959      	ldr	r1, [pc, #356]	; (8008554 <v_R135+0x330>)
 80083f0:	4859      	ldr	r0, [pc, #356]	; (8008558 <v_R135+0x334>)
 80083f2:	f7fd f8b9 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80083f6:	2103      	movs	r1, #3
 80083f8:	2003      	movs	r0, #3
 80083fa:	f007 fa25 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80083fe:	4b50      	ldr	r3, [pc, #320]	; (8008540 <v_R135+0x31c>)
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008406:	b2db      	uxtb	r3, r3
 8008408:	3301      	adds	r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	bfb8      	it	lt
 8008412:	425b      	neglt	r3, r3
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	b2d9      	uxtb	r1, r3
 800841a:	4a49      	ldr	r2, [pc, #292]	; (8008540 <v_R135+0x31c>)
 800841c:	8813      	ldrh	r3, [r2, #0]
 800841e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008422:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008424:	4b46      	ldr	r3, [pc, #280]	; (8008540 <v_R135+0x31c>)
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d107      	bne.n	8008442 <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 8008432:	2282      	movs	r2, #130	; 0x82
 8008434:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008438:	f242 7010 	movw	r0, #10000	; 0x2710
 800843c:	f7fd f9b6 	bl	80057ac <slalomB>
}
 8008440:	e0d1      	b.n	80085e6 <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 8008442:	2269      	movs	r2, #105	; 0x69
 8008444:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008448:	f242 7010 	movw	r0, #10000	; 0x2710
 800844c:	f7fd f9ae 	bl	80057ac <slalomB>
}
 8008450:	e0c9      	b.n	80085e6 <v_R135+0x3c2>
	}else if(run_mode == HIGH_HIGH){
 8008452:	4b3a      	ldr	r3, [pc, #232]	; (800853c <v_R135+0x318>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b04      	cmp	r3, #4
 800845a:	d155      	bne.n	8008508 <v_R135+0x2e4>
		if(!MF2.FLAG.V){
 800845c:	4b38      	ldr	r3, [pc, #224]	; (8008540 <v_R135+0x31c>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10c      	bne.n	8008484 <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 800846a:	f241 3388 	movw	r3, #5000	; 0x1388
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	f241 3388 	movw	r3, #5000	; 0x1388
 8008474:	2243      	movs	r2, #67	; 0x43
 8008476:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800847a:	f242 7010 	movw	r0, #10000	; 0x2710
 800847e:	f7fc fff7 	bl	8005470 <slalomF>
 8008482:	e00b      	b.n	800849c <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008484:	f241 3388 	movw	r3, #5000	; 0x1388
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	f241 3388 	movw	r3, #5000	; 0x1388
 800848e:	2243      	movs	r2, #67	; 0x43
 8008490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008494:	f242 7010 	movw	r0, #10000	; 0x2710
 8008498:	f7fc ffea 	bl	8005470 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH_HIGH);
 800849c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084a0:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80084a4:	492d      	ldr	r1, [pc, #180]	; (800855c <v_R135+0x338>)
 80084a6:	482e      	ldr	r0, [pc, #184]	; (8008560 <v_R135+0x33c>)
 80084a8:	f7fd f85e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084ac:	2103      	movs	r1, #3
 80084ae:	2003      	movs	r0, #3
 80084b0:	f007 f9ca 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <v_R135+0x31c>)
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	3301      	adds	r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	bfb8      	it	lt
 80084c8:	425b      	neglt	r3, r3
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	b2d9      	uxtb	r1, r3
 80084d0:	4a1b      	ldr	r2, [pc, #108]	; (8008540 <v_R135+0x31c>)
 80084d2:	8813      	ldrh	r3, [r2, #0]
 80084d4:	f361 03c3 	bfi	r3, r1, #3, #1
 80084d8:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80084da:	4b19      	ldr	r3, [pc, #100]	; (8008540 <v_R135+0x31c>)
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d107      	bne.n	80084f8 <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 80084e8:	2232      	movs	r2, #50	; 0x32
 80084ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80084f2:	f7fd f95b 	bl	80057ac <slalomB>
}
 80084f6:	e076      	b.n	80085e6 <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 80084f8:	2232      	movs	r2, #50	; 0x32
 80084fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8008502:	f7fd f953 	bl	80057ac <slalomB>
}
 8008506:	e06e      	b.n	80085e6 <v_R135+0x3c2>
	}else if(run_mode == 5){
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <v_R135+0x318>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b05      	cmp	r3, #5
 8008510:	d169      	bne.n	80085e6 <v_R135+0x3c2>
		if(!MF2.FLAG.V){
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <v_R135+0x31c>)
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d121      	bne.n	8008564 <v_R135+0x340>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008520:	f241 3388 	movw	r3, #5000	; 0x1388
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	f241 3388 	movw	r3, #5000	; 0x1388
 800852a:	2228      	movs	r2, #40	; 0x28
 800852c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008530:	f242 7010 	movw	r0, #10000	; 0x2710
 8008534:	f7fc ff9c 	bl	8005470 <slalomF>
 8008538:	e020      	b.n	800857c <v_R135+0x358>
 800853a:	bf00      	nop
 800853c:	20000456 	.word	0x20000456
 8008540:	20000f64 	.word	0x20000f64
 8008544:	fffffed4 	.word	0xfffffed4
 8008548:	fffff448 	.word	0xfffff448
 800854c:	fffffe0c 	.word	0xfffffe0c
 8008550:	ffffec78 	.word	0xffffec78
 8008554:	fffffce0 	.word	0xfffffce0
 8008558:	ffffe0c0 	.word	0xffffe0c0
 800855c:	fffffc18 	.word	0xfffffc18
 8008560:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008564:	f241 3388 	movw	r3, #5000	; 0x1388
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	f241 3388 	movw	r3, #5000	; 0x1388
 800856e:	2243      	movs	r2, #67	; 0x43
 8008570:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008574:	f242 7010 	movw	r0, #10000	; 0x2710
 8008578:	f7fc ff7a 	bl	8005470 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 800857c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008580:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008584:	4919      	ldr	r1, [pc, #100]	; (80085ec <v_R135+0x3c8>)
 8008586:	481a      	ldr	r0, [pc, #104]	; (80085f0 <v_R135+0x3cc>)
 8008588:	f7fc ffee 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800858c:	2103      	movs	r1, #3
 800858e:	2003      	movs	r0, #3
 8008590:	f007 f95a 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008594:	4b17      	ldr	r3, [pc, #92]	; (80085f4 <v_R135+0x3d0>)
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	3301      	adds	r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	bfb8      	it	lt
 80085a8:	425b      	neglt	r3, r3
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	b2d9      	uxtb	r1, r3
 80085b0:	4a10      	ldr	r2, [pc, #64]	; (80085f4 <v_R135+0x3d0>)
 80085b2:	8813      	ldrh	r3, [r2, #0]
 80085b4:	f361 03c3 	bfi	r3, r1, #3, #1
 80085b8:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <v_R135+0x3d0>)
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d107      	bne.n	80085d8 <v_R135+0x3b4>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 80085c8:	2232      	movs	r2, #50	; 0x32
 80085ca:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80085d2:	f7fd f8eb 	bl	80057ac <slalomB>
}
 80085d6:	e006      	b.n	80085e6 <v_R135+0x3c2>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 80085d8:	2219      	movs	r2, #25
 80085da:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085de:	f242 7010 	movw	r0, #10000	; 0x2710
 80085e2:	f7fd f8e3 	bl	80057ac <slalomB>
}
 80085e6:	bf00      	nop
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	fffffc18 	.word	0xfffffc18
 80085f0:	ffffd120 	.word	0xffffd120
 80085f4:	20000f64 	.word	0x20000f64

080085f8 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80085fe:	2005      	movs	r0, #5
 8008600:	f008 ffac 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8008604:	4bc4      	ldr	r3, [pc, #784]	; (8008918 <v_L135+0x320>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b01      	cmp	r3, #1
 800860c:	d156      	bne.n	80086bc <v_L135+0xc4>
		if(!MF2.FLAG.V){
 800860e:	4bc3      	ldr	r3, [pc, #780]	; (800891c <v_L135+0x324>)
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10c      	bne.n	8008636 <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 800861c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	f241 3388 	movw	r3, #5000	; 0x1388
 8008626:	2244      	movs	r2, #68	; 0x44
 8008628:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800862c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008630:	f7fc ff1e 	bl	8005470 <slalomF>
 8008634:	e00b      	b.n	800864e <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008636:	f241 3388 	movw	r3, #5000	; 0x1388
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008640:	223a      	movs	r2, #58	; 0x3a
 8008642:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008646:	f242 7010 	movw	r0, #10000	; 0x2710
 800864a:	f7fc ff11 	bl	8005470 <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 800864e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008652:	2287      	movs	r2, #135	; 0x87
 8008654:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008658:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800865c:	f7fc ff84 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008660:	2103      	movs	r1, #3
 8008662:	20fd      	movs	r0, #253	; 0xfd
 8008664:	f007 f8f0 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008668:	4bac      	ldr	r3, [pc, #688]	; (800891c <v_L135+0x324>)
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	3301      	adds	r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	bfb8      	it	lt
 800867c:	425b      	neglt	r3, r3
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	b2d9      	uxtb	r1, r3
 8008684:	4aa5      	ldr	r2, [pc, #660]	; (800891c <v_L135+0x324>)
 8008686:	8813      	ldrh	r3, [r2, #0]
 8008688:	f361 03c3 	bfi	r3, r1, #3, #1
 800868c:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 800868e:	4ba3      	ldr	r3, [pc, #652]	; (800891c <v_L135+0x324>)
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d107      	bne.n	80086ac <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 800869c:	2244      	movs	r2, #68	; 0x44
 800869e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80086a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80086a6:	f7fd f881 	bl	80057ac <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 80086aa:	e17b      	b.n	80089a4 <v_L135+0x3ac>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 80086ac:	223a      	movs	r2, #58	; 0x3a
 80086ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80086b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80086b6:	f7fd f879 	bl	80057ac <slalomB>
}
 80086ba:	e173      	b.n	80089a4 <v_L135+0x3ac>
	}else if(run_mode == MIDDLE){
 80086bc:	4b96      	ldr	r3, [pc, #600]	; (8008918 <v_L135+0x320>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d156      	bne.n	8008774 <v_L135+0x17c>
		if(!MF2.FLAG.V){
 80086c6:	4b95      	ldr	r3, [pc, #596]	; (800891c <v_L135+0x324>)
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10c      	bne.n	80086ee <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 80086d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	f241 3388 	movw	r3, #5000	; 0x1388
 80086de:	2246      	movs	r2, #70	; 0x46
 80086e0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80086e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80086e8:	f7fc fec2 	bl	8005470 <slalomF>
 80086ec:	e00b      	b.n	8008706 <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 80086ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80086f8:	2237      	movs	r2, #55	; 0x37
 80086fa:	f44f 7116 	mov.w	r1, #600	; 0x258
 80086fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8008702:	f7fc feb5 	bl	8005470 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8008706:	f44f 7316 	mov.w	r3, #600	; 0x258
 800870a:	2287      	movs	r2, #135	; 0x87
 800870c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008710:	f241 3088 	movw	r0, #5000	; 0x1388
 8008714:	f7fc ff28 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008718:	2103      	movs	r1, #3
 800871a:	20fd      	movs	r0, #253	; 0xfd
 800871c:	f007 f894 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008720:	4b7e      	ldr	r3, [pc, #504]	; (800891c <v_L135+0x324>)
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008728:	b2db      	uxtb	r3, r3
 800872a:	3301      	adds	r3, #1
 800872c:	2b00      	cmp	r3, #0
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	bfb8      	it	lt
 8008734:	425b      	neglt	r3, r3
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	b2d9      	uxtb	r1, r3
 800873c:	4a77      	ldr	r2, [pc, #476]	; (800891c <v_L135+0x324>)
 800873e:	8813      	ldrh	r3, [r2, #0]
 8008740:	f361 03c3 	bfi	r3, r1, #3, #1
 8008744:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008746:	4b75      	ldr	r3, [pc, #468]	; (800891c <v_L135+0x324>)
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d107      	bne.n	8008764 <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 8008754:	225f      	movs	r2, #95	; 0x5f
 8008756:	f44f 7116 	mov.w	r1, #600	; 0x258
 800875a:	f242 7010 	movw	r0, #10000	; 0x2710
 800875e:	f7fd f825 	bl	80057ac <slalomB>
}
 8008762:	e11f      	b.n	80089a4 <v_L135+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008764:	2250      	movs	r2, #80	; 0x50
 8008766:	f44f 7116 	mov.w	r1, #600	; 0x258
 800876a:	f242 7010 	movw	r0, #10000	; 0x2710
 800876e:	f7fd f81d 	bl	80057ac <slalomB>
}
 8008772:	e117      	b.n	80089a4 <v_L135+0x3ac>
	}else if(run_mode == HIGH){
 8008774:	4b68      	ldr	r3, [pc, #416]	; (8008918 <v_L135+0x320>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d156      	bne.n	800882c <v_L135+0x234>
		if(!MF2.FLAG.V){
 800877e:	4b67      	ldr	r3, [pc, #412]	; (800891c <v_L135+0x324>)
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10c      	bne.n	80087a6 <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 800878c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	f241 3388 	movw	r3, #5000	; 0x1388
 8008796:	2255      	movs	r2, #85	; 0x55
 8008798:	f44f 7148 	mov.w	r1, #800	; 0x320
 800879c:	f242 7010 	movw	r0, #10000	; 0x2710
 80087a0:	f7fc fe66 	bl	8005470 <slalomF>
 80087a4:	e00b      	b.n	80087be <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80087a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80087b0:	224b      	movs	r2, #75	; 0x4b
 80087b2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80087b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80087ba:	f7fc fe59 	bl	8005470 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 80087be:	f44f 7348 	mov.w	r3, #800	; 0x320
 80087c2:	2287      	movs	r2, #135	; 0x87
 80087c4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80087c8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80087cc:	f7fc fecc 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80087d0:	2103      	movs	r1, #3
 80087d2:	20fd      	movs	r0, #253	; 0xfd
 80087d4:	f007 f838 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80087d8:	4b50      	ldr	r3, [pc, #320]	; (800891c <v_L135+0x324>)
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	3301      	adds	r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	bfb8      	it	lt
 80087ec:	425b      	neglt	r3, r3
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	b2d9      	uxtb	r1, r3
 80087f4:	4a49      	ldr	r2, [pc, #292]	; (800891c <v_L135+0x324>)
 80087f6:	8813      	ldrh	r3, [r2, #0]
 80087f8:	f361 03c3 	bfi	r3, r1, #3, #1
 80087fc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80087fe:	4b47      	ldr	r3, [pc, #284]	; (800891c <v_L135+0x324>)
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d107      	bne.n	800881c <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 800880c:	2282      	movs	r2, #130	; 0x82
 800880e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008812:	f242 7010 	movw	r0, #10000	; 0x2710
 8008816:	f7fc ffc9 	bl	80057ac <slalomB>
}
 800881a:	e0c3      	b.n	80089a4 <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 800881c:	2269      	movs	r2, #105	; 0x69
 800881e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008822:	f242 7010 	movw	r0, #10000	; 0x2710
 8008826:	f7fc ffc1 	bl	80057ac <slalomB>
}
 800882a:	e0bb      	b.n	80089a4 <v_L135+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 800882c:	4b3a      	ldr	r3, [pc, #232]	; (8008918 <v_L135+0x320>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b04      	cmp	r3, #4
 8008834:	d156      	bne.n	80088e4 <v_L135+0x2ec>
		if(!MF2.FLAG.V){
 8008836:	4b39      	ldr	r3, [pc, #228]	; (800891c <v_L135+0x324>)
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008844:	f241 3388 	movw	r3, #5000	; 0x1388
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	f241 3388 	movw	r3, #5000	; 0x1388
 800884e:	2243      	movs	r2, #67	; 0x43
 8008850:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008854:	f242 7010 	movw	r0, #10000	; 0x2710
 8008858:	f7fc fe0a 	bl	8005470 <slalomF>
 800885c:	e00b      	b.n	8008876 <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 800885e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	f241 3388 	movw	r3, #5000	; 0x1388
 8008868:	2243      	movs	r2, #67	; 0x43
 800886a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800886e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008872:	f7fc fdfd 	bl	8005470 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8008876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800887a:	2287      	movs	r2, #135	; 0x87
 800887c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008880:	f242 7010 	movw	r0, #10000	; 0x2710
 8008884:	f7fc fe70 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008888:	2103      	movs	r1, #3
 800888a:	20fd      	movs	r0, #253	; 0xfd
 800888c:	f006 ffdc 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008890:	4b22      	ldr	r3, [pc, #136]	; (800891c <v_L135+0x324>)
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008898:	b2db      	uxtb	r3, r3
 800889a:	3301      	adds	r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	bfb8      	it	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	b2d9      	uxtb	r1, r3
 80088ac:	4a1b      	ldr	r2, [pc, #108]	; (800891c <v_L135+0x324>)
 80088ae:	8813      	ldrh	r3, [r2, #0]
 80088b0:	f361 03c3 	bfi	r3, r1, #3, #1
 80088b4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80088b6:	4b19      	ldr	r3, [pc, #100]	; (800891c <v_L135+0x324>)
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d107      	bne.n	80088d4 <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 80088c4:	2232      	movs	r2, #50	; 0x32
 80088c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80088ce:	f7fc ff6d 	bl	80057ac <slalomB>
}
 80088d2:	e067      	b.n	80089a4 <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 80088d4:	2232      	movs	r2, #50	; 0x32
 80088d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088da:	f242 7010 	movw	r0, #10000	; 0x2710
 80088de:	f7fc ff65 	bl	80057ac <slalomB>
}
 80088e2:	e05f      	b.n	80089a4 <v_L135+0x3ac>
	}else if(run_mode == 5){
 80088e4:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <v_L135+0x320>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d15a      	bne.n	80089a4 <v_L135+0x3ac>
		if(!MF2.FLAG.V){
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <v_L135+0x324>)
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d111      	bne.n	8008920 <v_L135+0x328>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 80088fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	f241 3388 	movw	r3, #5000	; 0x1388
 8008906:	2228      	movs	r2, #40	; 0x28
 8008908:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800890c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008910:	f7fc fdae 	bl	8005470 <slalomF>
 8008914:	e010      	b.n	8008938 <v_L135+0x340>
 8008916:	bf00      	nop
 8008918:	20000456 	.word	0x20000456
 800891c:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008920:	f241 3388 	movw	r3, #5000	; 0x1388
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	f241 3388 	movw	r3, #5000	; 0x1388
 800892a:	2243      	movs	r2, #67	; 0x43
 800892c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008930:	f242 7010 	movw	r0, #10000	; 0x2710
 8008934:	f7fc fd9c 	bl	8005470 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008938:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800893c:	2287      	movs	r2, #135	; 0x87
 800893e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008942:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8008946:	f7fc fe0f 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800894a:	2103      	movs	r1, #3
 800894c:	20fd      	movs	r0, #253	; 0xfd
 800894e:	f006 ff7b 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <v_L135+0x3b4>)
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	3301      	adds	r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	f003 0301 	and.w	r3, r3, #1
 8008964:	bfb8      	it	lt
 8008966:	425b      	neglt	r3, r3
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	b2d9      	uxtb	r1, r3
 800896e:	4a0f      	ldr	r2, [pc, #60]	; (80089ac <v_L135+0x3b4>)
 8008970:	8813      	ldrh	r3, [r2, #0]
 8008972:	f361 03c3 	bfi	r3, r1, #3, #1
 8008976:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <v_L135+0x3b4>)
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d107      	bne.n	8008996 <v_L135+0x39e>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008986:	2232      	movs	r2, #50	; 0x32
 8008988:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800898c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008990:	f7fc ff0c 	bl	80057ac <slalomB>
}
 8008994:	e006      	b.n	80089a4 <v_L135+0x3ac>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008996:	2219      	movs	r2, #25
 8008998:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800899c:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a0:	f7fc ff04 	bl	80057ac <slalomB>
}
 80089a4:	bf00      	nop
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000f64 	.word	0x20000f64

080089b0 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80089b6:	2006      	movs	r0, #6
 80089b8:	f008 fdd0 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 80089bc:	4b9e      	ldr	r3, [pc, #632]	; (8008c38 <v_R135D+0x288>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d139      	bne.n	8008a3a <v_R135D+0x8a>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80089c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80089d0:	223a      	movs	r2, #58	; 0x3a
 80089d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80089d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80089da:	f7fc fd49 	bl	8005470 <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 80089de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80089e2:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80089e6:	4995      	ldr	r1, [pc, #596]	; (8008c3c <v_R135D+0x28c>)
 80089e8:	4895      	ldr	r0, [pc, #596]	; (8008c40 <v_R135D+0x290>)
 80089ea:	f7fc fdbd 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80089ee:	2103      	movs	r1, #3
 80089f0:	2003      	movs	r0, #3
 80089f2:	f006 ff29 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80089f6:	4b93      	ldr	r3, [pc, #588]	; (8008c44 <v_R135D+0x294>)
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	3301      	adds	r3, #1
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	bfb8      	it	lt
 8008a0a:	425b      	neglt	r3, r3
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	b2d9      	uxtb	r1, r3
 8008a12:	4a8c      	ldr	r2, [pc, #560]	; (8008c44 <v_R135D+0x294>)
 8008a14:	8813      	ldrh	r3, [r2, #0]
 8008a16:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a1a:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008a1c:	2226      	movs	r2, #38	; 0x26
 8008a1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008a22:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a26:	f7fc fec1 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008a2a:	231e      	movs	r3, #30
 8008a2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a30:	211e      	movs	r1, #30
 8008a32:	4885      	ldr	r0, [pc, #532]	; (8008c48 <v_R135D+0x298>)
 8008a34:	f7fc fb44 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008a38:	e0fa      	b.n	8008c30 <v_R135D+0x280>
	}else if(run_mode == MIDDLE){
 8008a3a:	4b7f      	ldr	r3, [pc, #508]	; (8008c38 <v_R135D+0x288>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d139      	bne.n	8008ab8 <v_R135D+0x108>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008a44:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a4e:	2237      	movs	r2, #55	; 0x37
 8008a50:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008a54:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a58:	f7fc fd0a 	bl	8005470 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008a5c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008a60:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008a64:	4979      	ldr	r1, [pc, #484]	; (8008c4c <v_R135D+0x29c>)
 8008a66:	487a      	ldr	r0, [pc, #488]	; (8008c50 <v_R135D+0x2a0>)
 8008a68:	f7fc fd7e 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a6c:	2103      	movs	r1, #3
 8008a6e:	2003      	movs	r0, #3
 8008a70:	f006 feea 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008a74:	4b73      	ldr	r3, [pc, #460]	; (8008c44 <v_R135D+0x294>)
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	3301      	adds	r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	bfb8      	it	lt
 8008a88:	425b      	neglt	r3, r3
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	b2d9      	uxtb	r1, r3
 8008a90:	4a6c      	ldr	r2, [pc, #432]	; (8008c44 <v_R135D+0x294>)
 8008a92:	8813      	ldrh	r3, [r2, #0]
 8008a94:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a98:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8008a9a:	2241      	movs	r2, #65	; 0x41
 8008a9c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008aa0:	f242 7010 	movw	r0, #10000	; 0x2710
 8008aa4:	f7fc fe82 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008aa8:	231e      	movs	r3, #30
 8008aaa:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008aae:	211e      	movs	r1, #30
 8008ab0:	4865      	ldr	r0, [pc, #404]	; (8008c48 <v_R135D+0x298>)
 8008ab2:	f7fc fb05 	bl	80050c0 <driveD>
}
 8008ab6:	e0bb      	b.n	8008c30 <v_R135D+0x280>
	}else if(run_mode == HIGH){
 8008ab8:	4b5f      	ldr	r3, [pc, #380]	; (8008c38 <v_R135D+0x288>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d139      	bne.n	8008b36 <v_R135D+0x186>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008acc:	224b      	movs	r2, #75	; 0x4b
 8008ace:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008ad2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ad6:	f7fc fccb 	bl	8005470 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 8008ada:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008ade:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008ae2:	495c      	ldr	r1, [pc, #368]	; (8008c54 <v_R135D+0x2a4>)
 8008ae4:	485c      	ldr	r0, [pc, #368]	; (8008c58 <v_R135D+0x2a8>)
 8008ae6:	f7fc fd3f 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008aea:	2103      	movs	r1, #3
 8008aec:	2003      	movs	r0, #3
 8008aee:	f006 feab 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008af2:	4b54      	ldr	r3, [pc, #336]	; (8008c44 <v_R135D+0x294>)
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	3301      	adds	r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	bfb8      	it	lt
 8008b06:	425b      	neglt	r3, r3
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	b2d9      	uxtb	r1, r3
 8008b0e:	4a4d      	ldr	r2, [pc, #308]	; (8008c44 <v_R135D+0x294>)
 8008b10:	8813      	ldrh	r3, [r2, #0]
 8008b12:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b16:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8008b18:	2264      	movs	r2, #100	; 0x64
 8008b1a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008b1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b22:	f7fc fe43 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008b26:	231e      	movs	r3, #30
 8008b28:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008b2c:	211e      	movs	r1, #30
 8008b2e:	4846      	ldr	r0, [pc, #280]	; (8008c48 <v_R135D+0x298>)
 8008b30:	f7fc fac6 	bl	80050c0 <driveD>
}
 8008b34:	e07c      	b.n	8008c30 <v_R135D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8008b36:	4b40      	ldr	r3, [pc, #256]	; (8008c38 <v_R135D+0x288>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d139      	bne.n	8008bb4 <v_R135D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b4a:	2243      	movs	r2, #67	; 0x43
 8008b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b54:	f7fc fc8c 	bl	8005470 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH);
 8008b58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008b5c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008b60:	493e      	ldr	r1, [pc, #248]	; (8008c5c <v_R135D+0x2ac>)
 8008b62:	483f      	ldr	r0, [pc, #252]	; (8008c60 <v_R135D+0x2b0>)
 8008b64:	f7fc fd00 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b68:	2103      	movs	r1, #3
 8008b6a:	2003      	movs	r0, #3
 8008b6c:	f006 fe6c 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008b70:	4b34      	ldr	r3, [pc, #208]	; (8008c44 <v_R135D+0x294>)
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	bfb8      	it	lt
 8008b84:	425b      	neglt	r3, r3
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	b2d9      	uxtb	r1, r3
 8008b8c:	4a2d      	ldr	r2, [pc, #180]	; (8008c44 <v_R135D+0x294>)
 8008b8e:	8813      	ldrh	r3, [r2, #0]
 8008b90:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b94:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 8008b96:	2214      	movs	r2, #20
 8008b98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ba0:	f7fc fe04 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8008ba4:	231e      	movs	r3, #30
 8008ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008baa:	211e      	movs	r1, #30
 8008bac:	4826      	ldr	r0, [pc, #152]	; (8008c48 <v_R135D+0x298>)
 8008bae:	f7fc fa87 	bl	80050c0 <driveD>
}
 8008bb2:	e03d      	b.n	8008c30 <v_R135D+0x280>
	}else if(run_mode == 5){
 8008bb4:	4b20      	ldr	r3, [pc, #128]	; (8008c38 <v_R135D+0x288>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d138      	bne.n	8008c30 <v_R135D+0x280>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bc8:	2243      	movs	r2, #67	; 0x43
 8008bca:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008bce:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bd2:	f7fc fc4d 	bl	8005470 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008bd6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008bda:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008bde:	491f      	ldr	r1, [pc, #124]	; (8008c5c <v_R135D+0x2ac>)
 8008be0:	4820      	ldr	r0, [pc, #128]	; (8008c64 <v_R135D+0x2b4>)
 8008be2:	f7fc fcc1 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008be6:	2103      	movs	r1, #3
 8008be8:	2003      	movs	r0, #3
 8008bea:	f006 fe2d 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008bee:	4b15      	ldr	r3, [pc, #84]	; (8008c44 <v_R135D+0x294>)
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	bfb8      	it	lt
 8008c02:	425b      	neglt	r3, r3
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	b2d9      	uxtb	r1, r3
 8008c0a:	4a0e      	ldr	r2, [pc, #56]	; (8008c44 <v_R135D+0x294>)
 8008c0c:	8813      	ldrh	r3, [r2, #0]
 8008c0e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008c12:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8008c14:	2214      	movs	r2, #20
 8008c16:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008c1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c1e:	f7fc fdc5 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008c22:	231e      	movs	r3, #30
 8008c24:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008c28:	211e      	movs	r1, #30
 8008c2a:	4807      	ldr	r0, [pc, #28]	; (8008c48 <v_R135D+0x298>)
 8008c2c:	f7fc fa48 	bl	80050c0 <driveD>
}
 8008c30:	bf00      	nop
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000456 	.word	0x20000456
 8008c3c:	fffffed4 	.word	0xfffffed4
 8008c40:	fffff448 	.word	0xfffff448
 8008c44:	20000f64 	.word	0x20000f64
 8008c48:	ffff8ad0 	.word	0xffff8ad0
 8008c4c:	fffffe0c 	.word	0xfffffe0c
 8008c50:	ffffec78 	.word	0xffffec78
 8008c54:	fffffce0 	.word	0xfffffce0
 8008c58:	ffffe0c0 	.word	0xffffe0c0
 8008c5c:	fffffc18 	.word	0xfffffc18
 8008c60:	ffffd8f0 	.word	0xffffd8f0
 8008c64:	ffffd120 	.word	0xffffd120

08008c68 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008c6e:	2005      	movs	r0, #5
 8008c70:	f008 fc74 	bl	801155c <full_led_write>
	if(run_mode == LOW){
 8008c74:	4ba0      	ldr	r3, [pc, #640]	; (8008ef8 <v_L135D+0x290>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d13a      	bne.n	8008cf4 <v_L135D+0x8c>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c88:	223a      	movs	r2, #58	; 0x3a
 8008c8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c92:	f7fc fbed 	bl	8005470 <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8008c96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008c9a:	2287      	movs	r2, #135	; 0x87
 8008c9c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008ca0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008ca4:	f7fc fc60 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ca8:	2103      	movs	r1, #3
 8008caa:	20fd      	movs	r0, #253	; 0xfd
 8008cac:	f006 fdcc 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008cb0:	4b92      	ldr	r3, [pc, #584]	; (8008efc <v_L135D+0x294>)
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	3301      	adds	r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	bfb8      	it	lt
 8008cc4:	425b      	neglt	r3, r3
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	b2d9      	uxtb	r1, r3
 8008ccc:	4a8b      	ldr	r2, [pc, #556]	; (8008efc <v_L135D+0x294>)
 8008cce:	8813      	ldrh	r3, [r2, #0]
 8008cd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8008cd4:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008cd6:	2226      	movs	r2, #38	; 0x26
 8008cd8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008cdc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ce0:	f7fc fd64 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008ce4:	231e      	movs	r3, #30
 8008ce6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008cea:	211e      	movs	r1, #30
 8008cec:	4884      	ldr	r0, [pc, #528]	; (8008f00 <v_L135D+0x298>)
 8008cee:	f7fc f9e7 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008cf2:	e0fe      	b.n	8008ef2 <v_L135D+0x28a>
	}else if(run_mode == MIDDLE){
 8008cf4:	4b80      	ldr	r3, [pc, #512]	; (8008ef8 <v_L135D+0x290>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d13a      	bne.n	8008d74 <v_L135D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d08:	2237      	movs	r2, #55	; 0x37
 8008d0a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d12:	f7fc fbad 	bl	8005470 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8008d16:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008d1a:	2287      	movs	r2, #135	; 0x87
 8008d1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008d20:	f241 3088 	movw	r0, #5000	; 0x1388
 8008d24:	f7fc fc20 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008d28:	2103      	movs	r1, #3
 8008d2a:	20fd      	movs	r0, #253	; 0xfd
 8008d2c:	f006 fd8c 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d30:	4b72      	ldr	r3, [pc, #456]	; (8008efc <v_L135D+0x294>)
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	bfb8      	it	lt
 8008d44:	425b      	neglt	r3, r3
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	b2d9      	uxtb	r1, r3
 8008d4c:	4a6b      	ldr	r2, [pc, #428]	; (8008efc <v_L135D+0x294>)
 8008d4e:	8813      	ldrh	r3, [r2, #0]
 8008d50:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d54:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8008d56:	2241      	movs	r2, #65	; 0x41
 8008d58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d60:	f7fc fd24 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008d64:	231e      	movs	r3, #30
 8008d66:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008d6a:	211e      	movs	r1, #30
 8008d6c:	4864      	ldr	r0, [pc, #400]	; (8008f00 <v_L135D+0x298>)
 8008d6e:	f7fc f9a7 	bl	80050c0 <driveD>
}
 8008d72:	e0be      	b.n	8008ef2 <v_L135D+0x28a>
	}else if(run_mode == HIGH){
 8008d74:	4b60      	ldr	r3, [pc, #384]	; (8008ef8 <v_L135D+0x290>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d13a      	bne.n	8008df4 <v_L135D+0x18c>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008d7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d88:	224b      	movs	r2, #75	; 0x4b
 8008d8a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d92:	f7fc fb6d 	bl	8005470 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 8008d96:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008d9a:	2287      	movs	r2, #135	; 0x87
 8008d9c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008da0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008da4:	f7fc fbe0 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008da8:	2103      	movs	r1, #3
 8008daa:	20fd      	movs	r0, #253	; 0xfd
 8008dac:	f006 fd4c 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008db0:	4b52      	ldr	r3, [pc, #328]	; (8008efc <v_L135D+0x294>)
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	3301      	adds	r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	bfb8      	it	lt
 8008dc4:	425b      	neglt	r3, r3
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	b2d9      	uxtb	r1, r3
 8008dcc:	4a4b      	ldr	r2, [pc, #300]	; (8008efc <v_L135D+0x294>)
 8008dce:	8813      	ldrh	r3, [r2, #0]
 8008dd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8008dd4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8008dd6:	2264      	movs	r2, #100	; 0x64
 8008dd8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008ddc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008de0:	f7fc fce4 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008de4:	231e      	movs	r3, #30
 8008de6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008dea:	211e      	movs	r1, #30
 8008dec:	4844      	ldr	r0, [pc, #272]	; (8008f00 <v_L135D+0x298>)
 8008dee:	f7fc f967 	bl	80050c0 <driveD>
}
 8008df2:	e07e      	b.n	8008ef2 <v_L135D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8008df4:	4b40      	ldr	r3, [pc, #256]	; (8008ef8 <v_L135D+0x290>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d13a      	bne.n	8008e74 <v_L135D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e08:	2243      	movs	r2, #67	; 0x43
 8008e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e12:	f7fc fb2d 	bl	8005470 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8008e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e1a:	2287      	movs	r2, #135	; 0x87
 8008e1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e20:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e24:	f7fc fba0 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e28:	2103      	movs	r1, #3
 8008e2a:	20fd      	movs	r0, #253	; 0xfd
 8008e2c:	f006 fd0c 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008e30:	4b32      	ldr	r3, [pc, #200]	; (8008efc <v_L135D+0x294>)
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	bfb8      	it	lt
 8008e44:	425b      	neglt	r3, r3
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	b2d9      	uxtb	r1, r3
 8008e4c:	4a2b      	ldr	r2, [pc, #172]	; (8008efc <v_L135D+0x294>)
 8008e4e:	8813      	ldrh	r3, [r2, #0]
 8008e50:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e54:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 8008e56:	2214      	movs	r2, #20
 8008e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e60:	f7fc fca4 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008e64:	231e      	movs	r3, #30
 8008e66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008e6a:	211e      	movs	r1, #30
 8008e6c:	4824      	ldr	r0, [pc, #144]	; (8008f00 <v_L135D+0x298>)
 8008e6e:	f7fc f927 	bl	80050c0 <driveD>
}
 8008e72:	e03e      	b.n	8008ef2 <v_L135D+0x28a>
	}else if(run_mode == 5){
 8008e74:	4b20      	ldr	r3, [pc, #128]	; (8008ef8 <v_L135D+0x290>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b05      	cmp	r3, #5
 8008e7c:	d139      	bne.n	8008ef2 <v_L135D+0x28a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008e7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e88:	2243      	movs	r2, #67	; 0x43
 8008e8a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e92:	f7fc faed 	bl	8005470 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008e96:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008e9a:	2287      	movs	r2, #135	; 0x87
 8008e9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ea0:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8008ea4:	f7fc fb60 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ea8:	2103      	movs	r1, #3
 8008eaa:	20fd      	movs	r0, #253	; 0xfd
 8008eac:	f006 fccc 	bl	800f848 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008eb0:	4b12      	ldr	r3, [pc, #72]	; (8008efc <v_L135D+0x294>)
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	3301      	adds	r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	bfb8      	it	lt
 8008ec4:	425b      	neglt	r3, r3
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	b2d9      	uxtb	r1, r3
 8008ecc:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <v_L135D+0x294>)
 8008ece:	8813      	ldrh	r3, [r2, #0]
 8008ed0:	f361 03c3 	bfi	r3, r1, #3, #1
 8008ed4:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8008ed6:	2214      	movs	r2, #20
 8008ed8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008edc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ee0:	f7fc fc64 	bl	80057ac <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008ee4:	231e      	movs	r3, #30
 8008ee6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008eea:	211e      	movs	r1, #30
 8008eec:	4804      	ldr	r0, [pc, #16]	; (8008f00 <v_L135D+0x298>)
 8008eee:	f7fc f8e7 	bl	80050c0 <driveD>
}
 8008ef2:	bf00      	nop
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000456 	.word	0x20000456
 8008efc:	20000f64 	.word	0x20000f64
 8008f00:	ffff8ad0 	.word	0xffff8ad0

08008f04 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
	int mode = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	483f      	ldr	r0, [pc, #252]	; (8009010 <test_select+0x10c>)
 8008f12:	f009 f8b7 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	b2d8      	uxtb	r0, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	b2d9      	uxtb	r1, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	f008 fad7 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 8008f3a:	4b36      	ldr	r3, [pc, #216]	; (8009014 <test_select+0x110>)
 8008f3c:	edd3 7a00 	vldr	s15, [r3]
 8008f40:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4c:	db0f      	blt.n	8008f6e <test_select+0x6a>
			  mode++;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3301      	adds	r3, #1
 8008f52:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008f54:	4b2f      	ldr	r3, [pc, #188]	; (8009014 <test_select+0x110>)
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b07      	cmp	r3, #7
 8008f60:	dd01      	ble.n	8008f66 <test_select+0x62>
				  mode = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	482b      	ldr	r0, [pc, #172]	; (8009018 <test_select+0x114>)
 8008f6a:	f009 f88b 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 8008f6e:	4b29      	ldr	r3, [pc, #164]	; (8009014 <test_select+0x110>)
 8008f70:	edd3 7a00 	vldr	s15, [r3]
 8008f74:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f80:	d80f      	bhi.n	8008fa2 <test_select+0x9e>
			  mode--;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008f88:	4b22      	ldr	r3, [pc, #136]	; (8009014 <test_select+0x110>)
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da01      	bge.n	8008f9a <test_select+0x96>
				  mode = 7;
 8008f96:	2307      	movs	r3, #7
 8008f98:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	481e      	ldr	r0, [pc, #120]	; (8009018 <test_select+0x114>)
 8008f9e:	f009 f871 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fa6:	481d      	ldr	r0, [pc, #116]	; (800901c <test_select+0x118>)
 8008fa8:	f7f9 f994 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1b1      	bne.n	8008f16 <test_select+0x12>
			  HAL_Delay(50);
 8008fb2:	2032      	movs	r0, #50	; 0x32
 8008fb4:	f7f8 f832 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008fb8:	bf00      	nop
 8008fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fbe:	4817      	ldr	r0, [pc, #92]	; (800901c <test_select+0x118>)
 8008fc0:	f7f9 f988 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0f7      	beq.n	8008fba <test_select+0xb6>
			  switch(mode){
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d8a1      	bhi.n	8008f16 <test_select+0x12>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <test_select+0xd4>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff7 	.word	0x08008ff7
 8008fe0:	08008ffd 	.word	0x08008ffd
 8008fe4:	08009003 	.word	0x08009003
 8008fe8:	08009007 	.word	0x08009007
 8008fec:	0800900b 	.word	0x0800900b
				case 1:
					init_test();
 8008ff0:	f000 f816 	bl	8009020 <init_test>
					break;
 8008ff4:	e00b      	b.n	800900e <test_select+0x10a>

				case 2:
					slalom_test();
 8008ff6:	f000 f91d 	bl	8009234 <slalom_test>
					break;
 8008ffa:	e008      	b.n	800900e <test_select+0x10a>

				case 3:
					v_test();
 8008ffc:	f000 fae2 	bl	80095c4 <v_test>
					break;
 8009000:	e005      	b.n	800900e <test_select+0x10a>

				case 4:
					pass_test();
 8009002:	f000 fd13 	bl	8009a2c <pass_test>

				case 5:
					goal_test();
 8009006:	f000 ffed 	bl	8009fe4 <goal_test>

				case 6:
					sample_course_run();
 800900a:	f001 fad1 	bl	800a5b0 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800900e:	e782      	b.n	8008f16 <test_select+0x12>
 8009010:	080132cc 	.word	0x080132cc
 8009014:	20000aec 	.word	0x20000aec
 8009018:	080132c0 	.word	0x080132c0
 800901c:	40020000 	.word	0x40020000

08009020 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0

	int mode = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 800902a:	6979      	ldr	r1, [r7, #20]
 800902c:	4872      	ldr	r0, [pc, #456]	; (80091f8 <init_test+0x1d8>)
 800902e:	f009 f829 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b2d8      	uxtb	r0, r3
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	b2d9      	uxtb	r1, r3
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	b2db      	uxtb	r3, r3
 8009050:	461a      	mov	r2, r3
 8009052:	f008 fa49 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 8009056:	4b69      	ldr	r3, [pc, #420]	; (80091fc <init_test+0x1dc>)
 8009058:	edd3 7a00 	vldr	s15, [r3]
 800905c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009068:	db0f      	blt.n	800908a <init_test+0x6a>
			  mode++;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	3301      	adds	r3, #1
 800906e:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009070:	4b62      	ldr	r3, [pc, #392]	; (80091fc <init_test+0x1dc>)
 8009072:	f04f 0200 	mov.w	r2, #0
 8009076:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b07      	cmp	r3, #7
 800907c:	dd01      	ble.n	8009082 <init_test+0x62>
				  mode = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8009082:	6979      	ldr	r1, [r7, #20]
 8009084:	485e      	ldr	r0, [pc, #376]	; (8009200 <init_test+0x1e0>)
 8009086:	f008 fffd 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800908a:	4b5c      	ldr	r3, [pc, #368]	; (80091fc <init_test+0x1dc>)
 800908c:	edd3 7a00 	vldr	s15, [r3]
 8009090:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909c:	d80f      	bhi.n	80090be <init_test+0x9e>
			  mode--;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80090a4:	4b55      	ldr	r3, [pc, #340]	; (80091fc <init_test+0x1dc>)
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da01      	bge.n	80090b6 <init_test+0x96>
				  mode = 7;
 80090b2:	2307      	movs	r3, #7
 80090b4:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	4851      	ldr	r0, [pc, #324]	; (8009200 <init_test+0x1e0>)
 80090ba:	f008 ffe3 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80090be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090c2:	4850      	ldr	r0, [pc, #320]	; (8009204 <init_test+0x1e4>)
 80090c4:	f7f9 f906 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1b1      	bne.n	8009032 <init_test+0x12>
			  HAL_Delay(50);
 80090ce:	2032      	movs	r0, #50	; 0x32
 80090d0:	f7f7 ffa4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80090d4:	bf00      	nop
 80090d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090da:	484a      	ldr	r0, [pc, #296]	; (8009204 <init_test+0x1e4>)
 80090dc:	f7f9 f8fa 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f7      	beq.n	80090d6 <init_test+0xb6>
			  drive_ready();
 80090e6:	f7fb fdcb 	bl	8004c80 <drive_ready>
			  get_base();
 80090ea:	f008 f9a5 	bl	8011438 <get_base>

			  switch(mode){
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b07      	cmp	r3, #7
 80090f2:	d89e      	bhi.n	8009032 <init_test+0x12>
 80090f4:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <init_test+0xdc>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	0800911d 	.word	0x0800911d
 8009100:	08009123 	.word	0x08009123
 8009104:	08009143 	.word	0x08009143
 8009108:	08009161 	.word	0x08009161
 800910c:	0800917f 	.word	0x0800917f
 8009110:	0800919d 	.word	0x0800919d
 8009114:	080091c7 	.word	0x080091c7
 8009118:	080091e1 	.word	0x080091e1
				case 0:
					get_base();
 800911c:	f008 f98c 	bl	8011438 <get_base>
					break;
 8009120:	e069      	b.n	80091f6 <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8009122:	4839      	ldr	r0, [pc, #228]	; (8009208 <init_test+0x1e8>)
 8009124:	f009 f822 	bl	801216c <puts>
					for(int i = 0; i < 1; i++){
 8009128:	2300      	movs	r3, #0
 800912a:	613b      	str	r3, [r7, #16]
 800912c:	e005      	b.n	800913a <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 800912e:	20b6      	movs	r0, #182	; 0xb6
 8009130:	f7fc f908 	bl	8005344 <driveC>
					for(int i = 0; i < 1; i++){
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	3301      	adds	r3, #1
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	ddf6      	ble.n	800912e <init_test+0x10e>
					}
					break;
 8009140:	e059      	b.n	80091f6 <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8009142:	4832      	ldr	r0, [pc, #200]	; (800920c <init_test+0x1ec>)
 8009144:	f009 f812 	bl	801216c <puts>
					for(int i = 0; i < 32; i++){
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e004      	b.n	8009158 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 800914e:	f7fc ff87 	bl	8006060 <rotate_R90>
					for(int i = 0; i < 32; i++){
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b1f      	cmp	r3, #31
 800915c:	ddf7      	ble.n	800914e <init_test+0x12e>
					}
					break;
 800915e:	e04a      	b.n	80091f6 <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8009160:	482b      	ldr	r0, [pc, #172]	; (8009210 <init_test+0x1f0>)
 8009162:	f009 f803 	bl	801216c <puts>
					for(int i = 0; i < 32; i++){
 8009166:	2300      	movs	r3, #0
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	e004      	b.n	8009176 <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 800916c:	f7fd f854 	bl	8006218 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	3301      	adds	r3, #1
 8009174:	60bb      	str	r3, [r7, #8]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b1f      	cmp	r3, #31
 800917a:	ddf7      	ble.n	800916c <init_test+0x14c>
					}
					break;
 800917c:	e03b      	b.n	80091f6 <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 800917e:	4825      	ldr	r0, [pc, #148]	; (8009214 <init_test+0x1f4>)
 8009180:	f008 fff4 	bl	801216c <puts>
					for(int i = 0; i < 16; i++){
 8009184:	2300      	movs	r3, #0
 8009186:	607b      	str	r3, [r7, #4]
 8009188:	e004      	b.n	8009194 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 800918a:	f7fd f921 	bl	80063d0 <rotate_180>
					for(int i = 0; i < 16; i++){
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3301      	adds	r3, #1
 8009192:	607b      	str	r3, [r7, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b0f      	cmp	r3, #15
 8009198:	ddf7      	ble.n	800918a <init_test+0x16a>
					}
					break;
 800919a:	e02c      	b.n	80091f6 <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 800919c:	481e      	ldr	r0, [pc, #120]	; (8009218 <init_test+0x1f8>)
 800919e:	f008 ffe5 	bl	801216c <puts>
					get_base();
 80091a2:	f008 f949 	bl	8011438 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 80091a6:	f7fc fc6b 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80091aa:	2300      	movs	r3, #0
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	e004      	b.n	80091ba <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 80091b0:	f7fc ff3e 	bl	8006030 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	3301      	adds	r3, #1
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b04      	cmp	r3, #4
 80091be:	ddf7      	ble.n	80091b0 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 80091c0:	f7fc fca8 	bl	8005b14 <half_sectionD>
					break;
 80091c4:	e017      	b.n	80091f6 <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 80091c6:	4b15      	ldr	r3, [pc, #84]	; (800921c <init_test+0x1fc>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a15      	ldr	r2, [pc, #84]	; (8009220 <init_test+0x200>)
 80091cc:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <init_test+0x204>)
 80091d0:	4a15      	ldr	r2, [pc, #84]	; (8009228 <init_test+0x208>)
 80091d2:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 80091d4:	4a15      	ldr	r2, [pc, #84]	; (800922c <init_test+0x20c>)
 80091d6:	8813      	ldrh	r3, [r2, #0]
 80091d8:	f043 0320 	orr.w	r3, r3, #32
 80091dc:	8013      	strh	r3, [r2, #0]

					while(1);
 80091de:	e7fe      	b.n	80091de <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 80091e0:	4a13      	ldr	r2, [pc, #76]	; (8009230 <init_test+0x210>)
 80091e2:	8813      	ldrh	r3, [r2, #0]
 80091e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 80091ea:	4a11      	ldr	r2, [pc, #68]	; (8009230 <init_test+0x210>)
 80091ec:	8813      	ldrh	r3, [r2, #0]
 80091ee:	f043 0302 	orr.w	r3, r3, #2
 80091f2:	8013      	strh	r3, [r2, #0]
					while(1);
 80091f4:	e7fe      	b.n	80091f4 <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80091f6:	e71c      	b.n	8009032 <init_test+0x12>
 80091f8:	080132e4 	.word	0x080132e4
 80091fc:	20000aec 	.word	0x20000aec
 8009200:	080132c0 	.word	0x080132c0
 8009204:	40020000 	.word	0x40020000
 8009208:	08013300 	.word	0x08013300
 800920c:	08013324 	.word	0x08013324
 8009210:	08013330 	.word	0x08013330
 8009214:	0801333c 	.word	0x0801333c
 8009218:	08013348 	.word	0x08013348
 800921c:	20000b5c 	.word	0x20000b5c
 8009220:	20000bf8 	.word	0x20000bf8
 8009224:	20000d58 	.word	0x20000d58
 8009228:	459c4000 	.word	0x459c4000
 800922c:	20000f64 	.word	0x20000f64
 8009230:	20000f68 	.word	0x20000f68

08009234 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8009234:	b580      	push	{r7, lr}
 8009236:	b08e      	sub	sp, #56	; 0x38
 8009238:	af00      	add	r7, sp, #0

	int mode = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 800923e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009240:	48b8      	ldr	r0, [pc, #736]	; (8009524 <slalom_test+0x2f0>)
 8009242:	f008 ff1f 	bl	8012084 <iprintf>

	run_select();
 8009246:	f7fb fe5b 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	b2d8      	uxtb	r0, r3
 8009254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	b2d9      	uxtb	r1, r3
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	b2db      	uxtb	r3, r3
 8009268:	461a      	mov	r2, r3
 800926a:	f008 f93d 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800926e:	4bae      	ldr	r3, [pc, #696]	; (8009528 <slalom_test+0x2f4>)
 8009270:	edd3 7a00 	vldr	s15, [r3]
 8009274:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800927c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009280:	db20      	blt.n	80092c4 <slalom_test+0x90>
			  mode++;
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009284:	3301      	adds	r3, #1
 8009286:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009288:	4ba7      	ldr	r3, [pc, #668]	; (8009528 <slalom_test+0x2f4>)
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	2b07      	cmp	r3, #7
 8009294:	dc03      	bgt.n	800929e <slalom_test+0x6a>
				  full_led_write(WHITE);
 8009296:	2007      	movs	r0, #7
 8009298:	f008 f960 	bl	801155c <full_led_write>
 800929c:	e009      	b.n	80092b2 <slalom_test+0x7e>
			  }else if(mode < 16){
 800929e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	dc03      	bgt.n	80092ac <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 80092a4:	2004      	movs	r0, #4
 80092a6:	f008 f959 	bl	801155c <full_led_write>
 80092aa:	e002      	b.n	80092b2 <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 80092ac:	2005      	movs	r0, #5
 80092ae:	f008 f955 	bl	801155c <full_led_write>
			  }
			  if(mode > 23){
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	2b17      	cmp	r3, #23
 80092b6:	dd01      	ble.n	80092bc <slalom_test+0x88>
				  mode = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 80092bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092be:	489b      	ldr	r0, [pc, #620]	; (800952c <slalom_test+0x2f8>)
 80092c0:	f008 fee0 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 80092c4:	4b98      	ldr	r3, [pc, #608]	; (8009528 <slalom_test+0x2f4>)
 80092c6:	edd3 7a00 	vldr	s15, [r3]
 80092ca:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80092ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d6:	d820      	bhi.n	800931a <slalom_test+0xe6>
			  mode--;
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	3b01      	subs	r3, #1
 80092dc:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 80092de:	4b92      	ldr	r3, [pc, #584]	; (8009528 <slalom_test+0x2f4>)
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80092e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e8:	2b07      	cmp	r3, #7
 80092ea:	dc03      	bgt.n	80092f4 <slalom_test+0xc0>
				  full_led_write(WHITE);
 80092ec:	2007      	movs	r0, #7
 80092ee:	f008 f935 	bl	801155c <full_led_write>
 80092f2:	e009      	b.n	8009308 <slalom_test+0xd4>
			  }else if(mode < 16){
 80092f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f6:	2b0f      	cmp	r3, #15
 80092f8:	dc03      	bgt.n	8009302 <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 80092fa:	2004      	movs	r0, #4
 80092fc:	f008 f92e 	bl	801155c <full_led_write>
 8009300:	e002      	b.n	8009308 <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 8009302:	2005      	movs	r0, #5
 8009304:	f008 f92a 	bl	801155c <full_led_write>
			  }
			  if(mode < 0){
 8009308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930a:	2b00      	cmp	r3, #0
 800930c:	da01      	bge.n	8009312 <slalom_test+0xde>
				  mode = 23;
 800930e:	2317      	movs	r3, #23
 8009310:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009312:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009314:	4885      	ldr	r0, [pc, #532]	; (800952c <slalom_test+0x2f8>)
 8009316:	f008 feb5 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800931a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800931e:	4884      	ldr	r0, [pc, #528]	; (8009530 <slalom_test+0x2fc>)
 8009320:	f7f8 ffd8 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d18f      	bne.n	800924a <slalom_test+0x16>
			  HAL_Delay(50);
 800932a:	2032      	movs	r0, #50	; 0x32
 800932c:	f7f7 fe76 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009330:	bf00      	nop
 8009332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009336:	487e      	ldr	r0, [pc, #504]	; (8009530 <slalom_test+0x2fc>)
 8009338:	f7f8 ffcc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0f7      	beq.n	8009332 <slalom_test+0xfe>
			  drive_ready();
 8009342:	f7fb fc9d 	bl	8004c80 <drive_ready>
			  get_base();
 8009346:	f008 f877 	bl	8011438 <get_base>

			  switch(mode){
 800934a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934c:	2b10      	cmp	r3, #16
 800934e:	f200 8130 	bhi.w	80095b2 <slalom_test+0x37e>
 8009352:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <slalom_test+0x124>)
 8009354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009358:	0800939d 	.word	0x0800939d
 800935c:	080093a3 	.word	0x080093a3
 8009360:	080093c9 	.word	0x080093c9
 8009364:	080093ef 	.word	0x080093ef
 8009368:	08009415 	.word	0x08009415
 800936c:	0800943b 	.word	0x0800943b
 8009370:	08009461 	.word	0x08009461
 8009374:	080095b3 	.word	0x080095b3
 8009378:	080095b3 	.word	0x080095b3
 800937c:	08009487 	.word	0x08009487
 8009380:	080094b1 	.word	0x080094b1
 8009384:	080094ef 	.word	0x080094ef
 8009388:	08009515 	.word	0x08009515
 800938c:	08009567 	.word	0x08009567
 8009390:	0800958d 	.word	0x0800958d
 8009394:	080095b3 	.word	0x080095b3
 8009398:	080095b3 	.word	0x080095b3
				case 0:
					get_base();
 800939c:	f008 f84c 	bl	8011438 <get_base>
					break;
 80093a0:	e107      	b.n	80095b2 <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80093a2:	4864      	ldr	r0, [pc, #400]	; (8009534 <slalom_test+0x300>)
 80093a4:	f008 fee2 	bl	801216c <puts>
					half_sectionA();
 80093a8:	f7fc fb6a 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80093ac:	2300      	movs	r3, #0
 80093ae:	633b      	str	r3, [r7, #48]	; 0x30
 80093b0:	e004      	b.n	80093bc <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80093b2:	f7fd f8e5 	bl	8006580 <slalom_R90>
					for(int i = 0; i < 1; i++){
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	3301      	adds	r3, #1
 80093ba:	633b      	str	r3, [r7, #48]	; 0x30
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	2b00      	cmp	r3, #0
 80093c0:	ddf7      	ble.n	80093b2 <slalom_test+0x17e>
					}
					half_sectionD();
 80093c2:	f7fc fba7 	bl	8005b14 <half_sectionD>
					break;
 80093c6:	e0f4      	b.n	80095b2 <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80093c8:	485b      	ldr	r0, [pc, #364]	; (8009538 <slalom_test+0x304>)
 80093ca:	f008 fecf 	bl	801216c <puts>
					half_sectionA();
 80093ce:	f7fc fb57 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80093d2:	2300      	movs	r3, #0
 80093d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d6:	e004      	b.n	80093e2 <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80093d8:	f7fd f9ea 	bl	80067b0 <slalom_L90>
					for(int i = 0; i < 1; i++){
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	3301      	adds	r3, #1
 80093e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	ddf7      	ble.n	80093d8 <slalom_test+0x1a4>
					}
					half_sectionD();
 80093e8:	f7fc fb94 	bl	8005b14 <half_sectionD>
					break;
 80093ec:	e0e1      	b.n	80095b2 <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80093ee:	4853      	ldr	r0, [pc, #332]	; (800953c <slalom_test+0x308>)
 80093f0:	f008 febc 	bl	801216c <puts>
					half_sectionA();
 80093f4:	f7fc fb44 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80093f8:	2300      	movs	r3, #0
 80093fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80093fc:	e004      	b.n	8009408 <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80093fe:	f7fd fae1 	bl	80069c4 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	3301      	adds	r3, #1
 8009406:	62bb      	str	r3, [r7, #40]	; 0x28
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	2b00      	cmp	r3, #0
 800940c:	ddf7      	ble.n	80093fe <slalom_test+0x1ca>
					}
					half_sectionD();
 800940e:	f7fc fb81 	bl	8005b14 <half_sectionD>
					break;
 8009412:	e0ce      	b.n	80095b2 <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009414:	484a      	ldr	r0, [pc, #296]	; (8009540 <slalom_test+0x30c>)
 8009416:	f008 fea9 	bl	801216c <puts>
					half_sectionA();
 800941a:	f7fc fb31 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800941e:	2300      	movs	r3, #0
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
 8009422:	e004      	b.n	800942e <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009424:	f7fd fbd4 	bl	8006bd0 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	3301      	adds	r3, #1
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
 800942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	ddf7      	ble.n	8009424 <slalom_test+0x1f0>
					}
					half_sectionD();
 8009434:	f7fc fb6e 	bl	8005b14 <half_sectionD>
					break;
 8009438:	e0bb      	b.n	80095b2 <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 800943a:	4842      	ldr	r0, [pc, #264]	; (8009544 <slalom_test+0x310>)
 800943c:	f008 fe96 	bl	801216c <puts>
					half_sectionA();
 8009440:	f7fc fb1e 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009444:	2300      	movs	r3, #0
 8009446:	623b      	str	r3, [r7, #32]
 8009448:	e004      	b.n	8009454 <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 800944a:	f7fd fcbd 	bl	8006dc8 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	3301      	adds	r3, #1
 8009452:	623b      	str	r3, [r7, #32]
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	2b00      	cmp	r3, #0
 8009458:	ddf7      	ble.n	800944a <slalom_test+0x216>
					}
					half_sectionD();
 800945a:	f7fc fb5b 	bl	8005b14 <half_sectionD>
					break;
 800945e:	e0a8      	b.n	80095b2 <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009460:	4839      	ldr	r0, [pc, #228]	; (8009548 <slalom_test+0x314>)
 8009462:	f008 fe83 	bl	801216c <puts>
					half_sectionA();
 8009466:	f7fc fb0b 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800946a:	2300      	movs	r3, #0
 800946c:	61fb      	str	r3, [r7, #28]
 800946e:	e004      	b.n	800947a <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009470:	f7fd fdc6 	bl	8007000 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	3301      	adds	r3, #1
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	ddf7      	ble.n	8009470 <slalom_test+0x23c>
					}
					half_sectionD();
 8009480:	f7fc fb48 	bl	8005b14 <half_sectionD>
					break;
 8009484:	e095      	b.n	80095b2 <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 8009486:	482b      	ldr	r0, [pc, #172]	; (8009534 <slalom_test+0x300>)
 8009488:	f008 fe70 	bl	801216c <puts>
					half_sectionA();
 800948c:	f7fc faf8 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009490:	2300      	movs	r3, #0
 8009492:	61bb      	str	r3, [r7, #24]
 8009494:	e006      	b.n	80094a4 <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8009496:	f7fd f873 	bl	8006580 <slalom_R90>
						one_sectionU();
 800949a:	f7fc fdc9 	bl	8006030 <one_sectionU>
					for(int i = 0; i < 8; i++){
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	3301      	adds	r3, #1
 80094a2:	61bb      	str	r3, [r7, #24]
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2b07      	cmp	r3, #7
 80094a8:	ddf5      	ble.n	8009496 <slalom_test+0x262>
					}
					half_sectionD();
 80094aa:	f7fc fb33 	bl	8005b14 <half_sectionD>
					break;
 80094ae:	e080      	b.n	80095b2 <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 80094b0:	4821      	ldr	r0, [pc, #132]	; (8009538 <slalom_test+0x304>)
 80094b2:	f008 fe5b 	bl	801216c <puts>
					half_sectionA();
 80094b6:	f7fc fae3 	bl	8005a80 <half_sectionA>
					MF2.FLAG.LOG = 1;
 80094ba:	4a24      	ldr	r2, [pc, #144]	; (800954c <slalom_test+0x318>)
 80094bc:	8813      	ldrh	r3, [r2, #0]
 80094be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c2:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	e006      	b.n	80094d8 <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80094ca:	f7fd f971 	bl	80067b0 <slalom_L90>
						one_sectionU();
 80094ce:	f7fc fdaf 	bl	8006030 <one_sectionU>
					for(int i = 0; i < 8; i++){
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	3301      	adds	r3, #1
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b07      	cmp	r3, #7
 80094dc:	ddf5      	ble.n	80094ca <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 80094de:	4a1b      	ldr	r2, [pc, #108]	; (800954c <slalom_test+0x318>)
 80094e0:	8813      	ldrh	r3, [r2, #0]
 80094e2:	f36f 1386 	bfc	r3, #6, #1
 80094e6:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 80094e8:	f7fc fb14 	bl	8005b14 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 80094ec:	e061      	b.n	80095b2 <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80094ee:	4813      	ldr	r0, [pc, #76]	; (800953c <slalom_test+0x308>)
 80094f0:	f008 fe3c 	bl	801216c <puts>
					half_sectionA();
 80094f4:	f7fc fac4 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 80094f8:	2300      	movs	r3, #0
 80094fa:	613b      	str	r3, [r7, #16]
 80094fc:	e004      	b.n	8009508 <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80094fe:	f7fd fa61 	bl	80069c4 <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	3301      	adds	r3, #1
 8009506:	613b      	str	r3, [r7, #16]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b07      	cmp	r3, #7
 800950c:	ddf7      	ble.n	80094fe <slalom_test+0x2ca>
					}
					half_sectionD();
 800950e:	f7fc fb01 	bl	8005b14 <half_sectionD>
					break;
 8009512:	e04e      	b.n	80095b2 <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009514:	480a      	ldr	r0, [pc, #40]	; (8009540 <slalom_test+0x30c>)
 8009516:	f008 fe29 	bl	801216c <puts>
					half_sectionA();
 800951a:	f7fc fab1 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	e01a      	b.n	800955a <slalom_test+0x326>
 8009524:	08013368 	.word	0x08013368
 8009528:	20000aec 	.word	0x20000aec
 800952c:	080132c0 	.word	0x080132c0
 8009530:	40020000 	.word	0x40020000
 8009534:	08013384 	.word	0x08013384
 8009538:	08013398 	.word	0x08013398
 800953c:	080133ac 	.word	0x080133ac
 8009540:	080133c4 	.word	0x080133c4
 8009544:	080133d8 	.word	0x080133d8
 8009548:	080133f8 	.word	0x080133f8
 800954c:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009550:	f7fd fb3e 	bl	8006bd0 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b07      	cmp	r3, #7
 800955e:	ddf7      	ble.n	8009550 <slalom_test+0x31c>
					}
					half_sectionD();
 8009560:	f7fc fad8 	bl	8005b14 <half_sectionD>
					break;
 8009564:	e025      	b.n	80095b2 <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009566:	4815      	ldr	r0, [pc, #84]	; (80095bc <slalom_test+0x388>)
 8009568:	f008 fe00 	bl	801216c <puts>
					half_sectionA();
 800956c:	f7fc fa88 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009570:	2300      	movs	r3, #0
 8009572:	60bb      	str	r3, [r7, #8]
 8009574:	e004      	b.n	8009580 <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8009576:	f7fd fc27 	bl	8006dc8 <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3301      	adds	r3, #1
 800957e:	60bb      	str	r3, [r7, #8]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b07      	cmp	r3, #7
 8009584:	ddf7      	ble.n	8009576 <slalom_test+0x342>
					}
					half_sectionD();
 8009586:	f7fc fac5 	bl	8005b14 <half_sectionD>
					break;
 800958a:	e012      	b.n	80095b2 <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 800958c:	480c      	ldr	r0, [pc, #48]	; (80095c0 <slalom_test+0x38c>)
 800958e:	f008 fded 	bl	801216c <puts>
					half_sectionA();
 8009592:	f7fc fa75 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009596:	2300      	movs	r3, #0
 8009598:	607b      	str	r3, [r7, #4]
 800959a:	e004      	b.n	80095a6 <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 800959c:	f7fd fd30 	bl	8007000 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3301      	adds	r3, #1
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b07      	cmp	r3, #7
 80095aa:	ddf7      	ble.n	800959c <slalom_test+0x368>
					}
					half_sectionD();
 80095ac:	f7fc fab2 	bl	8005b14 <half_sectionD>
					break;
 80095b0:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 80095b2:	2001      	movs	r0, #1
 80095b4:	f007 ffd2 	bl	801155c <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095b8:	e647      	b.n	800924a <slalom_test+0x16>
 80095ba:	bf00      	nop
 80095bc:	080133d8 	.word	0x080133d8
 80095c0:	080133f8 	.word	0x080133f8

080095c4 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b092      	sub	sp, #72	; 0x48
 80095c8:	af00      	add	r7, sp, #0

	int mode = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 80095ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095d0:	48ba      	ldr	r0, [pc, #744]	; (80098bc <v_test+0x2f8>)
 80095d2:	f008 fd57 	bl	8012084 <iprintf>

	run_select();
 80095d6:	f7fb fc93 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	b2d8      	uxtb	r0, r3
 80095e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	b2d9      	uxtb	r1, r3
 80095ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	461a      	mov	r2, r3
 80095fa:	f007 ff75 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 80095fe:	4bb0      	ldr	r3, [pc, #704]	; (80098c0 <v_test+0x2fc>)
 8009600:	edd3 7a00 	vldr	s15, [r3]
 8009604:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009610:	db20      	blt.n	8009654 <v_test+0x90>
			  mode++;
 8009612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009614:	3301      	adds	r3, #1
 8009616:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009618:	4ba9      	ldr	r3, [pc, #676]	; (80098c0 <v_test+0x2fc>)
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8009620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009622:	2b17      	cmp	r3, #23
 8009624:	dd01      	ble.n	800962a <v_test+0x66>
				  mode = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 800962a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962c:	2b07      	cmp	r3, #7
 800962e:	dc03      	bgt.n	8009638 <v_test+0x74>
				  full_led_write(WHITE);
 8009630:	2007      	movs	r0, #7
 8009632:	f007 ff93 	bl	801155c <full_led_write>
 8009636:	e009      	b.n	800964c <v_test+0x88>
			  }else if(mode < 16){
 8009638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800963a:	2b0f      	cmp	r3, #15
 800963c:	dc03      	bgt.n	8009646 <v_test+0x82>
				  full_led_write(BLUEGREEN);
 800963e:	2004      	movs	r0, #4
 8009640:	f007 ff8c 	bl	801155c <full_led_write>
 8009644:	e002      	b.n	800964c <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 8009646:	2005      	movs	r0, #5
 8009648:	f007 ff88 	bl	801155c <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 800964c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800964e:	489d      	ldr	r0, [pc, #628]	; (80098c4 <v_test+0x300>)
 8009650:	f008 fd18 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 8009654:	4b9a      	ldr	r3, [pc, #616]	; (80098c0 <v_test+0x2fc>)
 8009656:	edd3 7a00 	vldr	s15, [r3]
 800965a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800965e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009666:	d820      	bhi.n	80096aa <v_test+0xe6>
			  mode--;
 8009668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800966a:	3b01      	subs	r3, #1
 800966c:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800966e:	4b94      	ldr	r3, [pc, #592]	; (80098c0 <v_test+0x2fc>)
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009678:	2b00      	cmp	r3, #0
 800967a:	da01      	bge.n	8009680 <v_test+0xbc>
				  mode = 23;
 800967c:	2317      	movs	r3, #23
 800967e:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009682:	2b07      	cmp	r3, #7
 8009684:	dc03      	bgt.n	800968e <v_test+0xca>
				  full_led_write(WHITE);
 8009686:	2007      	movs	r0, #7
 8009688:	f007 ff68 	bl	801155c <full_led_write>
 800968c:	e009      	b.n	80096a2 <v_test+0xde>
			  }else if(mode < 16){
 800968e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009690:	2b0f      	cmp	r3, #15
 8009692:	dc03      	bgt.n	800969c <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 8009694:	2004      	movs	r0, #4
 8009696:	f007 ff61 	bl	801155c <full_led_write>
 800969a:	e002      	b.n	80096a2 <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 800969c:	2005      	movs	r0, #5
 800969e:	f007 ff5d 	bl	801155c <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 80096a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096a4:	4887      	ldr	r0, [pc, #540]	; (80098c4 <v_test+0x300>)
 80096a6:	f008 fced 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80096aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096ae:	4886      	ldr	r0, [pc, #536]	; (80098c8 <v_test+0x304>)
 80096b0:	f7f8 fe10 	bl	80022d4 <HAL_GPIO_ReadPin>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d18f      	bne.n	80095da <v_test+0x16>
			  HAL_Delay(50);
 80096ba:	2032      	movs	r0, #50	; 0x32
 80096bc:	f7f7 fcae 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80096c0:	bf00      	nop
 80096c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096c6:	4880      	ldr	r0, [pc, #512]	; (80098c8 <v_test+0x304>)
 80096c8:	f7f8 fe04 	bl	80022d4 <HAL_GPIO_ReadPin>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0f7      	beq.n	80096c2 <v_test+0xfe>
			  drive_ready();
 80096d2:	f7fb fad5 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 80096d6:	4a7d      	ldr	r2, [pc, #500]	; (80098cc <v_test+0x308>)
 80096d8:	8813      	ldrh	r3, [r2, #0]
 80096da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096de:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 80096e0:	4a7b      	ldr	r2, [pc, #492]	; (80098d0 <v_test+0x30c>)
 80096e2:	8813      	ldrh	r3, [r2, #0]
 80096e4:	f36f 03c3 	bfc	r3, #3, #1
 80096e8:	8013      	strh	r3, [r2, #0]
			  get_base();
 80096ea:	f007 fea5 	bl	8011438 <get_base>

			  switch(mode){
 80096ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f0:	2b14      	cmp	r3, #20
 80096f2:	f200 818c 	bhi.w	8009a0e <v_test+0x44a>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <v_test+0x138>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009751 	.word	0x08009751
 8009700:	08009757 	.word	0x08009757
 8009704:	0800977d 	.word	0x0800977d
 8009708:	080097a3 	.word	0x080097a3
 800970c:	080097c9 	.word	0x080097c9
 8009710:	080097ef 	.word	0x080097ef
 8009714:	08009815 	.word	0x08009815
 8009718:	08009a0f 	.word	0x08009a0f
 800971c:	08009a0f 	.word	0x08009a0f
 8009720:	0800983b 	.word	0x0800983b
 8009724:	08009861 	.word	0x08009861
 8009728:	08009887 	.word	0x08009887
 800972c:	080098ad 	.word	0x080098ad
 8009730:	08009903 	.word	0x08009903
 8009734:	08009929 	.word	0x08009929
 8009738:	08009a0f 	.word	0x08009a0f
 800973c:	08009a0f 	.word	0x08009a0f
 8009740:	0800994f 	.word	0x0800994f
 8009744:	0800997f 	.word	0x0800997f
 8009748:	080099af 	.word	0x080099af
 800974c:	080099df 	.word	0x080099df
				case 0:
					get_base();
 8009750:	f007 fe72 	bl	8011438 <get_base>
					break;
 8009754:	e15b      	b.n	8009a0e <v_test+0x44a>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8009756:	485f      	ldr	r0, [pc, #380]	; (80098d4 <v_test+0x310>)
 8009758:	f008 fd08 	bl	801216c <puts>
					half_sectionA();
 800975c:	f7fc f990 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009760:	2300      	movs	r3, #0
 8009762:	643b      	str	r3, [r7, #64]	; 0x40
 8009764:	e004      	b.n	8009770 <v_test+0x1ac>
						v_R45();
 8009766:	f7fd fd5b 	bl	8007220 <v_R45>
					for(int i = 0; i < 1; i++){
 800976a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800976c:	3301      	adds	r3, #1
 800976e:	643b      	str	r3, [r7, #64]	; 0x40
 8009770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	ddf7      	ble.n	8009766 <v_test+0x1a2>
					}
					half_sectionVD();
 8009776:	f7fc fa59 	bl	8005c2c <half_sectionVD>
					break;
 800977a:	e148      	b.n	8009a0e <v_test+0x44a>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 800977c:	4856      	ldr	r0, [pc, #344]	; (80098d8 <v_test+0x314>)
 800977e:	f008 fcf5 	bl	801216c <puts>
					half_sectionA();
 8009782:	f7fc f97d 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800978a:	e004      	b.n	8009796 <v_test+0x1d2>
						v_L45();
 800978c:	f7fd ff2e 	bl	80075ec <v_L45>
					for(int i = 0; i < 1; i++){
 8009790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009792:	3301      	adds	r3, #1
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009798:	2b00      	cmp	r3, #0
 800979a:	ddf7      	ble.n	800978c <v_test+0x1c8>
					}
					half_sectionVD();
 800979c:	f7fc fa46 	bl	8005c2c <half_sectionVD>
					break;
 80097a0:	e135      	b.n	8009a0e <v_test+0x44a>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 80097a2:	484e      	ldr	r0, [pc, #312]	; (80098dc <v_test+0x318>)
 80097a4:	f008 fce2 	bl	801216c <puts>
					half_sectionVA();
 80097a8:	f7fc f9f6 	bl	8005b98 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 80097ac:	2300      	movs	r3, #0
 80097ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b0:	e004      	b.n	80097bc <v_test+0x1f8>
						v_R90();
 80097b2:	f7fe fb9f 	bl	8007ef4 <v_R90>
					for(int i = 0; i < 1; i++){
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	3301      	adds	r3, #1
 80097ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	2b00      	cmp	r3, #0
 80097c0:	ddf7      	ble.n	80097b2 <v_test+0x1ee>
					}
//					v_R45();
					half_sectionVD();
 80097c2:	f7fc fa33 	bl	8005c2c <half_sectionVD>
					break;
 80097c6:	e122      	b.n	8009a0e <v_test+0x44a>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 80097c8:	4845      	ldr	r0, [pc, #276]	; (80098e0 <v_test+0x31c>)
 80097ca:	f008 fccf 	bl	801216c <puts>
					half_sectionVA();
 80097ce:	f7fc f9e3 	bl	8005b98 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 80097d2:	2300      	movs	r3, #0
 80097d4:	637b      	str	r3, [r7, #52]	; 0x34
 80097d6:	e004      	b.n	80097e2 <v_test+0x21e>
						v_L90();
 80097d8:	f7fe fc5c 	bl	8008094 <v_L90>
					for(int i = 0; i < 1; i++){
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097de:	3301      	adds	r3, #1
 80097e0:	637b      	str	r3, [r7, #52]	; 0x34
 80097e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	ddf7      	ble.n	80097d8 <v_test+0x214>
					}
//					v_L45();
					half_sectionVD();
 80097e8:	f7fc fa20 	bl	8005c2c <half_sectionVD>
					break;
 80097ec:	e10f      	b.n	8009a0e <v_test+0x44a>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 80097ee:	483d      	ldr	r0, [pc, #244]	; (80098e4 <v_test+0x320>)
 80097f0:	f008 fcbc 	bl	801216c <puts>
					half_sectionA();
 80097f4:	f7fc f944 	bl	8005a80 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 80097f8:	2300      	movs	r3, #0
 80097fa:	633b      	str	r3, [r7, #48]	; 0x30
 80097fc:	e004      	b.n	8009808 <v_test+0x244>
						v_R135();
 80097fe:	f7fe fd11 	bl	8008224 <v_R135>
					for(int i = 0; i < 1; i++){
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	3301      	adds	r3, #1
 8009806:	633b      	str	r3, [r7, #48]	; 0x30
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	2b00      	cmp	r3, #0
 800980c:	ddf7      	ble.n	80097fe <v_test+0x23a>
					}
//					v_R45();
					half_sectionVD();
 800980e:	f7fc fa0d 	bl	8005c2c <half_sectionVD>
					break;
 8009812:	e0fc      	b.n	8009a0e <v_test+0x44a>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8009814:	4834      	ldr	r0, [pc, #208]	; (80098e8 <v_test+0x324>)
 8009816:	f008 fca9 	bl	801216c <puts>
					half_sectionA();
 800981a:	f7fc f931 	bl	8005a80 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 800981e:	2300      	movs	r3, #0
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009822:	e004      	b.n	800982e <v_test+0x26a>
						v_L135();
 8009824:	f7fe fee8 	bl	80085f8 <v_L135>
					for(int i = 0; i < 1; i++){
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	3301      	adds	r3, #1
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	2b00      	cmp	r3, #0
 8009832:	ddf7      	ble.n	8009824 <v_test+0x260>
					}
//					v_L45();
					half_sectionVD();
 8009834:	f7fc f9fa 	bl	8005c2c <half_sectionVD>
					break;
 8009838:	e0e9      	b.n	8009a0e <v_test+0x44a>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 800983a:	4826      	ldr	r0, [pc, #152]	; (80098d4 <v_test+0x310>)
 800983c:	f008 fc96 	bl	801216c <puts>
					half_sectionA();
 8009840:	f7fc f91e 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009844:	2300      	movs	r3, #0
 8009846:	62bb      	str	r3, [r7, #40]	; 0x28
 8009848:	e004      	b.n	8009854 <v_test+0x290>
						v_R45();
 800984a:	f7fd fce9 	bl	8007220 <v_R45>
					for(int i = 0; i < 8; i++){
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	3301      	adds	r3, #1
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	2b07      	cmp	r3, #7
 8009858:	ddf7      	ble.n	800984a <v_test+0x286>
					}
					half_sectionD();
 800985a:	f7fc f95b 	bl	8005b14 <half_sectionD>
					break;
 800985e:	e0d6      	b.n	8009a0e <v_test+0x44a>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8009860:	481d      	ldr	r0, [pc, #116]	; (80098d8 <v_test+0x314>)
 8009862:	f008 fc83 	bl	801216c <puts>
					half_sectionA();
 8009866:	f7fc f90b 	bl	8005a80 <half_sectionA>
					for(int i = 0; i < 8; i++){
 800986a:	2300      	movs	r3, #0
 800986c:	627b      	str	r3, [r7, #36]	; 0x24
 800986e:	e004      	b.n	800987a <v_test+0x2b6>
						v_L45();
 8009870:	f7fd febc 	bl	80075ec <v_L45>
					for(int i = 0; i < 8; i++){
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	3301      	adds	r3, #1
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	2b07      	cmp	r3, #7
 800987e:	ddf7      	ble.n	8009870 <v_test+0x2ac>
					}
					half_sectionD();
 8009880:	f7fc f948 	bl	8005b14 <half_sectionD>
					break;
 8009884:	e0c3      	b.n	8009a0e <v_test+0x44a>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 8009886:	4815      	ldr	r0, [pc, #84]	; (80098dc <v_test+0x318>)
 8009888:	f008 fc70 	bl	801216c <puts>
					half_sectionVA();
 800988c:	f7fc f984 	bl	8005b98 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 8009890:	2300      	movs	r3, #0
 8009892:	623b      	str	r3, [r7, #32]
 8009894:	e004      	b.n	80098a0 <v_test+0x2dc>
						v_R90();
 8009896:	f7fe fb2d 	bl	8007ef4 <v_R90>
					for(int i = 0; i < 8; i++){
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	3301      	adds	r3, #1
 800989e:	623b      	str	r3, [r7, #32]
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	2b07      	cmp	r3, #7
 80098a4:	ddf7      	ble.n	8009896 <v_test+0x2d2>
					}
//					v_R45();
					half_sectionVD();
 80098a6:	f7fc f9c1 	bl	8005c2c <half_sectionVD>
					break;
 80098aa:	e0b0      	b.n	8009a0e <v_test+0x44a>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 80098ac:	480c      	ldr	r0, [pc, #48]	; (80098e0 <v_test+0x31c>)
 80098ae:	f008 fc5d 	bl	801216c <puts>
					half_sectionVA();
 80098b2:	f7fc f971 	bl	8005b98 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 80098b6:	2300      	movs	r3, #0
 80098b8:	61fb      	str	r3, [r7, #28]
 80098ba:	e01c      	b.n	80098f6 <v_test+0x332>
 80098bc:	08013414 	.word	0x08013414
 80098c0:	20000aec 	.word	0x20000aec
 80098c4:	080132c0 	.word	0x080132c0
 80098c8:	40020000 	.word	0x40020000
 80098cc:	20000f68 	.word	0x20000f68
 80098d0:	20000f64 	.word	0x20000f64
 80098d4:	0801342c 	.word	0x0801342c
 80098d8:	0801343c 	.word	0x0801343c
 80098dc:	08013448 	.word	0x08013448
 80098e0:	08013458 	.word	0x08013458
 80098e4:	08013464 	.word	0x08013464
 80098e8:	08013474 	.word	0x08013474
						v_L90();
 80098ec:	f7fe fbd2 	bl	8008094 <v_L90>
					for(int i = 0; i < 8; i++){
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	3301      	adds	r3, #1
 80098f4:	61fb      	str	r3, [r7, #28]
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	ddf7      	ble.n	80098ec <v_test+0x328>
					}
//					v_L45();
					half_sectionVD();
 80098fc:	f7fc f996 	bl	8005c2c <half_sectionVD>
					break;
 8009900:	e085      	b.n	8009a0e <v_test+0x44a>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 8009902:	4845      	ldr	r0, [pc, #276]	; (8009a18 <v_test+0x454>)
 8009904:	f008 fc32 	bl	801216c <puts>
					half_sectionA();
 8009908:	f7fc f8ba 	bl	8005a80 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 800990c:	2300      	movs	r3, #0
 800990e:	61bb      	str	r3, [r7, #24]
 8009910:	e004      	b.n	800991c <v_test+0x358>
						v_R135();
 8009912:	f7fe fc87 	bl	8008224 <v_R135>
					for(int i = 0; i < 4; i++){
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	3301      	adds	r3, #1
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	2b03      	cmp	r3, #3
 8009920:	ddf7      	ble.n	8009912 <v_test+0x34e>
					}
//					v_R45();
					half_sectionD();
 8009922:	f7fc f8f7 	bl	8005b14 <half_sectionD>
					break;
 8009926:	e072      	b.n	8009a0e <v_test+0x44a>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8009928:	483c      	ldr	r0, [pc, #240]	; (8009a1c <v_test+0x458>)
 800992a:	f008 fc1f 	bl	801216c <puts>
					half_sectionA();
 800992e:	f7fc f8a7 	bl	8005a80 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	e004      	b.n	8009942 <v_test+0x37e>
						v_L135();
 8009938:	f7fe fe5e 	bl	80085f8 <v_L135>
					for(int i = 0; i < 4; i++){
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	3301      	adds	r3, #1
 8009940:	617b      	str	r3, [r7, #20]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b03      	cmp	r3, #3
 8009946:	ddf7      	ble.n	8009938 <v_test+0x374>
					}
//					v_L45();
					half_sectionD();
 8009948:	f7fc f8e4 	bl	8005b14 <half_sectionD>
					break;
 800994c:	e05f      	b.n	8009a0e <v_test+0x44a>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 800994e:	4834      	ldr	r0, [pc, #208]	; (8009a20 <v_test+0x45c>)
 8009950:	f008 fc0c 	bl	801216c <puts>
					MF2.FLAG.V = 1;
 8009954:	4a33      	ldr	r2, [pc, #204]	; (8009a24 <v_test+0x460>)
 8009956:	8813      	ldrh	r3, [r2, #0]
 8009958:	f043 0308 	orr.w	r3, r3, #8
 800995c:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800995e:	f7fc f91b 	bl	8005b98 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	e004      	b.n	8009972 <v_test+0x3ae>
//						v_R45D();
						v_R45();
 8009968:	f7fd fc5a 	bl	8007220 <v_R45>
					for(int i = 0; i < 1; i++){
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	3301      	adds	r3, #1
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	ddf7      	ble.n	8009968 <v_test+0x3a4>
					}
					half_sectionD();
 8009978:	f7fc f8cc 	bl	8005b14 <half_sectionD>
					break;
 800997c:	e047      	b.n	8009a0e <v_test+0x44a>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 800997e:	482a      	ldr	r0, [pc, #168]	; (8009a28 <v_test+0x464>)
 8009980:	f008 fbf4 	bl	801216c <puts>
					MF2.FLAG.V = 1;
 8009984:	4a27      	ldr	r2, [pc, #156]	; (8009a24 <v_test+0x460>)
 8009986:	8813      	ldrh	r3, [r2, #0]
 8009988:	f043 0308 	orr.w	r3, r3, #8
 800998c:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 800998e:	f7fc f903 	bl	8005b98 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	e004      	b.n	80099a2 <v_test+0x3de>
//						v_L45D();
						v_L45();
 8009998:	f7fd fe28 	bl	80075ec <v_L45>
					for(int i = 0; i < 1; i++){
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3301      	adds	r3, #1
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	ddf7      	ble.n	8009998 <v_test+0x3d4>
					}
					half_sectionD();
 80099a8:	f7fc f8b4 	bl	8005b14 <half_sectionD>
					break;
 80099ac:	e02f      	b.n	8009a0e <v_test+0x44a>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 80099ae:	481a      	ldr	r0, [pc, #104]	; (8009a18 <v_test+0x454>)
 80099b0:	f008 fbdc 	bl	801216c <puts>
					MF2.FLAG.V = 1;
 80099b4:	4a1b      	ldr	r2, [pc, #108]	; (8009a24 <v_test+0x460>)
 80099b6:	8813      	ldrh	r3, [r2, #0]
 80099b8:	f043 0308 	orr.w	r3, r3, #8
 80099bc:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 80099be:	f7fc f8eb 	bl	8005b98 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	e004      	b.n	80099d2 <v_test+0x40e>
//						v_R135D();
						v_R135();
 80099c8:	f7fe fc2c 	bl	8008224 <v_R135>
					for(int i = 0; i < 1; i++){
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	ddf7      	ble.n	80099c8 <v_test+0x404>
					}
					half_sectionD();
 80099d8:	f7fc f89c 	bl	8005b14 <half_sectionD>
					break;
 80099dc:	e017      	b.n	8009a0e <v_test+0x44a>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 80099de:	480f      	ldr	r0, [pc, #60]	; (8009a1c <v_test+0x458>)
 80099e0:	f008 fbc4 	bl	801216c <puts>
					MF2.FLAG.V = 1;
 80099e4:	4a0f      	ldr	r2, [pc, #60]	; (8009a24 <v_test+0x460>)
 80099e6:	8813      	ldrh	r3, [r2, #0]
 80099e8:	f043 0308 	orr.w	r3, r3, #8
 80099ec:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 80099ee:	f7fc f8d3 	bl	8005b98 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 80099f2:	2300      	movs	r3, #0
 80099f4:	607b      	str	r3, [r7, #4]
 80099f6:	e004      	b.n	8009a02 <v_test+0x43e>
//						v_L135D();
						v_L135();
 80099f8:	f7fe fdfe 	bl	80085f8 <v_L135>
					for(int i = 0; i < 1; i++){
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3301      	adds	r3, #1
 8009a00:	607b      	str	r3, [r7, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	ddf7      	ble.n	80099f8 <v_test+0x434>
					}
					half_sectionD();
 8009a08:	f7fc f884 	bl	8005b14 <half_sectionD>
					break;
 8009a0c:	bf00      	nop
			}
		full_led_write(RED);
 8009a0e:	2001      	movs	r0, #1
 8009a10:	f007 fda4 	bl	801155c <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a14:	e5e1      	b.n	80095da <v_test+0x16>
 8009a16:	bf00      	nop
 8009a18:	08013464 	.word	0x08013464
 8009a1c:	08013474 	.word	0x08013474
 8009a20:	0801342c 	.word	0x0801342c
 8009a24:	20000f64 	.word	0x20000f64
 8009a28:	0801343c 	.word	0x0801343c

08009a2c <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0

	int mode = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	48a2      	ldr	r0, [pc, #648]	; (8009cc4 <pass_test+0x298>)
 8009a3a:	f008 fb23 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	b2d8      	uxtb	r0, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	b2d9      	uxtb	r1, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f007 fd43 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 8009a62:	4b99      	ldr	r3, [pc, #612]	; (8009cc8 <pass_test+0x29c>)
 8009a64:	edd3 7a00 	vldr	s15, [r3]
 8009a68:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a74:	db0f      	blt.n	8009a96 <pass_test+0x6a>
			  mode++;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009a7c:	4b92      	ldr	r3, [pc, #584]	; (8009cc8 <pass_test+0x29c>)
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b07      	cmp	r3, #7
 8009a88:	dd01      	ble.n	8009a8e <pass_test+0x62>
				  mode = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	488e      	ldr	r0, [pc, #568]	; (8009ccc <pass_test+0x2a0>)
 8009a92:	f008 faf7 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 8009a96:	4b8c      	ldr	r3, [pc, #560]	; (8009cc8 <pass_test+0x29c>)
 8009a98:	edd3 7a00 	vldr	s15, [r3]
 8009a9c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa8:	d80f      	bhi.n	8009aca <pass_test+0x9e>
			  mode--;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ab0:	4b85      	ldr	r3, [pc, #532]	; (8009cc8 <pass_test+0x29c>)
 8009ab2:	f04f 0200 	mov.w	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	da01      	bge.n	8009ac2 <pass_test+0x96>
				  mode = 7;
 8009abe:	2307      	movs	r3, #7
 8009ac0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4881      	ldr	r0, [pc, #516]	; (8009ccc <pass_test+0x2a0>)
 8009ac6:	f008 fadd 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ace:	4880      	ldr	r0, [pc, #512]	; (8009cd0 <pass_test+0x2a4>)
 8009ad0:	f7f8 fc00 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1b1      	bne.n	8009a3e <pass_test+0x12>
			  HAL_Delay(50);
 8009ada:	2032      	movs	r0, #50	; 0x32
 8009adc:	f7f7 fa9e 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009ae0:	bf00      	nop
 8009ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ae6:	487a      	ldr	r0, [pc, #488]	; (8009cd0 <pass_test+0x2a4>)
 8009ae8:	f7f8 fbf4 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0f7      	beq.n	8009ae2 <pass_test+0xb6>
			  drive_ready();
 8009af2:	f7fb f8c5 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 8009af6:	4a77      	ldr	r2, [pc, #476]	; (8009cd4 <pass_test+0x2a8>)
 8009af8:	8813      	ldrh	r3, [r2, #0]
 8009afa:	f36f 03c3 	bfc	r3, #3, #1
 8009afe:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b07      	cmp	r3, #7
 8009b04:	d89b      	bhi.n	8009a3e <pass_test+0x12>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <pass_test+0xe0>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b2d 	.word	0x08009b2d
 8009b10:	08009bb5 	.word	0x08009bb5
 8009b14:	08009c3d 	.word	0x08009c3d
 8009b18:	08009d09 	.word	0x08009d09
 8009b1c:	08009d91 	.word	0x08009d91
 8009b20:	08009e19 	.word	0x08009e19
 8009b24:	08009ea1 	.word	0x08009ea1
 8009b28:	08009f29 	.word	0x08009f29
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009b2c:	486a      	ldr	r0, [pc, #424]	; (8009cd8 <pass_test+0x2ac>)
 8009b2e:	f008 fb1d 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 8009b32:	4a6a      	ldr	r2, [pc, #424]	; (8009cdc <pass_test+0x2b0>)
 8009b34:	8813      	ldrh	r3, [r2, #0]
 8009b36:	f36f 1345 	bfc	r3, #5, #1
 8009b3a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009b3c:	4a67      	ldr	r2, [pc, #412]	; (8009cdc <pass_test+0x2b0>)
 8009b3e:	8813      	ldrh	r3, [r2, #0]
 8009b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b44:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 8009b46:	4a65      	ldr	r2, [pc, #404]	; (8009cdc <pass_test+0x2b0>)
 8009b48:	8813      	ldrh	r3, [r2, #0]
 8009b4a:	f36f 238a 	bfc	r3, #10, #1
 8009b4e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009b50:	4b63      	ldr	r3, [pc, #396]	; (8009ce0 <pass_test+0x2b4>)
 8009b52:	2202      	movs	r2, #2
 8009b54:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009b56:	4b63      	ldr	r3, [pc, #396]	; (8009ce4 <pass_test+0x2b8>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009b5c:	4b62      	ldr	r3, [pc, #392]	; (8009ce8 <pass_test+0x2bc>)
 8009b5e:	2201      	movs	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 8009b62:	4b62      	ldr	r3, [pc, #392]	; (8009cec <pass_test+0x2c0>)
 8009b64:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8009b68:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8009b6a:	4b61      	ldr	r3, [pc, #388]	; (8009cf0 <pass_test+0x2c4>)
 8009b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b70:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 8009b72:	4b5c      	ldr	r3, [pc, #368]	; (8009ce4 <pass_test+0x2b8>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009b78:	4b5e      	ldr	r3, [pc, #376]	; (8009cf4 <pass_test+0x2c8>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b7e:	4b5e      	ldr	r3, [pc, #376]	; (8009cf8 <pass_test+0x2cc>)
 8009b80:	2204      	movs	r2, #4
 8009b82:	701a      	strb	r2, [r3, #0]

					get_base();
 8009b84:	f007 fc58 	bl	8011438 <get_base>

					searchC();
 8009b88:	f004 fc9e 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 8009b8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b90:	f7f7 fa44 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009b94:	4b58      	ldr	r3, [pc, #352]	; (8009cf8 <pass_test+0x2cc>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
 8009b9a:	4b57      	ldr	r3, [pc, #348]	; (8009cf8 <pass_test+0x2cc>)
 8009b9c:	781a      	ldrb	r2, [r3, #0]
 8009b9e:	4b55      	ldr	r3, [pc, #340]	; (8009cf4 <pass_test+0x2c8>)
 8009ba0:	701a      	strb	r2, [r3, #0]
					searchC();
 8009ba2:	f004 fc91 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 8009ba6:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <pass_test+0x2c8>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009bac:	4b52      	ldr	r3, [pc, #328]	; (8009cf8 <pass_test+0x2cc>)
 8009bae:	2204      	movs	r2, #4
 8009bb0:	701a      	strb	r2, [r3, #0]
					break;
 8009bb2:	e1fd      	b.n	8009fb0 <pass_test+0x584>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 8009bb4:	4851      	ldr	r0, [pc, #324]	; (8009cfc <pass_test+0x2d0>)
 8009bb6:	f008 fad9 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009bba:	4a48      	ldr	r2, [pc, #288]	; (8009cdc <pass_test+0x2b0>)
 8009bbc:	8813      	ldrh	r3, [r2, #0]
 8009bbe:	f043 0320 	orr.w	r3, r3, #32
 8009bc2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009bc4:	4a45      	ldr	r2, [pc, #276]	; (8009cdc <pass_test+0x2b0>)
 8009bc6:	8813      	ldrh	r3, [r2, #0]
 8009bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bcc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009bce:	4a43      	ldr	r2, [pc, #268]	; (8009cdc <pass_test+0x2b0>)
 8009bd0:	8813      	ldrh	r3, [r2, #0]
 8009bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bd6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009bd8:	4b41      	ldr	r3, [pc, #260]	; (8009ce0 <pass_test+0x2b4>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009bde:	4b41      	ldr	r3, [pc, #260]	; (8009ce4 <pass_test+0x2b8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009be4:	4b40      	ldr	r3, [pc, #256]	; (8009ce8 <pass_test+0x2bc>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009bea:	4b40      	ldr	r3, [pc, #256]	; (8009cec <pass_test+0x2c0>)
 8009bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009bf2:	4b3f      	ldr	r3, [pc, #252]	; (8009cf0 <pass_test+0x2c4>)
 8009bf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009bf8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009bfa:	4b41      	ldr	r3, [pc, #260]	; (8009d00 <pass_test+0x2d4>)
 8009bfc:	2203      	movs	r2, #3
 8009bfe:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009c00:	4b3c      	ldr	r3, [pc, #240]	; (8009cf4 <pass_test+0x2c8>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c06:	4b3c      	ldr	r3, [pc, #240]	; (8009cf8 <pass_test+0x2cc>)
 8009c08:	2204      	movs	r2, #4
 8009c0a:	701a      	strb	r2, [r3, #0]

					get_base();
 8009c0c:	f007 fc14 	bl	8011438 <get_base>

					searchF3();
 8009c10:	f005 f8d4 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 8009c14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c18:	f7f7 fa00 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009c1c:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <pass_test+0x2cc>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	4b35      	ldr	r3, [pc, #212]	; (8009cf8 <pass_test+0x2cc>)
 8009c24:	781a      	ldrb	r2, [r3, #0]
 8009c26:	4b33      	ldr	r3, [pc, #204]	; (8009cf4 <pass_test+0x2c8>)
 8009c28:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009c2a:	f005 f8c7 	bl	800edbc <searchF3>

					goal_x = GOAL_X;
 8009c2e:	4b31      	ldr	r3, [pc, #196]	; (8009cf4 <pass_test+0x2c8>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c34:	4b30      	ldr	r3, [pc, #192]	; (8009cf8 <pass_test+0x2cc>)
 8009c36:	2204      	movs	r2, #4
 8009c38:	701a      	strb	r2, [r3, #0]
					break;
 8009c3a:	e1b9      	b.n	8009fb0 <pass_test+0x584>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009c3c:	4831      	ldr	r0, [pc, #196]	; (8009d04 <pass_test+0x2d8>)
 8009c3e:	f008 fa95 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009c42:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <pass_test+0x2b0>)
 8009c44:	8813      	ldrh	r3, [r2, #0]
 8009c46:	f043 0320 	orr.w	r3, r3, #32
 8009c4a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009c4c:	4a23      	ldr	r2, [pc, #140]	; (8009cdc <pass_test+0x2b0>)
 8009c4e:	8813      	ldrh	r3, [r2, #0]
 8009c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c54:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009c56:	4a21      	ldr	r2, [pc, #132]	; (8009cdc <pass_test+0x2b0>)
 8009c58:	8813      	ldrh	r3, [r2, #0]
 8009c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c5e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009c60:	4b1f      	ldr	r3, [pc, #124]	; (8009ce0 <pass_test+0x2b4>)
 8009c62:	2202      	movs	r2, #2
 8009c64:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009c66:	4b1f      	ldr	r3, [pc, #124]	; (8009ce4 <pass_test+0x2b8>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009c6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ce8 <pass_test+0x2bc>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009c72:	4b1e      	ldr	r3, [pc, #120]	; (8009cec <pass_test+0x2c0>)
 8009c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c78:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009c7a:	4b1d      	ldr	r3, [pc, #116]	; (8009cf0 <pass_test+0x2c4>)
 8009c7c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009c80:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009c82:	4b1f      	ldr	r3, [pc, #124]	; (8009d00 <pass_test+0x2d4>)
 8009c84:	2203      	movs	r2, #3
 8009c86:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009c88:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <pass_test+0x2c8>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <pass_test+0x2cc>)
 8009c90:	2204      	movs	r2, #4
 8009c92:	701a      	strb	r2, [r3, #0]

					get_base();
 8009c94:	f007 fbd0 	bl	8011438 <get_base>

					searchF3();
 8009c98:	f005 f890 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 8009c9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ca0:	f7f7 f9bc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009ca4:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <pass_test+0x2cc>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <pass_test+0x2cc>)
 8009cac:	781a      	ldrb	r2, [r3, #0]
 8009cae:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <pass_test+0x2c8>)
 8009cb0:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009cb2:	f005 f883 	bl	800edbc <searchF3>

					goal_x = GOAL_X;
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <pass_test+0x2c8>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <pass_test+0x2cc>)
 8009cbe:	2204      	movs	r2, #4
 8009cc0:	701a      	strb	r2, [r3, #0]
					break;
 8009cc2:	e175      	b.n	8009fb0 <pass_test+0x584>
 8009cc4:	08013484 	.word	0x08013484
 8009cc8:	20000aec 	.word	0x20000aec
 8009ccc:	080132c0 	.word	0x080132c0
 8009cd0:	40020000 	.word	0x40020000
 8009cd4:	20000f64 	.word	0x20000f64
 8009cd8:	080134a0 	.word	0x080134a0
 8009cdc:	20000f68 	.word	0x20000f68
 8009ce0:	20000456 	.word	0x20000456
 8009ce4:	200015c8 	.word	0x200015c8
 8009ce8:	20000bb1 	.word	0x20000bb1
 8009cec:	20000454 	.word	0x20000454
 8009cf0:	20000f7c 	.word	0x20000f7c
 8009cf4:	20000bb0 	.word	0x20000bb0
 8009cf8:	20000b4c 	.word	0x20000b4c
 8009cfc:	080134b4 	.word	0x080134b4
 8009d00:	20000457 	.word	0x20000457
 8009d04:	080134c4 	.word	0x080134c4
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009d08:	48aa      	ldr	r0, [pc, #680]	; (8009fb4 <pass_test+0x588>)
 8009d0a:	f008 fa2f 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009d0e:	4aaa      	ldr	r2, [pc, #680]	; (8009fb8 <pass_test+0x58c>)
 8009d10:	8813      	ldrh	r3, [r2, #0]
 8009d12:	f043 0320 	orr.w	r3, r3, #32
 8009d16:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009d18:	4aa7      	ldr	r2, [pc, #668]	; (8009fb8 <pass_test+0x58c>)
 8009d1a:	8813      	ldrh	r3, [r2, #0]
 8009d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d20:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009d22:	4aa5      	ldr	r2, [pc, #660]	; (8009fb8 <pass_test+0x58c>)
 8009d24:	8813      	ldrh	r3, [r2, #0]
 8009d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d2a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009d2c:	4ba3      	ldr	r3, [pc, #652]	; (8009fbc <pass_test+0x590>)
 8009d2e:	2203      	movs	r2, #3
 8009d30:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009d32:	4ba3      	ldr	r3, [pc, #652]	; (8009fc0 <pass_test+0x594>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009d38:	4ba2      	ldr	r3, [pc, #648]	; (8009fc4 <pass_test+0x598>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009d3e:	4ba2      	ldr	r3, [pc, #648]	; (8009fc8 <pass_test+0x59c>)
 8009d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d44:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009d46:	4ba1      	ldr	r3, [pc, #644]	; (8009fcc <pass_test+0x5a0>)
 8009d48:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009d4c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009d4e:	4ba0      	ldr	r3, [pc, #640]	; (8009fd0 <pass_test+0x5a4>)
 8009d50:	2203      	movs	r2, #3
 8009d52:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009d54:	4b9f      	ldr	r3, [pc, #636]	; (8009fd4 <pass_test+0x5a8>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d5a:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <pass_test+0x5ac>)
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d60:	f007 fb6a 	bl	8011438 <get_base>

					searchF3();
 8009d64:	f005 f82a 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 8009d68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d6c:	f7f7 f956 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d70:	4b99      	ldr	r3, [pc, #612]	; (8009fd8 <pass_test+0x5ac>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
 8009d76:	4b98      	ldr	r3, [pc, #608]	; (8009fd8 <pass_test+0x5ac>)
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	4b96      	ldr	r3, [pc, #600]	; (8009fd4 <pass_test+0x5a8>)
 8009d7c:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009d7e:	f005 f81d 	bl	800edbc <searchF3>

					goal_x = GOAL_X;
 8009d82:	4b94      	ldr	r3, [pc, #592]	; (8009fd4 <pass_test+0x5a8>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d88:	4b93      	ldr	r3, [pc, #588]	; (8009fd8 <pass_test+0x5ac>)
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	701a      	strb	r2, [r3, #0]
					break;
 8009d8e:	e10f      	b.n	8009fb0 <pass_test+0x584>
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009d90:	4892      	ldr	r0, [pc, #584]	; (8009fdc <pass_test+0x5b0>)
 8009d92:	f008 f9eb 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009d96:	4a88      	ldr	r2, [pc, #544]	; (8009fb8 <pass_test+0x58c>)
 8009d98:	8813      	ldrh	r3, [r2, #0]
 8009d9a:	f043 0320 	orr.w	r3, r3, #32
 8009d9e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009da0:	4a85      	ldr	r2, [pc, #532]	; (8009fb8 <pass_test+0x58c>)
 8009da2:	8813      	ldrh	r3, [r2, #0]
 8009da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009da8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009daa:	4a83      	ldr	r2, [pc, #524]	; (8009fb8 <pass_test+0x58c>)
 8009dac:	8813      	ldrh	r3, [r2, #0]
 8009dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009db2:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009db4:	4b81      	ldr	r3, [pc, #516]	; (8009fbc <pass_test+0x590>)
 8009db6:	2201      	movs	r2, #1
 8009db8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009dba:	4b81      	ldr	r3, [pc, #516]	; (8009fc0 <pass_test+0x594>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009dc0:	4b80      	ldr	r3, [pc, #512]	; (8009fc4 <pass_test+0x598>)
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009dc6:	4b80      	ldr	r3, [pc, #512]	; (8009fc8 <pass_test+0x59c>)
 8009dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dcc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009dce:	4b7f      	ldr	r3, [pc, #508]	; (8009fcc <pass_test+0x5a0>)
 8009dd0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009dd4:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009dd6:	4b7e      	ldr	r3, [pc, #504]	; (8009fd0 <pass_test+0x5a4>)
 8009dd8:	2204      	movs	r2, #4
 8009dda:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009ddc:	4b7d      	ldr	r3, [pc, #500]	; (8009fd4 <pass_test+0x5a8>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009de2:	4b7d      	ldr	r3, [pc, #500]	; (8009fd8 <pass_test+0x5ac>)
 8009de4:	2204      	movs	r2, #4
 8009de6:	701a      	strb	r2, [r3, #0]

					get_base();
 8009de8:	f007 fb26 	bl	8011438 <get_base>

					searchF4();
 8009dec:	f005 f8bc 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 8009df0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009df4:	f7f7 f912 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009df8:	4b77      	ldr	r3, [pc, #476]	; (8009fd8 <pass_test+0x5ac>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	4b76      	ldr	r3, [pc, #472]	; (8009fd8 <pass_test+0x5ac>)
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	4b74      	ldr	r3, [pc, #464]	; (8009fd4 <pass_test+0x5a8>)
 8009e04:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009e06:	f005 f8af 	bl	800ef68 <searchF4>

					goal_x = GOAL_X;
 8009e0a:	4b72      	ldr	r3, [pc, #456]	; (8009fd4 <pass_test+0x5a8>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e10:	4b71      	ldr	r3, [pc, #452]	; (8009fd8 <pass_test+0x5ac>)
 8009e12:	2204      	movs	r2, #4
 8009e14:	701a      	strb	r2, [r3, #0]
					break;
 8009e16:	e0cb      	b.n	8009fb0 <pass_test+0x584>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009e18:	4870      	ldr	r0, [pc, #448]	; (8009fdc <pass_test+0x5b0>)
 8009e1a:	f008 f9a7 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009e1e:	4a66      	ldr	r2, [pc, #408]	; (8009fb8 <pass_test+0x58c>)
 8009e20:	8813      	ldrh	r3, [r2, #0]
 8009e22:	f043 0320 	orr.w	r3, r3, #32
 8009e26:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009e28:	4a63      	ldr	r2, [pc, #396]	; (8009fb8 <pass_test+0x58c>)
 8009e2a:	8813      	ldrh	r3, [r2, #0]
 8009e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e30:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009e32:	4a61      	ldr	r2, [pc, #388]	; (8009fb8 <pass_test+0x58c>)
 8009e34:	8813      	ldrh	r3, [r2, #0]
 8009e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e3a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009e3c:	4b5f      	ldr	r3, [pc, #380]	; (8009fbc <pass_test+0x590>)
 8009e3e:	2202      	movs	r2, #2
 8009e40:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009e42:	4b5f      	ldr	r3, [pc, #380]	; (8009fc0 <pass_test+0x594>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009e48:	4b5e      	ldr	r3, [pc, #376]	; (8009fc4 <pass_test+0x598>)
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009e4e:	4b5e      	ldr	r3, [pc, #376]	; (8009fc8 <pass_test+0x59c>)
 8009e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e54:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009e56:	4b5d      	ldr	r3, [pc, #372]	; (8009fcc <pass_test+0x5a0>)
 8009e58:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009e5c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009e5e:	4b5c      	ldr	r3, [pc, #368]	; (8009fd0 <pass_test+0x5a4>)
 8009e60:	2204      	movs	r2, #4
 8009e62:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009e64:	4b5b      	ldr	r3, [pc, #364]	; (8009fd4 <pass_test+0x5a8>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e6a:	4b5b      	ldr	r3, [pc, #364]	; (8009fd8 <pass_test+0x5ac>)
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009e70:	f007 fae2 	bl	8011438 <get_base>

					searchF4();
 8009e74:	f005 f878 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 8009e78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e7c:	f7f7 f8ce 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009e80:	4b55      	ldr	r3, [pc, #340]	; (8009fd8 <pass_test+0x5ac>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
 8009e86:	4b54      	ldr	r3, [pc, #336]	; (8009fd8 <pass_test+0x5ac>)
 8009e88:	781a      	ldrb	r2, [r3, #0]
 8009e8a:	4b52      	ldr	r3, [pc, #328]	; (8009fd4 <pass_test+0x5a8>)
 8009e8c:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009e8e:	f005 f86b 	bl	800ef68 <searchF4>

					goal_x = GOAL_X;
 8009e92:	4b50      	ldr	r3, [pc, #320]	; (8009fd4 <pass_test+0x5a8>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e98:	4b4f      	ldr	r3, [pc, #316]	; (8009fd8 <pass_test+0x5ac>)
 8009e9a:	2204      	movs	r2, #4
 8009e9c:	701a      	strb	r2, [r3, #0]
					break;
 8009e9e:	e087      	b.n	8009fb0 <pass_test+0x584>
				case 6:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009ea0:	484e      	ldr	r0, [pc, #312]	; (8009fdc <pass_test+0x5b0>)
 8009ea2:	f008 f963 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009ea6:	4a44      	ldr	r2, [pc, #272]	; (8009fb8 <pass_test+0x58c>)
 8009ea8:	8813      	ldrh	r3, [r2, #0]
 8009eaa:	f043 0320 	orr.w	r3, r3, #32
 8009eae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009eb0:	4a41      	ldr	r2, [pc, #260]	; (8009fb8 <pass_test+0x58c>)
 8009eb2:	8813      	ldrh	r3, [r2, #0]
 8009eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eb8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009eba:	4a3f      	ldr	r2, [pc, #252]	; (8009fb8 <pass_test+0x58c>)
 8009ebc:	8813      	ldrh	r3, [r2, #0]
 8009ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ec2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009ec4:	4b3d      	ldr	r3, [pc, #244]	; (8009fbc <pass_test+0x590>)
 8009ec6:	2203      	movs	r2, #3
 8009ec8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009eca:	4b3d      	ldr	r3, [pc, #244]	; (8009fc0 <pass_test+0x594>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009ed0:	4b3c      	ldr	r3, [pc, #240]	; (8009fc4 <pass_test+0x598>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009ed6:	4b3c      	ldr	r3, [pc, #240]	; (8009fc8 <pass_test+0x59c>)
 8009ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009edc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009ede:	4b3b      	ldr	r3, [pc, #236]	; (8009fcc <pass_test+0x5a0>)
 8009ee0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009ee4:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009ee6:	4b3a      	ldr	r3, [pc, #232]	; (8009fd0 <pass_test+0x5a4>)
 8009ee8:	2204      	movs	r2, #4
 8009eea:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009eec:	4b39      	ldr	r3, [pc, #228]	; (8009fd4 <pass_test+0x5a8>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ef2:	4b39      	ldr	r3, [pc, #228]	; (8009fd8 <pass_test+0x5ac>)
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	701a      	strb	r2, [r3, #0]

					get_base();
 8009ef8:	f007 fa9e 	bl	8011438 <get_base>

					searchF4();
 8009efc:	f005 f834 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 8009f00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f04:	f7f7 f88a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f08:	4b33      	ldr	r3, [pc, #204]	; (8009fd8 <pass_test+0x5ac>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	4b32      	ldr	r3, [pc, #200]	; (8009fd8 <pass_test+0x5ac>)
 8009f10:	781a      	ldrb	r2, [r3, #0]
 8009f12:	4b30      	ldr	r3, [pc, #192]	; (8009fd4 <pass_test+0x5a8>)
 8009f14:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009f16:	f005 f827 	bl	800ef68 <searchF4>

					goal_x = GOAL_X;
 8009f1a:	4b2e      	ldr	r3, [pc, #184]	; (8009fd4 <pass_test+0x5a8>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f20:	4b2d      	ldr	r3, [pc, #180]	; (8009fd8 <pass_test+0x5ac>)
 8009f22:	2204      	movs	r2, #4
 8009f24:	701a      	strb	r2, [r3, #0]
					break;
 8009f26:	e043      	b.n	8009fb0 <pass_test+0x584>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 8009f28:	482d      	ldr	r0, [pc, #180]	; (8009fe0 <pass_test+0x5b4>)
 8009f2a:	f008 f91f 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 8009f2e:	4a22      	ldr	r2, [pc, #136]	; (8009fb8 <pass_test+0x58c>)
 8009f30:	8813      	ldrh	r3, [r2, #0]
 8009f32:	f043 0320 	orr.w	r3, r3, #32
 8009f36:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009f38:	4a1f      	ldr	r2, [pc, #124]	; (8009fb8 <pass_test+0x58c>)
 8009f3a:	8813      	ldrh	r3, [r2, #0]
 8009f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f40:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009f42:	4a1d      	ldr	r2, [pc, #116]	; (8009fb8 <pass_test+0x58c>)
 8009f44:	8813      	ldrh	r3, [r2, #0]
 8009f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f4a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 8009f4c:	4b1b      	ldr	r3, [pc, #108]	; (8009fbc <pass_test+0x590>)
 8009f4e:	2204      	movs	r2, #4
 8009f50:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009f52:	4b1b      	ldr	r3, [pc, #108]	; (8009fc0 <pass_test+0x594>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009f58:	4b1a      	ldr	r3, [pc, #104]	; (8009fc4 <pass_test+0x598>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 8009f5e:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <pass_test+0x59c>)
 8009f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8009f64:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <pass_test+0x5a0>)
 8009f68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009f6c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009f6e:	4b18      	ldr	r3, [pc, #96]	; (8009fd0 <pass_test+0x5a4>)
 8009f70:	2203      	movs	r2, #3
 8009f72:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009f74:	4b17      	ldr	r3, [pc, #92]	; (8009fd4 <pass_test+0x5a8>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f7a:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <pass_test+0x5ac>)
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009f80:	f007 fa5a 	bl	8011438 <get_base>

					searchF3();
 8009f84:	f004 ff1a 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 8009f88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f8c:	f7f7 f846 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f90:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <pass_test+0x5ac>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <pass_test+0x5ac>)
 8009f98:	781a      	ldrb	r2, [r3, #0]
 8009f9a:	4b0e      	ldr	r3, [pc, #56]	; (8009fd4 <pass_test+0x5a8>)
 8009f9c:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009f9e:	f004 ff0d 	bl	800edbc <searchF3>

					goal_x = GOAL_X;
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <pass_test+0x5a8>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009fa8:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <pass_test+0x5ac>)
 8009faa:	2204      	movs	r2, #4
 8009fac:	701a      	strb	r2, [r3, #0]
					break;
 8009fae:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009fb0:	e545      	b.n	8009a3e <pass_test+0x12>
 8009fb2:	bf00      	nop
 8009fb4:	080134c4 	.word	0x080134c4
 8009fb8:	20000f68 	.word	0x20000f68
 8009fbc:	20000456 	.word	0x20000456
 8009fc0:	200015c8 	.word	0x200015c8
 8009fc4:	20000bb1 	.word	0x20000bb1
 8009fc8:	20000454 	.word	0x20000454
 8009fcc:	20000f7c 	.word	0x20000f7c
 8009fd0:	20000457 	.word	0x20000457
 8009fd4:	20000bb0 	.word	0x20000bb0
 8009fd8:	20000b4c 	.word	0x20000b4c
 8009fdc:	080134d4 	.word	0x080134d4
 8009fe0:	080134e4 	.word	0x080134e4

08009fe4 <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0

	int mode = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	48a2      	ldr	r0, [pc, #648]	; (800a27c <goal_test+0x298>)
 8009ff2:	f008 f847 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	b2d8      	uxtb	r0, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0302 	and.w	r3, r3, #2
 800a008:	b2d9      	uxtb	r1, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 0304 	and.w	r3, r3, #4
 800a012:	b2db      	uxtb	r3, r3
 800a014:	461a      	mov	r2, r3
 800a016:	f007 fa67 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800a01a:	4b99      	ldr	r3, [pc, #612]	; (800a280 <goal_test+0x29c>)
 800a01c:	edd3 7a00 	vldr	s15, [r3]
 800a020:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a024:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02c:	db0f      	blt.n	800a04e <goal_test+0x6a>
			  mode++;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3301      	adds	r3, #1
 800a032:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a034:	4b92      	ldr	r3, [pc, #584]	; (800a280 <goal_test+0x29c>)
 800a036:	f04f 0200 	mov.w	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b07      	cmp	r3, #7
 800a040:	dd01      	ble.n	800a046 <goal_test+0x62>
				  mode = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	488e      	ldr	r0, [pc, #568]	; (800a284 <goal_test+0x2a0>)
 800a04a:	f008 f81b 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800a04e:	4b8c      	ldr	r3, [pc, #560]	; (800a280 <goal_test+0x29c>)
 800a050:	edd3 7a00 	vldr	s15, [r3]
 800a054:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a060:	d80f      	bhi.n	800a082 <goal_test+0x9e>
			  mode--;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3b01      	subs	r3, #1
 800a066:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a068:	4b85      	ldr	r3, [pc, #532]	; (800a280 <goal_test+0x29c>)
 800a06a:	f04f 0200 	mov.w	r2, #0
 800a06e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	da01      	bge.n	800a07a <goal_test+0x96>
				  mode = 7;
 800a076:	2307      	movs	r3, #7
 800a078:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4881      	ldr	r0, [pc, #516]	; (800a284 <goal_test+0x2a0>)
 800a07e:	f008 f801 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a086:	4880      	ldr	r0, [pc, #512]	; (800a288 <goal_test+0x2a4>)
 800a088:	f7f8 f924 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1b1      	bne.n	8009ff6 <goal_test+0x12>
			  HAL_Delay(50);
 800a092:	2032      	movs	r0, #50	; 0x32
 800a094:	f7f6 ffc2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a098:	bf00      	nop
 800a09a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a09e:	487a      	ldr	r0, [pc, #488]	; (800a288 <goal_test+0x2a4>)
 800a0a0:	f7f8 f918 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0f7      	beq.n	800a09a <goal_test+0xb6>
			  drive_ready();
 800a0aa:	f7fa fde9 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a0ae:	4a77      	ldr	r2, [pc, #476]	; (800a28c <goal_test+0x2a8>)
 800a0b0:	8813      	ldrh	r3, [r2, #0]
 800a0b2:	f36f 03c3 	bfc	r3, #3, #1
 800a0b6:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b07      	cmp	r3, #7
 800a0bc:	d89b      	bhi.n	8009ff6 <goal_test+0x12>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <goal_test+0xe0>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a0e5 	.word	0x0800a0e5
 800a0c8:	0800a16d 	.word	0x0800a16d
 800a0cc:	0800a1f5 	.word	0x0800a1f5
 800a0d0:	0800a2c1 	.word	0x0800a2c1
 800a0d4:	0800a349 	.word	0x0800a349
 800a0d8:	0800a3d1 	.word	0x0800a3d1
 800a0dc:	0800a459 	.word	0x0800a459
 800a0e0:	0800a4eb 	.word	0x0800a4eb
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a0e4:	486a      	ldr	r0, [pc, #424]	; (800a290 <goal_test+0x2ac>)
 800a0e6:	f008 f841 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a0ea:	4a6a      	ldr	r2, [pc, #424]	; (800a294 <goal_test+0x2b0>)
 800a0ec:	8813      	ldrh	r3, [r2, #0]
 800a0ee:	f36f 1345 	bfc	r3, #5, #1
 800a0f2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0f4:	4a67      	ldr	r2, [pc, #412]	; (800a294 <goal_test+0x2b0>)
 800a0f6:	8813      	ldrh	r3, [r2, #0]
 800a0f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0fc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a0fe:	4a65      	ldr	r2, [pc, #404]	; (800a294 <goal_test+0x2b0>)
 800a100:	8813      	ldrh	r3, [r2, #0]
 800a102:	f36f 238a 	bfc	r3, #10, #1
 800a106:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a108:	4b63      	ldr	r3, [pc, #396]	; (800a298 <goal_test+0x2b4>)
 800a10a:	2202      	movs	r2, #2
 800a10c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a10e:	4b63      	ldr	r3, [pc, #396]	; (800a29c <goal_test+0x2b8>)
 800a110:	2200      	movs	r2, #0
 800a112:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a114:	4b62      	ldr	r3, [pc, #392]	; (800a2a0 <goal_test+0x2bc>)
 800a116:	2201      	movs	r2, #1
 800a118:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a11a:	4b62      	ldr	r3, [pc, #392]	; (800a2a4 <goal_test+0x2c0>)
 800a11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a120:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a122:	4b61      	ldr	r3, [pc, #388]	; (800a2a8 <goal_test+0x2c4>)
 800a124:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a128:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a12a:	4b5c      	ldr	r3, [pc, #368]	; (800a29c <goal_test+0x2b8>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a130:	4b5e      	ldr	r3, [pc, #376]	; (800a2ac <goal_test+0x2c8>)
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a136:	4b5e      	ldr	r3, [pc, #376]	; (800a2b0 <goal_test+0x2cc>)
 800a138:	2204      	movs	r2, #4
 800a13a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a13c:	f007 f97c 	bl	8011438 <get_base>

					searchC();
 800a140:	f004 f9c2 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800a144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a148:	f7f6 ff68 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a14c:	4b58      	ldr	r3, [pc, #352]	; (800a2b0 <goal_test+0x2cc>)
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	4b57      	ldr	r3, [pc, #348]	; (800a2b0 <goal_test+0x2cc>)
 800a154:	781a      	ldrb	r2, [r3, #0]
 800a156:	4b55      	ldr	r3, [pc, #340]	; (800a2ac <goal_test+0x2c8>)
 800a158:	701a      	strb	r2, [r3, #0]
					searchC();
 800a15a:	f004 f9b5 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800a15e:	4b53      	ldr	r3, [pc, #332]	; (800a2ac <goal_test+0x2c8>)
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a164:	4b52      	ldr	r3, [pc, #328]	; (800a2b0 <goal_test+0x2cc>)
 800a166:	2204      	movs	r2, #4
 800a168:	701a      	strb	r2, [r3, #0]
					break;
 800a16a:	e207      	b.n	800a57c <goal_test+0x598>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800a16c:	4851      	ldr	r0, [pc, #324]	; (800a2b4 <goal_test+0x2d0>)
 800a16e:	f007 fffd 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a172:	4a48      	ldr	r2, [pc, #288]	; (800a294 <goal_test+0x2b0>)
 800a174:	8813      	ldrh	r3, [r2, #0]
 800a176:	f36f 1345 	bfc	r3, #5, #1
 800a17a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a17c:	4a45      	ldr	r2, [pc, #276]	; (800a294 <goal_test+0x2b0>)
 800a17e:	8813      	ldrh	r3, [r2, #0]
 800a180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a184:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a186:	4a43      	ldr	r2, [pc, #268]	; (800a294 <goal_test+0x2b0>)
 800a188:	8813      	ldrh	r3, [r2, #0]
 800a18a:	f36f 238a 	bfc	r3, #10, #1
 800a18e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a190:	4b41      	ldr	r3, [pc, #260]	; (800a298 <goal_test+0x2b4>)
 800a192:	2202      	movs	r2, #2
 800a194:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a196:	4b41      	ldr	r3, [pc, #260]	; (800a29c <goal_test+0x2b8>)
 800a198:	2200      	movs	r2, #0
 800a19a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a19c:	4b40      	ldr	r3, [pc, #256]	; (800a2a0 <goal_test+0x2bc>)
 800a19e:	2202      	movs	r2, #2
 800a1a0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a1a2:	4b40      	ldr	r3, [pc, #256]	; (800a2a4 <goal_test+0x2c0>)
 800a1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a1aa:	4b3f      	ldr	r3, [pc, #252]	; (800a2a8 <goal_test+0x2c4>)
 800a1ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a1b0:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a1b2:	4b3a      	ldr	r3, [pc, #232]	; (800a29c <goal_test+0x2b8>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a1b8:	4b3c      	ldr	r3, [pc, #240]	; (800a2ac <goal_test+0x2c8>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1be:	4b3c      	ldr	r3, [pc, #240]	; (800a2b0 <goal_test+0x2cc>)
 800a1c0:	2204      	movs	r2, #4
 800a1c2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a1c4:	f007 f938 	bl	8011438 <get_base>

					searchC();
 800a1c8:	f004 f97e 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800a1cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1d0:	f7f6 ff24 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a1d4:	4b36      	ldr	r3, [pc, #216]	; (800a2b0 <goal_test+0x2cc>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	4b35      	ldr	r3, [pc, #212]	; (800a2b0 <goal_test+0x2cc>)
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	4b33      	ldr	r3, [pc, #204]	; (800a2ac <goal_test+0x2c8>)
 800a1e0:	701a      	strb	r2, [r3, #0]
					searchC();
 800a1e2:	f004 f971 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800a1e6:	4b31      	ldr	r3, [pc, #196]	; (800a2ac <goal_test+0x2c8>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1ec:	4b30      	ldr	r3, [pc, #192]	; (800a2b0 <goal_test+0x2cc>)
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	701a      	strb	r2, [r3, #0]
					break;
 800a1f2:	e1c3      	b.n	800a57c <goal_test+0x598>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a1f4:	4830      	ldr	r0, [pc, #192]	; (800a2b8 <goal_test+0x2d4>)
 800a1f6:	f007 ffb9 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800a1fa:	4a26      	ldr	r2, [pc, #152]	; (800a294 <goal_test+0x2b0>)
 800a1fc:	8813      	ldrh	r3, [r2, #0]
 800a1fe:	f043 0320 	orr.w	r3, r3, #32
 800a202:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a204:	4a23      	ldr	r2, [pc, #140]	; (800a294 <goal_test+0x2b0>)
 800a206:	8813      	ldrh	r3, [r2, #0]
 800a208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a20c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a20e:	4a21      	ldr	r2, [pc, #132]	; (800a294 <goal_test+0x2b0>)
 800a210:	8813      	ldrh	r3, [r2, #0]
 800a212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a216:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a218:	4b1f      	ldr	r3, [pc, #124]	; (800a298 <goal_test+0x2b4>)
 800a21a:	2202      	movs	r2, #2
 800a21c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a21e:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <goal_test+0x2b8>)
 800a220:	2200      	movs	r2, #0
 800a222:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a224:	4b1e      	ldr	r3, [pc, #120]	; (800a2a0 <goal_test+0x2bc>)
 800a226:	2201      	movs	r2, #1
 800a228:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a22a:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <goal_test+0x2c0>)
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <goal_test+0x2c4>)
 800a234:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a238:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a23a:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <goal_test+0x2d8>)
 800a23c:	2203      	movs	r2, #3
 800a23e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a240:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <goal_test+0x2c8>)
 800a242:	2200      	movs	r2, #0
 800a244:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <goal_test+0x2cc>)
 800a248:	2204      	movs	r2, #4
 800a24a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a24c:	f007 f8f4 	bl	8011438 <get_base>

					searchF3();
 800a250:	f004 fdb4 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800a254:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a258:	f7f6 fee0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a25c:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <goal_test+0x2cc>)
 800a25e:	2200      	movs	r2, #0
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <goal_test+0x2cc>)
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <goal_test+0x2c8>)
 800a268:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a26a:	f004 fda7 	bl	800edbc <searchF3>

					goal_x = GOAL_X;
 800a26e:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <goal_test+0x2c8>)
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a274:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <goal_test+0x2cc>)
 800a276:	2204      	movs	r2, #4
 800a278:	701a      	strb	r2, [r3, #0]
					break;
 800a27a:	e17f      	b.n	800a57c <goal_test+0x598>
 800a27c:	080134f4 	.word	0x080134f4
 800a280:	20000aec 	.word	0x20000aec
 800a284:	080132c0 	.word	0x080132c0
 800a288:	40020000 	.word	0x40020000
 800a28c:	20000f64 	.word	0x20000f64
 800a290:	080134a0 	.word	0x080134a0
 800a294:	20000f68 	.word	0x20000f68
 800a298:	20000456 	.word	0x20000456
 800a29c:	200015c8 	.word	0x200015c8
 800a2a0:	20000bb1 	.word	0x20000bb1
 800a2a4:	20000454 	.word	0x20000454
 800a2a8:	20000f7c 	.word	0x20000f7c
 800a2ac:	20000bb0 	.word	0x20000bb0
 800a2b0:	20000b4c 	.word	0x20000b4c
 800a2b4:	08013510 	.word	0x08013510
 800a2b8:	080134c4 	.word	0x080134c4
 800a2bc:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800a2c0:	48af      	ldr	r0, [pc, #700]	; (800a580 <goal_test+0x59c>)
 800a2c2:	f007 ff53 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800a2c6:	4aaf      	ldr	r2, [pc, #700]	; (800a584 <goal_test+0x5a0>)
 800a2c8:	8813      	ldrh	r3, [r2, #0]
 800a2ca:	f043 0320 	orr.w	r3, r3, #32
 800a2ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a2d0:	4aac      	ldr	r2, [pc, #688]	; (800a584 <goal_test+0x5a0>)
 800a2d2:	8813      	ldrh	r3, [r2, #0]
 800a2d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a2da:	4aaa      	ldr	r2, [pc, #680]	; (800a584 <goal_test+0x5a0>)
 800a2dc:	8813      	ldrh	r3, [r2, #0]
 800a2de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2e2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a2e4:	4ba8      	ldr	r3, [pc, #672]	; (800a588 <goal_test+0x5a4>)
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a2ea:	4ba8      	ldr	r3, [pc, #672]	; (800a58c <goal_test+0x5a8>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a2f0:	4ba7      	ldr	r3, [pc, #668]	; (800a590 <goal_test+0x5ac>)
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a2f6:	4ba7      	ldr	r3, [pc, #668]	; (800a594 <goal_test+0x5b0>)
 800a2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a2fe:	4ba6      	ldr	r3, [pc, #664]	; (800a598 <goal_test+0x5b4>)
 800a300:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a304:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a306:	4ba5      	ldr	r3, [pc, #660]	; (800a59c <goal_test+0x5b8>)
 800a308:	2203      	movs	r2, #3
 800a30a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a30c:	4ba4      	ldr	r3, [pc, #656]	; (800a5a0 <goal_test+0x5bc>)
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a312:	4ba4      	ldr	r3, [pc, #656]	; (800a5a4 <goal_test+0x5c0>)
 800a314:	2204      	movs	r2, #4
 800a316:	701a      	strb	r2, [r3, #0]

					get_base();
 800a318:	f007 f88e 	bl	8011438 <get_base>

					searchF3();
 800a31c:	f004 fd4e 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800a320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a324:	f7f6 fe7a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a328:	4b9e      	ldr	r3, [pc, #632]	; (800a5a4 <goal_test+0x5c0>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	4b9d      	ldr	r3, [pc, #628]	; (800a5a4 <goal_test+0x5c0>)
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	4b9b      	ldr	r3, [pc, #620]	; (800a5a0 <goal_test+0x5bc>)
 800a334:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a336:	f004 fd41 	bl	800edbc <searchF3>

					goal_x = GOAL_X;
 800a33a:	4b99      	ldr	r3, [pc, #612]	; (800a5a0 <goal_test+0x5bc>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a340:	4b98      	ldr	r3, [pc, #608]	; (800a5a4 <goal_test+0x5c0>)
 800a342:	2204      	movs	r2, #4
 800a344:	701a      	strb	r2, [r3, #0]
					break;
 800a346:	e119      	b.n	800a57c <goal_test+0x598>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a348:	4897      	ldr	r0, [pc, #604]	; (800a5a8 <goal_test+0x5c4>)
 800a34a:	f007 ff0f 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800a34e:	4a8d      	ldr	r2, [pc, #564]	; (800a584 <goal_test+0x5a0>)
 800a350:	8813      	ldrh	r3, [r2, #0]
 800a352:	f043 0320 	orr.w	r3, r3, #32
 800a356:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a358:	4a8a      	ldr	r2, [pc, #552]	; (800a584 <goal_test+0x5a0>)
 800a35a:	8813      	ldrh	r3, [r2, #0]
 800a35c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a360:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a362:	4a88      	ldr	r2, [pc, #544]	; (800a584 <goal_test+0x5a0>)
 800a364:	8813      	ldrh	r3, [r2, #0]
 800a366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a36a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a36c:	4b86      	ldr	r3, [pc, #536]	; (800a588 <goal_test+0x5a4>)
 800a36e:	2202      	movs	r2, #2
 800a370:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a372:	4b86      	ldr	r3, [pc, #536]	; (800a58c <goal_test+0x5a8>)
 800a374:	2200      	movs	r2, #0
 800a376:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a378:	4b85      	ldr	r3, [pc, #532]	; (800a590 <goal_test+0x5ac>)
 800a37a:	2201      	movs	r2, #1
 800a37c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a37e:	4b85      	ldr	r3, [pc, #532]	; (800a594 <goal_test+0x5b0>)
 800a380:	f241 3288 	movw	r2, #5000	; 0x1388
 800a384:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a386:	4b84      	ldr	r3, [pc, #528]	; (800a598 <goal_test+0x5b4>)
 800a388:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a38c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a38e:	4b83      	ldr	r3, [pc, #524]	; (800a59c <goal_test+0x5b8>)
 800a390:	2204      	movs	r2, #4
 800a392:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a394:	4b82      	ldr	r3, [pc, #520]	; (800a5a0 <goal_test+0x5bc>)
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a39a:	4b82      	ldr	r3, [pc, #520]	; (800a5a4 <goal_test+0x5c0>)
 800a39c:	2204      	movs	r2, #4
 800a39e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a3a0:	f007 f84a 	bl	8011438 <get_base>

					searchF4();
 800a3a4:	f004 fde0 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800a3a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3ac:	f7f6 fe36 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a3b0:	4b7c      	ldr	r3, [pc, #496]	; (800a5a4 <goal_test+0x5c0>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	4b7b      	ldr	r3, [pc, #492]	; (800a5a4 <goal_test+0x5c0>)
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	4b79      	ldr	r3, [pc, #484]	; (800a5a0 <goal_test+0x5bc>)
 800a3bc:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a3be:	f004 fdd3 	bl	800ef68 <searchF4>

					goal_x = GOAL_X;
 800a3c2:	4b77      	ldr	r3, [pc, #476]	; (800a5a0 <goal_test+0x5bc>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3c8:	4b76      	ldr	r3, [pc, #472]	; (800a5a4 <goal_test+0x5c0>)
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	701a      	strb	r2, [r3, #0]
					break;
 800a3ce:	e0d5      	b.n	800a57c <goal_test+0x598>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800a3d0:	4875      	ldr	r0, [pc, #468]	; (800a5a8 <goal_test+0x5c4>)
 800a3d2:	f007 fecb 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800a3d6:	4a6b      	ldr	r2, [pc, #428]	; (800a584 <goal_test+0x5a0>)
 800a3d8:	8813      	ldrh	r3, [r2, #0]
 800a3da:	f043 0320 	orr.w	r3, r3, #32
 800a3de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a3e0:	4a68      	ldr	r2, [pc, #416]	; (800a584 <goal_test+0x5a0>)
 800a3e2:	8813      	ldrh	r3, [r2, #0]
 800a3e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a3ea:	4a66      	ldr	r2, [pc, #408]	; (800a584 <goal_test+0x5a0>)
 800a3ec:	8813      	ldrh	r3, [r2, #0]
 800a3ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3f2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a3f4:	4b64      	ldr	r3, [pc, #400]	; (800a588 <goal_test+0x5a4>)
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a3fa:	4b64      	ldr	r3, [pc, #400]	; (800a58c <goal_test+0x5a8>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a400:	4b63      	ldr	r3, [pc, #396]	; (800a590 <goal_test+0x5ac>)
 800a402:	2202      	movs	r2, #2
 800a404:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a406:	4b63      	ldr	r3, [pc, #396]	; (800a594 <goal_test+0x5b0>)
 800a408:	f241 3288 	movw	r2, #5000	; 0x1388
 800a40c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a40e:	4b62      	ldr	r3, [pc, #392]	; (800a598 <goal_test+0x5b4>)
 800a410:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a414:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a416:	4b61      	ldr	r3, [pc, #388]	; (800a59c <goal_test+0x5b8>)
 800a418:	2204      	movs	r2, #4
 800a41a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a41c:	4b60      	ldr	r3, [pc, #384]	; (800a5a0 <goal_test+0x5bc>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a422:	4b60      	ldr	r3, [pc, #384]	; (800a5a4 <goal_test+0x5c0>)
 800a424:	2204      	movs	r2, #4
 800a426:	701a      	strb	r2, [r3, #0]

					get_base();
 800a428:	f007 f806 	bl	8011438 <get_base>

					searchF4();
 800a42c:	f004 fd9c 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800a430:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a434:	f7f6 fdf2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a438:	4b5a      	ldr	r3, [pc, #360]	; (800a5a4 <goal_test+0x5c0>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	4b59      	ldr	r3, [pc, #356]	; (800a5a4 <goal_test+0x5c0>)
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	4b57      	ldr	r3, [pc, #348]	; (800a5a0 <goal_test+0x5bc>)
 800a444:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a446:	f004 fd8f 	bl	800ef68 <searchF4>

					goal_x = GOAL_X;
 800a44a:	4b55      	ldr	r3, [pc, #340]	; (800a5a0 <goal_test+0x5bc>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a450:	4b54      	ldr	r3, [pc, #336]	; (800a5a4 <goal_test+0x5c0>)
 800a452:	2204      	movs	r2, #4
 800a454:	701a      	strb	r2, [r3, #0]
					break;
 800a456:	e091      	b.n	800a57c <goal_test+0x598>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800a458:	4854      	ldr	r0, [pc, #336]	; (800a5ac <goal_test+0x5c8>)
 800a45a:	f007 fe87 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a45e:	4a49      	ldr	r2, [pc, #292]	; (800a584 <goal_test+0x5a0>)
 800a460:	8813      	ldrh	r3, [r2, #0]
 800a462:	f36f 1345 	bfc	r3, #5, #1
 800a466:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a468:	4a46      	ldr	r2, [pc, #280]	; (800a584 <goal_test+0x5a0>)
 800a46a:	8813      	ldrh	r3, [r2, #0]
 800a46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a470:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a472:	4a44      	ldr	r2, [pc, #272]	; (800a584 <goal_test+0x5a0>)
 800a474:	8813      	ldrh	r3, [r2, #0]
 800a476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a47a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a47c:	4a41      	ldr	r2, [pc, #260]	; (800a584 <goal_test+0x5a0>)
 800a47e:	8813      	ldrh	r3, [r2, #0]
 800a480:	f36f 238a 	bfc	r3, #10, #1
 800a484:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a486:	4b40      	ldr	r3, [pc, #256]	; (800a588 <goal_test+0x5a4>)
 800a488:	2202      	movs	r2, #2
 800a48a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a48c:	4b3f      	ldr	r3, [pc, #252]	; (800a58c <goal_test+0x5a8>)
 800a48e:	2200      	movs	r2, #0
 800a490:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a492:	4b3f      	ldr	r3, [pc, #252]	; (800a590 <goal_test+0x5ac>)
 800a494:	2201      	movs	r2, #1
 800a496:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a498:	4b3e      	ldr	r3, [pc, #248]	; (800a594 <goal_test+0x5b0>)
 800a49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a4a0:	4b3d      	ldr	r3, [pc, #244]	; (800a598 <goal_test+0x5b4>)
 800a4a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a4a6:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a4a8:	4b38      	ldr	r3, [pc, #224]	; (800a58c <goal_test+0x5a8>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a4ae:	4b3c      	ldr	r3, [pc, #240]	; (800a5a0 <goal_test+0x5bc>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a4b4:	4b3b      	ldr	r3, [pc, #236]	; (800a5a4 <goal_test+0x5c0>)
 800a4b6:	2204      	movs	r2, #4
 800a4b8:	701a      	strb	r2, [r3, #0]

					get_base();
 800a4ba:	f006 ffbd 	bl	8011438 <get_base>

					searchC2();
 800a4be:	f004 f975 	bl	800e7ac <searchC2>
					HAL_Delay(2000);
 800a4c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4c6:	f7f6 fda9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a4ca:	4b36      	ldr	r3, [pc, #216]	; (800a5a4 <goal_test+0x5c0>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	4b34      	ldr	r3, [pc, #208]	; (800a5a4 <goal_test+0x5c0>)
 800a4d2:	781a      	ldrb	r2, [r3, #0]
 800a4d4:	4b32      	ldr	r3, [pc, #200]	; (800a5a0 <goal_test+0x5bc>)
 800a4d6:	701a      	strb	r2, [r3, #0]
					searchC();
 800a4d8:	f003 fff6 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800a4dc:	4b30      	ldr	r3, [pc, #192]	; (800a5a0 <goal_test+0x5bc>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a4e2:	4b30      	ldr	r3, [pc, #192]	; (800a5a4 <goal_test+0x5c0>)
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	701a      	strb	r2, [r3, #0]
					break;
 800a4e8:	e048      	b.n	800a57c <goal_test+0x598>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800a4ea:	4830      	ldr	r0, [pc, #192]	; (800a5ac <goal_test+0x5c8>)
 800a4ec:	f007 fe3e 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a4f0:	4a24      	ldr	r2, [pc, #144]	; (800a584 <goal_test+0x5a0>)
 800a4f2:	8813      	ldrh	r3, [r2, #0]
 800a4f4:	f36f 1345 	bfc	r3, #5, #1
 800a4f8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a4fa:	4a22      	ldr	r2, [pc, #136]	; (800a584 <goal_test+0x5a0>)
 800a4fc:	8813      	ldrh	r3, [r2, #0]
 800a4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a502:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a504:	4a1f      	ldr	r2, [pc, #124]	; (800a584 <goal_test+0x5a0>)
 800a506:	8813      	ldrh	r3, [r2, #0]
 800a508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a50c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a50e:	4a1d      	ldr	r2, [pc, #116]	; (800a584 <goal_test+0x5a0>)
 800a510:	8813      	ldrh	r3, [r2, #0]
 800a512:	f36f 238a 	bfc	r3, #10, #1
 800a516:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a518:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <goal_test+0x5a4>)
 800a51a:	2202      	movs	r2, #2
 800a51c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a51e:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <goal_test+0x5a8>)
 800a520:	2200      	movs	r2, #0
 800a522:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a524:	4b1a      	ldr	r3, [pc, #104]	; (800a590 <goal_test+0x5ac>)
 800a526:	2202      	movs	r2, #2
 800a528:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a52a:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <goal_test+0x5b0>)
 800a52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a530:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a532:	4b19      	ldr	r3, [pc, #100]	; (800a598 <goal_test+0x5b4>)
 800a534:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a538:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a53a:	4b14      	ldr	r3, [pc, #80]	; (800a58c <goal_test+0x5a8>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a540:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <goal_test+0x5bc>)
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a546:	4b17      	ldr	r3, [pc, #92]	; (800a5a4 <goal_test+0x5c0>)
 800a548:	2204      	movs	r2, #4
 800a54a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a54c:	f006 ff74 	bl	8011438 <get_base>

					searchC2();
 800a550:	f004 f92c 	bl	800e7ac <searchC2>
					HAL_Delay(2000);
 800a554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a558:	f7f6 fd60 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a55c:	4b11      	ldr	r3, [pc, #68]	; (800a5a4 <goal_test+0x5c0>)
 800a55e:	2200      	movs	r2, #0
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	4b10      	ldr	r3, [pc, #64]	; (800a5a4 <goal_test+0x5c0>)
 800a564:	781a      	ldrb	r2, [r3, #0]
 800a566:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <goal_test+0x5bc>)
 800a568:	701a      	strb	r2, [r3, #0]
					searchC();
 800a56a:	f003 ffad 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800a56e:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <goal_test+0x5bc>)
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a574:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <goal_test+0x5c0>)
 800a576:	2204      	movs	r2, #4
 800a578:	701a      	strb	r2, [r3, #0]
					break;
 800a57a:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a57c:	e53b      	b.n	8009ff6 <goal_test+0x12>
 800a57e:	bf00      	nop
 800a580:	080134c4 	.word	0x080134c4
 800a584:	20000f68 	.word	0x20000f68
 800a588:	20000456 	.word	0x20000456
 800a58c:	200015c8 	.word	0x200015c8
 800a590:	20000bb1 	.word	0x20000bb1
 800a594:	20000454 	.word	0x20000454
 800a598:	20000f7c 	.word	0x20000f7c
 800a59c:	20000457 	.word	0x20000457
 800a5a0:	20000bb0 	.word	0x20000bb0
 800a5a4:	20000b4c 	.word	0x20000b4c
 800a5a8:	080134d4 	.word	0x080134d4
 800a5ac:	080134a0 	.word	0x080134a0

0800a5b0 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	488f      	ldr	r0, [pc, #572]	; (800a7fc <sample_course_run+0x24c>)
 800a5be:	f007 fd61 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	b2d8      	uxtb	r0, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	f003 0302 	and.w	r3, r3, #2
 800a5d4:	b2d9      	uxtb	r1, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f006 ff81 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800a5e6:	4b86      	ldr	r3, [pc, #536]	; (800a800 <sample_course_run+0x250>)
 800a5e8:	edd3 7a00 	vldr	s15, [r3]
 800a5ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a5f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f8:	db0f      	blt.n	800a61a <sample_course_run+0x6a>
			  mode++;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a600:	4b7f      	ldr	r3, [pc, #508]	; (800a800 <sample_course_run+0x250>)
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b07      	cmp	r3, #7
 800a60c:	dd01      	ble.n	800a612 <sample_course_run+0x62>
				  mode = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	487b      	ldr	r0, [pc, #492]	; (800a804 <sample_course_run+0x254>)
 800a616:	f007 fd35 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800a61a:	4b79      	ldr	r3, [pc, #484]	; (800a800 <sample_course_run+0x250>)
 800a61c:	edd3 7a00 	vldr	s15, [r3]
 800a620:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a624:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62c:	d80f      	bhi.n	800a64e <sample_course_run+0x9e>
			  mode--;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3b01      	subs	r3, #1
 800a632:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a634:	4b72      	ldr	r3, [pc, #456]	; (800a800 <sample_course_run+0x250>)
 800a636:	f04f 0200 	mov.w	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	da01      	bge.n	800a646 <sample_course_run+0x96>
				  mode = 7;
 800a642:	2307      	movs	r3, #7
 800a644:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a646:	6879      	ldr	r1, [r7, #4]
 800a648:	486e      	ldr	r0, [pc, #440]	; (800a804 <sample_course_run+0x254>)
 800a64a:	f007 fd1b 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a64e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a652:	486d      	ldr	r0, [pc, #436]	; (800a808 <sample_course_run+0x258>)
 800a654:	f7f7 fe3e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1b1      	bne.n	800a5c2 <sample_course_run+0x12>
			  HAL_Delay(50);
 800a65e:	2032      	movs	r0, #50	; 0x32
 800a660:	f7f6 fcdc 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a664:	bf00      	nop
 800a666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a66a:	4867      	ldr	r0, [pc, #412]	; (800a808 <sample_course_run+0x258>)
 800a66c:	f7f7 fe32 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0f7      	beq.n	800a666 <sample_course_run+0xb6>
			  drive_ready();
 800a676:	f7fa fb03 	bl	8004c80 <drive_ready>

			  switch(mode){
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b07      	cmp	r3, #7
 800a67e:	d8a0      	bhi.n	800a5c2 <sample_course_run+0x12>
 800a680:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <sample_course_run+0xd8>)
 800a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a686:	bf00      	nop
 800a688:	0800a6a9 	.word	0x0800a6a9
 800a68c:	0800a6af 	.word	0x0800a6af
 800a690:	0800a6d1 	.word	0x0800a6d1
 800a694:	0800a6f3 	.word	0x0800a6f3
 800a698:	0800a5c3 	.word	0x0800a5c3
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a77f 	.word	0x0800a77f
 800a6a4:	0800a5c3 	.word	0x0800a5c3
				case 0:
					get_base();
 800a6a8:	f006 fec6 	bl	8011438 <get_base>
					break;
 800a6ac:	e0a4      	b.n	800a7f8 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a6ae:	f7fb f9e7 	bl	8005a80 <half_sectionA>
					half_sectionD();
 800a6b2:	f7fb fa2f 	bl	8005b14 <half_sectionD>
					rotate_R90();
 800a6b6:	f7fb fcd3 	bl	8006060 <rotate_R90>
					half_sectionA();
 800a6ba:	f7fb f9e1 	bl	8005a80 <half_sectionA>
					half_sectionD();
 800a6be:	f7fb fa29 	bl	8005b14 <half_sectionD>
					rotate_R90();
 800a6c2:	f7fb fccd 	bl	8006060 <rotate_R90>
					half_sectionA();
 800a6c6:	f7fb f9db 	bl	8005a80 <half_sectionA>
					half_sectionD();
 800a6ca:	f7fb fa23 	bl	8005b14 <half_sectionD>
					break;
 800a6ce:	e093      	b.n	800a7f8 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a6d0:	f7fb f9d6 	bl	8005a80 <half_sectionA>
					half_sectionD();
 800a6d4:	f7fb fa1e 	bl	8005b14 <half_sectionD>
					rotate_L90();
 800a6d8:	f7fb fd9e 	bl	8006218 <rotate_L90>
					half_sectionA();
 800a6dc:	f7fb f9d0 	bl	8005a80 <half_sectionA>
					half_sectionD();
 800a6e0:	f7fb fa18 	bl	8005b14 <half_sectionD>
					rotate_L90();
 800a6e4:	f7fb fd98 	bl	8006218 <rotate_L90>
					half_sectionA();
 800a6e8:	f7fb f9ca 	bl	8005a80 <half_sectionA>
					half_sectionD();
 800a6ec:	f7fb fa12 	bl	8005b14 <half_sectionD>
					break;
 800a6f0:	e082      	b.n	800a7f8 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800a6f2:	f7fb f9c5 	bl	8005a80 <half_sectionA>
					slalom_R90();
 800a6f6:	f7fb ff43 	bl	8006580 <slalom_R90>
					slalom_R90();
 800a6fa:	f7fb ff41 	bl	8006580 <slalom_R90>
					half_sectionD();
 800a6fe:	f7fb fa09 	bl	8005b14 <half_sectionD>
					break;
 800a702:	e079      	b.n	800a7f8 <sample_course_run+0x248>
				case 4:
					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a704:	4841      	ldr	r0, [pc, #260]	; (800a80c <sample_course_run+0x25c>)
 800a706:	f007 fd31 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a70a:	4a41      	ldr	r2, [pc, #260]	; (800a810 <sample_course_run+0x260>)
 800a70c:	8813      	ldrh	r3, [r2, #0]
 800a70e:	f36f 1345 	bfc	r3, #5, #1
 800a712:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a714:	4a3e      	ldr	r2, [pc, #248]	; (800a810 <sample_course_run+0x260>)
 800a716:	8813      	ldrh	r3, [r2, #0]
 800a718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a71c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a71e:	4a3c      	ldr	r2, [pc, #240]	; (800a810 <sample_course_run+0x260>)
 800a720:	8813      	ldrh	r3, [r2, #0]
 800a722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a726:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800a728:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <sample_course_run+0x264>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a72e:	4b3a      	ldr	r3, [pc, #232]	; (800a818 <sample_course_run+0x268>)
 800a730:	f241 3288 	movw	r2, #5000	; 0x1388
 800a734:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a736:	4b39      	ldr	r3, [pc, #228]	; (800a81c <sample_course_run+0x26c>)
 800a738:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a73c:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800a73e:	4b38      	ldr	r3, [pc, #224]	; (800a820 <sample_course_run+0x270>)
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a744:	4b37      	ldr	r3, [pc, #220]	; (800a824 <sample_course_run+0x274>)
 800a746:	2204      	movs	r2, #4
 800a748:	701a      	strb	r2, [r3, #0]

					get_base();
 800a74a:	f006 fe75 	bl	8011438 <get_base>

					searchC();
 800a74e:	f003 febb 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800a752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a756:	f7f6 fc61 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a75a:	4b32      	ldr	r3, [pc, #200]	; (800a824 <sample_course_run+0x274>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	4b30      	ldr	r3, [pc, #192]	; (800a824 <sample_course_run+0x274>)
 800a762:	781a      	ldrb	r2, [r3, #0]
 800a764:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <sample_course_run+0x270>)
 800a766:	701a      	strb	r2, [r3, #0]
					searchE();
 800a768:	f004 fa7c 	bl	800ec64 <searchE>

					searchC();
 800a76c:	f003 feac 	bl	800e4c8 <searchC>
					goal_x = GOAL_X;
 800a770:	4b2b      	ldr	r3, [pc, #172]	; (800a820 <sample_course_run+0x270>)
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a776:	4b2b      	ldr	r3, [pc, #172]	; (800a824 <sample_course_run+0x274>)
 800a778:	2204      	movs	r2, #4
 800a77a:	701a      	strb	r2, [r3, #0]

					break;
 800a77c:	e03c      	b.n	800a7f8 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a77e:	4823      	ldr	r0, [pc, #140]	; (800a80c <sample_course_run+0x25c>)
 800a780:	f007 fcf4 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a784:	4a22      	ldr	r2, [pc, #136]	; (800a810 <sample_course_run+0x260>)
 800a786:	8813      	ldrh	r3, [r2, #0]
 800a788:	f36f 1345 	bfc	r3, #5, #1
 800a78c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a78e:	4a20      	ldr	r2, [pc, #128]	; (800a810 <sample_course_run+0x260>)
 800a790:	8813      	ldrh	r3, [r2, #0]
 800a792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a796:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a798:	4a1d      	ldr	r2, [pc, #116]	; (800a810 <sample_course_run+0x260>)
 800a79a:	8813      	ldrh	r3, [r2, #0]
 800a79c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7a0:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800a7a2:	4b1c      	ldr	r3, [pc, #112]	; (800a814 <sample_course_run+0x264>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a7a8:	4b1b      	ldr	r3, [pc, #108]	; (800a818 <sample_course_run+0x268>)
 800a7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ae:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a7b0:	4b1a      	ldr	r3, [pc, #104]	; (800a81c <sample_course_run+0x26c>)
 800a7b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a7b6:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a7b8:	4b19      	ldr	r3, [pc, #100]	; (800a820 <sample_course_run+0x270>)
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a7be:	4b19      	ldr	r3, [pc, #100]	; (800a824 <sample_course_run+0x274>)
 800a7c0:	2207      	movs	r2, #7
 800a7c2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a7c4:	f006 fe38 	bl	8011438 <get_base>

					searchC();
 800a7c8:	f003 fe7e 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800a7cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7d0:	f7f6 fc24 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a7d4:	4b13      	ldr	r3, [pc, #76]	; (800a824 <sample_course_run+0x274>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
 800a7da:	4b12      	ldr	r3, [pc, #72]	; (800a824 <sample_course_run+0x274>)
 800a7dc:	781a      	ldrb	r2, [r3, #0]
 800a7de:	4b10      	ldr	r3, [pc, #64]	; (800a820 <sample_course_run+0x270>)
 800a7e0:	701a      	strb	r2, [r3, #0]
					searchE();
 800a7e2:	f004 fa3f 	bl	800ec64 <searchE>

					searchC();
 800a7e6:	f003 fe6f 	bl	800e4c8 <searchC>
					goal_x = 7;
 800a7ea:	4b0d      	ldr	r3, [pc, #52]	; (800a820 <sample_course_run+0x270>)
 800a7ec:	2207      	movs	r2, #7
 800a7ee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <sample_course_run+0x274>)
 800a7f2:	2207      	movs	r2, #7
 800a7f4:	701a      	strb	r2, [r3, #0]

					break;
 800a7f6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a7f8:	e6e3      	b.n	800a5c2 <sample_course_run+0x12>
 800a7fa:	bf00      	nop
 800a7fc:	08013524 	.word	0x08013524
 800a800:	20000aec 	.word	0x20000aec
 800a804:	080132c0 	.word	0x080132c0
 800a808:	40020000 	.word	0x40020000
 800a80c:	08013544 	.word	0x08013544
 800a810:	20000f68 	.word	0x20000f68
 800a814:	200015c8 	.word	0x200015c8
 800a818:	20000454 	.word	0x20000454
 800a81c:	20000f7c 	.word	0x20000f7c
 800a820:	20000bb0 	.word	0x20000bb0
 800a824:	20000b4c 	.word	0x20000b4c

0800a828 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0

	int mode = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	4878      	ldr	r0, [pc, #480]	; (800aa18 <simple_run+0x1f0>)
 800a836:	f007 fc25 	bl	8012084 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	b2d8      	uxtb	r0, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	b2d9      	uxtb	r1, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0304 	and.w	r3, r3, #4
 800a856:	b2db      	uxtb	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	f006 fe45 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800a85e:	4b6f      	ldr	r3, [pc, #444]	; (800aa1c <simple_run+0x1f4>)
 800a860:	edd3 7a00 	vldr	s15, [r3]
 800a864:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a870:	db0f      	blt.n	800a892 <simple_run+0x6a>
			  mode++;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3301      	adds	r3, #1
 800a876:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a878:	4b68      	ldr	r3, [pc, #416]	; (800aa1c <simple_run+0x1f4>)
 800a87a:	f04f 0200 	mov.w	r2, #0
 800a87e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b07      	cmp	r3, #7
 800a884:	dd01      	ble.n	800a88a <simple_run+0x62>
				  mode = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	4864      	ldr	r0, [pc, #400]	; (800aa20 <simple_run+0x1f8>)
 800a88e:	f007 fbf9 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800a892:	4b62      	ldr	r3, [pc, #392]	; (800aa1c <simple_run+0x1f4>)
 800a894:	edd3 7a00 	vldr	s15, [r3]
 800a898:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a89c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a4:	d80f      	bhi.n	800a8c6 <simple_run+0x9e>
			  mode--;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a8ac:	4b5b      	ldr	r3, [pc, #364]	; (800aa1c <simple_run+0x1f4>)
 800a8ae:	f04f 0200 	mov.w	r2, #0
 800a8b2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	da01      	bge.n	800a8be <simple_run+0x96>
				  mode = 7;
 800a8ba:	2307      	movs	r3, #7
 800a8bc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	4857      	ldr	r0, [pc, #348]	; (800aa20 <simple_run+0x1f8>)
 800a8c2:	f007 fbdf 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a8c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8ca:	4856      	ldr	r0, [pc, #344]	; (800aa24 <simple_run+0x1fc>)
 800a8cc:	f7f7 fd02 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1b1      	bne.n	800a83a <simple_run+0x12>
			  HAL_Delay(50);
 800a8d6:	2032      	movs	r0, #50	; 0x32
 800a8d8:	f7f6 fba0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a8dc:	bf00      	nop
 800a8de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8e2:	4850      	ldr	r0, [pc, #320]	; (800aa24 <simple_run+0x1fc>)
 800a8e4:	f7f7 fcf6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0f7      	beq.n	800a8de <simple_run+0xb6>
			  drive_ready();
 800a8ee:	f7fa f9c7 	bl	8004c80 <drive_ready>

			  switch(mode){
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b07      	cmp	r3, #7
 800a8f6:	d8a0      	bhi.n	800a83a <simple_run+0x12>
 800a8f8:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <simple_run+0xd8>)
 800a8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fe:	bf00      	nop
 800a900:	0800a83b 	.word	0x0800a83b
 800a904:	0800a921 	.word	0x0800a921
 800a908:	0800a973 	.word	0x0800a973
 800a90c:	0800a9c5 	.word	0x0800a9c5
 800a910:	0800a83b 	.word	0x0800a83b
 800a914:	0800a83b 	.word	0x0800a83b
 800a918:	0800a83b 	.word	0x0800a83b
 800a91c:	0800a83b 	.word	0x0800a83b

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 800a920:	4841      	ldr	r0, [pc, #260]	; (800aa28 <simple_run+0x200>)
 800a922:	f007 fc23 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a926:	4a41      	ldr	r2, [pc, #260]	; (800aa2c <simple_run+0x204>)
 800a928:	8813      	ldrh	r3, [r2, #0]
 800a92a:	f36f 1345 	bfc	r3, #5, #1
 800a92e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a930:	4b3f      	ldr	r3, [pc, #252]	; (800aa30 <simple_run+0x208>)
 800a932:	2201      	movs	r2, #1
 800a934:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a936:	4b3f      	ldr	r3, [pc, #252]	; (800aa34 <simple_run+0x20c>)
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a93c:	4b3e      	ldr	r3, [pc, #248]	; (800aa38 <simple_run+0x210>)
 800a93e:	2204      	movs	r2, #4
 800a940:	701a      	strb	r2, [r3, #0]

					get_base();
 800a942:	f006 fd79 	bl	8011438 <get_base>

					searchA();
 800a946:	f003 fcb3 	bl	800e2b0 <searchA>
					HAL_Delay(2000);
 800a94a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a94e:	f7f6 fb65 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a952:	4b39      	ldr	r3, [pc, #228]	; (800aa38 <simple_run+0x210>)
 800a954:	2200      	movs	r2, #0
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	4b37      	ldr	r3, [pc, #220]	; (800aa38 <simple_run+0x210>)
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	4b35      	ldr	r3, [pc, #212]	; (800aa34 <simple_run+0x20c>)
 800a95e:	701a      	strb	r2, [r3, #0]
					searchA();
 800a960:	f003 fca6 	bl	800e2b0 <searchA>

					goal_x = GOAL_X;
 800a964:	4b33      	ldr	r3, [pc, #204]	; (800aa34 <simple_run+0x20c>)
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a96a:	4b33      	ldr	r3, [pc, #204]	; (800aa38 <simple_run+0x210>)
 800a96c:	2204      	movs	r2, #4
 800a96e:	701a      	strb	r2, [r3, #0]

					break;
 800a970:	e051      	b.n	800aa16 <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800a972:	4832      	ldr	r0, [pc, #200]	; (800aa3c <simple_run+0x214>)
 800a974:	f007 fbfa 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800a978:	4a2c      	ldr	r2, [pc, #176]	; (800aa2c <simple_run+0x204>)
 800a97a:	8813      	ldrh	r3, [r2, #0]
 800a97c:	f36f 1345 	bfc	r3, #5, #1
 800a980:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a982:	4b2b      	ldr	r3, [pc, #172]	; (800aa30 <simple_run+0x208>)
 800a984:	2201      	movs	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a988:	4b2a      	ldr	r3, [pc, #168]	; (800aa34 <simple_run+0x20c>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a98e:	4b2a      	ldr	r3, [pc, #168]	; (800aa38 <simple_run+0x210>)
 800a990:	2204      	movs	r2, #4
 800a992:	701a      	strb	r2, [r3, #0]

					get_base();
 800a994:	f006 fd50 	bl	8011438 <get_base>

					searchB();
 800a998:	f003 fd0c 	bl	800e3b4 <searchB>
					HAL_Delay(2000);
 800a99c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9a0:	f7f6 fb3c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9a4:	4b24      	ldr	r3, [pc, #144]	; (800aa38 <simple_run+0x210>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <simple_run+0x210>)
 800a9ac:	781a      	ldrb	r2, [r3, #0]
 800a9ae:	4b21      	ldr	r3, [pc, #132]	; (800aa34 <simple_run+0x20c>)
 800a9b0:	701a      	strb	r2, [r3, #0]
					searchB();
 800a9b2:	f003 fcff 	bl	800e3b4 <searchB>

					goal_x = GOAL_X;
 800a9b6:	4b1f      	ldr	r3, [pc, #124]	; (800aa34 <simple_run+0x20c>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9bc:	4b1e      	ldr	r3, [pc, #120]	; (800aa38 <simple_run+0x210>)
 800a9be:	2204      	movs	r2, #4
 800a9c0:	701a      	strb	r2, [r3, #0]

					break;
 800a9c2:	e028      	b.n	800aa16 <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 800a9c4:	481e      	ldr	r0, [pc, #120]	; (800aa40 <simple_run+0x218>)
 800a9c6:	f007 fbd1 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800a9ca:	4a18      	ldr	r2, [pc, #96]	; (800aa2c <simple_run+0x204>)
 800a9cc:	8813      	ldrh	r3, [r2, #0]
 800a9ce:	f043 0320 	orr.w	r3, r3, #32
 800a9d2:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <simple_run+0x208>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a9da:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <simple_run+0x20c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9e0:	4b15      	ldr	r3, [pc, #84]	; (800aa38 <simple_run+0x210>)
 800a9e2:	2204      	movs	r2, #4
 800a9e4:	701a      	strb	r2, [r3, #0]

					get_base();
 800a9e6:	f006 fd27 	bl	8011438 <get_base>

					searchB();
 800a9ea:	f003 fce3 	bl	800e3b4 <searchB>
					HAL_Delay(2000);
 800a9ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9f2:	f7f6 fb13 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9f6:	4b10      	ldr	r3, [pc, #64]	; (800aa38 <simple_run+0x210>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	4b0e      	ldr	r3, [pc, #56]	; (800aa38 <simple_run+0x210>)
 800a9fe:	781a      	ldrb	r2, [r3, #0]
 800aa00:	4b0c      	ldr	r3, [pc, #48]	; (800aa34 <simple_run+0x20c>)
 800aa02:	701a      	strb	r2, [r3, #0]
					searchB();
 800aa04:	f003 fcd6 	bl	800e3b4 <searchB>

					goal_x = GOAL_X;
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <simple_run+0x20c>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa0e:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <simple_run+0x210>)
 800aa10:	2204      	movs	r2, #4
 800aa12:	701a      	strb	r2, [r3, #0]

					break;
 800aa14:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa16:	e710      	b.n	800a83a <simple_run+0x12>
 800aa18:	08013560 	.word	0x08013560
 800aa1c:	20000aec 	.word	0x20000aec
 800aa20:	080132c0 	.word	0x080132c0
 800aa24:	40020000 	.word	0x40020000
 800aa28:	08013578 	.word	0x08013578
 800aa2c:	20000f68 	.word	0x20000f68
 800aa30:	20000456 	.word	0x20000456
 800aa34:	20000bb0 	.word	0x20000bb0
 800aa38:	20000b4c 	.word	0x20000b4c
 800aa3c:	08013584 	.word	0x08013584
 800aa40:	0801359c 	.word	0x0801359c

0800aa44 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0

	int mode = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	48a6      	ldr	r0, [pc, #664]	; (800acec <slalom_run+0x2a8>)
 800aa52:	f007 fb17 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	b2d8      	uxtb	r0, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	b2d9      	uxtb	r1, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	461a      	mov	r2, r3
 800aa76:	f006 fd37 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800aa7a:	4b9d      	ldr	r3, [pc, #628]	; (800acf0 <slalom_run+0x2ac>)
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aa84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8c:	db0f      	blt.n	800aaae <slalom_run+0x6a>
			  mode++;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3301      	adds	r3, #1
 800aa92:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aa94:	4b96      	ldr	r3, [pc, #600]	; (800acf0 <slalom_run+0x2ac>)
 800aa96:	f04f 0200 	mov.w	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b07      	cmp	r3, #7
 800aaa0:	dd01      	ble.n	800aaa6 <slalom_run+0x62>
				  mode = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4892      	ldr	r0, [pc, #584]	; (800acf4 <slalom_run+0x2b0>)
 800aaaa:	f007 faeb 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800aaae:	4b90      	ldr	r3, [pc, #576]	; (800acf0 <slalom_run+0x2ac>)
 800aab0:	edd3 7a00 	vldr	s15, [r3]
 800aab4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800aab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	d80f      	bhi.n	800aae2 <slalom_run+0x9e>
			  mode--;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aac8:	4b89      	ldr	r3, [pc, #548]	; (800acf0 <slalom_run+0x2ac>)
 800aaca:	f04f 0200 	mov.w	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	da01      	bge.n	800aada <slalom_run+0x96>
				  mode = 7;
 800aad6:	2307      	movs	r3, #7
 800aad8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	4885      	ldr	r0, [pc, #532]	; (800acf4 <slalom_run+0x2b0>)
 800aade:	f007 fad1 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800aae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aae6:	4884      	ldr	r0, [pc, #528]	; (800acf8 <slalom_run+0x2b4>)
 800aae8:	f7f7 fbf4 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1b1      	bne.n	800aa56 <slalom_run+0x12>
			  HAL_Delay(50);
 800aaf2:	2032      	movs	r0, #50	; 0x32
 800aaf4:	f7f6 fa92 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800aaf8:	bf00      	nop
 800aafa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aafe:	487e      	ldr	r0, [pc, #504]	; (800acf8 <slalom_run+0x2b4>)
 800ab00:	f7f7 fbe8 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f7      	beq.n	800aafa <slalom_run+0xb6>
			  drive_ready();
 800ab0a:	f7fa f8b9 	bl	8004c80 <drive_ready>

			  switch(mode){
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b07      	cmp	r3, #7
 800ab12:	d8a0      	bhi.n	800aa56 <slalom_run+0x12>
 800ab14:	a201      	add	r2, pc, #4	; (adr r2, 800ab1c <slalom_run+0xd8>)
 800ab16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1a:	bf00      	nop
 800ab1c:	0800ab3d 	.word	0x0800ab3d
 800ab20:	0800abaf 	.word	0x0800abaf
 800ab24:	0800ac07 	.word	0x0800ac07
 800ab28:	0800ac79 	.word	0x0800ac79
 800ab2c:	0800ad25 	.word	0x0800ad25
 800ab30:	0800ad97 	.word	0x0800ad97
 800ab34:	0800ae01 	.word	0x0800ae01
 800ab38:	0800ae85 	.word	0x0800ae85

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800ab3c:	486f      	ldr	r0, [pc, #444]	; (800acfc <slalom_run+0x2b8>)
 800ab3e:	f007 fb15 	bl	801216c <puts>

					MF.FLAG.SCND = 0;
 800ab42:	4a6f      	ldr	r2, [pc, #444]	; (800ad00 <slalom_run+0x2bc>)
 800ab44:	8813      	ldrh	r3, [r2, #0]
 800ab46:	f36f 1345 	bfc	r3, #5, #1
 800ab4a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800ab4c:	4a6c      	ldr	r2, [pc, #432]	; (800ad00 <slalom_run+0x2bc>)
 800ab4e:	8813      	ldrh	r3, [r2, #0]
 800ab50:	f36f 2349 	bfc	r3, #9, #1
 800ab54:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ab56:	4b6b      	ldr	r3, [pc, #428]	; (800ad04 <slalom_run+0x2c0>)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ab5c:	4b6a      	ldr	r3, [pc, #424]	; (800ad08 <slalom_run+0x2c4>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ab62:	4b6a      	ldr	r3, [pc, #424]	; (800ad0c <slalom_run+0x2c8>)
 800ab64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab68:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ab6a:	4b69      	ldr	r3, [pc, #420]	; (800ad10 <slalom_run+0x2cc>)
 800ab6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ab70:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800ab72:	4b68      	ldr	r3, [pc, #416]	; (800ad14 <slalom_run+0x2d0>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ab78:	4b67      	ldr	r3, [pc, #412]	; (800ad18 <slalom_run+0x2d4>)
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	701a      	strb	r2, [r3, #0]

					get_base();
 800ab7e:	f006 fc5b 	bl	8011438 <get_base>

					searchC();
 800ab82:	f003 fca1 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800ab86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ab8a:	f7f6 fa47 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ab8e:	4b62      	ldr	r3, [pc, #392]	; (800ad18 <slalom_run+0x2d4>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	701a      	strb	r2, [r3, #0]
 800ab94:	4b60      	ldr	r3, [pc, #384]	; (800ad18 <slalom_run+0x2d4>)
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	4b5e      	ldr	r3, [pc, #376]	; (800ad14 <slalom_run+0x2d0>)
 800ab9a:	701a      	strb	r2, [r3, #0]
					searchC();
 800ab9c:	f003 fc94 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800aba0:	4b5c      	ldr	r3, [pc, #368]	; (800ad14 <slalom_run+0x2d0>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aba6:	4b5c      	ldr	r3, [pc, #368]	; (800ad18 <slalom_run+0x2d4>)
 800aba8:	2204      	movs	r2, #4
 800abaa:	701a      	strb	r2, [r3, #0]
					break;
 800abac:	e1ac      	b.n	800af08 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800abae:	485b      	ldr	r0, [pc, #364]	; (800ad1c <slalom_run+0x2d8>)
 800abb0:	f007 fadc 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800abb4:	4a52      	ldr	r2, [pc, #328]	; (800ad00 <slalom_run+0x2bc>)
 800abb6:	8813      	ldrh	r3, [r2, #0]
 800abb8:	f043 0320 	orr.w	r3, r3, #32
 800abbc:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800abbe:	4b51      	ldr	r3, [pc, #324]	; (800ad04 <slalom_run+0x2c0>)
 800abc0:	2201      	movs	r2, #1
 800abc2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800abc4:	4b50      	ldr	r3, [pc, #320]	; (800ad08 <slalom_run+0x2c4>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800abca:	4b52      	ldr	r3, [pc, #328]	; (800ad14 <slalom_run+0x2d0>)
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800abd0:	4b51      	ldr	r3, [pc, #324]	; (800ad18 <slalom_run+0x2d4>)
 800abd2:	2204      	movs	r2, #4
 800abd4:	701a      	strb	r2, [r3, #0]

					get_base();
 800abd6:	f006 fc2f 	bl	8011438 <get_base>

					searchC();
 800abda:	f003 fc75 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800abde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800abe2:	f7f6 fa1b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800abe6:	4b4c      	ldr	r3, [pc, #304]	; (800ad18 <slalom_run+0x2d4>)
 800abe8:	2200      	movs	r2, #0
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	4b4a      	ldr	r3, [pc, #296]	; (800ad18 <slalom_run+0x2d4>)
 800abee:	781a      	ldrb	r2, [r3, #0]
 800abf0:	4b48      	ldr	r3, [pc, #288]	; (800ad14 <slalom_run+0x2d0>)
 800abf2:	701a      	strb	r2, [r3, #0]
					searchC();
 800abf4:	f003 fc68 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800abf8:	4b46      	ldr	r3, [pc, #280]	; (800ad14 <slalom_run+0x2d0>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800abfe:	4b46      	ldr	r3, [pc, #280]	; (800ad18 <slalom_run+0x2d4>)
 800ac00:	2204      	movs	r2, #4
 800ac02:	701a      	strb	r2, [r3, #0]
					break;
 800ac04:	e180      	b.n	800af08 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800ac06:	4846      	ldr	r0, [pc, #280]	; (800ad20 <slalom_run+0x2dc>)
 800ac08:	f007 fab0 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800ac0c:	4a3c      	ldr	r2, [pc, #240]	; (800ad00 <slalom_run+0x2bc>)
 800ac0e:	8813      	ldrh	r3, [r2, #0]
 800ac10:	f043 0320 	orr.w	r3, r3, #32
 800ac14:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac16:	4a3a      	ldr	r2, [pc, #232]	; (800ad00 <slalom_run+0x2bc>)
 800ac18:	8813      	ldrh	r3, [r2, #0]
 800ac1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac1e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ac20:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <slalom_run+0x2c0>)
 800ac22:	2201      	movs	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac26:	4b38      	ldr	r3, [pc, #224]	; (800ad08 <slalom_run+0x2c4>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac2c:	4b37      	ldr	r3, [pc, #220]	; (800ad0c <slalom_run+0x2c8>)
 800ac2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac32:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800ac34:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <slalom_run+0x2cc>)
 800ac36:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac3a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ac3c:	4b35      	ldr	r3, [pc, #212]	; (800ad14 <slalom_run+0x2d0>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac42:	4b35      	ldr	r3, [pc, #212]	; (800ad18 <slalom_run+0x2d4>)
 800ac44:	2204      	movs	r2, #4
 800ac46:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac48:	f006 fbf6 	bl	8011438 <get_base>

					searchD();
 800ac4c:	f003 ff20 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800ac50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac54:	f7f6 f9e2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac58:	4b2f      	ldr	r3, [pc, #188]	; (800ad18 <slalom_run+0x2d4>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	701a      	strb	r2, [r3, #0]
 800ac5e:	4b2e      	ldr	r3, [pc, #184]	; (800ad18 <slalom_run+0x2d4>)
 800ac60:	781a      	ldrb	r2, [r3, #0]
 800ac62:	4b2c      	ldr	r3, [pc, #176]	; (800ad14 <slalom_run+0x2d0>)
 800ac64:	701a      	strb	r2, [r3, #0]
					searchD();
 800ac66:	f003 ff13 	bl	800ea90 <searchD>

					goal_x = GOAL_X;
 800ac6a:	4b2a      	ldr	r3, [pc, #168]	; (800ad14 <slalom_run+0x2d0>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac70:	4b29      	ldr	r3, [pc, #164]	; (800ad18 <slalom_run+0x2d4>)
 800ac72:	2204      	movs	r2, #4
 800ac74:	701a      	strb	r2, [r3, #0]
					break;
 800ac76:	e147      	b.n	800af08 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800ac78:	4829      	ldr	r0, [pc, #164]	; (800ad20 <slalom_run+0x2dc>)
 800ac7a:	f007 fa77 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800ac7e:	4a20      	ldr	r2, [pc, #128]	; (800ad00 <slalom_run+0x2bc>)
 800ac80:	8813      	ldrh	r3, [r2, #0]
 800ac82:	f043 0320 	orr.w	r3, r3, #32
 800ac86:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac88:	4a1d      	ldr	r2, [pc, #116]	; (800ad00 <slalom_run+0x2bc>)
 800ac8a:	8813      	ldrh	r3, [r2, #0]
 800ac8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac90:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ac92:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <slalom_run+0x2c0>)
 800ac94:	2201      	movs	r2, #1
 800ac96:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac98:	4b1b      	ldr	r3, [pc, #108]	; (800ad08 <slalom_run+0x2c4>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac9e:	4b1b      	ldr	r3, [pc, #108]	; (800ad0c <slalom_run+0x2c8>)
 800aca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800aca6:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <slalom_run+0x2cc>)
 800aca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800acac:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800acae:	4b19      	ldr	r3, [pc, #100]	; (800ad14 <slalom_run+0x2d0>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800acb4:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <slalom_run+0x2d4>)
 800acb6:	2204      	movs	r2, #4
 800acb8:	701a      	strb	r2, [r3, #0]

					get_base();
 800acba:	f006 fbbd 	bl	8011438 <get_base>

					searchD();
 800acbe:	f003 fee7 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800acc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800acc6:	f7f6 f9a9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <slalom_run+0x2d4>)
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <slalom_run+0x2d4>)
 800acd2:	781a      	ldrb	r2, [r3, #0]
 800acd4:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <slalom_run+0x2d0>)
 800acd6:	701a      	strb	r2, [r3, #0]
					searchD();
 800acd8:	f003 feda 	bl	800ea90 <searchD>

					goal_x = GOAL_X;
 800acdc:	4b0d      	ldr	r3, [pc, #52]	; (800ad14 <slalom_run+0x2d0>)
 800acde:	2200      	movs	r2, #0
 800ace0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ace2:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <slalom_run+0x2d4>)
 800ace4:	2204      	movs	r2, #4
 800ace6:	701a      	strb	r2, [r3, #0]
					break;
 800ace8:	e10e      	b.n	800af08 <slalom_run+0x4c4>
 800acea:	bf00      	nop
 800acec:	080135b8 	.word	0x080135b8
 800acf0:	20000aec 	.word	0x20000aec
 800acf4:	080132c0 	.word	0x080132c0
 800acf8:	40020000 	.word	0x40020000
 800acfc:	080134a0 	.word	0x080134a0
 800ad00:	20000f68 	.word	0x20000f68
 800ad04:	20000456 	.word	0x20000456
 800ad08:	200015c8 	.word	0x200015c8
 800ad0c:	20000454 	.word	0x20000454
 800ad10:	20000f7c 	.word	0x20000f7c
 800ad14:	20000bb0 	.word	0x20000bb0
 800ad18:	20000b4c 	.word	0x20000b4c
 800ad1c:	080135d0 	.word	0x080135d0
 800ad20:	080135e8 	.word	0x080135e8

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800ad24:	4879      	ldr	r0, [pc, #484]	; (800af0c <slalom_run+0x4c8>)
 800ad26:	f007 fa21 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800ad2a:	4a79      	ldr	r2, [pc, #484]	; (800af10 <slalom_run+0x4cc>)
 800ad2c:	8813      	ldrh	r3, [r2, #0]
 800ad2e:	f043 0320 	orr.w	r3, r3, #32
 800ad32:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ad34:	4a76      	ldr	r2, [pc, #472]	; (800af10 <slalom_run+0x4cc>)
 800ad36:	8813      	ldrh	r3, [r2, #0]
 800ad38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad3c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ad3e:	4b75      	ldr	r3, [pc, #468]	; (800af14 <slalom_run+0x4d0>)
 800ad40:	2201      	movs	r2, #1
 800ad42:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ad44:	4b74      	ldr	r3, [pc, #464]	; (800af18 <slalom_run+0x4d4>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ad4a:	4b74      	ldr	r3, [pc, #464]	; (800af1c <slalom_run+0x4d8>)
 800ad4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad50:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800ad52:	4b73      	ldr	r3, [pc, #460]	; (800af20 <slalom_run+0x4dc>)
 800ad54:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ad58:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ad5a:	4b72      	ldr	r3, [pc, #456]	; (800af24 <slalom_run+0x4e0>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad60:	4b71      	ldr	r3, [pc, #452]	; (800af28 <slalom_run+0x4e4>)
 800ad62:	2204      	movs	r2, #4
 800ad64:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad66:	f006 fb67 	bl	8011438 <get_base>

					searchD();
 800ad6a:	f003 fe91 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800ad6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad72:	f7f6 f953 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad76:	4b6c      	ldr	r3, [pc, #432]	; (800af28 <slalom_run+0x4e4>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	4b6a      	ldr	r3, [pc, #424]	; (800af28 <slalom_run+0x4e4>)
 800ad7e:	781a      	ldrb	r2, [r3, #0]
 800ad80:	4b68      	ldr	r3, [pc, #416]	; (800af24 <slalom_run+0x4e0>)
 800ad82:	701a      	strb	r2, [r3, #0]
					searchD();
 800ad84:	f003 fe84 	bl	800ea90 <searchD>

					goal_x = GOAL_X;
 800ad88:	4b66      	ldr	r3, [pc, #408]	; (800af24 <slalom_run+0x4e0>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad8e:	4b66      	ldr	r3, [pc, #408]	; (800af28 <slalom_run+0x4e4>)
 800ad90:	2204      	movs	r2, #4
 800ad92:	701a      	strb	r2, [r3, #0]
					break;
 800ad94:	e0b8      	b.n	800af08 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800ad96:	4865      	ldr	r0, [pc, #404]	; (800af2c <slalom_run+0x4e8>)
 800ad98:	f007 f9e8 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800ad9c:	4a5c      	ldr	r2, [pc, #368]	; (800af10 <slalom_run+0x4cc>)
 800ad9e:	8813      	ldrh	r3, [r2, #0]
 800ada0:	f043 0320 	orr.w	r3, r3, #32
 800ada4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ada6:	4a5a      	ldr	r2, [pc, #360]	; (800af10 <slalom_run+0x4cc>)
 800ada8:	8813      	ldrh	r3, [r2, #0]
 800adaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adae:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800adb0:	4b58      	ldr	r3, [pc, #352]	; (800af14 <slalom_run+0x4d0>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800adb6:	4b58      	ldr	r3, [pc, #352]	; (800af18 <slalom_run+0x4d4>)
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800adbc:	4b59      	ldr	r3, [pc, #356]	; (800af24 <slalom_run+0x4e0>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adc2:	4b59      	ldr	r3, [pc, #356]	; (800af28 <slalom_run+0x4e4>)
 800adc4:	2204      	movs	r2, #4
 800adc6:	701a      	strb	r2, [r3, #0]

					get_base();
 800adc8:	f006 fb36 	bl	8011438 <get_base>

					HAL_Delay(5000);
 800adcc:	f241 3088 	movw	r0, #5000	; 0x1388
 800add0:	f7f6 f924 	bl	800101c <HAL_Delay>
					searchC();
 800add4:	f003 fb78 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800add8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800addc:	f7f6 f91e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ade0:	4b51      	ldr	r3, [pc, #324]	; (800af28 <slalom_run+0x4e4>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]
 800ade6:	4b50      	ldr	r3, [pc, #320]	; (800af28 <slalom_run+0x4e4>)
 800ade8:	781a      	ldrb	r2, [r3, #0]
 800adea:	4b4e      	ldr	r3, [pc, #312]	; (800af24 <slalom_run+0x4e0>)
 800adec:	701a      	strb	r2, [r3, #0]
					searchC();
 800adee:	f003 fb6b 	bl	800e4c8 <searchC>

					goal_x = GOAL_X;
 800adf2:	4b4c      	ldr	r3, [pc, #304]	; (800af24 <slalom_run+0x4e0>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adf8:	4b4b      	ldr	r3, [pc, #300]	; (800af28 <slalom_run+0x4e4>)
 800adfa:	2204      	movs	r2, #4
 800adfc:	701a      	strb	r2, [r3, #0]
					break;
 800adfe:	e083      	b.n	800af08 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800ae00:	484a      	ldr	r0, [pc, #296]	; (800af2c <slalom_run+0x4e8>)
 800ae02:	f007 f9b3 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800ae06:	4a42      	ldr	r2, [pc, #264]	; (800af10 <slalom_run+0x4cc>)
 800ae08:	8813      	ldrh	r3, [r2, #0]
 800ae0a:	f043 0320 	orr.w	r3, r3, #32
 800ae0e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae10:	4a3f      	ldr	r2, [pc, #252]	; (800af10 <slalom_run+0x4cc>)
 800ae12:	8813      	ldrh	r3, [r2, #0]
 800ae14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae18:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae1a:	4a3d      	ldr	r2, [pc, #244]	; (800af10 <slalom_run+0x4cc>)
 800ae1c:	8813      	ldrh	r3, [r2, #0]
 800ae1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae22:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800ae24:	4b3b      	ldr	r3, [pc, #236]	; (800af14 <slalom_run+0x4d0>)
 800ae26:	2203      	movs	r2, #3
 800ae28:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae2a:	4b3b      	ldr	r3, [pc, #236]	; (800af18 <slalom_run+0x4d4>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae30:	4b3a      	ldr	r3, [pc, #232]	; (800af1c <slalom_run+0x4d8>)
 800ae32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae36:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ae38:	4b39      	ldr	r3, [pc, #228]	; (800af20 <slalom_run+0x4dc>)
 800ae3a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ae3e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ae40:	4b38      	ldr	r3, [pc, #224]	; (800af24 <slalom_run+0x4e0>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae46:	4b38      	ldr	r3, [pc, #224]	; (800af28 <slalom_run+0x4e4>)
 800ae48:	2204      	movs	r2, #4
 800ae4a:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae4c:	f006 faf4 	bl	8011438 <get_base>

					HAL_Delay(5000);
 800ae50:	f241 3088 	movw	r0, #5000	; 0x1388
 800ae54:	f7f6 f8e2 	bl	800101c <HAL_Delay>
					searchD();
 800ae58:	f003 fe1a 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800ae5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae60:	f7f6 f8dc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae64:	4b30      	ldr	r3, [pc, #192]	; (800af28 <slalom_run+0x4e4>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	701a      	strb	r2, [r3, #0]
 800ae6a:	4b2f      	ldr	r3, [pc, #188]	; (800af28 <slalom_run+0x4e4>)
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	4b2d      	ldr	r3, [pc, #180]	; (800af24 <slalom_run+0x4e0>)
 800ae70:	701a      	strb	r2, [r3, #0]
					searchD();
 800ae72:	f003 fe0d 	bl	800ea90 <searchD>

					goal_x = GOAL_X;
 800ae76:	4b2b      	ldr	r3, [pc, #172]	; (800af24 <slalom_run+0x4e0>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae7c:	4b2a      	ldr	r3, [pc, #168]	; (800af28 <slalom_run+0x4e4>)
 800ae7e:	2204      	movs	r2, #4
 800ae80:	701a      	strb	r2, [r3, #0]
					break;
 800ae82:	e041      	b.n	800af08 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800ae84:	4829      	ldr	r0, [pc, #164]	; (800af2c <slalom_run+0x4e8>)
 800ae86:	f007 f971 	bl	801216c <puts>

					MF.FLAG.SCND = 1;
 800ae8a:	4a21      	ldr	r2, [pc, #132]	; (800af10 <slalom_run+0x4cc>)
 800ae8c:	8813      	ldrh	r3, [r2, #0]
 800ae8e:	f043 0320 	orr.w	r3, r3, #32
 800ae92:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae94:	4a1e      	ldr	r2, [pc, #120]	; (800af10 <slalom_run+0x4cc>)
 800ae96:	8813      	ldrh	r3, [r2, #0]
 800ae98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae9c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae9e:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <slalom_run+0x4cc>)
 800aea0:	8813      	ldrh	r3, [r2, #0]
 800aea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aea6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800aea8:	4b1a      	ldr	r3, [pc, #104]	; (800af14 <slalom_run+0x4d0>)
 800aeaa:	2203      	movs	r2, #3
 800aeac:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aeae:	4b1a      	ldr	r3, [pc, #104]	; (800af18 <slalom_run+0x4d4>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aeb4:	4b19      	ldr	r3, [pc, #100]	; (800af1c <slalom_run+0x4d8>)
 800aeb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeba:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800aebc:	4b18      	ldr	r3, [pc, #96]	; (800af20 <slalom_run+0x4dc>)
 800aebe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aec2:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800aec4:	4b17      	ldr	r3, [pc, #92]	; (800af24 <slalom_run+0x4e0>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aeca:	4b17      	ldr	r3, [pc, #92]	; (800af28 <slalom_run+0x4e4>)
 800aecc:	2204      	movs	r2, #4
 800aece:	701a      	strb	r2, [r3, #0]

					get_base();
 800aed0:	f006 fab2 	bl	8011438 <get_base>

					HAL_Delay(5000);
 800aed4:	f241 3088 	movw	r0, #5000	; 0x1388
 800aed8:	f7f6 f8a0 	bl	800101c <HAL_Delay>
					searchD();
 800aedc:	f003 fdd8 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800aee0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aee4:	f7f6 f89a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aee8:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <slalom_run+0x4e4>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <slalom_run+0x4e4>)
 800aef0:	781a      	ldrb	r2, [r3, #0]
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <slalom_run+0x4e0>)
 800aef4:	701a      	strb	r2, [r3, #0]
					searchD();
 800aef6:	f003 fdcb 	bl	800ea90 <searchD>

					goal_x = GOAL_X;
 800aefa:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <slalom_run+0x4e0>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af00:	4b09      	ldr	r3, [pc, #36]	; (800af28 <slalom_run+0x4e4>)
 800af02:	2204      	movs	r2, #4
 800af04:	701a      	strb	r2, [r3, #0]
					break;
 800af06:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800af08:	e5a5      	b.n	800aa56 <slalom_run+0x12>
 800af0a:	bf00      	nop
 800af0c:	080135e8 	.word	0x080135e8
 800af10:	20000f68 	.word	0x20000f68
 800af14:	20000456 	.word	0x20000456
 800af18:	200015c8 	.word	0x200015c8
 800af1c:	20000454 	.word	0x20000454
 800af20:	20000f7c 	.word	0x20000f7c
 800af24:	20000bb0 	.word	0x20000bb0
 800af28:	20000b4c 	.word	0x20000b4c
 800af2c:	08013604 	.word	0x08013604

0800af30 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0

	int mode = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	4898      	ldr	r0, [pc, #608]	; (800b1a0 <perfect_slalom+0x270>)
 800af3e:	f007 f8a1 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	b2d8      	uxtb	r0, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	b2d9      	uxtb	r1, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	f003 0304 	and.w	r3, r3, #4
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	f006 fac1 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800af66:	4b8f      	ldr	r3, [pc, #572]	; (800b1a4 <perfect_slalom+0x274>)
 800af68:	edd3 7a00 	vldr	s15, [r3]
 800af6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800af70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af78:	db0f      	blt.n	800af9a <perfect_slalom+0x6a>
			  mode++;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3301      	adds	r3, #1
 800af7e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800af80:	4b88      	ldr	r3, [pc, #544]	; (800b1a4 <perfect_slalom+0x274>)
 800af82:	f04f 0200 	mov.w	r2, #0
 800af86:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b07      	cmp	r3, #7
 800af8c:	dd01      	ble.n	800af92 <perfect_slalom+0x62>
				  mode = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	4884      	ldr	r0, [pc, #528]	; (800b1a8 <perfect_slalom+0x278>)
 800af96:	f007 f875 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800af9a:	4b82      	ldr	r3, [pc, #520]	; (800b1a4 <perfect_slalom+0x274>)
 800af9c:	edd3 7a00 	vldr	s15, [r3]
 800afa0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800afa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afac:	d80f      	bhi.n	800afce <perfect_slalom+0x9e>
			  mode--;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800afb4:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <perfect_slalom+0x274>)
 800afb6:	f04f 0200 	mov.w	r2, #0
 800afba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	da01      	bge.n	800afc6 <perfect_slalom+0x96>
				  mode = 7;
 800afc2:	2307      	movs	r3, #7
 800afc4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	4877      	ldr	r0, [pc, #476]	; (800b1a8 <perfect_slalom+0x278>)
 800afca:	f007 f85b 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800afce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800afd2:	4876      	ldr	r0, [pc, #472]	; (800b1ac <perfect_slalom+0x27c>)
 800afd4:	f7f7 f97e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1b1      	bne.n	800af42 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800afde:	2032      	movs	r0, #50	; 0x32
 800afe0:	f7f6 f81c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800afe4:	bf00      	nop
 800afe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800afea:	4870      	ldr	r0, [pc, #448]	; (800b1ac <perfect_slalom+0x27c>)
 800afec:	f7f7 f972 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0f7      	beq.n	800afe6 <perfect_slalom+0xb6>
			  drive_ready();
 800aff6:	f7f9 fe43 	bl	8004c80 <drive_ready>

			  switch(mode){
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b07      	cmp	r3, #7
 800affe:	d8a0      	bhi.n	800af42 <perfect_slalom+0x12>
 800b000:	a201      	add	r2, pc, #4	; (adr r2, 800b008 <perfect_slalom+0xd8>)
 800b002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b006:	bf00      	nop
 800b008:	0800af43 	.word	0x0800af43
 800b00c:	0800b029 	.word	0x0800b029
 800b010:	0800b0ab 	.word	0x0800b0ab
 800b014:	0800b12d 	.word	0x0800b12d
 800b018:	0800b1dd 	.word	0x0800b1dd
 800b01c:	0800b25f 	.word	0x0800b25f
 800b020:	0800b2e1 	.word	0x0800b2e1
 800b024:	0800b363 	.word	0x0800b363
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b028:	4861      	ldr	r0, [pc, #388]	; (800b1b0 <perfect_slalom+0x280>)
 800b02a:	f007 f89f 	bl	801216c <puts>
					MF.FLAG.SCND = 0;
 800b02e:	4a61      	ldr	r2, [pc, #388]	; (800b1b4 <perfect_slalom+0x284>)
 800b030:	8813      	ldrh	r3, [r2, #0]
 800b032:	f36f 1345 	bfc	r3, #5, #1
 800b036:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b038:	4a5e      	ldr	r2, [pc, #376]	; (800b1b4 <perfect_slalom+0x284>)
 800b03a:	8813      	ldrh	r3, [r2, #0]
 800b03c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b040:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b042:	4a5c      	ldr	r2, [pc, #368]	; (800b1b4 <perfect_slalom+0x284>)
 800b044:	8813      	ldrh	r3, [r2, #0]
 800b046:	f36f 238a 	bfc	r3, #10, #1
 800b04a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b04c:	4b5a      	ldr	r3, [pc, #360]	; (800b1b8 <perfect_slalom+0x288>)
 800b04e:	2202      	movs	r2, #2
 800b050:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b052:	4b5a      	ldr	r3, [pc, #360]	; (800b1bc <perfect_slalom+0x28c>)
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b058:	4b59      	ldr	r3, [pc, #356]	; (800b1c0 <perfect_slalom+0x290>)
 800b05a:	2202      	movs	r2, #2
 800b05c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b05e:	4b59      	ldr	r3, [pc, #356]	; (800b1c4 <perfect_slalom+0x294>)
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
 800b064:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b066:	4b58      	ldr	r3, [pc, #352]	; (800b1c8 <perfect_slalom+0x298>)
 800b068:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b06c:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b06e:	4b57      	ldr	r3, [pc, #348]	; (800b1cc <perfect_slalom+0x29c>)
 800b070:	2207      	movs	r2, #7
 800b072:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b074:	4b56      	ldr	r3, [pc, #344]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b076:	2207      	movs	r2, #7
 800b078:	701a      	strb	r2, [r3, #0]

					get_base();
 800b07a:	f006 f9dd 	bl	8011438 <get_base>

					searchC();
 800b07e:	f003 fa23 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800b082:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b086:	f7f5 ffc9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b08a:	4b51      	ldr	r3, [pc, #324]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	4b4f      	ldr	r3, [pc, #316]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	4b4d      	ldr	r3, [pc, #308]	; (800b1cc <perfect_slalom+0x29c>)
 800b096:	701a      	strb	r2, [r3, #0]
					searchC();
 800b098:	f003 fa16 	bl	800e4c8 <searchC>

					goal_x = 7;
 800b09c:	4b4b      	ldr	r3, [pc, #300]	; (800b1cc <perfect_slalom+0x29c>)
 800b09e:	2207      	movs	r2, #7
 800b0a0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b0a2:	4b4b      	ldr	r3, [pc, #300]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b0a4:	2207      	movs	r2, #7
 800b0a6:	701a      	strb	r2, [r3, #0]
					break;
 800b0a8:	e15e      	b.n	800b368 <perfect_slalom+0x438>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800b0aa:	484a      	ldr	r0, [pc, #296]	; (800b1d4 <perfect_slalom+0x2a4>)
 800b0ac:	f007 f85e 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b0b0:	4a40      	ldr	r2, [pc, #256]	; (800b1b4 <perfect_slalom+0x284>)
 800b0b2:	8813      	ldrh	r3, [r2, #0]
 800b0b4:	f043 0320 	orr.w	r3, r3, #32
 800b0b8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b0ba:	4a3e      	ldr	r2, [pc, #248]	; (800b1b4 <perfect_slalom+0x284>)
 800b0bc:	8813      	ldrh	r3, [r2, #0]
 800b0be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0c2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b0c4:	4a3b      	ldr	r2, [pc, #236]	; (800b1b4 <perfect_slalom+0x284>)
 800b0c6:	8813      	ldrh	r3, [r2, #0]
 800b0c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0cc:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b0ce:	4b3a      	ldr	r3, [pc, #232]	; (800b1b8 <perfect_slalom+0x288>)
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b0d4:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <perfect_slalom+0x28c>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b0da:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <perfect_slalom+0x290>)
 800b0dc:	2202      	movs	r2, #2
 800b0de:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b0e0:	4b38      	ldr	r3, [pc, #224]	; (800b1c4 <perfect_slalom+0x294>)
 800b0e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b0e8:	4b37      	ldr	r3, [pc, #220]	; (800b1c8 <perfect_slalom+0x298>)
 800b0ea:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b0ee:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b0f0:	4b36      	ldr	r3, [pc, #216]	; (800b1cc <perfect_slalom+0x29c>)
 800b0f2:	2207      	movs	r2, #7
 800b0f4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b0f6:	4b36      	ldr	r3, [pc, #216]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b0f8:	2207      	movs	r2, #7
 800b0fa:	701a      	strb	r2, [r3, #0]

					get_base();
 800b0fc:	f006 f99c 	bl	8011438 <get_base>

					searchD();
 800b100:	f003 fcc6 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800b104:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b108:	f7f5 ff88 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b10c:	4b30      	ldr	r3, [pc, #192]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	4b2f      	ldr	r3, [pc, #188]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	4b2d      	ldr	r3, [pc, #180]	; (800b1cc <perfect_slalom+0x29c>)
 800b118:	701a      	strb	r2, [r3, #0]
					searchD();
 800b11a:	f003 fcb9 	bl	800ea90 <searchD>

					goal_x = 7;
 800b11e:	4b2b      	ldr	r3, [pc, #172]	; (800b1cc <perfect_slalom+0x29c>)
 800b120:	2207      	movs	r2, #7
 800b122:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b124:	4b2a      	ldr	r3, [pc, #168]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b126:	2207      	movs	r2, #7
 800b128:	701a      	strb	r2, [r3, #0]
					break;
 800b12a:	e11d      	b.n	800b368 <perfect_slalom+0x438>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800b12c:	482a      	ldr	r0, [pc, #168]	; (800b1d8 <perfect_slalom+0x2a8>)
 800b12e:	f007 f81d 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b132:	4a20      	ldr	r2, [pc, #128]	; (800b1b4 <perfect_slalom+0x284>)
 800b134:	8813      	ldrh	r3, [r2, #0]
 800b136:	f043 0320 	orr.w	r3, r3, #32
 800b13a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b13c:	4a1d      	ldr	r2, [pc, #116]	; (800b1b4 <perfect_slalom+0x284>)
 800b13e:	8813      	ldrh	r3, [r2, #0]
 800b140:	f36f 2349 	bfc	r3, #9, #1
 800b144:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b146:	4a1b      	ldr	r2, [pc, #108]	; (800b1b4 <perfect_slalom+0x284>)
 800b148:	8813      	ldrh	r3, [r2, #0]
 800b14a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b14e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b150:	4b19      	ldr	r3, [pc, #100]	; (800b1b8 <perfect_slalom+0x288>)
 800b152:	2203      	movs	r2, #3
 800b154:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b156:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <perfect_slalom+0x28c>)
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b15c:	4b18      	ldr	r3, [pc, #96]	; (800b1c0 <perfect_slalom+0x290>)
 800b15e:	2202      	movs	r2, #2
 800b160:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800b162:	4b1a      	ldr	r3, [pc, #104]	; (800b1cc <perfect_slalom+0x29c>)
 800b164:	2207      	movs	r2, #7
 800b166:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b168:	4b19      	ldr	r3, [pc, #100]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b16a:	2207      	movs	r2, #7
 800b16c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b16e:	f006 f963 	bl	8011438 <get_base>

					searchC();
 800b172:	f003 f9a9 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800b176:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b17a:	f7f5 ff4f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b17e:	4b14      	ldr	r3, [pc, #80]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	4b12      	ldr	r3, [pc, #72]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b186:	781a      	ldrb	r2, [r3, #0]
 800b188:	4b10      	ldr	r3, [pc, #64]	; (800b1cc <perfect_slalom+0x29c>)
 800b18a:	701a      	strb	r2, [r3, #0]
					searchC();
 800b18c:	f003 f99c 	bl	800e4c8 <searchC>
					goal_x = 7;
 800b190:	4b0e      	ldr	r3, [pc, #56]	; (800b1cc <perfect_slalom+0x29c>)
 800b192:	2207      	movs	r2, #7
 800b194:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b196:	4b0e      	ldr	r3, [pc, #56]	; (800b1d0 <perfect_slalom+0x2a0>)
 800b198:	2207      	movs	r2, #7
 800b19a:	701a      	strb	r2, [r3, #0]
					break;
 800b19c:	e0e4      	b.n	800b368 <perfect_slalom+0x438>
 800b19e:	bf00      	nop
 800b1a0:	08013638 	.word	0x08013638
 800b1a4:	20000aec 	.word	0x20000aec
 800b1a8:	080132c0 	.word	0x080132c0
 800b1ac:	40020000 	.word	0x40020000
 800b1b0:	08013578 	.word	0x08013578
 800b1b4:	20000f68 	.word	0x20000f68
 800b1b8:	20000456 	.word	0x20000456
 800b1bc:	200015c8 	.word	0x200015c8
 800b1c0:	20000bb1 	.word	0x20000bb1
 800b1c4:	20000454 	.word	0x20000454
 800b1c8:	20000f7c 	.word	0x20000f7c
 800b1cc:	20000bb0 	.word	0x20000bb0
 800b1d0:	20000b4c 	.word	0x20000b4c
 800b1d4:	08013584 	.word	0x08013584
 800b1d8:	080135d0 	.word	0x080135d0

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b1dc:	4863      	ldr	r0, [pc, #396]	; (800b36c <perfect_slalom+0x43c>)
 800b1de:	f006 ffc5 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b1e2:	4a63      	ldr	r2, [pc, #396]	; (800b370 <perfect_slalom+0x440>)
 800b1e4:	8813      	ldrh	r3, [r2, #0]
 800b1e6:	f043 0320 	orr.w	r3, r3, #32
 800b1ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b1ec:	4a60      	ldr	r2, [pc, #384]	; (800b370 <perfect_slalom+0x440>)
 800b1ee:	8813      	ldrh	r3, [r2, #0]
 800b1f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b1f6:	4a5e      	ldr	r2, [pc, #376]	; (800b370 <perfect_slalom+0x440>)
 800b1f8:	8813      	ldrh	r3, [r2, #0]
 800b1fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1fe:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b200:	4b5c      	ldr	r3, [pc, #368]	; (800b374 <perfect_slalom+0x444>)
 800b202:	2203      	movs	r2, #3
 800b204:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b206:	4b5c      	ldr	r3, [pc, #368]	; (800b378 <perfect_slalom+0x448>)
 800b208:	2200      	movs	r2, #0
 800b20a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b20c:	4b5b      	ldr	r3, [pc, #364]	; (800b37c <perfect_slalom+0x44c>)
 800b20e:	2202      	movs	r2, #2
 800b210:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b212:	4b5b      	ldr	r3, [pc, #364]	; (800b380 <perfect_slalom+0x450>)
 800b214:	f241 3288 	movw	r2, #5000	; 0x1388
 800b218:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b21a:	4b5a      	ldr	r3, [pc, #360]	; (800b384 <perfect_slalom+0x454>)
 800b21c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b220:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b222:	4b59      	ldr	r3, [pc, #356]	; (800b388 <perfect_slalom+0x458>)
 800b224:	2207      	movs	r2, #7
 800b226:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b228:	4b58      	ldr	r3, [pc, #352]	; (800b38c <perfect_slalom+0x45c>)
 800b22a:	2207      	movs	r2, #7
 800b22c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b22e:	f006 f903 	bl	8011438 <get_base>

					searchD();
 800b232:	f003 fc2d 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800b236:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b23a:	f7f5 feef 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b23e:	4b53      	ldr	r3, [pc, #332]	; (800b38c <perfect_slalom+0x45c>)
 800b240:	2200      	movs	r2, #0
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	4b51      	ldr	r3, [pc, #324]	; (800b38c <perfect_slalom+0x45c>)
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	4b4f      	ldr	r3, [pc, #316]	; (800b388 <perfect_slalom+0x458>)
 800b24a:	701a      	strb	r2, [r3, #0]
					searchD();
 800b24c:	f003 fc20 	bl	800ea90 <searchD>

					goal_x = 7;
 800b250:	4b4d      	ldr	r3, [pc, #308]	; (800b388 <perfect_slalom+0x458>)
 800b252:	2207      	movs	r2, #7
 800b254:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b256:	4b4d      	ldr	r3, [pc, #308]	; (800b38c <perfect_slalom+0x45c>)
 800b258:	2207      	movs	r2, #7
 800b25a:	701a      	strb	r2, [r3, #0]
					break;
 800b25c:	e084      	b.n	800b368 <perfect_slalom+0x438>

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b25e:	4843      	ldr	r0, [pc, #268]	; (800b36c <perfect_slalom+0x43c>)
 800b260:	f006 ff84 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b264:	4a42      	ldr	r2, [pc, #264]	; (800b370 <perfect_slalom+0x440>)
 800b266:	8813      	ldrh	r3, [r2, #0]
 800b268:	f043 0320 	orr.w	r3, r3, #32
 800b26c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b26e:	4a40      	ldr	r2, [pc, #256]	; (800b370 <perfect_slalom+0x440>)
 800b270:	8813      	ldrh	r3, [r2, #0]
 800b272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b276:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b278:	4a3d      	ldr	r2, [pc, #244]	; (800b370 <perfect_slalom+0x440>)
 800b27a:	8813      	ldrh	r3, [r2, #0]
 800b27c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b280:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b282:	4b3c      	ldr	r3, [pc, #240]	; (800b374 <perfect_slalom+0x444>)
 800b284:	2203      	movs	r2, #3
 800b286:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b288:	4b3b      	ldr	r3, [pc, #236]	; (800b378 <perfect_slalom+0x448>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b28e:	4b3b      	ldr	r3, [pc, #236]	; (800b37c <perfect_slalom+0x44c>)
 800b290:	2202      	movs	r2, #2
 800b292:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b294:	4b3a      	ldr	r3, [pc, #232]	; (800b380 <perfect_slalom+0x450>)
 800b296:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b29c:	4b39      	ldr	r3, [pc, #228]	; (800b384 <perfect_slalom+0x454>)
 800b29e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b2a2:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b2a4:	4b38      	ldr	r3, [pc, #224]	; (800b388 <perfect_slalom+0x458>)
 800b2a6:	2207      	movs	r2, #7
 800b2a8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b2aa:	4b38      	ldr	r3, [pc, #224]	; (800b38c <perfect_slalom+0x45c>)
 800b2ac:	2207      	movs	r2, #7
 800b2ae:	701a      	strb	r2, [r3, #0]

					get_base();
 800b2b0:	f006 f8c2 	bl	8011438 <get_base>

					searchD();
 800b2b4:	f003 fbec 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800b2b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2bc:	f7f5 feae 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b2c0:	4b32      	ldr	r3, [pc, #200]	; (800b38c <perfect_slalom+0x45c>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	4b31      	ldr	r3, [pc, #196]	; (800b38c <perfect_slalom+0x45c>)
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	4b2f      	ldr	r3, [pc, #188]	; (800b388 <perfect_slalom+0x458>)
 800b2cc:	701a      	strb	r2, [r3, #0]
					searchD();
 800b2ce:	f003 fbdf 	bl	800ea90 <searchD>

					goal_x = 7;
 800b2d2:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <perfect_slalom+0x458>)
 800b2d4:	2207      	movs	r2, #7
 800b2d6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b2d8:	4b2c      	ldr	r3, [pc, #176]	; (800b38c <perfect_slalom+0x45c>)
 800b2da:	2207      	movs	r2, #7
 800b2dc:	701a      	strb	r2, [r3, #0]
					break;
 800b2de:	e043      	b.n	800b368 <perfect_slalom+0x438>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b2e0:	4822      	ldr	r0, [pc, #136]	; (800b36c <perfect_slalom+0x43c>)
 800b2e2:	f006 ff43 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b2e6:	4a22      	ldr	r2, [pc, #136]	; (800b370 <perfect_slalom+0x440>)
 800b2e8:	8813      	ldrh	r3, [r2, #0]
 800b2ea:	f043 0320 	orr.w	r3, r3, #32
 800b2ee:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b2f0:	4a1f      	ldr	r2, [pc, #124]	; (800b370 <perfect_slalom+0x440>)
 800b2f2:	8813      	ldrh	r3, [r2, #0]
 800b2f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2f8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b2fa:	4a1d      	ldr	r2, [pc, #116]	; (800b370 <perfect_slalom+0x440>)
 800b2fc:	8813      	ldrh	r3, [r2, #0]
 800b2fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b302:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b304:	4b1b      	ldr	r3, [pc, #108]	; (800b374 <perfect_slalom+0x444>)
 800b306:	2203      	movs	r2, #3
 800b308:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b30a:	4b1b      	ldr	r3, [pc, #108]	; (800b378 <perfect_slalom+0x448>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b310:	4b1a      	ldr	r3, [pc, #104]	; (800b37c <perfect_slalom+0x44c>)
 800b312:	2202      	movs	r2, #2
 800b314:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b316:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <perfect_slalom+0x450>)
 800b318:	f242 7210 	movw	r2, #10000	; 0x2710
 800b31c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b31e:	4b19      	ldr	r3, [pc, #100]	; (800b384 <perfect_slalom+0x454>)
 800b320:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b324:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b326:	4b18      	ldr	r3, [pc, #96]	; (800b388 <perfect_slalom+0x458>)
 800b328:	2207      	movs	r2, #7
 800b32a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b32c:	4b17      	ldr	r3, [pc, #92]	; (800b38c <perfect_slalom+0x45c>)
 800b32e:	2207      	movs	r2, #7
 800b330:	701a      	strb	r2, [r3, #0]

					get_base();
 800b332:	f006 f881 	bl	8011438 <get_base>

					searchD();
 800b336:	f003 fbab 	bl	800ea90 <searchD>
					HAL_Delay(2000);
 800b33a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b33e:	f7f5 fe6d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <perfect_slalom+0x45c>)
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
 800b348:	4b10      	ldr	r3, [pc, #64]	; (800b38c <perfect_slalom+0x45c>)
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <perfect_slalom+0x458>)
 800b34e:	701a      	strb	r2, [r3, #0]
					searchD();
 800b350:	f003 fb9e 	bl	800ea90 <searchD>

					goal_x = 7;
 800b354:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <perfect_slalom+0x458>)
 800b356:	2207      	movs	r2, #7
 800b358:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b35a:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <perfect_slalom+0x45c>)
 800b35c:	2207      	movs	r2, #7
 800b35e:	701a      	strb	r2, [r3, #0]
					break;
 800b360:	e002      	b.n	800b368 <perfect_slalom+0x438>

				case 7:
					perfect_pass();
 800b362:	f000 f815 	bl	800b390 <perfect_pass>
					break;
 800b366:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b368:	e5eb      	b.n	800af42 <perfect_slalom+0x12>
 800b36a:	bf00      	nop
 800b36c:	080135d0 	.word	0x080135d0
 800b370:	20000f68 	.word	0x20000f68
 800b374:	20000456 	.word	0x20000456
 800b378:	200015c8 	.word	0x200015c8
 800b37c:	20000bb1 	.word	0x20000bb1
 800b380:	20000454 	.word	0x20000454
 800b384:	20000f7c 	.word	0x20000f7c
 800b388:	20000bb0 	.word	0x20000bb0
 800b38c:	20000b4c 	.word	0x20000b4c

0800b390 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0

	int mode = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	489f      	ldr	r0, [pc, #636]	; (800b61c <perfect_pass+0x28c>)
 800b39e:	f006 fe71 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	b2d8      	uxtb	r0, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	b2d9      	uxtb	r1, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	f003 0304 	and.w	r3, r3, #4
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f006 f891 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 800b3c6:	4b96      	ldr	r3, [pc, #600]	; (800b620 <perfect_pass+0x290>)
 800b3c8:	edd3 7a00 	vldr	s15, [r3]
 800b3cc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b3d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d8:	db0f      	blt.n	800b3fa <perfect_pass+0x6a>
			  mode++;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b3e0:	4b8f      	ldr	r3, [pc, #572]	; (800b620 <perfect_pass+0x290>)
 800b3e2:	f04f 0200 	mov.w	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b07      	cmp	r3, #7
 800b3ec:	dd01      	ble.n	800b3f2 <perfect_pass+0x62>
				  mode = 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b3f2:	6879      	ldr	r1, [r7, #4]
 800b3f4:	488b      	ldr	r0, [pc, #556]	; (800b624 <perfect_pass+0x294>)
 800b3f6:	f006 fe45 	bl	8012084 <iprintf>
		  }
		  if(dist_r <= -20){
 800b3fa:	4b89      	ldr	r3, [pc, #548]	; (800b620 <perfect_pass+0x290>)
 800b3fc:	edd3 7a00 	vldr	s15, [r3]
 800b400:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b404:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40c:	d80f      	bhi.n	800b42e <perfect_pass+0x9e>
			  mode--;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3b01      	subs	r3, #1
 800b412:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b414:	4b82      	ldr	r3, [pc, #520]	; (800b620 <perfect_pass+0x290>)
 800b416:	f04f 0200 	mov.w	r2, #0
 800b41a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	da01      	bge.n	800b426 <perfect_pass+0x96>
				  mode = 7;
 800b422:	2307      	movs	r3, #7
 800b424:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	487e      	ldr	r0, [pc, #504]	; (800b624 <perfect_pass+0x294>)
 800b42a:	f006 fe2b 	bl	8012084 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b42e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b432:	487d      	ldr	r0, [pc, #500]	; (800b628 <perfect_pass+0x298>)
 800b434:	f7f6 ff4e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1b1      	bne.n	800b3a2 <perfect_pass+0x12>
			  HAL_Delay(50);
 800b43e:	2032      	movs	r0, #50	; 0x32
 800b440:	f7f5 fdec 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b444:	bf00      	nop
 800b446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b44a:	4877      	ldr	r0, [pc, #476]	; (800b628 <perfect_pass+0x298>)
 800b44c:	f7f6 ff42 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0f7      	beq.n	800b446 <perfect_pass+0xb6>
			  drive_ready();
 800b456:	f7f9 fc13 	bl	8004c80 <drive_ready>

			  switch(mode){
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b07      	cmp	r3, #7
 800b45e:	d8a0      	bhi.n	800b3a2 <perfect_pass+0x12>
 800b460:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <perfect_pass+0xd8>)
 800b462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b466:	bf00      	nop
 800b468:	0800b3a3 	.word	0x0800b3a3
 800b46c:	0800b489 	.word	0x0800b489
 800b470:	0800b50d 	.word	0x0800b50d
 800b474:	0800b595 	.word	0x0800b595
 800b478:	0800b65d 	.word	0x0800b65d
 800b47c:	0800b6e5 	.word	0x0800b6e5
 800b480:	0800b799 	.word	0x0800b799
 800b484:	0800ba85 	.word	0x0800ba85
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b488:	4868      	ldr	r0, [pc, #416]	; (800b62c <perfect_pass+0x29c>)
 800b48a:	f006 fe6f 	bl	801216c <puts>
					MF.FLAG.SCND = 0;
 800b48e:	4a68      	ldr	r2, [pc, #416]	; (800b630 <perfect_pass+0x2a0>)
 800b490:	8813      	ldrh	r3, [r2, #0]
 800b492:	f36f 1345 	bfc	r3, #5, #1
 800b496:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b498:	4a65      	ldr	r2, [pc, #404]	; (800b630 <perfect_pass+0x2a0>)
 800b49a:	8813      	ldrh	r3, [r2, #0]
 800b49c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b4a2:	4a63      	ldr	r2, [pc, #396]	; (800b630 <perfect_pass+0x2a0>)
 800b4a4:	8813      	ldrh	r3, [r2, #0]
 800b4a6:	f36f 238a 	bfc	r3, #10, #1
 800b4aa:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b4ac:	4b61      	ldr	r3, [pc, #388]	; (800b634 <perfect_pass+0x2a4>)
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b4b2:	4b61      	ldr	r3, [pc, #388]	; (800b638 <perfect_pass+0x2a8>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b4b8:	4b60      	ldr	r3, [pc, #384]	; (800b63c <perfect_pass+0x2ac>)
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b4be:	4b60      	ldr	r3, [pc, #384]	; (800b640 <perfect_pass+0x2b0>)
 800b4c0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b4c4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b4c6:	4b5f      	ldr	r3, [pc, #380]	; (800b644 <perfect_pass+0x2b4>)
 800b4c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4cc:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b4ce:	4b5e      	ldr	r3, [pc, #376]	; (800b648 <perfect_pass+0x2b8>)
 800b4d0:	2207      	movs	r2, #7
 800b4d2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b4d4:	4b5d      	ldr	r3, [pc, #372]	; (800b64c <perfect_pass+0x2bc>)
 800b4d6:	2207      	movs	r2, #7
 800b4d8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b4da:	f005 ffad 	bl	8011438 <get_base>

					searchC();
 800b4de:	f002 fff3 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800b4e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4e6:	f7f5 fd99 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b4ea:	4b58      	ldr	r3, [pc, #352]	; (800b64c <perfect_pass+0x2bc>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	4b56      	ldr	r3, [pc, #344]	; (800b64c <perfect_pass+0x2bc>)
 800b4f2:	781a      	ldrb	r2, [r3, #0]
 800b4f4:	4b54      	ldr	r3, [pc, #336]	; (800b648 <perfect_pass+0x2b8>)
 800b4f6:	701a      	strb	r2, [r3, #0]
					searchC();
 800b4f8:	f002 ffe6 	bl	800e4c8 <searchC>

					goal_x = 7;
 800b4fc:	4b52      	ldr	r3, [pc, #328]	; (800b648 <perfect_pass+0x2b8>)
 800b4fe:	2207      	movs	r2, #7
 800b500:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b502:	4b52      	ldr	r3, [pc, #328]	; (800b64c <perfect_pass+0x2bc>)
 800b504:	2207      	movs	r2, #7
 800b506:	701a      	strb	r2, [r3, #0]
					break;
 800b508:	f000 bc15 	b.w	800bd36 <perfect_pass+0x9a6>

				case 2:
					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800b50c:	4850      	ldr	r0, [pc, #320]	; (800b650 <perfect_pass+0x2c0>)
 800b50e:	f006 fe2d 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b512:	4a47      	ldr	r2, [pc, #284]	; (800b630 <perfect_pass+0x2a0>)
 800b514:	8813      	ldrh	r3, [r2, #0]
 800b516:	f043 0320 	orr.w	r3, r3, #32
 800b51a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b51c:	4a44      	ldr	r2, [pc, #272]	; (800b630 <perfect_pass+0x2a0>)
 800b51e:	8813      	ldrh	r3, [r2, #0]
 800b520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b524:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b526:	4a42      	ldr	r2, [pc, #264]	; (800b630 <perfect_pass+0x2a0>)
 800b528:	8813      	ldrh	r3, [r2, #0]
 800b52a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b52e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b530:	4b40      	ldr	r3, [pc, #256]	; (800b634 <perfect_pass+0x2a4>)
 800b532:	2202      	movs	r2, #2
 800b534:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b536:	4b40      	ldr	r3, [pc, #256]	; (800b638 <perfect_pass+0x2a8>)
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b53c:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <perfect_pass+0x2ac>)
 800b53e:	2202      	movs	r2, #2
 800b540:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b542:	4b3f      	ldr	r3, [pc, #252]	; (800b640 <perfect_pass+0x2b0>)
 800b544:	f241 3288 	movw	r2, #5000	; 0x1388
 800b548:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b54a:	4b3e      	ldr	r3, [pc, #248]	; (800b644 <perfect_pass+0x2b4>)
 800b54c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b550:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b552:	4b40      	ldr	r3, [pc, #256]	; (800b654 <perfect_pass+0x2c4>)
 800b554:	2203      	movs	r2, #3
 800b556:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b558:	4b3b      	ldr	r3, [pc, #236]	; (800b648 <perfect_pass+0x2b8>)
 800b55a:	2207      	movs	r2, #7
 800b55c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b55e:	4b3b      	ldr	r3, [pc, #236]	; (800b64c <perfect_pass+0x2bc>)
 800b560:	2207      	movs	r2, #7
 800b562:	701a      	strb	r2, [r3, #0]

					get_base();
 800b564:	f005 ff68 	bl	8011438 <get_base>

					searchF3();
 800b568:	f003 fc28 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800b56c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b570:	f7f5 fd54 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b574:	4b35      	ldr	r3, [pc, #212]	; (800b64c <perfect_pass+0x2bc>)
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	4b34      	ldr	r3, [pc, #208]	; (800b64c <perfect_pass+0x2bc>)
 800b57c:	781a      	ldrb	r2, [r3, #0]
 800b57e:	4b32      	ldr	r3, [pc, #200]	; (800b648 <perfect_pass+0x2b8>)
 800b580:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b582:	f003 fc1b 	bl	800edbc <searchF3>

					goal_x = 7;
 800b586:	4b30      	ldr	r3, [pc, #192]	; (800b648 <perfect_pass+0x2b8>)
 800b588:	2207      	movs	r2, #7
 800b58a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b58c:	4b2f      	ldr	r3, [pc, #188]	; (800b64c <perfect_pass+0x2bc>)
 800b58e:	2207      	movs	r2, #7
 800b590:	701a      	strb	r2, [r3, #0]
					break;
 800b592:	e3d0      	b.n	800bd36 <perfect_pass+0x9a6>

				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b594:	4830      	ldr	r0, [pc, #192]	; (800b658 <perfect_pass+0x2c8>)
 800b596:	f006 fde9 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b59a:	4a25      	ldr	r2, [pc, #148]	; (800b630 <perfect_pass+0x2a0>)
 800b59c:	8813      	ldrh	r3, [r2, #0]
 800b59e:	f043 0320 	orr.w	r3, r3, #32
 800b5a2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b5a4:	4a22      	ldr	r2, [pc, #136]	; (800b630 <perfect_pass+0x2a0>)
 800b5a6:	8813      	ldrh	r3, [r2, #0]
 800b5a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5ac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b5ae:	4a20      	ldr	r2, [pc, #128]	; (800b630 <perfect_pass+0x2a0>)
 800b5b0:	8813      	ldrh	r3, [r2, #0]
 800b5b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5b6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b5b8:	4b1e      	ldr	r3, [pc, #120]	; (800b634 <perfect_pass+0x2a4>)
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b5be:	4b1e      	ldr	r3, [pc, #120]	; (800b638 <perfect_pass+0x2a8>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b5c4:	4b1d      	ldr	r3, [pc, #116]	; (800b63c <perfect_pass+0x2ac>)
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	; (800b640 <perfect_pass+0x2b0>)
 800b5cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <perfect_pass+0x2b4>)
 800b5d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5d8:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b5da:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <perfect_pass+0x2c4>)
 800b5dc:	2204      	movs	r2, #4
 800b5de:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b5e0:	4b19      	ldr	r3, [pc, #100]	; (800b648 <perfect_pass+0x2b8>)
 800b5e2:	2207      	movs	r2, #7
 800b5e4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b5e6:	4b19      	ldr	r3, [pc, #100]	; (800b64c <perfect_pass+0x2bc>)
 800b5e8:	2207      	movs	r2, #7
 800b5ea:	701a      	strb	r2, [r3, #0]

					get_base();
 800b5ec:	f005 ff24 	bl	8011438 <get_base>

					searchF4();
 800b5f0:	f003 fcba 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800b5f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5f8:	f7f5 fd10 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b5fc:	4b13      	ldr	r3, [pc, #76]	; (800b64c <perfect_pass+0x2bc>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <perfect_pass+0x2bc>)
 800b604:	781a      	ldrb	r2, [r3, #0]
 800b606:	4b10      	ldr	r3, [pc, #64]	; (800b648 <perfect_pass+0x2b8>)
 800b608:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b60a:	f003 fcad 	bl	800ef68 <searchF4>

					goal_x = 7;
 800b60e:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <perfect_pass+0x2b8>)
 800b610:	2207      	movs	r2, #7
 800b612:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b614:	4b0d      	ldr	r3, [pc, #52]	; (800b64c <perfect_pass+0x2bc>)
 800b616:	2207      	movs	r2, #7
 800b618:	701a      	strb	r2, [r3, #0]
					break;
 800b61a:	e38c      	b.n	800bd36 <perfect_pass+0x9a6>
 800b61c:	08013654 	.word	0x08013654
 800b620:	20000aec 	.word	0x20000aec
 800b624:	080132c0 	.word	0x080132c0
 800b628:	40020000 	.word	0x40020000
 800b62c:	08013578 	.word	0x08013578
 800b630:	20000f68 	.word	0x20000f68
 800b634:	20000456 	.word	0x20000456
 800b638:	200015c8 	.word	0x200015c8
 800b63c:	20000bb1 	.word	0x20000bb1
 800b640:	20000454 	.word	0x20000454
 800b644:	20000f7c 	.word	0x20000f7c
 800b648:	20000bb0 	.word	0x20000bb0
 800b64c:	20000b4c 	.word	0x20000b4c
 800b650:	080134b4 	.word	0x080134b4
 800b654:	20000457 	.word	0x20000457
 800b658:	080134d4 	.word	0x080134d4

				case 4:
					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3-2.\n");
 800b65c:	4843      	ldr	r0, [pc, #268]	; (800b76c <perfect_pass+0x3dc>)
 800b65e:	f006 fd85 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b662:	4a43      	ldr	r2, [pc, #268]	; (800b770 <perfect_pass+0x3e0>)
 800b664:	8813      	ldrh	r3, [r2, #0]
 800b666:	f043 0320 	orr.w	r3, r3, #32
 800b66a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b66c:	4a40      	ldr	r2, [pc, #256]	; (800b770 <perfect_pass+0x3e0>)
 800b66e:	8813      	ldrh	r3, [r2, #0]
 800b670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b674:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b676:	4a3e      	ldr	r2, [pc, #248]	; (800b770 <perfect_pass+0x3e0>)
 800b678:	8813      	ldrh	r3, [r2, #0]
 800b67a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b67e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b680:	4b3c      	ldr	r3, [pc, #240]	; (800b774 <perfect_pass+0x3e4>)
 800b682:	2203      	movs	r2, #3
 800b684:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b686:	4b3c      	ldr	r3, [pc, #240]	; (800b778 <perfect_pass+0x3e8>)
 800b688:	2202      	movs	r2, #2
 800b68a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b68c:	4b3b      	ldr	r3, [pc, #236]	; (800b77c <perfect_pass+0x3ec>)
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b692:	4b3b      	ldr	r3, [pc, #236]	; (800b780 <perfect_pass+0x3f0>)
 800b694:	f241 3288 	movw	r2, #5000	; 0x1388
 800b698:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b69a:	4b3a      	ldr	r3, [pc, #232]	; (800b784 <perfect_pass+0x3f4>)
 800b69c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b6a0:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b6a2:	4b39      	ldr	r3, [pc, #228]	; (800b788 <perfect_pass+0x3f8>)
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b6a8:	4b38      	ldr	r3, [pc, #224]	; (800b78c <perfect_pass+0x3fc>)
 800b6aa:	2207      	movs	r2, #7
 800b6ac:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b6ae:	4b38      	ldr	r3, [pc, #224]	; (800b790 <perfect_pass+0x400>)
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6b4:	f005 fec0 	bl	8011438 <get_base>

					searchF3();
 800b6b8:	f003 fb80 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800b6bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6c0:	f7f5 fcac 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6c4:	4b32      	ldr	r3, [pc, #200]	; (800b790 <perfect_pass+0x400>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	4b31      	ldr	r3, [pc, #196]	; (800b790 <perfect_pass+0x400>)
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <perfect_pass+0x3fc>)
 800b6d0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b6d2:	f003 fb73 	bl	800edbc <searchF3>

					goal_x = 7;
 800b6d6:	4b2d      	ldr	r3, [pc, #180]	; (800b78c <perfect_pass+0x3fc>)
 800b6d8:	2207      	movs	r2, #7
 800b6da:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b6dc:	4b2c      	ldr	r3, [pc, #176]	; (800b790 <perfect_pass+0x400>)
 800b6de:	2207      	movs	r2, #7
 800b6e0:	701a      	strb	r2, [r3, #0]
					break;
 800b6e2:	e328      	b.n	800bd36 <perfect_pass+0x9a6>

				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800b6e4:	482b      	ldr	r0, [pc, #172]	; (800b794 <perfect_pass+0x404>)
 800b6e6:	f006 fd41 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b6ea:	4a21      	ldr	r2, [pc, #132]	; (800b770 <perfect_pass+0x3e0>)
 800b6ec:	8813      	ldrh	r3, [r2, #0]
 800b6ee:	f043 0320 	orr.w	r3, r3, #32
 800b6f2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b6f4:	4a1e      	ldr	r2, [pc, #120]	; (800b770 <perfect_pass+0x3e0>)
 800b6f6:	8813      	ldrh	r3, [r2, #0]
 800b6f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6fc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b6fe:	4a1c      	ldr	r2, [pc, #112]	; (800b770 <perfect_pass+0x3e0>)
 800b700:	8813      	ldrh	r3, [r2, #0]
 800b702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b706:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b708:	4b1a      	ldr	r3, [pc, #104]	; (800b774 <perfect_pass+0x3e4>)
 800b70a:	2203      	movs	r2, #3
 800b70c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b70e:	4b1b      	ldr	r3, [pc, #108]	; (800b77c <perfect_pass+0x3ec>)
 800b710:	2200      	movs	r2, #0
 800b712:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b714:	4b18      	ldr	r3, [pc, #96]	; (800b778 <perfect_pass+0x3e8>)
 800b716:	2202      	movs	r2, #2
 800b718:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b71a:	4b19      	ldr	r3, [pc, #100]	; (800b780 <perfect_pass+0x3f0>)
 800b71c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b720:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b722:	4b18      	ldr	r3, [pc, #96]	; (800b784 <perfect_pass+0x3f4>)
 800b724:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b728:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b72a:	4b17      	ldr	r3, [pc, #92]	; (800b788 <perfect_pass+0x3f8>)
 800b72c:	2204      	movs	r2, #4
 800b72e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b730:	4b16      	ldr	r3, [pc, #88]	; (800b78c <perfect_pass+0x3fc>)
 800b732:	2207      	movs	r2, #7
 800b734:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b736:	4b16      	ldr	r3, [pc, #88]	; (800b790 <perfect_pass+0x400>)
 800b738:	2207      	movs	r2, #7
 800b73a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b73c:	f005 fe7c 	bl	8011438 <get_base>

					searchF4();
 800b740:	f003 fc12 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800b744:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b748:	f7f5 fc68 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <perfect_pass+0x400>)
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <perfect_pass+0x400>)
 800b754:	781a      	ldrb	r2, [r3, #0]
 800b756:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <perfect_pass+0x3fc>)
 800b758:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b75a:	f003 fc05 	bl	800ef68 <searchF4>

					goal_x = 7;
 800b75e:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <perfect_pass+0x3fc>)
 800b760:	2207      	movs	r2, #7
 800b762:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b764:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <perfect_pass+0x400>)
 800b766:	2207      	movs	r2, #7
 800b768:	701a      	strb	r2, [r3, #0]
					break;
 800b76a:	e2e4      	b.n	800bd36 <perfect_pass+0x9a6>
 800b76c:	080134c4 	.word	0x080134c4
 800b770:	20000f68 	.word	0x20000f68
 800b774:	20000456 	.word	0x20000456
 800b778:	20000bb1 	.word	0x20000bb1
 800b77c:	200015c8 	.word	0x200015c8
 800b780:	20000454 	.word	0x20000454
 800b784:	20000f7c 	.word	0x20000f7c
 800b788:	20000457 	.word	0x20000457
 800b78c:	20000bb0 	.word	0x20000bb0
 800b790:	20000b4c 	.word	0x20000b4c
 800b794:	080134d4 	.word	0x080134d4

				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b798:	48ac      	ldr	r0, [pc, #688]	; (800ba4c <perfect_pass+0x6bc>)
 800b79a:	f006 fce7 	bl	801216c <puts>
					MF.FLAG.SCND = 0;
 800b79e:	4aac      	ldr	r2, [pc, #688]	; (800ba50 <perfect_pass+0x6c0>)
 800b7a0:	8813      	ldrh	r3, [r2, #0]
 800b7a2:	f36f 1345 	bfc	r3, #5, #1
 800b7a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b7a8:	4aa9      	ldr	r2, [pc, #676]	; (800ba50 <perfect_pass+0x6c0>)
 800b7aa:	8813      	ldrh	r3, [r2, #0]
 800b7ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b7b2:	4aa7      	ldr	r2, [pc, #668]	; (800ba50 <perfect_pass+0x6c0>)
 800b7b4:	8813      	ldrh	r3, [r2, #0]
 800b7b6:	f36f 238a 	bfc	r3, #10, #1
 800b7ba:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b7bc:	4ba5      	ldr	r3, [pc, #660]	; (800ba54 <perfect_pass+0x6c4>)
 800b7be:	2202      	movs	r2, #2
 800b7c0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b7c2:	4ba5      	ldr	r3, [pc, #660]	; (800ba58 <perfect_pass+0x6c8>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b7c8:	4ba4      	ldr	r3, [pc, #656]	; (800ba5c <perfect_pass+0x6cc>)
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b7ce:	4ba4      	ldr	r3, [pc, #656]	; (800ba60 <perfect_pass+0x6d0>)
 800b7d0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b7d4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b7d6:	4ba3      	ldr	r3, [pc, #652]	; (800ba64 <perfect_pass+0x6d4>)
 800b7d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7dc:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b7de:	4ba2      	ldr	r3, [pc, #648]	; (800ba68 <perfect_pass+0x6d8>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b7e4:	4ba1      	ldr	r3, [pc, #644]	; (800ba6c <perfect_pass+0x6dc>)
 800b7e6:	2204      	movs	r2, #4
 800b7e8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b7ea:	f005 fe25 	bl	8011438 <get_base>

					searchC();
 800b7ee:	f002 fe6b 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800b7f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b7f6:	f7f5 fc11 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b7fa:	4b9c      	ldr	r3, [pc, #624]	; (800ba6c <perfect_pass+0x6dc>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	4b9a      	ldr	r3, [pc, #616]	; (800ba6c <perfect_pass+0x6dc>)
 800b802:	781a      	ldrb	r2, [r3, #0]
 800b804:	4b98      	ldr	r3, [pc, #608]	; (800ba68 <perfect_pass+0x6d8>)
 800b806:	701a      	strb	r2, [r3, #0]
					searchC();
 800b808:	f002 fe5e 	bl	800e4c8 <searchC>

					degree_z = target_degree_z;
 800b80c:	4b98      	ldr	r3, [pc, #608]	; (800ba70 <perfect_pass+0x6e0>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a98      	ldr	r2, [pc, #608]	; (800ba74 <perfect_pass+0x6e4>)
 800b812:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b814:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b818:	f7f5 fc00 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800b81c:	4896      	ldr	r0, [pc, #600]	; (800ba78 <perfect_pass+0x6e8>)
 800b81e:	f006 fca5 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b822:	4a8b      	ldr	r2, [pc, #556]	; (800ba50 <perfect_pass+0x6c0>)
 800b824:	8813      	ldrh	r3, [r2, #0]
 800b826:	f043 0320 	orr.w	r3, r3, #32
 800b82a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b82c:	4a88      	ldr	r2, [pc, #544]	; (800ba50 <perfect_pass+0x6c0>)
 800b82e:	8813      	ldrh	r3, [r2, #0]
 800b830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b834:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b836:	4a86      	ldr	r2, [pc, #536]	; (800ba50 <perfect_pass+0x6c0>)
 800b838:	8813      	ldrh	r3, [r2, #0]
 800b83a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b83e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b840:	4b84      	ldr	r3, [pc, #528]	; (800ba54 <perfect_pass+0x6c4>)
 800b842:	2202      	movs	r2, #2
 800b844:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b846:	4b84      	ldr	r3, [pc, #528]	; (800ba58 <perfect_pass+0x6c8>)
 800b848:	2200      	movs	r2, #0
 800b84a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b84c:	4b83      	ldr	r3, [pc, #524]	; (800ba5c <perfect_pass+0x6cc>)
 800b84e:	2202      	movs	r2, #2
 800b850:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b852:	4b83      	ldr	r3, [pc, #524]	; (800ba60 <perfect_pass+0x6d0>)
 800b854:	f241 3288 	movw	r2, #5000	; 0x1388
 800b858:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b85a:	4b82      	ldr	r3, [pc, #520]	; (800ba64 <perfect_pass+0x6d4>)
 800b85c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b860:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b862:	4b86      	ldr	r3, [pc, #536]	; (800ba7c <perfect_pass+0x6ec>)
 800b864:	2203      	movs	r2, #3
 800b866:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b868:	4b7f      	ldr	r3, [pc, #508]	; (800ba68 <perfect_pass+0x6d8>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b86e:	4b7f      	ldr	r3, [pc, #508]	; (800ba6c <perfect_pass+0x6dc>)
 800b870:	2204      	movs	r2, #4
 800b872:	701a      	strb	r2, [r3, #0]

					searchF3();
 800b874:	f003 faa2 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800b878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b87c:	f7f5 fbce 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b880:	4b7a      	ldr	r3, [pc, #488]	; (800ba6c <perfect_pass+0x6dc>)
 800b882:	2200      	movs	r2, #0
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	4b79      	ldr	r3, [pc, #484]	; (800ba6c <perfect_pass+0x6dc>)
 800b888:	781a      	ldrb	r2, [r3, #0]
 800b88a:	4b77      	ldr	r3, [pc, #476]	; (800ba68 <perfect_pass+0x6d8>)
 800b88c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b88e:	f003 fa95 	bl	800edbc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b892:	2064      	movs	r0, #100	; 0x64
 800b894:	f7f9 fda0 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800b898:	4b75      	ldr	r3, [pc, #468]	; (800ba70 <perfect_pass+0x6e0>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a75      	ldr	r2, [pc, #468]	; (800ba74 <perfect_pass+0x6e4>)
 800b89e:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800b8a0:	4b6d      	ldr	r3, [pc, #436]	; (800ba58 <perfect_pass+0x6c8>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800b8a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b8aa:	f7f5 fbb7 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め----
					printf("pass press 3.\n");
 800b8ae:	4872      	ldr	r0, [pc, #456]	; (800ba78 <perfect_pass+0x6e8>)
 800b8b0:	f006 fc5c 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b8b4:	4a66      	ldr	r2, [pc, #408]	; (800ba50 <perfect_pass+0x6c0>)
 800b8b6:	8813      	ldrh	r3, [r2, #0]
 800b8b8:	f043 0320 	orr.w	r3, r3, #32
 800b8bc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b8be:	4a64      	ldr	r2, [pc, #400]	; (800ba50 <perfect_pass+0x6c0>)
 800b8c0:	8813      	ldrh	r3, [r2, #0]
 800b8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b8c8:	4a61      	ldr	r2, [pc, #388]	; (800ba50 <perfect_pass+0x6c0>)
 800b8ca:	8813      	ldrh	r3, [r2, #0]
 800b8cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b8d0:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b8d2:	4b60      	ldr	r3, [pc, #384]	; (800ba54 <perfect_pass+0x6c4>)
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b8d8:	4b5f      	ldr	r3, [pc, #380]	; (800ba58 <perfect_pass+0x6c8>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b8de:	4b5f      	ldr	r3, [pc, #380]	; (800ba5c <perfect_pass+0x6cc>)
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b8e4:	4b5e      	ldr	r3, [pc, #376]	; (800ba60 <perfect_pass+0x6d0>)
 800b8e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ea:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b8ec:	4b5d      	ldr	r3, [pc, #372]	; (800ba64 <perfect_pass+0x6d4>)
 800b8ee:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b8f2:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;						//a半区画ベースでroute配列生成
 800b8f4:	4b61      	ldr	r3, [pc, #388]	; (800ba7c <perfect_pass+0x6ec>)
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b8fa:	4b5b      	ldr	r3, [pc, #364]	; (800ba68 <perfect_pass+0x6d8>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b900:	4b5a      	ldr	r3, [pc, #360]	; (800ba6c <perfect_pass+0x6dc>)
 800b902:	2204      	movs	r2, #4
 800b904:	701a      	strb	r2, [r3, #0]

					searchF4();
 800b906:	f003 fb2f 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800b90a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b90e:	f7f5 fb85 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b912:	4b56      	ldr	r3, [pc, #344]	; (800ba6c <perfect_pass+0x6dc>)
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
 800b918:	4b54      	ldr	r3, [pc, #336]	; (800ba6c <perfect_pass+0x6dc>)
 800b91a:	781a      	ldrb	r2, [r3, #0]
 800b91c:	4b52      	ldr	r3, [pc, #328]	; (800ba68 <perfect_pass+0x6d8>)
 800b91e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b920:	f003 fb22 	bl	800ef68 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b924:	2064      	movs	r0, #100	; 0x64
 800b926:	f7f9 fd57 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800b92a:	4b51      	ldr	r3, [pc, #324]	; (800ba70 <perfect_pass+0x6e0>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a51      	ldr	r2, [pc, #324]	; (800ba74 <perfect_pass+0x6e4>)
 800b930:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800b932:	4b49      	ldr	r3, [pc, #292]	; (800ba58 <perfect_pass+0x6c8>)
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800b938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b93c:	f7f5 fb6e 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800b940:	484d      	ldr	r0, [pc, #308]	; (800ba78 <perfect_pass+0x6e8>)
 800b942:	f006 fc13 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b946:	4a42      	ldr	r2, [pc, #264]	; (800ba50 <perfect_pass+0x6c0>)
 800b948:	8813      	ldrh	r3, [r2, #0]
 800b94a:	f043 0320 	orr.w	r3, r3, #32
 800b94e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b950:	4a3f      	ldr	r2, [pc, #252]	; (800ba50 <perfect_pass+0x6c0>)
 800b952:	8813      	ldrh	r3, [r2, #0]
 800b954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b958:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b95a:	4a3d      	ldr	r2, [pc, #244]	; (800ba50 <perfect_pass+0x6c0>)
 800b95c:	8813      	ldrh	r3, [r2, #0]
 800b95e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b962:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b964:	4b3b      	ldr	r3, [pc, #236]	; (800ba54 <perfect_pass+0x6c4>)
 800b966:	2203      	movs	r2, #3
 800b968:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b96a:	4b3b      	ldr	r3, [pc, #236]	; (800ba58 <perfect_pass+0x6c8>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b970:	4b3a      	ldr	r3, [pc, #232]	; (800ba5c <perfect_pass+0x6cc>)
 800b972:	2202      	movs	r2, #2
 800b974:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800b976:	4b3a      	ldr	r3, [pc, #232]	; (800ba60 <perfect_pass+0x6d0>)
 800b978:	f241 7270 	movw	r2, #6000	; 0x1770
 800b97c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b97e:	4b39      	ldr	r3, [pc, #228]	; (800ba64 <perfect_pass+0x6d4>)
 800b980:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b984:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b986:	4b3d      	ldr	r3, [pc, #244]	; (800ba7c <perfect_pass+0x6ec>)
 800b988:	2203      	movs	r2, #3
 800b98a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b98c:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <perfect_pass+0x6d8>)
 800b98e:	2200      	movs	r2, #0
 800b990:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b992:	4b36      	ldr	r3, [pc, #216]	; (800ba6c <perfect_pass+0x6dc>)
 800b994:	2204      	movs	r2, #4
 800b996:	701a      	strb	r2, [r3, #0]

					searchF3();
 800b998:	f003 fa10 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800b99c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9a0:	f7f5 fb3c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b9a4:	4b31      	ldr	r3, [pc, #196]	; (800ba6c <perfect_pass+0x6dc>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	4b30      	ldr	r3, [pc, #192]	; (800ba6c <perfect_pass+0x6dc>)
 800b9ac:	781a      	ldrb	r2, [r3, #0]
 800b9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ba68 <perfect_pass+0x6d8>)
 800b9b0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b9b2:	f003 fa03 	bl	800edbc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800b9b6:	2064      	movs	r0, #100	; 0x64
 800b9b8:	f7f9 fd0e 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800b9bc:	4b2c      	ldr	r3, [pc, #176]	; (800ba70 <perfect_pass+0x6e0>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a2c      	ldr	r2, [pc, #176]	; (800ba74 <perfect_pass+0x6e4>)
 800b9c2:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800b9c4:	4b24      	ldr	r3, [pc, #144]	; (800ba58 <perfect_pass+0x6c8>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800b9ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9ce:	f7f5 fb25 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b9d2:	482b      	ldr	r0, [pc, #172]	; (800ba80 <perfect_pass+0x6f0>)
 800b9d4:	f006 fbca 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800b9d8:	4a1d      	ldr	r2, [pc, #116]	; (800ba50 <perfect_pass+0x6c0>)
 800b9da:	8813      	ldrh	r3, [r2, #0]
 800b9dc:	f043 0320 	orr.w	r3, r3, #32
 800b9e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b9e2:	4a1b      	ldr	r2, [pc, #108]	; (800ba50 <perfect_pass+0x6c0>)
 800b9e4:	8813      	ldrh	r3, [r2, #0]
 800b9e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b9ec:	4a18      	ldr	r2, [pc, #96]	; (800ba50 <perfect_pass+0x6c0>)
 800b9ee:	8813      	ldrh	r3, [r2, #0]
 800b9f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9f4:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b9f6:	4b17      	ldr	r3, [pc, #92]	; (800ba54 <perfect_pass+0x6c4>)
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b9fc:	4b16      	ldr	r3, [pc, #88]	; (800ba58 <perfect_pass+0x6c8>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ba02:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <perfect_pass+0x6cc>)
 800ba04:	2202      	movs	r2, #2
 800ba06:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800ba08:	4b15      	ldr	r3, [pc, #84]	; (800ba60 <perfect_pass+0x6d0>)
 800ba0a:	f241 7270 	movw	r2, #6000	; 0x1770
 800ba0e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800ba10:	4b14      	ldr	r3, [pc, #80]	; (800ba64 <perfect_pass+0x6d4>)
 800ba12:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba16:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800ba18:	4b18      	ldr	r3, [pc, #96]	; (800ba7c <perfect_pass+0x6ec>)
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800ba1e:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <perfect_pass+0x6d8>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba24:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <perfect_pass+0x6dc>)
 800ba26:	2204      	movs	r2, #4
 800ba28:	701a      	strb	r2, [r3, #0]

					searchF4();
 800ba2a:	f003 fa9d 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800ba2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba32:	f7f5 faf3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <perfect_pass+0x6dc>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <perfect_pass+0x6dc>)
 800ba3e:	781a      	ldrb	r2, [r3, #0]
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <perfect_pass+0x6d8>)
 800ba42:	701a      	strb	r2, [r3, #0]
					searchF4();
 800ba44:	f003 fa90 	bl	800ef68 <searchF4>

					break;
 800ba48:	e175      	b.n	800bd36 <perfect_pass+0x9a6>
 800ba4a:	bf00      	nop
 800ba4c:	08013578 	.word	0x08013578
 800ba50:	20000f68 	.word	0x20000f68
 800ba54:	20000456 	.word	0x20000456
 800ba58:	200015c8 	.word	0x200015c8
 800ba5c:	20000bb1 	.word	0x20000bb1
 800ba60:	20000454 	.word	0x20000454
 800ba64:	20000f7c 	.word	0x20000f7c
 800ba68:	20000bb0 	.word	0x20000bb0
 800ba6c:	20000b4c 	.word	0x20000b4c
 800ba70:	20000bf8 	.word	0x20000bf8
 800ba74:	20000b5c 	.word	0x20000b5c
 800ba78:	080134b4 	.word	0x080134b4
 800ba7c:	20000457 	.word	0x20000457
 800ba80:	080134d4 	.word	0x080134d4

				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800ba84:	48ad      	ldr	r0, [pc, #692]	; (800bd3c <perfect_pass+0x9ac>)
 800ba86:	f006 fb71 	bl	801216c <puts>
					MF.FLAG.SCND = 0;
 800ba8a:	4aad      	ldr	r2, [pc, #692]	; (800bd40 <perfect_pass+0x9b0>)
 800ba8c:	8813      	ldrh	r3, [r2, #0]
 800ba8e:	f36f 1345 	bfc	r3, #5, #1
 800ba92:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ba94:	4aaa      	ldr	r2, [pc, #680]	; (800bd40 <perfect_pass+0x9b0>)
 800ba96:	8813      	ldrh	r3, [r2, #0]
 800ba98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba9c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800ba9e:	4aa8      	ldr	r2, [pc, #672]	; (800bd40 <perfect_pass+0x9b0>)
 800baa0:	8813      	ldrh	r3, [r2, #0]
 800baa2:	f36f 238a 	bfc	r3, #10, #1
 800baa6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800baa8:	4ba6      	ldr	r3, [pc, #664]	; (800bd44 <perfect_pass+0x9b4>)
 800baaa:	2202      	movs	r2, #2
 800baac:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800baae:	4ba6      	ldr	r3, [pc, #664]	; (800bd48 <perfect_pass+0x9b8>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bab4:	4ba5      	ldr	r3, [pc, #660]	; (800bd4c <perfect_pass+0x9bc>)
 800bab6:	2202      	movs	r2, #2
 800bab8:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800baba:	4ba5      	ldr	r3, [pc, #660]	; (800bd50 <perfect_pass+0x9c0>)
 800babc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800bac0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bac2:	4ba4      	ldr	r3, [pc, #656]	; (800bd54 <perfect_pass+0x9c4>)
 800bac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bac8:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800baca:	4ba3      	ldr	r3, [pc, #652]	; (800bd58 <perfect_pass+0x9c8>)
 800bacc:	2207      	movs	r2, #7
 800bace:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bad0:	4ba2      	ldr	r3, [pc, #648]	; (800bd5c <perfect_pass+0x9cc>)
 800bad2:	2207      	movs	r2, #7
 800bad4:	701a      	strb	r2, [r3, #0]

					get_base();
 800bad6:	f005 fcaf 	bl	8011438 <get_base>

					searchC();
 800bada:	f002 fcf5 	bl	800e4c8 <searchC>
					HAL_Delay(2000);
 800bade:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bae2:	f7f5 fa9b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bae6:	4b9d      	ldr	r3, [pc, #628]	; (800bd5c <perfect_pass+0x9cc>)
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
 800baec:	4b9b      	ldr	r3, [pc, #620]	; (800bd5c <perfect_pass+0x9cc>)
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	4b99      	ldr	r3, [pc, #612]	; (800bd58 <perfect_pass+0x9c8>)
 800baf2:	701a      	strb	r2, [r3, #0]
					searchC();
 800baf4:	f002 fce8 	bl	800e4c8 <searchC>

					degree_z = target_degree_z;
 800baf8:	4b99      	ldr	r3, [pc, #612]	; (800bd60 <perfect_pass+0x9d0>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a99      	ldr	r2, [pc, #612]	; (800bd64 <perfect_pass+0x9d4>)
 800bafe:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bb00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb04:	f7f5 fa8a 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800bb08:	4897      	ldr	r0, [pc, #604]	; (800bd68 <perfect_pass+0x9d8>)
 800bb0a:	f006 fb2f 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800bb0e:	4a8c      	ldr	r2, [pc, #560]	; (800bd40 <perfect_pass+0x9b0>)
 800bb10:	8813      	ldrh	r3, [r2, #0]
 800bb12:	f043 0320 	orr.w	r3, r3, #32
 800bb16:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb18:	4a89      	ldr	r2, [pc, #548]	; (800bd40 <perfect_pass+0x9b0>)
 800bb1a:	8813      	ldrh	r3, [r2, #0]
 800bb1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb20:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb22:	4a87      	ldr	r2, [pc, #540]	; (800bd40 <perfect_pass+0x9b0>)
 800bb24:	8813      	ldrh	r3, [r2, #0]
 800bb26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb2a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bb2c:	4b85      	ldr	r3, [pc, #532]	; (800bd44 <perfect_pass+0x9b4>)
 800bb2e:	2202      	movs	r2, #2
 800bb30:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb32:	4b85      	ldr	r3, [pc, #532]	; (800bd48 <perfect_pass+0x9b8>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb38:	4b84      	ldr	r3, [pc, #528]	; (800bd4c <perfect_pass+0x9bc>)
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bb3e:	4b84      	ldr	r3, [pc, #528]	; (800bd50 <perfect_pass+0x9c0>)
 800bb40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb44:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bb46:	4b83      	ldr	r3, [pc, #524]	; (800bd54 <perfect_pass+0x9c4>)
 800bb48:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bb4c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bb4e:	4b87      	ldr	r3, [pc, #540]	; (800bd6c <perfect_pass+0x9dc>)
 800bb50:	2203      	movs	r2, #3
 800bb52:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bb54:	4b80      	ldr	r3, [pc, #512]	; (800bd58 <perfect_pass+0x9c8>)
 800bb56:	2207      	movs	r2, #7
 800bb58:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb5a:	4b80      	ldr	r3, [pc, #512]	; (800bd5c <perfect_pass+0x9cc>)
 800bb5c:	2207      	movs	r2, #7
 800bb5e:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bb60:	f003 f92c 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800bb64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb68:	f7f5 fa58 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb6c:	4b7b      	ldr	r3, [pc, #492]	; (800bd5c <perfect_pass+0x9cc>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	4b7a      	ldr	r3, [pc, #488]	; (800bd5c <perfect_pass+0x9cc>)
 800bb74:	781a      	ldrb	r2, [r3, #0]
 800bb76:	4b78      	ldr	r3, [pc, #480]	; (800bd58 <perfect_pass+0x9c8>)
 800bb78:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bb7a:	f003 f91f 	bl	800edbc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bb7e:	2064      	movs	r0, #100	; 0x64
 800bb80:	f7f9 fc2a 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800bb84:	4b76      	ldr	r3, [pc, #472]	; (800bd60 <perfect_pass+0x9d0>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a76      	ldr	r2, [pc, #472]	; (800bd64 <perfect_pass+0x9d4>)
 800bb8a:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bb8c:	4b6e      	ldr	r3, [pc, #440]	; (800bd48 <perfect_pass+0x9b8>)
 800bb8e:	2200      	movs	r2, #0
 800bb90:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 800bb92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb96:	f7f5 fa41 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800bb9a:	4875      	ldr	r0, [pc, #468]	; (800bd70 <perfect_pass+0x9e0>)
 800bb9c:	f006 fae6 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800bba0:	4a67      	ldr	r2, [pc, #412]	; (800bd40 <perfect_pass+0x9b0>)
 800bba2:	8813      	ldrh	r3, [r2, #0]
 800bba4:	f043 0320 	orr.w	r3, r3, #32
 800bba8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bbaa:	4a65      	ldr	r2, [pc, #404]	; (800bd40 <perfect_pass+0x9b0>)
 800bbac:	8813      	ldrh	r3, [r2, #0]
 800bbae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbb2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bbb4:	4a62      	ldr	r2, [pc, #392]	; (800bd40 <perfect_pass+0x9b0>)
 800bbb6:	8813      	ldrh	r3, [r2, #0]
 800bbb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bbbc:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bbbe:	4b61      	ldr	r3, [pc, #388]	; (800bd44 <perfect_pass+0x9b4>)
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bbc4:	4b60      	ldr	r3, [pc, #384]	; (800bd48 <perfect_pass+0x9b8>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bbca:	4b60      	ldr	r3, [pc, #384]	; (800bd4c <perfect_pass+0x9bc>)
 800bbcc:	2202      	movs	r2, #2
 800bbce:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bbd0:	4b5f      	ldr	r3, [pc, #380]	; (800bd50 <perfect_pass+0x9c0>)
 800bbd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bbd8:	4b5e      	ldr	r3, [pc, #376]	; (800bd54 <perfect_pass+0x9c4>)
 800bbda:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bbde:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bbe0:	4b62      	ldr	r3, [pc, #392]	; (800bd6c <perfect_pass+0x9dc>)
 800bbe2:	2204      	movs	r2, #4
 800bbe4:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bbe6:	4b5c      	ldr	r3, [pc, #368]	; (800bd58 <perfect_pass+0x9c8>)
 800bbe8:	2207      	movs	r2, #7
 800bbea:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bbec:	4b5b      	ldr	r3, [pc, #364]	; (800bd5c <perfect_pass+0x9cc>)
 800bbee:	2207      	movs	r2, #7
 800bbf0:	701a      	strb	r2, [r3, #0]

					searchF4();
 800bbf2:	f003 f9b9 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800bbf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbfa:	f7f5 fa0f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bbfe:	4b57      	ldr	r3, [pc, #348]	; (800bd5c <perfect_pass+0x9cc>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	4b55      	ldr	r3, [pc, #340]	; (800bd5c <perfect_pass+0x9cc>)
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	4b53      	ldr	r3, [pc, #332]	; (800bd58 <perfect_pass+0x9c8>)
 800bc0a:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bc0c:	f003 f9ac 	bl	800ef68 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bc10:	2064      	movs	r0, #100	; 0x64
 800bc12:	f7f9 fbe1 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800bc16:	4b52      	ldr	r3, [pc, #328]	; (800bd60 <perfect_pass+0x9d0>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a52      	ldr	r2, [pc, #328]	; (800bd64 <perfect_pass+0x9d4>)
 800bc1c:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bc1e:	4b4a      	ldr	r3, [pc, #296]	; (800bd48 <perfect_pass+0x9b8>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800bc24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc28:	f7f5 f9f8 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800bc2c:	484e      	ldr	r0, [pc, #312]	; (800bd68 <perfect_pass+0x9d8>)
 800bc2e:	f006 fa9d 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800bc32:	4a43      	ldr	r2, [pc, #268]	; (800bd40 <perfect_pass+0x9b0>)
 800bc34:	8813      	ldrh	r3, [r2, #0]
 800bc36:	f043 0320 	orr.w	r3, r3, #32
 800bc3a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc3c:	4a40      	ldr	r2, [pc, #256]	; (800bd40 <perfect_pass+0x9b0>)
 800bc3e:	8813      	ldrh	r3, [r2, #0]
 800bc40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc44:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bc46:	4a3e      	ldr	r2, [pc, #248]	; (800bd40 <perfect_pass+0x9b0>)
 800bc48:	8813      	ldrh	r3, [r2, #0]
 800bc4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc4e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bc50:	4b3c      	ldr	r3, [pc, #240]	; (800bd44 <perfect_pass+0x9b4>)
 800bc52:	2203      	movs	r2, #3
 800bc54:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bc56:	4b3c      	ldr	r3, [pc, #240]	; (800bd48 <perfect_pass+0x9b8>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bc5c:	4b3b      	ldr	r3, [pc, #236]	; (800bd4c <perfect_pass+0x9bc>)
 800bc5e:	2202      	movs	r2, #2
 800bc60:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800bc62:	4b3b      	ldr	r3, [pc, #236]	; (800bd50 <perfect_pass+0x9c0>)
 800bc64:	f241 7270 	movw	r2, #6000	; 0x1770
 800bc68:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bc6a:	4b3a      	ldr	r3, [pc, #232]	; (800bd54 <perfect_pass+0x9c4>)
 800bc6c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bc70:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bc72:	4b3e      	ldr	r3, [pc, #248]	; (800bd6c <perfect_pass+0x9dc>)
 800bc74:	2203      	movs	r2, #3
 800bc76:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bc78:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <perfect_pass+0x9c8>)
 800bc7a:	2207      	movs	r2, #7
 800bc7c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bc7e:	4b37      	ldr	r3, [pc, #220]	; (800bd5c <perfect_pass+0x9cc>)
 800bc80:	2207      	movs	r2, #7
 800bc82:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bc84:	f003 f89a 	bl	800edbc <searchF3>
					HAL_Delay(2000);
 800bc88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc8c:	f7f5 f9c6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bc90:	4b32      	ldr	r3, [pc, #200]	; (800bd5c <perfect_pass+0x9cc>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	4b31      	ldr	r3, [pc, #196]	; (800bd5c <perfect_pass+0x9cc>)
 800bc98:	781a      	ldrb	r2, [r3, #0]
 800bc9a:	4b2f      	ldr	r3, [pc, #188]	; (800bd58 <perfect_pass+0x9c8>)
 800bc9c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bc9e:	f003 f88d 	bl	800edbc <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bca2:	2064      	movs	r0, #100	; 0x64
 800bca4:	f7f9 fb98 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800bca8:	4b2d      	ldr	r3, [pc, #180]	; (800bd60 <perfect_pass+0x9d0>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <perfect_pass+0x9d4>)
 800bcae:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800bcb0:	4b25      	ldr	r3, [pc, #148]	; (800bd48 <perfect_pass+0x9b8>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800bcb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcba:	f7f5 f9af 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800bcbe:	482c      	ldr	r0, [pc, #176]	; (800bd70 <perfect_pass+0x9e0>)
 800bcc0:	f006 fa54 	bl	801216c <puts>
					MF.FLAG.SCND = 1;
 800bcc4:	4a1e      	ldr	r2, [pc, #120]	; (800bd40 <perfect_pass+0x9b0>)
 800bcc6:	8813      	ldrh	r3, [r2, #0]
 800bcc8:	f043 0320 	orr.w	r3, r3, #32
 800bccc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bcce:	4a1c      	ldr	r2, [pc, #112]	; (800bd40 <perfect_pass+0x9b0>)
 800bcd0:	8813      	ldrh	r3, [r2, #0]
 800bcd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcd6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bcd8:	4a19      	ldr	r2, [pc, #100]	; (800bd40 <perfect_pass+0x9b0>)
 800bcda:	8813      	ldrh	r3, [r2, #0]
 800bcdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bce0:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bce2:	4b18      	ldr	r3, [pc, #96]	; (800bd44 <perfect_pass+0x9b4>)
 800bce4:	2203      	movs	r2, #3
 800bce6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bce8:	4b17      	ldr	r3, [pc, #92]	; (800bd48 <perfect_pass+0x9b8>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bcee:	4b17      	ldr	r3, [pc, #92]	; (800bd4c <perfect_pass+0x9bc>)
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800bcf4:	4b16      	ldr	r3, [pc, #88]	; (800bd50 <perfect_pass+0x9c0>)
 800bcf6:	f241 7270 	movw	r2, #6000	; 0x1770
 800bcfa:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bcfc:	4b15      	ldr	r3, [pc, #84]	; (800bd54 <perfect_pass+0x9c4>)
 800bcfe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bd02:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bd04:	4b19      	ldr	r3, [pc, #100]	; (800bd6c <perfect_pass+0x9dc>)
 800bd06:	2204      	movs	r2, #4
 800bd08:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bd0a:	4b13      	ldr	r3, [pc, #76]	; (800bd58 <perfect_pass+0x9c8>)
 800bd0c:	2207      	movs	r2, #7
 800bd0e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd10:	4b12      	ldr	r3, [pc, #72]	; (800bd5c <perfect_pass+0x9cc>)
 800bd12:	2207      	movs	r2, #7
 800bd14:	701a      	strb	r2, [r3, #0]

					searchF4();
 800bd16:	f003 f927 	bl	800ef68 <searchF4>
					HAL_Delay(2000);
 800bd1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd1e:	f7f5 f97d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd22:	4b0e      	ldr	r3, [pc, #56]	; (800bd5c <perfect_pass+0x9cc>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <perfect_pass+0x9cc>)
 800bd2a:	781a      	ldrb	r2, [r3, #0]
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <perfect_pass+0x9c8>)
 800bd2e:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bd30:	f003 f91a 	bl	800ef68 <searchF4>

					break;
 800bd34:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bd36:	f7ff bb34 	b.w	800b3a2 <perfect_pass+0x12>
 800bd3a:	bf00      	nop
 800bd3c:	08013578 	.word	0x08013578
 800bd40:	20000f68 	.word	0x20000f68
 800bd44:	20000456 	.word	0x20000456
 800bd48:	200015c8 	.word	0x200015c8
 800bd4c:	20000bb1 	.word	0x20000bb1
 800bd50:	20000454 	.word	0x20000454
 800bd54:	20000f7c 	.word	0x20000f7c
 800bd58:	20000bb0 	.word	0x20000bb0
 800bd5c:	20000b4c 	.word	0x20000b4c
 800bd60:	20000bf8 	.word	0x20000bf8
 800bd64:	20000b5c 	.word	0x20000b5c
 800bd68:	080134b4 	.word	0x080134b4
 800bd6c:	20000457 	.word	0x20000457
 800bd70:	080134d4 	.word	0x080134d4

0800bd74 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800bd82:	230b      	movs	r3, #11
 800bd84:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800bd86:	2301      	movs	r3, #1
 800bd88:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800bd8e:	f7f5 fe87 	bl	8001aa0 <HAL_FLASH_Unlock>
 800bd92:	4603      	mov	r3, r0
 800bd94:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800bd96:	7ffb      	ldrb	r3, [r7, #31]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <eeprom_enable_write+0x2c>
 800bd9c:	7ffb      	ldrb	r3, [r7, #31]
 800bd9e:	e009      	b.n	800bdb4 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800bda0:	1d3a      	adds	r2, r7, #4
 800bda2:	f107 0308 	add.w	r3, r7, #8
 800bda6:	4611      	mov	r1, r2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7f5 ffd7 	bl	8001d5c <HAL_FLASHEx_Erase>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	77fb      	strb	r3, [r7, #31]
  return status;
 800bdb2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3720      	adds	r7, #32
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800bdc0:	f7f5 fe90 	bl	8001ae4 <HAL_FLASH_Lock>
 800bdc4:	4603      	mov	r3, r0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800bdca:	b590      	push	{r4, r7, lr}
 800bdcc:	b085      	sub	sp, #20
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800bddc:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800bde4:	887b      	ldrh	r3, [r7, #2]
 800bde6:	f04f 0400 	mov.w	r4, #0
 800bdea:	461a      	mov	r2, r3
 800bdec:	4623      	mov	r3, r4
 800bdee:	6879      	ldr	r1, [r7, #4]
 800bdf0:	2001      	movs	r0, #1
 800bdf2:	f7f5 fe01 	bl	80019f8 <HAL_FLASH_Program>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	73fb      	strb	r3, [r7, #15]
  return status;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	bd90      	pop	{r4, r7, pc}

0800be04 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800be16:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	81fb      	strh	r3, [r7, #14]
  return val;
 800be24:	89fb      	ldrh	r3, [r7, #14]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800be3a:	2064      	movs	r0, #100	; 0x64
 800be3c:	f7f5 f8ee 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800be40:	2075      	movs	r0, #117	; 0x75
 800be42:	f000 f82f 	bl	800bea4 <read_byte>
 800be46:	4603      	mov	r3, r0
 800be48:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	4619      	mov	r1, r3
 800be4e:	4813      	ldr	r0, [pc, #76]	; (800be9c <gyro_init+0x68>)
 800be50:	f006 f918 	bl	8012084 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	2b98      	cmp	r3, #152	; 0x98
 800be58:	d003      	beq.n	800be62 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800be5a:	4811      	ldr	r0, [pc, #68]	; (800bea0 <gyro_init+0x6c>)
 800be5c:	f006 f912 	bl	8012084 <iprintf>
 800be60:	e7fb      	b.n	800be5a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800be62:	2032      	movs	r0, #50	; 0x32
 800be64:	f7f5 f8da 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800be68:	2100      	movs	r1, #0
 800be6a:	206b      	movs	r0, #107	; 0x6b
 800be6c:	f000 f846 	bl	800befc <write_byte>

  HAL_Delay(50);
 800be70:	2032      	movs	r0, #50	; 0x32
 800be72:	f7f5 f8d3 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800be76:	2100      	movs	r1, #0
 800be78:	201a      	movs	r0, #26
 800be7a:	f000 f83f 	bl	800befc <write_byte>

  HAL_Delay(50);
 800be7e:	2032      	movs	r0, #50	; 0x32
 800be80:	f7f5 f8cc 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800be84:	2118      	movs	r1, #24
 800be86:	201b      	movs	r0, #27
 800be88:	f000 f838 	bl	800befc <write_byte>

  HAL_Delay(50);
 800be8c:	2032      	movs	r0, #50	; 0x32
 800be8e:	f7f5 f8c5 	bl	800101c <HAL_Delay>
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08013674 	.word	0x08013674
 800bea0:	0801367c 	.word	0x0801367c

0800bea4 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800beae:	2200      	movs	r2, #0
 800beb0:	2104      	movs	r1, #4
 800beb2:	4810      	ldr	r0, [pc, #64]	; (800bef4 <read_byte+0x50>)
 800beb4:	f7f6 fa26 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800bec2:	f107 010f 	add.w	r1, r7, #15
 800bec6:	2364      	movs	r3, #100	; 0x64
 800bec8:	2201      	movs	r2, #1
 800beca:	480b      	ldr	r0, [pc, #44]	; (800bef8 <read_byte+0x54>)
 800becc:	f7f6 fea2 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800bed0:	f107 010e 	add.w	r1, r7, #14
 800bed4:	2364      	movs	r3, #100	; 0x64
 800bed6:	2201      	movs	r2, #1
 800bed8:	4807      	ldr	r0, [pc, #28]	; (800bef8 <read_byte+0x54>)
 800beda:	f7f6 ffcf 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800bede:	2201      	movs	r2, #1
 800bee0:	2104      	movs	r1, #4
 800bee2:	4804      	ldr	r0, [pc, #16]	; (800bef4 <read_byte+0x50>)
 800bee4:	f7f6 fa0e 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	40020c00 	.word	0x40020c00
 800bef8:	20000144 	.word	0x20000144

0800befc <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	460a      	mov	r2, r1
 800bf06:	71fb      	strb	r3, [r7, #7]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800bf0c:	79fb      	ldrb	r3, [r7, #7]
 800bf0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800bf16:	2200      	movs	r2, #0
 800bf18:	2104      	movs	r1, #4
 800bf1a:	480c      	ldr	r0, [pc, #48]	; (800bf4c <write_byte+0x50>)
 800bf1c:	f7f6 f9f2 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800bf20:	f107 010f 	add.w	r1, r7, #15
 800bf24:	2364      	movs	r3, #100	; 0x64
 800bf26:	2201      	movs	r2, #1
 800bf28:	4809      	ldr	r0, [pc, #36]	; (800bf50 <write_byte+0x54>)
 800bf2a:	f7f6 fe73 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800bf2e:	1db9      	adds	r1, r7, #6
 800bf30:	2364      	movs	r3, #100	; 0x64
 800bf32:	2201      	movs	r2, #1
 800bf34:	4806      	ldr	r0, [pc, #24]	; (800bf50 <write_byte+0x54>)
 800bf36:	f7f6 fe6d 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	2104      	movs	r1, #4
 800bf3e:	4803      	ldr	r0, [pc, #12]	; (800bf4c <write_byte+0x50>)
 800bf40:	f7f6 f9e0 	bl	8002304 <HAL_GPIO_WritePin>
}
 800bf44:	bf00      	nop
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	40020c00 	.word	0x40020c00
 800bf50:	20000144 	.word	0x20000144

0800bf54 <accel_read_x>:


float accel_read_x(void){
 800bf54:	b590      	push	{r4, r7, lr}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800bf5a:	203b      	movs	r0, #59	; 0x3b
 800bf5c:	f7ff ffa2 	bl	800bea4 <read_byte>
 800bf60:	4603      	mov	r3, r0
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	b21c      	sxth	r4, r3
 800bf66:	203c      	movs	r0, #60	; 0x3c
 800bf68:	f7ff ff9c 	bl	800bea4 <read_byte>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	b21b      	sxth	r3, r3
 800bf70:	4323      	orrs	r3, r4
 800bf72:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800bf74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	da01      	bge.n	800bf80 <accel_read_x+0x2c>
 800bf7c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800bf80:	12db      	asrs	r3, r3, #11
 800bf82:	b21b      	sxth	r3, r3
 800bf84:	ee07 3a90 	vmov	s15, r3
 800bf88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf8c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	ee07 3a90 	vmov	s15, r3
}
 800bf96:	eeb0 0a67 	vmov.f32	s0, s15
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd90      	pop	{r4, r7, pc}

0800bfa0 <accel_read_y>:


float accel_read_y(void){
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800bfa6:	203d      	movs	r0, #61	; 0x3d
 800bfa8:	f7ff ff7c 	bl	800bea4 <read_byte>
 800bfac:	4603      	mov	r3, r0
 800bfae:	021b      	lsls	r3, r3, #8
 800bfb0:	b21c      	sxth	r4, r3
 800bfb2:	203e      	movs	r0, #62	; 0x3e
 800bfb4:	f7ff ff76 	bl	800bea4 <read_byte>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	b21b      	sxth	r3, r3
 800bfbc:	4323      	orrs	r3, r4
 800bfbe:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800bfc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da01      	bge.n	800bfcc <accel_read_y+0x2c>
 800bfc8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800bfcc:	12db      	asrs	r3, r3, #11
 800bfce:	b21b      	sxth	r3, r3
 800bfd0:	ee07 3a90 	vmov	s15, r3
 800bfd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfd8:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	ee07 3a90 	vmov	s15, r3
}
 800bfe2:	eeb0 0a67 	vmov.f32	s0, s15
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd90      	pop	{r4, r7, pc}

0800bfec <accel_read_z>:


float accel_read_z(void){
 800bfec:	b590      	push	{r4, r7, lr}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800bff2:	203f      	movs	r0, #63	; 0x3f
 800bff4:	f7ff ff56 	bl	800bea4 <read_byte>
 800bff8:	4603      	mov	r3, r0
 800bffa:	021b      	lsls	r3, r3, #8
 800bffc:	b21c      	sxth	r4, r3
 800bffe:	2040      	movs	r0, #64	; 0x40
 800c000:	f7ff ff50 	bl	800bea4 <read_byte>
 800c004:	4603      	mov	r3, r0
 800c006:	b21b      	sxth	r3, r3
 800c008:	4323      	orrs	r3, r4
 800c00a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800c00c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c010:	2b00      	cmp	r3, #0
 800c012:	da01      	bge.n	800c018 <accel_read_z+0x2c>
 800c014:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c018:	12db      	asrs	r3, r3, #11
 800c01a:	b21b      	sxth	r3, r3
 800c01c:	3b07      	subs	r3, #7
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c026:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	ee07 3a90 	vmov	s15, r3
}
 800c030:	eeb0 0a67 	vmov.f32	s0, s15
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	bd90      	pop	{r4, r7, pc}
 800c03a:	0000      	movs	r0, r0
 800c03c:	0000      	movs	r0, r0
	...

0800c040 <gyro_read_x>:


float gyro_read_x(void){
 800c040:	b590      	push	{r4, r7, lr}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800c046:	2043      	movs	r0, #67	; 0x43
 800c048:	f7ff ff2c 	bl	800bea4 <read_byte>
 800c04c:	4603      	mov	r3, r0
 800c04e:	021b      	lsls	r3, r3, #8
 800c050:	b21c      	sxth	r4, r3
 800c052:	2044      	movs	r0, #68	; 0x44
 800c054:	f7ff ff26 	bl	800bea4 <read_byte>
 800c058:	4603      	mov	r3, r0
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	4323      	orrs	r3, r4
 800c05e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800c060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c064:	4618      	mov	r0, r3
 800c066:	f7f4 fa55 	bl	8000514 <__aeabi_i2d>
 800c06a:	a30f      	add	r3, pc, #60	; (adr r3, 800c0a8 <gyro_read_x+0x68>)
 800c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c070:	f7f4 fbe4 	bl	800083c <__aeabi_ddiv>
 800c074:	4603      	mov	r3, r0
 800c076:	460c      	mov	r4, r1
 800c078:	4618      	mov	r0, r3
 800c07a:	4621      	mov	r1, r4
 800c07c:	a30c      	add	r3, pc, #48	; (adr r3, 800c0b0 <gyro_read_x+0x70>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 f8fb 	bl	800027c <__adddf3>
 800c086:	4603      	mov	r3, r0
 800c088:	460c      	mov	r4, r1
 800c08a:	4618      	mov	r0, r3
 800c08c:	4621      	mov	r1, r4
 800c08e:	f7f4 fd83 	bl	8000b98 <__aeabi_d2f>
 800c092:	4603      	mov	r3, r0
 800c094:	603b      	str	r3, [r7, #0]
  return omega;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	ee07 3a90 	vmov	s15, r3
}
 800c09c:	eeb0 0a67 	vmov.f32	s0, s15
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd90      	pop	{r4, r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	66666666 	.word	0x66666666
 800c0ac:	40306666 	.word	0x40306666
 800c0b0:	66666666 	.word	0x66666666
 800c0b4:	3ff66666 	.word	0x3ff66666

0800c0b8 <gyro_read_y>:


float gyro_read_y(void){
 800c0b8:	b590      	push	{r4, r7, lr}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800c0be:	2045      	movs	r0, #69	; 0x45
 800c0c0:	f7ff fef0 	bl	800bea4 <read_byte>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	021b      	lsls	r3, r3, #8
 800c0c8:	b21c      	sxth	r4, r3
 800c0ca:	2046      	movs	r0, #70	; 0x46
 800c0cc:	f7ff feea 	bl	800bea4 <read_byte>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	b21b      	sxth	r3, r3
 800c0d4:	4323      	orrs	r3, r4
 800c0d6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800c0d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f4 fa19 	bl	8000514 <__aeabi_i2d>
 800c0e2:	a310      	add	r3, pc, #64	; (adr r3, 800c124 <gyro_read_y+0x6c>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 fba8 	bl	800083c <__aeabi_ddiv>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	4b09      	ldr	r3, [pc, #36]	; (800c120 <gyro_read_y+0x68>)
 800c0fa:	f7f4 f8bd 	bl	8000278 <__aeabi_dsub>
 800c0fe:	4603      	mov	r3, r0
 800c100:	460c      	mov	r4, r1
 800c102:	4618      	mov	r0, r3
 800c104:	4621      	mov	r1, r4
 800c106:	f7f4 fd47 	bl	8000b98 <__aeabi_d2f>
 800c10a:	4603      	mov	r3, r0
 800c10c:	603b      	str	r3, [r7, #0]
  return omega;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	ee07 3a90 	vmov	s15, r3
}
 800c114:	eeb0 0a67 	vmov.f32	s0, s15
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd90      	pop	{r4, r7, pc}
 800c11e:	bf00      	nop
 800c120:	3fe80000 	.word	0x3fe80000
 800c124:	66666666 	.word	0x66666666
 800c128:	40306666 	.word	0x40306666
 800c12c:	00000000 	.word	0x00000000

0800c130 <gyro_read_z>:


float gyro_read_z(void){
 800c130:	b5b0      	push	{r4, r5, r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800c136:	2047      	movs	r0, #71	; 0x47
 800c138:	f7ff feb4 	bl	800bea4 <read_byte>
 800c13c:	4603      	mov	r3, r0
 800c13e:	021b      	lsls	r3, r3, #8
 800c140:	b21c      	sxth	r4, r3
 800c142:	2048      	movs	r0, #72	; 0x48
 800c144:	f7ff feae 	bl	800bea4 <read_byte>
 800c148:	4603      	mov	r3, r0
 800c14a:	b21b      	sxth	r3, r3
 800c14c:	4323      	orrs	r3, r4
 800c14e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800c150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c154:	4618      	mov	r0, r3
 800c156:	f7f4 f9dd 	bl	8000514 <__aeabi_i2d>
 800c15a:	a314      	add	r3, pc, #80	; (adr r3, 800c1ac <gyro_read_z+0x7c>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 fb6c 	bl	800083c <__aeabi_ddiv>
 800c164:	4603      	mov	r3, r0
 800c166:	460c      	mov	r4, r1
 800c168:	4625      	mov	r5, r4
 800c16a:	461c      	mov	r4, r3
 800c16c:	4b0e      	ldr	r3, [pc, #56]	; (800c1a8 <gyro_read_z+0x78>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f7f4 f9e1 	bl	8000538 <__aeabi_f2d>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	f7f4 f87b 	bl	8000278 <__aeabi_dsub>
 800c182:	4603      	mov	r3, r0
 800c184:	460c      	mov	r4, r1
 800c186:	4618      	mov	r0, r3
 800c188:	4621      	mov	r1, r4
 800c18a:	f7f4 fd05 	bl	8000b98 <__aeabi_d2f>
 800c18e:	4603      	mov	r3, r0
 800c190:	603b      	str	r3, [r7, #0]
  return omega;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	ee07 3a90 	vmov	s15, r3
}
 800c198:	eeb0 0a67 	vmov.f32	s0, s15
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
 800c1a8:	20000bf4 	.word	0x20000bf4
 800c1ac:	66666666 	.word	0x66666666
 800c1b0:	40306666 	.word	0x40306666

0800c1b4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b0a      	cmp	r3, #10
 800c1c0:	d108      	bne.n	800c1d4 <__io_putchar+0x20>
    int _c = '\r';
 800c1c2:	230d      	movs	r3, #13
 800c1c4:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800c1c6:	f107 010c 	add.w	r1, r7, #12
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	4807      	ldr	r0, [pc, #28]	; (800c1ec <__io_putchar+0x38>)
 800c1d0:	f7f8 fa57 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800c1d4:	1d39      	adds	r1, r7, #4
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	2201      	movs	r2, #1
 800c1da:	4804      	ldr	r0, [pc, #16]	; (800c1ec <__io_putchar+0x38>)
 800c1dc:	f7f8 fa51 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	20000b64 	.word	0x20000b64

0800c1f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1f0:	b5b0      	push	{r4, r5, r7, lr}
 800c1f2:	ed2d 8b02 	vpush	{d8}
 800c1f6:	b08c      	sub	sp, #48	; 0x30
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c1fc:	2360      	movs	r3, #96	; 0x60
 800c1fe:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c200:	2300      	movs	r3, #0
 800c202:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c204:	2300      	movs	r3, #0
 800c206:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4ab5      	ldr	r2, [pc, #724]	; (800c4e0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	f041 82c4 	bne.w	800d79a <HAL_TIM_PeriodElapsedCallback+0x15aa>
		cnt_l = TIM4 -> CNT;
 800c212:	4bb4      	ldr	r3, [pc, #720]	; (800c4e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	ee07 3a90 	vmov	s15, r3
 800c21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c21e:	4bb2      	ldr	r3, [pc, #712]	; (800c4e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c220:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800c224:	4bb1      	ldr	r3, [pc, #708]	; (800c4ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c228:	ee07 3a90 	vmov	s15, r3
 800c22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c230:	4baf      	ldr	r3, [pc, #700]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c232:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800c236:	4bac      	ldr	r3, [pc, #688]	; (800c4e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c238:	edd3 7a00 	vldr	s15, [r3]
 800c23c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800c4f4 <HAL_TIM_PeriodElapsedCallback+0x304>
 800c240:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c248:	dd09      	ble.n	800c25e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800c24a:	4ba7      	ldr	r3, [pc, #668]	; (800c4e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800c4f8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800c254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c258:	4ba3      	ldr	r3, [pc, #652]	; (800c4e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c25a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800c25e:	4ba4      	ldr	r3, [pc, #656]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c260:	edd3 7a00 	vldr	s15, [r3]
 800c264:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800c4f4 <HAL_TIM_PeriodElapsedCallback+0x304>
 800c268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c270:	dd09      	ble.n	800c286 <HAL_TIM_PeriodElapsedCallback+0x96>
 800c272:	4b9f      	ldr	r3, [pc, #636]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c274:	edd3 7a00 	vldr	s15, [r3]
 800c278:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800c4f8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800c27c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c280:	4b9b      	ldr	r3, [pc, #620]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c282:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800c286:	4b9a      	ldr	r3, [pc, #616]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c288:	edd3 7a00 	vldr	s15, [r3]
 800c28c:	eef1 7a67 	vneg.f32	s15, s15
 800c290:	4b97      	ldr	r3, [pc, #604]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c292:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800c296:	4b99      	ldr	r3, [pc, #612]	; (800c4fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f4 f94c 	bl	8000538 <__aeabi_f2d>
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	460d      	mov	r5, r1
 800c2a4:	4b90      	ldr	r3, [pc, #576]	; (800c4e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7f4 f945 	bl	8000538 <__aeabi_f2d>
 800c2ae:	a388      	add	r3, pc, #544	; (adr r3, 800c4d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	f7f4 f998 	bl	80005e8 <__aeabi_dmul>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4620      	mov	r0, r4
 800c2be:	4629      	mov	r1, r5
 800c2c0:	f7f3 ffdc 	bl	800027c <__adddf3>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	f7f4 fc64 	bl	8000b98 <__aeabi_d2f>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	4b8a      	ldr	r3, [pc, #552]	; (800c4fc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800c2d4:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800c2d6:	4b8a      	ldr	r3, [pc, #552]	; (800c500 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f4 f92c 	bl	8000538 <__aeabi_f2d>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	4b82      	ldr	r3, [pc, #520]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7f4 f925 	bl	8000538 <__aeabi_f2d>
 800c2ee:	a378      	add	r3, pc, #480	; (adr r3, 800c4d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f7f4 f978 	bl	80005e8 <__aeabi_dmul>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f3 ffbc 	bl	800027c <__adddf3>
 800c304:	4603      	mov	r3, r0
 800c306:	460c      	mov	r4, r1
 800c308:	4618      	mov	r0, r3
 800c30a:	4621      	mov	r1, r4
 800c30c:	f7f4 fc44 	bl	8000b98 <__aeabi_d2f>
 800c310:	4602      	mov	r2, r0
 800c312:	4b7b      	ldr	r3, [pc, #492]	; (800c500 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800c314:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800c316:	4b74      	ldr	r3, [pc, #464]	; (800c4e8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7f4 f90c 	bl	8000538 <__aeabi_f2d>
 800c320:	a36b      	add	r3, pc, #428	; (adr r3, 800c4d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f4 f95f 	bl	80005e8 <__aeabi_dmul>
 800c32a:	4603      	mov	r3, r0
 800c32c:	460c      	mov	r4, r1
 800c32e:	4618      	mov	r0, r3
 800c330:	4621      	mov	r1, r4
 800c332:	a369      	add	r3, pc, #420	; (adr r3, 800c4d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7f4 fa80 	bl	800083c <__aeabi_ddiv>
 800c33c:	4603      	mov	r3, r0
 800c33e:	460c      	mov	r4, r1
 800c340:	4618      	mov	r0, r3
 800c342:	4621      	mov	r1, r4
 800c344:	f7f4 fc28 	bl	8000b98 <__aeabi_d2f>
 800c348:	4602      	mov	r2, r0
 800c34a:	4b6e      	ldr	r3, [pc, #440]	; (800c504 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800c34c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800c34e:	4b68      	ldr	r3, [pc, #416]	; (800c4f0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4618      	mov	r0, r3
 800c354:	f7f4 f8f0 	bl	8000538 <__aeabi_f2d>
 800c358:	a35d      	add	r3, pc, #372	; (adr r3, 800c4d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	f7f4 f943 	bl	80005e8 <__aeabi_dmul>
 800c362:	4603      	mov	r3, r0
 800c364:	460c      	mov	r4, r1
 800c366:	4618      	mov	r0, r3
 800c368:	4621      	mov	r1, r4
 800c36a:	a35b      	add	r3, pc, #364	; (adr r3, 800c4d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	f7f4 fa64 	bl	800083c <__aeabi_ddiv>
 800c374:	4603      	mov	r3, r0
 800c376:	460c      	mov	r4, r1
 800c378:	4618      	mov	r0, r3
 800c37a:	4621      	mov	r1, r4
 800c37c:	f7f4 fc0c 	bl	8000b98 <__aeabi_d2f>
 800c380:	4602      	mov	r2, r0
 800c382:	4b61      	ldr	r3, [pc, #388]	; (800c508 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800c384:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800c386:	4b57      	ldr	r3, [pc, #348]	; (800c4e4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800c388:	2200      	movs	r2, #0
 800c38a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800c38c:	4b57      	ldr	r3, [pc, #348]	; (800c4ec <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800c38e:	2200      	movs	r2, #0
 800c390:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800c392:	4b5e      	ldr	r3, [pc, #376]	; (800c50c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 80fe 	beq.w	800c59e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800c3a2:	4b5b      	ldr	r3, [pc, #364]	; (800c510 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f4 f8c6 	bl	8000538 <__aeabi_f2d>
 800c3ac:	a34a      	add	r3, pc, #296	; (adr r3, 800c4d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f4 f919 	bl	80005e8 <__aeabi_dmul>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	4625      	mov	r5, r4
 800c3bc:	461c      	mov	r4, r3
 800c3be:	4b55      	ldr	r3, [pc, #340]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f4 f8b8 	bl	8000538 <__aeabi_f2d>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f3 ff54 	bl	800027c <__adddf3>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	4618      	mov	r0, r3
 800c3da:	4621      	mov	r1, r4
 800c3dc:	f7f4 fbdc 	bl	8000b98 <__aeabi_d2f>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	4b4c      	ldr	r3, [pc, #304]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c3e4:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800c3e6:	4b4b      	ldr	r3, [pc, #300]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c3e8:	ed93 7a00 	vldr	s14, [r3]
 800c3ec:	4b4a      	ldr	r3, [pc, #296]	; (800c518 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c3ee:	edd3 7a00 	vldr	s15, [r3]
 800c3f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fa:	dd03      	ble.n	800c404 <HAL_TIM_PeriodElapsedCallback+0x214>
 800c3fc:	4b46      	ldr	r3, [pc, #280]	; (800c518 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c3fe:	edd3 7a00 	vldr	s15, [r3]
 800c402:	e002      	b.n	800c40a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800c404:	4b43      	ldr	r3, [pc, #268]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c406:	edd3 7a00 	vldr	s15, [r3]
 800c40a:	4b44      	ldr	r3, [pc, #272]	; (800c51c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800c40c:	ed93 7a00 	vldr	s14, [r3]
 800c410:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c418:	dd10      	ble.n	800c43c <HAL_TIM_PeriodElapsedCallback+0x24c>
 800c41a:	4b3e      	ldr	r3, [pc, #248]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c41c:	ed93 7a00 	vldr	s14, [r3]
 800c420:	4b3d      	ldr	r3, [pc, #244]	; (800c518 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c422:	edd3 7a00 	vldr	s15, [r3]
 800c426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c42e:	dd02      	ble.n	800c436 <HAL_TIM_PeriodElapsedCallback+0x246>
 800c430:	4b39      	ldr	r3, [pc, #228]	; (800c518 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	e004      	b.n	800c440 <HAL_TIM_PeriodElapsedCallback+0x250>
 800c436:	4b37      	ldr	r3, [pc, #220]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	e001      	b.n	800c440 <HAL_TIM_PeriodElapsedCallback+0x250>
 800c43c:	4b37      	ldr	r3, [pc, #220]	; (800c51c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a34      	ldr	r2, [pc, #208]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c442:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800c444:	4b33      	ldr	r3, [pc, #204]	; (800c514 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c446:	ed93 7a00 	vldr	s14, [r3]
 800c44a:	4b2e      	ldr	r3, [pc, #184]	; (800c504 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800c44c:	edd3 7a00 	vldr	s15, [r3]
 800c450:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c454:	4b32      	ldr	r3, [pc, #200]	; (800c520 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800c456:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c45a:	4b31      	ldr	r3, [pc, #196]	; (800c520 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800c45c:	edd3 7a00 	vldr	s15, [r3]
 800c460:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c464:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c468:	4b2e      	ldr	r3, [pc, #184]	; (800c524 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800c46a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800c46e:	4b2e      	ldr	r3, [pc, #184]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4618      	mov	r0, r3
 800c474:	f7f4 f860 	bl	8000538 <__aeabi_f2d>
 800c478:	a317      	add	r3, pc, #92	; (adr r3, 800c4d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f4 f8b3 	bl	80005e8 <__aeabi_dmul>
 800c482:	4603      	mov	r3, r0
 800c484:	460c      	mov	r4, r1
 800c486:	4625      	mov	r5, r4
 800c488:	461c      	mov	r4, r3
 800c48a:	4b28      	ldr	r3, [pc, #160]	; (800c52c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f4 f852 	bl	8000538 <__aeabi_f2d>
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	4620      	mov	r0, r4
 800c49a:	4629      	mov	r1, r5
 800c49c:	f7f3 feee 	bl	800027c <__adddf3>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	f7f4 fb76 	bl	8000b98 <__aeabi_d2f>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	4b1f      	ldr	r3, [pc, #124]	; (800c52c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c4b0:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800c4b2:	4b1e      	ldr	r3, [pc, #120]	; (800c52c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c4b4:	ed93 7a00 	vldr	s14, [r3]
 800c4b8:	4b1d      	ldr	r3, [pc, #116]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800c4ba:	edd3 7a00 	vldr	s15, [r3]
 800c4be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c6:	dd35      	ble.n	800c534 <HAL_TIM_PeriodElapsedCallback+0x344>
 800c4c8:	4b19      	ldr	r3, [pc, #100]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800c4ca:	edd3 7a00 	vldr	s15, [r3]
 800c4ce:	e034      	b.n	800c53a <HAL_TIM_PeriodElapsedCallback+0x34a>
 800c4d0:	775e3793 	.word	0x775e3793
 800c4d4:	3f552a9e 	.word	0x3f552a9e
 800c4d8:	d2f1a9fc 	.word	0xd2f1a9fc
 800c4dc:	3f50624d 	.word	0x3f50624d
 800c4e0:	20000bb4 	.word	0x20000bb4
 800c4e4:	40000800 	.word	0x40000800
 800c4e8:	200002ac 	.word	0x200002ac
 800c4ec:	40010400 	.word	0x40010400
 800c4f0:	20000bac 	.word	0x20000bac
 800c4f4:	471c4000 	.word	0x471c4000
 800c4f8:	477fff00 	.word	0x477fff00
 800c4fc:	200015c4 	.word	0x200015c4
 800c500:	20000aec 	.word	0x20000aec
 800c504:	20000af0 	.word	0x20000af0
 800c508:	200002bc 	.word	0x200002bc
 800c50c:	20000f68 	.word	0x20000f68
 800c510:	20000d58 	.word	0x20000d58
 800c514:	20000bfc 	.word	0x20000bfc
 800c518:	2000077c 	.word	0x2000077c
 800c51c:	20000b54 	.word	0x20000b54
 800c520:	20000b60 	.word	0x20000b60
 800c524:	20000ba8 	.word	0x20000ba8
 800c528:	20000ae4 	.word	0x20000ae4
 800c52c:	200001a0 	.word	0x200001a0
 800c530:	200001a4 	.word	0x200001a4
 800c534:	4ba4      	ldr	r3, [pc, #656]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c536:	edd3 7a00 	vldr	s15, [r3]
 800c53a:	4ba4      	ldr	r3, [pc, #656]	; (800c7cc <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800c53c:	ed93 7a00 	vldr	s14, [r3]
 800c540:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c548:	dd10      	ble.n	800c56c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800c54a:	4b9f      	ldr	r3, [pc, #636]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c54c:	ed93 7a00 	vldr	s14, [r3]
 800c550:	4b9f      	ldr	r3, [pc, #636]	; (800c7d0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800c552:	edd3 7a00 	vldr	s15, [r3]
 800c556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c55e:	dd02      	ble.n	800c566 <HAL_TIM_PeriodElapsedCallback+0x376>
 800c560:	4b9b      	ldr	r3, [pc, #620]	; (800c7d0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	e004      	b.n	800c570 <HAL_TIM_PeriodElapsedCallback+0x380>
 800c566:	4b98      	ldr	r3, [pc, #608]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	e001      	b.n	800c570 <HAL_TIM_PeriodElapsedCallback+0x380>
 800c56c:	4b97      	ldr	r3, [pc, #604]	; (800c7cc <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a95      	ldr	r2, [pc, #596]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c572:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800c574:	4b94      	ldr	r3, [pc, #592]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c576:	ed93 7a00 	vldr	s14, [r3]
 800c57a:	4b96      	ldr	r3, [pc, #600]	; (800c7d4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800c57c:	edd3 7a00 	vldr	s15, [r3]
 800c580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c584:	4b94      	ldr	r3, [pc, #592]	; (800c7d8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800c586:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c58a:	4b93      	ldr	r3, [pc, #588]	; (800c7d8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800c58c:	edd3 7a00 	vldr	s15, [r3]
 800c590:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c594:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c598:	4b90      	ldr	r3, [pc, #576]	; (800c7dc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800c59a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800c59e:	4b90      	ldr	r3, [pc, #576]	; (800c7e0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a8e      	ldr	r2, [pc, #568]	; (800c7e0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5a6:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800c5a8:	4b8d      	ldr	r3, [pc, #564]	; (800c7e0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	dd37      	ble.n	800c620 <HAL_TIM_PeriodElapsedCallback+0x430>
 800c5b0:	4b8c      	ldr	r3, [pc, #560]	; (800c7e4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d030      	beq.n	800c620 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800c5be:	4b88      	ldr	r3, [pc, #544]	; (800c7e0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800c5c4:	4b88      	ldr	r3, [pc, #544]	; (800c7e8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2bc7      	cmp	r3, #199	; 0xc7
 800c5ca:	dc29      	bgt.n	800c620 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800c5cc:	4b87      	ldr	r3, [pc, #540]	; (800c7ec <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800c5ce:	edd3 7a00 	vldr	s15, [r3]
 800c5d2:	4b85      	ldr	r3, [pc, #532]	; (800c7e8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5da:	ee17 1a90 	vmov	r1, s15
 800c5de:	4a84      	ldr	r2, [pc, #528]	; (800c7f0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800c5e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800c5e4:	4b7b      	ldr	r3, [pc, #492]	; (800c7d4 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800c5e6:	edd3 7a00 	vldr	s15, [r3]
 800c5ea:	4b7f      	ldr	r3, [pc, #508]	; (800c7e8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5f2:	ee17 1a90 	vmov	r1, s15
 800c5f6:	4a7f      	ldr	r2, [pc, #508]	; (800c7f4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800c5f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800c5fc:	f7ff fd98 	bl	800c130 <gyro_read_z>
 800c600:	eef0 7a40 	vmov.f32	s15, s0
 800c604:	4b78      	ldr	r3, [pc, #480]	; (800c7e8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c60c:	ee17 1a90 	vmov	r1, s15
 800c610:	4a79      	ldr	r2, [pc, #484]	; (800c7f8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800c612:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800c616:	4b74      	ldr	r3, [pc, #464]	; (800c7e8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3301      	adds	r3, #1
 800c61c:	4a72      	ldr	r2, [pc, #456]	; (800c7e8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c61e:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800c620:	f7ff fd86 	bl	800c130 <gyro_read_z>
 800c624:	ee10 3a10 	vmov	r3, s0
 800c628:	4618      	mov	r0, r3
 800c62a:	f7f3 ff85 	bl	8000538 <__aeabi_f2d>
 800c62e:	a362      	add	r3, pc, #392	; (adr r3, 800c7b8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f7f3 ffd8 	bl	80005e8 <__aeabi_dmul>
 800c638:	4603      	mov	r3, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	4625      	mov	r5, r4
 800c63e:	461c      	mov	r4, r3
 800c640:	4b6e      	ldr	r3, [pc, #440]	; (800c7fc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4618      	mov	r0, r3
 800c646:	f7f3 ff77 	bl	8000538 <__aeabi_f2d>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 fe13 	bl	800027c <__adddf3>
 800c656:	4603      	mov	r3, r0
 800c658:	460c      	mov	r4, r1
 800c65a:	4618      	mov	r0, r3
 800c65c:	4621      	mov	r1, r4
 800c65e:	f7f4 fa9b 	bl	8000b98 <__aeabi_d2f>
 800c662:	4602      	mov	r2, r0
 800c664:	4b65      	ldr	r3, [pc, #404]	; (800c7fc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c666:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800c668:	4b5e      	ldr	r3, [pc, #376]	; (800c7e4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d04d      	beq.n	800c712 <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800c676:	4b62      	ldr	r3, [pc, #392]	; (800c800 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	4a60      	ldr	r2, [pc, #384]	; (800c800 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c67e:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800c680:	4b5f      	ldr	r3, [pc, #380]	; (800c800 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	dd10      	ble.n	800c6aa <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800c688:	4b5e      	ldr	r3, [pc, #376]	; (800c804 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800c68a:	ed93 8a00 	vldr	s16, [r3]
 800c68e:	f7ff fd4f 	bl	800c130 <gyro_read_z>
 800c692:	eef0 7a40 	vmov.f32	s15, s0
 800c696:	ee38 7a67 	vsub.f32	s14, s16, s15
 800c69a:	4b5b      	ldr	r3, [pc, #364]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800c69c:	edd3 7a00 	vldr	s15, [r3]
 800c6a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6a4:	4b58      	ldr	r3, [pc, #352]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800c6a6:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800c6aa:	f7ff fd41 	bl	800c130 <gyro_read_z>
 800c6ae:	eef0 7a40 	vmov.f32	s15, s0
 800c6b2:	4b54      	ldr	r3, [pc, #336]	; (800c804 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800c6b4:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800c6b8:	2006      	movs	r0, #6
 800c6ba:	f004 ff4f 	bl	801155c <full_led_write>
			if(gyro_cnt >= 1001) {
 800c6be:	4b50      	ldr	r3, [pc, #320]	; (800c800 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6c6:	dd1c      	ble.n	800c702 <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800c6c8:	4a46      	ldr	r2, [pc, #280]	; (800c7e4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c6ca:	8813      	ldrh	r3, [r2, #0]
 800c6cc:	f36f 13c7 	bfc	r3, #7, #1
 800c6d0:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800c6d2:	4b4d      	ldr	r3, [pc, #308]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800c6d4:	edd3 6a00 	vldr	s13, [r3]
 800c6d8:	4b49      	ldr	r3, [pc, #292]	; (800c800 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	ee07 3a90 	vmov	s15, r3
 800c6e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c6e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6f0:	4b46      	ldr	r3, [pc, #280]	; (800c80c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800c6f2:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800c6f6:	4b42      	ldr	r3, [pc, #264]	; (800c800 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800c6fc:	2004      	movs	r0, #4
 800c6fe:	f004 ff2d 	bl	801155c <full_led_write>
			}
			degree_z = 0;
 800c702:	4b3e      	ldr	r3, [pc, #248]	; (800c7fc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800c70a:	4b41      	ldr	r3, [pc, #260]	; (800c810 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800c70c:	f04f 0200 	mov.w	r2, #0
 800c710:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800c712:	4b34      	ldr	r3, [pc, #208]	; (800c7e4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 80d6 	beq.w	800c8ce <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800c722:	4b36      	ldr	r3, [pc, #216]	; (800c7fc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c724:	ed93 7a00 	vldr	s14, [r3]
 800c728:	4b39      	ldr	r3, [pc, #228]	; (800c810 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800c72a:	edd3 7a00 	vldr	s15, [r3]
 800c72e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c732:	ee17 0a90 	vmov	r0, s15
 800c736:	f7f3 feff 	bl	8000538 <__aeabi_f2d>
 800c73a:	a321      	add	r3, pc, #132	; (adr r3, 800c7c0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 ff52 	bl	80005e8 <__aeabi_dmul>
 800c744:	4603      	mov	r3, r0
 800c746:	460c      	mov	r4, r1
 800c748:	4618      	mov	r0, r3
 800c74a:	4621      	mov	r1, r4
 800c74c:	f7f4 fa24 	bl	8000b98 <__aeabi_d2f>
 800c750:	4602      	mov	r2, r0
 800c752:	4b30      	ldr	r3, [pc, #192]	; (800c814 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800c754:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800c756:	4b2f      	ldr	r3, [pc, #188]	; (800c814 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800c758:	edd3 7a00 	vldr	s15, [r3]
 800c75c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c764:	dd5c      	ble.n	800c820 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800c766:	4b2c      	ldr	r3, [pc, #176]	; (800c818 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800c768:	edd3 7a00 	vldr	s15, [r3]
 800c76c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c770:	4b28      	ldr	r3, [pc, #160]	; (800c814 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800c772:	edd3 7a00 	vldr	s15, [r3]
 800c776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c77a:	ee17 0a90 	vmov	r0, s15
 800c77e:	f7f3 fedb 	bl	8000538 <__aeabi_f2d>
 800c782:	4603      	mov	r3, r0
 800c784:	460c      	mov	r4, r1
 800c786:	ec44 3b10 	vmov	d0, r3, r4
 800c78a:	f006 fc81 	bl	8013090 <sqrt>
 800c78e:	ec54 3b10 	vmov	r3, r4, d0
 800c792:	4618      	mov	r0, r3
 800c794:	4621      	mov	r1, r4
 800c796:	f7f4 f9ff 	bl	8000b98 <__aeabi_d2f>
 800c79a:	4602      	mov	r2, r0
 800c79c:	4b1f      	ldr	r3, [pc, #124]	; (800c81c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800c79e:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800c7a0:	4b1e      	ldr	r3, [pc, #120]	; (800c81c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800c7a2:	edd3 7a00 	vldr	s15, [r3]
 800c7a6:	eef1 7a67 	vneg.f32	s15, s15
 800c7aa:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c7ac:	edc3 7a00 	vstr	s15, [r3]
 800c7b0:	e063      	b.n	800c87a <HAL_TIM_PeriodElapsedCallback+0x68a>
 800c7b2:	bf00      	nop
 800c7b4:	f3af 8000 	nop.w
 800c7b8:	d2f1a9fc 	.word	0xd2f1a9fc
 800c7bc:	3f50624d 	.word	0x3f50624d
 800c7c0:	d7653223 	.word	0xd7653223
 800c7c4:	3fe26e40 	.word	0x3fe26e40
 800c7c8:	200001a0 	.word	0x200001a0
 800c7cc:	20000f6c 	.word	0x20000f6c
 800c7d0:	200001a4 	.word	0x200001a4
 800c7d4:	200002bc 	.word	0x200002bc
 800c7d8:	20000c08 	.word	0x20000c08
 800c7dc:	20000780 	.word	0x20000780
 800c7e0:	20000108 	.word	0x20000108
 800c7e4:	20000f64 	.word	0x20000f64
 800c7e8:	20000110 	.word	0x20000110
 800c7ec:	20000af0 	.word	0x20000af0
 800c7f0:	20000784 	.word	0x20000784
 800c7f4:	2000045c 	.word	0x2000045c
 800c7f8:	200012a4 	.word	0x200012a4
 800c7fc:	20000b5c 	.word	0x20000b5c
 800c800:	2000010c 	.word	0x2000010c
 800c804:	200015cc 	.word	0x200015cc
 800c808:	20000ba4 	.word	0x20000ba4
 800c80c:	20000bf4 	.word	0x20000bf4
 800c810:	20000bf8 	.word	0x20000bf8
 800c814:	20000f78 	.word	0x20000f78
 800c818:	20000d58 	.word	0x20000d58
 800c81c:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800c820:	4bac      	ldr	r3, [pc, #688]	; (800cad4 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800c822:	edd3 7a00 	vldr	s15, [r3]
 800c826:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c82a:	4bab      	ldr	r3, [pc, #684]	; (800cad8 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800c82c:	edd3 7a00 	vldr	s15, [r3]
 800c830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c834:	eef1 7a67 	vneg.f32	s15, s15
 800c838:	ee17 3a90 	vmov	r3, s15
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7f3 fe7b 	bl	8000538 <__aeabi_f2d>
 800c842:	4603      	mov	r3, r0
 800c844:	460c      	mov	r4, r1
 800c846:	ec44 3b10 	vmov	d0, r3, r4
 800c84a:	f006 fc21 	bl	8013090 <sqrt>
 800c84e:	ec54 3b10 	vmov	r3, r4, d0
 800c852:	4618      	mov	r0, r3
 800c854:	4621      	mov	r1, r4
 800c856:	f7f4 f99f 	bl	8000b98 <__aeabi_d2f>
 800c85a:	4603      	mov	r3, r0
 800c85c:	ee07 3a90 	vmov	s15, r3
 800c860:	eef1 7a67 	vneg.f32	s15, s15
 800c864:	4b9d      	ldr	r3, [pc, #628]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c866:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800c86a:	4b9c      	ldr	r3, [pc, #624]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c86c:	edd3 7a00 	vldr	s15, [r3]
 800c870:	eef1 7a67 	vneg.f32	s15, s15
 800c874:	4b9a      	ldr	r3, [pc, #616]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c876:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800c87a:	4b98      	ldr	r3, [pc, #608]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c87c:	ed93 7a00 	vldr	s14, [r3]
 800c880:	4b98      	ldr	r3, [pc, #608]	; (800cae4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800c882:	edd3 7a00 	vldr	s15, [r3]
 800c886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c88a:	4b97      	ldr	r3, [pc, #604]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c88c:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c890:	4b95      	ldr	r3, [pc, #596]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c892:	edd3 7a00 	vldr	s15, [r3]
 800c896:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c89a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c89e:	4b93      	ldr	r3, [pc, #588]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c8a0:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c8a4:	4b8e      	ldr	r3, [pc, #568]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c8a6:	ed93 7a00 	vldr	s14, [r3]
 800c8aa:	4b91      	ldr	r3, [pc, #580]	; (800caf0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800c8ac:	edd3 7a00 	vldr	s15, [r3]
 800c8b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8b4:	4b8f      	ldr	r3, [pc, #572]	; (800caf4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c8b6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c8ba:	4b8e      	ldr	r3, [pc, #568]	; (800caf4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c8bc:	edd3 7a00 	vldr	s15, [r3]
 800c8c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c8c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8c8:	4b8b      	ldr	r3, [pc, #556]	; (800caf8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c8ca:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800c8ce:	4b8b      	ldr	r3, [pc, #556]	; (800cafc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 8124 	beq.w	800cb26 <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800c8de:	4b88      	ldr	r3, [pc, #544]	; (800cb00 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	b21b      	sxth	r3, r3
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7f3 fe10 	bl	8000514 <__aeabi_i2d>
 800c8f4:	f04f 0200 	mov.w	r2, #0
 800c8f8:	4b82      	ldr	r3, [pc, #520]	; (800cb04 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800c8fa:	f7f3 fe75 	bl	80005e8 <__aeabi_dmul>
 800c8fe:	4603      	mov	r3, r0
 800c900:	460c      	mov	r4, r1
 800c902:	4618      	mov	r0, r3
 800c904:	4621      	mov	r1, r4
 800c906:	f7f4 f947 	bl	8000b98 <__aeabi_d2f>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b73      	ldr	r3, [pc, #460]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c90e:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800c910:	4b7d      	ldr	r3, [pc, #500]	; (800cb08 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	b29b      	uxth	r3, r3
 800c916:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	b21b      	sxth	r3, r3
 800c91e:	ee07 3a90 	vmov	s15, r3
 800c922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c926:	4b6e      	ldr	r3, [pc, #440]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c928:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800c92c:	4b6b      	ldr	r3, [pc, #428]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c92e:	ed93 7a00 	vldr	s14, [r3]
 800c932:	4b6a      	ldr	r3, [pc, #424]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c934:	edd3 7a00 	vldr	s15, [r3]
 800c938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c93c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cb0c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800c940:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c948:	d503      	bpl.n	800c952 <HAL_TIM_PeriodElapsedCallback+0x762>
 800c94a:	4b64      	ldr	r3, [pc, #400]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800c952:	4b63      	ldr	r3, [pc, #396]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c954:	ed93 7a00 	vldr	s14, [r3]
 800c958:	4b61      	ldr	r3, [pc, #388]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c95a:	edd3 7a00 	vldr	s15, [r3]
 800c95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c962:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800cb0c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800c966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96e:	d503      	bpl.n	800c978 <HAL_TIM_PeriodElapsedCallback+0x788>
 800c970:	4b5b      	ldr	r3, [pc, #364]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c972:	f04f 0200 	mov.w	r2, #0
 800c976:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800c978:	4b58      	ldr	r3, [pc, #352]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c97a:	edd3 7a00 	vldr	s15, [r3]
 800c97e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c986:	d111      	bne.n	800c9ac <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800c988:	4b55      	ldr	r3, [pc, #340]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c98a:	edd3 7a00 	vldr	s15, [r3]
 800c98e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c996:	d109      	bne.n	800c9ac <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800c998:	4a58      	ldr	r2, [pc, #352]	; (800cafc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800c99a:	8813      	ldrh	r3, [r2, #0]
 800c99c:	f36f 13c7 	bfc	r3, #7, #1
 800c9a0:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800c9a2:	4a56      	ldr	r2, [pc, #344]	; (800cafc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800c9a4:	8813      	ldrh	r3, [r2, #0]
 800c9a6:	f36f 0341 	bfc	r3, #1, #1
 800c9aa:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800c9ac:	4b4b      	ldr	r3, [pc, #300]	; (800cadc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c9ae:	ed93 7a00 	vldr	s14, [r3]
 800c9b2:	4b4c      	ldr	r3, [pc, #304]	; (800cae4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800c9b4:	edd3 7a00 	vldr	s15, [r3]
 800c9b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9bc:	4b4a      	ldr	r3, [pc, #296]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c9be:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c9c2:	4b49      	ldr	r3, [pc, #292]	; (800cae8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c9c4:	edd3 7a00 	vldr	s15, [r3]
 800c9c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c9cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9d0:	4b46      	ldr	r3, [pc, #280]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c9d2:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c9d6:	4b42      	ldr	r3, [pc, #264]	; (800cae0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c9d8:	ed93 7a00 	vldr	s14, [r3]
 800c9dc:	4b44      	ldr	r3, [pc, #272]	; (800caf0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800c9de:	edd3 7a00 	vldr	s15, [r3]
 800c9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9e6:	4b43      	ldr	r3, [pc, #268]	; (800caf4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c9e8:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c9ec:	4b41      	ldr	r3, [pc, #260]	; (800caf4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c9ee:	edd3 7a00 	vldr	s15, [r3]
 800c9f2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c9f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9fa:	4b3f      	ldr	r3, [pc, #252]	; (800caf8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c9fc:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800ca00:	4b3a      	ldr	r3, [pc, #232]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca02:	edd3 7a00 	vldr	s15, [r3]
 800ca06:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800cb10 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ca0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	bfcc      	ite	gt
 800ca14:	2301      	movgt	r3, #1
 800ca16:	2300      	movle	r3, #0
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	f083 0301 	eor.w	r3, r3, #1
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d111      	bne.n	800ca48 <HAL_TIM_PeriodElapsedCallback+0x858>
 800ca24:	4b31      	ldr	r3, [pc, #196]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca26:	edd3 7a00 	vldr	s15, [r3]
 800ca2a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800cb14 <HAL_TIM_PeriodElapsedCallback+0x924>
 800ca2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca36:	bfcc      	ite	gt
 800ca38:	2301      	movgt	r3, #1
 800ca3a:	2300      	movle	r3, #0
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f083 0301 	eor.w	r3, r3, #1
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00e      	beq.n	800ca66 <HAL_TIM_PeriodElapsedCallback+0x876>
 800ca48:	4b28      	ldr	r3, [pc, #160]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca4a:	edd3 7a00 	vldr	s15, [r3]
 800ca4e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800cb10 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ca52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5a:	dd02      	ble.n	800ca62 <HAL_TIM_PeriodElapsedCallback+0x872>
 800ca5c:	4b23      	ldr	r3, [pc, #140]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	e002      	b.n	800ca68 <HAL_TIM_PeriodElapsedCallback+0x878>
 800ca62:	4b2d      	ldr	r3, [pc, #180]	; (800cb18 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800ca64:	e000      	b.n	800ca68 <HAL_TIM_PeriodElapsedCallback+0x878>
 800ca66:	4b2d      	ldr	r3, [pc, #180]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800ca68:	4a20      	ldr	r2, [pc, #128]	; (800caec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca6a:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800ca6c:	4b22      	ldr	r3, [pc, #136]	; (800caf8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ca6e:	edd3 7a00 	vldr	s15, [r3]
 800ca72:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800cb10 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ca76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7e:	bfcc      	ite	gt
 800ca80:	2301      	movgt	r3, #1
 800ca82:	2300      	movle	r3, #0
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f083 0301 	eor.w	r3, r3, #1
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d111      	bne.n	800cab4 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800ca90:	4b19      	ldr	r3, [pc, #100]	; (800caf8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ca92:	edd3 7a00 	vldr	s15, [r3]
 800ca96:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cb14 <HAL_TIM_PeriodElapsedCallback+0x924>
 800ca9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa2:	bfcc      	ite	gt
 800caa4:	2301      	movgt	r3, #1
 800caa6:	2300      	movle	r3, #0
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f083 0301 	eor.w	r3, r3, #1
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d035      	beq.n	800cb20 <HAL_TIM_PeriodElapsedCallback+0x930>
 800cab4:	4b10      	ldr	r3, [pc, #64]	; (800caf8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800cab6:	edd3 7a00 	vldr	s15, [r3]
 800caba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800cb10 <HAL_TIM_PeriodElapsedCallback+0x920>
 800cabe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac6:	dd02      	ble.n	800cace <HAL_TIM_PeriodElapsedCallback+0x8de>
 800cac8:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	e029      	b.n	800cb22 <HAL_TIM_PeriodElapsedCallback+0x932>
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800cad0:	e027      	b.n	800cb22 <HAL_TIM_PeriodElapsedCallback+0x932>
 800cad2:	bf00      	nop
 800cad4:	20000d58 	.word	0x20000d58
 800cad8:	20000f78 	.word	0x20000f78
 800cadc:	20000bfc 	.word	0x20000bfc
 800cae0:	200001a0 	.word	0x200001a0
 800cae4:	20000af0 	.word	0x20000af0
 800cae8:	20000b60 	.word	0x20000b60
 800caec:	20000ba8 	.word	0x20000ba8
 800caf0:	200002bc 	.word	0x200002bc
 800caf4:	20000c08 	.word	0x20000c08
 800caf8:	20000780 	.word	0x20000780
 800cafc:	20000f68 	.word	0x20000f68
 800cb00:	20000d54 	.word	0x20000d54
 800cb04:	3fe00000 	.word	0x3fe00000
 800cb08:	20000c00 	.word	0x20000c00
 800cb0c:	451c4000 	.word	0x451c4000
 800cb10:	c2c80000 	.word	0xc2c80000
 800cb14:	42c80000 	.word	0x42c80000
 800cb18:	c2c80000 	.word	0xc2c80000
 800cb1c:	42c80000 	.word	0x42c80000
 800cb20:	4bbf      	ldr	r3, [pc, #764]	; (800ce20 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800cb22:	4ac0      	ldr	r2, [pc, #768]	; (800ce24 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800cb24:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800cb26:	4bc0      	ldr	r3, [pc, #768]	; (800ce28 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 810b 	beq.w	800cd4c <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800cb36:	4bbd      	ldr	r3, [pc, #756]	; (800ce2c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f3 fcfc 	bl	8000538 <__aeabi_f2d>
 800cb40:	a3b3      	add	r3, pc, #716	; (adr r3, 800ce10 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb46:	f7f3 fd4f 	bl	80005e8 <__aeabi_dmul>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	4625      	mov	r5, r4
 800cb50:	461c      	mov	r4, r3
 800cb52:	4bb7      	ldr	r3, [pc, #732]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7f3 fcee 	bl	8000538 <__aeabi_f2d>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fb8a 	bl	800027c <__adddf3>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	4621      	mov	r1, r4
 800cb70:	f7f4 f812 	bl	8000b98 <__aeabi_d2f>
 800cb74:	4602      	mov	r2, r0
 800cb76:	4bae      	ldr	r3, [pc, #696]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cb78:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800cb7a:	4bad      	ldr	r3, [pc, #692]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cb7c:	ed93 7a00 	vldr	s14, [r3]
 800cb80:	4bac      	ldr	r3, [pc, #688]	; (800ce34 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cb82:	edd3 7a00 	vldr	s15, [r3]
 800cb86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8e:	dd03      	ble.n	800cb98 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800cb90:	4ba8      	ldr	r3, [pc, #672]	; (800ce34 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cb92:	edd3 7a00 	vldr	s15, [r3]
 800cb96:	e002      	b.n	800cb9e <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800cb98:	4ba5      	ldr	r3, [pc, #660]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cb9a:	edd3 7a00 	vldr	s15, [r3]
 800cb9e:	4ba6      	ldr	r3, [pc, #664]	; (800ce38 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800cba0:	ed93 7a00 	vldr	s14, [r3]
 800cba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbac:	dd10      	ble.n	800cbd0 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800cbae:	4ba0      	ldr	r3, [pc, #640]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbb0:	ed93 7a00 	vldr	s14, [r3]
 800cbb4:	4b9f      	ldr	r3, [pc, #636]	; (800ce34 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cbb6:	edd3 7a00 	vldr	s15, [r3]
 800cbba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc2:	dd02      	ble.n	800cbca <HAL_TIM_PeriodElapsedCallback+0x9da>
 800cbc4:	4b9b      	ldr	r3, [pc, #620]	; (800ce34 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	e004      	b.n	800cbd4 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800cbca:	4b99      	ldr	r3, [pc, #612]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	e001      	b.n	800cbd4 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800cbd0:	4b99      	ldr	r3, [pc, #612]	; (800ce38 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a96      	ldr	r2, [pc, #600]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbd6:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800cbd8:	4b95      	ldr	r3, [pc, #596]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbda:	ed93 8a00 	vldr	s16, [r3]
 800cbde:	f7ff faa7 	bl	800c130 <gyro_read_z>
 800cbe2:	eef0 7a40 	vmov.f32	s15, s0
 800cbe6:	ee78 7a67 	vsub.f32	s15, s16, s15
 800cbea:	4b94      	ldr	r3, [pc, #592]	; (800ce3c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800cbec:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800cbf0:	4b93      	ldr	r3, [pc, #588]	; (800ce40 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7f3 fc9f 	bl	8000538 <__aeabi_f2d>
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	4b8f      	ldr	r3, [pc, #572]	; (800ce3c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800cc00:	edd3 7a00 	vldr	s15, [r3]
 800cc04:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cc08:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc0c:	4b88      	ldr	r3, [pc, #544]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cc0e:	edd3 7a00 	vldr	s15, [r3]
 800cc12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc16:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800ce44 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800cc1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cc1e:	ee16 0a90 	vmov	r0, s13
 800cc22:	f7f3 fc89 	bl	8000538 <__aeabi_f2d>
 800cc26:	a37c      	add	r3, pc, #496	; (adr r3, 800ce18 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f7f3 fcdc 	bl	80005e8 <__aeabi_dmul>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4610      	mov	r0, r2
 800cc36:	4619      	mov	r1, r3
 800cc38:	f04f 0200 	mov.w	r2, #0
 800cc3c:	4b82      	ldr	r3, [pc, #520]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800cc3e:	f7f3 fcd3 	bl	80005e8 <__aeabi_dmul>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4610      	mov	r0, r2
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f04f 0200 	mov.w	r2, #0
 800cc4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc52:	f7f3 fdf3 	bl	800083c <__aeabi_ddiv>
 800cc56:	4602      	mov	r2, r0
 800cc58:	460b      	mov	r3, r1
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	f7f3 fb0b 	bl	8000278 <__aeabi_dsub>
 800cc62:	4603      	mov	r3, r0
 800cc64:	460c      	mov	r4, r1
 800cc66:	4618      	mov	r0, r3
 800cc68:	4621      	mov	r1, r4
 800cc6a:	f7f3 ff95 	bl	8000b98 <__aeabi_d2f>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	4b76      	ldr	r3, [pc, #472]	; (800ce4c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800cc72:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800cc74:	4b72      	ldr	r3, [pc, #456]	; (800ce40 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7f3 fc5d 	bl	8000538 <__aeabi_f2d>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	460d      	mov	r5, r1
 800cc82:	4b6e      	ldr	r3, [pc, #440]	; (800ce3c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800cc84:	edd3 7a00 	vldr	s15, [r3]
 800cc88:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cc8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc90:	4b67      	ldr	r3, [pc, #412]	; (800ce30 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cc92:	edd3 7a00 	vldr	s15, [r3]
 800cc96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc9a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ce44 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800cc9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cca2:	ee16 0a90 	vmov	r0, s13
 800cca6:	f7f3 fc47 	bl	8000538 <__aeabi_f2d>
 800ccaa:	a35b      	add	r3, pc, #364	; (adr r3, 800ce18 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f7f3 fc9a 	bl	80005e8 <__aeabi_dmul>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4610      	mov	r0, r2
 800ccba:	4619      	mov	r1, r3
 800ccbc:	f04f 0200 	mov.w	r2, #0
 800ccc0:	4b61      	ldr	r3, [pc, #388]	; (800ce48 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800ccc2:	f7f3 fc91 	bl	80005e8 <__aeabi_dmul>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4610      	mov	r0, r2
 800cccc:	4619      	mov	r1, r3
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccd6:	f7f3 fdb1 	bl	800083c <__aeabi_ddiv>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f3 facb 	bl	800027c <__adddf3>
 800cce6:	4603      	mov	r3, r0
 800cce8:	460c      	mov	r4, r1
 800ccea:	4618      	mov	r0, r3
 800ccec:	4621      	mov	r1, r4
 800ccee:	f7f3 ff53 	bl	8000b98 <__aeabi_d2f>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	4b56      	ldr	r3, [pc, #344]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800ccf6:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800ccf8:	4b54      	ldr	r3, [pc, #336]	; (800ce4c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800ccfa:	ed93 7a00 	vldr	s14, [r3]
 800ccfe:	4b55      	ldr	r3, [pc, #340]	; (800ce54 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800cd00:	edd3 7a00 	vldr	s15, [r3]
 800cd04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd08:	4b53      	ldr	r3, [pc, #332]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800cd0a:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800cd0e:	4b52      	ldr	r3, [pc, #328]	; (800ce58 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800cd10:	edd3 7a00 	vldr	s15, [r3]
 800cd14:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cd18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd1c:	4b4f      	ldr	r3, [pc, #316]	; (800ce5c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800cd1e:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800cd22:	4b4b      	ldr	r3, [pc, #300]	; (800ce50 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800cd24:	ed93 7a00 	vldr	s14, [r3]
 800cd28:	4b4d      	ldr	r3, [pc, #308]	; (800ce60 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800cd2a:	edd3 7a00 	vldr	s15, [r3]
 800cd2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd32:	4b4c      	ldr	r3, [pc, #304]	; (800ce64 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800cd34:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800cd38:	4b4a      	ldr	r3, [pc, #296]	; (800ce64 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800cd3a:	edd3 7a00 	vldr	s15, [r3]
 800cd3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cd42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd46:	4b37      	ldr	r3, [pc, #220]	; (800ce24 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800cd48:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800cd4c:	4b46      	ldr	r3, [pc, #280]	; (800ce68 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	4b46      	ldr	r3, [pc, #280]	; (800ce6c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800cd54:	fb83 3102 	smull	r3, r1, r3, r2
 800cd58:	17d3      	asrs	r3, r2, #31
 800cd5a:	1ac9      	subs	r1, r1, r3
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	440b      	add	r3, r1
 800cd62:	1ad1      	subs	r1, r2, r3
 800cd64:	b2ca      	uxtb	r2, r1
 800cd66:	4b40      	ldr	r3, [pc, #256]	; (800ce68 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800cd68:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800cd6a:	4b3f      	ldr	r3, [pc, #252]	; (800ce68 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d044      	beq.n	800cdfc <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	f000 80bc 	beq.w	800cef0 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f040 82da 	bne.w	800d332 <HAL_TIM_PeriodElapsedCallback+0x1142>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cd84:	483a      	ldr	r0, [pc, #232]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800cd86:	f7f5 fabd 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cd8e:	e002      	b.n	800cd96 <HAL_TIM_PeriodElapsedCallback+0xba6>
 800cd90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd92:	3301      	adds	r3, #1
 800cd94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cd96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd98:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d9f7      	bls.n	800cd90 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800cda0:	2103      	movs	r1, #3
 800cda2:	4834      	ldr	r0, [pc, #208]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800cda4:	f001 fa38 	bl	800e218 <get_adc_value>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4b32      	ldr	r3, [pc, #200]	; (800ce78 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800cdae:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cdb6:	482e      	ldr	r0, [pc, #184]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800cdb8:	f7f5 faa4 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdc2:	482e      	ldr	r0, [pc, #184]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800cdc4:	f7f5 fa9e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800cdc8:	2300      	movs	r3, #0
 800cdca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cdcc:	e002      	b.n	800cdd4 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800cdce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cdd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdd6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d9f7      	bls.n	800cdce <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800cdde:	2101      	movs	r1, #1
 800cde0:	4824      	ldr	r0, [pc, #144]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800cde2:	f001 fa19 	bl	800e218 <get_adc_value>
 800cde6:	4603      	mov	r3, r0
 800cde8:	461a      	mov	r2, r3
 800cdea:	4b25      	ldr	r3, [pc, #148]	; (800ce80 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800cdec:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdf4:	4821      	ldr	r0, [pc, #132]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800cdf6:	f7f5 fa85 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800cdfa:	e29a      	b.n	800d332 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ce02:	481b      	ldr	r0, [pc, #108]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800ce04:	f7f5 fa7e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800ce08:	2300      	movs	r3, #0
 800ce0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce0c:	e03d      	b.n	800ce8a <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800ce0e:	bf00      	nop
 800ce10:	d2f1a9fc 	.word	0xd2f1a9fc
 800ce14:	3f50624d 	.word	0x3f50624d
 800ce18:	54442d18 	.word	0x54442d18
 800ce1c:	400921fb 	.word	0x400921fb
 800ce20:	42c80000 	.word	0x42c80000
 800ce24:	20000780 	.word	0x20000780
 800ce28:	20000f68 	.word	0x20000f68
 800ce2c:	20000b58 	.word	0x20000b58
 800ce30:	200001a8 	.word	0x200001a8
 800ce34:	20000ae8 	.word	0x20000ae8
 800ce38:	200002b8 	.word	0x200002b8
 800ce3c:	20000458 	.word	0x20000458
 800ce40:	20000af4 	.word	0x20000af4
 800ce44:	43340000 	.word	0x43340000
 800ce48:	40508000 	.word	0x40508000
 800ce4c:	20000bfc 	.word	0x20000bfc
 800ce50:	200001a0 	.word	0x200001a0
 800ce54:	20000af0 	.word	0x20000af0
 800ce58:	20000b60 	.word	0x20000b60
 800ce5c:	20000ba8 	.word	0x20000ba8
 800ce60:	200002bc 	.word	0x200002bc
 800ce64:	20000c08 	.word	0x20000c08
 800ce68:	200012a0 	.word	0x200012a0
 800ce6c:	55555556 	.word	0x55555556
 800ce70:	40020800 	.word	0x40020800
 800ce74:	20000b00 	.word	0x20000b00
 800ce78:	20000afc 	.word	0x20000afc
 800ce7c:	40020000 	.word	0x40020000
 800ce80:	20000f60 	.word	0x20000f60
 800ce84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce86:	3301      	adds	r3, #1
 800ce88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce8c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d9f7      	bls.n	800ce84 <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800ce94:	2102      	movs	r1, #2
 800ce96:	48b4      	ldr	r0, [pc, #720]	; (800d168 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800ce98:	f001 f9be 	bl	800e218 <get_adc_value>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	461a      	mov	r2, r3
 800cea0:	4bb2      	ldr	r3, [pc, #712]	; (800d16c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800cea2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800cea4:	2200      	movs	r2, #0
 800cea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ceaa:	48b1      	ldr	r0, [pc, #708]	; (800d170 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800ceac:	f7f5 fa2a 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ceb6:	48ae      	ldr	r0, [pc, #696]	; (800d170 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800ceb8:	f7f5 fa24 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800cebc:	2300      	movs	r3, #0
 800cebe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cec0:	e002      	b.n	800cec8 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800cec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cec4:	3301      	adds	r3, #1
 800cec6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cec8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ceca:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cece:	4293      	cmp	r3, r2
 800ced0:	d9f7      	bls.n	800cec2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800ced2:	2100      	movs	r1, #0
 800ced4:	48a4      	ldr	r0, [pc, #656]	; (800d168 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800ced6:	f001 f99f 	bl	800e218 <get_adc_value>
 800ceda:	4603      	mov	r3, r0
 800cedc:	461a      	mov	r2, r3
 800cede:	4ba5      	ldr	r3, [pc, #660]	; (800d174 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800cee0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cee2:	2200      	movs	r2, #0
 800cee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cee8:	48a1      	ldr	r0, [pc, #644]	; (800d170 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800ceea:	f7f5 fa0b 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800ceee:	e220      	b.n	800d332 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800cef0:	4ba1      	ldr	r3, [pc, #644]	; (800d178 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 81c5 	beq.w	800d28a <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800cf00:	4b9e      	ldr	r3, [pc, #632]	; (800d17c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f040 80bb 	bne.w	800d086 <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cf14:	2300      	movs	r3, #0
 800cf16:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800cf18:	4b99      	ldr	r3, [pc, #612]	; (800d180 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	4b99      	ldr	r3, [pc, #612]	; (800d184 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	b21a      	sxth	r2, r3
 800cf28:	4b97      	ldr	r3, [pc, #604]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf2a:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800cf2c:	4b97      	ldr	r3, [pc, #604]	; (800d18c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	4b97      	ldr	r3, [pc, #604]	; (800d190 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	b21a      	sxth	r2, r3
 800cf3c:	4b95      	ldr	r3, [pc, #596]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800cf3e:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800cf40:	4b91      	ldr	r3, [pc, #580]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf46:	2b23      	cmp	r3, #35	; 0x23
 800cf48:	dc04      	bgt.n	800cf54 <HAL_TIM_PeriodElapsedCallback+0xd64>
 800cf4a:	4b92      	ldr	r3, [pc, #584]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800cf4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf50:	2b1e      	cmp	r3, #30
 800cf52:	dd70      	ble.n	800d036 <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800cf54:	4b8c      	ldr	r3, [pc, #560]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf5a:	2b23      	cmp	r3, #35	; 0x23
 800cf5c:	dd30      	ble.n	800cfc0 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800cf5e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cf62:	ee07 3a90 	vmov	s15, r3
 800cf66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf6a:	4b87      	ldr	r3, [pc, #540]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf70:	ee07 3a90 	vmov	s15, r3
 800cf74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf78:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800cf7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf88:	ee17 3a90 	vmov	r3, s15
 800cf8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800cf8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800cf92:	ee07 3a90 	vmov	s15, r3
 800cf96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf9a:	4b7b      	ldr	r3, [pc, #492]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfa0:	ee07 3a90 	vmov	s15, r3
 800cfa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfa8:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800cfac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cfb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfb8:	ee17 3a90 	vmov	r3, s15
 800cfbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800cfbe:	e034      	b.n	800d02a <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800cfc0:	4b74      	ldr	r3, [pc, #464]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800cfc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfc6:	2b1e      	cmp	r3, #30
 800cfc8:	dd2f      	ble.n	800d02a <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800cfca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cfd6:	4b6f      	ldr	r3, [pc, #444]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800cfd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfdc:	ee07 3a90 	vmov	s15, r3
 800cfe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfe4:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800cfe8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cfec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cff4:	ee17 3a90 	vmov	r3, s15
 800cff8:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800cffa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d006:	4b63      	ldr	r3, [pc, #396]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d00c:	ee07 3a90 	vmov	s15, r3
 800d010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d014:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d018:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d01c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d024:	ee17 3a90 	vmov	r3, s15
 800d028:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800d02a:	4a54      	ldr	r2, [pc, #336]	; (800d17c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d02c:	8813      	ldrh	r3, [r2, #0]
 800d02e:	f043 0310 	orr.w	r3, r3, #16
 800d032:	8013      	strh	r3, [r2, #0]
 800d034:	e004      	b.n	800d040 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800d036:	4a51      	ldr	r2, [pc, #324]	; (800d17c <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d038:	8813      	ldrh	r3, [r2, #0]
 800d03a:	f36f 1304 	bfc	r3, #4, #1
 800d03e:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d040:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d044:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d048:	dd08      	ble.n	800d05c <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800d04a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d04e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d052:	bfa8      	it	ge
 800d054:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d058:	b21b      	sxth	r3, r3
 800d05a:	e000      	b.n	800d05e <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800d05c:	4b4e      	ldr	r3, [pc, #312]	; (800d198 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d05e:	4a4f      	ldr	r2, [pc, #316]	; (800d19c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800d060:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d062:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d066:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d06a:	dd08      	ble.n	800d07e <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800d06c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d074:	bfa8      	it	ge
 800d076:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d07a:	b21b      	sxth	r3, r3
 800d07c:	e000      	b.n	800d080 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800d07e:	4b46      	ldr	r3, [pc, #280]	; (800d198 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d080:	4a47      	ldr	r2, [pc, #284]	; (800d1a0 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800d082:	8013      	strh	r3, [r2, #0]
 800d084:	e108      	b.n	800d298 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d086:	2300      	movs	r3, #0
 800d088:	853b      	strh	r3, [r7, #40]	; 0x28
 800d08a:	2300      	movs	r3, #0
 800d08c:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800d08e:	4b37      	ldr	r3, [pc, #220]	; (800d16c <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	b29b      	uxth	r3, r3
 800d094:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d098:	b29b      	uxth	r3, r3
 800d09a:	b21a      	sxth	r2, r3
 800d09c:	4b3a      	ldr	r3, [pc, #232]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d09e:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800d0a0:	4b34      	ldr	r3, [pc, #208]	; (800d174 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	b21a      	sxth	r2, r3
 800d0ae:	4b39      	ldr	r3, [pc, #228]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d0b0:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800d0b2:	4b35      	ldr	r3, [pc, #212]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d0b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d0bc:	dc05      	bgt.n	800d0ca <HAL_TIM_PeriodElapsedCallback+0xeda>
 800d0be:	4b35      	ldr	r3, [pc, #212]	; (800d194 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d0c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0c4:	2bc8      	cmp	r3, #200	; 0xc8
 800d0c6:	f340 80b8 	ble.w	800d23a <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800d0ca:	4b2f      	ldr	r3, [pc, #188]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d0cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d0d4:	dd66      	ble.n	800d1a4 <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800d0d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f3 fa1a 	bl	8000514 <__aeabi_i2d>
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	460d      	mov	r5, r1
 800d0e4:	4b28      	ldr	r3, [pc, #160]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d0e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7f3 fa12 	bl	8000514 <__aeabi_i2d>
 800d0f0:	a319      	add	r3, pc, #100	; (adr r3, 800d158 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f7f3 fa77 	bl	80005e8 <__aeabi_dmul>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4620      	mov	r0, r4
 800d100:	4629      	mov	r1, r5
 800d102:	f7f3 f8bb 	bl	800027c <__adddf3>
 800d106:	4603      	mov	r3, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	4618      	mov	r0, r3
 800d10c:	4621      	mov	r1, r4
 800d10e:	f7f3 fd1b 	bl	8000b48 <__aeabi_d2iz>
 800d112:	4603      	mov	r3, r0
 800d114:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800d116:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 f9fa 	bl	8000514 <__aeabi_i2d>
 800d120:	4604      	mov	r4, r0
 800d122:	460d      	mov	r5, r1
 800d124:	4b18      	ldr	r3, [pc, #96]	; (800d188 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7f3 f9f2 	bl	8000514 <__aeabi_i2d>
 800d130:	a30b      	add	r3, pc, #44	; (adr r3, 800d160 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 fa57 	bl	80005e8 <__aeabi_dmul>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4620      	mov	r0, r4
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 f89b 	bl	800027c <__adddf3>
 800d146:	4603      	mov	r3, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	4618      	mov	r0, r3
 800d14c:	4621      	mov	r1, r4
 800d14e:	f7f3 fcfb 	bl	8000b48 <__aeabi_d2iz>
 800d152:	4603      	mov	r3, r0
 800d154:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d156:	e06a      	b.n	800d22e <HAL_TIM_PeriodElapsedCallback+0x103e>
 800d158:	33333334 	.word	0x33333334
 800d15c:	3fb33333 	.word	0x3fb33333
 800d160:	33333334 	.word	0x33333334
 800d164:	bfb33333 	.word	0xbfb33333
 800d168:	20000b00 	.word	0x20000b00
 800d16c:	20000d54 	.word	0x20000d54
 800d170:	40020800 	.word	0x40020800
 800d174:	20000c00 	.word	0x20000c00
 800d178:	20000f68 	.word	0x20000f68
 800d17c:	20000f64 	.word	0x20000f64
 800d180:	20000afc 	.word	0x20000afc
 800d184:	2000034c 	.word	0x2000034c
 800d188:	20000b50 	.word	0x20000b50
 800d18c:	20000f60 	.word	0x20000f60
 800d190:	200002c0 	.word	0x200002c0
 800d194:	20000bb2 	.word	0x20000bb2
 800d198:	fffffc18 	.word	0xfffffc18
 800d19c:	20000af8 	.word	0x20000af8
 800d1a0:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800d1a4:	4bb8      	ldr	r3, [pc, #736]	; (800d488 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d1a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1aa:	2bc8      	cmp	r3, #200	; 0xc8
 800d1ac:	dd3f      	ble.n	800d22e <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800d1ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f3 f9ae 	bl	8000514 <__aeabi_i2d>
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	460d      	mov	r5, r1
 800d1bc:	4bb2      	ldr	r3, [pc, #712]	; (800d488 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d1be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7f3 f9a6 	bl	8000514 <__aeabi_i2d>
 800d1c8:	a3ab      	add	r3, pc, #684	; (adr r3, 800d478 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	f7f3 fa0b 	bl	80005e8 <__aeabi_dmul>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	4629      	mov	r1, r5
 800d1da:	f7f3 f84f 	bl	800027c <__adddf3>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	f7f3 fcaf 	bl	8000b48 <__aeabi_d2iz>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800d1ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f3 f98e 	bl	8000514 <__aeabi_i2d>
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	4ba2      	ldr	r3, [pc, #648]	; (800d488 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d1fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f3 f986 	bl	8000514 <__aeabi_i2d>
 800d208:	a39d      	add	r3, pc, #628	; (adr r3, 800d480 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 f9eb 	bl	80005e8 <__aeabi_dmul>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4620      	mov	r0, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	f7f3 f82f 	bl	800027c <__adddf3>
 800d21e:	4603      	mov	r3, r0
 800d220:	460c      	mov	r4, r1
 800d222:	4618      	mov	r0, r3
 800d224:	4621      	mov	r1, r4
 800d226:	f7f3 fc8f 	bl	8000b48 <__aeabi_d2iz>
 800d22a:	4603      	mov	r3, r0
 800d22c:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800d22e:	4a97      	ldr	r2, [pc, #604]	; (800d48c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d230:	8813      	ldrh	r3, [r2, #0]
 800d232:	f043 0310 	orr.w	r3, r3, #16
 800d236:	8013      	strh	r3, [r2, #0]
 800d238:	e004      	b.n	800d244 <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800d23a:	4a94      	ldr	r2, [pc, #592]	; (800d48c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d23c:	8813      	ldrh	r3, [r2, #0]
 800d23e:	f36f 1304 	bfc	r3, #4, #1
 800d242:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d244:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d248:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d24c:	dd08      	ble.n	800d260 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800d24e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d256:	bfa8      	it	ge
 800d258:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d25c:	b21b      	sxth	r3, r3
 800d25e:	e000      	b.n	800d262 <HAL_TIM_PeriodElapsedCallback+0x1072>
 800d260:	4b8b      	ldr	r3, [pc, #556]	; (800d490 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d262:	4a8c      	ldr	r2, [pc, #560]	; (800d494 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d264:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d266:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d26a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d26e:	dd08      	ble.n	800d282 <HAL_TIM_PeriodElapsedCallback+0x1092>
 800d270:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d278:	bfa8      	it	ge
 800d27a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d27e:	b21b      	sxth	r3, r3
 800d280:	e000      	b.n	800d284 <HAL_TIM_PeriodElapsedCallback+0x1094>
 800d282:	4b83      	ldr	r3, [pc, #524]	; (800d490 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d284:	4a84      	ldr	r2, [pc, #528]	; (800d498 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d286:	8013      	strh	r3, [r2, #0]
 800d288:	e006      	b.n	800d298 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800d28a:	2100      	movs	r1, #0
 800d28c:	4b82      	ldr	r3, [pc, #520]	; (800d498 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d28e:	460a      	mov	r2, r1
 800d290:	801a      	strh	r2, [r3, #0]
 800d292:	4b80      	ldr	r3, [pc, #512]	; (800d494 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d294:	460a      	mov	r2, r1
 800d296:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800d298:	4b80      	ldr	r3, [pc, #512]	; (800d49c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800d29a:	881b      	ldrh	r3, [r3, #0]
 800d29c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d03d      	beq.n	800d322 <HAL_TIM_PeriodElapsedCallback+0x1132>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800d2a6:	4b7e      	ldr	r3, [pc, #504]	; (800d4a0 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800d2a8:	ed93 7a00 	vldr	s14, [r3]
 800d2ac:	4b7d      	ldr	r3, [pc, #500]	; (800d4a4 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800d2ae:	edd3 7a00 	vldr	s15, [r3]
 800d2b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2b6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800d4a8 <HAL_TIM_PeriodElapsedCallback+0x12b8>
 800d2ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2c2:	ee17 3a90 	vmov	r3, s15
 800d2c6:	b21a      	sxth	r2, r3
 800d2c8:	4b78      	ldr	r3, [pc, #480]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d2ca:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800d2cc:	4b77      	ldr	r3, [pc, #476]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	b21b      	sxth	r3, r3
 800d2d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2d6:	da05      	bge.n	800d2e4 <HAL_TIM_PeriodElapsedCallback+0x10f4>
 800d2d8:	4b74      	ldr	r3, [pc, #464]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d2e2:	dd0c      	ble.n	800d2fe <HAL_TIM_PeriodElapsedCallback+0x110e>
 800d2e4:	4b71      	ldr	r3, [pc, #452]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	b21b      	sxth	r3, r3
 800d2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ee:	da03      	bge.n	800d2f8 <HAL_TIM_PeriodElapsedCallback+0x1108>
 800d2f0:	4b6e      	ldr	r3, [pc, #440]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	e003      	b.n	800d300 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800d2f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2fc:	e000      	b.n	800d300 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800d2fe:	4b64      	ldr	r3, [pc, #400]	; (800d490 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d300:	4a6a      	ldr	r2, [pc, #424]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d302:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800d304:	4b69      	ldr	r3, [pc, #420]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d306:	881b      	ldrh	r3, [r3, #0]
 800d308:	b21b      	sxth	r3, r3
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	425b      	negs	r3, r3
 800d30e:	b29b      	uxth	r3, r3
 800d310:	b21a      	sxth	r2, r3
 800d312:	4b67      	ldr	r3, [pc, #412]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d314:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800d316:	4b65      	ldr	r3, [pc, #404]	; (800d4ac <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d318:	881b      	ldrh	r3, [r3, #0]
 800d31a:	b21a      	sxth	r2, r3
 800d31c:	4b65      	ldr	r3, [pc, #404]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d31e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800d320:	e006      	b.n	800d330 <HAL_TIM_PeriodElapsedCallback+0x1140>
					dgl = dgr = 0;
 800d322:	2100      	movs	r1, #0
 800d324:	4b63      	ldr	r3, [pc, #396]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d326:	460a      	mov	r2, r1
 800d328:	801a      	strh	r2, [r3, #0]
 800d32a:	4b61      	ldr	r3, [pc, #388]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d32c:	460a      	mov	r2, r1
 800d32e:	801a      	strh	r2, [r3, #0]
				break;
 800d330:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800d332:	4b5a      	ldr	r3, [pc, #360]	; (800d49c <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 81b2 	beq.w	800d6a6 <HAL_TIM_PeriodElapsedCallback+0x14b6>
			if(!MF2.FLAG.WG){
 800d342:	4b52      	ldr	r3, [pc, #328]	; (800d48c <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d130      	bne.n	800d3b2 <HAL_TIM_PeriodElapsedCallback+0x11c2>
				pulse_l = pulse_l + dgl + dwl;
 800d350:	4b57      	ldr	r3, [pc, #348]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	b21b      	sxth	r3, r3
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d35e:	4b56      	ldr	r3, [pc, #344]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d360:	edd3 7a00 	vldr	s15, [r3]
 800d364:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d368:	4b4a      	ldr	r3, [pc, #296]	; (800d494 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	b21b      	sxth	r3, r3
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d37a:	4b4f      	ldr	r3, [pc, #316]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d37c:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800d380:	4b4c      	ldr	r3, [pc, #304]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d382:	881b      	ldrh	r3, [r3, #0]
 800d384:	b21b      	sxth	r3, r3
 800d386:	ee07 3a90 	vmov	s15, r3
 800d38a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d38e:	4b4b      	ldr	r3, [pc, #300]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d390:	edd3 7a00 	vldr	s15, [r3]
 800d394:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d398:	4b3f      	ldr	r3, [pc, #252]	; (800d498 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	b21b      	sxth	r3, r3
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3aa:	4b44      	ldr	r3, [pc, #272]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d3ac:	edc3 7a00 	vstr	s15, [r3]
 800d3b0:	e02f      	b.n	800d412 <HAL_TIM_PeriodElapsedCallback+0x1222>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800d3b2:	4b3f      	ldr	r3, [pc, #252]	; (800d4b0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	b21b      	sxth	r3, r3
 800d3b8:	ee07 3a90 	vmov	s15, r3
 800d3bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3c0:	4b3d      	ldr	r3, [pc, #244]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d3c2:	edd3 7a00 	vldr	s15, [r3]
 800d3c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3ca:	4b32      	ldr	r3, [pc, #200]	; (800d494 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d3cc:	881b      	ldrh	r3, [r3, #0]
 800d3ce:	b21b      	sxth	r3, r3
 800d3d0:	ee07 3a90 	vmov	s15, r3
 800d3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3dc:	4b36      	ldr	r3, [pc, #216]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d3de:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800d3e2:	4b34      	ldr	r3, [pc, #208]	; (800d4b4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	b21b      	sxth	r3, r3
 800d3e8:	ee07 3a90 	vmov	s15, r3
 800d3ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3f0:	4b32      	ldr	r3, [pc, #200]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d3f2:	edd3 7a00 	vldr	s15, [r3]
 800d3f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3fa:	4b27      	ldr	r3, [pc, #156]	; (800d498 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	b21b      	sxth	r3, r3
 800d400:	ee07 3a90 	vmov	s15, r3
 800d404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d40c:	4b2b      	ldr	r3, [pc, #172]	; (800d4bc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d40e:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800d412:	4b29      	ldr	r3, [pc, #164]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d414:	edd3 7a00 	vldr	s15, [r3]
 800d418:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d4c0 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800d41c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d424:	bfcc      	ite	gt
 800d426:	2301      	movgt	r3, #1
 800d428:	2300      	movle	r3, #0
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f083 0301 	eor.w	r3, r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d111      	bne.n	800d45a <HAL_TIM_PeriodElapsedCallback+0x126a>
 800d436:	4b20      	ldr	r3, [pc, #128]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d438:	edd3 7a00 	vldr	s15, [r3]
 800d43c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d4c4 <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800d440:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d448:	bfcc      	ite	gt
 800d44a:	2301      	movgt	r3, #1
 800d44c:	2300      	movle	r3, #0
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	f083 0301 	eor.w	r3, r3, #1
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d038      	beq.n	800d4cc <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800d45a:	4b17      	ldr	r3, [pc, #92]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d45c:	edd3 7a00 	vldr	s15, [r3]
 800d460:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d4c0 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800d464:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d46c:	dd2c      	ble.n	800d4c8 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800d46e:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	e02c      	b.n	800d4ce <HAL_TIM_PeriodElapsedCallback+0x12de>
 800d474:	f3af 8000 	nop.w
 800d478:	33333334 	.word	0x33333334
 800d47c:	bfc33333 	.word	0xbfc33333
 800d480:	33333334 	.word	0x33333334
 800d484:	3fc33333 	.word	0x3fc33333
 800d488:	20000bb2 	.word	0x20000bb2
 800d48c:	20000f64 	.word	0x20000f64
 800d490:	fffffc18 	.word	0xfffffc18
 800d494:	20000af8 	.word	0x20000af8
 800d498:	20000f74 	.word	0x20000f74
 800d49c:	20000f68 	.word	0x20000f68
 800d4a0:	20000bf8 	.word	0x20000bf8
 800d4a4:	20000b5c 	.word	0x20000b5c
 800d4a8:	42200000 	.word	0x42200000
 800d4ac:	20000c10 	.word	0x20000c10
 800d4b0:	2000019c 	.word	0x2000019c
 800d4b4:	20000b4e 	.word	0x20000b4e
 800d4b8:	20000ba8 	.word	0x20000ba8
 800d4bc:	20000780 	.word	0x20000780
 800d4c0:	c47a0000 	.word	0xc47a0000
 800d4c4:	447a0000 	.word	0x447a0000
 800d4c8:	4bb7      	ldr	r3, [pc, #732]	; (800d7a8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800d4ca:	e000      	b.n	800d4ce <HAL_TIM_PeriodElapsedCallback+0x12de>
 800d4cc:	4bb7      	ldr	r3, [pc, #732]	; (800d7ac <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800d4ce:	4ab8      	ldr	r2, [pc, #736]	; (800d7b0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d4d0:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800d4d2:	4bb8      	ldr	r3, [pc, #736]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d4d4:	edd3 7a00 	vldr	s15, [r3]
 800d4d8:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800d7b8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800d4dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e4:	bfcc      	ite	gt
 800d4e6:	2301      	movgt	r3, #1
 800d4e8:	2300      	movle	r3, #0
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	f083 0301 	eor.w	r3, r3, #1
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d111      	bne.n	800d51a <HAL_TIM_PeriodElapsedCallback+0x132a>
 800d4f6:	4baf      	ldr	r3, [pc, #700]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d4f8:	edd3 7a00 	vldr	s15, [r3]
 800d4fc:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d7bc <HAL_TIM_PeriodElapsedCallback+0x15cc>
 800d500:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d508:	bfcc      	ite	gt
 800d50a:	2301      	movgt	r3, #1
 800d50c:	2300      	movle	r3, #0
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	f083 0301 	eor.w	r3, r3, #1
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00e      	beq.n	800d538 <HAL_TIM_PeriodElapsedCallback+0x1348>
 800d51a:	4ba6      	ldr	r3, [pc, #664]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d51c:	edd3 7a00 	vldr	s15, [r3]
 800d520:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800d7b8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800d524:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d52c:	dd02      	ble.n	800d534 <HAL_TIM_PeriodElapsedCallback+0x1344>
 800d52e:	4ba1      	ldr	r3, [pc, #644]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	e002      	b.n	800d53a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800d534:	4b9c      	ldr	r3, [pc, #624]	; (800d7a8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800d536:	e000      	b.n	800d53a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800d538:	4b9c      	ldr	r3, [pc, #624]	; (800d7ac <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800d53a:	4a9e      	ldr	r2, [pc, #632]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d53c:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800d53e:	4b9c      	ldr	r3, [pc, #624]	; (800d7b0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d540:	edd3 7a00 	vldr	s15, [r3]
 800d544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54c:	dd17      	ble.n	800d57e <HAL_TIM_PeriodElapsedCallback+0x138e>
				drive_dir(0, 0);
 800d54e:	2100      	movs	r1, #0
 800d550:	2000      	movs	r0, #0
 800d552:	f7f7 fc41 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800d556:	4b96      	ldr	r3, [pc, #600]	; (800d7b0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d558:	edd3 7a00 	vldr	s15, [r3]
 800d55c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d560:	ee17 3a90 	vmov	r3, s15
 800d564:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800d566:	f107 0308 	add.w	r3, r7, #8
 800d56a:	2200      	movs	r2, #0
 800d56c:	4619      	mov	r1, r3
 800d56e:	4894      	ldr	r0, [pc, #592]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d570:	f7f6 fb2c 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800d574:	2100      	movs	r1, #0
 800d576:	4892      	ldr	r0, [pc, #584]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d578:	f7f6 f8c0 	bl	80036fc <HAL_TIM_PWM_Start>
 800d57c:	e020      	b.n	800d5c0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
			}
			else if(pulse_l < 0){
 800d57e:	4b8c      	ldr	r3, [pc, #560]	; (800d7b0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d580:	edd3 7a00 	vldr	s15, [r3]
 800d584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58c:	d518      	bpl.n	800d5c0 <HAL_TIM_PeriodElapsedCallback+0x13d0>
				drive_dir(0, 1);
 800d58e:	2101      	movs	r1, #1
 800d590:	2000      	movs	r0, #0
 800d592:	f7f7 fc21 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800d596:	4b86      	ldr	r3, [pc, #536]	; (800d7b0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d598:	edd3 7a00 	vldr	s15, [r3]
 800d59c:	eef1 7a67 	vneg.f32	s15, s15
 800d5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5a4:	ee17 3a90 	vmov	r3, s15
 800d5a8:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800d5aa:	f107 0308 	add.w	r3, r7, #8
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4883      	ldr	r0, [pc, #524]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5b4:	f7f6 fb0a 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	4881      	ldr	r0, [pc, #516]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5bc:	f7f6 f89e 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800d5c0:	4b7c      	ldr	r3, [pc, #496]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d5c2:	edd3 7a00 	vldr	s15, [r3]
 800d5c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ce:	dd17      	ble.n	800d600 <HAL_TIM_PeriodElapsedCallback+0x1410>
				drive_dir(1, 0);
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	2001      	movs	r0, #1
 800d5d4:	f7f7 fc00 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800d5d8:	4b76      	ldr	r3, [pc, #472]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d5da:	edd3 7a00 	vldr	s15, [r3]
 800d5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5e2:	ee17 3a90 	vmov	r3, s15
 800d5e6:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800d5e8:	f107 0308 	add.w	r3, r7, #8
 800d5ec:	220c      	movs	r2, #12
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4873      	ldr	r0, [pc, #460]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5f2:	f7f6 faeb 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800d5f6:	210c      	movs	r1, #12
 800d5f8:	4871      	ldr	r0, [pc, #452]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5fa:	f7f6 f87f 	bl	80036fc <HAL_TIM_PWM_Start>
 800d5fe:	e020      	b.n	800d642 <HAL_TIM_PeriodElapsedCallback+0x1452>
			}
			else if(pulse_r < 0){
 800d600:	4b6c      	ldr	r3, [pc, #432]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d602:	edd3 7a00 	vldr	s15, [r3]
 800d606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60e:	d518      	bpl.n	800d642 <HAL_TIM_PeriodElapsedCallback+0x1452>
				drive_dir(1, 1);
 800d610:	2101      	movs	r1, #1
 800d612:	2001      	movs	r0, #1
 800d614:	f7f7 fbe0 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800d618:	4b66      	ldr	r3, [pc, #408]	; (800d7b4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d61a:	edd3 7a00 	vldr	s15, [r3]
 800d61e:	eef1 7a67 	vneg.f32	s15, s15
 800d622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d626:	ee17 3a90 	vmov	r3, s15
 800d62a:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800d62c:	f107 0308 	add.w	r3, r7, #8
 800d630:	220c      	movs	r2, #12
 800d632:	4619      	mov	r1, r3
 800d634:	4862      	ldr	r0, [pc, #392]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d636:	f7f6 fac9 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800d63a:	210c      	movs	r1, #12
 800d63c:	4860      	ldr	r0, [pc, #384]	; (800d7c0 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d63e:	f7f6 f85d 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800d642:	4b60      	ldr	r3, [pc, #384]	; (800d7c4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b78      	cmp	r3, #120	; 0x78
 800d648:	d803      	bhi.n	800d652 <HAL_TIM_PeriodElapsedCallback+0x1462>
 800d64a:	4b5f      	ldr	r3, [pc, #380]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2bc8      	cmp	r3, #200	; 0xc8
 800d650:	d905      	bls.n	800d65e <HAL_TIM_PeriodElapsedCallback+0x146e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800d652:	2201      	movs	r2, #1
 800d654:	2140      	movs	r1, #64	; 0x40
 800d656:	485d      	ldr	r0, [pc, #372]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d658:	f7f4 fe54 	bl	8002304 <HAL_GPIO_WritePin>
 800d65c:	e004      	b.n	800d668 <HAL_TIM_PeriodElapsedCallback+0x1478>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800d65e:	2200      	movs	r2, #0
 800d660:	2140      	movs	r1, #64	; 0x40
 800d662:	485a      	ldr	r0, [pc, #360]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d664:	f7f4 fe4e 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800d668:	4b57      	ldr	r3, [pc, #348]	; (800d7c8 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2bc8      	cmp	r3, #200	; 0xc8
 800d66e:	d905      	bls.n	800d67c <HAL_TIM_PeriodElapsedCallback+0x148c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800d670:	2201      	movs	r2, #1
 800d672:	2110      	movs	r1, #16
 800d674:	4855      	ldr	r0, [pc, #340]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d676:	f7f4 fe45 	bl	8002304 <HAL_GPIO_WritePin>
 800d67a:	e004      	b.n	800d686 <HAL_TIM_PeriodElapsedCallback+0x1496>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d67c:	2200      	movs	r2, #0
 800d67e:	2110      	movs	r1, #16
 800d680:	4852      	ldr	r0, [pc, #328]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d682:	f7f4 fe3f 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800d686:	4b4f      	ldr	r3, [pc, #316]	; (800d7c4 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b78      	cmp	r3, #120	; 0x78
 800d68c:	d905      	bls.n	800d69a <HAL_TIM_PeriodElapsedCallback+0x14aa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800d68e:	2201      	movs	r2, #1
 800d690:	2180      	movs	r1, #128	; 0x80
 800d692:	484e      	ldr	r0, [pc, #312]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d694:	f7f4 fe36 	bl	8002304 <HAL_GPIO_WritePin>
 800d698:	e00d      	b.n	800d6b6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800d69a:	2200      	movs	r2, #0
 800d69c:	2180      	movs	r1, #128	; 0x80
 800d69e:	484b      	ldr	r0, [pc, #300]	; (800d7cc <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d6a0:	f7f4 fe30 	bl	8002304 <HAL_GPIO_WritePin>
 800d6a4:	e007      	b.n	800d6b6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}
		}else{
			drive_dir(0, 2);
 800d6a6:	2102      	movs	r1, #2
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f7f7 fb95 	bl	8004dd8 <drive_dir>
			drive_dir(1, 2);
 800d6ae:	2102      	movs	r1, #2
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	f7f7 fb91 	bl	8004dd8 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800d6b6:	4b46      	ldr	r3, [pc, #280]	; (800d7d0 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b78      	cmp	r3, #120	; 0x78
 800d6bc:	d906      	bls.n	800d6cc <HAL_TIM_PeriodElapsedCallback+0x14dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6c4:	4843      	ldr	r0, [pc, #268]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800d6c6:	f7f4 fe1d 	bl	8002304 <HAL_GPIO_WritePin>
 800d6ca:	e005      	b.n	800d6d8 <HAL_TIM_PeriodElapsedCallback+0x14e8>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d6d2:	4840      	ldr	r0, [pc, #256]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800d6d4:	f7f4 fe16 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800d6d8:	4b3f      	ldr	r3, [pc, #252]	; (800d7d8 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b8c      	cmp	r3, #140	; 0x8c
 800d6de:	d905      	bls.n	800d6ec <HAL_TIM_PeriodElapsedCallback+0x14fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	2104      	movs	r1, #4
 800d6e4:	483d      	ldr	r0, [pc, #244]	; (800d7dc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d6e6:	f7f4 fe0d 	bl	8002304 <HAL_GPIO_WritePin>
 800d6ea:	e004      	b.n	800d6f6 <HAL_TIM_PeriodElapsedCallback+0x1506>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2104      	movs	r1, #4
 800d6f0:	483a      	ldr	r0, [pc, #232]	; (800d7dc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d6f2:	f7f4 fe07 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800d6f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d6fa:	4836      	ldr	r0, [pc, #216]	; (800d7d4 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800d6fc:	f7f4 fdea 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d105      	bne.n	800d712 <HAL_TIM_PeriodElapsedCallback+0x1522>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800d706:	2201      	movs	r2, #1
 800d708:	2108      	movs	r1, #8
 800d70a:	4834      	ldr	r0, [pc, #208]	; (800d7dc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d70c:	f7f4 fdfa 	bl	8002304 <HAL_GPIO_WritePin>
 800d710:	e004      	b.n	800d71c <HAL_TIM_PeriodElapsedCallback+0x152c>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800d712:	2200      	movs	r2, #0
 800d714:	2108      	movs	r1, #8
 800d716:	4831      	ldr	r0, [pc, #196]	; (800d7dc <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d718:	f7f4 fdf4 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800d71c:	4b30      	ldr	r3, [pc, #192]	; (800d7e0 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800d71e:	edd3 7a00 	vldr	s15, [r3]
 800d722:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d7e4 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800d726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d72a:	4b2f      	ldr	r3, [pc, #188]	; (800d7e8 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800d72c:	edd3 7a00 	vldr	s15, [r3]
 800d730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	d923      	bls.n	800d782 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800d73a:	4b29      	ldr	r3, [pc, #164]	; (800d7e0 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800d73c:	edd3 7a00 	vldr	s15, [r3]
 800d740:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d7e4 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800d744:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d748:	4b27      	ldr	r3, [pc, #156]	; (800d7e8 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800d74a:	edd3 7a00 	vldr	s15, [r3]
 800d74e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d756:	da14      	bge.n	800d782 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800d758:	4b24      	ldr	r3, [pc, #144]	; (800d7ec <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800d75a:	edd3 7a00 	vldr	s15, [r3]
 800d75e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800d7f0 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800d762:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d76a:	dc0a      	bgt.n	800d782 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800d76c:	4b21      	ldr	r3, [pc, #132]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 800d76e:	edd3 7a00 	vldr	s15, [r3]
 800d772:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d7f0 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800d776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77e:	dc00      	bgt.n	800d782 <HAL_TIM_PeriodElapsedCallback+0x1592>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800d780:	e00b      	b.n	800d79a <HAL_TIM_PeriodElapsedCallback+0x15aa>
			   drive_dir(0, 2);
 800d782:	2102      	movs	r1, #2
 800d784:	2000      	movs	r0, #0
 800d786:	f7f7 fb27 	bl	8004dd8 <drive_dir>
			   drive_dir(1, 2);
 800d78a:	2102      	movs	r1, #2
 800d78c:	2001      	movs	r0, #1
 800d78e:	f7f7 fb23 	bl	8004dd8 <drive_dir>
			   full_led_write(RED);
 800d792:	2001      	movs	r0, #1
 800d794:	f003 fee2 	bl	801155c <full_led_write>
			   drive_dir(0, 2);
 800d798:	e7f3      	b.n	800d782 <HAL_TIM_PeriodElapsedCallback+0x1592>
}
 800d79a:	bf00      	nop
 800d79c:	3730      	adds	r7, #48	; 0x30
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	ecbd 8b02 	vpop	{d8}
 800d7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	c47a0000 	.word	0xc47a0000
 800d7ac:	447a0000 	.word	0x447a0000
 800d7b0:	20000ba8 	.word	0x20000ba8
 800d7b4:	20000780 	.word	0x20000780
 800d7b8:	c47a0000 	.word	0xc47a0000
 800d7bc:	447a0000 	.word	0x447a0000
 800d7c0:	20000c14 	.word	0x20000c14
 800d7c4:	20000c00 	.word	0x20000c00
 800d7c8:	20000d54 	.word	0x20000d54
 800d7cc:	40020000 	.word	0x40020000
 800d7d0:	20000f60 	.word	0x20000f60
 800d7d4:	40020400 	.word	0x40020400
 800d7d8:	20000afc 	.word	0x20000afc
 800d7dc:	40020800 	.word	0x40020800
 800d7e0:	20000bf8 	.word	0x20000bf8
 800d7e4:	43870000 	.word	0x43870000
 800d7e8:	20000b5c 	.word	0x20000b5c
 800d7ec:	20000aec 	.word	0x20000aec
 800d7f0:	43fa0000 	.word	0x43fa0000
 800d7f4:	200015c4 	.word	0x200015c4

0800d7f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d7fe:	f7f3 fb9b 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d802:	f000 f917 	bl	800da34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d806:	f000 fc09 	bl	800e01c <MX_GPIO_Init>
  MX_ADC1_Init();
 800d80a:	f000 f97d 	bl	800db08 <MX_ADC1_Init>
  MX_TIM2_Init();
 800d80e:	f000 fa03 	bl	800dc18 <MX_TIM2_Init>
  MX_TIM3_Init();
 800d812:	f000 fa81 	bl	800dd18 <MX_TIM3_Init>
  MX_TIM4_Init();
 800d816:	f000 faf5 	bl	800de04 <MX_TIM4_Init>
  MX_TIM6_Init();
 800d81a:	f000 fb47 	bl	800deac <MX_TIM6_Init>
  MX_TIM8_Init();
 800d81e:	f000 fb7b 	bl	800df18 <MX_TIM8_Init>
  MX_SPI3_Init();
 800d822:	f000 f9c3 	bl	800dbac <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800d826:	f000 fbcf 	bl	800dfc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800d82a:	f7f7 fa17 	bl	8004c5c <drive_init>
  gyro_init();
 800d82e:	f7fe fb01 	bl	800be34 <gyro_init>
  search_init();
 800d832:	f000 fd21 	bl	800e278 <search_init>
  sensor_init();
 800d836:	f003 fdd1 	bl	80113dc <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800d83a:	4870      	ldr	r0, [pc, #448]	; (800d9fc <main+0x204>)
 800d83c:	f004 fc96 	bl	801216c <puts>

  setbuf(stdout, NULL);
 800d840:	4b6f      	ldr	r3, [pc, #444]	; (800da00 <main+0x208>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	2100      	movs	r1, #0
 800d848:	4618      	mov	r0, r3
 800d84a:	f004 fc97 	bl	801217c <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d84e:	213c      	movs	r1, #60	; 0x3c
 800d850:	486c      	ldr	r0, [pc, #432]	; (800da04 <main+0x20c>)
 800d852:	f7f6 f87b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800d856:	213c      	movs	r1, #60	; 0x3c
 800d858:	486b      	ldr	r0, [pc, #428]	; (800da08 <main+0x210>)
 800d85a:	f7f6 f877 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800d85e:	486b      	ldr	r0, [pc, #428]	; (800da0c <main+0x214>)
 800d860:	f7f5 fef3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	4869      	ldr	r0, [pc, #420]	; (800da10 <main+0x218>)
 800d86c:	f004 fc0a 	bl	8012084 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	b2d8      	uxtb	r0, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	f003 0302 	and.w	r3, r3, #2
 800d882:	b2d9      	uxtb	r1, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 0304 	and.w	r3, r3, #4
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	461a      	mov	r2, r3
 800d890:	f003 fe2a 	bl	80114e8 <led_write>
	  if(dist_r >= 20){
 800d894:	4b5f      	ldr	r3, [pc, #380]	; (800da14 <main+0x21c>)
 800d896:	edd3 7a00 	vldr	s15, [r3]
 800d89a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800d89e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a6:	db0f      	blt.n	800d8c8 <main+0xd0>
		  mode++;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800d8ae:	4b59      	ldr	r3, [pc, #356]	; (800da14 <main+0x21c>)
 800d8b0:	f04f 0200 	mov.w	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b07      	cmp	r3, #7
 800d8ba:	dd01      	ble.n	800d8c0 <main+0xc8>
			  mode = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	4853      	ldr	r0, [pc, #332]	; (800da10 <main+0x218>)
 800d8c4:	f004 fbde 	bl	8012084 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800d8c8:	4b52      	ldr	r3, [pc, #328]	; (800da14 <main+0x21c>)
 800d8ca:	edd3 7a00 	vldr	s15, [r3]
 800d8ce:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800d8d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8da:	d80f      	bhi.n	800d8fc <main+0x104>
		  mode--;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800d8e2:	4b4c      	ldr	r3, [pc, #304]	; (800da14 <main+0x21c>)
 800d8e4:	f04f 0200 	mov.w	r2, #0
 800d8e8:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	da01      	bge.n	800d8f4 <main+0xfc>
			  mode = 7;
 800d8f0:	2307      	movs	r3, #7
 800d8f2:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	4846      	ldr	r0, [pc, #280]	; (800da10 <main+0x218>)
 800d8f8:	f004 fbc4 	bl	8012084 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800d8fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d900:	4845      	ldr	r0, [pc, #276]	; (800da18 <main+0x220>)
 800d902:	f7f4 fce7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1b1      	bne.n	800d870 <main+0x78>
		  HAL_Delay(50);
 800d90c:	2032      	movs	r0, #50	; 0x32
 800d90e:	f7f3 fb85 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800d912:	bf00      	nop
 800d914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d918:	483f      	ldr	r0, [pc, #252]	; (800da18 <main+0x220>)
 800d91a:	f7f4 fcdb 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d0f7      	beq.n	800d914 <main+0x11c>
		  switch(mode){
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b07      	cmp	r3, #7
 800d928:	d8a2      	bhi.n	800d870 <main+0x78>
 800d92a:	a201      	add	r2, pc, #4	; (adr r2, 800d930 <main+0x138>)
 800d92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d930:	0800d951 	.word	0x0800d951
 800d934:	0800d95b 	.word	0x0800d95b
 800d938:	0800d967 	.word	0x0800d967
 800d93c:	0800d973 	.word	0x0800d973
 800d940:	0800d97f 	.word	0x0800d97f
 800d944:	0800d985 	.word	0x0800d985
 800d948:	0800d9b1 	.word	0x0800d9b1
 800d94c:	0800d9f3 	.word	0x0800d9f3

		  	  case 0:
		  		  HAL_Delay(5000);
 800d950:	f241 3088 	movw	r0, #5000	; 0x1388
 800d954:	f7f3 fb62 	bl	800101c <HAL_Delay>
		  		  break;
 800d958:	e04e      	b.n	800d9f8 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800d95a:	4830      	ldr	r0, [pc, #192]	; (800da1c <main+0x224>)
 800d95c:	f004 fc06 	bl	801216c <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800d960:	f7fc ff62 	bl	800a828 <simple_run>
		  		  break;
 800d964:	e048      	b.n	800d9f8 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800d966:	482e      	ldr	r0, [pc, #184]	; (800da20 <main+0x228>)
 800d968:	f004 fc00 	bl	801216c <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800d96c:	f7fd f86a 	bl	800aa44 <slalom_run>
		  		  break;
 800d970:	e042      	b.n	800d9f8 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800d972:	482c      	ldr	r0, [pc, #176]	; (800da24 <main+0x22c>)
 800d974:	f004 fbfa 	bl	801216c <puts>
		  		  pass_test();
 800d978:	f7fc f858 	bl	8009a2c <pass_test>
		  		  break;
 800d97c:	e03c      	b.n	800d9f8 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800d97e:	f7fb fac1 	bl	8008f04 <test_select>
		  		  break;
 800d982:	e039      	b.n	800d9f8 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800d984:	4828      	ldr	r0, [pc, #160]	; (800da28 <main+0x230>)
 800d986:	f004 fbf1 	bl	801216c <puts>
		  		  sensor_test();
 800d98a:	f003 fea3 	bl	80116d4 <sensor_test>
		  		  break;
 800d98e:	e033      	b.n	800d9f8 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800d990:	2201      	movs	r2, #1
 800d992:	2101      	movs	r1, #1
 800d994:	2001      	movs	r0, #1
 800d996:	f003 fda7 	bl	80114e8 <led_write>
					  HAL_Delay(200);
 800d99a:	20c8      	movs	r0, #200	; 0xc8
 800d99c:	f7f3 fb3e 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	f003 fd9f 	bl	80114e8 <led_write>
					  HAL_Delay(200);
 800d9aa:	20c8      	movs	r0, #200	; 0xc8
 800d9ac:	f7f3 fb36 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800d9b0:	4b1e      	ldr	r3, [pc, #120]	; (800da2c <main+0x234>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2bc8      	cmp	r3, #200	; 0xc8
 800d9b6:	d9eb      	bls.n	800d990 <main+0x198>
				  }
				  HAL_Delay(200);
 800d9b8:	20c8      	movs	r0, #200	; 0xc8
 800d9ba:	f7f3 fb2f 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800d9be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d9c2:	f7f3 fb2b 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	603b      	str	r3, [r7, #0]
 800d9ca:	e00e      	b.n	800d9ea <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800d9cc:	4a18      	ldr	r2, [pc, #96]	; (800da30 <main+0x238>)
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d9d4:	4a16      	ldr	r2, [pc, #88]	; (800da30 <main+0x238>)
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	00db      	lsls	r3, r3, #3
 800d9da:	4413      	add	r3, r2
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	f000 fbda 	bl	800e198 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	603b      	str	r3, [r7, #0]
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b0e      	cmp	r3, #14
 800d9ee:	dded      	ble.n	800d9cc <main+0x1d4>
		  		  }
		  		  break;
 800d9f0:	e002      	b.n	800d9f8 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800d9f2:	f7fd fa9d 	bl	800af30 <perfect_slalom>
		  		  break;
 800d9f6:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800d9f8:	e73a      	b.n	800d870 <main+0x78>
 800d9fa:	bf00      	nop
 800d9fc:	08013688 	.word	0x08013688
 800da00:	20000084 	.word	0x20000084
 800da04:	2000030c 	.word	0x2000030c
 800da08:	200002cc 	.word	0x200002cc
 800da0c:	20000bb4 	.word	0x20000bb4
 800da10:	080136a4 	.word	0x080136a4
 800da14:	20000aec 	.word	0x20000aec
 800da18:	40020000 	.word	0x40020000
 800da1c:	080136b0 	.word	0x080136b0
 800da20:	080136bc 	.word	0x080136bc
 800da24:	080136c8 	.word	0x080136c8
 800da28:	080136dc 	.word	0x080136dc
 800da2c:	20000d54 	.word	0x20000d54
 800da30:	20000008 	.word	0x20000008

0800da34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b094      	sub	sp, #80	; 0x50
 800da38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800da3a:	f107 0320 	add.w	r3, r7, #32
 800da3e:	2230      	movs	r2, #48	; 0x30
 800da40:	2100      	movs	r1, #0
 800da42:	4618      	mov	r0, r3
 800da44:	f004 fb16 	bl	8012074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800da48:	f107 030c 	add.w	r3, r7, #12
 800da4c:	2200      	movs	r2, #0
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	605a      	str	r2, [r3, #4]
 800da52:	609a      	str	r2, [r3, #8]
 800da54:	60da      	str	r2, [r3, #12]
 800da56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800da58:	2300      	movs	r3, #0
 800da5a:	60bb      	str	r3, [r7, #8]
 800da5c:	4b28      	ldr	r3, [pc, #160]	; (800db00 <SystemClock_Config+0xcc>)
 800da5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da60:	4a27      	ldr	r2, [pc, #156]	; (800db00 <SystemClock_Config+0xcc>)
 800da62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da66:	6413      	str	r3, [r2, #64]	; 0x40
 800da68:	4b25      	ldr	r3, [pc, #148]	; (800db00 <SystemClock_Config+0xcc>)
 800da6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da70:	60bb      	str	r3, [r7, #8]
 800da72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800da74:	2300      	movs	r3, #0
 800da76:	607b      	str	r3, [r7, #4]
 800da78:	4b22      	ldr	r3, [pc, #136]	; (800db04 <SystemClock_Config+0xd0>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a21      	ldr	r2, [pc, #132]	; (800db04 <SystemClock_Config+0xd0>)
 800da7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da82:	6013      	str	r3, [r2, #0]
 800da84:	4b1f      	ldr	r3, [pc, #124]	; (800db04 <SystemClock_Config+0xd0>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da8c:	607b      	str	r3, [r7, #4]
 800da8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800da90:	2302      	movs	r3, #2
 800da92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800da94:	2301      	movs	r3, #1
 800da96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800da98:	2310      	movs	r3, #16
 800da9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800da9c:	2302      	movs	r3, #2
 800da9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800daa0:	2300      	movs	r3, #0
 800daa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800daa4:	2308      	movs	r3, #8
 800daa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800daa8:	23a8      	movs	r3, #168	; 0xa8
 800daaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800daac:	2302      	movs	r3, #2
 800daae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800dab0:	2304      	movs	r3, #4
 800dab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dab4:	f107 0320 	add.w	r3, r7, #32
 800dab8:	4618      	mov	r0, r3
 800daba:	f7f4 fc3d 	bl	8002338 <HAL_RCC_OscConfig>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d001      	beq.n	800dac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800dac4:	f000 fbd1 	bl	800e26a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dac8:	230f      	movs	r3, #15
 800daca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dacc:	2302      	movs	r3, #2
 800dace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dad0:	2300      	movs	r3, #0
 800dad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dad4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800dad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dae0:	f107 030c 	add.w	r3, r7, #12
 800dae4:	2105      	movs	r1, #5
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f4 fe68 	bl	80027bc <HAL_RCC_ClockConfig>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800daf2:	f000 fbba 	bl	800e26a <Error_Handler>
  }
}
 800daf6:	bf00      	nop
 800daf8:	3750      	adds	r7, #80	; 0x50
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	40023800 	.word	0x40023800
 800db04:	40007000 	.word	0x40007000

0800db08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800db0e:	463b      	mov	r3, r7
 800db10:	2200      	movs	r2, #0
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	605a      	str	r2, [r3, #4]
 800db16:	609a      	str	r2, [r3, #8]
 800db18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800db1a:	4b21      	ldr	r3, [pc, #132]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db1c:	4a21      	ldr	r2, [pc, #132]	; (800dba4 <MX_ADC1_Init+0x9c>)
 800db1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800db20:	4b1f      	ldr	r3, [pc, #124]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800db26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800db28:	4b1d      	ldr	r3, [pc, #116]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800db2e:	4b1c      	ldr	r3, [pc, #112]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db30:	2200      	movs	r2, #0
 800db32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800db34:	4b1a      	ldr	r3, [pc, #104]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db36:	2200      	movs	r2, #0
 800db38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800db3a:	4b19      	ldr	r3, [pc, #100]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800db42:	4b17      	ldr	r3, [pc, #92]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db44:	2200      	movs	r2, #0
 800db46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800db48:	4b15      	ldr	r3, [pc, #84]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db4a:	4a17      	ldr	r2, [pc, #92]	; (800dba8 <MX_ADC1_Init+0xa0>)
 800db4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800db4e:	4b14      	ldr	r3, [pc, #80]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db50:	2200      	movs	r2, #0
 800db52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800db54:	4b12      	ldr	r3, [pc, #72]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db56:	2201      	movs	r2, #1
 800db58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800db5a:	4b11      	ldr	r3, [pc, #68]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800db62:	4b0f      	ldr	r3, [pc, #60]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db64:	2201      	movs	r2, #1
 800db66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800db68:	480d      	ldr	r0, [pc, #52]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db6a:	f7f3 fa79 	bl	8001060 <HAL_ADC_Init>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800db74:	f000 fb79 	bl	800e26a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800db78:	2300      	movs	r3, #0
 800db7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800db7c:	2301      	movs	r3, #1
 800db7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800db80:	2300      	movs	r3, #0
 800db82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800db84:	463b      	mov	r3, r7
 800db86:	4619      	mov	r1, r3
 800db88:	4805      	ldr	r0, [pc, #20]	; (800dba0 <MX_ADC1_Init+0x98>)
 800db8a:	f7f3 fc05 	bl	8001398 <HAL_ADC_ConfigChannel>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800db94:	f000 fb69 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800db98:	bf00      	nop
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	20000b00 	.word	0x20000b00
 800dba4:	40012000 	.word	0x40012000
 800dba8:	0f000001 	.word	0x0f000001

0800dbac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800dbb0:	4b17      	ldr	r3, [pc, #92]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbb2:	4a18      	ldr	r2, [pc, #96]	; (800dc14 <MX_SPI3_Init+0x68>)
 800dbb4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800dbb6:	4b16      	ldr	r3, [pc, #88]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800dbbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800dbbe:	4b14      	ldr	r3, [pc, #80]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800dbc4:	4b12      	ldr	r3, [pc, #72]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dbca:	4b11      	ldr	r3, [pc, #68]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dbd0:	4b0f      	ldr	r3, [pc, #60]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800dbd6:	4b0e      	ldr	r3, [pc, #56]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbdc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800dbde:	4b0c      	ldr	r3, [pc, #48]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbe0:	2218      	movs	r2, #24
 800dbe2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dbe4:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800dbea:	4b09      	ldr	r3, [pc, #36]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbf0:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800dbf6:	4b06      	ldr	r3, [pc, #24]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbf8:	220a      	movs	r2, #10
 800dbfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800dbfc:	4804      	ldr	r0, [pc, #16]	; (800dc10 <MX_SPI3_Init+0x64>)
 800dbfe:	f7f4 ffa5 	bl	8002b4c <HAL_SPI_Init>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800dc08:	f000 fb2f 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800dc0c:	bf00      	nop
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20000144 	.word	0x20000144
 800dc14:	40003c00 	.word	0x40003c00

0800dc18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b08e      	sub	sp, #56	; 0x38
 800dc1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
 800dc26:	605a      	str	r2, [r3, #4]
 800dc28:	609a      	str	r2, [r3, #8]
 800dc2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc2c:	f107 0320 	add.w	r3, r7, #32
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc36:	1d3b      	adds	r3, r7, #4
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	605a      	str	r2, [r3, #4]
 800dc3e:	609a      	str	r2, [r3, #8]
 800dc40:	60da      	str	r2, [r3, #12]
 800dc42:	611a      	str	r2, [r3, #16]
 800dc44:	615a      	str	r2, [r3, #20]
 800dc46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc48:	4b32      	ldr	r3, [pc, #200]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc50:	4b30      	ldr	r3, [pc, #192]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc56:	4b2f      	ldr	r3, [pc, #188]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800dc5c:	4b2d      	ldr	r3, [pc, #180]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dc62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc64:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc6a:	4b2a      	ldr	r3, [pc, #168]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dc70:	4828      	ldr	r0, [pc, #160]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc72:	f7f5 fcbf 	bl	80035f4 <HAL_TIM_Base_Init>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800dc7c:	f000 faf5 	bl	800e26a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dc86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4821      	ldr	r0, [pc, #132]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc8e:	f7f6 f863 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800dc98:	f000 fae7 	bl	800e26a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dc9c:	481d      	ldr	r0, [pc, #116]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dc9e:	f7f5 fcf8 	bl	8003692 <HAL_TIM_PWM_Init>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800dca8:	f000 fadf 	bl	800e26a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcac:	2300      	movs	r3, #0
 800dcae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dcb4:	f107 0320 	add.w	r3, r7, #32
 800dcb8:	4619      	mov	r1, r3
 800dcba:	4816      	ldr	r0, [pc, #88]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dcbc:	f7f6 fc3b 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800dcc6:	f000 fad0 	bl	800e26a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dcca:	2360      	movs	r3, #96	; 0x60
 800dccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dcda:	1d3b      	adds	r3, r7, #4
 800dcdc:	2200      	movs	r2, #0
 800dcde:	4619      	mov	r1, r3
 800dce0:	480c      	ldr	r0, [pc, #48]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dce2:	f7f5 ff73 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800dcec:	f000 fabd 	bl	800e26a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dcf0:	1d3b      	adds	r3, r7, #4
 800dcf2:	220c      	movs	r2, #12
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4807      	ldr	r0, [pc, #28]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dcf8:	f7f5 ff68 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800dd02:	f000 fab2 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dd06:	4803      	ldr	r0, [pc, #12]	; (800dd14 <MX_TIM2_Init+0xfc>)
 800dd08:	f003 ff92 	bl	8011c30 <HAL_TIM_MspPostInit>

}
 800dd0c:	bf00      	nop
 800dd0e:	3738      	adds	r7, #56	; 0x38
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	20000c14 	.word	0x20000c14

0800dd18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b08e      	sub	sp, #56	; 0x38
 800dd1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	605a      	str	r2, [r3, #4]
 800dd28:	609a      	str	r2, [r3, #8]
 800dd2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd2c:	f107 0320 	add.w	r3, r7, #32
 800dd30:	2200      	movs	r2, #0
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dd36:	1d3b      	adds	r3, r7, #4
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	605a      	str	r2, [r3, #4]
 800dd3e:	609a      	str	r2, [r3, #8]
 800dd40:	60da      	str	r2, [r3, #12]
 800dd42:	611a      	str	r2, [r3, #16]
 800dd44:	615a      	str	r2, [r3, #20]
 800dd46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dd48:	4b2c      	ldr	r3, [pc, #176]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd4a:	4a2d      	ldr	r2, [pc, #180]	; (800de00 <MX_TIM3_Init+0xe8>)
 800dd4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800dd4e:	4b2b      	ldr	r3, [pc, #172]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd50:	223f      	movs	r2, #63	; 0x3f
 800dd52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd54:	4b29      	ldr	r3, [pc, #164]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800dd5a:	4b28      	ldr	r3, [pc, #160]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd60:	4b26      	ldr	r3, [pc, #152]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd62:	2200      	movs	r2, #0
 800dd64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd66:	4b25      	ldr	r3, [pc, #148]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800dd6c:	4823      	ldr	r0, [pc, #140]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd6e:	f7f5 fc41 	bl	80035f4 <HAL_TIM_Base_Init>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800dd78:	f000 fa77 	bl	800e26a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800dd82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd86:	4619      	mov	r1, r3
 800dd88:	481c      	ldr	r0, [pc, #112]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd8a:	f7f5 ffe5 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d001      	beq.n	800dd98 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800dd94:	f000 fa69 	bl	800e26a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dd98:	4818      	ldr	r0, [pc, #96]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800dd9a:	f7f5 fc7a 	bl	8003692 <HAL_TIM_PWM_Init>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800dda4:	f000 fa61 	bl	800e26a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ddb0:	f107 0320 	add.w	r3, r7, #32
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4811      	ldr	r0, [pc, #68]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800ddb8:	f7f6 fbbd 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800ddc2:	f000 fa52 	bl	800e26a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ddc6:	2360      	movs	r3, #96	; 0x60
 800ddc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ddd6:	1d3b      	adds	r3, r7, #4
 800ddd8:	2204      	movs	r2, #4
 800ddda:	4619      	mov	r1, r3
 800dddc:	4807      	ldr	r0, [pc, #28]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800ddde:	f7f5 fef5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800dde8:	f000 fa3f 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ddec:	4803      	ldr	r0, [pc, #12]	; (800ddfc <MX_TIM3_Init+0xe4>)
 800ddee:	f003 ff1f 	bl	8011c30 <HAL_TIM_MspPostInit>

}
 800ddf2:	bf00      	nop
 800ddf4:	3738      	adds	r7, #56	; 0x38
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20000aa4 	.word	0x20000aa4
 800de00:	40000400 	.word	0x40000400

0800de04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08c      	sub	sp, #48	; 0x30
 800de08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800de0a:	f107 030c 	add.w	r3, r7, #12
 800de0e:	2224      	movs	r2, #36	; 0x24
 800de10:	2100      	movs	r1, #0
 800de12:	4618      	mov	r0, r3
 800de14:	f004 f92e 	bl	8012074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de18:	1d3b      	adds	r3, r7, #4
 800de1a:	2200      	movs	r2, #0
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800de20:	4b20      	ldr	r3, [pc, #128]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de22:	4a21      	ldr	r2, [pc, #132]	; (800dea8 <MX_TIM4_Init+0xa4>)
 800de24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800de26:	4b1f      	ldr	r3, [pc, #124]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de28:	2200      	movs	r2, #0
 800de2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de2c:	4b1d      	ldr	r3, [pc, #116]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de2e:	2200      	movs	r2, #0
 800de30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800de32:	4b1c      	ldr	r3, [pc, #112]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de3a:	4b1a      	ldr	r3, [pc, #104]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de40:	4b18      	ldr	r3, [pc, #96]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de42:	2200      	movs	r2, #0
 800de44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800de46:	2303      	movs	r3, #3
 800de48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800de4a:	2300      	movs	r3, #0
 800de4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800de4e:	2301      	movs	r3, #1
 800de50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800de52:	2300      	movs	r3, #0
 800de54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800de5a:	2300      	movs	r3, #0
 800de5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800de5e:	2301      	movs	r3, #1
 800de60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800de62:	2300      	movs	r3, #0
 800de64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800de66:	2300      	movs	r3, #0
 800de68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800de6a:	f107 030c 	add.w	r3, r7, #12
 800de6e:	4619      	mov	r1, r3
 800de70:	480c      	ldr	r0, [pc, #48]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de72:	f7f5 fcd9 	bl	8003828 <HAL_TIM_Encoder_Init>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800de7c:	f000 f9f5 	bl	800e26a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de80:	2300      	movs	r3, #0
 800de82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de84:	2300      	movs	r3, #0
 800de86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800de88:	1d3b      	adds	r3, r7, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	4805      	ldr	r0, [pc, #20]	; (800dea4 <MX_TIM4_Init+0xa0>)
 800de8e:	f7f6 fb52 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800de98:	f000 f9e7 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800de9c:	bf00      	nop
 800de9e:	3730      	adds	r7, #48	; 0x30
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	2000030c 	.word	0x2000030c
 800dea8:	40000800 	.word	0x40000800

0800deac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800deb2:	463b      	mov	r3, r7
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800deba:	4b15      	ldr	r3, [pc, #84]	; (800df10 <MX_TIM6_Init+0x64>)
 800debc:	4a15      	ldr	r2, [pc, #84]	; (800df14 <MX_TIM6_Init+0x68>)
 800debe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800dec0:	4b13      	ldr	r3, [pc, #76]	; (800df10 <MX_TIM6_Init+0x64>)
 800dec2:	2253      	movs	r2, #83	; 0x53
 800dec4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dec6:	4b12      	ldr	r3, [pc, #72]	; (800df10 <MX_TIM6_Init+0x64>)
 800dec8:	2200      	movs	r2, #0
 800deca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800decc:	4b10      	ldr	r3, [pc, #64]	; (800df10 <MX_TIM6_Init+0x64>)
 800dece:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ded2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ded4:	4b0e      	ldr	r3, [pc, #56]	; (800df10 <MX_TIM6_Init+0x64>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800deda:	480d      	ldr	r0, [pc, #52]	; (800df10 <MX_TIM6_Init+0x64>)
 800dedc:	f7f5 fb8a 	bl	80035f4 <HAL_TIM_Base_Init>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800dee6:	f000 f9c0 	bl	800e26a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800deea:	2300      	movs	r3, #0
 800deec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800deee:	2300      	movs	r3, #0
 800def0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800def2:	463b      	mov	r3, r7
 800def4:	4619      	mov	r1, r3
 800def6:	4806      	ldr	r0, [pc, #24]	; (800df10 <MX_TIM6_Init+0x64>)
 800def8:	f7f6 fb1d 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800df02:	f000 f9b2 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800df06:	bf00      	nop
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	20000bb4 	.word	0x20000bb4
 800df14:	40001000 	.word	0x40001000

0800df18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08c      	sub	sp, #48	; 0x30
 800df1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800df1e:	f107 030c 	add.w	r3, r7, #12
 800df22:	2224      	movs	r2, #36	; 0x24
 800df24:	2100      	movs	r1, #0
 800df26:	4618      	mov	r0, r3
 800df28:	f004 f8a4 	bl	8012074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df2c:	1d3b      	adds	r3, r7, #4
 800df2e:	2200      	movs	r2, #0
 800df30:	601a      	str	r2, [r3, #0]
 800df32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800df34:	4b22      	ldr	r3, [pc, #136]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df36:	4a23      	ldr	r2, [pc, #140]	; (800dfc4 <MX_TIM8_Init+0xac>)
 800df38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800df3a:	4b21      	ldr	r3, [pc, #132]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df40:	4b1f      	ldr	r3, [pc, #124]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df42:	2200      	movs	r2, #0
 800df44:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800df46:	4b1e      	ldr	r3, [pc, #120]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df4c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df4e:	4b1c      	ldr	r3, [pc, #112]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df50:	2200      	movs	r2, #0
 800df52:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800df54:	4b1a      	ldr	r3, [pc, #104]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df56:	2200      	movs	r2, #0
 800df58:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df5a:	4b19      	ldr	r3, [pc, #100]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800df60:	2303      	movs	r3, #3
 800df62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800df64:	2300      	movs	r3, #0
 800df66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800df68:	2301      	movs	r3, #1
 800df6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800df6c:	2300      	movs	r3, #0
 800df6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800df74:	2300      	movs	r3, #0
 800df76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800df78:	2301      	movs	r3, #1
 800df7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800df7c:	2300      	movs	r3, #0
 800df7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800df84:	f107 030c 	add.w	r3, r7, #12
 800df88:	4619      	mov	r1, r3
 800df8a:	480d      	ldr	r0, [pc, #52]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800df8c:	f7f5 fc4c 	bl	8003828 <HAL_TIM_Encoder_Init>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800df96:	f000 f968 	bl	800e26a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df9a:	2300      	movs	r3, #0
 800df9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dfa2:	1d3b      	adds	r3, r7, #4
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4806      	ldr	r0, [pc, #24]	; (800dfc0 <MX_TIM8_Init+0xa8>)
 800dfa8:	f7f6 fac5 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800dfb2:	f000 f95a 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800dfb6:	bf00      	nop
 800dfb8:	3730      	adds	r7, #48	; 0x30
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	200002cc 	.word	0x200002cc
 800dfc4:	40010400 	.word	0x40010400

0800dfc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800dfcc:	4b11      	ldr	r3, [pc, #68]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dfce:	4a12      	ldr	r2, [pc, #72]	; (800e018 <MX_USART1_UART_Init+0x50>)
 800dfd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800dfd2:	4b10      	ldr	r3, [pc, #64]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dfd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800dfd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dfda:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dfe0:	4b0c      	ldr	r3, [pc, #48]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dfec:	4b09      	ldr	r3, [pc, #36]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dfee:	220c      	movs	r2, #12
 800dff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dff2:	4b08      	ldr	r3, [pc, #32]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dff8:	4b06      	ldr	r3, [pc, #24]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800dffa:	2200      	movs	r2, #0
 800dffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800dffe:	4805      	ldr	r0, [pc, #20]	; (800e014 <MX_USART1_UART_Init+0x4c>)
 800e000:	f7f6 faf2 	bl	80045e8 <HAL_UART_Init>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e00a:	f000 f92e 	bl	800e26a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e00e:	bf00      	nop
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	20000b64 	.word	0x20000b64
 800e018:	40011000 	.word	0x40011000

0800e01c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b08a      	sub	sp, #40	; 0x28
 800e020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e022:	f107 0314 	add.w	r3, r7, #20
 800e026:	2200      	movs	r2, #0
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	605a      	str	r2, [r3, #4]
 800e02c:	609a      	str	r2, [r3, #8]
 800e02e:	60da      	str	r2, [r3, #12]
 800e030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e032:	2300      	movs	r3, #0
 800e034:	613b      	str	r3, [r7, #16]
 800e036:	4b53      	ldr	r3, [pc, #332]	; (800e184 <MX_GPIO_Init+0x168>)
 800e038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03a:	4a52      	ldr	r2, [pc, #328]	; (800e184 <MX_GPIO_Init+0x168>)
 800e03c:	f043 0304 	orr.w	r3, r3, #4
 800e040:	6313      	str	r3, [r2, #48]	; 0x30
 800e042:	4b50      	ldr	r3, [pc, #320]	; (800e184 <MX_GPIO_Init+0x168>)
 800e044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e046:	f003 0304 	and.w	r3, r3, #4
 800e04a:	613b      	str	r3, [r7, #16]
 800e04c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	4b4c      	ldr	r3, [pc, #304]	; (800e184 <MX_GPIO_Init+0x168>)
 800e054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e056:	4a4b      	ldr	r2, [pc, #300]	; (800e184 <MX_GPIO_Init+0x168>)
 800e058:	f043 0301 	orr.w	r3, r3, #1
 800e05c:	6313      	str	r3, [r2, #48]	; 0x30
 800e05e:	4b49      	ldr	r3, [pc, #292]	; (800e184 <MX_GPIO_Init+0x168>)
 800e060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e06a:	2300      	movs	r3, #0
 800e06c:	60bb      	str	r3, [r7, #8]
 800e06e:	4b45      	ldr	r3, [pc, #276]	; (800e184 <MX_GPIO_Init+0x168>)
 800e070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e072:	4a44      	ldr	r2, [pc, #272]	; (800e184 <MX_GPIO_Init+0x168>)
 800e074:	f043 0302 	orr.w	r3, r3, #2
 800e078:	6313      	str	r3, [r2, #48]	; 0x30
 800e07a:	4b42      	ldr	r3, [pc, #264]	; (800e184 <MX_GPIO_Init+0x168>)
 800e07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e07e:	f003 0302 	and.w	r3, r3, #2
 800e082:	60bb      	str	r3, [r7, #8]
 800e084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e086:	2300      	movs	r3, #0
 800e088:	607b      	str	r3, [r7, #4]
 800e08a:	4b3e      	ldr	r3, [pc, #248]	; (800e184 <MX_GPIO_Init+0x168>)
 800e08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08e:	4a3d      	ldr	r2, [pc, #244]	; (800e184 <MX_GPIO_Init+0x168>)
 800e090:	f043 0308 	orr.w	r3, r3, #8
 800e094:	6313      	str	r3, [r2, #48]	; 0x30
 800e096:	4b3b      	ldr	r3, [pc, #236]	; (800e184 <MX_GPIO_Init+0x168>)
 800e098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09a:	f003 0308 	and.w	r3, r3, #8
 800e09e:	607b      	str	r3, [r7, #4]
 800e0a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800e0a8:	4837      	ldr	r0, [pc, #220]	; (800e188 <MX_GPIO_Init+0x16c>)
 800e0aa:	f7f4 f92b 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800e0b4:	4835      	ldr	r0, [pc, #212]	; (800e18c <MX_GPIO_Init+0x170>)
 800e0b6:	f7f4 f925 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f242 7103 	movw	r1, #9987	; 0x2703
 800e0c0:	4833      	ldr	r0, [pc, #204]	; (800e190 <MX_GPIO_Init+0x174>)
 800e0c2:	f7f4 f91f 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2104      	movs	r1, #4
 800e0ca:	4832      	ldr	r0, [pc, #200]	; (800e194 <MX_GPIO_Init+0x178>)
 800e0cc:	f7f4 f91a 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e0d0:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800e0d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e0e2:	f107 0314 	add.w	r3, r7, #20
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4827      	ldr	r0, [pc, #156]	; (800e188 <MX_GPIO_Init+0x16c>)
 800e0ea:	f7f3 ff59 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800e0ee:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800e0f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e100:	f107 0314 	add.w	r3, r7, #20
 800e104:	4619      	mov	r1, r3
 800e106:	4821      	ldr	r0, [pc, #132]	; (800e18c <MX_GPIO_Init+0x170>)
 800e108:	f7f3 ff4a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e10c:	f242 7303 	movw	r3, #9987	; 0x2703
 800e110:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e112:	2301      	movs	r3, #1
 800e114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e116:	2300      	movs	r3, #0
 800e118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e11a:	2300      	movs	r3, #0
 800e11c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e11e:	f107 0314 	add.w	r3, r7, #20
 800e122:	4619      	mov	r1, r3
 800e124:	481a      	ldr	r0, [pc, #104]	; (800e190 <MX_GPIO_Init+0x174>)
 800e126:	f7f3 ff3b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e12a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e12e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e130:	2300      	movs	r3, #0
 800e132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e134:	2301      	movs	r3, #1
 800e136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e138:	f107 0314 	add.w	r3, r7, #20
 800e13c:	4619      	mov	r1, r3
 800e13e:	4814      	ldr	r0, [pc, #80]	; (800e190 <MX_GPIO_Init+0x174>)
 800e140:	f7f3 ff2e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e14a:	2300      	movs	r3, #0
 800e14c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e14e:	2300      	movs	r3, #0
 800e150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e152:	f107 0314 	add.w	r3, r7, #20
 800e156:	4619      	mov	r1, r3
 800e158:	480c      	ldr	r0, [pc, #48]	; (800e18c <MX_GPIO_Init+0x170>)
 800e15a:	f7f3 ff21 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e15e:	2304      	movs	r3, #4
 800e160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e162:	2301      	movs	r3, #1
 800e164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e166:	2300      	movs	r3, #0
 800e168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e16a:	2300      	movs	r3, #0
 800e16c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e16e:	f107 0314 	add.w	r3, r7, #20
 800e172:	4619      	mov	r1, r3
 800e174:	4807      	ldr	r0, [pc, #28]	; (800e194 <MX_GPIO_Init+0x178>)
 800e176:	f7f3 ff13 	bl	8001fa0 <HAL_GPIO_Init>

}
 800e17a:	bf00      	nop
 800e17c:	3728      	adds	r7, #40	; 0x28
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	40023800 	.word	0x40023800
 800e188:	40020800 	.word	0x40020800
 800e18c:	40020000 	.word	0x40020000
 800e190:	40020400 	.word	0x40020400
 800e194:	40020c00 	.word	0x40020c00

0800e198 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08a      	sub	sp, #40	; 0x28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1a2:	2360      	movs	r3, #96	; 0x60
 800e1a4:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800e1ae:	4a15      	ldr	r2, [pc, #84]	; (800e204 <buzzer+0x6c>)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	fb92 f3f3 	sdiv	r3, r2, r3
 800e1b6:	4a14      	ldr	r2, [pc, #80]	; (800e208 <buzzer+0x70>)
 800e1b8:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800e1ba:	4b13      	ldr	r3, [pc, #76]	; (800e208 <buzzer+0x70>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	4b13      	ldr	r3, [pc, #76]	; (800e20c <buzzer+0x74>)
 800e1c0:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800e1c2:	4b11      	ldr	r3, [pc, #68]	; (800e208 <buzzer+0x70>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a12      	ldr	r2, [pc, #72]	; (800e210 <buzzer+0x78>)
 800e1c8:	fb82 1203 	smull	r1, r2, r2, r3
 800e1cc:	1092      	asrs	r2, r2, #2
 800e1ce:	17db      	asrs	r3, r3, #31
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800e1d4:	f107 030c 	add.w	r3, r7, #12
 800e1d8:	2204      	movs	r2, #4
 800e1da:	4619      	mov	r1, r3
 800e1dc:	480d      	ldr	r0, [pc, #52]	; (800e214 <buzzer+0x7c>)
 800e1de:	f7f5 fcf5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800e1e2:	2104      	movs	r1, #4
 800e1e4:	480b      	ldr	r0, [pc, #44]	; (800e214 <buzzer+0x7c>)
 800e1e6:	f7f5 fa89 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7f2 ff15 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800e1f2:	2104      	movs	r1, #4
 800e1f4:	4807      	ldr	r0, [pc, #28]	; (800e214 <buzzer+0x7c>)
 800e1f6:	f7f5 fabf 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800e1fa:	bf00      	nop
 800e1fc:	3728      	adds	r7, #40	; 0x28
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	000f4240 	.word	0x000f4240
 800e208:	200002c4 	.word	0x200002c4
 800e20c:	40000400 	.word	0x40000400
 800e210:	66666667 	.word	0x66666667
 800e214:	20000aa4 	.word	0x20000aa4

0800e218 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800e222:	f107 0308 	add.w	r3, r7, #8
 800e226:	2200      	movs	r2, #0
 800e228:	601a      	str	r2, [r3, #0]
 800e22a:	605a      	str	r2, [r3, #4]
 800e22c:	609a      	str	r2, [r3, #8]
 800e22e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800e234:	2301      	movs	r3, #1
 800e236:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e238:	2300      	movs	r3, #0
 800e23a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e23c:	2300      	movs	r3, #0
 800e23e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800e240:	f107 0308 	add.w	r3, r7, #8
 800e244:	4619      	mov	r1, r3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7f3 f8a6 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7f2 ff4b 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800e252:	2164      	movs	r1, #100	; 0x64
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7f3 f80d 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f7f3 f88e 	bl	800137c <HAL_ADC_GetValue>
 800e260:	4603      	mov	r3, r0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3718      	adds	r7, #24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e26a:	b480      	push	{r7}
 800e26c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e26e:	bf00      	nop
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <search_init>:

#include "global.h"

void search_init(void){
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800e27c:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <search_init+0x2c>)
 800e27e:	2200      	movs	r2, #0
 800e280:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800e282:	4b09      	ldr	r3, [pc, #36]	; (800e2a8 <search_init+0x30>)
 800e284:	2204      	movs	r2, #4
 800e286:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800e288:	f001 f94a 	bl	800f520 <map_Init>
	mouse.x = 0;
 800e28c:	4b07      	ldr	r3, [pc, #28]	; (800e2ac <search_init+0x34>)
 800e28e:	2200      	movs	r2, #0
 800e290:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800e292:	4b06      	ldr	r3, [pc, #24]	; (800e2ac <search_init+0x34>)
 800e294:	2200      	movs	r2, #0
 800e296:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800e298:	4b04      	ldr	r3, [pc, #16]	; (800e2ac <search_init+0x34>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	709a      	strb	r2, [r3, #2]
}
 800e29e:	bf00      	nop
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20000bb0 	.word	0x20000bb0
 800e2a8:	20000b4c 	.word	0x20000b4c
 800e2ac:	20000c0c 	.word	0x20000c0c

0800e2b0 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e2b4:	4b37      	ldr	r3, [pc, #220]	; (800e394 <searchA+0xe4>)
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <searchA+0x16>
		load_map_from_eeprom();
 800e2c2:	f003 f85f 	bl	8011384 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e2c6:	f003 f8d5 	bl	8011474 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800e2ca:	4b33      	ldr	r3, [pc, #204]	; (800e398 <searchA+0xe8>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	4b30      	ldr	r3, [pc, #192]	; (800e398 <searchA+0xe8>)
 800e2d6:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800e2d8:	f001 f98e 	bl	800f5f8 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800e2dc:	4b2f      	ldr	r3, [pc, #188]	; (800e39c <searchA+0xec>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e2e2:	f001 fb7d 	bl	800f9e0 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e2e6:	f001 ff37 	bl	8010158 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e2ea:	4b2c      	ldr	r3, [pc, #176]	; (800e39c <searchA+0xec>)
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	b2d1      	uxtb	r1, r2
 800e2f2:	4a2a      	ldr	r2, [pc, #168]	; (800e39c <searchA+0xec>)
 800e2f4:	7011      	strb	r1, [r2, #0]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	4b29      	ldr	r3, [pc, #164]	; (800e3a0 <searchA+0xf0>)
 800e2fa:	5c9b      	ldrb	r3, [r3, r2]
 800e2fc:	2b22      	cmp	r3, #34	; 0x22
 800e2fe:	d00b      	beq.n	800e318 <searchA+0x68>
 800e300:	2b22      	cmp	r3, #34	; 0x22
 800e302:	dc02      	bgt.n	800e30a <searchA+0x5a>
 800e304:	2b11      	cmp	r3, #17
 800e306:	d012      	beq.n	800e32e <searchA+0x7e>
 800e308:	e015      	b.n	800e336 <searchA+0x86>
 800e30a:	2b44      	cmp	r3, #68	; 0x44
 800e30c:	d001      	beq.n	800e312 <searchA+0x62>
 800e30e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800e310:	e011      	b.n	800e336 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800e312:	f7f7 fea5 	bl	8006060 <rotate_R90>
				break;
 800e316:	e00e      	b.n	800e336 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800e318:	f7f8 f85a 	bl	80063d0 <rotate_180>
				if(wall_info & 0x88){
 800e31c:	4b1e      	ldr	r3, [pc, #120]	; (800e398 <searchA+0xe8>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e324:	2b00      	cmp	r3, #0
 800e326:	d005      	beq.n	800e334 <searchA+0x84>
					set_position();
 800e328:	f7f7 faa2 	bl	8005870 <set_position>
				}
				break;
 800e32c:	e002      	b.n	800e334 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800e32e:	f7f7 ff73 	bl	8006218 <rotate_L90>
				break;
 800e332:	e000      	b.n	800e336 <searchA+0x86>
				break;
 800e334:	bf00      	nop
		}

		drive_wait();
 800e336:	2032      	movs	r0, #50	; 0x32
 800e338:	f7f2 fe70 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800e33c:	f7f7 fcd0 	bl	8005ce0 <one_section>
		drive_wait();
 800e340:	2032      	movs	r0, #50	; 0x32
 800e342:	f7f2 fe6b 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800e346:	f001 f893 	bl	800f470 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800e34a:	f001 f8cb 	bl	800f4e4 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800e34e:	4b15      	ldr	r3, [pc, #84]	; (800e3a4 <searchA+0xf4>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b2da      	uxtb	r2, r3
 800e354:	4b14      	ldr	r3, [pc, #80]	; (800e3a8 <searchA+0xf8>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d1c6      	bne.n	800e2ea <searchA+0x3a>
 800e35c:	4b11      	ldr	r3, [pc, #68]	; (800e3a4 <searchA+0xf4>)
 800e35e:	785b      	ldrb	r3, [r3, #1]
 800e360:	b2da      	uxtb	r2, r3
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <searchA+0xfc>)
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	d1bf      	bne.n	800e2ea <searchA+0x3a>

	printf("goal\n");
 800e36a:	4811      	ldr	r0, [pc, #68]	; (800e3b0 <searchA+0x100>)
 800e36c:	f003 fefe 	bl	801216c <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800e370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e374:	f7f2 fe52 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e378:	f7f8 f82a 	bl	80063d0 <rotate_180>

	if(!MF.FLAG.SCND){
 800e37c:	4b05      	ldr	r3, [pc, #20]	; (800e394 <searchA+0xe4>)
 800e37e:	881b      	ldrh	r3, [r3, #0]
 800e380:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <searchA+0xde>
		store_map_in_eeprom();
 800e38a:	f002 ffc1 	bl	8011310 <store_map_in_eeprom>
	}
}
 800e38e:	bf00      	nop
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20000f68 	.word	0x20000f68
 800e398:	200002c8 	.word	0x200002c8
 800e39c:	200015d0 	.word	0x200015d0
 800e3a0:	20000c54 	.word	0x20000c54
 800e3a4:	20000c0c 	.word	0x20000c0c
 800e3a8:	20000bb0 	.word	0x20000bb0
 800e3ac:	20000b4c 	.word	0x20000b4c
 800e3b0:	080136ec 	.word	0x080136ec

0800e3b4 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e3b8:	4b3c      	ldr	r3, [pc, #240]	; (800e4ac <searchB+0xf8>)
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <searchB+0x16>
		load_map_from_eeprom();
 800e3c6:	f002 ffdd 	bl	8011384 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e3ca:	f003 f853 	bl	8011474 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800e3ce:	4b38      	ldr	r3, [pc, #224]	; (800e4b0 <searchB+0xfc>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	4b35      	ldr	r3, [pc, #212]	; (800e4b0 <searchB+0xfc>)
 800e3da:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800e3dc:	f001 f90c 	bl	800f5f8 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e3e0:	f7f7 fa7a 	bl	80058d8 <start_sectionA>
	adv_pos();
 800e3e4:	f001 f844 	bl	800f470 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800e3e8:	f001 f906 	bl	800f5f8 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800e3ec:	4b31      	ldr	r3, [pc, #196]	; (800e4b4 <searchB+0x100>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e3f2:	f001 faf5 	bl	800f9e0 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e3f6:	f001 feaf 	bl	8010158 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e3fa:	4b2e      	ldr	r3, [pc, #184]	; (800e4b4 <searchB+0x100>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	1c5a      	adds	r2, r3, #1
 800e400:	b2d1      	uxtb	r1, r2
 800e402:	4a2c      	ldr	r2, [pc, #176]	; (800e4b4 <searchB+0x100>)
 800e404:	7011      	strb	r1, [r2, #0]
 800e406:	461a      	mov	r2, r3
 800e408:	4b2b      	ldr	r3, [pc, #172]	; (800e4b8 <searchB+0x104>)
 800e40a:	5c9b      	ldrb	r3, [r3, r2]
 800e40c:	2b22      	cmp	r3, #34	; 0x22
 800e40e:	d012      	beq.n	800e436 <searchB+0x82>
 800e410:	2b22      	cmp	r3, #34	; 0x22
 800e412:	dc02      	bgt.n	800e41a <searchB+0x66>
 800e414:	2b11      	cmp	r3, #17
 800e416:	d01d      	beq.n	800e454 <searchB+0xa0>
 800e418:	e023      	b.n	800e462 <searchB+0xae>
 800e41a:	2b44      	cmp	r3, #68	; 0x44
 800e41c:	d004      	beq.n	800e428 <searchB+0x74>
 800e41e:	2b88      	cmp	r3, #136	; 0x88
 800e420:	d11f      	bne.n	800e462 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800e422:	f7f7 fe05 	bl	8006030 <one_sectionU>
				break;
 800e426:	e01c      	b.n	800e462 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800e428:	f7f7 fb74 	bl	8005b14 <half_sectionD>
				rotate_R90();
 800e42c:	f7f7 fe18 	bl	8006060 <rotate_R90>
				half_sectionA();
 800e430:	f7f7 fb26 	bl	8005a80 <half_sectionA>
				break;
 800e434:	e015      	b.n	800e462 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e436:	f7f7 fb6d 	bl	8005b14 <half_sectionD>
				rotate_180();
 800e43a:	f7f7 ffc9 	bl	80063d0 <rotate_180>
				if(wall_info & 0x88){
 800e43e:	4b1c      	ldr	r3, [pc, #112]	; (800e4b0 <searchB+0xfc>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e446:	2b00      	cmp	r3, #0
 800e448:	d001      	beq.n	800e44e <searchB+0x9a>
					set_position();
 800e44a:	f7f7 fa11 	bl	8005870 <set_position>
				}
				half_sectionA();
 800e44e:	f7f7 fb17 	bl	8005a80 <half_sectionA>
				break;
 800e452:	e006      	b.n	800e462 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800e454:	f7f7 fb5e 	bl	8005b14 <half_sectionD>
				rotate_L90();
 800e458:	f7f7 fede 	bl	8006218 <rotate_L90>
				half_sectionA();
 800e45c:	f7f7 fb10 	bl	8005a80 <half_sectionA>
				break;
 800e460:	bf00      	nop
		}
		adv_pos();
 800e462:	f001 f805 	bl	800f470 <adv_pos>
		conf_route();
 800e466:	f001 f83d 	bl	800f4e4 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800e46a:	4b14      	ldr	r3, [pc, #80]	; (800e4bc <searchB+0x108>)
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	4b13      	ldr	r3, [pc, #76]	; (800e4c0 <searchB+0x10c>)
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d1c0      	bne.n	800e3fa <searchB+0x46>
 800e478:	4b10      	ldr	r3, [pc, #64]	; (800e4bc <searchB+0x108>)
 800e47a:	785b      	ldrb	r3, [r3, #1]
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	4b11      	ldr	r3, [pc, #68]	; (800e4c4 <searchB+0x110>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	429a      	cmp	r2, r3
 800e484:	d1b9      	bne.n	800e3fa <searchB+0x46>

	half_sectionD();
 800e486:	f7f7 fb45 	bl	8005b14 <half_sectionD>

	HAL_Delay(500);
 800e48a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e48e:	f7f2 fdc5 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e492:	f7f7 ff9d 	bl	80063d0 <rotate_180>

	if(!MF.FLAG.SCND){
 800e496:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <searchB+0xf8>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <searchB+0xf4>
		store_map_in_eeprom();
 800e4a4:	f002 ff34 	bl	8011310 <store_map_in_eeprom>
	}
}
 800e4a8:	bf00      	nop
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	20000f68 	.word	0x20000f68
 800e4b0:	200002c8 	.word	0x200002c8
 800e4b4:	200015d0 	.word	0x200015d0
 800e4b8:	20000c54 	.word	0x20000c54
 800e4bc:	20000c0c 	.word	0x20000c0c
 800e4c0:	20000bb0 	.word	0x20000bb0
 800e4c4:	20000b4c 	.word	0x20000b4c

0800e4c8 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800e4c8:	b590      	push	{r4, r7, lr}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e4ce:	4bab      	ldr	r3, [pc, #684]	; (800e77c <searchC+0x2b4>)
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <searchC+0x18>
		load_map_from_eeprom();
 800e4dc:	f002 ff52 	bl	8011384 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e4e0:	4ba6      	ldr	r3, [pc, #664]	; (800e77c <searchC+0x2b4>)
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <searchC+0x2a>
 800e4ee:	f002 ffc1 	bl	8011474 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800e4f2:	4ba2      	ldr	r3, [pc, #648]	; (800e77c <searchC+0x2b4>)
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d106      	bne.n	800e50e <searchC+0x46>
 800e500:	4b9f      	ldr	r3, [pc, #636]	; (800e780 <searchC+0x2b8>)
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	4b9d      	ldr	r3, [pc, #628]	; (800e780 <searchC+0x2b8>)
 800e50c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e50e:	4b9b      	ldr	r3, [pc, #620]	; (800e77c <searchC+0x2b4>)
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d101      	bne.n	800e520 <searchC+0x58>
 800e51c:	f001 f86c 	bl	800f5f8 <write_map>

	if(MF2.FLAG.GOAL){
 800e520:	4b98      	ldr	r3, [pc, #608]	; (800e784 <searchC+0x2bc>)
 800e522:	881b      	ldrh	r3, [r3, #0]
 800e524:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00b      	beq.n	800e546 <searchC+0x7e>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800e52e:	f7f7 ff4f 	bl	80063d0 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800e532:	4b95      	ldr	r3, [pc, #596]	; (800e788 <searchC+0x2c0>)
 800e534:	2201      	movs	r2, #1
 800e536:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e538:	4b94      	ldr	r3, [pc, #592]	; (800e78c <searchC+0x2c4>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800e53e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e542:	f7f2 fd6b 	bl	800101c <HAL_Delay>
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e546:	f7f7 f9c7 	bl	80058d8 <start_sectionA>
	adv_pos();
 800e54a:	f000 ff91 	bl	800f470 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e54e:	4b8b      	ldr	r3, [pc, #556]	; (800e77c <searchC+0x2b4>)
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <searchC+0x98>
 800e55c:	f001 f84c 	bl	800f5f8 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800e560:	4b8b      	ldr	r3, [pc, #556]	; (800e790 <searchC+0x2c8>)
 800e562:	2200      	movs	r2, #0
 800e564:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800e566:	f001 fa3b 	bl	800f9e0 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800e56a:	f001 fdf5 	bl	8010158 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800e56e:	4b88      	ldr	r3, [pc, #544]	; (800e790 <searchC+0x2c8>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	1c5a      	adds	r2, r3, #1
 800e574:	b2d1      	uxtb	r1, r2
 800e576:	4a86      	ldr	r2, [pc, #536]	; (800e790 <searchC+0x2c8>)
 800e578:	7011      	strb	r1, [r2, #0]
 800e57a:	461a      	mov	r2, r3
 800e57c:	4b85      	ldr	r3, [pc, #532]	; (800e794 <searchC+0x2cc>)
 800e57e:	5c9b      	ldrb	r3, [r3, r2]
 800e580:	2b22      	cmp	r3, #34	; 0x22
 800e582:	d07f      	beq.n	800e684 <searchC+0x1bc>
 800e584:	2b22      	cmp	r3, #34	; 0x22
 800e586:	dc03      	bgt.n	800e590 <searchC+0xc8>
 800e588:	2b11      	cmp	r3, #17
 800e58a:	f000 808b 	beq.w	800e6a4 <searchC+0x1dc>
 800e58e:	e08c      	b.n	800e6aa <searchC+0x1e2>
 800e590:	2b44      	cmp	r3, #68	; 0x44
 800e592:	d074      	beq.n	800e67e <searchC+0x1b6>
 800e594:	2b88      	cmp	r3, #136	; 0x88
 800e596:	f040 8088 	bne.w	800e6aa <searchC+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800e59a:	4b7d      	ldr	r3, [pc, #500]	; (800e790 <searchC+0x2c8>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	4b7c      	ldr	r3, [pc, #496]	; (800e794 <searchC+0x2cc>)
 800e5a2:	5c9b      	ldrb	r3, [r3, r2]
 800e5a4:	2b88      	cmp	r3, #136	; 0x88
 800e5a6:	d158      	bne.n	800e65a <searchC+0x192>
 800e5a8:	4b74      	ldr	r3, [pc, #464]	; (800e77c <searchC+0x2b4>)
 800e5aa:	881b      	ldrh	r3, [r3, #0]
 800e5ac:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d051      	beq.n	800e65a <searchC+0x192>
					x = mouse.x;
 800e5b6:	4b78      	ldr	r3, [pc, #480]	; (800e798 <searchC+0x2d0>)
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800e5bc:	4b76      	ldr	r3, [pc, #472]	; (800e798 <searchC+0x2d0>)
 800e5be:	785b      	ldrb	r3, [r3, #1]
 800e5c0:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800e5c2:	f000 ff55 	bl	800f470 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800e5c6:	4b74      	ldr	r3, [pc, #464]	; (800e798 <searchC+0x2d0>)
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	4b72      	ldr	r3, [pc, #456]	; (800e798 <searchC+0x2d0>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4a71      	ldr	r2, [pc, #452]	; (800e79c <searchC+0x2d4>)
 800e5d8:	0103      	lsls	r3, r0, #4
 800e5da:	4413      	add	r3, r2
 800e5dc:	440b      	add	r3, r1
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	f003 030f 	and.w	r3, r3, #15
 800e5e4:	4a6c      	ldr	r2, [pc, #432]	; (800e798 <searchC+0x2d0>)
 800e5e6:	7852      	ldrb	r2, [r2, #1]
 800e5e8:	b2d2      	uxtb	r2, r2
 800e5ea:	4614      	mov	r4, r2
 800e5ec:	4a6a      	ldr	r2, [pc, #424]	; (800e798 <searchC+0x2d0>)
 800e5ee:	7812      	ldrb	r2, [r2, #0]
 800e5f0:	b2d2      	uxtb	r2, r2
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	4969      	ldr	r1, [pc, #420]	; (800e79c <searchC+0x2d4>)
 800e5f6:	0122      	lsls	r2, r4, #4
 800e5f8:	440a      	add	r2, r1
 800e5fa:	4402      	add	r2, r0
 800e5fc:	7812      	ldrb	r2, [r2, #0]
 800e5fe:	0912      	lsrs	r2, r2, #4
 800e600:	b2d2      	uxtb	r2, r2
 800e602:	4293      	cmp	r3, r2
 800e604:	d111      	bne.n	800e62a <searchC+0x162>
						if(!MF2.FLAG.HACCEL){
 800e606:	4b5f      	ldr	r3, [pc, #380]	; (800e784 <searchC+0x2bc>)
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	d107      	bne.n	800e624 <searchC+0x15c>
							one_sectionA();
 800e614:	f7f7 fb6c 	bl	8005cf0 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800e618:	4a5a      	ldr	r2, [pc, #360]	; (800e784 <searchC+0x2bc>)
 800e61a:	8813      	ldrh	r3, [r2, #0]
 800e61c:	f043 0302 	orr.w	r3, r3, #2
 800e620:	8013      	strh	r3, [r2, #0]
 800e622:	e013      	b.n	800e64c <searchC+0x184>
						}else{
							one_sectionU();
 800e624:	f7f7 fd04 	bl	8006030 <one_sectionU>
 800e628:	e010      	b.n	800e64c <searchC+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800e62a:	4b56      	ldr	r3, [pc, #344]	; (800e784 <searchC+0x2bc>)
 800e62c:	881b      	ldrh	r3, [r3, #0]
 800e62e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e632:	b2db      	uxtb	r3, r3
 800e634:	2b00      	cmp	r3, #0
 800e636:	d007      	beq.n	800e648 <searchC+0x180>
						one_sectionD();
 800e638:	f7f7 fbc0 	bl	8005dbc <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800e63c:	4a51      	ldr	r2, [pc, #324]	; (800e784 <searchC+0x2bc>)
 800e63e:	8813      	ldrh	r3, [r2, #0]
 800e640:	f36f 0341 	bfc	r3, #1, #1
 800e644:	8013      	strh	r3, [r2, #0]
 800e646:	e001      	b.n	800e64c <searchC+0x184>
					}else{
						one_sectionU();
 800e648:	f7f7 fcf2 	bl	8006030 <one_sectionU>
					}
					mouse.x = x;
 800e64c:	4a52      	ldr	r2, [pc, #328]	; (800e798 <searchC+0x2d0>)
 800e64e:	78fb      	ldrb	r3, [r7, #3]
 800e650:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800e652:	4a51      	ldr	r2, [pc, #324]	; (800e798 <searchC+0x2d0>)
 800e654:	78bb      	ldrb	r3, [r7, #2]
 800e656:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800e658:	e027      	b.n	800e6aa <searchC+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800e65a:	4b4a      	ldr	r3, [pc, #296]	; (800e784 <searchC+0x2bc>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <searchC+0x1b0>
					one_sectionD();
 800e668:	f7f7 fba8 	bl	8005dbc <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800e66c:	4a45      	ldr	r2, [pc, #276]	; (800e784 <searchC+0x2bc>)
 800e66e:	8813      	ldrh	r3, [r2, #0]
 800e670:	f36f 0341 	bfc	r3, #1, #1
 800e674:	8013      	strh	r3, [r2, #0]
				break;
 800e676:	e018      	b.n	800e6aa <searchC+0x1e2>
					one_sectionU();
 800e678:	f7f7 fcda 	bl	8006030 <one_sectionU>
				break;
 800e67c:	e015      	b.n	800e6aa <searchC+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800e67e:	f7f7 ff7f 	bl	8006580 <slalom_R90>
				break;
 800e682:	e012      	b.n	800e6aa <searchC+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e684:	f7f7 fa46 	bl	8005b14 <half_sectionD>
				rotate_180();
 800e688:	f7f7 fea2 	bl	80063d0 <rotate_180>
				if(wall_info & 0x88){
 800e68c:	4b3c      	ldr	r3, [pc, #240]	; (800e780 <searchC+0x2b8>)
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e694:	2b00      	cmp	r3, #0
 800e696:	d002      	beq.n	800e69e <searchC+0x1d6>
					set_position();
 800e698:	f7f7 f8ea 	bl	8005870 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800e69c:	e005      	b.n	800e6aa <searchC+0x1e2>
					half_sectionA();
 800e69e:	f7f7 f9ef 	bl	8005a80 <half_sectionA>
				break;
 800e6a2:	e002      	b.n	800e6aa <searchC+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800e6a4:	f7f8 f884 	bl	80067b0 <slalom_L90>
				break;
 800e6a8:	bf00      	nop
		}
		adv_pos();
 800e6aa:	f000 fee1 	bl	800f470 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800e6ae:	4b33      	ldr	r3, [pc, #204]	; (800e77c <searchC+0x2b4>)
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <searchC+0x1f8>
 800e6bc:	f000 ff12 	bl	800f4e4 <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800e6c0:	4b35      	ldr	r3, [pc, #212]	; (800e798 <searchC+0x2d0>)
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	4b33      	ldr	r3, [pc, #204]	; (800e798 <searchC+0x2d0>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4a33      	ldr	r2, [pc, #204]	; (800e7a0 <searchC+0x2d8>)
 800e6d2:	0103      	lsls	r3, r0, #4
 800e6d4:	440b      	add	r3, r1
 800e6d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f47f af47 	bne.w	800e56e <searchC+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	607b      	str	r3, [r7, #4]
 800e6e4:	e006      	b.n	800e6f4 <searchC+0x22c>
		one_sectionU();
 800e6e6:	f7f7 fca3 	bl	8006030 <one_sectionU>
		adv_pos();
 800e6ea:	f000 fec1 	bl	800f470 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	607b      	str	r3, [r7, #4]
 800e6f4:	4b25      	ldr	r3, [pc, #148]	; (800e78c <searchC+0x2c4>)
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	dbf2      	blt.n	800e6e6 <searchC+0x21e>
	}
	half_sectionD();
 800e700:	f7f7 fa08 	bl	8005b14 <half_sectionD>

	set_positionF();
 800e704:	f7f7 f8ca 	bl	800589c <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800e708:	4b1e      	ldr	r3, [pc, #120]	; (800e784 <searchC+0x2bc>)
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e710:	b2db      	uxtb	r3, r3
 800e712:	3301      	adds	r3, #1
 800e714:	2b00      	cmp	r3, #0
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	bfb8      	it	lt
 800e71c:	425b      	neglt	r3, r3
 800e71e:	f003 0301 	and.w	r3, r3, #1
 800e722:	b2d9      	uxtb	r1, r3
 800e724:	4a17      	ldr	r2, [pc, #92]	; (800e784 <searchC+0x2bc>)
 800e726:	8813      	ldrh	r3, [r2, #0]
 800e728:	f361 2308 	bfi	r3, r1, #8, #1
 800e72c:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800e72e:	4b15      	ldr	r3, [pc, #84]	; (800e784 <searchC+0x2bc>)
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e736:	b2db      	uxtb	r3, r3
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d112      	bne.n	800e762 <searchC+0x29a>
		HAL_Delay(500);
 800e73c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e740:	f7f2 fc6c 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800e744:	f7f7 fe44 	bl	80063d0 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800e748:	2064      	movs	r0, #100	; 0x64
 800e74a:	f7f6 fe45 	bl	80053d8 <driveC2>
		degree_z = target_degree_z;
 800e74e:	4b15      	ldr	r3, [pc, #84]	; (800e7a4 <searchC+0x2dc>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a15      	ldr	r2, [pc, #84]	; (800e7a8 <searchC+0x2e0>)
 800e754:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <searchC+0x2c0>)
 800e758:	2200      	movs	r2, #0
 800e75a:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e75c:	4b0b      	ldr	r3, [pc, #44]	; (800e78c <searchC+0x2c4>)
 800e75e:	2201      	movs	r2, #1
 800e760:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800e762:	4b06      	ldr	r3, [pc, #24]	; (800e77c <searchC+0x2b4>)
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <searchC+0x2ac>
		store_map_in_eeprom();
 800e770:	f002 fdce 	bl	8011310 <store_map_in_eeprom>
	}
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd90      	pop	{r4, r7, pc}
 800e77c:	20000f68 	.word	0x20000f68
 800e780:	200002c8 	.word	0x200002c8
 800e784:	20000f64 	.word	0x20000f64
 800e788:	200015c8 	.word	0x200015c8
 800e78c:	20000bb1 	.word	0x20000bb1
 800e790:	200015d0 	.word	0x200015d0
 800e794:	20000c54 	.word	0x20000c54
 800e798:	20000c0c 	.word	0x20000c0c
 800e79c:	200001ac 	.word	0x200001ac
 800e7a0:	20000d60 	.word	0x20000d60
 800e7a4:	20000bf8 	.word	0x20000bf8
 800e7a8:	20000b5c 	.word	0x20000b5c

0800e7ac <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800e7ac:	b590      	push	{r4, r7, lr}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800e7b2:	4bab      	ldr	r3, [pc, #684]	; (800ea60 <searchC2+0x2b4>)
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d001      	beq.n	800e7c4 <searchC2+0x18>
		load_map_from_eeprom();
 800e7c0:	f002 fde0 	bl	8011384 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e7c4:	4ba6      	ldr	r3, [pc, #664]	; (800ea60 <searchC2+0x2b4>)
 800e7c6:	881b      	ldrh	r3, [r3, #0]
 800e7c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <searchC2+0x2a>
 800e7d2:	f002 fe4f 	bl	8011474 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800e7d6:	4ba2      	ldr	r3, [pc, #648]	; (800ea60 <searchC2+0x2b4>)
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d106      	bne.n	800e7f2 <searchC2+0x46>
 800e7e4:	4b9f      	ldr	r3, [pc, #636]	; (800ea64 <searchC2+0x2b8>)
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	4b9d      	ldr	r3, [pc, #628]	; (800ea64 <searchC2+0x2b8>)
 800e7f0:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e7f2:	4b9b      	ldr	r3, [pc, #620]	; (800ea60 <searchC2+0x2b4>)
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d101      	bne.n	800e804 <searchC2+0x58>
 800e800:	f000 fefa 	bl	800f5f8 <write_map>

	if(MF2.FLAG.GOAL){
 800e804:	4b98      	ldr	r3, [pc, #608]	; (800ea68 <searchC2+0x2bc>)
 800e806:	881b      	ldrh	r3, [r3, #0]
 800e808:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00b      	beq.n	800e82a <searchC2+0x7e>
		HAL_Delay(500);
 800e812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e816:	f7f2 fc01 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800e81a:	f7f7 fdd9 	bl	80063d0 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800e81e:	4b93      	ldr	r3, [pc, #588]	; (800ea6c <searchC2+0x2c0>)
 800e820:	2201      	movs	r2, #1
 800e822:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e824:	4b92      	ldr	r3, [pc, #584]	; (800ea70 <searchC2+0x2c4>)
 800e826:	2201      	movs	r2, #1
 800e828:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e82a:	f7f7 f855 	bl	80058d8 <start_sectionA>
	adv_pos();
 800e82e:	f000 fe1f 	bl	800f470 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e832:	4b8b      	ldr	r3, [pc, #556]	; (800ea60 <searchC2+0x2b4>)
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <searchC2+0x98>
 800e840:	f000 feda 	bl	800f5f8 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800e844:	4b8b      	ldr	r3, [pc, #556]	; (800ea74 <searchC2+0x2c8>)
 800e846:	2200      	movs	r2, #0
 800e848:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800e84a:	f001 f8c9 	bl	800f9e0 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800e84e:	f001 fc83 	bl	8010158 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800e852:	4b88      	ldr	r3, [pc, #544]	; (800ea74 <searchC2+0x2c8>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	b2d1      	uxtb	r1, r2
 800e85a:	4a86      	ldr	r2, [pc, #536]	; (800ea74 <searchC2+0x2c8>)
 800e85c:	7011      	strb	r1, [r2, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	4b85      	ldr	r3, [pc, #532]	; (800ea78 <searchC2+0x2cc>)
 800e862:	5c9b      	ldrb	r3, [r3, r2]
 800e864:	2b22      	cmp	r3, #34	; 0x22
 800e866:	d07f      	beq.n	800e968 <searchC2+0x1bc>
 800e868:	2b22      	cmp	r3, #34	; 0x22
 800e86a:	dc03      	bgt.n	800e874 <searchC2+0xc8>
 800e86c:	2b11      	cmp	r3, #17
 800e86e:	f000 808b 	beq.w	800e988 <searchC2+0x1dc>
 800e872:	e08c      	b.n	800e98e <searchC2+0x1e2>
 800e874:	2b44      	cmp	r3, #68	; 0x44
 800e876:	d074      	beq.n	800e962 <searchC2+0x1b6>
 800e878:	2b88      	cmp	r3, #136	; 0x88
 800e87a:	f040 8088 	bne.w	800e98e <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800e87e:	4b7d      	ldr	r3, [pc, #500]	; (800ea74 <searchC2+0x2c8>)
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	4b7c      	ldr	r3, [pc, #496]	; (800ea78 <searchC2+0x2cc>)
 800e886:	5c9b      	ldrb	r3, [r3, r2]
 800e888:	2b88      	cmp	r3, #136	; 0x88
 800e88a:	d158      	bne.n	800e93e <searchC2+0x192>
 800e88c:	4b74      	ldr	r3, [pc, #464]	; (800ea60 <searchC2+0x2b4>)
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d051      	beq.n	800e93e <searchC2+0x192>
					x = mouse.x;
 800e89a:	4b78      	ldr	r3, [pc, #480]	; (800ea7c <searchC2+0x2d0>)
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800e8a0:	4b76      	ldr	r3, [pc, #472]	; (800ea7c <searchC2+0x2d0>)
 800e8a2:	785b      	ldrb	r3, [r3, #1]
 800e8a4:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800e8a6:	f000 fde3 	bl	800f470 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800e8aa:	4b74      	ldr	r3, [pc, #464]	; (800ea7c <searchC2+0x2d0>)
 800e8ac:	785b      	ldrb	r3, [r3, #1]
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	4b72      	ldr	r3, [pc, #456]	; (800ea7c <searchC2+0x2d0>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4a71      	ldr	r2, [pc, #452]	; (800ea80 <searchC2+0x2d4>)
 800e8bc:	0103      	lsls	r3, r0, #4
 800e8be:	4413      	add	r3, r2
 800e8c0:	440b      	add	r3, r1
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	f003 030f 	and.w	r3, r3, #15
 800e8c8:	4a6c      	ldr	r2, [pc, #432]	; (800ea7c <searchC2+0x2d0>)
 800e8ca:	7852      	ldrb	r2, [r2, #1]
 800e8cc:	b2d2      	uxtb	r2, r2
 800e8ce:	4614      	mov	r4, r2
 800e8d0:	4a6a      	ldr	r2, [pc, #424]	; (800ea7c <searchC2+0x2d0>)
 800e8d2:	7812      	ldrb	r2, [r2, #0]
 800e8d4:	b2d2      	uxtb	r2, r2
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	4969      	ldr	r1, [pc, #420]	; (800ea80 <searchC2+0x2d4>)
 800e8da:	0122      	lsls	r2, r4, #4
 800e8dc:	440a      	add	r2, r1
 800e8de:	4402      	add	r2, r0
 800e8e0:	7812      	ldrb	r2, [r2, #0]
 800e8e2:	0912      	lsrs	r2, r2, #4
 800e8e4:	b2d2      	uxtb	r2, r2
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d111      	bne.n	800e90e <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800e8ea:	4b5f      	ldr	r3, [pc, #380]	; (800ea68 <searchC2+0x2bc>)
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d107      	bne.n	800e908 <searchC2+0x15c>
							one_sectionA();
 800e8f8:	f7f7 f9fa 	bl	8005cf0 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800e8fc:	4a5a      	ldr	r2, [pc, #360]	; (800ea68 <searchC2+0x2bc>)
 800e8fe:	8813      	ldrh	r3, [r2, #0]
 800e900:	f043 0302 	orr.w	r3, r3, #2
 800e904:	8013      	strh	r3, [r2, #0]
 800e906:	e013      	b.n	800e930 <searchC2+0x184>
						}else{
							one_sectionU();
 800e908:	f7f7 fb92 	bl	8006030 <one_sectionU>
 800e90c:	e010      	b.n	800e930 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800e90e:	4b56      	ldr	r3, [pc, #344]	; (800ea68 <searchC2+0x2bc>)
 800e910:	881b      	ldrh	r3, [r3, #0]
 800e912:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d007      	beq.n	800e92c <searchC2+0x180>
						one_sectionD();
 800e91c:	f7f7 fa4e 	bl	8005dbc <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800e920:	4a51      	ldr	r2, [pc, #324]	; (800ea68 <searchC2+0x2bc>)
 800e922:	8813      	ldrh	r3, [r2, #0]
 800e924:	f36f 0341 	bfc	r3, #1, #1
 800e928:	8013      	strh	r3, [r2, #0]
 800e92a:	e001      	b.n	800e930 <searchC2+0x184>
					}else{
						one_sectionU();
 800e92c:	f7f7 fb80 	bl	8006030 <one_sectionU>
					}
					mouse.x = x;
 800e930:	4a52      	ldr	r2, [pc, #328]	; (800ea7c <searchC2+0x2d0>)
 800e932:	78fb      	ldrb	r3, [r7, #3]
 800e934:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800e936:	4a51      	ldr	r2, [pc, #324]	; (800ea7c <searchC2+0x2d0>)
 800e938:	78bb      	ldrb	r3, [r7, #2]
 800e93a:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800e93c:	e027      	b.n	800e98e <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800e93e:	4b4a      	ldr	r3, [pc, #296]	; (800ea68 <searchC2+0x2bc>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d007      	beq.n	800e95c <searchC2+0x1b0>
					one_sectionD();
 800e94c:	f7f7 fa36 	bl	8005dbc <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800e950:	4a45      	ldr	r2, [pc, #276]	; (800ea68 <searchC2+0x2bc>)
 800e952:	8813      	ldrh	r3, [r2, #0]
 800e954:	f36f 0341 	bfc	r3, #1, #1
 800e958:	8013      	strh	r3, [r2, #0]
				break;
 800e95a:	e018      	b.n	800e98e <searchC2+0x1e2>
					one_sectionU();
 800e95c:	f7f7 fb68 	bl	8006030 <one_sectionU>
				break;
 800e960:	e015      	b.n	800e98e <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800e962:	f7f7 fe0d 	bl	8006580 <slalom_R90>
				break;
 800e966:	e012      	b.n	800e98e <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e968:	f7f7 f8d4 	bl	8005b14 <half_sectionD>
				rotate_180();
 800e96c:	f7f7 fd30 	bl	80063d0 <rotate_180>
				if(wall_info & 0x88){
 800e970:	4b3c      	ldr	r3, [pc, #240]	; (800ea64 <searchC2+0x2b8>)
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <searchC2+0x1d6>
					set_position();
 800e97c:	f7f6 ff78 	bl	8005870 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800e980:	e005      	b.n	800e98e <searchC2+0x1e2>
					half_sectionA();
 800e982:	f7f7 f87d 	bl	8005a80 <half_sectionA>
				break;
 800e986:	e002      	b.n	800e98e <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800e988:	f7f7 ff12 	bl	80067b0 <slalom_L90>
				break;
 800e98c:	bf00      	nop
		}
		adv_pos();
 800e98e:	f000 fd6f 	bl	800f470 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800e992:	4b33      	ldr	r3, [pc, #204]	; (800ea60 <searchC2+0x2b4>)
 800e994:	881b      	ldrh	r3, [r3, #0]
 800e996:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <searchC2+0x1f8>
 800e9a0:	f000 fda0 	bl	800f4e4 <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800e9a4:	4b35      	ldr	r3, [pc, #212]	; (800ea7c <searchC2+0x2d0>)
 800e9a6:	785b      	ldrb	r3, [r3, #1]
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	4b33      	ldr	r3, [pc, #204]	; (800ea7c <searchC2+0x2d0>)
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4a33      	ldr	r2, [pc, #204]	; (800ea84 <searchC2+0x2d8>)
 800e9b6:	0103      	lsls	r3, r0, #4
 800e9b8:	440b      	add	r3, r1
 800e9ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f47f af47 	bne.w	800e852 <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	607b      	str	r3, [r7, #4]
 800e9c8:	e006      	b.n	800e9d8 <searchC2+0x22c>
		one_sectionU();
 800e9ca:	f7f7 fb31 	bl	8006030 <one_sectionU>
		adv_pos();
 800e9ce:	f000 fd4f 	bl	800f470 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	607b      	str	r3, [r7, #4]
 800e9d8:	4b25      	ldr	r3, [pc, #148]	; (800ea70 <searchC2+0x2c4>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	dbf2      	blt.n	800e9ca <searchC2+0x21e>
	}
	half_sectionD();
 800e9e4:	f7f7 f896 	bl	8005b14 <half_sectionD>

	set_positionF();
 800e9e8:	f7f6 ff58 	bl	800589c <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800e9ec:	4b1e      	ldr	r3, [pc, #120]	; (800ea68 <searchC2+0x2bc>)
 800e9ee:	881b      	ldrh	r3, [r3, #0]
 800e9f0:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	bfb8      	it	lt
 800ea00:	425b      	neglt	r3, r3
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	b2d9      	uxtb	r1, r3
 800ea08:	4a17      	ldr	r2, [pc, #92]	; (800ea68 <searchC2+0x2bc>)
 800ea0a:	8813      	ldrh	r3, [r2, #0]
 800ea0c:	f361 2308 	bfi	r3, r1, #8, #1
 800ea10:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800ea12:	4b15      	ldr	r3, [pc, #84]	; (800ea68 <searchC2+0x2bc>)
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d112      	bne.n	800ea46 <searchC2+0x29a>
		HAL_Delay(500);
 800ea20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ea24:	f7f2 fafa 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800ea28:	f7f7 fcd2 	bl	80063d0 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800ea2c:	2064      	movs	r0, #100	; 0x64
 800ea2e:	f7f6 fcd3 	bl	80053d8 <driveC2>
		degree_z = target_degree_z;
 800ea32:	4b15      	ldr	r3, [pc, #84]	; (800ea88 <searchC2+0x2dc>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4a15      	ldr	r2, [pc, #84]	; (800ea8c <searchC2+0x2e0>)
 800ea38:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800ea3a:	4b0c      	ldr	r3, [pc, #48]	; (800ea6c <searchC2+0x2c0>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800ea40:	4b0b      	ldr	r3, [pc, #44]	; (800ea70 <searchC2+0x2c4>)
 800ea42:	2201      	movs	r2, #1
 800ea44:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800ea46:	4b06      	ldr	r3, [pc, #24]	; (800ea60 <searchC2+0x2b4>)
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d101      	bne.n	800ea58 <searchC2+0x2ac>
		store_map_in_eeprom();
 800ea54:	f002 fc5c 	bl	8011310 <store_map_in_eeprom>
	}
}
 800ea58:	bf00      	nop
 800ea5a:	370c      	adds	r7, #12
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd90      	pop	{r4, r7, pc}
 800ea60:	20000f68 	.word	0x20000f68
 800ea64:	200002c8 	.word	0x200002c8
 800ea68:	20000f64 	.word	0x20000f64
 800ea6c:	200015c8 	.word	0x200015c8
 800ea70:	20000bb1 	.word	0x20000bb1
 800ea74:	200015d0 	.word	0x200015d0
 800ea78:	20000c54 	.word	0x20000c54
 800ea7c:	20000c0c 	.word	0x20000c0c
 800ea80:	200001ac 	.word	0x200001ac
 800ea84:	20000d60 	.word	0x20000d60
 800ea88:	20000bf8 	.word	0x20000bf8
 800ea8c:	20000b5c 	.word	0x20000b5c

0800ea90 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ea96:	4b6a      	ldr	r3, [pc, #424]	; (800ec40 <searchD+0x1b0>)
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <searchD+0x18>
		load_map_from_eeprom();
 800eaa4:	f002 fc6e 	bl	8011384 <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800eaa8:	f7f6 ff16 	bl	80058d8 <start_sectionA>
	adv_pos();
 800eaac:	f000 fce0 	bl	800f470 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800eab0:	4b64      	ldr	r3, [pc, #400]	; (800ec44 <searchD+0x1b4>)
 800eab2:	2200      	movs	r2, #0
 800eab4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800eab6:	f000 ff93 	bl	800f9e0 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800eaba:	f001 fb4d 	bl	8010158 <make_route>

	MF2.FLAG.HACCEL = 0;
 800eabe:	4a62      	ldr	r2, [pc, #392]	; (800ec48 <searchD+0x1b8>)
 800eac0:	8813      	ldrh	r3, [r2, #0]
 800eac2:	f36f 0341 	bfc	r3, #1, #1
 800eac6:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800eac8:	4b5e      	ldr	r3, [pc, #376]	; (800ec44 <searchD+0x1b4>)
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	b2d1      	uxtb	r1, r2
 800ead0:	4a5c      	ldr	r2, [pc, #368]	; (800ec44 <searchD+0x1b4>)
 800ead2:	7011      	strb	r1, [r2, #0]
 800ead4:	461a      	mov	r2, r3
 800ead6:	4b5d      	ldr	r3, [pc, #372]	; (800ec4c <searchD+0x1bc>)
 800ead8:	5c9b      	ldrb	r3, [r3, r2]
 800eada:	2b22      	cmp	r3, #34	; 0x22
 800eadc:	d05d      	beq.n	800eb9a <searchD+0x10a>
 800eade:	2b22      	cmp	r3, #34	; 0x22
 800eae0:	dc02      	bgt.n	800eae8 <searchD+0x58>
 800eae2:	2b11      	cmp	r3, #17
 800eae4:	d069      	beq.n	800ebba <searchD+0x12a>
 800eae6:	e06b      	b.n	800ebc0 <searchD+0x130>
 800eae8:	2b44      	cmp	r3, #68	; 0x44
 800eaea:	d053      	beq.n	800eb94 <searchD+0x104>
 800eaec:	2b88      	cmp	r3, #136	; 0x88
 800eaee:	d167      	bne.n	800ebc0 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800eaf0:	4b53      	ldr	r3, [pc, #332]	; (800ec40 <searchD+0x1b0>)
 800eaf2:	881b      	ldrh	r3, [r3, #0]
 800eaf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d046      	beq.n	800eb8c <searchD+0xfc>
 800eafe:	4b50      	ldr	r3, [pc, #320]	; (800ec40 <searchD+0x1b0>)
 800eb00:	881b      	ldrh	r3, [r3, #0]
 800eb02:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d03f      	beq.n	800eb8c <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800eb0c:	4b4d      	ldr	r3, [pc, #308]	; (800ec44 <searchD+0x1b4>)
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	3b01      	subs	r3, #1
 800eb12:	4a4e      	ldr	r2, [pc, #312]	; (800ec4c <searchD+0x1bc>)
 800eb14:	5cd2      	ldrb	r2, [r2, r3]
 800eb16:	4b4b      	ldr	r3, [pc, #300]	; (800ec44 <searchD+0x1b4>)
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4b4b      	ldr	r3, [pc, #300]	; (800ec4c <searchD+0x1bc>)
 800eb1e:	5c5b      	ldrb	r3, [r3, r1]
 800eb20:	4013      	ands	r3, r2
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b88      	cmp	r3, #136	; 0x88
 800eb26:	d115      	bne.n	800eb54 <searchD+0xc4>
 800eb28:	4b46      	ldr	r3, [pc, #280]	; (800ec44 <searchD+0x1b4>)
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	4b47      	ldr	r3, [pc, #284]	; (800ec4c <searchD+0x1bc>)
 800eb30:	5c9b      	ldrb	r3, [r3, r2]
 800eb32:	2bff      	cmp	r3, #255	; 0xff
 800eb34:	d00e      	beq.n	800eb54 <searchD+0xc4>
 800eb36:	4b44      	ldr	r3, [pc, #272]	; (800ec48 <searchD+0x1b8>)
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d107      	bne.n	800eb54 <searchD+0xc4>
						one_sectionA();
 800eb44:	f7f7 f8d4 	bl	8005cf0 <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800eb48:	4a3f      	ldr	r2, [pc, #252]	; (800ec48 <searchD+0x1b8>)
 800eb4a:	8813      	ldrh	r3, [r2, #0]
 800eb4c:	f043 0302 	orr.w	r3, r3, #2
 800eb50:	8013      	strh	r3, [r2, #0]
 800eb52:	e01a      	b.n	800eb8a <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800eb54:	4b3b      	ldr	r3, [pc, #236]	; (800ec44 <searchD+0x1b4>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	4b3c      	ldr	r3, [pc, #240]	; (800ec4c <searchD+0x1bc>)
 800eb5c:	5c9b      	ldrb	r3, [r3, r2]
 800eb5e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00e      	beq.n	800eb84 <searchD+0xf4>
 800eb66:	4b38      	ldr	r3, [pc, #224]	; (800ec48 <searchD+0x1b8>)
 800eb68:	881b      	ldrh	r3, [r3, #0]
 800eb6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d007      	beq.n	800eb84 <searchD+0xf4>
						one_sectionD();
 800eb74:	f7f7 f922 	bl	8005dbc <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800eb78:	4a33      	ldr	r2, [pc, #204]	; (800ec48 <searchD+0x1b8>)
 800eb7a:	8813      	ldrh	r3, [r2, #0]
 800eb7c:	f36f 0341 	bfc	r3, #1, #1
 800eb80:	8013      	strh	r3, [r2, #0]
 800eb82:	e002      	b.n	800eb8a <searchD+0xfa>
					}else{
						one_sectionU();
 800eb84:	f7f7 fa54 	bl	8006030 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800eb88:	e003      	b.n	800eb92 <searchD+0x102>
 800eb8a:	e002      	b.n	800eb92 <searchD+0x102>
					}
				}else{
					one_sectionU();
 800eb8c:	f7f7 fa50 	bl	8006030 <one_sectionU>
				}
				break;
 800eb90:	e016      	b.n	800ebc0 <searchD+0x130>
 800eb92:	e015      	b.n	800ebc0 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800eb94:	f7f7 fcf4 	bl	8006580 <slalom_R90>
				break;
 800eb98:	e012      	b.n	800ebc0 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800eb9a:	f7f6 ffbb 	bl	8005b14 <half_sectionD>
				rotate_180();
 800eb9e:	f7f7 fc17 	bl	80063d0 <rotate_180>
				if(wall_info & 0x88){
 800eba2:	4b2b      	ldr	r3, [pc, #172]	; (800ec50 <searchD+0x1c0>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d002      	beq.n	800ebb4 <searchD+0x124>
					set_position();
 800ebae:	f7f6 fe5f 	bl	8005870 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ebb2:	e005      	b.n	800ebc0 <searchD+0x130>
					half_sectionA();
 800ebb4:	f7f6 ff64 	bl	8005a80 <half_sectionA>
				break;
 800ebb8:	e002      	b.n	800ebc0 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800ebba:	f7f7 fdf9 	bl	80067b0 <slalom_L90>
				break;
 800ebbe:	bf00      	nop
		}
		adv_pos();
 800ebc0:	f000 fc56 	bl	800f470 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800ebc4:	4b23      	ldr	r3, [pc, #140]	; (800ec54 <searchD+0x1c4>)
 800ebc6:	785b      	ldrb	r3, [r3, #1]
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	4618      	mov	r0, r3
 800ebcc:	4b21      	ldr	r3, [pc, #132]	; (800ec54 <searchD+0x1c4>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	4a20      	ldr	r2, [pc, #128]	; (800ec58 <searchD+0x1c8>)
 800ebd6:	0103      	lsls	r3, r0, #4
 800ebd8:	440b      	add	r3, r1
 800ebda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f47f af72 	bne.w	800eac8 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	607b      	str	r3, [r7, #4]
 800ebe8:	e006      	b.n	800ebf8 <searchD+0x168>
		one_sectionU();
 800ebea:	f7f7 fa21 	bl	8006030 <one_sectionU>
		adv_pos();
 800ebee:	f000 fc3f 	bl	800f470 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	607b      	str	r3, [r7, #4]
 800ebf8:	4b18      	ldr	r3, [pc, #96]	; (800ec5c <searchD+0x1cc>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	dbf2      	blt.n	800ebea <searchD+0x15a>
	}
	half_sectionD();
 800ec04:	f7f6 ff86 	bl	8005b14 <half_sectionD>
	set_positionF();
 800ec08:	f7f6 fe48 	bl	800589c <set_positionF>

	HAL_Delay(500);
 800ec0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec10:	f7f2 fa04 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ec14:	f7f7 fbdc 	bl	80063d0 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800ec18:	4b11      	ldr	r3, [pc, #68]	; (800ec60 <searchD+0x1d0>)
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800ec1e:	4b0f      	ldr	r3, [pc, #60]	; (800ec5c <searchD+0x1cc>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800ec24:	4b06      	ldr	r3, [pc, #24]	; (800ec40 <searchD+0x1b0>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <searchD+0x1a6>
		store_map_in_eeprom();
 800ec32:	f002 fb6d 	bl	8011310 <store_map_in_eeprom>
	}
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20000f68 	.word	0x20000f68
 800ec44:	200015d0 	.word	0x200015d0
 800ec48:	20000f64 	.word	0x20000f64
 800ec4c:	20000c54 	.word	0x20000c54
 800ec50:	200002c8 	.word	0x200002c8
 800ec54:	20000c0c 	.word	0x20000c0c
 800ec58:	20000d60 	.word	0x20000d60
 800ec5c:	20000bb1 	.word	0x20000bb1
 800ec60:	200015c8 	.word	0x200015c8

0800ec64 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0

	int i = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	607b      	str	r3, [r7, #4]
	int j = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d111      	bne.n	800ec9c <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800ec78:	f7f6 ff02 	bl	8005a80 <half_sectionA>
			adv_pos();
 800ec7c:	f000 fbf8 	bl	800f470 <adv_pos>
			write_map();														//地図の初期化
 800ec80:	f000 fcba 	bl	800f5f8 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800ec84:	4b44      	ldr	r3, [pc, #272]	; (800ed98 <searchE+0x134>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
 800ec8a:	4b44      	ldr	r3, [pc, #272]	; (800ed9c <searchE+0x138>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800ec90:	f001 fbba 	bl	8010408 <find_pregoal>
			make_smap2();
 800ec94:	f001 fdac 	bl	80107f0 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800ec98:	f001 fa5e 	bl	8010158 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800ec9c:	4b3e      	ldr	r3, [pc, #248]	; (800ed98 <searchE+0x134>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	b2d1      	uxtb	r1, r2
 800eca4:	4a3c      	ldr	r2, [pc, #240]	; (800ed98 <searchE+0x134>)
 800eca6:	7011      	strb	r1, [r2, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	4b3d      	ldr	r3, [pc, #244]	; (800eda0 <searchE+0x13c>)
 800ecac:	5c9b      	ldrb	r3, [r3, r2]
 800ecae:	2b22      	cmp	r3, #34	; 0x22
 800ecb0:	d00e      	beq.n	800ecd0 <searchE+0x6c>
 800ecb2:	2b22      	cmp	r3, #34	; 0x22
 800ecb4:	dc02      	bgt.n	800ecbc <searchE+0x58>
 800ecb6:	2b11      	cmp	r3, #17
 800ecb8:	d01a      	beq.n	800ecf0 <searchE+0x8c>
 800ecba:	e01c      	b.n	800ecf6 <searchE+0x92>
 800ecbc:	2b44      	cmp	r3, #68	; 0x44
 800ecbe:	d004      	beq.n	800ecca <searchE+0x66>
 800ecc0:	2b88      	cmp	r3, #136	; 0x88
 800ecc2:	d118      	bne.n	800ecf6 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800ecc4:	f7f7 f9b4 	bl	8006030 <one_sectionU>
				break;
 800ecc8:	e015      	b.n	800ecf6 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800ecca:	f7f7 fc59 	bl	8006580 <slalom_R90>
				break;
 800ecce:	e012      	b.n	800ecf6 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800ecd0:	f7f6 ff20 	bl	8005b14 <half_sectionD>
				rotate_180();
 800ecd4:	f7f7 fb7c 	bl	80063d0 <rotate_180>
				if(wall_info & 0x88){
 800ecd8:	4b32      	ldr	r3, [pc, #200]	; (800eda4 <searchE+0x140>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <searchE+0x86>
					set_position();
 800ece4:	f7f6 fdc4 	bl	8005870 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ece8:	e005      	b.n	800ecf6 <searchE+0x92>
					half_sectionA();
 800ecea:	f7f6 fec9 	bl	8005a80 <half_sectionA>
				break;
 800ecee:	e002      	b.n	800ecf6 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800ecf0:	f7f7 fd5e 	bl	80067b0 <slalom_L90>
				break;
 800ecf4:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800ecf6:	f000 fbbb 	bl	800f470 <adv_pos>
			j++;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	2b96      	cmp	r3, #150	; 0x96
 800ed04:	dc0e      	bgt.n	800ed24 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800ed06:	4b28      	ldr	r3, [pc, #160]	; (800eda8 <searchE+0x144>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	b2da      	uxtb	r2, r3
 800ed0c:	4b27      	ldr	r3, [pc, #156]	; (800edac <searchE+0x148>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d1c3      	bne.n	800ec9c <searchE+0x38>
 800ed14:	4b24      	ldr	r3, [pc, #144]	; (800eda8 <searchE+0x144>)
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	4b25      	ldr	r3, [pc, #148]	; (800edb0 <searchE+0x14c>)
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d1bc      	bne.n	800ec9c <searchE+0x38>
 800ed22:	e000      	b.n	800ed26 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800ed24:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800ed26:	f002 fba5 	bl	8011474 <get_wall_info>
		write_map();														//a地図の初期化
 800ed2a:	f000 fc65 	bl	800f5f8 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800ed2e:	4b1a      	ldr	r3, [pc, #104]	; (800ed98 <searchE+0x134>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	701a      	strb	r2, [r3, #0]
 800ed34:	4b19      	ldr	r3, [pc, #100]	; (800ed9c <searchE+0x138>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800ed3a:	f001 fb65 	bl	8010408 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800ed3e:	4b1d      	ldr	r3, [pc, #116]	; (800edb4 <searchE+0x150>)
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800ed4c:	f7f6 fee2 	bl	8005b14 <half_sectionD>
			break;
 800ed50:	e00e      	b.n	800ed70 <searchE+0x10c>
		}
		make_smap2();
 800ed52:	f001 fd4d 	bl	80107f0 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800ed56:	f001 f9ff 	bl	8010158 <make_route>

		if (j > 150) {
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	2b96      	cmp	r3, #150	; 0x96
 800ed5e:	dc06      	bgt.n	800ed6e <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	3301      	adds	r3, #1
 800ed64:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b95      	cmp	r3, #149	; 0x95
 800ed6a:	dd82      	ble.n	800ec72 <searchE+0xe>
 800ed6c:	e000      	b.n	800ed70 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800ed6e:	bf00      	nop

	HAL_Delay(500);
 800ed70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ed74:	f7f2 f952 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ed78:	f7f7 fb2a 	bl	80063d0 <rotate_180>

	if(!MF.FLAG.SCND){
 800ed7c:	4b0e      	ldr	r3, [pc, #56]	; (800edb8 <searchE+0x154>)
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d101      	bne.n	800ed8e <searchE+0x12a>
		store_map_in_eeprom();
 800ed8a:	f002 fac1 	bl	8011310 <store_map_in_eeprom>
	}
}
 800ed8e:	bf00      	nop
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	200015d0 	.word	0x200015d0
 800ed9c:	2000034e 	.word	0x2000034e
 800eda0:	20000c54 	.word	0x20000c54
 800eda4:	200002c8 	.word	0x200002c8
 800eda8:	20000c0c 	.word	0x20000c0c
 800edac:	20000d5c 	.word	0x20000d5c
 800edb0:	200012a1 	.word	0x200012a1
 800edb4:	20000f64 	.word	0x20000f64
 800edb8:	20000f68 	.word	0x20000f68

0800edbc <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800edc2:	4b60      	ldr	r3, [pc, #384]	; (800ef44 <searchF3+0x188>)
 800edc4:	881b      	ldrh	r3, [r3, #0]
 800edc6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <searchF3+0x18>
		load_map_from_eeprom();
 800edd0:	f002 fad8 	bl	8011384 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800edd4:	f000 fb4c 	bl	800f470 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800edd8:	f000 fe02 	bl	800f9e0 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800eddc:	f001 f9bc 	bl	8010158 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800ede0:	4b59      	ldr	r3, [pc, #356]	; (800ef48 <searchF3+0x18c>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800ede6:	f001 fe27 	bl	8010a38 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800edea:	f7f6 fd75 	bl	80058d8 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800edee:	4a57      	ldr	r2, [pc, #348]	; (800ef4c <searchF3+0x190>)
 800edf0:	8813      	ldrh	r3, [r2, #0]
 800edf2:	f36f 0341 	bfc	r3, #1, #1
 800edf6:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800edf8:	4b53      	ldr	r3, [pc, #332]	; (800ef48 <searchF3+0x18c>)
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	1c5a      	adds	r2, r3, #1
 800edfe:	b2d1      	uxtb	r1, r2
 800ee00:	4a51      	ldr	r2, [pc, #324]	; (800ef48 <searchF3+0x18c>)
 800ee02:	7011      	strb	r1, [r2, #0]
 800ee04:	461a      	mov	r2, r3
 800ee06:	4b52      	ldr	r3, [pc, #328]	; (800ef50 <searchF3+0x194>)
 800ee08:	569b      	ldrsb	r3, [r3, r2]
 800ee0a:	f113 0f04 	cmn.w	r3, #4
 800ee0e:	d01e      	beq.n	800ee4e <searchF3+0x92>
 800ee10:	f113 0f04 	cmn.w	r3, #4
 800ee14:	dc09      	bgt.n	800ee2a <searchF3+0x6e>
 800ee16:	f113 0f06 	cmn.w	r3, #6
 800ee1a:	d01e      	beq.n	800ee5a <searchF3+0x9e>
 800ee1c:	f113 0f06 	cmn.w	r3, #6
 800ee20:	dc18      	bgt.n	800ee54 <searchF3+0x98>
 800ee22:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800ee26:	d01b      	beq.n	800ee60 <searchF3+0xa4>
 800ee28:	e01f      	b.n	800ee6a <searchF3+0xae>
 800ee2a:	f113 0f02 	cmn.w	r3, #2
 800ee2e:	d008      	beq.n	800ee42 <searchF3+0x86>
 800ee30:	f113 0f02 	cmn.w	r3, #2
 800ee34:	db08      	blt.n	800ee48 <searchF3+0x8c>
 800ee36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3a:	d116      	bne.n	800ee6a <searchF3+0xae>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800ee3c:	f7f7 fba0 	bl	8006580 <slalom_R90>
				break;
 800ee40:	e04c      	b.n	800eedc <searchF3+0x120>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800ee42:	f7f7 fcb5 	bl	80067b0 <slalom_L90>
				break;
 800ee46:	e049      	b.n	800eedc <searchF3+0x120>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800ee48:	f7f7 fdbc 	bl	80069c4 <Lslalom_R90>
				break;
 800ee4c:	e046      	b.n	800eedc <searchF3+0x120>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800ee4e:	f7f7 febf 	bl	8006bd0 <Lslalom_L90>
				break;
 800ee52:	e043      	b.n	800eedc <searchF3+0x120>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800ee54:	f7f7 ffb8 	bl	8006dc8 <Lslalom_R180>
				break;
 800ee58:	e040      	b.n	800eedc <searchF3+0x120>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800ee5a:	f7f8 f8d1 	bl	8007000 <Lslalom_L180>
				break;
 800ee5e:	e03d      	b.n	800eedc <searchF3+0x120>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800ee60:	f7f7 fab6 	bl	80063d0 <rotate_180>
				rotate_180();
 800ee64:	f7f7 fab4 	bl	80063d0 <rotate_180>
				while(1);
 800ee68:	e7fe      	b.n	800ee68 <searchF3+0xac>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800ee6a:	4b37      	ldr	r3, [pc, #220]	; (800ef48 <searchF3+0x18c>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	3b01      	subs	r3, #1
 800ee70:	4a37      	ldr	r2, [pc, #220]	; (800ef50 <searchF3+0x194>)
 800ee72:	56d3      	ldrsb	r3, [r2, r3]
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	dc11      	bgt.n	800ee9c <searchF3+0xe0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800ee78:	2300      	movs	r3, #0
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	e004      	b.n	800ee88 <searchF3+0xcc>
						half_sectionU();
 800ee7e:	f7f6 ff17 	bl	8005cb0 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	3301      	adds	r3, #1
 800ee86:	60fb      	str	r3, [r7, #12]
 800ee88:	4b2f      	ldr	r3, [pc, #188]	; (800ef48 <searchF3+0x18c>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	3b01      	subs	r3, #1
 800ee8e:	4a30      	ldr	r2, [pc, #192]	; (800ef50 <searchF3+0x194>)
 800ee90:	56d3      	ldrsb	r3, [r2, r3]
 800ee92:	461a      	mov	r2, r3
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	4293      	cmp	r3, r2
 800ee98:	dbf1      	blt.n	800ee7e <searchF3+0xc2>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800ee9a:	e01e      	b.n	800eeda <searchF3+0x11e>
					one_sectionA();
 800ee9c:	f7f6 ff28 	bl	8005cf0 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800eea0:	4a2a      	ldr	r2, [pc, #168]	; (800ef4c <searchF3+0x190>)
 800eea2:	8813      	ldrh	r3, [r2, #0]
 800eea4:	f043 0302 	orr.w	r3, r3, #2
 800eea8:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60bb      	str	r3, [r7, #8]
 800eeae:	e004      	b.n	800eeba <searchF3+0xfe>
						half_sectionU();
 800eeb0:	f7f6 fefe 	bl	8005cb0 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	60bb      	str	r3, [r7, #8]
 800eeba:	4b23      	ldr	r3, [pc, #140]	; (800ef48 <searchF3+0x18c>)
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	4a23      	ldr	r2, [pc, #140]	; (800ef50 <searchF3+0x194>)
 800eec2:	56d3      	ldrsb	r3, [r2, r3]
 800eec4:	3b04      	subs	r3, #4
 800eec6:	68ba      	ldr	r2, [r7, #8]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	dbf1      	blt.n	800eeb0 <searchF3+0xf4>
					one_sectionD();
 800eecc:	f7f6 ff76 	bl	8005dbc <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800eed0:	4a1e      	ldr	r2, [pc, #120]	; (800ef4c <searchF3+0x190>)
 800eed2:	8813      	ldrh	r3, [r2, #0]
 800eed4:	f36f 0341 	bfc	r3, #1, #1
 800eed8:	8013      	strh	r3, [r2, #0]
				break;
 800eeda:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800eedc:	4b1a      	ldr	r3, [pc, #104]	; (800ef48 <searchF3+0x18c>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	461a      	mov	r2, r3
 800eee2:	4b1b      	ldr	r3, [pc, #108]	; (800ef50 <searchF3+0x194>)
 800eee4:	569b      	ldrsb	r3, [r3, r2]
 800eee6:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800eeea:	d185      	bne.n	800edf8 <searchF3+0x3c>

	mouse.x = goal_x;
 800eeec:	4b19      	ldr	r3, [pc, #100]	; (800ef54 <searchF3+0x198>)
 800eeee:	781a      	ldrb	r2, [r3, #0]
 800eef0:	4b19      	ldr	r3, [pc, #100]	; (800ef58 <searchF3+0x19c>)
 800eef2:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800eef4:	4b19      	ldr	r3, [pc, #100]	; (800ef5c <searchF3+0x1a0>)
 800eef6:	781a      	ldrb	r2, [r3, #0]
 800eef8:	4b17      	ldr	r3, [pc, #92]	; (800ef58 <searchF3+0x19c>)
 800eefa:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800eefc:	2300      	movs	r3, #0
 800eefe:	607b      	str	r3, [r7, #4]
 800ef00:	e006      	b.n	800ef10 <searchF3+0x154>
		one_sectionU();
 800ef02:	f7f7 f895 	bl	8006030 <one_sectionU>
		adv_pos();
 800ef06:	f000 fab3 	bl	800f470 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	607b      	str	r3, [r7, #4]
 800ef10:	4b13      	ldr	r3, [pc, #76]	; (800ef60 <searchF3+0x1a4>)
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	3b01      	subs	r3, #1
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	dbf2      	blt.n	800ef02 <searchF3+0x146>
	}
	half_sectionD();
 800ef1c:	f7f6 fdfa 	bl	8005b14 <half_sectionD>
	set_positionF();
 800ef20:	f7f6 fcbc 	bl	800589c <set_positionF>

	HAL_Delay(500);
 800ef24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef28:	f7f2 f878 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ef2c:	f7f7 fa50 	bl	80063d0 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800ef30:	4b0c      	ldr	r3, [pc, #48]	; (800ef64 <searchF3+0x1a8>)
 800ef32:	2201      	movs	r2, #1
 800ef34:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800ef36:	4b0a      	ldr	r3, [pc, #40]	; (800ef60 <searchF3+0x1a4>)
 800ef38:	2201      	movs	r2, #1
 800ef3a:	701a      	strb	r2, [r3, #0]

}
 800ef3c:	bf00      	nop
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	20000f68 	.word	0x20000f68
 800ef48:	200002b0 	.word	0x200002b0
 800ef4c:	20000f64 	.word	0x20000f64
 800ef50:	20000350 	.word	0x20000350
 800ef54:	20000bb0 	.word	0x20000bb0
 800ef58:	20000c0c 	.word	0x20000c0c
 800ef5c:	20000b4c 	.word	0x20000b4c
 800ef60:	20000bb1 	.word	0x20000bb1
 800ef64:	200015c8 	.word	0x200015c8

0800ef68 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800ef6e:	4bd0      	ldr	r3, [pc, #832]	; (800f2b0 <searchF4+0x348>)
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <searchF4+0x18>
		load_map_from_eeprom();
 800ef7c:	f002 fa02 	bl	8011384 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800ef80:	f000 fa76 	bl	800f470 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800ef84:	2001      	movs	r0, #1
 800ef86:	f002 fae9 	bl	801155c <full_led_write>
	make_smap();											//a歩数マップ作成
 800ef8a:	f000 fd29 	bl	800f9e0 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800ef8e:	f001 f8e3 	bl	8010158 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800ef92:	4bc8      	ldr	r3, [pc, #800]	; (800f2b4 <searchF4+0x34c>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800ef98:	f001 fe62 	bl	8010c60 <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800ef9c:	4bc6      	ldr	r3, [pc, #792]	; (800f2b8 <searchF4+0x350>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d004      	beq.n	800efb0 <searchF4+0x48>
 800efa6:	4bc4      	ldr	r3, [pc, #784]	; (800f2b8 <searchF4+0x350>)
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	2b01      	cmp	r3, #1
 800efae:	d109      	bne.n	800efc4 <searchF4+0x5c>
		pass[p_cnt]--;
 800efb0:	4bc0      	ldr	r3, [pc, #768]	; (800f2b4 <searchF4+0x34c>)
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	4ac1      	ldr	r2, [pc, #772]	; (800f2bc <searchF4+0x354>)
 800efb6:	56d2      	ldrsb	r2, [r2, r3]
 800efb8:	b2d2      	uxtb	r2, r2
 800efba:	3a01      	subs	r2, #1
 800efbc:	b2d2      	uxtb	r2, r2
 800efbe:	b251      	sxtb	r1, r2
 800efc0:	4abe      	ldr	r2, [pc, #760]	; (800f2bc <searchF4+0x354>)
 800efc2:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800efc4:	f7f6 fc88 	bl	80058d8 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800efc8:	4abd      	ldr	r2, [pc, #756]	; (800f2c0 <searchF4+0x358>)
 800efca:	8813      	ldrh	r3, [r2, #0]
 800efcc:	f36f 0341 	bfc	r3, #1, #1
 800efd0:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800efd2:	4ab7      	ldr	r2, [pc, #732]	; (800f2b0 <searchF4+0x348>)
 800efd4:	8813      	ldrh	r3, [r2, #0]
 800efd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800efda:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800efdc:	4bb5      	ldr	r3, [pc, #724]	; (800f2b4 <searchF4+0x34c>)
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	b2d1      	uxtb	r1, r2
 800efe4:	4ab3      	ldr	r2, [pc, #716]	; (800f2b4 <searchF4+0x34c>)
 800efe6:	7011      	strb	r1, [r2, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	4bb4      	ldr	r3, [pc, #720]	; (800f2bc <searchF4+0x354>)
 800efec:	569b      	ldrsb	r3, [r3, r2]
 800efee:	3372      	adds	r3, #114	; 0x72
 800eff0:	2b71      	cmp	r3, #113	; 0x71
 800eff2:	f200 811c 	bhi.w	800f22e <searchF4+0x2c6>
 800eff6:	a201      	add	r2, pc, #4	; (adr r2, 800effc <searchF4+0x94>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f225 	.word	0x0800f225
 800f000:	0800f22f 	.word	0x0800f22f
 800f004:	0800f22f 	.word	0x0800f22f
 800f008:	0800f22f 	.word	0x0800f22f
 800f00c:	0800f22f 	.word	0x0800f22f
 800f010:	0800f22f 	.word	0x0800f22f
 800f014:	0800f22f 	.word	0x0800f22f
 800f018:	0800f22f 	.word	0x0800f22f
 800f01c:	0800f22f 	.word	0x0800f22f
 800f020:	0800f22f 	.word	0x0800f22f
 800f024:	0800f22f 	.word	0x0800f22f
 800f028:	0800f22f 	.word	0x0800f22f
 800f02c:	0800f22f 	.word	0x0800f22f
 800f030:	0800f22f 	.word	0x0800f22f
 800f034:	0800f22f 	.word	0x0800f22f
 800f038:	0800f22f 	.word	0x0800f22f
 800f03c:	0800f22f 	.word	0x0800f22f
 800f040:	0800f22f 	.word	0x0800f22f
 800f044:	0800f22f 	.word	0x0800f22f
 800f048:	0800f22f 	.word	0x0800f22f
 800f04c:	0800f22f 	.word	0x0800f22f
 800f050:	0800f22f 	.word	0x0800f22f
 800f054:	0800f22f 	.word	0x0800f22f
 800f058:	0800f22f 	.word	0x0800f22f
 800f05c:	0800f22f 	.word	0x0800f22f
 800f060:	0800f22f 	.word	0x0800f22f
 800f064:	0800f22f 	.word	0x0800f22f
 800f068:	0800f22f 	.word	0x0800f22f
 800f06c:	0800f22f 	.word	0x0800f22f
 800f070:	0800f22f 	.word	0x0800f22f
 800f074:	0800f22f 	.word	0x0800f22f
 800f078:	0800f22f 	.word	0x0800f22f
 800f07c:	0800f22f 	.word	0x0800f22f
 800f080:	0800f22f 	.word	0x0800f22f
 800f084:	0800f22f 	.word	0x0800f22f
 800f088:	0800f22f 	.word	0x0800f22f
 800f08c:	0800f22f 	.word	0x0800f22f
 800f090:	0800f22f 	.word	0x0800f22f
 800f094:	0800f22f 	.word	0x0800f22f
 800f098:	0800f22f 	.word	0x0800f22f
 800f09c:	0800f22f 	.word	0x0800f22f
 800f0a0:	0800f22f 	.word	0x0800f22f
 800f0a4:	0800f22f 	.word	0x0800f22f
 800f0a8:	0800f22f 	.word	0x0800f22f
 800f0ac:	0800f22f 	.word	0x0800f22f
 800f0b0:	0800f22f 	.word	0x0800f22f
 800f0b4:	0800f22f 	.word	0x0800f22f
 800f0b8:	0800f22f 	.word	0x0800f22f
 800f0bc:	0800f22f 	.word	0x0800f22f
 800f0c0:	0800f22f 	.word	0x0800f22f
 800f0c4:	0800f22f 	.word	0x0800f22f
 800f0c8:	0800f22f 	.word	0x0800f22f
 800f0cc:	0800f22f 	.word	0x0800f22f
 800f0d0:	0800f22f 	.word	0x0800f22f
 800f0d4:	0800f22f 	.word	0x0800f22f
 800f0d8:	0800f22f 	.word	0x0800f22f
 800f0dc:	0800f22f 	.word	0x0800f22f
 800f0e0:	0800f22f 	.word	0x0800f22f
 800f0e4:	0800f22f 	.word	0x0800f22f
 800f0e8:	0800f22f 	.word	0x0800f22f
 800f0ec:	0800f22f 	.word	0x0800f22f
 800f0f0:	0800f22f 	.word	0x0800f22f
 800f0f4:	0800f22f 	.word	0x0800f22f
 800f0f8:	0800f22f 	.word	0x0800f22f
 800f0fc:	0800f22f 	.word	0x0800f22f
 800f100:	0800f22f 	.word	0x0800f22f
 800f104:	0800f22f 	.word	0x0800f22f
 800f108:	0800f22f 	.word	0x0800f22f
 800f10c:	0800f22f 	.word	0x0800f22f
 800f110:	0800f22f 	.word	0x0800f22f
 800f114:	0800f22f 	.word	0x0800f22f
 800f118:	0800f22f 	.word	0x0800f22f
 800f11c:	0800f22f 	.word	0x0800f22f
 800f120:	0800f22f 	.word	0x0800f22f
 800f124:	0800f22f 	.word	0x0800f22f
 800f128:	0800f22f 	.word	0x0800f22f
 800f12c:	0800f22f 	.word	0x0800f22f
 800f130:	0800f22f 	.word	0x0800f22f
 800f134:	0800f22f 	.word	0x0800f22f
 800f138:	0800f22f 	.word	0x0800f22f
 800f13c:	0800f22f 	.word	0x0800f22f
 800f140:	0800f22f 	.word	0x0800f22f
 800f144:	0800f22f 	.word	0x0800f22f
 800f148:	0800f22f 	.word	0x0800f22f
 800f14c:	0800f22f 	.word	0x0800f22f
 800f150:	0800f22f 	.word	0x0800f22f
 800f154:	0800f22f 	.word	0x0800f22f
 800f158:	0800f22f 	.word	0x0800f22f
 800f15c:	0800f22f 	.word	0x0800f22f
 800f160:	0800f22f 	.word	0x0800f22f
 800f164:	0800f22f 	.word	0x0800f22f
 800f168:	0800f22f 	.word	0x0800f22f
 800f16c:	0800f22f 	.word	0x0800f22f
 800f170:	0800f22f 	.word	0x0800f22f
 800f174:	0800f22f 	.word	0x0800f22f
 800f178:	0800f22f 	.word	0x0800f22f
 800f17c:	0800f22f 	.word	0x0800f22f
 800f180:	0800f22f 	.word	0x0800f22f
 800f184:	0800f21f 	.word	0x0800f21f
 800f188:	0800f219 	.word	0x0800f219
 800f18c:	0800f213 	.word	0x0800f213
 800f190:	0800f20d 	.word	0x0800f20d
 800f194:	0800f207 	.word	0x0800f207
 800f198:	0800f201 	.word	0x0800f201
 800f19c:	0800f1fb 	.word	0x0800f1fb
 800f1a0:	0800f1f5 	.word	0x0800f1f5
 800f1a4:	0800f1ef 	.word	0x0800f1ef
 800f1a8:	0800f1e9 	.word	0x0800f1e9
 800f1ac:	0800f1e3 	.word	0x0800f1e3
 800f1b0:	0800f1dd 	.word	0x0800f1dd
 800f1b4:	0800f1d7 	.word	0x0800f1d7
 800f1b8:	0800f1d1 	.word	0x0800f1d1
 800f1bc:	0800f1cb 	.word	0x0800f1cb
 800f1c0:	0800f1c5 	.word	0x0800f1c5
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f1c4:	f7f7 f9dc 	bl	8006580 <slalom_R90>
				break;
 800f1c8:	e0cd      	b.n	800f366 <searchF4+0x3fe>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f1ca:	f7f7 faf1 	bl	80067b0 <slalom_L90>
				break;
 800f1ce:	e0ca      	b.n	800f366 <searchF4+0x3fe>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f1d0:	f7f7 fbf8 	bl	80069c4 <Lslalom_R90>
				break;
 800f1d4:	e0c7      	b.n	800f366 <searchF4+0x3fe>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f1d6:	f7f7 fcfb 	bl	8006bd0 <Lslalom_L90>
				break;
 800f1da:	e0c4      	b.n	800f366 <searchF4+0x3fe>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f1dc:	f7f7 fdf4 	bl	8006dc8 <Lslalom_R180>
				break;
 800f1e0:	e0c1      	b.n	800f366 <searchF4+0x3fe>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f1e2:	f7f7 ff0d 	bl	8007000 <Lslalom_L180>
				break;
 800f1e6:	e0be      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め右V45----
			case -7:
				v_R45();
 800f1e8:	f7f8 f81a 	bl	8007220 <v_R45>
				break;
 800f1ec:	e0bb      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め左V45----
			case -8:
				v_L45();
 800f1ee:	f7f8 f9fd 	bl	80075ec <v_L45>
				break;
 800f1f2:	e0b8      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め右V90----
			case -9:
				v_R90();
 800f1f4:	f7f8 fe7e 	bl	8007ef4 <v_R90>
				break;
 800f1f8:	e0b5      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め左V90----
			case -10:
				v_L90();
 800f1fa:	f7f8 ff4b 	bl	8008094 <v_L90>
				break;
 800f1fe:	e0b2      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め右V135----
			case -11:
				v_R135();
 800f200:	f7f9 f810 	bl	8008224 <v_R135>
				break;
 800f204:	e0af      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め左V135----
			case -12:
				v_L135();
 800f206:	f7f9 f9f7 	bl	80085f8 <v_L135>
				break;
 800f20a:	e0ac      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800f20c:	f7f8 fbca 	bl	80079a4 <v_R45D>
				break;
 800f210:	e0a9      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800f212:	f7f8 fd21 	bl	8007c58 <v_L45D>
				break;
 800f216:	e0a6      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800f218:	f7f9 fbca 	bl	80089b0 <v_R135D>
				break;
 800f21c:	e0a3      	b.n	800f366 <searchF4+0x3fe>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800f21e:	f7f9 fd23 	bl	8008c68 <v_L135D>
				break;
 800f222:	e0a0      	b.n	800f366 <searchF4+0x3fe>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f224:	f7f7 f8d4 	bl	80063d0 <rotate_180>
				rotate_180();
 800f228:	f7f7 f8d2 	bl	80063d0 <rotate_180>
				while(1);
 800f22c:	e7fe      	b.n	800f22c <searchF4+0x2c4>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f22e:	4b21      	ldr	r3, [pc, #132]	; (800f2b4 <searchF4+0x34c>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	3b01      	subs	r3, #1
 800f234:	4a21      	ldr	r2, [pc, #132]	; (800f2bc <searchF4+0x354>)
 800f236:	56d3      	ldrsb	r3, [r2, r3]
 800f238:	2b03      	cmp	r3, #3
 800f23a:	dc11      	bgt.n	800f260 <searchF4+0x2f8>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f23c:	2300      	movs	r3, #0
 800f23e:	60fb      	str	r3, [r7, #12]
 800f240:	e004      	b.n	800f24c <searchF4+0x2e4>
						half_sectionU();
 800f242:	f7f6 fd35 	bl	8005cb0 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3301      	adds	r3, #1
 800f24a:	60fb      	str	r3, [r7, #12]
 800f24c:	4b19      	ldr	r3, [pc, #100]	; (800f2b4 <searchF4+0x34c>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	3b01      	subs	r3, #1
 800f252:	4a1a      	ldr	r2, [pc, #104]	; (800f2bc <searchF4+0x354>)
 800f254:	56d3      	ldrsb	r3, [r2, r3]
 800f256:	461a      	mov	r2, r3
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	4293      	cmp	r3, r2
 800f25c:	dbf1      	blt.n	800f242 <searchF4+0x2da>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800f25e:	e081      	b.n	800f364 <searchF4+0x3fc>
				}else if(pass[p_cnt-1] < 64){
 800f260:	4b14      	ldr	r3, [pc, #80]	; (800f2b4 <searchF4+0x34c>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	3b01      	subs	r3, #1
 800f266:	4a15      	ldr	r2, [pc, #84]	; (800f2bc <searchF4+0x354>)
 800f268:	56d3      	ldrsb	r3, [r2, r3]
 800f26a:	2b3f      	cmp	r3, #63	; 0x3f
 800f26c:	dc2a      	bgt.n	800f2c4 <searchF4+0x35c>
					one_sectionA();
 800f26e:	f7f6 fd3f 	bl	8005cf0 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f272:	4a13      	ldr	r2, [pc, #76]	; (800f2c0 <searchF4+0x358>)
 800f274:	8813      	ldrh	r3, [r2, #0]
 800f276:	f043 0302 	orr.w	r3, r3, #2
 800f27a:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f27c:	2300      	movs	r3, #0
 800f27e:	60bb      	str	r3, [r7, #8]
 800f280:	e004      	b.n	800f28c <searchF4+0x324>
						half_sectionU();
 800f282:	f7f6 fd15 	bl	8005cb0 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	3301      	adds	r3, #1
 800f28a:	60bb      	str	r3, [r7, #8]
 800f28c:	4b09      	ldr	r3, [pc, #36]	; (800f2b4 <searchF4+0x34c>)
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	3b01      	subs	r3, #1
 800f292:	4a0a      	ldr	r2, [pc, #40]	; (800f2bc <searchF4+0x354>)
 800f294:	56d3      	ldrsb	r3, [r2, r3]
 800f296:	3b04      	subs	r3, #4
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	dbf1      	blt.n	800f282 <searchF4+0x31a>
					one_sectionD();
 800f29e:	f7f6 fd8d 	bl	8005dbc <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f2a2:	4a07      	ldr	r2, [pc, #28]	; (800f2c0 <searchF4+0x358>)
 800f2a4:	8813      	ldrh	r3, [r2, #0]
 800f2a6:	f36f 0341 	bfc	r3, #1, #1
 800f2aa:	8013      	strh	r3, [r2, #0]
				break;
 800f2ac:	e05a      	b.n	800f364 <searchF4+0x3fc>
 800f2ae:	bf00      	nop
 800f2b0:	20000f68 	.word	0x20000f68
 800f2b4:	200002b0 	.word	0x200002b0
 800f2b8:	200015c8 	.word	0x200015c8
 800f2bc:	20000350 	.word	0x20000350
 800f2c0:	20000f64 	.word	0x20000f64
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800f2c4:	4b61      	ldr	r3, [pc, #388]	; (800f44c <searchF4+0x4e4>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4b61      	ldr	r3, [pc, #388]	; (800f450 <searchF4+0x4e8>)
 800f2cc:	569b      	ldrsb	r3, [r3, r2]
 800f2ce:	2b40      	cmp	r3, #64	; 0x40
 800f2d0:	d122      	bne.n	800f318 <searchF4+0x3b0>
 800f2d2:	4b5e      	ldr	r3, [pc, #376]	; (800f44c <searchF4+0x4e4>)
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	4a5d      	ldr	r2, [pc, #372]	; (800f450 <searchF4+0x4e8>)
 800f2da:	56d3      	ldrsb	r3, [r2, r3]
 800f2dc:	2b40      	cmp	r3, #64	; 0x40
 800f2de:	d11b      	bne.n	800f318 <searchF4+0x3b0>
 800f2e0:	4b5a      	ldr	r3, [pc, #360]	; (800f44c <searchF4+0x4e4>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	3302      	adds	r3, #2
 800f2e6:	4a5a      	ldr	r2, [pc, #360]	; (800f450 <searchF4+0x4e8>)
 800f2e8:	56d3      	ldrsb	r3, [r2, r3]
 800f2ea:	2b40      	cmp	r3, #64	; 0x40
 800f2ec:	d114      	bne.n	800f318 <searchF4+0x3b0>
 800f2ee:	4b59      	ldr	r3, [pc, #356]	; (800f454 <searchF4+0x4ec>)
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10d      	bne.n	800f318 <searchF4+0x3b0>
						one_sectionVA();
 800f2fc:	f7f6 fdd0 	bl	8005ea0 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800f300:	4a54      	ldr	r2, [pc, #336]	; (800f454 <searchF4+0x4ec>)
 800f302:	8813      	ldrh	r3, [r2, #0]
 800f304:	f043 0302 	orr.w	r3, r3, #2
 800f308:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f30a:	4b50      	ldr	r3, [pc, #320]	; (800f44c <searchF4+0x4e4>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	3301      	adds	r3, #1
 800f310:	b2da      	uxtb	r2, r3
 800f312:	4b4e      	ldr	r3, [pc, #312]	; (800f44c <searchF4+0x4e4>)
 800f314:	701a      	strb	r2, [r3, #0]
 800f316:	e025      	b.n	800f364 <searchF4+0x3fc>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800f318:	4b4c      	ldr	r3, [pc, #304]	; (800f44c <searchF4+0x4e4>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	461a      	mov	r2, r3
 800f31e:	4b4c      	ldr	r3, [pc, #304]	; (800f450 <searchF4+0x4e8>)
 800f320:	569b      	ldrsb	r3, [r3, r2]
 800f322:	2b40      	cmp	r3, #64	; 0x40
 800f324:	d11b      	bne.n	800f35e <searchF4+0x3f6>
 800f326:	4b49      	ldr	r3, [pc, #292]	; (800f44c <searchF4+0x4e4>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	3301      	adds	r3, #1
 800f32c:	4a48      	ldr	r2, [pc, #288]	; (800f450 <searchF4+0x4e8>)
 800f32e:	56d3      	ldrsb	r3, [r2, r3]
 800f330:	2b40      	cmp	r3, #64	; 0x40
 800f332:	d014      	beq.n	800f35e <searchF4+0x3f6>
 800f334:	4b47      	ldr	r3, [pc, #284]	; (800f454 <searchF4+0x4ec>)
 800f336:	881b      	ldrh	r3, [r3, #0]
 800f338:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d10d      	bne.n	800f35e <searchF4+0x3f6>
						one_sectionVD();
 800f342:	f7f6 fe0b 	bl	8005f5c <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800f346:	4a43      	ldr	r2, [pc, #268]	; (800f454 <searchF4+0x4ec>)
 800f348:	8813      	ldrh	r3, [r2, #0]
 800f34a:	f36f 0341 	bfc	r3, #1, #1
 800f34e:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f350:	4b3e      	ldr	r3, [pc, #248]	; (800f44c <searchF4+0x4e4>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	3301      	adds	r3, #1
 800f356:	b2da      	uxtb	r2, r3
 800f358:	4b3c      	ldr	r3, [pc, #240]	; (800f44c <searchF4+0x4e4>)
 800f35a:	701a      	strb	r2, [r3, #0]
 800f35c:	e002      	b.n	800f364 <searchF4+0x3fc>
						half_sectionV();
 800f35e:	f7f6 fcb3 	bl	8005cc8 <half_sectionV>
				break;
 800f362:	e7ff      	b.n	800f364 <searchF4+0x3fc>
 800f364:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800f366:	4b39      	ldr	r3, [pc, #228]	; (800f44c <searchF4+0x4e4>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	461a      	mov	r2, r3
 800f36c:	4b38      	ldr	r3, [pc, #224]	; (800f450 <searchF4+0x4e8>)
 800f36e:	569b      	ldrsb	r3, [r3, r2]
 800f370:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f374:	f47f ae32 	bne.w	800efdc <searchF4+0x74>

	mouse.x = goal_x;
 800f378:	4b37      	ldr	r3, [pc, #220]	; (800f458 <searchF4+0x4f0>)
 800f37a:	781a      	ldrb	r2, [r3, #0]
 800f37c:	4b37      	ldr	r3, [pc, #220]	; (800f45c <searchF4+0x4f4>)
 800f37e:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800f380:	4b37      	ldr	r3, [pc, #220]	; (800f460 <searchF4+0x4f8>)
 800f382:	781a      	ldrb	r2, [r3, #0]
 800f384:	4b35      	ldr	r3, [pc, #212]	; (800f45c <searchF4+0x4f4>)
 800f386:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800f388:	4b34      	ldr	r3, [pc, #208]	; (800f45c <searchF4+0x4f4>)
 800f38a:	789b      	ldrb	r3, [r3, #2]
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	085b      	lsrs	r3, r3, #1
 800f390:	b2da      	uxtb	r2, r3
 800f392:	4b32      	ldr	r3, [pc, #200]	; (800f45c <searchF4+0x4f4>)
 800f394:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800f396:	4a33      	ldr	r2, [pc, #204]	; (800f464 <searchF4+0x4fc>)
 800f398:	8813      	ldrh	r3, [r2, #0]
 800f39a:	f36f 330c 	bfc	r3, #12, #1
 800f39e:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800f3a0:	4b2a      	ldr	r3, [pc, #168]	; (800f44c <searchF4+0x4e4>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	4a2a      	ldr	r2, [pc, #168]	; (800f450 <searchF4+0x4e8>)
 800f3a8:	56d3      	ldrsb	r3, [r2, r3]
 800f3aa:	f113 0f0d 	cmn.w	r3, #13
 800f3ae:	d02c      	beq.n	800f40a <searchF4+0x4a2>
 800f3b0:	4b26      	ldr	r3, [pc, #152]	; (800f44c <searchF4+0x4e4>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	4a26      	ldr	r2, [pc, #152]	; (800f450 <searchF4+0x4e8>)
 800f3b8:	56d3      	ldrsb	r3, [r2, r3]
 800f3ba:	f113 0f0e 	cmn.w	r3, #14
 800f3be:	d024      	beq.n	800f40a <searchF4+0x4a2>
 800f3c0:	4b22      	ldr	r3, [pc, #136]	; (800f44c <searchF4+0x4e4>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	4a22      	ldr	r2, [pc, #136]	; (800f450 <searchF4+0x4e8>)
 800f3c8:	56d3      	ldrsb	r3, [r2, r3]
 800f3ca:	f113 0f0f 	cmn.w	r3, #15
 800f3ce:	d01c      	beq.n	800f40a <searchF4+0x4a2>
 800f3d0:	4b1e      	ldr	r3, [pc, #120]	; (800f44c <searchF4+0x4e4>)
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	4a1e      	ldr	r2, [pc, #120]	; (800f450 <searchF4+0x4e8>)
 800f3d8:	56d3      	ldrsb	r3, [r2, r3]
 800f3da:	f113 0f10 	cmn.w	r3, #16
 800f3de:	d014      	beq.n	800f40a <searchF4+0x4a2>
		for(int j=0; j<goal_mode-1; j++){
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	607b      	str	r3, [r7, #4]
 800f3e4:	e006      	b.n	800f3f4 <searchF4+0x48c>
			one_sectionU();
 800f3e6:	f7f6 fe23 	bl	8006030 <one_sectionU>
			adv_pos();
 800f3ea:	f000 f841 	bl	800f470 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	607b      	str	r3, [r7, #4]
 800f3f4:	4b1c      	ldr	r3, [pc, #112]	; (800f468 <searchF4+0x500>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	3b01      	subs	r3, #1
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	dbf2      	blt.n	800f3e6 <searchF4+0x47e>
		}
		half_sectionD();
 800f400:	f7f6 fb88 	bl	8005b14 <half_sectionD>
		set_positionF();
 800f404:	f7f6 fa4a 	bl	800589c <set_positionF>
 800f408:	e00f      	b.n	800f42a <searchF4+0x4c2>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 800f40a:	2300      	movs	r3, #0
 800f40c:	603b      	str	r3, [r7, #0]
 800f40e:	e006      	b.n	800f41e <searchF4+0x4b6>
			one_section();
 800f410:	f7f6 fc66 	bl	8005ce0 <one_section>
			adv_pos();
 800f414:	f000 f82c 	bl	800f470 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	3301      	adds	r3, #1
 800f41c:	603b      	str	r3, [r7, #0]
 800f41e:	4b12      	ldr	r3, [pc, #72]	; (800f468 <searchF4+0x500>)
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	3b01      	subs	r3, #1
 800f424:	683a      	ldr	r2, [r7, #0]
 800f426:	429a      	cmp	r2, r3
 800f428:	dbf2      	blt.n	800f410 <searchF4+0x4a8>
		}
	}
	HAL_Delay(500);
 800f42a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f42e:	f7f1 fdf5 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f432:	f7f6 ffcd 	bl	80063d0 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f436:	4b0d      	ldr	r3, [pc, #52]	; (800f46c <searchF4+0x504>)
 800f438:	2201      	movs	r2, #1
 800f43a:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <searchF4+0x500>)
 800f43e:	2201      	movs	r2, #1
 800f440:	701a      	strb	r2, [r3, #0]
}
 800f442:	bf00      	nop
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	200002b0 	.word	0x200002b0
 800f450:	20000350 	.word	0x20000350
 800f454:	20000f64 	.word	0x20000f64
 800f458:	20000bb0 	.word	0x20000bb0
 800f45c:	20000c0c 	.word	0x20000c0c
 800f460:	20000b4c 	.word	0x20000b4c
 800f464:	20000f68 	.word	0x20000f68
 800f468:	20000bb1 	.word	0x20000bb1
 800f46c:	200015c8 	.word	0x200015c8

0800f470 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800f470:	b480      	push	{r7}
 800f472:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800f474:	4b1a      	ldr	r3, [pc, #104]	; (800f4e0 <adv_pos+0x70>)
 800f476:	789b      	ldrb	r3, [r3, #2]
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d82a      	bhi.n	800f4d4 <adv_pos+0x64>
 800f47e:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <adv_pos+0x14>)
 800f480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f484:	0800f495 	.word	0x0800f495
 800f488:	0800f4a5 	.word	0x0800f4a5
 800f48c:	0800f4b5 	.word	0x0800f4b5
 800f490:	0800f4c5 	.word	0x0800f4c5
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800f494:	4b12      	ldr	r3, [pc, #72]	; (800f4e0 <adv_pos+0x70>)
 800f496:	785b      	ldrb	r3, [r3, #1]
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	3301      	adds	r3, #1
 800f49c:	b2da      	uxtb	r2, r3
 800f49e:	4b10      	ldr	r3, [pc, #64]	; (800f4e0 <adv_pos+0x70>)
 800f4a0:	705a      	strb	r2, [r3, #1]
		break;
 800f4a2:	e017      	b.n	800f4d4 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800f4a4:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <adv_pos+0x70>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	b2da      	uxtb	r2, r3
 800f4ae:	4b0c      	ldr	r3, [pc, #48]	; (800f4e0 <adv_pos+0x70>)
 800f4b0:	701a      	strb	r2, [r3, #0]
		break;
 800f4b2:	e00f      	b.n	800f4d4 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800f4b4:	4b0a      	ldr	r3, [pc, #40]	; (800f4e0 <adv_pos+0x70>)
 800f4b6:	785b      	ldrb	r3, [r3, #1]
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	4b08      	ldr	r3, [pc, #32]	; (800f4e0 <adv_pos+0x70>)
 800f4c0:	705a      	strb	r2, [r3, #1]
		break;
 800f4c2:	e007      	b.n	800f4d4 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800f4c4:	4b06      	ldr	r3, [pc, #24]	; (800f4e0 <adv_pos+0x70>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	b2da      	uxtb	r2, r3
 800f4ce:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <adv_pos+0x70>)
 800f4d0:	701a      	strb	r2, [r3, #0]
		break;
 800f4d2:	bf00      	nop
	}
}
 800f4d4:	bf00      	nop
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	20000c0c 	.word	0x20000c0c

0800f4e4 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800f4e8:	f000 f886 	bl	800f5f8 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800f4ec:	4b09      	ldr	r3, [pc, #36]	; (800f514 <conf_route+0x30>)
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	4b09      	ldr	r3, [pc, #36]	; (800f518 <conf_route+0x34>)
 800f4f4:	5c9a      	ldrb	r2, [r3, r2]
 800f4f6:	4b09      	ldr	r3, [pc, #36]	; (800f51c <conf_route+0x38>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d006      	beq.n	800f510 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800f502:	f000 fa6d 	bl	800f9e0 <make_smap>
		make_route();										//a最短経路を更新
 800f506:	f000 fe27 	bl	8010158 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800f50a:	4b02      	ldr	r3, [pc, #8]	; (800f514 <conf_route+0x30>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	701a      	strb	r2, [r3, #0]
	}
}
 800f510:	bf00      	nop
 800f512:	bd80      	pop	{r7, pc}
 800f514:	200015d0 	.word	0x200015d0
 800f518:	20000c54 	.word	0x20000c54
 800f51c:	200002c8 	.word	0x200002c8

0800f520 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f526:	2300      	movs	r3, #0
 800f528:	71bb      	strb	r3, [r7, #6]
 800f52a:	e013      	b.n	800f554 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f52c:	2300      	movs	r3, #0
 800f52e:	71fb      	strb	r3, [r7, #7]
 800f530:	e00a      	b.n	800f548 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800f532:	79ba      	ldrb	r2, [r7, #6]
 800f534:	79fb      	ldrb	r3, [r7, #7]
 800f536:	492f      	ldr	r1, [pc, #188]	; (800f5f4 <map_Init+0xd4>)
 800f538:	0112      	lsls	r2, r2, #4
 800f53a:	440a      	add	r2, r1
 800f53c:	4413      	add	r3, r2
 800f53e:	22f0      	movs	r2, #240	; 0xf0
 800f540:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f542:	79fb      	ldrb	r3, [r7, #7]
 800f544:	3301      	adds	r3, #1
 800f546:	71fb      	strb	r3, [r7, #7]
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	2b0f      	cmp	r3, #15
 800f54c:	d9f1      	bls.n	800f532 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f54e:	79bb      	ldrb	r3, [r7, #6]
 800f550:	3301      	adds	r3, #1
 800f552:	71bb      	strb	r3, [r7, #6]
 800f554:	79bb      	ldrb	r3, [r7, #6]
 800f556:	2b0f      	cmp	r3, #15
 800f558:	d9e8      	bls.n	800f52c <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f55a:	2300      	movs	r3, #0
 800f55c:	71bb      	strb	r3, [r7, #6]
 800f55e:	e020      	b.n	800f5a2 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800f560:	79bb      	ldrb	r3, [r7, #6]
 800f562:	4a24      	ldr	r2, [pc, #144]	; (800f5f4 <map_Init+0xd4>)
 800f564:	011b      	lsls	r3, r3, #4
 800f566:	4413      	add	r3, r2
 800f568:	781a      	ldrb	r2, [r3, #0]
 800f56a:	79bb      	ldrb	r3, [r7, #6]
 800f56c:	f062 020e 	orn	r2, r2, #14
 800f570:	b2d1      	uxtb	r1, r2
 800f572:	4a20      	ldr	r2, [pc, #128]	; (800f5f4 <map_Init+0xd4>)
 800f574:	011b      	lsls	r3, r3, #4
 800f576:	4413      	add	r3, r2
 800f578:	460a      	mov	r2, r1
 800f57a:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800f57c:	79bb      	ldrb	r3, [r7, #6]
 800f57e:	4a1d      	ldr	r2, [pc, #116]	; (800f5f4 <map_Init+0xd4>)
 800f580:	011b      	lsls	r3, r3, #4
 800f582:	4413      	add	r3, r2
 800f584:	330f      	adds	r3, #15
 800f586:	781a      	ldrb	r2, [r3, #0]
 800f588:	79bb      	ldrb	r3, [r7, #6]
 800f58a:	f062 020b 	orn	r2, r2, #11
 800f58e:	b2d1      	uxtb	r1, r2
 800f590:	4a18      	ldr	r2, [pc, #96]	; (800f5f4 <map_Init+0xd4>)
 800f592:	011b      	lsls	r3, r3, #4
 800f594:	4413      	add	r3, r2
 800f596:	330f      	adds	r3, #15
 800f598:	460a      	mov	r2, r1
 800f59a:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f59c:	79bb      	ldrb	r3, [r7, #6]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	71bb      	strb	r3, [r7, #6]
 800f5a2:	79bb      	ldrb	r3, [r7, #6]
 800f5a4:	2b0f      	cmp	r3, #15
 800f5a6:	d9db      	bls.n	800f560 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	71fb      	strb	r3, [r7, #7]
 800f5ac:	e019      	b.n	800f5e2 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800f5ae:	79fb      	ldrb	r3, [r7, #7]
 800f5b0:	4a10      	ldr	r2, [pc, #64]	; (800f5f4 <map_Init+0xd4>)
 800f5b2:	5cd2      	ldrb	r2, [r2, r3]
 800f5b4:	79fb      	ldrb	r3, [r7, #7]
 800f5b6:	f062 020d 	orn	r2, r2, #13
 800f5ba:	b2d1      	uxtb	r1, r2
 800f5bc:	4a0d      	ldr	r2, [pc, #52]	; (800f5f4 <map_Init+0xd4>)
 800f5be:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	4a0c      	ldr	r2, [pc, #48]	; (800f5f4 <map_Init+0xd4>)
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800f5ca:	79fb      	ldrb	r3, [r7, #7]
 800f5cc:	f062 0207 	orn	r2, r2, #7
 800f5d0:	b2d1      	uxtb	r1, r2
 800f5d2:	4a08      	ldr	r2, [pc, #32]	; (800f5f4 <map_Init+0xd4>)
 800f5d4:	4413      	add	r3, r2
 800f5d6:	460a      	mov	r2, r1
 800f5d8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	71fb      	strb	r3, [r7, #7]
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	2b0f      	cmp	r3, #15
 800f5e6:	d9e2      	bls.n	800f5ae <map_Init+0x8e>
	}
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	200001ac 	.word	0x200001ac

0800f5f8 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800f5f8:	b490      	push	{r4, r7}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800f5fe:	4b8f      	ldr	r3, [pc, #572]	; (800f83c <write_map+0x244>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	461a      	mov	r2, r3
 800f604:	4b8e      	ldr	r3, [pc, #568]	; (800f840 <write_map+0x248>)
 800f606:	789b      	ldrb	r3, [r3, #2]
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	fa42 f303 	asr.w	r3, r2, r3
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	f003 030f 	and.w	r3, r3, #15
 800f614:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800f616:	79fb      	ldrb	r3, [r7, #7]
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	b25a      	sxtb	r2, r3
 800f61c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f620:	4313      	orrs	r3, r2
 800f622:	b25b      	sxtb	r3, r3
 800f624:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800f626:	4b86      	ldr	r3, [pc, #536]	; (800f840 <write_map+0x248>)
 800f628:	785b      	ldrb	r3, [r3, #1]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	4618      	mov	r0, r3
 800f62e:	4b84      	ldr	r3, [pc, #528]	; (800f840 <write_map+0x248>)
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	4619      	mov	r1, r3
 800f636:	4a83      	ldr	r2, [pc, #524]	; (800f844 <write_map+0x24c>)
 800f638:	0103      	lsls	r3, r0, #4
 800f63a:	4413      	add	r3, r2
 800f63c:	440b      	add	r3, r1
 800f63e:	79fa      	ldrb	r2, [r7, #7]
 800f640:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800f642:	4b7f      	ldr	r3, [pc, #508]	; (800f840 <write_map+0x248>)
 800f644:	785b      	ldrb	r3, [r3, #1]
 800f646:	b2db      	uxtb	r3, r3
 800f648:	2b0f      	cmp	r3, #15
 800f64a:	d039      	beq.n	800f6c0 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800f64c:	79fb      	ldrb	r3, [r7, #7]
 800f64e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f652:	2b00      	cmp	r3, #0
 800f654:	d01a      	beq.n	800f68c <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800f656:	4b7a      	ldr	r3, [pc, #488]	; (800f840 <write_map+0x248>)
 800f658:	785b      	ldrb	r3, [r3, #1]
 800f65a:	b2d8      	uxtb	r0, r3
 800f65c:	4603      	mov	r3, r0
 800f65e:	3301      	adds	r3, #1
 800f660:	4a77      	ldr	r2, [pc, #476]	; (800f840 <write_map+0x248>)
 800f662:	7812      	ldrb	r2, [r2, #0]
 800f664:	b2d1      	uxtb	r1, r2
 800f666:	460c      	mov	r4, r1
 800f668:	4a76      	ldr	r2, [pc, #472]	; (800f844 <write_map+0x24c>)
 800f66a:	011b      	lsls	r3, r3, #4
 800f66c:	4413      	add	r3, r2
 800f66e:	4423      	add	r3, r4
 800f670:	781a      	ldrb	r2, [r3, #0]
 800f672:	4603      	mov	r3, r0
 800f674:	3301      	adds	r3, #1
 800f676:	4608      	mov	r0, r1
 800f678:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800f67c:	b2d1      	uxtb	r1, r2
 800f67e:	4a71      	ldr	r2, [pc, #452]	; (800f844 <write_map+0x24c>)
 800f680:	011b      	lsls	r3, r3, #4
 800f682:	4413      	add	r3, r2
 800f684:	4403      	add	r3, r0
 800f686:	460a      	mov	r2, r1
 800f688:	701a      	strb	r2, [r3, #0]
 800f68a:	e019      	b.n	800f6c0 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800f68c:	4b6c      	ldr	r3, [pc, #432]	; (800f840 <write_map+0x248>)
 800f68e:	785b      	ldrb	r3, [r3, #1]
 800f690:	b2d8      	uxtb	r0, r3
 800f692:	4603      	mov	r3, r0
 800f694:	3301      	adds	r3, #1
 800f696:	4a6a      	ldr	r2, [pc, #424]	; (800f840 <write_map+0x248>)
 800f698:	7812      	ldrb	r2, [r2, #0]
 800f69a:	b2d1      	uxtb	r1, r2
 800f69c:	460c      	mov	r4, r1
 800f69e:	4a69      	ldr	r2, [pc, #420]	; (800f844 <write_map+0x24c>)
 800f6a0:	011b      	lsls	r3, r3, #4
 800f6a2:	4413      	add	r3, r2
 800f6a4:	4423      	add	r3, r4
 800f6a6:	781a      	ldrb	r2, [r3, #0]
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	4608      	mov	r0, r1
 800f6ae:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800f6b2:	b2d1      	uxtb	r1, r2
 800f6b4:	4a63      	ldr	r2, [pc, #396]	; (800f844 <write_map+0x24c>)
 800f6b6:	011b      	lsls	r3, r3, #4
 800f6b8:	4413      	add	r3, r2
 800f6ba:	4403      	add	r3, r0
 800f6bc:	460a      	mov	r2, r1
 800f6be:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800f6c0:	4b5f      	ldr	r3, [pc, #380]	; (800f840 <write_map+0x248>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b0f      	cmp	r3, #15
 800f6c8:	d037      	beq.n	800f73a <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800f6ca:	79fb      	ldrb	r3, [r7, #7]
 800f6cc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d019      	beq.n	800f708 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800f6d4:	4b5a      	ldr	r3, [pc, #360]	; (800f840 <write_map+0x248>)
 800f6d6:	785b      	ldrb	r3, [r3, #1]
 800f6d8:	b2dc      	uxtb	r4, r3
 800f6da:	4622      	mov	r2, r4
 800f6dc:	4b58      	ldr	r3, [pc, #352]	; (800f840 <write_map+0x248>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	b2d8      	uxtb	r0, r3
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	4957      	ldr	r1, [pc, #348]	; (800f844 <write_map+0x24c>)
 800f6e8:	0112      	lsls	r2, r2, #4
 800f6ea:	440a      	add	r2, r1
 800f6ec:	4413      	add	r3, r2
 800f6ee:	781a      	ldrb	r2, [r3, #0]
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	f042 0211 	orr.w	r2, r2, #17
 800f6f8:	b2d0      	uxtb	r0, r2
 800f6fa:	4952      	ldr	r1, [pc, #328]	; (800f844 <write_map+0x24c>)
 800f6fc:	0122      	lsls	r2, r4, #4
 800f6fe:	440a      	add	r2, r1
 800f700:	4413      	add	r3, r2
 800f702:	4602      	mov	r2, r0
 800f704:	701a      	strb	r2, [r3, #0]
 800f706:	e018      	b.n	800f73a <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800f708:	4b4d      	ldr	r3, [pc, #308]	; (800f840 <write_map+0x248>)
 800f70a:	785b      	ldrb	r3, [r3, #1]
 800f70c:	b2dc      	uxtb	r4, r3
 800f70e:	4622      	mov	r2, r4
 800f710:	4b4b      	ldr	r3, [pc, #300]	; (800f840 <write_map+0x248>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	b2d8      	uxtb	r0, r3
 800f716:	4603      	mov	r3, r0
 800f718:	3301      	adds	r3, #1
 800f71a:	494a      	ldr	r1, [pc, #296]	; (800f844 <write_map+0x24c>)
 800f71c:	0112      	lsls	r2, r2, #4
 800f71e:	440a      	add	r2, r1
 800f720:	4413      	add	r3, r2
 800f722:	781a      	ldrb	r2, [r3, #0]
 800f724:	4603      	mov	r3, r0
 800f726:	3301      	adds	r3, #1
 800f728:	f022 0211 	bic.w	r2, r2, #17
 800f72c:	b2d0      	uxtb	r0, r2
 800f72e:	4945      	ldr	r1, [pc, #276]	; (800f844 <write_map+0x24c>)
 800f730:	0122      	lsls	r2, r4, #4
 800f732:	440a      	add	r2, r1
 800f734:	4413      	add	r3, r2
 800f736:	4602      	mov	r2, r0
 800f738:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800f73a:	4b41      	ldr	r3, [pc, #260]	; (800f840 <write_map+0x248>)
 800f73c:	785b      	ldrb	r3, [r3, #1]
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	2b00      	cmp	r3, #0
 800f742:	d039      	beq.n	800f7b8 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800f744:	79fb      	ldrb	r3, [r7, #7]
 800f746:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d01a      	beq.n	800f784 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800f74e:	4b3c      	ldr	r3, [pc, #240]	; (800f840 <write_map+0x248>)
 800f750:	785b      	ldrb	r3, [r3, #1]
 800f752:	b2d8      	uxtb	r0, r3
 800f754:	4603      	mov	r3, r0
 800f756:	3b01      	subs	r3, #1
 800f758:	4a39      	ldr	r2, [pc, #228]	; (800f840 <write_map+0x248>)
 800f75a:	7812      	ldrb	r2, [r2, #0]
 800f75c:	b2d1      	uxtb	r1, r2
 800f75e:	460c      	mov	r4, r1
 800f760:	4a38      	ldr	r2, [pc, #224]	; (800f844 <write_map+0x24c>)
 800f762:	011b      	lsls	r3, r3, #4
 800f764:	4413      	add	r3, r2
 800f766:	4423      	add	r3, r4
 800f768:	781a      	ldrb	r2, [r3, #0]
 800f76a:	4603      	mov	r3, r0
 800f76c:	3b01      	subs	r3, #1
 800f76e:	4608      	mov	r0, r1
 800f770:	f062 0277 	orn	r2, r2, #119	; 0x77
 800f774:	b2d1      	uxtb	r1, r2
 800f776:	4a33      	ldr	r2, [pc, #204]	; (800f844 <write_map+0x24c>)
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	4413      	add	r3, r2
 800f77c:	4403      	add	r3, r0
 800f77e:	460a      	mov	r2, r1
 800f780:	701a      	strb	r2, [r3, #0]
 800f782:	e019      	b.n	800f7b8 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800f784:	4b2e      	ldr	r3, [pc, #184]	; (800f840 <write_map+0x248>)
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	b2d8      	uxtb	r0, r3
 800f78a:	4603      	mov	r3, r0
 800f78c:	3b01      	subs	r3, #1
 800f78e:	4a2c      	ldr	r2, [pc, #176]	; (800f840 <write_map+0x248>)
 800f790:	7812      	ldrb	r2, [r2, #0]
 800f792:	b2d1      	uxtb	r1, r2
 800f794:	460c      	mov	r4, r1
 800f796:	4a2b      	ldr	r2, [pc, #172]	; (800f844 <write_map+0x24c>)
 800f798:	011b      	lsls	r3, r3, #4
 800f79a:	4413      	add	r3, r2
 800f79c:	4423      	add	r3, r4
 800f79e:	781a      	ldrb	r2, [r3, #0]
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	4608      	mov	r0, r1
 800f7a6:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800f7aa:	b2d1      	uxtb	r1, r2
 800f7ac:	4a25      	ldr	r2, [pc, #148]	; (800f844 <write_map+0x24c>)
 800f7ae:	011b      	lsls	r3, r3, #4
 800f7b0:	4413      	add	r3, r2
 800f7b2:	4403      	add	r3, r0
 800f7b4:	460a      	mov	r2, r1
 800f7b6:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800f7b8:	4b21      	ldr	r3, [pc, #132]	; (800f840 <write_map+0x248>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d037      	beq.n	800f832 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800f7c2:	79fb      	ldrb	r3, [r7, #7]
 800f7c4:	f003 0311 	and.w	r3, r3, #17
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d019      	beq.n	800f800 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800f7cc:	4b1c      	ldr	r3, [pc, #112]	; (800f840 <write_map+0x248>)
 800f7ce:	785b      	ldrb	r3, [r3, #1]
 800f7d0:	b2dc      	uxtb	r4, r3
 800f7d2:	4622      	mov	r2, r4
 800f7d4:	4b1a      	ldr	r3, [pc, #104]	; (800f840 <write_map+0x248>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	b2d8      	uxtb	r0, r3
 800f7da:	4603      	mov	r3, r0
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	4919      	ldr	r1, [pc, #100]	; (800f844 <write_map+0x24c>)
 800f7e0:	0112      	lsls	r2, r2, #4
 800f7e2:	440a      	add	r2, r1
 800f7e4:	4413      	add	r3, r2
 800f7e6:	781a      	ldrb	r2, [r3, #0]
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800f7f0:	b2d0      	uxtb	r0, r2
 800f7f2:	4914      	ldr	r1, [pc, #80]	; (800f844 <write_map+0x24c>)
 800f7f4:	0122      	lsls	r2, r4, #4
 800f7f6:	440a      	add	r2, r1
 800f7f8:	4413      	add	r3, r2
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800f7fe:	e018      	b.n	800f832 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800f800:	4b0f      	ldr	r3, [pc, #60]	; (800f840 <write_map+0x248>)
 800f802:	785b      	ldrb	r3, [r3, #1]
 800f804:	b2dc      	uxtb	r4, r3
 800f806:	4622      	mov	r2, r4
 800f808:	4b0d      	ldr	r3, [pc, #52]	; (800f840 <write_map+0x248>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	b2d8      	uxtb	r0, r3
 800f80e:	4603      	mov	r3, r0
 800f810:	3b01      	subs	r3, #1
 800f812:	490c      	ldr	r1, [pc, #48]	; (800f844 <write_map+0x24c>)
 800f814:	0112      	lsls	r2, r2, #4
 800f816:	440a      	add	r2, r1
 800f818:	4413      	add	r3, r2
 800f81a:	781a      	ldrb	r2, [r3, #0]
 800f81c:	4603      	mov	r3, r0
 800f81e:	3b01      	subs	r3, #1
 800f820:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800f824:	b2d0      	uxtb	r0, r2
 800f826:	4907      	ldr	r1, [pc, #28]	; (800f844 <write_map+0x24c>)
 800f828:	0122      	lsls	r2, r4, #4
 800f82a:	440a      	add	r2, r1
 800f82c:	4413      	add	r3, r2
 800f82e:	4602      	mov	r2, r0
 800f830:	701a      	strb	r2, [r3, #0]
}
 800f832:	bf00      	nop
 800f834:	3708      	adds	r7, #8
 800f836:	46bd      	mov	sp, r7
 800f838:	bc90      	pop	{r4, r7}
 800f83a:	4770      	bx	lr
 800f83c:	200002c8 	.word	0x200002c8
 800f840:	20000c0c 	.word	0x20000c0c
 800f844:	200001ac 	.word	0x200001ac

0800f848 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	4603      	mov	r3, r0
 800f850:	460a      	mov	r2, r1
 800f852:	71fb      	strb	r3, [r7, #7]
 800f854:	4613      	mov	r3, r2
 800f856:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800f858:	79bb      	ldrb	r3, [r7, #6]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d837      	bhi.n	800f8ce <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800f85e:	4b5a      	ldr	r3, [pc, #360]	; (800f9c8 <turn_dir+0x180>)
 800f860:	789b      	ldrb	r3, [r3, #2]
 800f862:	b2da      	uxtb	r2, r3
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	4413      	add	r3, r2
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	f003 0303 	and.w	r3, r3, #3
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	4b55      	ldr	r3, [pc, #340]	; (800f9c8 <turn_dir+0x180>)
 800f872:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800f874:	79bb      	ldrb	r3, [r7, #6]
 800f876:	2b01      	cmp	r3, #1
 800f878:	f040 809f 	bne.w	800f9ba <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800f87c:	79fb      	ldrb	r3, [r7, #7]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d109      	bne.n	800f896 <turn_dir+0x4e>
 800f882:	4b52      	ldr	r3, [pc, #328]	; (800f9cc <turn_dir+0x184>)
 800f884:	edd3 7a00 	vldr	s15, [r3]
 800f888:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800f9d0 <turn_dir+0x188>
 800f88c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f890:	4b4e      	ldr	r3, [pc, #312]	; (800f9cc <turn_dir+0x184>)
 800f892:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	2bff      	cmp	r3, #255	; 0xff
 800f89a:	d109      	bne.n	800f8b0 <turn_dir+0x68>
 800f89c:	4b4b      	ldr	r3, [pc, #300]	; (800f9cc <turn_dir+0x184>)
 800f89e:	edd3 7a00 	vldr	s15, [r3]
 800f8a2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f9d0 <turn_dir+0x188>
 800f8a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8aa:	4b48      	ldr	r3, [pc, #288]	; (800f9cc <turn_dir+0x184>)
 800f8ac:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800f8b0:	79fb      	ldrb	r3, [r7, #7]
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	f040 8081 	bne.w	800f9ba <turn_dir+0x172>
 800f8b8:	4b44      	ldr	r3, [pc, #272]	; (800f9cc <turn_dir+0x184>)
 800f8ba:	edd3 7a00 	vldr	s15, [r3]
 800f8be:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800f9d4 <turn_dir+0x18c>
 800f8c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8c6:	4b41      	ldr	r3, [pc, #260]	; (800f9cc <turn_dir+0x184>)
 800f8c8:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800f8cc:	e075      	b.n	800f9ba <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800f8ce:	4b3e      	ldr	r3, [pc, #248]	; (800f9c8 <turn_dir+0x180>)
 800f8d0:	789b      	ldrb	r3, [r3, #2]
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	f003 0307 	and.w	r3, r3, #7
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	4b39      	ldr	r3, [pc, #228]	; (800f9c8 <turn_dir+0x180>)
 800f8e2:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800f8e4:	79bb      	ldrb	r3, [r7, #6]
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d167      	bne.n	800f9ba <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800f8ea:	79fb      	ldrb	r3, [r7, #7]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d109      	bne.n	800f904 <turn_dir+0xbc>
 800f8f0:	4b36      	ldr	r3, [pc, #216]	; (800f9cc <turn_dir+0x184>)
 800f8f2:	edd3 7a00 	vldr	s15, [r3]
 800f8f6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f9d8 <turn_dir+0x190>
 800f8fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8fe:	4b33      	ldr	r3, [pc, #204]	; (800f9cc <turn_dir+0x184>)
 800f900:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800f904:	79fb      	ldrb	r3, [r7, #7]
 800f906:	2b02      	cmp	r3, #2
 800f908:	d109      	bne.n	800f91e <turn_dir+0xd6>
 800f90a:	4b30      	ldr	r3, [pc, #192]	; (800f9cc <turn_dir+0x184>)
 800f90c:	edd3 7a00 	vldr	s15, [r3]
 800f910:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f9d0 <turn_dir+0x188>
 800f914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f918:	4b2c      	ldr	r3, [pc, #176]	; (800f9cc <turn_dir+0x184>)
 800f91a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800f91e:	79fb      	ldrb	r3, [r7, #7]
 800f920:	2b03      	cmp	r3, #3
 800f922:	d109      	bne.n	800f938 <turn_dir+0xf0>
 800f924:	4b29      	ldr	r3, [pc, #164]	; (800f9cc <turn_dir+0x184>)
 800f926:	edd3 7a00 	vldr	s15, [r3]
 800f92a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800f9dc <turn_dir+0x194>
 800f92e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f932:	4b26      	ldr	r3, [pc, #152]	; (800f9cc <turn_dir+0x184>)
 800f934:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800f938:	79fb      	ldrb	r3, [r7, #7]
 800f93a:	2b04      	cmp	r3, #4
 800f93c:	d109      	bne.n	800f952 <turn_dir+0x10a>
 800f93e:	4b23      	ldr	r3, [pc, #140]	; (800f9cc <turn_dir+0x184>)
 800f940:	edd3 7a00 	vldr	s15, [r3]
 800f944:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800f9d4 <turn_dir+0x18c>
 800f948:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f94c:	4b1f      	ldr	r3, [pc, #124]	; (800f9cc <turn_dir+0x184>)
 800f94e:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	2bff      	cmp	r3, #255	; 0xff
 800f956:	d109      	bne.n	800f96c <turn_dir+0x124>
 800f958:	4b1c      	ldr	r3, [pc, #112]	; (800f9cc <turn_dir+0x184>)
 800f95a:	edd3 7a00 	vldr	s15, [r3]
 800f95e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800f9d8 <turn_dir+0x190>
 800f962:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f966:	4b19      	ldr	r3, [pc, #100]	; (800f9cc <turn_dir+0x184>)
 800f968:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	2bfe      	cmp	r3, #254	; 0xfe
 800f970:	d109      	bne.n	800f986 <turn_dir+0x13e>
 800f972:	4b16      	ldr	r3, [pc, #88]	; (800f9cc <turn_dir+0x184>)
 800f974:	edd3 7a00 	vldr	s15, [r3]
 800f978:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800f9d0 <turn_dir+0x188>
 800f97c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f980:	4b12      	ldr	r3, [pc, #72]	; (800f9cc <turn_dir+0x184>)
 800f982:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800f986:	79fb      	ldrb	r3, [r7, #7]
 800f988:	2bfd      	cmp	r3, #253	; 0xfd
 800f98a:	d109      	bne.n	800f9a0 <turn_dir+0x158>
 800f98c:	4b0f      	ldr	r3, [pc, #60]	; (800f9cc <turn_dir+0x184>)
 800f98e:	edd3 7a00 	vldr	s15, [r3]
 800f992:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800f9dc <turn_dir+0x194>
 800f996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f99a:	4b0c      	ldr	r3, [pc, #48]	; (800f9cc <turn_dir+0x184>)
 800f99c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800f9a0:	79fb      	ldrb	r3, [r7, #7]
 800f9a2:	2bfc      	cmp	r3, #252	; 0xfc
 800f9a4:	d109      	bne.n	800f9ba <turn_dir+0x172>
 800f9a6:	4b09      	ldr	r3, [pc, #36]	; (800f9cc <turn_dir+0x184>)
 800f9a8:	edd3 7a00 	vldr	s15, [r3]
 800f9ac:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f9d4 <turn_dir+0x18c>
 800f9b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9b4:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <turn_dir+0x184>)
 800f9b6:	edc3 7a00 	vstr	s15, [r3]
}
 800f9ba:	bf00      	nop
 800f9bc:	370c      	adds	r7, #12
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	20000c0c 	.word	0x20000c0c
 800f9cc:	20000bf8 	.word	0x20000bf8
 800f9d0:	42b50000 	.word	0x42b50000
 800f9d4:	43350000 	.word	0x43350000
 800f9d8:	42350000 	.word	0x42350000
 800f9dc:	4307c000 	.word	0x4307c000

0800f9e0 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800f9e0:	b490      	push	{r4, r7}
 800f9e2:	b08e      	sub	sp, #56	; 0x38
 800f9e4:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800f9ec:	e01c      	b.n	800fa28 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f9f4:	e00f      	b.n	800fa16 <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800f9f6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f9fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9fe:	49bc      	ldr	r1, [pc, #752]	; (800fcf0 <make_smap+0x310>)
 800fa00:	0112      	lsls	r2, r2, #4
 800fa02:	4413      	add	r3, r2
 800fa04:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fa0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa10:	3301      	adds	r3, #1
 800fa12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fa16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa1a:	2b0f      	cmp	r3, #15
 800fa1c:	d9eb      	bls.n	800f9f6 <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fa1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fa22:	3301      	adds	r3, #1
 800fa24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fa28:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fa2c:	2b0f      	cmp	r3, #15
 800fa2e:	d9de      	bls.n	800f9ee <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800fa30:	4bb0      	ldr	r3, [pc, #704]	; (800fcf4 <make_smap+0x314>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 800fa36:	2300      	movs	r3, #0
 800fa38:	633b      	str	r3, [r7, #48]	; 0x30
 800fa3a:	e01e      	b.n	800fa7a <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa40:	e012      	b.n	800fa68 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 800fa42:	4bad      	ldr	r3, [pc, #692]	; (800fcf8 <make_smap+0x318>)
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4a:	441a      	add	r2, r3
 800fa4c:	4bab      	ldr	r3, [pc, #684]	; (800fcfc <make_smap+0x31c>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	4619      	mov	r1, r3
 800fa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa54:	440b      	add	r3, r1
 800fa56:	49a6      	ldr	r1, [pc, #664]	; (800fcf0 <make_smap+0x310>)
 800fa58:	0112      	lsls	r2, r2, #4
 800fa5a:	4413      	add	r3, r2
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	3301      	adds	r3, #1
 800fa66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa68:	4ba5      	ldr	r3, [pc, #660]	; (800fd00 <make_smap+0x320>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa70:	4293      	cmp	r3, r2
 800fa72:	dbe6      	blt.n	800fa42 <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 800fa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa76:	3301      	adds	r3, #1
 800fa78:	633b      	str	r3, [r7, #48]	; 0x30
 800fa7a:	4ba1      	ldr	r3, [pc, #644]	; (800fd00 <make_smap+0x320>)
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	4293      	cmp	r3, r2
 800fa84:	dbda      	blt.n	800fa3c <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800fa86:	2303      	movs	r3, #3
 800fa88:	617b      	str	r3, [r7, #20]
	int turn = 5;
 800fa8a:	2305      	movs	r3, #5
 800fa8c:	613b      	str	r3, [r7, #16]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800fa8e:	2300      	movs	r3, #0
 800fa90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fa94:	e333      	b.n	80100fe <make_smap+0x71e>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800fa96:	2300      	movs	r3, #0
 800fa98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fa9c:	e325      	b.n	80100ea <make_smap+0x70a>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800fa9e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800faa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faa6:	4992      	ldr	r1, [pc, #584]	; (800fcf0 <make_smap+0x310>)
 800faa8:	0112      	lsls	r2, r2, #4
 800faaa:	4413      	add	r3, r2
 800faac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fab0:	4b90      	ldr	r3, [pc, #576]	; (800fcf4 <make_smap+0x314>)
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	f040 8313 	bne.w	80100e0 <make_smap+0x700>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800faba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fabe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fac2:	4990      	ldr	r1, [pc, #576]	; (800fd04 <make_smap+0x324>)
 800fac4:	0112      	lsls	r2, r2, #4
 800fac6:	440a      	add	r2, r1
 800fac8:	4413      	add	r3, r2
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800fad0:	4b8d      	ldr	r3, [pc, #564]	; (800fd08 <make_smap+0x328>)
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d004      	beq.n	800fae8 <make_smap+0x108>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800fade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fae2:	091b      	lsrs	r3, r3, #4
 800fae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800fae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800faec:	f003 0308 	and.w	r3, r3, #8
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f040 80b4 	bne.w	800fc5e <make_smap+0x27e>
 800faf6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fafa:	2b0f      	cmp	r3, #15
 800fafc:	f000 80af 	beq.w	800fc5e <make_smap+0x27e>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 800fb00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb04:	1c5a      	adds	r2, r3, #1
 800fb06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb0a:	4979      	ldr	r1, [pc, #484]	; (800fcf0 <make_smap+0x310>)
 800fb0c:	0112      	lsls	r2, r2, #4
 800fb0e:	4413      	add	r3, r2
 800fb10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fb1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb1e:	4974      	ldr	r1, [pc, #464]	; (800fcf0 <make_smap+0x310>)
 800fb20:	0112      	lsls	r2, r2, #4
 800fb22:	4413      	add	r3, r2
 800fb24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb28:	461a      	mov	r2, r3
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	4298      	cmp	r0, r3
 800fb30:	f2c0 8095 	blt.w	800fc5e <make_smap+0x27e>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800fb34:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fb38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb3c:	496c      	ldr	r1, [pc, #432]	; (800fcf0 <make_smap+0x310>)
 800fb3e:	0112      	lsls	r2, r2, #4
 800fb40:	4413      	add	r3, r2
 800fb42:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	b299      	uxth	r1, r3
 800fb4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb54:	4401      	add	r1, r0
 800fb56:	b288      	uxth	r0, r1
 800fb58:	4965      	ldr	r1, [pc, #404]	; (800fcf0 <make_smap+0x310>)
 800fb5a:	0112      	lsls	r2, r2, #4
 800fb5c:	4413      	add	r3, r2
 800fb5e:	4602      	mov	r2, r0
 800fb60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800fb64:	4b68      	ldr	r3, [pc, #416]	; (800fd08 <make_smap+0x328>)
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d075      	beq.n	800fc5e <make_smap+0x27e>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800fb72:	2301      	movs	r3, #1
 800fb74:	627b      	str	r3, [r7, #36]	; 0x24
 800fb76:	e06b      	b.n	800fc50 <make_smap+0x270>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 800fb78:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	441a      	add	r2, r3
 800fb80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb84:	495f      	ldr	r1, [pc, #380]	; (800fd04 <make_smap+0x324>)
 800fb86:	0112      	lsls	r2, r2, #4
 800fb88:	440a      	add	r2, r1
 800fb8a:	4413      	add	r3, r2
 800fb8c:	7819      	ldrb	r1, [r3, #0]
 800fb8e:	463a      	mov	r2, r7
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	4413      	add	r3, r2
 800fb94:	460a      	mov	r2, r1
 800fb96:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800fb98:	4b5b      	ldr	r3, [pc, #364]	; (800fd08 <make_smap+0x328>)
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00a      	beq.n	800fbbc <make_smap+0x1dc>
 800fba6:	463a      	mov	r2, r7
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	4413      	add	r3, r2
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	091b      	lsrs	r3, r3, #4
 800fbb0:	b2d9      	uxtb	r1, r3
 800fbb2:	463a      	mov	r2, r7
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	4413      	add	r3, r2
 800fbb8:	460a      	mov	r2, r1
 800fbba:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 800fbbc:	463a      	mov	r2, r7
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	4413      	add	r3, r2
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	f003 0308 	and.w	r3, r3, #8
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d148      	bne.n	800fc5e <make_smap+0x27e>
 800fbcc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd2:	4413      	add	r3, r2
 800fbd4:	2b0f      	cmp	r3, #15
 800fbd6:	d042      	beq.n	800fc5e <make_smap+0x27e>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 800fbd8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbde:	4413      	add	r3, r2
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbe6:	4942      	ldr	r1, [pc, #264]	; (800fcf0 <make_smap+0x310>)
 800fbe8:	0112      	lsls	r2, r2, #4
 800fbea:	4413      	add	r3, r2
 800fbec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf8:	441a      	add	r2, r3
 800fbfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbfe:	493c      	ldr	r1, [pc, #240]	; (800fcf0 <make_smap+0x310>)
 800fc00:	0112      	lsls	r2, r2, #4
 800fc02:	4413      	add	r3, r2
 800fc04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc08:	461a      	mov	r2, r3
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	4298      	cmp	r0, r3
 800fc10:	db1b      	blt.n	800fc4a <make_smap+0x26a>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800fc12:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	441a      	add	r2, r3
 800fc1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc1e:	4934      	ldr	r1, [pc, #208]	; (800fcf0 <make_smap+0x310>)
 800fc20:	0112      	lsls	r2, r2, #4
 800fc22:	4413      	add	r3, r2
 800fc24:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	b299      	uxth	r1, r3
 800fc2c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	4413      	add	r3, r2
 800fc34:	1c5a      	adds	r2, r3, #1
 800fc36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc3a:	4401      	add	r1, r0
 800fc3c:	b288      	uxth	r0, r1
 800fc3e:	492c      	ldr	r1, [pc, #176]	; (800fcf0 <make_smap+0x310>)
 800fc40:	0112      	lsls	r2, r2, #4
 800fc42:	4413      	add	r3, r2
 800fc44:	4602      	mov	r2, r0
 800fc46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800fc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fc54:	f1c3 0310 	rsb	r3, r3, #16
 800fc58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	db8c      	blt.n	800fb78 <make_smap+0x198>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800fc5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc62:	f003 0304 	and.w	r3, r3, #4
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f040 80c3 	bne.w	800fdf2 <make_smap+0x412>
 800fc6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc70:	2b0f      	cmp	r3, #15
 800fc72:	f000 80be 	beq.w	800fdf2 <make_smap+0x412>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 800fc76:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc7e:	3301      	adds	r3, #1
 800fc80:	491b      	ldr	r1, [pc, #108]	; (800fcf0 <make_smap+0x310>)
 800fc82:	0112      	lsls	r2, r2, #4
 800fc84:	4413      	add	r3, r2
 800fc86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc94:	4916      	ldr	r1, [pc, #88]	; (800fcf0 <make_smap+0x310>)
 800fc96:	0112      	lsls	r2, r2, #4
 800fc98:	4413      	add	r3, r2
 800fc9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	4413      	add	r3, r2
 800fca4:	4298      	cmp	r0, r3
 800fca6:	f2c0 80a4 	blt.w	800fdf2 <make_smap+0x412>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800fcaa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fcae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcb2:	490f      	ldr	r1, [pc, #60]	; (800fcf0 <make_smap+0x310>)
 800fcb4:	0112      	lsls	r2, r2, #4
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	b299      	uxth	r1, r3
 800fcc0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fcc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcc8:	3301      	adds	r3, #1
 800fcca:	4401      	add	r1, r0
 800fccc:	b288      	uxth	r0, r1
 800fcce:	4908      	ldr	r1, [pc, #32]	; (800fcf0 <make_smap+0x310>)
 800fcd0:	0112      	lsls	r2, r2, #4
 800fcd2:	4413      	add	r3, r2
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800fcda:	4b0b      	ldr	r3, [pc, #44]	; (800fd08 <make_smap+0x328>)
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f000 8084 	beq.w	800fdf2 <make_smap+0x412>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800fcea:	2301      	movs	r3, #1
 800fcec:	623b      	str	r3, [r7, #32]
 800fcee:	e079      	b.n	800fde4 <make_smap+0x404>
 800fcf0:	20000d60 	.word	0x20000d60
 800fcf4:	2000034e 	.word	0x2000034e
 800fcf8:	20000b4c 	.word	0x20000b4c
 800fcfc:	20000bb0 	.word	0x20000bb0
 800fd00:	20000bb1 	.word	0x20000bb1
 800fd04:	200001ac 	.word	0x200001ac
 800fd08:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 800fd0c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd10:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fd14:	6a3b      	ldr	r3, [r7, #32]
 800fd16:	440b      	add	r3, r1
 800fd18:	49b6      	ldr	r1, [pc, #728]	; (800fff4 <make_smap+0x614>)
 800fd1a:	0112      	lsls	r2, r2, #4
 800fd1c:	440a      	add	r2, r1
 800fd1e:	4413      	add	r3, r2
 800fd20:	7819      	ldrb	r1, [r3, #0]
 800fd22:	463a      	mov	r2, r7
 800fd24:	6a3b      	ldr	r3, [r7, #32]
 800fd26:	4413      	add	r3, r2
 800fd28:	460a      	mov	r2, r1
 800fd2a:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800fd2c:	4bb2      	ldr	r3, [pc, #712]	; (800fff8 <make_smap+0x618>)
 800fd2e:	881b      	ldrh	r3, [r3, #0]
 800fd30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00a      	beq.n	800fd50 <make_smap+0x370>
 800fd3a:	463a      	mov	r2, r7
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	4413      	add	r3, r2
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	091b      	lsrs	r3, r3, #4
 800fd44:	b2d9      	uxtb	r1, r3
 800fd46:	463a      	mov	r2, r7
 800fd48:	6a3b      	ldr	r3, [r7, #32]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	460a      	mov	r2, r1
 800fd4e:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 800fd50:	463a      	mov	r2, r7
 800fd52:	6a3b      	ldr	r3, [r7, #32]
 800fd54:	4413      	add	r3, r2
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	f003 0304 	and.w	r3, r3, #4
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d148      	bne.n	800fdf2 <make_smap+0x412>
 800fd60:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd64:	6a3b      	ldr	r3, [r7, #32]
 800fd66:	4413      	add	r3, r2
 800fd68:	2b0f      	cmp	r3, #15
 800fd6a:	d042      	beq.n	800fdf2 <make_smap+0x412>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 800fd6c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd70:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fd74:	6a3b      	ldr	r3, [r7, #32]
 800fd76:	440b      	add	r3, r1
 800fd78:	3301      	adds	r3, #1
 800fd7a:	49a0      	ldr	r1, [pc, #640]	; (800fffc <make_smap+0x61c>)
 800fd7c:	0112      	lsls	r2, r2, #4
 800fd7e:	4413      	add	r3, r2
 800fd80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd8a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fd8e:	6a3b      	ldr	r3, [r7, #32]
 800fd90:	440b      	add	r3, r1
 800fd92:	499a      	ldr	r1, [pc, #616]	; (800fffc <make_smap+0x61c>)
 800fd94:	0112      	lsls	r2, r2, #4
 800fd96:	4413      	add	r3, r2
 800fd98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	4413      	add	r3, r2
 800fda2:	4298      	cmp	r0, r3
 800fda4:	db1b      	blt.n	800fdde <make_smap+0x3fe>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800fda6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fdaa:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	440b      	add	r3, r1
 800fdb2:	4992      	ldr	r1, [pc, #584]	; (800fffc <make_smap+0x61c>)
 800fdb4:	0112      	lsls	r2, r2, #4
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	b299      	uxth	r1, r3
 800fdc0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fdc4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800fdc8:	6a3b      	ldr	r3, [r7, #32]
 800fdca:	4423      	add	r3, r4
 800fdcc:	3301      	adds	r3, #1
 800fdce:	4401      	add	r1, r0
 800fdd0:	b288      	uxth	r0, r1
 800fdd2:	498a      	ldr	r1, [pc, #552]	; (800fffc <make_smap+0x61c>)
 800fdd4:	0112      	lsls	r2, r2, #4
 800fdd6:	4413      	add	r3, r2
 800fdd8:	4602      	mov	r2, r0
 800fdda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800fdde:	6a3b      	ldr	r3, [r7, #32]
 800fde0:	3301      	adds	r3, #1
 800fde2:	623b      	str	r3, [r7, #32]
 800fde4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fde8:	f1c3 0310 	rsb	r3, r3, #16
 800fdec:	6a3a      	ldr	r2, [r7, #32]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	db8c      	blt.n	800fd0c <make_smap+0x32c>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800fdf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fdf6:	f003 0302 	and.w	r3, r3, #2
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f040 80b1 	bne.w	800ff62 <make_smap+0x582>
 800fe00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80ac 	beq.w	800ff62 <make_smap+0x582>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 800fe0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe0e:	1e5a      	subs	r2, r3, #1
 800fe10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe14:	4979      	ldr	r1, [pc, #484]	; (800fffc <make_smap+0x61c>)
 800fe16:	0112      	lsls	r2, r2, #4
 800fe18:	4413      	add	r3, r2
 800fe1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fe24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe28:	4974      	ldr	r1, [pc, #464]	; (800fffc <make_smap+0x61c>)
 800fe2a:	0112      	lsls	r2, r2, #4
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fe32:	461a      	mov	r2, r3
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	4413      	add	r3, r2
 800fe38:	4298      	cmp	r0, r3
 800fe3a:	f2c0 8092 	blt.w	800ff62 <make_smap+0x582>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800fe3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fe42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe46:	496d      	ldr	r1, [pc, #436]	; (800fffc <make_smap+0x61c>)
 800fe48:	0112      	lsls	r2, r2, #4
 800fe4a:	4413      	add	r3, r2
 800fe4c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	b299      	uxth	r1, r3
 800fe54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe58:	1e5a      	subs	r2, r3, #1
 800fe5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe5e:	4401      	add	r1, r0
 800fe60:	b288      	uxth	r0, r1
 800fe62:	4966      	ldr	r1, [pc, #408]	; (800fffc <make_smap+0x61c>)
 800fe64:	0112      	lsls	r2, r2, #4
 800fe66:	4413      	add	r3, r2
 800fe68:	4602      	mov	r2, r0
 800fe6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800fe6e:	4b62      	ldr	r3, [pc, #392]	; (800fff8 <make_smap+0x618>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d072      	beq.n	800ff62 <make_smap+0x582>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	61fb      	str	r3, [r7, #28]
 800fe80:	e06a      	b.n	800ff58 <make_smap+0x578>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 800fe82:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fe86:	69fb      	ldr	r3, [r7, #28]
 800fe88:	1ad2      	subs	r2, r2, r3
 800fe8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe8e:	4959      	ldr	r1, [pc, #356]	; (800fff4 <make_smap+0x614>)
 800fe90:	0112      	lsls	r2, r2, #4
 800fe92:	440a      	add	r2, r1
 800fe94:	4413      	add	r3, r2
 800fe96:	7819      	ldrb	r1, [r3, #0]
 800fe98:	463a      	mov	r2, r7
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	460a      	mov	r2, r1
 800fea0:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800fea2:	4b55      	ldr	r3, [pc, #340]	; (800fff8 <make_smap+0x618>)
 800fea4:	881b      	ldrh	r3, [r3, #0]
 800fea6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00a      	beq.n	800fec6 <make_smap+0x4e6>
 800feb0:	463a      	mov	r2, r7
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	4413      	add	r3, r2
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	091b      	lsrs	r3, r3, #4
 800feba:	b2d9      	uxtb	r1, r3
 800febc:	463a      	mov	r2, r7
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	4413      	add	r3, r2
 800fec2:	460a      	mov	r2, r1
 800fec4:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 800fec6:	463a      	mov	r2, r7
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	4413      	add	r3, r2
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	f003 0302 	and.w	r3, r3, #2
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d145      	bne.n	800ff62 <make_smap+0x582>
 800fed6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800feda:	69fa      	ldr	r2, [r7, #28]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d040      	beq.n	800ff62 <make_smap+0x582>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 800fee0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	1e5a      	subs	r2, r3, #1
 800feea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feee:	4943      	ldr	r1, [pc, #268]	; (800fffc <make_smap+0x61c>)
 800fef0:	0112      	lsls	r2, r2, #4
 800fef2:	4413      	add	r3, r2
 800fef4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	1ad2      	subs	r2, r2, r3
 800ff02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff06:	493d      	ldr	r1, [pc, #244]	; (800fffc <make_smap+0x61c>)
 800ff08:	0112      	lsls	r2, r2, #4
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ff10:	461a      	mov	r2, r3
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	4413      	add	r3, r2
 800ff16:	4298      	cmp	r0, r3
 800ff18:	db1b      	blt.n	800ff52 <make_smap+0x572>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ff1a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff1e:	69fb      	ldr	r3, [r7, #28]
 800ff20:	1ad2      	subs	r2, r2, r3
 800ff22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff26:	4935      	ldr	r1, [pc, #212]	; (800fffc <make_smap+0x61c>)
 800ff28:	0112      	lsls	r2, r2, #4
 800ff2a:	4413      	add	r3, r2
 800ff2c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	b299      	uxth	r1, r3
 800ff34:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	1ad3      	subs	r3, r2, r3
 800ff3c:	1e5a      	subs	r2, r3, #1
 800ff3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff42:	4401      	add	r1, r0
 800ff44:	b288      	uxth	r0, r1
 800ff46:	492d      	ldr	r1, [pc, #180]	; (800fffc <make_smap+0x61c>)
 800ff48:	0112      	lsls	r2, r2, #4
 800ff4a:	4413      	add	r3, r2
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	3301      	adds	r3, #1
 800ff56:	61fb      	str	r3, [r7, #28]
 800ff58:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ff5c:	69fa      	ldr	r2, [r7, #28]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	db8f      	blt.n	800fe82 <make_smap+0x4a2>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800ff62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff66:	f003 0301 	and.w	r3, r3, #1
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f040 80b8 	bne.w	80100e0 <make_smap+0x700>
 800ff70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 80b3 	beq.w	80100e0 <make_smap+0x700>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 800ff7a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff82:	3b01      	subs	r3, #1
 800ff84:	491d      	ldr	r1, [pc, #116]	; (800fffc <make_smap+0x61c>)
 800ff86:	0112      	lsls	r2, r2, #4
 800ff88:	4413      	add	r3, r2
 800ff8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff98:	4918      	ldr	r1, [pc, #96]	; (800fffc <make_smap+0x61c>)
 800ff9a:	0112      	lsls	r2, r2, #4
 800ff9c:	4413      	add	r3, r2
 800ff9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	4298      	cmp	r0, r3
 800ffaa:	f2c0 8099 	blt.w	80100e0 <make_smap+0x700>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800ffae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ffb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffb6:	4911      	ldr	r1, [pc, #68]	; (800fffc <make_smap+0x61c>)
 800ffb8:	0112      	lsls	r2, r2, #4
 800ffba:	4413      	add	r3, r2
 800ffbc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	b299      	uxth	r1, r3
 800ffc4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ffc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	4401      	add	r1, r0
 800ffd0:	b288      	uxth	r0, r1
 800ffd2:	490a      	ldr	r1, [pc, #40]	; (800fffc <make_smap+0x61c>)
 800ffd4:	0112      	lsls	r2, r2, #4
 800ffd6:	4413      	add	r3, r2
 800ffd8:	4602      	mov	r2, r0
 800ffda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800ffde:	4b06      	ldr	r3, [pc, #24]	; (800fff8 <make_smap+0x618>)
 800ffe0:	881b      	ldrh	r3, [r3, #0]
 800ffe2:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d079      	beq.n	80100e0 <make_smap+0x700>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800ffec:	2301      	movs	r3, #1
 800ffee:	61bb      	str	r3, [r7, #24]
 800fff0:	e071      	b.n	80100d6 <make_smap+0x6f6>
 800fff2:	bf00      	nop
 800fff4:	200001ac 	.word	0x200001ac
 800fff8:	20000f68 	.word	0x20000f68
 800fffc:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 8010000:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010004:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	1acb      	subs	r3, r1, r3
 801000c:	494d      	ldr	r1, [pc, #308]	; (8010144 <make_smap+0x764>)
 801000e:	0112      	lsls	r2, r2, #4
 8010010:	440a      	add	r2, r1
 8010012:	4413      	add	r3, r2
 8010014:	7819      	ldrb	r1, [r3, #0]
 8010016:	463a      	mov	r2, r7
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	4413      	add	r3, r2
 801001c:	460a      	mov	r2, r1
 801001e:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010020:	4b49      	ldr	r3, [pc, #292]	; (8010148 <make_smap+0x768>)
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010028:	b2db      	uxtb	r3, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00a      	beq.n	8010044 <make_smap+0x664>
 801002e:	463a      	mov	r2, r7
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	4413      	add	r3, r2
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	091b      	lsrs	r3, r3, #4
 8010038:	b2d9      	uxtb	r1, r3
 801003a:	463a      	mov	r2, r7
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	4413      	add	r3, r2
 8010040:	460a      	mov	r2, r1
 8010042:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 8010044:	463a      	mov	r2, r7
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	4413      	add	r3, r2
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	d145      	bne.n	80100e0 <make_smap+0x700>
 8010054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010058:	69ba      	ldr	r2, [r7, #24]
 801005a:	429a      	cmp	r2, r3
 801005c:	d040      	beq.n	80100e0 <make_smap+0x700>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 801005e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010062:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	1acb      	subs	r3, r1, r3
 801006a:	3b01      	subs	r3, #1
 801006c:	4937      	ldr	r1, [pc, #220]	; (801014c <make_smap+0x76c>)
 801006e:	0112      	lsls	r2, r2, #4
 8010070:	4413      	add	r3, r2
 8010072:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010076:	4618      	mov	r0, r3
 8010078:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801007c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	1acb      	subs	r3, r1, r3
 8010084:	4931      	ldr	r1, [pc, #196]	; (801014c <make_smap+0x76c>)
 8010086:	0112      	lsls	r2, r2, #4
 8010088:	4413      	add	r3, r2
 801008a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801008e:	461a      	mov	r2, r3
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	4413      	add	r3, r2
 8010094:	4298      	cmp	r0, r3
 8010096:	db1b      	blt.n	80100d0 <make_smap+0x6f0>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010098:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801009c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	1acb      	subs	r3, r1, r3
 80100a4:	4929      	ldr	r1, [pc, #164]	; (801014c <make_smap+0x76c>)
 80100a6:	0112      	lsls	r2, r2, #4
 80100a8:	4413      	add	r3, r2
 80100aa:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	b299      	uxth	r1, r3
 80100b2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100b6:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	1ae3      	subs	r3, r4, r3
 80100be:	3b01      	subs	r3, #1
 80100c0:	4401      	add	r1, r0
 80100c2:	b288      	uxth	r0, r1
 80100c4:	4921      	ldr	r1, [pc, #132]	; (801014c <make_smap+0x76c>)
 80100c6:	0112      	lsls	r2, r2, #4
 80100c8:	4413      	add	r3, r2
 80100ca:	4602      	mov	r2, r0
 80100cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	3301      	adds	r3, #1
 80100d4:	61bb      	str	r3, [r7, #24]
 80100d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100da:	69ba      	ldr	r2, [r7, #24]
 80100dc:	429a      	cmp	r2, r3
 80100de:	db8f      	blt.n	8010000 <make_smap+0x620>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 80100e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100e4:	3301      	adds	r3, #1
 80100e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100ee:	2b0f      	cmp	r3, #15
 80100f0:	f67f acd5 	bls.w	800fa9e <make_smap+0xbe>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 80100f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100f8:	3301      	adds	r3, #1
 80100fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80100fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010102:	2b0f      	cmp	r3, #15
 8010104:	f67f acc7 	bls.w	800fa96 <make_smap+0xb6>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8010108:	4b11      	ldr	r3, [pc, #68]	; (8010150 <make_smap+0x770>)
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	3301      	adds	r3, #1
 801010e:	b29a      	uxth	r2, r3
 8010110:	4b0f      	ldr	r3, [pc, #60]	; (8010150 <make_smap+0x770>)
 8010112:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 8010114:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <make_smap+0x774>)
 8010116:	785b      	ldrb	r3, [r3, #1]
 8010118:	b2db      	uxtb	r3, r3
 801011a:	4618      	mov	r0, r3
 801011c:	4b0d      	ldr	r3, [pc, #52]	; (8010154 <make_smap+0x774>)
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	b2db      	uxtb	r3, r3
 8010122:	4619      	mov	r1, r3
 8010124:	4a09      	ldr	r2, [pc, #36]	; (801014c <make_smap+0x76c>)
 8010126:	0103      	lsls	r3, r0, #4
 8010128:	440b      	add	r3, r1
 801012a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801012e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010132:	4293      	cmp	r3, r2
 8010134:	f43f acab 	beq.w	800fa8e <make_smap+0xae>
}
 8010138:	bf00      	nop
 801013a:	3738      	adds	r7, #56	; 0x38
 801013c:	46bd      	mov	sp, r7
 801013e:	bc90      	pop	{r4, r7}
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	200001ac 	.word	0x200001ac
 8010148:	20000f68 	.word	0x20000f68
 801014c:	20000d60 	.word	0x20000d60
 8010150:	2000034e 	.word	0x2000034e
 8010154:	20000c0c 	.word	0x20000c0c

08010158 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 801015e:	4ba2      	ldr	r3, [pc, #648]	; (80103e8 <make_route+0x290>)
 8010160:	789b      	ldrb	r3, [r3, #2]
 8010162:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 8010164:	2300      	movs	r3, #0
 8010166:	80bb      	strh	r3, [r7, #4]
 8010168:	e006      	b.n	8010178 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 801016a:	88bb      	ldrh	r3, [r7, #4]
 801016c:	4a9f      	ldr	r2, [pc, #636]	; (80103ec <make_route+0x294>)
 801016e:	21ff      	movs	r1, #255	; 0xff
 8010170:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 8010172:	88bb      	ldrh	r3, [r7, #4]
 8010174:	3301      	adds	r3, #1
 8010176:	80bb      	strh	r3, [r7, #4]
 8010178:	88bb      	ldrh	r3, [r7, #4]
 801017a:	2bff      	cmp	r3, #255	; 0xff
 801017c:	d9f5      	bls.n	801016a <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 801017e:	4b9a      	ldr	r3, [pc, #616]	; (80103e8 <make_route+0x290>)
 8010180:	785b      	ldrb	r3, [r3, #1]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	4618      	mov	r0, r3
 8010186:	4b98      	ldr	r3, [pc, #608]	; (80103e8 <make_route+0x290>)
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	b2db      	uxtb	r3, r3
 801018c:	4619      	mov	r1, r3
 801018e:	4a98      	ldr	r2, [pc, #608]	; (80103f0 <make_route+0x298>)
 8010190:	0103      	lsls	r3, r0, #4
 8010192:	440b      	add	r3, r1
 8010194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010198:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 801019a:	4b93      	ldr	r3, [pc, #588]	; (80103e8 <make_route+0x290>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 80101a0:	4b91      	ldr	r3, [pc, #580]	; (80103e8 <make_route+0x290>)
 80101a2:	785b      	ldrb	r3, [r3, #1]
 80101a4:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 80101a6:	4b93      	ldr	r3, [pc, #588]	; (80103f4 <make_route+0x29c>)
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d105      	bne.n	80101ba <make_route+0x62>
		route[0] = 0x77;
 80101ae:	4b8f      	ldr	r3, [pc, #572]	; (80103ec <make_route+0x294>)
 80101b0:	2277      	movs	r2, #119	; 0x77
 80101b2:	701a      	strb	r2, [r3, #0]
		i = 1;
 80101b4:	2301      	movs	r3, #1
 80101b6:	80bb      	strh	r3, [r7, #4]
 80101b8:	e001      	b.n	80101be <make_route+0x66>
	}else{
		i = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 80101be:	79ba      	ldrb	r2, [r7, #6]
 80101c0:	79fb      	ldrb	r3, [r7, #7]
 80101c2:	498d      	ldr	r1, [pc, #564]	; (80103f8 <make_route+0x2a0>)
 80101c4:	0112      	lsls	r2, r2, #4
 80101c6:	440a      	add	r2, r1
 80101c8:	4413      	add	r3, r2
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 80101ce:	4b8b      	ldr	r3, [pc, #556]	; (80103fc <make_route+0x2a4>)
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d002      	beq.n	80101e2 <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 80101dc:	787b      	ldrb	r3, [r7, #1]
 80101de:	091b      	lsrs	r3, r3, #4
 80101e0:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 80101e2:	787b      	ldrb	r3, [r7, #1]
 80101e4:	f003 0308 	and.w	r3, r3, #8
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d122      	bne.n	8010232 <make_route+0xda>
 80101ec:	79bb      	ldrb	r3, [r7, #6]
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	497f      	ldr	r1, [pc, #508]	; (80103f0 <make_route+0x298>)
 80101f4:	0112      	lsls	r2, r2, #4
 80101f6:	4413      	add	r3, r2
 80101f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101fc:	887a      	ldrh	r2, [r7, #2]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d917      	bls.n	8010232 <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010202:	4b79      	ldr	r3, [pc, #484]	; (80103e8 <make_route+0x290>)
 8010204:	789b      	ldrb	r3, [r3, #2]
 8010206:	b2db      	uxtb	r3, r3
 8010208:	425b      	negs	r3, r3
 801020a:	b2da      	uxtb	r2, r3
 801020c:	88bb      	ldrh	r3, [r7, #4]
 801020e:	f002 0203 	and.w	r2, r2, #3
 8010212:	b2d1      	uxtb	r1, r2
 8010214:	4a75      	ldr	r2, [pc, #468]	; (80103ec <make_route+0x294>)
 8010216:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8010218:	79bb      	ldrb	r3, [r7, #6]
 801021a:	1c5a      	adds	r2, r3, #1
 801021c:	79fb      	ldrb	r3, [r7, #7]
 801021e:	4974      	ldr	r1, [pc, #464]	; (80103f0 <make_route+0x298>)
 8010220:	0112      	lsls	r2, r2, #4
 8010222:	4413      	add	r3, r2
 8010224:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010228:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 801022a:	79bb      	ldrb	r3, [r7, #6]
 801022c:	3301      	adds	r3, #1
 801022e:	71bb      	strb	r3, [r7, #6]
 8010230:	e079      	b.n	8010326 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 8010232:	787b      	ldrb	r3, [r7, #1]
 8010234:	f003 0304 	and.w	r3, r3, #4
 8010238:	2b00      	cmp	r3, #0
 801023a:	d123      	bne.n	8010284 <make_route+0x12c>
 801023c:	79ba      	ldrb	r2, [r7, #6]
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	3301      	adds	r3, #1
 8010242:	496b      	ldr	r1, [pc, #428]	; (80103f0 <make_route+0x298>)
 8010244:	0112      	lsls	r2, r2, #4
 8010246:	4413      	add	r3, r2
 8010248:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801024c:	887a      	ldrh	r2, [r7, #2]
 801024e:	429a      	cmp	r2, r3
 8010250:	d918      	bls.n	8010284 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010252:	4b65      	ldr	r3, [pc, #404]	; (80103e8 <make_route+0x290>)
 8010254:	789b      	ldrb	r3, [r3, #2]
 8010256:	b2db      	uxtb	r3, r3
 8010258:	f1c3 0301 	rsb	r3, r3, #1
 801025c:	b2da      	uxtb	r2, r3
 801025e:	88bb      	ldrh	r3, [r7, #4]
 8010260:	f002 0203 	and.w	r2, r2, #3
 8010264:	b2d1      	uxtb	r1, r2
 8010266:	4a61      	ldr	r2, [pc, #388]	; (80103ec <make_route+0x294>)
 8010268:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 801026a:	79ba      	ldrb	r2, [r7, #6]
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	3301      	adds	r3, #1
 8010270:	495f      	ldr	r1, [pc, #380]	; (80103f0 <make_route+0x298>)
 8010272:	0112      	lsls	r2, r2, #4
 8010274:	4413      	add	r3, r2
 8010276:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801027a:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	3301      	adds	r3, #1
 8010280:	71fb      	strb	r3, [r7, #7]
 8010282:	e050      	b.n	8010326 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 8010284:	787b      	ldrb	r3, [r7, #1]
 8010286:	f003 0302 	and.w	r3, r3, #2
 801028a:	2b00      	cmp	r3, #0
 801028c:	d123      	bne.n	80102d6 <make_route+0x17e>
 801028e:	79bb      	ldrb	r3, [r7, #6]
 8010290:	1e5a      	subs	r2, r3, #1
 8010292:	79fb      	ldrb	r3, [r7, #7]
 8010294:	4956      	ldr	r1, [pc, #344]	; (80103f0 <make_route+0x298>)
 8010296:	0112      	lsls	r2, r2, #4
 8010298:	4413      	add	r3, r2
 801029a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801029e:	887a      	ldrh	r2, [r7, #2]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d918      	bls.n	80102d6 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80102a4:	4b50      	ldr	r3, [pc, #320]	; (80103e8 <make_route+0x290>)
 80102a6:	789b      	ldrb	r3, [r3, #2]
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	f1c3 0302 	rsb	r3, r3, #2
 80102ae:	b2da      	uxtb	r2, r3
 80102b0:	88bb      	ldrh	r3, [r7, #4]
 80102b2:	f002 0203 	and.w	r2, r2, #3
 80102b6:	b2d1      	uxtb	r1, r2
 80102b8:	4a4c      	ldr	r2, [pc, #304]	; (80103ec <make_route+0x294>)
 80102ba:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 80102bc:	79bb      	ldrb	r3, [r7, #6]
 80102be:	1e5a      	subs	r2, r3, #1
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	494b      	ldr	r1, [pc, #300]	; (80103f0 <make_route+0x298>)
 80102c4:	0112      	lsls	r2, r2, #4
 80102c6:	4413      	add	r3, r2
 80102c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80102cc:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 80102ce:	79bb      	ldrb	r3, [r7, #6]
 80102d0:	3b01      	subs	r3, #1
 80102d2:	71bb      	strb	r3, [r7, #6]
 80102d4:	e027      	b.n	8010326 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 80102d6:	787b      	ldrb	r3, [r7, #1]
 80102d8:	f003 0301 	and.w	r3, r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d122      	bne.n	8010326 <make_route+0x1ce>
 80102e0:	79ba      	ldrb	r2, [r7, #6]
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	4942      	ldr	r1, [pc, #264]	; (80103f0 <make_route+0x298>)
 80102e8:	0112      	lsls	r2, r2, #4
 80102ea:	4413      	add	r3, r2
 80102ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80102f0:	887a      	ldrh	r2, [r7, #2]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d917      	bls.n	8010326 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80102f6:	4b3c      	ldr	r3, [pc, #240]	; (80103e8 <make_route+0x290>)
 80102f8:	789b      	ldrb	r3, [r3, #2]
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	f1c3 0303 	rsb	r3, r3, #3
 8010300:	b2da      	uxtb	r2, r3
 8010302:	88bb      	ldrh	r3, [r7, #4]
 8010304:	f002 0203 	and.w	r2, r2, #3
 8010308:	b2d1      	uxtb	r1, r2
 801030a:	4a38      	ldr	r2, [pc, #224]	; (80103ec <make_route+0x294>)
 801030c:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 801030e:	79ba      	ldrb	r2, [r7, #6]
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	3b01      	subs	r3, #1
 8010314:	4936      	ldr	r1, [pc, #216]	; (80103f0 <make_route+0x298>)
 8010316:	0112      	lsls	r2, r2, #4
 8010318:	4413      	add	r3, r2
 801031a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801031e:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 8010320:	79fb      	ldrb	r3, [r7, #7]
 8010322:	3b01      	subs	r3, #1
 8010324:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8010326:	88bb      	ldrh	r3, [r7, #4]
 8010328:	4a30      	ldr	r2, [pc, #192]	; (80103ec <make_route+0x294>)
 801032a:	5cd3      	ldrb	r3, [r2, r3]
 801032c:	2b03      	cmp	r3, #3
 801032e:	d83c      	bhi.n	80103aa <make_route+0x252>
 8010330:	a201      	add	r2, pc, #4	; (adr r2, 8010338 <make_route+0x1e0>)
 8010332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010336:	bf00      	nop
 8010338:	08010349 	.word	0x08010349
 801033c:	08010375 	.word	0x08010375
 8010340:	08010387 	.word	0x08010387
 8010344:	08010399 	.word	0x08010399
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 8010348:	4b2a      	ldr	r3, [pc, #168]	; (80103f4 <make_route+0x29c>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	2b02      	cmp	r3, #2
 801034e:	d804      	bhi.n	801035a <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 8010350:	88bb      	ldrh	r3, [r7, #4]
 8010352:	4a26      	ldr	r2, [pc, #152]	; (80103ec <make_route+0x294>)
 8010354:	2188      	movs	r1, #136	; 0x88
 8010356:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 8010358:	e02c      	b.n	80103b4 <make_route+0x25c>
				route[i] = 0x77;
 801035a:	88bb      	ldrh	r3, [r7, #4]
 801035c:	4a23      	ldr	r2, [pc, #140]	; (80103ec <make_route+0x294>)
 801035e:	2177      	movs	r1, #119	; 0x77
 8010360:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 8010362:	88bb      	ldrh	r3, [r7, #4]
 8010364:	3301      	adds	r3, #1
 8010366:	4a21      	ldr	r2, [pc, #132]	; (80103ec <make_route+0x294>)
 8010368:	2177      	movs	r1, #119	; 0x77
 801036a:	54d1      	strb	r1, [r2, r3]
				i++;
 801036c:	88bb      	ldrh	r3, [r7, #4]
 801036e:	3301      	adds	r3, #1
 8010370:	80bb      	strh	r3, [r7, #4]
			break;
 8010372:	e01f      	b.n	80103b4 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 8010374:	2100      	movs	r1, #0
 8010376:	2001      	movs	r0, #1
 8010378:	f7ff fa66 	bl	800f848 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 801037c:	88bb      	ldrh	r3, [r7, #4]
 801037e:	4a1b      	ldr	r2, [pc, #108]	; (80103ec <make_route+0x294>)
 8010380:	2144      	movs	r1, #68	; 0x44
 8010382:	54d1      	strb	r1, [r2, r3]
			break;
 8010384:	e016      	b.n	80103b4 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 8010386:	2100      	movs	r1, #0
 8010388:	2002      	movs	r0, #2
 801038a:	f7ff fa5d 	bl	800f848 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 801038e:	88bb      	ldrh	r3, [r7, #4]
 8010390:	4a16      	ldr	r2, [pc, #88]	; (80103ec <make_route+0x294>)
 8010392:	2122      	movs	r1, #34	; 0x22
 8010394:	54d1      	strb	r1, [r2, r3]
			break;
 8010396:	e00d      	b.n	80103b4 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 8010398:	2100      	movs	r1, #0
 801039a:	20ff      	movs	r0, #255	; 0xff
 801039c:	f7ff fa54 	bl	800f848 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 80103a0:	88bb      	ldrh	r3, [r7, #4]
 80103a2:	4a12      	ldr	r2, [pc, #72]	; (80103ec <make_route+0x294>)
 80103a4:	2111      	movs	r1, #17
 80103a6:	54d1      	strb	r1, [r2, r3]
			break;
 80103a8:	e004      	b.n	80103b4 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 80103aa:	88bb      	ldrh	r3, [r7, #4]
 80103ac:	4a0f      	ldr	r2, [pc, #60]	; (80103ec <make_route+0x294>)
 80103ae:	2100      	movs	r1, #0
 80103b0:	54d1      	strb	r1, [r2, r3]
			break;
 80103b2:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 80103b4:	88bb      	ldrh	r3, [r7, #4]
 80103b6:	3301      	adds	r3, #1
 80103b8:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 80103ba:	79ba      	ldrb	r2, [r7, #6]
 80103bc:	79fb      	ldrb	r3, [r7, #7]
 80103be:	490c      	ldr	r1, [pc, #48]	; (80103f0 <make_route+0x298>)
 80103c0:	0112      	lsls	r2, r2, #4
 80103c2:	4413      	add	r3, r2
 80103c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f47f aef8 	bne.w	80101be <make_route+0x66>
	goal_x = x;
 80103ce:	4a0c      	ldr	r2, [pc, #48]	; (8010400 <make_route+0x2a8>)
 80103d0:	79fb      	ldrb	r3, [r7, #7]
 80103d2:	7013      	strb	r3, [r2, #0]
	goal_y = y;
 80103d4:	4a0b      	ldr	r2, [pc, #44]	; (8010404 <make_route+0x2ac>)
 80103d6:	79bb      	ldrb	r3, [r7, #6]
 80103d8:	7013      	strb	r3, [r2, #0]
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 80103da:	4a03      	ldr	r2, [pc, #12]	; (80103e8 <make_route+0x290>)
 80103dc:	783b      	ldrb	r3, [r7, #0]
 80103de:	7093      	strb	r3, [r2, #2]
}
 80103e0:	bf00      	nop
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	20000c0c 	.word	0x20000c0c
 80103ec:	20000c54 	.word	0x20000c54
 80103f0:	20000d60 	.word	0x20000d60
 80103f4:	20000457 	.word	0x20000457
 80103f8:	200001ac 	.word	0x200001ac
 80103fc:	20000f68 	.word	0x20000f68
 8010400:	20000bb0 	.word	0x20000bb0
 8010404:	20000b4c 	.word	0x20000b4c

08010408 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 801040e:	2300      	movs	r3, #0
 8010410:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010412:	2300      	movs	r3, #0
 8010414:	73bb      	strb	r3, [r7, #14]
 8010416:	e014      	b.n	8010442 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
 801041c:	e00b      	b.n	8010436 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 801041e:	7bba      	ldrb	r2, [r7, #14]
 8010420:	7bfb      	ldrb	r3, [r7, #15]
 8010422:	49a0      	ldr	r1, [pc, #640]	; (80106a4 <find_pregoal+0x29c>)
 8010424:	0112      	lsls	r2, r2, #4
 8010426:	4413      	add	r3, r2
 8010428:	f240 32e7 	movw	r2, #999	; 0x3e7
 801042c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010430:	7bfb      	ldrb	r3, [r7, #15]
 8010432:	3301      	adds	r3, #1
 8010434:	73fb      	strb	r3, [r7, #15]
 8010436:	7bfb      	ldrb	r3, [r7, #15]
 8010438:	2b0f      	cmp	r3, #15
 801043a:	d9f0      	bls.n	801041e <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 801043c:	7bbb      	ldrb	r3, [r7, #14]
 801043e:	3301      	adds	r3, #1
 8010440:	73bb      	strb	r3, [r7, #14]
 8010442:	7bbb      	ldrb	r3, [r7, #14]
 8010444:	2b0f      	cmp	r3, #15
 8010446:	d9e7      	bls.n	8010418 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 8010448:	4a97      	ldr	r2, [pc, #604]	; (80106a8 <find_pregoal+0x2a0>)
 801044a:	8813      	ldrh	r3, [r2, #0]
 801044c:	f36f 0382 	bfc	r3, #2, #1
 8010450:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 8010452:	4b96      	ldr	r3, [pc, #600]	; (80106ac <find_pregoal+0x2a4>)
 8010454:	785b      	ldrb	r3, [r3, #1]
 8010456:	b2db      	uxtb	r3, r3
 8010458:	4618      	mov	r0, r3
 801045a:	4b94      	ldr	r3, [pc, #592]	; (80106ac <find_pregoal+0x2a4>)
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	b2db      	uxtb	r3, r3
 8010460:	4619      	mov	r1, r3
 8010462:	4a90      	ldr	r2, [pc, #576]	; (80106a4 <find_pregoal+0x29c>)
 8010464:	0103      	lsls	r3, r0, #4
 8010466:	440b      	add	r3, r1
 8010468:	2100      	movs	r1, #0
 801046a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 801046e:	4b90      	ldr	r3, [pc, #576]	; (80106b0 <find_pregoal+0x2a8>)
 8010470:	2200      	movs	r2, #0
 8010472:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010474:	2303      	movs	r3, #3
 8010476:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 8010478:	2301      	movs	r3, #1
 801047a:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 801047c:	2300      	movs	r3, #0
 801047e:	73bb      	strb	r3, [r7, #14]
 8010480:	e180      	b.n	8010784 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010482:	2300      	movs	r3, #0
 8010484:	73fb      	strb	r3, [r7, #15]
 8010486:	e173      	b.n	8010770 <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010488:	7bba      	ldrb	r2, [r7, #14]
 801048a:	7bfb      	ldrb	r3, [r7, #15]
 801048c:	4985      	ldr	r1, [pc, #532]	; (80106a4 <find_pregoal+0x29c>)
 801048e:	0112      	lsls	r2, r2, #4
 8010490:	4413      	add	r3, r2
 8010492:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010496:	4b86      	ldr	r3, [pc, #536]	; (80106b0 <find_pregoal+0x2a8>)
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	f040 8165 	bne.w	801076a <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 80104a0:	7bba      	ldrb	r2, [r7, #14]
 80104a2:	7bfb      	ldrb	r3, [r7, #15]
 80104a4:	4983      	ldr	r1, [pc, #524]	; (80106b4 <find_pregoal+0x2ac>)
 80104a6:	0112      	lsls	r2, r2, #4
 80104a8:	440a      	add	r2, r1
 80104aa:	4413      	add	r3, r2
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 80104b0:	78fb      	ldrb	r3, [r7, #3]
 80104b2:	f003 0308 	and.w	r3, r3, #8
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d14d      	bne.n	8010556 <find_pregoal+0x14e>
 80104ba:	7bbb      	ldrb	r3, [r7, #14]
 80104bc:	2b0f      	cmp	r3, #15
 80104be:	d04a      	beq.n	8010556 <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	7bfb      	ldrb	r3, [r7, #15]
 80104c6:	4977      	ldr	r1, [pc, #476]	; (80106a4 <find_pregoal+0x29c>)
 80104c8:	0112      	lsls	r2, r2, #4
 80104ca:	4413      	add	r3, r2
 80104cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d13e      	bne.n	8010556 <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80104d8:	7bba      	ldrb	r2, [r7, #14]
 80104da:	7bfb      	ldrb	r3, [r7, #15]
 80104dc:	4971      	ldr	r1, [pc, #452]	; (80106a4 <find_pregoal+0x29c>)
 80104de:	0112      	lsls	r2, r2, #4
 80104e0:	4413      	add	r3, r2
 80104e2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	b299      	uxth	r1, r3
 80104ea:	7bbb      	ldrb	r3, [r7, #14]
 80104ec:	1c5a      	adds	r2, r3, #1
 80104ee:	7bfb      	ldrb	r3, [r7, #15]
 80104f0:	4401      	add	r1, r0
 80104f2:	b288      	uxth	r0, r1
 80104f4:	496b      	ldr	r1, [pc, #428]	; (80106a4 <find_pregoal+0x29c>)
 80104f6:	0112      	lsls	r2, r2, #4
 80104f8:	4413      	add	r3, r2
 80104fa:	4602      	mov	r2, r0
 80104fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010500:	7bbb      	ldrb	r3, [r7, #14]
 8010502:	1c5a      	adds	r2, r3, #1
 8010504:	7bfb      	ldrb	r3, [r7, #15]
 8010506:	496b      	ldr	r1, [pc, #428]	; (80106b4 <find_pregoal+0x2ac>)
 8010508:	0112      	lsls	r2, r2, #4
 801050a:	440a      	add	r2, r1
 801050c:	4413      	add	r3, r2
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	011b      	lsls	r3, r3, #4
 8010512:	b2da      	uxtb	r2, r3
 8010514:	7bbb      	ldrb	r3, [r7, #14]
 8010516:	1c59      	adds	r1, r3, #1
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	4866      	ldr	r0, [pc, #408]	; (80106b4 <find_pregoal+0x2ac>)
 801051c:	0109      	lsls	r1, r1, #4
 801051e:	4401      	add	r1, r0
 8010520:	440b      	add	r3, r1
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010528:	429a      	cmp	r2, r3
 801052a:	d014      	beq.n	8010556 <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 801052c:	2301      	movs	r3, #1
 801052e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 8010530:	7bbb      	ldrb	r3, [r7, #14]
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	7bfb      	ldrb	r3, [r7, #15]
 8010536:	495b      	ldr	r1, [pc, #364]	; (80106a4 <find_pregoal+0x29c>)
 8010538:	0112      	lsls	r2, r2, #4
 801053a:	4413      	add	r3, r2
 801053c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010540:	4b5d      	ldr	r3, [pc, #372]	; (80106b8 <find_pregoal+0x2b0>)
 8010542:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010544:	4a5d      	ldr	r2, [pc, #372]	; (80106bc <find_pregoal+0x2b4>)
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 801054a:	7bbb      	ldrb	r3, [r7, #14]
 801054c:	3301      	adds	r3, #1
 801054e:	b2da      	uxtb	r2, r3
 8010550:	4b5b      	ldr	r3, [pc, #364]	; (80106c0 <find_pregoal+0x2b8>)
 8010552:	701a      	strb	r2, [r3, #0]
								break;
 8010554:	e110      	b.n	8010778 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8010556:	78fb      	ldrb	r3, [r7, #3]
 8010558:	f003 0304 	and.w	r3, r3, #4
 801055c:	2b00      	cmp	r3, #0
 801055e:	d14d      	bne.n	80105fc <find_pregoal+0x1f4>
 8010560:	7bfb      	ldrb	r3, [r7, #15]
 8010562:	2b0f      	cmp	r3, #15
 8010564:	d04a      	beq.n	80105fc <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8010566:	7bba      	ldrb	r2, [r7, #14]
 8010568:	7bfb      	ldrb	r3, [r7, #15]
 801056a:	3301      	adds	r3, #1
 801056c:	494d      	ldr	r1, [pc, #308]	; (80106a4 <find_pregoal+0x29c>)
 801056e:	0112      	lsls	r2, r2, #4
 8010570:	4413      	add	r3, r2
 8010572:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010576:	f240 32e7 	movw	r2, #999	; 0x3e7
 801057a:	4293      	cmp	r3, r2
 801057c:	d13e      	bne.n	80105fc <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801057e:	7bba      	ldrb	r2, [r7, #14]
 8010580:	7bfb      	ldrb	r3, [r7, #15]
 8010582:	4948      	ldr	r1, [pc, #288]	; (80106a4 <find_pregoal+0x29c>)
 8010584:	0112      	lsls	r2, r2, #4
 8010586:	4413      	add	r3, r2
 8010588:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	b299      	uxth	r1, r3
 8010590:	7bba      	ldrb	r2, [r7, #14]
 8010592:	7bfb      	ldrb	r3, [r7, #15]
 8010594:	3301      	adds	r3, #1
 8010596:	4401      	add	r1, r0
 8010598:	b288      	uxth	r0, r1
 801059a:	4942      	ldr	r1, [pc, #264]	; (80106a4 <find_pregoal+0x29c>)
 801059c:	0112      	lsls	r2, r2, #4
 801059e:	4413      	add	r3, r2
 80105a0:	4602      	mov	r2, r0
 80105a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 80105a6:	7bba      	ldrb	r2, [r7, #14]
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	3301      	adds	r3, #1
 80105ac:	4941      	ldr	r1, [pc, #260]	; (80106b4 <find_pregoal+0x2ac>)
 80105ae:	0112      	lsls	r2, r2, #4
 80105b0:	440a      	add	r2, r1
 80105b2:	4413      	add	r3, r2
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	011b      	lsls	r3, r3, #4
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	7bb9      	ldrb	r1, [r7, #14]
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
 80105be:	3301      	adds	r3, #1
 80105c0:	483c      	ldr	r0, [pc, #240]	; (80106b4 <find_pregoal+0x2ac>)
 80105c2:	0109      	lsls	r1, r1, #4
 80105c4:	4401      	add	r1, r0
 80105c6:	440b      	add	r3, r1
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d014      	beq.n	80105fc <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 80105d2:	2301      	movs	r3, #1
 80105d4:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 80105d6:	7bba      	ldrb	r2, [r7, #14]
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
 80105da:	3301      	adds	r3, #1
 80105dc:	4931      	ldr	r1, [pc, #196]	; (80106a4 <find_pregoal+0x29c>)
 80105de:	0112      	lsls	r2, r2, #4
 80105e0:	4413      	add	r3, r2
 80105e2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80105e6:	4b34      	ldr	r3, [pc, #208]	; (80106b8 <find_pregoal+0x2b0>)
 80105e8:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 80105ea:	7bfb      	ldrb	r3, [r7, #15]
 80105ec:	3301      	adds	r3, #1
 80105ee:	b2da      	uxtb	r2, r3
 80105f0:	4b32      	ldr	r3, [pc, #200]	; (80106bc <find_pregoal+0x2b4>)
 80105f2:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 80105f4:	4a32      	ldr	r2, [pc, #200]	; (80106c0 <find_pregoal+0x2b8>)
 80105f6:	7bbb      	ldrb	r3, [r7, #14]
 80105f8:	7013      	strb	r3, [r2, #0]
								break;
 80105fa:	e0bd      	b.n	8010778 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 80105fc:	78fb      	ldrb	r3, [r7, #3]
 80105fe:	f003 0302 	and.w	r3, r3, #2
 8010602:	2b00      	cmp	r3, #0
 8010604:	d15e      	bne.n	80106c4 <find_pregoal+0x2bc>
 8010606:	7bbb      	ldrb	r3, [r7, #14]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d05b      	beq.n	80106c4 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 801060c:	7bbb      	ldrb	r3, [r7, #14]
 801060e:	1e5a      	subs	r2, r3, #1
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	4924      	ldr	r1, [pc, #144]	; (80106a4 <find_pregoal+0x29c>)
 8010614:	0112      	lsls	r2, r2, #4
 8010616:	4413      	add	r3, r2
 8010618:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801061c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010620:	4293      	cmp	r3, r2
 8010622:	d14f      	bne.n	80106c4 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010624:	7bba      	ldrb	r2, [r7, #14]
 8010626:	7bfb      	ldrb	r3, [r7, #15]
 8010628:	491e      	ldr	r1, [pc, #120]	; (80106a4 <find_pregoal+0x29c>)
 801062a:	0112      	lsls	r2, r2, #4
 801062c:	4413      	add	r3, r2
 801062e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	b299      	uxth	r1, r3
 8010636:	7bbb      	ldrb	r3, [r7, #14]
 8010638:	1e5a      	subs	r2, r3, #1
 801063a:	7bfb      	ldrb	r3, [r7, #15]
 801063c:	4401      	add	r1, r0
 801063e:	b288      	uxth	r0, r1
 8010640:	4918      	ldr	r1, [pc, #96]	; (80106a4 <find_pregoal+0x29c>)
 8010642:	0112      	lsls	r2, r2, #4
 8010644:	4413      	add	r3, r2
 8010646:	4602      	mov	r2, r0
 8010648:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 801064c:	7bbb      	ldrb	r3, [r7, #14]
 801064e:	1e5a      	subs	r2, r3, #1
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	4918      	ldr	r1, [pc, #96]	; (80106b4 <find_pregoal+0x2ac>)
 8010654:	0112      	lsls	r2, r2, #4
 8010656:	440a      	add	r2, r1
 8010658:	4413      	add	r3, r2
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	011b      	lsls	r3, r3, #4
 801065e:	b2da      	uxtb	r2, r3
 8010660:	7bbb      	ldrb	r3, [r7, #14]
 8010662:	1e59      	subs	r1, r3, #1
 8010664:	7bfb      	ldrb	r3, [r7, #15]
 8010666:	4813      	ldr	r0, [pc, #76]	; (80106b4 <find_pregoal+0x2ac>)
 8010668:	0109      	lsls	r1, r1, #4
 801066a:	4401      	add	r1, r0
 801066c:	440b      	add	r3, r1
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010674:	429a      	cmp	r2, r3
 8010676:	d025      	beq.n	80106c4 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010678:	2301      	movs	r3, #1
 801067a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 801067c:	7bbb      	ldrb	r3, [r7, #14]
 801067e:	1e5a      	subs	r2, r3, #1
 8010680:	7bfb      	ldrb	r3, [r7, #15]
 8010682:	4908      	ldr	r1, [pc, #32]	; (80106a4 <find_pregoal+0x29c>)
 8010684:	0112      	lsls	r2, r2, #4
 8010686:	4413      	add	r3, r2
 8010688:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801068c:	4b0a      	ldr	r3, [pc, #40]	; (80106b8 <find_pregoal+0x2b0>)
 801068e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010690:	4a0a      	ldr	r2, [pc, #40]	; (80106bc <find_pregoal+0x2b4>)
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 8010696:	7bbb      	ldrb	r3, [r7, #14]
 8010698:	3b01      	subs	r3, #1
 801069a:	b2da      	uxtb	r2, r3
 801069c:	4b08      	ldr	r3, [pc, #32]	; (80106c0 <find_pregoal+0x2b8>)
 801069e:	701a      	strb	r2, [r3, #0]
								break;
 80106a0:	e06a      	b.n	8010778 <find_pregoal+0x370>
 80106a2:	bf00      	nop
 80106a4:	20000d60 	.word	0x20000d60
 80106a8:	20000f64 	.word	0x20000f64
 80106ac:	20000c0c 	.word	0x20000c0c
 80106b0:	2000034e 	.word	0x2000034e
 80106b4:	200001ac 	.word	0x200001ac
 80106b8:	20000c04 	.word	0x20000c04
 80106bc:	20000d5c 	.word	0x20000d5c
 80106c0:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 80106c4:	78fb      	ldrb	r3, [r7, #3]
 80106c6:	f003 0301 	and.w	r3, r3, #1
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d14d      	bne.n	801076a <find_pregoal+0x362>
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d04a      	beq.n	801076a <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 80106d4:	7bba      	ldrb	r2, [r7, #14]
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	3b01      	subs	r3, #1
 80106da:	493e      	ldr	r1, [pc, #248]	; (80107d4 <find_pregoal+0x3cc>)
 80106dc:	0112      	lsls	r2, r2, #4
 80106de:	4413      	add	r3, r2
 80106e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d13e      	bne.n	801076a <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 80106ec:	7bba      	ldrb	r2, [r7, #14]
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
 80106f0:	4938      	ldr	r1, [pc, #224]	; (80107d4 <find_pregoal+0x3cc>)
 80106f2:	0112      	lsls	r2, r2, #4
 80106f4:	4413      	add	r3, r2
 80106f6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	b299      	uxth	r1, r3
 80106fe:	7bba      	ldrb	r2, [r7, #14]
 8010700:	7bfb      	ldrb	r3, [r7, #15]
 8010702:	3b01      	subs	r3, #1
 8010704:	4401      	add	r1, r0
 8010706:	b288      	uxth	r0, r1
 8010708:	4932      	ldr	r1, [pc, #200]	; (80107d4 <find_pregoal+0x3cc>)
 801070a:	0112      	lsls	r2, r2, #4
 801070c:	4413      	add	r3, r2
 801070e:	4602      	mov	r2, r0
 8010710:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010714:	7bba      	ldrb	r2, [r7, #14]
 8010716:	7bfb      	ldrb	r3, [r7, #15]
 8010718:	3b01      	subs	r3, #1
 801071a:	492f      	ldr	r1, [pc, #188]	; (80107d8 <find_pregoal+0x3d0>)
 801071c:	0112      	lsls	r2, r2, #4
 801071e:	440a      	add	r2, r1
 8010720:	4413      	add	r3, r2
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	011b      	lsls	r3, r3, #4
 8010726:	b2da      	uxtb	r2, r3
 8010728:	7bb9      	ldrb	r1, [r7, #14]
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	3b01      	subs	r3, #1
 801072e:	482a      	ldr	r0, [pc, #168]	; (80107d8 <find_pregoal+0x3d0>)
 8010730:	0109      	lsls	r1, r1, #4
 8010732:	4401      	add	r1, r0
 8010734:	440b      	add	r3, r1
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801073c:	429a      	cmp	r2, r3
 801073e:	d014      	beq.n	801076a <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010740:	2301      	movs	r3, #1
 8010742:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 8010744:	7bba      	ldrb	r2, [r7, #14]
 8010746:	7bfb      	ldrb	r3, [r7, #15]
 8010748:	3b01      	subs	r3, #1
 801074a:	4922      	ldr	r1, [pc, #136]	; (80107d4 <find_pregoal+0x3cc>)
 801074c:	0112      	lsls	r2, r2, #4
 801074e:	4413      	add	r3, r2
 8010750:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010754:	4b21      	ldr	r3, [pc, #132]	; (80107dc <find_pregoal+0x3d4>)
 8010756:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8010758:	7bfb      	ldrb	r3, [r7, #15]
 801075a:	3b01      	subs	r3, #1
 801075c:	b2da      	uxtb	r2, r3
 801075e:	4b20      	ldr	r3, [pc, #128]	; (80107e0 <find_pregoal+0x3d8>)
 8010760:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010762:	4a20      	ldr	r2, [pc, #128]	; (80107e4 <find_pregoal+0x3dc>)
 8010764:	7bbb      	ldrb	r3, [r7, #14]
 8010766:	7013      	strb	r3, [r2, #0]
								break;							}
 8010768:	e006      	b.n	8010778 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 801076a:	7bfb      	ldrb	r3, [r7, #15]
 801076c:	3301      	adds	r3, #1
 801076e:	73fb      	strb	r3, [r7, #15]
 8010770:	7bfb      	ldrb	r3, [r7, #15]
 8010772:	2b0f      	cmp	r3, #15
 8010774:	f67f ae88 	bls.w	8010488 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010778:	7b7b      	ldrb	r3, [r7, #13]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d107      	bne.n	801078e <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 801077e:	7bbb      	ldrb	r3, [r7, #14]
 8010780:	3301      	adds	r3, #1
 8010782:	73bb      	strb	r3, [r7, #14]
 8010784:	7bbb      	ldrb	r3, [r7, #14]
 8010786:	2b0f      	cmp	r3, #15
 8010788:	f67f ae7b 	bls.w	8010482 <find_pregoal+0x7a>
 801078c:	e000      	b.n	8010790 <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 801078e:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8010790:	4b15      	ldr	r3, [pc, #84]	; (80107e8 <find_pregoal+0x3e0>)
 8010792:	881b      	ldrh	r3, [r3, #0]
 8010794:	3301      	adds	r3, #1
 8010796:	b29a      	uxth	r2, r3
 8010798:	4b13      	ldr	r3, [pc, #76]	; (80107e8 <find_pregoal+0x3e0>)
 801079a:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 801079c:	4b12      	ldr	r3, [pc, #72]	; (80107e8 <find_pregoal+0x3e0>)
 801079e:	881b      	ldrh	r3, [r3, #0]
 80107a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80107a4:	d904      	bls.n	80107b0 <find_pregoal+0x3a8>
 80107a6:	4a11      	ldr	r2, [pc, #68]	; (80107ec <find_pregoal+0x3e4>)
 80107a8:	8813      	ldrh	r3, [r2, #0]
 80107aa:	f043 0304 	orr.w	r3, r3, #4
 80107ae:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 80107b0:	7b7b      	ldrb	r3, [r7, #13]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d107      	bne.n	80107c6 <find_pregoal+0x3be>
 80107b6:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <find_pregoal+0x3e4>)
 80107b8:	881b      	ldrh	r3, [r3, #0]
 80107ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	f47f ae5b 	bne.w	801047c <find_pregoal+0x74>
}
 80107c6:	bf00      	nop
 80107c8:	3714      	adds	r7, #20
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop
 80107d4:	20000d60 	.word	0x20000d60
 80107d8:	200001ac 	.word	0x200001ac
 80107dc:	20000c04 	.word	0x20000c04
 80107e0:	20000d5c 	.word	0x20000d5c
 80107e4:	200012a1 	.word	0x200012a1
 80107e8:	2000034e 	.word	0x2000034e
 80107ec:	20000f64 	.word	0x20000f64

080107f0 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 80107f6:	2300      	movs	r3, #0
 80107f8:	73bb      	strb	r3, [r7, #14]
 80107fa:	e014      	b.n	8010826 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 80107fc:	2300      	movs	r3, #0
 80107fe:	73fb      	strb	r3, [r7, #15]
 8010800:	e00b      	b.n	801081a <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010802:	7bba      	ldrb	r2, [r7, #14]
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	4986      	ldr	r1, [pc, #536]	; (8010a20 <make_smap2+0x230>)
 8010808:	0112      	lsls	r2, r2, #4
 801080a:	4413      	add	r3, r2
 801080c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010810:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010814:	7bfb      	ldrb	r3, [r7, #15]
 8010816:	3301      	adds	r3, #1
 8010818:	73fb      	strb	r3, [r7, #15]
 801081a:	7bfb      	ldrb	r3, [r7, #15]
 801081c:	2b0f      	cmp	r3, #15
 801081e:	d9f0      	bls.n	8010802 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010820:	7bbb      	ldrb	r3, [r7, #14]
 8010822:	3301      	adds	r3, #1
 8010824:	73bb      	strb	r3, [r7, #14]
 8010826:	7bbb      	ldrb	r3, [r7, #14]
 8010828:	2b0f      	cmp	r3, #15
 801082a:	d9e7      	bls.n	80107fc <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 801082c:	4b7d      	ldr	r3, [pc, #500]	; (8010a24 <make_smap2+0x234>)
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	4618      	mov	r0, r3
 8010832:	4b7d      	ldr	r3, [pc, #500]	; (8010a28 <make_smap2+0x238>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	4619      	mov	r1, r3
 8010838:	4a79      	ldr	r2, [pc, #484]	; (8010a20 <make_smap2+0x230>)
 801083a:	0103      	lsls	r3, r0, #4
 801083c:	440b      	add	r3, r1
 801083e:	2100      	movs	r1, #0
 8010840:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8010844:	4b79      	ldr	r3, [pc, #484]	; (8010a2c <make_smap2+0x23c>)
 8010846:	2200      	movs	r2, #0
 8010848:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 801084a:	2303      	movs	r3, #3
 801084c:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 801084e:	2305      	movs	r3, #5
 8010850:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010852:	2300      	movs	r3, #0
 8010854:	73bb      	strb	r3, [r7, #14]
 8010856:	e0c0      	b.n	80109da <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010858:	2300      	movs	r3, #0
 801085a:	73fb      	strb	r3, [r7, #15]
 801085c:	e0b6      	b.n	80109cc <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 801085e:	7bba      	ldrb	r2, [r7, #14]
 8010860:	7bfb      	ldrb	r3, [r7, #15]
 8010862:	496f      	ldr	r1, [pc, #444]	; (8010a20 <make_smap2+0x230>)
 8010864:	0112      	lsls	r2, r2, #4
 8010866:	4413      	add	r3, r2
 8010868:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801086c:	4b6f      	ldr	r3, [pc, #444]	; (8010a2c <make_smap2+0x23c>)
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	429a      	cmp	r2, r3
 8010872:	f040 80a8 	bne.w	80109c6 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8010876:	7bba      	ldrb	r2, [r7, #14]
 8010878:	7bfb      	ldrb	r3, [r7, #15]
 801087a:	496d      	ldr	r1, [pc, #436]	; (8010a30 <make_smap2+0x240>)
 801087c:	0112      	lsls	r2, r2, #4
 801087e:	440a      	add	r2, r1
 8010880:	4413      	add	r3, r2
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8010886:	78fb      	ldrb	r3, [r7, #3]
 8010888:	f003 0308 	and.w	r3, r3, #8
 801088c:	2b00      	cmp	r3, #0
 801088e:	d122      	bne.n	80108d6 <make_smap2+0xe6>
 8010890:	7bbb      	ldrb	r3, [r7, #14]
 8010892:	2b0f      	cmp	r3, #15
 8010894:	d01f      	beq.n	80108d6 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8010896:	7bbb      	ldrb	r3, [r7, #14]
 8010898:	1c5a      	adds	r2, r3, #1
 801089a:	7bfb      	ldrb	r3, [r7, #15]
 801089c:	4960      	ldr	r1, [pc, #384]	; (8010a20 <make_smap2+0x230>)
 801089e:	0112      	lsls	r2, r2, #4
 80108a0:	4413      	add	r3, r2
 80108a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80108aa:	4293      	cmp	r3, r2
 80108ac:	d113      	bne.n	80108d6 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80108ae:	7bba      	ldrb	r2, [r7, #14]
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	495b      	ldr	r1, [pc, #364]	; (8010a20 <make_smap2+0x230>)
 80108b4:	0112      	lsls	r2, r2, #4
 80108b6:	4413      	add	r3, r2
 80108b8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	b299      	uxth	r1, r3
 80108c0:	7bbb      	ldrb	r3, [r7, #14]
 80108c2:	1c5a      	adds	r2, r3, #1
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	4401      	add	r1, r0
 80108c8:	b288      	uxth	r0, r1
 80108ca:	4955      	ldr	r1, [pc, #340]	; (8010a20 <make_smap2+0x230>)
 80108cc:	0112      	lsls	r2, r2, #4
 80108ce:	4413      	add	r3, r2
 80108d0:	4602      	mov	r2, r0
 80108d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 80108d6:	78fb      	ldrb	r3, [r7, #3]
 80108d8:	f003 0304 	and.w	r3, r3, #4
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d122      	bne.n	8010926 <make_smap2+0x136>
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
 80108e2:	2b0f      	cmp	r3, #15
 80108e4:	d01f      	beq.n	8010926 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 80108e6:	7bba      	ldrb	r2, [r7, #14]
 80108e8:	7bfb      	ldrb	r3, [r7, #15]
 80108ea:	3301      	adds	r3, #1
 80108ec:	494c      	ldr	r1, [pc, #304]	; (8010a20 <make_smap2+0x230>)
 80108ee:	0112      	lsls	r2, r2, #4
 80108f0:	4413      	add	r3, r2
 80108f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d113      	bne.n	8010926 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80108fe:	7bba      	ldrb	r2, [r7, #14]
 8010900:	7bfb      	ldrb	r3, [r7, #15]
 8010902:	4947      	ldr	r1, [pc, #284]	; (8010a20 <make_smap2+0x230>)
 8010904:	0112      	lsls	r2, r2, #4
 8010906:	4413      	add	r3, r2
 8010908:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	b299      	uxth	r1, r3
 8010910:	7bba      	ldrb	r2, [r7, #14]
 8010912:	7bfb      	ldrb	r3, [r7, #15]
 8010914:	3301      	adds	r3, #1
 8010916:	4401      	add	r1, r0
 8010918:	b288      	uxth	r0, r1
 801091a:	4941      	ldr	r1, [pc, #260]	; (8010a20 <make_smap2+0x230>)
 801091c:	0112      	lsls	r2, r2, #4
 801091e:	4413      	add	r3, r2
 8010920:	4602      	mov	r2, r0
 8010922:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010926:	78fb      	ldrb	r3, [r7, #3]
 8010928:	f003 0302 	and.w	r3, r3, #2
 801092c:	2b00      	cmp	r3, #0
 801092e:	d122      	bne.n	8010976 <make_smap2+0x186>
 8010930:	7bbb      	ldrb	r3, [r7, #14]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d01f      	beq.n	8010976 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010936:	7bbb      	ldrb	r3, [r7, #14]
 8010938:	1e5a      	subs	r2, r3, #1
 801093a:	7bfb      	ldrb	r3, [r7, #15]
 801093c:	4938      	ldr	r1, [pc, #224]	; (8010a20 <make_smap2+0x230>)
 801093e:	0112      	lsls	r2, r2, #4
 8010940:	4413      	add	r3, r2
 8010942:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010946:	f240 32e7 	movw	r2, #999	; 0x3e7
 801094a:	4293      	cmp	r3, r2
 801094c:	d113      	bne.n	8010976 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801094e:	7bba      	ldrb	r2, [r7, #14]
 8010950:	7bfb      	ldrb	r3, [r7, #15]
 8010952:	4933      	ldr	r1, [pc, #204]	; (8010a20 <make_smap2+0x230>)
 8010954:	0112      	lsls	r2, r2, #4
 8010956:	4413      	add	r3, r2
 8010958:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	b299      	uxth	r1, r3
 8010960:	7bbb      	ldrb	r3, [r7, #14]
 8010962:	1e5a      	subs	r2, r3, #1
 8010964:	7bfb      	ldrb	r3, [r7, #15]
 8010966:	4401      	add	r1, r0
 8010968:	b288      	uxth	r0, r1
 801096a:	492d      	ldr	r1, [pc, #180]	; (8010a20 <make_smap2+0x230>)
 801096c:	0112      	lsls	r2, r2, #4
 801096e:	4413      	add	r3, r2
 8010970:	4602      	mov	r2, r0
 8010972:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8010976:	78fb      	ldrb	r3, [r7, #3]
 8010978:	f003 0301 	and.w	r3, r3, #1
 801097c:	2b00      	cmp	r3, #0
 801097e:	d122      	bne.n	80109c6 <make_smap2+0x1d6>
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d01f      	beq.n	80109c6 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8010986:	7bba      	ldrb	r2, [r7, #14]
 8010988:	7bfb      	ldrb	r3, [r7, #15]
 801098a:	3b01      	subs	r3, #1
 801098c:	4924      	ldr	r1, [pc, #144]	; (8010a20 <make_smap2+0x230>)
 801098e:	0112      	lsls	r2, r2, #4
 8010990:	4413      	add	r3, r2
 8010992:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010996:	f240 32e7 	movw	r2, #999	; 0x3e7
 801099a:	4293      	cmp	r3, r2
 801099c:	d113      	bne.n	80109c6 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 801099e:	7bba      	ldrb	r2, [r7, #14]
 80109a0:	7bfb      	ldrb	r3, [r7, #15]
 80109a2:	491f      	ldr	r1, [pc, #124]	; (8010a20 <make_smap2+0x230>)
 80109a4:	0112      	lsls	r2, r2, #4
 80109a6:	4413      	add	r3, r2
 80109a8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	b299      	uxth	r1, r3
 80109b0:	7bba      	ldrb	r2, [r7, #14]
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
 80109b4:	3b01      	subs	r3, #1
 80109b6:	4401      	add	r1, r0
 80109b8:	b288      	uxth	r0, r1
 80109ba:	4919      	ldr	r1, [pc, #100]	; (8010a20 <make_smap2+0x230>)
 80109bc:	0112      	lsls	r2, r2, #4
 80109be:	4413      	add	r3, r2
 80109c0:	4602      	mov	r2, r0
 80109c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80109c6:	7bfb      	ldrb	r3, [r7, #15]
 80109c8:	3301      	adds	r3, #1
 80109ca:	73fb      	strb	r3, [r7, #15]
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	2b0f      	cmp	r3, #15
 80109d0:	f67f af45 	bls.w	801085e <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80109d4:	7bbb      	ldrb	r3, [r7, #14]
 80109d6:	3301      	adds	r3, #1
 80109d8:	73bb      	strb	r3, [r7, #14]
 80109da:	7bbb      	ldrb	r3, [r7, #14]
 80109dc:	2b0f      	cmp	r3, #15
 80109de:	f67f af3b 	bls.w	8010858 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 80109e2:	4b12      	ldr	r3, [pc, #72]	; (8010a2c <make_smap2+0x23c>)
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	3301      	adds	r3, #1
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	4b10      	ldr	r3, [pc, #64]	; (8010a2c <make_smap2+0x23c>)
 80109ec:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 80109ee:	4b11      	ldr	r3, [pc, #68]	; (8010a34 <make_smap2+0x244>)
 80109f0:	785b      	ldrb	r3, [r3, #1]
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	4618      	mov	r0, r3
 80109f6:	4b0f      	ldr	r3, [pc, #60]	; (8010a34 <make_smap2+0x244>)
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	4619      	mov	r1, r3
 80109fe:	4a08      	ldr	r2, [pc, #32]	; (8010a20 <make_smap2+0x230>)
 8010a00:	0103      	lsls	r3, r0, #4
 8010a02:	440b      	add	r3, r1
 8010a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	f43f af20 	beq.w	8010852 <make_smap2+0x62>
}
 8010a12:	bf00      	nop
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	20000d60 	.word	0x20000d60
 8010a24:	200012a1 	.word	0x200012a1
 8010a28:	20000d5c 	.word	0x20000d5c
 8010a2c:	2000034e 	.word	0x2000034e
 8010a30:	200001ac 	.word	0x200001ac
 8010a34:	20000c0c 	.word	0x20000c0c

08010a38 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 8010a42:	2300      	movs	r3, #0
 8010a44:	607b      	str	r3, [r7, #4]
 8010a46:	e007      	b.n	8010a58 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 8010a48:	4a83      	ldr	r2, [pc, #524]	; (8010c58 <pass_route2+0x220>)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	3301      	adds	r3, #1
 8010a56:	607b      	str	r3, [r7, #4]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2bff      	cmp	r3, #255	; 0xff
 8010a5c:	ddf4      	ble.n	8010a48 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8010a5e:	2300      	movs	r3, #0
 8010a60:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8010a62:	2300      	movs	r3, #0
 8010a64:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8010a66:	2300      	movs	r3, #0
 8010a68:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8010a6a:	e0e8      	b.n	8010c3e <pass_route2+0x206>
		s = 0;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 8010a70:	4a7a      	ldr	r2, [pc, #488]	; (8010c5c <pass_route2+0x224>)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4413      	add	r3, r2
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	2b44      	cmp	r3, #68	; 0x44
 8010a7a:	d107      	bne.n	8010a8c <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 8010a7c:	78bb      	ldrb	r3, [r7, #2]
 8010a7e:	4a76      	ldr	r2, [pc, #472]	; (8010c58 <pass_route2+0x220>)
 8010a80:	21ff      	movs	r1, #255	; 0xff
 8010a82:	54d1      	strb	r1, [r2, r3]
			i++;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	3301      	adds	r3, #1
 8010a88:	607b      	str	r3, [r7, #4]
 8010a8a:	e0d5      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 8010a8c:	4a73      	ldr	r2, [pc, #460]	; (8010c5c <pass_route2+0x224>)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4413      	add	r3, r2
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	2b11      	cmp	r3, #17
 8010a96:	d107      	bne.n	8010aa8 <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 8010a98:	78bb      	ldrb	r3, [r7, #2]
 8010a9a:	4a6f      	ldr	r2, [pc, #444]	; (8010c58 <pass_route2+0x220>)
 8010a9c:	21fe      	movs	r1, #254	; 0xfe
 8010a9e:	54d1      	strb	r1, [r2, r3]
			i++;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	607b      	str	r3, [r7, #4]
 8010aa6:	e0c7      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010aa8:	4a6c      	ldr	r2, [pc, #432]	; (8010c5c <pass_route2+0x224>)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4413      	add	r3, r2
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b77      	cmp	r3, #119	; 0x77
 8010ab2:	d115      	bne.n	8010ae0 <pass_route2+0xa8>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	4a68      	ldr	r2, [pc, #416]	; (8010c5c <pass_route2+0x224>)
 8010aba:	5cd3      	ldrb	r3, [r2, r3]
 8010abc:	2b44      	cmp	r3, #68	; 0x44
 8010abe:	d10f      	bne.n	8010ae0 <pass_route2+0xa8>
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3302      	adds	r3, #2
 8010ac4:	4a65      	ldr	r2, [pc, #404]	; (8010c5c <pass_route2+0x224>)
 8010ac6:	5cd3      	ldrb	r3, [r2, r3]
 8010ac8:	2b77      	cmp	r3, #119	; 0x77
 8010aca:	d109      	bne.n	8010ae0 <pass_route2+0xa8>
			s_flag = 0;
 8010acc:	2300      	movs	r3, #0
 8010ace:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 8010ad0:	78bb      	ldrb	r3, [r7, #2]
 8010ad2:	4a61      	ldr	r2, [pc, #388]	; (8010c58 <pass_route2+0x220>)
 8010ad4:	21fd      	movs	r1, #253	; 0xfd
 8010ad6:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	3303      	adds	r3, #3
 8010adc:	607b      	str	r3, [r7, #4]
 8010ade:	e0ab      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8010ae0:	4a5e      	ldr	r2, [pc, #376]	; (8010c5c <pass_route2+0x224>)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b77      	cmp	r3, #119	; 0x77
 8010aea:	d115      	bne.n	8010b18 <pass_route2+0xe0>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	3301      	adds	r3, #1
 8010af0:	4a5a      	ldr	r2, [pc, #360]	; (8010c5c <pass_route2+0x224>)
 8010af2:	5cd3      	ldrb	r3, [r2, r3]
 8010af4:	2b11      	cmp	r3, #17
 8010af6:	d10f      	bne.n	8010b18 <pass_route2+0xe0>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3302      	adds	r3, #2
 8010afc:	4a57      	ldr	r2, [pc, #348]	; (8010c5c <pass_route2+0x224>)
 8010afe:	5cd3      	ldrb	r3, [r2, r3]
 8010b00:	2b77      	cmp	r3, #119	; 0x77
 8010b02:	d109      	bne.n	8010b18 <pass_route2+0xe0>
			s_flag = 0;
 8010b04:	2300      	movs	r3, #0
 8010b06:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 8010b08:	78bb      	ldrb	r3, [r7, #2]
 8010b0a:	4a53      	ldr	r2, [pc, #332]	; (8010c58 <pass_route2+0x220>)
 8010b0c:	21fc      	movs	r1, #252	; 0xfc
 8010b0e:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3303      	adds	r3, #3
 8010b14:	607b      	str	r3, [r7, #4]
 8010b16:	e08f      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8010b18:	4a50      	ldr	r2, [pc, #320]	; (8010c5c <pass_route2+0x224>)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	2b77      	cmp	r3, #119	; 0x77
 8010b22:	d11b      	bne.n	8010b5c <pass_route2+0x124>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	3301      	adds	r3, #1
 8010b28:	4a4c      	ldr	r2, [pc, #304]	; (8010c5c <pass_route2+0x224>)
 8010b2a:	5cd3      	ldrb	r3, [r2, r3]
 8010b2c:	2b44      	cmp	r3, #68	; 0x44
 8010b2e:	d115      	bne.n	8010b5c <pass_route2+0x124>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	3302      	adds	r3, #2
 8010b34:	4a49      	ldr	r2, [pc, #292]	; (8010c5c <pass_route2+0x224>)
 8010b36:	5cd3      	ldrb	r3, [r2, r3]
 8010b38:	2b44      	cmp	r3, #68	; 0x44
 8010b3a:	d10f      	bne.n	8010b5c <pass_route2+0x124>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	3303      	adds	r3, #3
 8010b40:	4a46      	ldr	r2, [pc, #280]	; (8010c5c <pass_route2+0x224>)
 8010b42:	5cd3      	ldrb	r3, [r2, r3]
 8010b44:	2b77      	cmp	r3, #119	; 0x77
 8010b46:	d109      	bne.n	8010b5c <pass_route2+0x124>
			s_flag = 0;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 8010b4c:	78bb      	ldrb	r3, [r7, #2]
 8010b4e:	4a42      	ldr	r2, [pc, #264]	; (8010c58 <pass_route2+0x220>)
 8010b50:	21fb      	movs	r1, #251	; 0xfb
 8010b52:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3304      	adds	r3, #4
 8010b58:	607b      	str	r3, [r7, #4]
 8010b5a:	e06d      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8010b5c:	4a3f      	ldr	r2, [pc, #252]	; (8010c5c <pass_route2+0x224>)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	2b77      	cmp	r3, #119	; 0x77
 8010b66:	d11b      	bne.n	8010ba0 <pass_route2+0x168>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	4a3b      	ldr	r2, [pc, #236]	; (8010c5c <pass_route2+0x224>)
 8010b6e:	5cd3      	ldrb	r3, [r2, r3]
 8010b70:	2b11      	cmp	r3, #17
 8010b72:	d115      	bne.n	8010ba0 <pass_route2+0x168>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3302      	adds	r3, #2
 8010b78:	4a38      	ldr	r2, [pc, #224]	; (8010c5c <pass_route2+0x224>)
 8010b7a:	5cd3      	ldrb	r3, [r2, r3]
 8010b7c:	2b11      	cmp	r3, #17
 8010b7e:	d10f      	bne.n	8010ba0 <pass_route2+0x168>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3303      	adds	r3, #3
 8010b84:	4a35      	ldr	r2, [pc, #212]	; (8010c5c <pass_route2+0x224>)
 8010b86:	5cd3      	ldrb	r3, [r2, r3]
 8010b88:	2b77      	cmp	r3, #119	; 0x77
 8010b8a:	d109      	bne.n	8010ba0 <pass_route2+0x168>
			s_flag = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 8010b90:	78bb      	ldrb	r3, [r7, #2]
 8010b92:	4a31      	ldr	r2, [pc, #196]	; (8010c58 <pass_route2+0x220>)
 8010b94:	21fa      	movs	r1, #250	; 0xfa
 8010b96:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	607b      	str	r3, [r7, #4]
 8010b9e:	e04b      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 8010ba0:	4a2e      	ldr	r2, [pc, #184]	; (8010c5c <pass_route2+0x224>)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	2bff      	cmp	r3, #255	; 0xff
 8010baa:	d107      	bne.n	8010bbc <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8010bac:	78bb      	ldrb	r3, [r7, #2]
 8010bae:	4a2a      	ldr	r2, [pc, #168]	; (8010c58 <pass_route2+0x220>)
 8010bb0:	218e      	movs	r1, #142	; 0x8e
 8010bb2:	54d1      	strb	r1, [r2, r3]
			i++;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	607b      	str	r3, [r7, #4]
 8010bba:	e03d      	b.n	8010c38 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8010bbc:	4a27      	ldr	r2, [pc, #156]	; (8010c5c <pass_route2+0x224>)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2b77      	cmp	r3, #119	; 0x77
 8010bc6:	d137      	bne.n	8010c38 <pass_route2+0x200>
			if(s_flag){
 8010bc8:	78fb      	ldrb	r3, [r7, #3]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d012      	beq.n	8010bf4 <pass_route2+0x1bc>
				pass[p-1]++;
 8010bce:	78bb      	ldrb	r3, [r7, #2]
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	4a21      	ldr	r2, [pc, #132]	; (8010c58 <pass_route2+0x220>)
 8010bd4:	56d2      	ldrsb	r2, [r2, r3]
 8010bd6:	b2d2      	uxtb	r2, r2
 8010bd8:	3201      	adds	r2, #1
 8010bda:	b2d2      	uxtb	r2, r2
 8010bdc:	b251      	sxtb	r1, r2
 8010bde:	4a1e      	ldr	r2, [pc, #120]	; (8010c58 <pass_route2+0x220>)
 8010be0:	54d1      	strb	r1, [r2, r3]
				p--;
 8010be2:	78bb      	ldrb	r3, [r7, #2]
 8010be4:	3b01      	subs	r3, #1
 8010be6:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8010be8:	2300      	movs	r3, #0
 8010bea:	70fb      	strb	r3, [r7, #3]
				i++;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	607b      	str	r3, [r7, #4]
 8010bf2:	e021      	b.n	8010c38 <pass_route2+0x200>
			}else{
				s++;
 8010bf4:	787b      	ldrb	r3, [r7, #1]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 8010bfa:	78bb      	ldrb	r3, [r7, #2]
 8010bfc:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010c00:	4a15      	ldr	r2, [pc, #84]	; (8010c58 <pass_route2+0x220>)
 8010c02:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8010c04:	e00c      	b.n	8010c20 <pass_route2+0x1e8>
					s_flag = 1;
 8010c06:	2301      	movs	r3, #1
 8010c08:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 8010c0a:	78bb      	ldrb	r3, [r7, #2]
 8010c0c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010c10:	4a11      	ldr	r2, [pc, #68]	; (8010c58 <pass_route2+0x220>)
 8010c12:	54d1      	strb	r1, [r2, r3]
					i++;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	3301      	adds	r3, #1
 8010c18:	607b      	str	r3, [r7, #4]
					s++;
 8010c1a:	787b      	ldrb	r3, [r7, #1]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	3301      	adds	r3, #1
 8010c24:	4a0d      	ldr	r2, [pc, #52]	; (8010c5c <pass_route2+0x224>)
 8010c26:	5cd3      	ldrb	r3, [r2, r3]
 8010c28:	2b77      	cmp	r3, #119	; 0x77
 8010c2a:	d0ec      	beq.n	8010c06 <pass_route2+0x1ce>
				}
				if(!s_flag){
 8010c2c:	78fb      	ldrb	r3, [r7, #3]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d102      	bne.n	8010c38 <pass_route2+0x200>
					i++;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	3301      	adds	r3, #1
 8010c36:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8010c38:	78bb      	ldrb	r3, [r7, #2]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	3b01      	subs	r3, #1
 8010c42:	4a06      	ldr	r2, [pc, #24]	; (8010c5c <pass_route2+0x224>)
 8010c44:	5cd3      	ldrb	r3, [r2, r3]
 8010c46:	2bff      	cmp	r3, #255	; 0xff
 8010c48:	f47f af10 	bne.w	8010a6c <pass_route2+0x34>
	}
}
 8010c4c:	bf00      	nop
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	20000350 	.word	0x20000350
 8010c5c:	20000c54 	.word	0x20000c54

08010c60 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 8010c6a:	4a98      	ldr	r2, [pc, #608]	; (8010ecc <pass_route3+0x26c>)
 8010c6c:	8813      	ldrh	r3, [r2, #0]
 8010c6e:	f36f 03c3 	bfc	r3, #3, #1
 8010c72:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 8010c74:	2300      	movs	r3, #0
 8010c76:	607b      	str	r3, [r7, #4]
 8010c78:	e007      	b.n	8010c8a <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 8010c7a:	4a95      	ldr	r2, [pc, #596]	; (8010ed0 <pass_route3+0x270>)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	4413      	add	r3, r2
 8010c80:	2200      	movs	r2, #0
 8010c82:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	3301      	adds	r3, #1
 8010c88:	607b      	str	r3, [r7, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2bff      	cmp	r3, #255	; 0xff
 8010c8e:	ddf4      	ble.n	8010c7a <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8010c90:	2300      	movs	r3, #0
 8010c92:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8010c98:	2300      	movs	r3, #0
 8010c9a:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8010c9c:	e324      	b.n	80112e8 <pass_route3+0x688>
		s = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010ca2:	4a8c      	ldr	r2, [pc, #560]	; (8010ed4 <pass_route3+0x274>)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	2b77      	cmp	r3, #119	; 0x77
 8010cac:	d11b      	bne.n	8010ce6 <pass_route3+0x86>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	4a88      	ldr	r2, [pc, #544]	; (8010ed4 <pass_route3+0x274>)
 8010cb4:	5cd3      	ldrb	r3, [r2, r3]
 8010cb6:	2b44      	cmp	r3, #68	; 0x44
 8010cb8:	d115      	bne.n	8010ce6 <pass_route3+0x86>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	3302      	adds	r3, #2
 8010cbe:	4a85      	ldr	r2, [pc, #532]	; (8010ed4 <pass_route3+0x274>)
 8010cc0:	5cd3      	ldrb	r3, [r2, r3]
 8010cc2:	2b77      	cmp	r3, #119	; 0x77
 8010cc4:	d10f      	bne.n	8010ce6 <pass_route3+0x86>
			s_flag = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 8010cca:	78bb      	ldrb	r3, [r7, #2]
 8010ccc:	4a80      	ldr	r2, [pc, #512]	; (8010ed0 <pass_route3+0x270>)
 8010cce:	21fd      	movs	r1, #253	; 0xfd
 8010cd0:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d102      	bne.n	8010cde <pass_route3+0x7e>
				start_mode = 2;
 8010cd8:	4b7f      	ldr	r3, [pc, #508]	; (8010ed8 <pass_route3+0x278>)
 8010cda:	2202      	movs	r2, #2
 8010cdc:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	3303      	adds	r3, #3
 8010ce2:	607b      	str	r3, [r7, #4]
 8010ce4:	e2fd      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8010ce6:	4a7b      	ldr	r2, [pc, #492]	; (8010ed4 <pass_route3+0x274>)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4413      	add	r3, r2
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	2b77      	cmp	r3, #119	; 0x77
 8010cf0:	d11b      	bne.n	8010d2a <pass_route3+0xca>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	4a77      	ldr	r2, [pc, #476]	; (8010ed4 <pass_route3+0x274>)
 8010cf8:	5cd3      	ldrb	r3, [r2, r3]
 8010cfa:	2b11      	cmp	r3, #17
 8010cfc:	d115      	bne.n	8010d2a <pass_route3+0xca>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	3302      	adds	r3, #2
 8010d02:	4a74      	ldr	r2, [pc, #464]	; (8010ed4 <pass_route3+0x274>)
 8010d04:	5cd3      	ldrb	r3, [r2, r3]
 8010d06:	2b77      	cmp	r3, #119	; 0x77
 8010d08:	d10f      	bne.n	8010d2a <pass_route3+0xca>
			s_flag = 0;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 8010d0e:	78bb      	ldrb	r3, [r7, #2]
 8010d10:	4a6f      	ldr	r2, [pc, #444]	; (8010ed0 <pass_route3+0x270>)
 8010d12:	21fc      	movs	r1, #252	; 0xfc
 8010d14:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d102      	bne.n	8010d22 <pass_route3+0xc2>
				start_mode = 2;
 8010d1c:	4b6e      	ldr	r3, [pc, #440]	; (8010ed8 <pass_route3+0x278>)
 8010d1e:	2202      	movs	r2, #2
 8010d20:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	3303      	adds	r3, #3
 8010d26:	607b      	str	r3, [r7, #4]
 8010d28:	e2db      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8010d2a:	4a6a      	ldr	r2, [pc, #424]	; (8010ed4 <pass_route3+0x274>)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4413      	add	r3, r2
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b77      	cmp	r3, #119	; 0x77
 8010d34:	d11b      	bne.n	8010d6e <pass_route3+0x10e>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	4a66      	ldr	r2, [pc, #408]	; (8010ed4 <pass_route3+0x274>)
 8010d3c:	5cd3      	ldrb	r3, [r2, r3]
 8010d3e:	2b44      	cmp	r3, #68	; 0x44
 8010d40:	d115      	bne.n	8010d6e <pass_route3+0x10e>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	3302      	adds	r3, #2
 8010d46:	4a63      	ldr	r2, [pc, #396]	; (8010ed4 <pass_route3+0x274>)
 8010d48:	5cd3      	ldrb	r3, [r2, r3]
 8010d4a:	2b44      	cmp	r3, #68	; 0x44
 8010d4c:	d10f      	bne.n	8010d6e <pass_route3+0x10e>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	3303      	adds	r3, #3
 8010d52:	4a60      	ldr	r2, [pc, #384]	; (8010ed4 <pass_route3+0x274>)
 8010d54:	5cd3      	ldrb	r3, [r2, r3]
 8010d56:	2b77      	cmp	r3, #119	; 0x77
 8010d58:	d109      	bne.n	8010d6e <pass_route3+0x10e>
			s_flag = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 8010d5e:	78bb      	ldrb	r3, [r7, #2]
 8010d60:	4a5b      	ldr	r2, [pc, #364]	; (8010ed0 <pass_route3+0x270>)
 8010d62:	21fb      	movs	r1, #251	; 0xfb
 8010d64:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	3304      	adds	r3, #4
 8010d6a:	607b      	str	r3, [r7, #4]
 8010d6c:	e2b9      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8010d6e:	4a59      	ldr	r2, [pc, #356]	; (8010ed4 <pass_route3+0x274>)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4413      	add	r3, r2
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	2b77      	cmp	r3, #119	; 0x77
 8010d78:	d11b      	bne.n	8010db2 <pass_route3+0x152>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	4a55      	ldr	r2, [pc, #340]	; (8010ed4 <pass_route3+0x274>)
 8010d80:	5cd3      	ldrb	r3, [r2, r3]
 8010d82:	2b11      	cmp	r3, #17
 8010d84:	d115      	bne.n	8010db2 <pass_route3+0x152>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	3302      	adds	r3, #2
 8010d8a:	4a52      	ldr	r2, [pc, #328]	; (8010ed4 <pass_route3+0x274>)
 8010d8c:	5cd3      	ldrb	r3, [r2, r3]
 8010d8e:	2b11      	cmp	r3, #17
 8010d90:	d10f      	bne.n	8010db2 <pass_route3+0x152>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	3303      	adds	r3, #3
 8010d96:	4a4f      	ldr	r2, [pc, #316]	; (8010ed4 <pass_route3+0x274>)
 8010d98:	5cd3      	ldrb	r3, [r2, r3]
 8010d9a:	2b77      	cmp	r3, #119	; 0x77
 8010d9c:	d109      	bne.n	8010db2 <pass_route3+0x152>
			s_flag = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 8010da2:	78bb      	ldrb	r3, [r7, #2]
 8010da4:	4a4a      	ldr	r2, [pc, #296]	; (8010ed0 <pass_route3+0x270>)
 8010da6:	21fa      	movs	r1, #250	; 0xfa
 8010da8:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	3304      	adds	r3, #4
 8010dae:	607b      	str	r3, [r7, #4]
 8010db0:	e297      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8010db2:	4a48      	ldr	r2, [pc, #288]	; (8010ed4 <pass_route3+0x274>)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4413      	add	r3, r2
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	2b77      	cmp	r3, #119	; 0x77
 8010dbc:	d120      	bne.n	8010e00 <pass_route3+0x1a0>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	4a44      	ldr	r2, [pc, #272]	; (8010ed4 <pass_route3+0x274>)
 8010dc4:	5cd3      	ldrb	r3, [r2, r3]
 8010dc6:	2b44      	cmp	r3, #68	; 0x44
 8010dc8:	d11a      	bne.n	8010e00 <pass_route3+0x1a0>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3302      	adds	r3, #2
 8010dce:	4a41      	ldr	r2, [pc, #260]	; (8010ed4 <pass_route3+0x274>)
 8010dd0:	5cd3      	ldrb	r3, [r2, r3]
 8010dd2:	2b11      	cmp	r3, #17
 8010dd4:	d114      	bne.n	8010e00 <pass_route3+0x1a0>
			s_flag = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 8010dda:	78bb      	ldrb	r3, [r7, #2]
 8010ddc:	4a3c      	ldr	r2, [pc, #240]	; (8010ed0 <pass_route3+0x270>)
 8010dde:	21f9      	movs	r1, #249	; 0xf9
 8010de0:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010de2:	4a3a      	ldr	r2, [pc, #232]	; (8010ecc <pass_route3+0x26c>)
 8010de4:	8813      	ldrh	r3, [r2, #0]
 8010de6:	f043 0308 	orr.w	r3, r3, #8
 8010dea:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d102      	bne.n	8010df8 <pass_route3+0x198>
				start_mode = 2;
 8010df2:	4b39      	ldr	r3, [pc, #228]	; (8010ed8 <pass_route3+0x278>)
 8010df4:	2202      	movs	r2, #2
 8010df6:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3302      	adds	r3, #2
 8010dfc:	607b      	str	r3, [r7, #4]
 8010dfe:	e270      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 8010e00:	4b32      	ldr	r3, [pc, #200]	; (8010ecc <pass_route3+0x26c>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d11a      	bne.n	8010e44 <pass_route3+0x1e4>
 8010e0e:	4a31      	ldr	r2, [pc, #196]	; (8010ed4 <pass_route3+0x274>)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4413      	add	r3, r2
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	2b44      	cmp	r3, #68	; 0x44
 8010e18:	d114      	bne.n	8010e44 <pass_route3+0x1e4>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	4a2d      	ldr	r2, [pc, #180]	; (8010ed4 <pass_route3+0x274>)
 8010e20:	5cd3      	ldrb	r3, [r2, r3]
 8010e22:	2b77      	cmp	r3, #119	; 0x77
 8010e24:	d10e      	bne.n	8010e44 <pass_route3+0x1e4>
			s_flag = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 8010e2a:	78bb      	ldrb	r3, [r7, #2]
 8010e2c:	4a28      	ldr	r2, [pc, #160]	; (8010ed0 <pass_route3+0x270>)
 8010e2e:	21f9      	movs	r1, #249	; 0xf9
 8010e30:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8010e32:	4a26      	ldr	r2, [pc, #152]	; (8010ecc <pass_route3+0x26c>)
 8010e34:	8813      	ldrh	r3, [r2, #0]
 8010e36:	f36f 03c3 	bfc	r3, #3, #1
 8010e3a:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3302      	adds	r3, #2
 8010e40:	607b      	str	r3, [r7, #4]
 8010e42:	e24e      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8010e44:	4a23      	ldr	r2, [pc, #140]	; (8010ed4 <pass_route3+0x274>)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4413      	add	r3, r2
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	2b77      	cmp	r3, #119	; 0x77
 8010e4e:	d11a      	bne.n	8010e86 <pass_route3+0x226>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	3301      	adds	r3, #1
 8010e54:	4a1f      	ldr	r2, [pc, #124]	; (8010ed4 <pass_route3+0x274>)
 8010e56:	5cd3      	ldrb	r3, [r2, r3]
 8010e58:	2b11      	cmp	r3, #17
 8010e5a:	d114      	bne.n	8010e86 <pass_route3+0x226>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	3302      	adds	r3, #2
 8010e60:	4a1c      	ldr	r2, [pc, #112]	; (8010ed4 <pass_route3+0x274>)
 8010e62:	5cd3      	ldrb	r3, [r2, r3]
 8010e64:	2b44      	cmp	r3, #68	; 0x44
 8010e66:	d10e      	bne.n	8010e86 <pass_route3+0x226>
			s_flag = 0;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8010e6c:	78bb      	ldrb	r3, [r7, #2]
 8010e6e:	4a18      	ldr	r2, [pc, #96]	; (8010ed0 <pass_route3+0x270>)
 8010e70:	21f8      	movs	r1, #248	; 0xf8
 8010e72:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010e74:	4a15      	ldr	r2, [pc, #84]	; (8010ecc <pass_route3+0x26c>)
 8010e76:	8813      	ldrh	r3, [r2, #0]
 8010e78:	f043 0308 	orr.w	r3, r3, #8
 8010e7c:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	3302      	adds	r3, #2
 8010e82:	607b      	str	r3, [r7, #4]
 8010e84:	e22d      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8010e86:	4b11      	ldr	r3, [pc, #68]	; (8010ecc <pass_route3+0x26c>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d123      	bne.n	8010edc <pass_route3+0x27c>
 8010e94:	4a0f      	ldr	r2, [pc, #60]	; (8010ed4 <pass_route3+0x274>)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4413      	add	r3, r2
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	2b11      	cmp	r3, #17
 8010e9e:	d11d      	bne.n	8010edc <pass_route3+0x27c>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	4a0b      	ldr	r2, [pc, #44]	; (8010ed4 <pass_route3+0x274>)
 8010ea6:	5cd3      	ldrb	r3, [r2, r3]
 8010ea8:	2b77      	cmp	r3, #119	; 0x77
 8010eaa:	d117      	bne.n	8010edc <pass_route3+0x27c>
			s_flag = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 8010eb0:	78bb      	ldrb	r3, [r7, #2]
 8010eb2:	4a07      	ldr	r2, [pc, #28]	; (8010ed0 <pass_route3+0x270>)
 8010eb4:	21f8      	movs	r1, #248	; 0xf8
 8010eb6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8010eb8:	4a04      	ldr	r2, [pc, #16]	; (8010ecc <pass_route3+0x26c>)
 8010eba:	8813      	ldrh	r3, [r2, #0]
 8010ebc:	f36f 03c3 	bfc	r3, #3, #1
 8010ec0:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	3302      	adds	r3, #2
 8010ec6:	607b      	str	r3, [r7, #4]
 8010ec8:	e20b      	b.n	80112e2 <pass_route3+0x682>
 8010eca:	bf00      	nop
 8010ecc:	20000f64 	.word	0x20000f64
 8010ed0:	20000350 	.word	0x20000350
 8010ed4:	20000c54 	.word	0x20000c54
 8010ed8:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8010edc:	4b99      	ldr	r3, [pc, #612]	; (8011144 <pass_route3+0x4e4>)
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d120      	bne.n	8010f2c <pass_route3+0x2cc>
 8010eea:	4a97      	ldr	r2, [pc, #604]	; (8011148 <pass_route3+0x4e8>)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4413      	add	r3, r2
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	2b44      	cmp	r3, #68	; 0x44
 8010ef4:	d11a      	bne.n	8010f2c <pass_route3+0x2cc>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3301      	adds	r3, #1
 8010efa:	4a93      	ldr	r2, [pc, #588]	; (8011148 <pass_route3+0x4e8>)
 8010efc:	5cd3      	ldrb	r3, [r2, r3]
 8010efe:	2b44      	cmp	r3, #68	; 0x44
 8010f00:	d114      	bne.n	8010f2c <pass_route3+0x2cc>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	3302      	adds	r3, #2
 8010f06:	4a90      	ldr	r2, [pc, #576]	; (8011148 <pass_route3+0x4e8>)
 8010f08:	5cd3      	ldrb	r3, [r2, r3]
 8010f0a:	2b11      	cmp	r3, #17
 8010f0c:	d10e      	bne.n	8010f2c <pass_route3+0x2cc>
			s_flag = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 8010f12:	78bb      	ldrb	r3, [r7, #2]
 8010f14:	4a8d      	ldr	r2, [pc, #564]	; (801114c <pass_route3+0x4ec>)
 8010f16:	21f7      	movs	r1, #247	; 0xf7
 8010f18:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010f1a:	4a8a      	ldr	r2, [pc, #552]	; (8011144 <pass_route3+0x4e4>)
 8010f1c:	8813      	ldrh	r3, [r2, #0]
 8010f1e:	f043 0308 	orr.w	r3, r3, #8
 8010f22:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3302      	adds	r3, #2
 8010f28:	607b      	str	r3, [r7, #4]
 8010f2a:	e1da      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8010f2c:	4b85      	ldr	r3, [pc, #532]	; (8011144 <pass_route3+0x4e4>)
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d120      	bne.n	8010f7c <pass_route3+0x31c>
 8010f3a:	4a83      	ldr	r2, [pc, #524]	; (8011148 <pass_route3+0x4e8>)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4413      	add	r3, r2
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	2b11      	cmp	r3, #17
 8010f44:	d11a      	bne.n	8010f7c <pass_route3+0x31c>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	4a7f      	ldr	r2, [pc, #508]	; (8011148 <pass_route3+0x4e8>)
 8010f4c:	5cd3      	ldrb	r3, [r2, r3]
 8010f4e:	2b11      	cmp	r3, #17
 8010f50:	d114      	bne.n	8010f7c <pass_route3+0x31c>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	3302      	adds	r3, #2
 8010f56:	4a7c      	ldr	r2, [pc, #496]	; (8011148 <pass_route3+0x4e8>)
 8010f58:	5cd3      	ldrb	r3, [r2, r3]
 8010f5a:	2b44      	cmp	r3, #68	; 0x44
 8010f5c:	d10e      	bne.n	8010f7c <pass_route3+0x31c>
			s_flag = 0;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 8010f62:	78bb      	ldrb	r3, [r7, #2]
 8010f64:	4a79      	ldr	r2, [pc, #484]	; (801114c <pass_route3+0x4ec>)
 8010f66:	21f6      	movs	r1, #246	; 0xf6
 8010f68:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010f6a:	4a76      	ldr	r2, [pc, #472]	; (8011144 <pass_route3+0x4e4>)
 8010f6c:	8813      	ldrh	r3, [r2, #0]
 8010f6e:	f043 0308 	orr.w	r3, r3, #8
 8010f72:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3302      	adds	r3, #2
 8010f78:	607b      	str	r3, [r7, #4]
 8010f7a:	e1b2      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8010f7c:	4a72      	ldr	r2, [pc, #456]	; (8011148 <pass_route3+0x4e8>)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	4413      	add	r3, r2
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	2b77      	cmp	r3, #119	; 0x77
 8010f86:	d126      	bne.n	8010fd6 <pass_route3+0x376>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	4a6e      	ldr	r2, [pc, #440]	; (8011148 <pass_route3+0x4e8>)
 8010f8e:	5cd3      	ldrb	r3, [r2, r3]
 8010f90:	2b44      	cmp	r3, #68	; 0x44
 8010f92:	d120      	bne.n	8010fd6 <pass_route3+0x376>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	3302      	adds	r3, #2
 8010f98:	4a6b      	ldr	r2, [pc, #428]	; (8011148 <pass_route3+0x4e8>)
 8010f9a:	5cd3      	ldrb	r3, [r2, r3]
 8010f9c:	2b44      	cmp	r3, #68	; 0x44
 8010f9e:	d11a      	bne.n	8010fd6 <pass_route3+0x376>
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	3303      	adds	r3, #3
 8010fa4:	4a68      	ldr	r2, [pc, #416]	; (8011148 <pass_route3+0x4e8>)
 8010fa6:	5cd3      	ldrb	r3, [r2, r3]
 8010fa8:	2b11      	cmp	r3, #17
 8010faa:	d114      	bne.n	8010fd6 <pass_route3+0x376>
			s_flag = 0;
 8010fac:	2300      	movs	r3, #0
 8010fae:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8010fb0:	78bb      	ldrb	r3, [r7, #2]
 8010fb2:	4a66      	ldr	r2, [pc, #408]	; (801114c <pass_route3+0x4ec>)
 8010fb4:	21f5      	movs	r1, #245	; 0xf5
 8010fb6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010fb8:	4a62      	ldr	r2, [pc, #392]	; (8011144 <pass_route3+0x4e4>)
 8010fba:	8813      	ldrh	r3, [r2, #0]
 8010fbc:	f043 0308 	orr.w	r3, r3, #8
 8010fc0:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d102      	bne.n	8010fce <pass_route3+0x36e>
				start_mode = 2;
 8010fc8:	4b61      	ldr	r3, [pc, #388]	; (8011150 <pass_route3+0x4f0>)
 8010fca:	2202      	movs	r2, #2
 8010fcc:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	3303      	adds	r3, #3
 8010fd2:	607b      	str	r3, [r7, #4]
 8010fd4:	e185      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010fd6:	4b5b      	ldr	r3, [pc, #364]	; (8011144 <pass_route3+0x4e4>)
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d120      	bne.n	8011026 <pass_route3+0x3c6>
 8010fe4:	4a58      	ldr	r2, [pc, #352]	; (8011148 <pass_route3+0x4e8>)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4413      	add	r3, r2
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	2b44      	cmp	r3, #68	; 0x44
 8010fee:	d11a      	bne.n	8011026 <pass_route3+0x3c6>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	4a54      	ldr	r2, [pc, #336]	; (8011148 <pass_route3+0x4e8>)
 8010ff6:	5cd3      	ldrb	r3, [r2, r3]
 8010ff8:	2b44      	cmp	r3, #68	; 0x44
 8010ffa:	d114      	bne.n	8011026 <pass_route3+0x3c6>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	3302      	adds	r3, #2
 8011000:	4a51      	ldr	r2, [pc, #324]	; (8011148 <pass_route3+0x4e8>)
 8011002:	5cd3      	ldrb	r3, [r2, r3]
 8011004:	2b77      	cmp	r3, #119	; 0x77
 8011006:	d10e      	bne.n	8011026 <pass_route3+0x3c6>
			s_flag = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 801100c:	78bb      	ldrb	r3, [r7, #2]
 801100e:	4a4f      	ldr	r2, [pc, #316]	; (801114c <pass_route3+0x4ec>)
 8011010:	21f5      	movs	r1, #245	; 0xf5
 8011012:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011014:	4a4b      	ldr	r2, [pc, #300]	; (8011144 <pass_route3+0x4e4>)
 8011016:	8813      	ldrh	r3, [r2, #0]
 8011018:	f36f 03c3 	bfc	r3, #3, #1
 801101c:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	3303      	adds	r3, #3
 8011022:	607b      	str	r3, [r7, #4]
 8011024:	e15d      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 8011026:	4a48      	ldr	r2, [pc, #288]	; (8011148 <pass_route3+0x4e8>)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	4413      	add	r3, r2
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	2b77      	cmp	r3, #119	; 0x77
 8011030:	d120      	bne.n	8011074 <pass_route3+0x414>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	3301      	adds	r3, #1
 8011036:	4a44      	ldr	r2, [pc, #272]	; (8011148 <pass_route3+0x4e8>)
 8011038:	5cd3      	ldrb	r3, [r2, r3]
 801103a:	2b11      	cmp	r3, #17
 801103c:	d11a      	bne.n	8011074 <pass_route3+0x414>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	3302      	adds	r3, #2
 8011042:	4a41      	ldr	r2, [pc, #260]	; (8011148 <pass_route3+0x4e8>)
 8011044:	5cd3      	ldrb	r3, [r2, r3]
 8011046:	2b11      	cmp	r3, #17
 8011048:	d114      	bne.n	8011074 <pass_route3+0x414>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3303      	adds	r3, #3
 801104e:	4a3e      	ldr	r2, [pc, #248]	; (8011148 <pass_route3+0x4e8>)
 8011050:	5cd3      	ldrb	r3, [r2, r3]
 8011052:	2b44      	cmp	r3, #68	; 0x44
 8011054:	d10e      	bne.n	8011074 <pass_route3+0x414>
			s_flag = 0;
 8011056:	2300      	movs	r3, #0
 8011058:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 801105a:	78bb      	ldrb	r3, [r7, #2]
 801105c:	4a3b      	ldr	r2, [pc, #236]	; (801114c <pass_route3+0x4ec>)
 801105e:	21f4      	movs	r1, #244	; 0xf4
 8011060:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011062:	4a38      	ldr	r2, [pc, #224]	; (8011144 <pass_route3+0x4e4>)
 8011064:	8813      	ldrh	r3, [r2, #0]
 8011066:	f043 0308 	orr.w	r3, r3, #8
 801106a:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	3303      	adds	r3, #3
 8011070:	607b      	str	r3, [r7, #4]
 8011072:	e136      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011074:	4b33      	ldr	r3, [pc, #204]	; (8011144 <pass_route3+0x4e4>)
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801107c:	b2db      	uxtb	r3, r3
 801107e:	2b01      	cmp	r3, #1
 8011080:	d120      	bne.n	80110c4 <pass_route3+0x464>
 8011082:	4a31      	ldr	r2, [pc, #196]	; (8011148 <pass_route3+0x4e8>)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	4413      	add	r3, r2
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b11      	cmp	r3, #17
 801108c:	d11a      	bne.n	80110c4 <pass_route3+0x464>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	3301      	adds	r3, #1
 8011092:	4a2d      	ldr	r2, [pc, #180]	; (8011148 <pass_route3+0x4e8>)
 8011094:	5cd3      	ldrb	r3, [r2, r3]
 8011096:	2b11      	cmp	r3, #17
 8011098:	d114      	bne.n	80110c4 <pass_route3+0x464>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3302      	adds	r3, #2
 801109e:	4a2a      	ldr	r2, [pc, #168]	; (8011148 <pass_route3+0x4e8>)
 80110a0:	5cd3      	ldrb	r3, [r2, r3]
 80110a2:	2b77      	cmp	r3, #119	; 0x77
 80110a4:	d10e      	bne.n	80110c4 <pass_route3+0x464>
			s_flag = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 80110aa:	78bb      	ldrb	r3, [r7, #2]
 80110ac:	4a27      	ldr	r2, [pc, #156]	; (801114c <pass_route3+0x4ec>)
 80110ae:	21f4      	movs	r1, #244	; 0xf4
 80110b0:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80110b2:	4a24      	ldr	r2, [pc, #144]	; (8011144 <pass_route3+0x4e4>)
 80110b4:	8813      	ldrh	r3, [r2, #0]
 80110b6:	f36f 03c3 	bfc	r3, #3, #1
 80110ba:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	3303      	adds	r3, #3
 80110c0:	607b      	str	r3, [r7, #4]
 80110c2:	e10e      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0xff){
 80110c4:	4a20      	ldr	r2, [pc, #128]	; (8011148 <pass_route3+0x4e8>)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4413      	add	r3, r2
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	2bff      	cmp	r3, #255	; 0xff
 80110ce:	d16a      	bne.n	80111a6 <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 80110d0:	4b1c      	ldr	r3, [pc, #112]	; (8011144 <pass_route3+0x4e4>)
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d15b      	bne.n	8011196 <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 80110de:	78bb      	ldrb	r3, [r7, #2]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	4a1a      	ldr	r2, [pc, #104]	; (801114c <pass_route3+0x4ec>)
 80110e4:	56d3      	ldrsb	r3, [r2, r3]
 80110e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ea:	d111      	bne.n	8011110 <pass_route3+0x4b0>
 80110ec:	78bb      	ldrb	r3, [r7, #2]
 80110ee:	3b02      	subs	r3, #2
 80110f0:	4a16      	ldr	r2, [pc, #88]	; (801114c <pass_route3+0x4ec>)
 80110f2:	56d3      	ldrsb	r3, [r2, r3]
 80110f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f8:	d10a      	bne.n	8011110 <pass_route3+0x4b0>
					pass[p-2] = -15;
 80110fa:	78bb      	ldrb	r3, [r7, #2]
 80110fc:	3b02      	subs	r3, #2
 80110fe:	4a13      	ldr	r2, [pc, #76]	; (801114c <pass_route3+0x4ec>)
 8011100:	21f1      	movs	r1, #241	; 0xf1
 8011102:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011104:	78bb      	ldrb	r3, [r7, #2]
 8011106:	3b01      	subs	r3, #1
 8011108:	4a10      	ldr	r2, [pc, #64]	; (801114c <pass_route3+0x4ec>)
 801110a:	218e      	movs	r1, #142	; 0x8e
 801110c:	54d1      	strb	r1, [r2, r3]
 801110e:	e042      	b.n	8011196 <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 8011110:	78bb      	ldrb	r3, [r7, #2]
 8011112:	3b01      	subs	r3, #1
 8011114:	4a0d      	ldr	r2, [pc, #52]	; (801114c <pass_route3+0x4ec>)
 8011116:	56d3      	ldrsb	r3, [r2, r3]
 8011118:	f113 0f02 	cmn.w	r3, #2
 801111c:	d11a      	bne.n	8011154 <pass_route3+0x4f4>
 801111e:	78bb      	ldrb	r3, [r7, #2]
 8011120:	3b02      	subs	r3, #2
 8011122:	4a0a      	ldr	r2, [pc, #40]	; (801114c <pass_route3+0x4ec>)
 8011124:	56d3      	ldrsb	r3, [r2, r3]
 8011126:	f113 0f02 	cmn.w	r3, #2
 801112a:	d113      	bne.n	8011154 <pass_route3+0x4f4>
					pass[p-2] = -16;
 801112c:	78bb      	ldrb	r3, [r7, #2]
 801112e:	3b02      	subs	r3, #2
 8011130:	4a06      	ldr	r2, [pc, #24]	; (801114c <pass_route3+0x4ec>)
 8011132:	21f0      	movs	r1, #240	; 0xf0
 8011134:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 8011136:	78bb      	ldrb	r3, [r7, #2]
 8011138:	3b01      	subs	r3, #1
 801113a:	4a04      	ldr	r2, [pc, #16]	; (801114c <pass_route3+0x4ec>)
 801113c:	218e      	movs	r1, #142	; 0x8e
 801113e:	54d1      	strb	r1, [r2, r3]
 8011140:	e029      	b.n	8011196 <pass_route3+0x536>
 8011142:	bf00      	nop
 8011144:	20000f64 	.word	0x20000f64
 8011148:	20000c54 	.word	0x20000c54
 801114c:	20000350 	.word	0x20000350
 8011150:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 8011154:	78bb      	ldrb	r3, [r7, #2]
 8011156:	3b01      	subs	r3, #1
 8011158:	4a6a      	ldr	r2, [pc, #424]	; (8011304 <pass_route3+0x6a4>)
 801115a:	56d3      	ldrsb	r3, [r2, r3]
 801115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011160:	d109      	bne.n	8011176 <pass_route3+0x516>
					pass[p-1] = -13;
 8011162:	78bb      	ldrb	r3, [r7, #2]
 8011164:	3b01      	subs	r3, #1
 8011166:	4a67      	ldr	r2, [pc, #412]	; (8011304 <pass_route3+0x6a4>)
 8011168:	21f3      	movs	r1, #243	; 0xf3
 801116a:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 801116c:	78bb      	ldrb	r3, [r7, #2]
 801116e:	4a65      	ldr	r2, [pc, #404]	; (8011304 <pass_route3+0x6a4>)
 8011170:	218e      	movs	r1, #142	; 0x8e
 8011172:	54d1      	strb	r1, [r2, r3]
 8011174:	e00f      	b.n	8011196 <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 8011176:	78bb      	ldrb	r3, [r7, #2]
 8011178:	3b01      	subs	r3, #1
 801117a:	4a62      	ldr	r2, [pc, #392]	; (8011304 <pass_route3+0x6a4>)
 801117c:	56d3      	ldrsb	r3, [r2, r3]
 801117e:	f113 0f02 	cmn.w	r3, #2
 8011182:	d108      	bne.n	8011196 <pass_route3+0x536>
					pass[p-1] = -14;
 8011184:	78bb      	ldrb	r3, [r7, #2]
 8011186:	3b01      	subs	r3, #1
 8011188:	4a5e      	ldr	r2, [pc, #376]	; (8011304 <pass_route3+0x6a4>)
 801118a:	21f2      	movs	r1, #242	; 0xf2
 801118c:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 801118e:	78bb      	ldrb	r3, [r7, #2]
 8011190:	4a5c      	ldr	r2, [pc, #368]	; (8011304 <pass_route3+0x6a4>)
 8011192:	218e      	movs	r1, #142	; 0x8e
 8011194:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 8011196:	78bb      	ldrb	r3, [r7, #2]
 8011198:	4a5a      	ldr	r2, [pc, #360]	; (8011304 <pass_route3+0x6a4>)
 801119a:	218e      	movs	r1, #142	; 0x8e
 801119c:	54d1      	strb	r1, [r2, r3]
			i++;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3301      	adds	r3, #1
 80111a2:	607b      	str	r3, [r7, #4]
 80111a4:	e09d      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 80111a6:	4b58      	ldr	r3, [pc, #352]	; (8011308 <pass_route3+0x6a8>)
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d11a      	bne.n	80111ea <pass_route3+0x58a>
 80111b4:	4a55      	ldr	r2, [pc, #340]	; (801130c <pass_route3+0x6ac>)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4413      	add	r3, r2
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b44      	cmp	r3, #68	; 0x44
 80111be:	d114      	bne.n	80111ea <pass_route3+0x58a>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	3301      	adds	r3, #1
 80111c4:	4a51      	ldr	r2, [pc, #324]	; (801130c <pass_route3+0x6ac>)
 80111c6:	5cd3      	ldrb	r3, [r2, r3]
 80111c8:	2b11      	cmp	r3, #17
 80111ca:	d10e      	bne.n	80111ea <pass_route3+0x58a>
			s_flag = 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 80111d0:	78bb      	ldrb	r3, [r7, #2]
 80111d2:	4a4c      	ldr	r2, [pc, #304]	; (8011304 <pass_route3+0x6a4>)
 80111d4:	2140      	movs	r1, #64	; 0x40
 80111d6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80111d8:	4a4b      	ldr	r2, [pc, #300]	; (8011308 <pass_route3+0x6a8>)
 80111da:	8813      	ldrh	r3, [r2, #0]
 80111dc:	f043 0308 	orr.w	r3, r3, #8
 80111e0:	8013      	strh	r3, [r2, #0]
			i++;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	3301      	adds	r3, #1
 80111e6:	607b      	str	r3, [r7, #4]
 80111e8:	e07b      	b.n	80112e2 <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 80111ea:	4b47      	ldr	r3, [pc, #284]	; (8011308 <pass_route3+0x6a8>)
 80111ec:	881b      	ldrh	r3, [r3, #0]
 80111ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d11a      	bne.n	801122e <pass_route3+0x5ce>
 80111f8:	4a44      	ldr	r2, [pc, #272]	; (801130c <pass_route3+0x6ac>)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4413      	add	r3, r2
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	2b11      	cmp	r3, #17
 8011202:	d114      	bne.n	801122e <pass_route3+0x5ce>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	3301      	adds	r3, #1
 8011208:	4a40      	ldr	r2, [pc, #256]	; (801130c <pass_route3+0x6ac>)
 801120a:	5cd3      	ldrb	r3, [r2, r3]
 801120c:	2b44      	cmp	r3, #68	; 0x44
 801120e:	d10e      	bne.n	801122e <pass_route3+0x5ce>
			s_flag = 0;
 8011210:	2300      	movs	r3, #0
 8011212:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011214:	78bb      	ldrb	r3, [r7, #2]
 8011216:	4a3b      	ldr	r2, [pc, #236]	; (8011304 <pass_route3+0x6a4>)
 8011218:	2140      	movs	r1, #64	; 0x40
 801121a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801121c:	4a3a      	ldr	r2, [pc, #232]	; (8011308 <pass_route3+0x6a8>)
 801121e:	8813      	ldrh	r3, [r2, #0]
 8011220:	f043 0308 	orr.w	r3, r3, #8
 8011224:	8013      	strh	r3, [r2, #0]
			i++;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3301      	adds	r3, #1
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	e059      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x44){
 801122e:	4a37      	ldr	r2, [pc, #220]	; (801130c <pass_route3+0x6ac>)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4413      	add	r3, r2
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	2b44      	cmp	r3, #68	; 0x44
 8011238:	d107      	bne.n	801124a <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 801123a:	78bb      	ldrb	r3, [r7, #2]
 801123c:	4a31      	ldr	r2, [pc, #196]	; (8011304 <pass_route3+0x6a4>)
 801123e:	21ff      	movs	r1, #255	; 0xff
 8011240:	54d1      	strb	r1, [r2, r3]
			i++;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	3301      	adds	r3, #1
 8011246:	607b      	str	r3, [r7, #4]
 8011248:	e04b      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x11){
 801124a:	4a30      	ldr	r2, [pc, #192]	; (801130c <pass_route3+0x6ac>)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	4413      	add	r3, r2
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	2b11      	cmp	r3, #17
 8011254:	d107      	bne.n	8011266 <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 8011256:	78bb      	ldrb	r3, [r7, #2]
 8011258:	4a2a      	ldr	r2, [pc, #168]	; (8011304 <pass_route3+0x6a4>)
 801125a:	21fe      	movs	r1, #254	; 0xfe
 801125c:	54d1      	strb	r1, [r2, r3]
			i++;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	3301      	adds	r3, #1
 8011262:	607b      	str	r3, [r7, #4]
 8011264:	e03d      	b.n	80112e2 <pass_route3+0x682>
		}else if(route[i] == 0x77){
 8011266:	4a29      	ldr	r2, [pc, #164]	; (801130c <pass_route3+0x6ac>)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4413      	add	r3, r2
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	2b77      	cmp	r3, #119	; 0x77
 8011270:	d137      	bne.n	80112e2 <pass_route3+0x682>
			if(s_flag){
 8011272:	78fb      	ldrb	r3, [r7, #3]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d012      	beq.n	801129e <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 8011278:	78bb      	ldrb	r3, [r7, #2]
 801127a:	3b01      	subs	r3, #1
 801127c:	4a21      	ldr	r2, [pc, #132]	; (8011304 <pass_route3+0x6a4>)
 801127e:	56d2      	ldrsb	r2, [r2, r3]
 8011280:	b2d2      	uxtb	r2, r2
 8011282:	3201      	adds	r2, #1
 8011284:	b2d2      	uxtb	r2, r2
 8011286:	b251      	sxtb	r1, r2
 8011288:	4a1e      	ldr	r2, [pc, #120]	; (8011304 <pass_route3+0x6a4>)
 801128a:	54d1      	strb	r1, [r2, r3]
				p--;
 801128c:	78bb      	ldrb	r3, [r7, #2]
 801128e:	3b01      	subs	r3, #1
 8011290:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8011292:	2300      	movs	r3, #0
 8011294:	70fb      	strb	r3, [r7, #3]
				i++;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	3301      	adds	r3, #1
 801129a:	607b      	str	r3, [r7, #4]
 801129c:	e021      	b.n	80112e2 <pass_route3+0x682>
			}else{
				s++;
 801129e:	787b      	ldrb	r3, [r7, #1]
 80112a0:	3301      	adds	r3, #1
 80112a2:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 80112a4:	78bb      	ldrb	r3, [r7, #2]
 80112a6:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112aa:	4a16      	ldr	r2, [pc, #88]	; (8011304 <pass_route3+0x6a4>)
 80112ac:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 80112ae:	e00c      	b.n	80112ca <pass_route3+0x66a>
					s_flag = 1;
 80112b0:	2301      	movs	r3, #1
 80112b2:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 80112b4:	78bb      	ldrb	r3, [r7, #2]
 80112b6:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112ba:	4a12      	ldr	r2, [pc, #72]	; (8011304 <pass_route3+0x6a4>)
 80112bc:	54d1      	strb	r1, [r2, r3]
					i++;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3301      	adds	r3, #1
 80112c2:	607b      	str	r3, [r7, #4]
					s++;
 80112c4:	787b      	ldrb	r3, [r7, #1]
 80112c6:	3301      	adds	r3, #1
 80112c8:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	3301      	adds	r3, #1
 80112ce:	4a0f      	ldr	r2, [pc, #60]	; (801130c <pass_route3+0x6ac>)
 80112d0:	5cd3      	ldrb	r3, [r2, r3]
 80112d2:	2b77      	cmp	r3, #119	; 0x77
 80112d4:	d0ec      	beq.n	80112b0 <pass_route3+0x650>
				}
				if(!s_flag){
 80112d6:	78fb      	ldrb	r3, [r7, #3]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d102      	bne.n	80112e2 <pass_route3+0x682>
					i++;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3301      	adds	r3, #1
 80112e0:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 80112e2:	78bb      	ldrb	r3, [r7, #2]
 80112e4:	3301      	adds	r3, #1
 80112e6:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	3b01      	subs	r3, #1
 80112ec:	4a07      	ldr	r2, [pc, #28]	; (801130c <pass_route3+0x6ac>)
 80112ee:	5cd3      	ldrb	r3, [r2, r3]
 80112f0:	2bff      	cmp	r3, #255	; 0xff
 80112f2:	f47f acd4 	bne.w	8010c9e <pass_route3+0x3e>
	}
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	20000350 	.word	0x20000350
 8011308:	20000f64 	.word	0x20000f64
 801130c:	20000c54 	.word	0x20000c54

08011310 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 8011316:	4818      	ldr	r0, [pc, #96]	; (8011378 <store_map_in_eeprom+0x68>)
 8011318:	f000 ff28 	bl	801216c <puts>
	eeprom_enable_write();
 801131c:	f7fa fd2a 	bl	800bd74 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 8011320:	4816      	ldr	r0, [pc, #88]	; (801137c <store_map_in_eeprom+0x6c>)
 8011322:	f000 ff23 	bl	801216c <puts>
	int i;
	for(i = 0; i < 16; i++){
 8011326:	2300      	movs	r3, #0
 8011328:	607b      	str	r3, [r7, #4]
 801132a:	e01b      	b.n	8011364 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 801132c:	2300      	movs	r3, #0
 801132e:	603b      	str	r3, [r7, #0]
 8011330:	e012      	b.n	8011358 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	011a      	lsls	r2, r3, #4
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	4413      	add	r3, r2
 801133a:	4618      	mov	r0, r3
 801133c:	4a10      	ldr	r2, [pc, #64]	; (8011380 <store_map_in_eeprom+0x70>)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	011b      	lsls	r3, r3, #4
 8011342:	441a      	add	r2, r3
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	4413      	add	r3, r2
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	b29b      	uxth	r3, r3
 801134c:	4619      	mov	r1, r3
 801134e:	f7fa fd3c 	bl	800bdca <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	3301      	adds	r3, #1
 8011356:	603b      	str	r3, [r7, #0]
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b0f      	cmp	r3, #15
 801135c:	dde9      	ble.n	8011332 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	3301      	adds	r3, #1
 8011362:	607b      	str	r3, [r7, #4]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b0f      	cmp	r3, #15
 8011368:	dde0      	ble.n	801132c <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 801136a:	f7fa fd27 	bl	800bdbc <eeprom_disable_write>
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	080136f4 	.word	0x080136f4
 801137c:	08013708 	.word	0x08013708
 8011380:	200001ac 	.word	0x200001ac

08011384 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 801138a:	2300      	movs	r3, #0
 801138c:	607b      	str	r3, [r7, #4]
 801138e:	e01c      	b.n	80113ca <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8011390:	2300      	movs	r3, #0
 8011392:	603b      	str	r3, [r7, #0]
 8011394:	e013      	b.n	80113be <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	011a      	lsls	r2, r3, #4
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	4413      	add	r3, r2
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fa fd30 	bl	800be04 <eeprom_read_halfword>
 80113a4:	4603      	mov	r3, r0
 80113a6:	b2d9      	uxtb	r1, r3
 80113a8:	4a0b      	ldr	r2, [pc, #44]	; (80113d8 <load_map_from_eeprom+0x54>)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	011b      	lsls	r3, r3, #4
 80113ae:	441a      	add	r2, r3
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	4413      	add	r3, r2
 80113b4:	460a      	mov	r2, r1
 80113b6:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	3301      	adds	r3, #1
 80113bc:	603b      	str	r3, [r7, #0]
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	2b0f      	cmp	r3, #15
 80113c2:	dde8      	ble.n	8011396 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	3301      	adds	r3, #1
 80113c8:	607b      	str	r3, [r7, #4]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b0f      	cmp	r3, #15
 80113ce:	dddf      	ble.n	8011390 <load_map_from_eeprom+0xc>
		}
	}
}
 80113d0:	bf00      	nop
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	200001ac 	.word	0x200001ac

080113dc <sensor_init>:

#include "global.h"


void sensor_init(void){
 80113dc:	b480      	push	{r7}
 80113de:	af00      	add	r7, sp, #0
	tp = 0;
 80113e0:	4b0e      	ldr	r3, [pc, #56]	; (801141c <sensor_init+0x40>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 80113e6:	4b0e      	ldr	r3, [pc, #56]	; (8011420 <sensor_init+0x44>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	4b0c      	ldr	r3, [pc, #48]	; (8011420 <sensor_init+0x44>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4a0c      	ldr	r2, [pc, #48]	; (8011424 <sensor_init+0x48>)
 80113f2:	6013      	str	r3, [r2, #0]
 80113f4:	4b0b      	ldr	r3, [pc, #44]	; (8011424 <sensor_init+0x48>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4a0b      	ldr	r2, [pc, #44]	; (8011428 <sensor_init+0x4c>)
 80113fa:	6013      	str	r3, [r2, #0]
 80113fc:	4b0a      	ldr	r3, [pc, #40]	; (8011428 <sensor_init+0x4c>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4a0a      	ldr	r2, [pc, #40]	; (801142c <sensor_init+0x50>)
 8011402:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8011404:	4b0a      	ldr	r3, [pc, #40]	; (8011430 <sensor_init+0x54>)
 8011406:	2200      	movs	r2, #0
 8011408:	801a      	strh	r2, [r3, #0]
 801140a:	4b09      	ldr	r3, [pc, #36]	; (8011430 <sensor_init+0x54>)
 801140c:	881a      	ldrh	r2, [r3, #0]
 801140e:	4b09      	ldr	r3, [pc, #36]	; (8011434 <sensor_init+0x58>)
 8011410:	801a      	strh	r2, [r3, #0]
}
 8011412:	bf00      	nop
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	200012a0 	.word	0x200012a0
 8011420:	20000d54 	.word	0x20000d54
 8011424:	20000c00 	.word	0x20000c00
 8011428:	20000f60 	.word	0x20000f60
 801142c:	20000afc 	.word	0x20000afc
 8011430:	200002c0 	.word	0x200002c0
 8011434:	2000034c 	.word	0x2000034c

08011438 <get_base>:


uint8_t get_base(){
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 801143e:	2301      	movs	r3, #1
 8011440:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 8011442:	4b08      	ldr	r3, [pc, #32]	; (8011464 <get_base+0x2c>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	b29a      	uxth	r2, r3
 8011448:	4b07      	ldr	r3, [pc, #28]	; (8011468 <get_base+0x30>)
 801144a:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 801144c:	4b07      	ldr	r3, [pc, #28]	; (801146c <get_base+0x34>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	b29a      	uxth	r2, r3
 8011452:	4b07      	ldr	r3, [pc, #28]	; (8011470 <get_base+0x38>)
 8011454:	801a      	strh	r2, [r3, #0]

	return res;											//
 8011456:	79fb      	ldrb	r3, [r7, #7]
}
 8011458:	4618      	mov	r0, r3
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	20000afc 	.word	0x20000afc
 8011468:	2000034c 	.word	0x2000034c
 801146c:	20000f60 	.word	0x20000f60
 8011470:	200002c0 	.word	0x200002c0

08011474 <get_wall_info>:


void get_wall_info(){
 8011474:	b480      	push	{r7}
 8011476:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 8011478:	4b16      	ldr	r3, [pc, #88]	; (80114d4 <get_wall_info+0x60>)
 801147a:	2200      	movs	r2, #0
 801147c:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 801147e:	4b16      	ldr	r3, [pc, #88]	; (80114d8 <get_wall_info+0x64>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b78      	cmp	r3, #120	; 0x78
 8011484:	d803      	bhi.n	801148e <get_wall_info+0x1a>
 8011486:	4b15      	ldr	r3, [pc, #84]	; (80114dc <get_wall_info+0x68>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2bc8      	cmp	r3, #200	; 0xc8
 801148c:	d906      	bls.n	801149c <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 801148e:	4b11      	ldr	r3, [pc, #68]	; (80114d4 <get_wall_info+0x60>)
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	f063 0377 	orn	r3, r3, #119	; 0x77
 8011496:	b2da      	uxtb	r2, r3
 8011498:	4b0e      	ldr	r3, [pc, #56]	; (80114d4 <get_wall_info+0x60>)
 801149a:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 801149c:	4b10      	ldr	r3, [pc, #64]	; (80114e0 <get_wall_info+0x6c>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b78      	cmp	r3, #120	; 0x78
 80114a2:	d906      	bls.n	80114b2 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 80114a4:	4b0b      	ldr	r3, [pc, #44]	; (80114d4 <get_wall_info+0x60>)
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80114ac:	b2da      	uxtb	r2, r3
 80114ae:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <get_wall_info+0x60>)
 80114b0:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 80114b2:	4b0c      	ldr	r3, [pc, #48]	; (80114e4 <get_wall_info+0x70>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b8c      	cmp	r3, #140	; 0x8c
 80114b8:	d906      	bls.n	80114c8 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 80114ba:	4b06      	ldr	r3, [pc, #24]	; (80114d4 <get_wall_info+0x60>)
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	f043 0311 	orr.w	r3, r3, #17
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	4b03      	ldr	r3, [pc, #12]	; (80114d4 <get_wall_info+0x60>)
 80114c6:	701a      	strb	r2, [r3, #0]
	}
}
 80114c8:	bf00      	nop
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	200002c8 	.word	0x200002c8
 80114d8:	20000c00 	.word	0x20000c00
 80114dc:	20000d54 	.word	0x20000d54
 80114e0:	20000f60 	.word	0x20000f60
 80114e4:	20000afc 	.word	0x20000afc

080114e8 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	4603      	mov	r3, r0
 80114f0:	71fb      	strb	r3, [r7, #7]
 80114f2:	460b      	mov	r3, r1
 80114f4:	71bb      	strb	r3, [r7, #6]
 80114f6:	4613      	mov	r3, r2
 80114f8:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80114fa:	79fb      	ldrb	r3, [r7, #7]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d005      	beq.n	801150c <led_write+0x24>
 8011500:	2201      	movs	r2, #1
 8011502:	2110      	movs	r1, #16
 8011504:	4814      	ldr	r0, [pc, #80]	; (8011558 <led_write+0x70>)
 8011506:	f7f0 fefd 	bl	8002304 <HAL_GPIO_WritePin>
 801150a:	e004      	b.n	8011516 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 801150c:	2200      	movs	r2, #0
 801150e:	2110      	movs	r1, #16
 8011510:	4811      	ldr	r0, [pc, #68]	; (8011558 <led_write+0x70>)
 8011512:	f7f0 fef7 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8011516:	79bb      	ldrb	r3, [r7, #6]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d005      	beq.n	8011528 <led_write+0x40>
 801151c:	2201      	movs	r2, #1
 801151e:	2140      	movs	r1, #64	; 0x40
 8011520:	480d      	ldr	r0, [pc, #52]	; (8011558 <led_write+0x70>)
 8011522:	f7f0 feef 	bl	8002304 <HAL_GPIO_WritePin>
 8011526:	e004      	b.n	8011532 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8011528:	2200      	movs	r2, #0
 801152a:	2140      	movs	r1, #64	; 0x40
 801152c:	480a      	ldr	r0, [pc, #40]	; (8011558 <led_write+0x70>)
 801152e:	f7f0 fee9 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8011532:	797b      	ldrb	r3, [r7, #5]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d005      	beq.n	8011544 <led_write+0x5c>
 8011538:	2201      	movs	r2, #1
 801153a:	2180      	movs	r1, #128	; 0x80
 801153c:	4806      	ldr	r0, [pc, #24]	; (8011558 <led_write+0x70>)
 801153e:	f7f0 fee1 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 8011542:	e004      	b.n	801154e <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8011544:	2200      	movs	r2, #0
 8011546:	2180      	movs	r1, #128	; 0x80
 8011548:	4803      	ldr	r0, [pc, #12]	; (8011558 <led_write+0x70>)
 801154a:	f7f0 fedb 	bl	8002304 <HAL_GPIO_WritePin>
}
 801154e:	bf00      	nop
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	40020000 	.word	0x40020000

0801155c <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 8011566:	79fb      	ldrb	r3, [r7, #7]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d112      	bne.n	8011592 <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 801156c:	2201      	movs	r2, #1
 801156e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011572:	4856      	ldr	r0, [pc, #344]	; (80116cc <full_led_write+0x170>)
 8011574:	f7f0 fec6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011578:	2201      	movs	r2, #1
 801157a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801157e:	4853      	ldr	r0, [pc, #332]	; (80116cc <full_led_write+0x170>)
 8011580:	f7f0 fec0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011584:	2201      	movs	r2, #1
 8011586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801158a:	4851      	ldr	r0, [pc, #324]	; (80116d0 <full_led_write+0x174>)
 801158c:	f7f0 feba 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8011590:	e098      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 1){
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	2b01      	cmp	r3, #1
 8011596:	d112      	bne.n	80115be <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011598:	2201      	movs	r2, #1
 801159a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801159e:	484b      	ldr	r0, [pc, #300]	; (80116cc <full_led_write+0x170>)
 80115a0:	f7f0 feb0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80115a4:	2201      	movs	r2, #1
 80115a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115aa:	4848      	ldr	r0, [pc, #288]	; (80116cc <full_led_write+0x170>)
 80115ac:	f7f0 feaa 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80115b0:	2200      	movs	r2, #0
 80115b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80115b6:	4846      	ldr	r0, [pc, #280]	; (80116d0 <full_led_write+0x174>)
 80115b8:	f7f0 fea4 	bl	8002304 <HAL_GPIO_WritePin>
}
 80115bc:	e082      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 2){
 80115be:	79fb      	ldrb	r3, [r7, #7]
 80115c0:	2b02      	cmp	r3, #2
 80115c2:	d112      	bne.n	80115ea <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80115c4:	2201      	movs	r2, #1
 80115c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115ca:	4840      	ldr	r0, [pc, #256]	; (80116cc <full_led_write+0x170>)
 80115cc:	f7f0 fe9a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80115d0:	2200      	movs	r2, #0
 80115d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115d6:	483d      	ldr	r0, [pc, #244]	; (80116cc <full_led_write+0x170>)
 80115d8:	f7f0 fe94 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80115dc:	2201      	movs	r2, #1
 80115de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80115e2:	483b      	ldr	r0, [pc, #236]	; (80116d0 <full_led_write+0x174>)
 80115e4:	f7f0 fe8e 	bl	8002304 <HAL_GPIO_WritePin>
}
 80115e8:	e06c      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 3){
 80115ea:	79fb      	ldrb	r3, [r7, #7]
 80115ec:	2b03      	cmp	r3, #3
 80115ee:	d112      	bne.n	8011616 <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80115f0:	2200      	movs	r2, #0
 80115f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115f6:	4835      	ldr	r0, [pc, #212]	; (80116cc <full_led_write+0x170>)
 80115f8:	f7f0 fe84 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80115fc:	2201      	movs	r2, #1
 80115fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011602:	4832      	ldr	r0, [pc, #200]	; (80116cc <full_led_write+0x170>)
 8011604:	f7f0 fe7e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011608:	2201      	movs	r2, #1
 801160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801160e:	4830      	ldr	r0, [pc, #192]	; (80116d0 <full_led_write+0x174>)
 8011610:	f7f0 fe78 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011614:	e056      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 4){
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	2b04      	cmp	r3, #4
 801161a:	d112      	bne.n	8011642 <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 801161c:	2200      	movs	r2, #0
 801161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011622:	482a      	ldr	r0, [pc, #168]	; (80116cc <full_led_write+0x170>)
 8011624:	f7f0 fe6e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011628:	2200      	movs	r2, #0
 801162a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801162e:	4827      	ldr	r0, [pc, #156]	; (80116cc <full_led_write+0x170>)
 8011630:	f7f0 fe68 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011634:	2201      	movs	r2, #1
 8011636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801163a:	4825      	ldr	r0, [pc, #148]	; (80116d0 <full_led_write+0x174>)
 801163c:	f7f0 fe62 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011640:	e040      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 5){
 8011642:	79fb      	ldrb	r3, [r7, #7]
 8011644:	2b05      	cmp	r3, #5
 8011646:	d112      	bne.n	801166e <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011648:	2200      	movs	r2, #0
 801164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801164e:	481f      	ldr	r0, [pc, #124]	; (80116cc <full_led_write+0x170>)
 8011650:	f7f0 fe58 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011654:	2201      	movs	r2, #1
 8011656:	f44f 7100 	mov.w	r1, #512	; 0x200
 801165a:	481c      	ldr	r0, [pc, #112]	; (80116cc <full_led_write+0x170>)
 801165c:	f7f0 fe52 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011660:	2200      	movs	r2, #0
 8011662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011666:	481a      	ldr	r0, [pc, #104]	; (80116d0 <full_led_write+0x174>)
 8011668:	f7f0 fe4c 	bl	8002304 <HAL_GPIO_WritePin>
}
 801166c:	e02a      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 6){
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	2b06      	cmp	r3, #6
 8011672:	d112      	bne.n	801169a <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011674:	2201      	movs	r2, #1
 8011676:	f44f 7180 	mov.w	r1, #256	; 0x100
 801167a:	4814      	ldr	r0, [pc, #80]	; (80116cc <full_led_write+0x170>)
 801167c:	f7f0 fe42 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011680:	2200      	movs	r2, #0
 8011682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011686:	4811      	ldr	r0, [pc, #68]	; (80116cc <full_led_write+0x170>)
 8011688:	f7f0 fe3c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 801168c:	2200      	movs	r2, #0
 801168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011692:	480f      	ldr	r0, [pc, #60]	; (80116d0 <full_led_write+0x174>)
 8011694:	f7f0 fe36 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011698:	e014      	b.n	80116c4 <full_led_write+0x168>
	else if(fulled == 7){
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	2b07      	cmp	r3, #7
 801169e:	d111      	bne.n	80116c4 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80116a0:	2200      	movs	r2, #0
 80116a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80116a6:	4809      	ldr	r0, [pc, #36]	; (80116cc <full_led_write+0x170>)
 80116a8:	f7f0 fe2c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80116ac:	2200      	movs	r2, #0
 80116ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80116b2:	4806      	ldr	r0, [pc, #24]	; (80116cc <full_led_write+0x170>)
 80116b4:	f7f0 fe26 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80116b8:	2200      	movs	r2, #0
 80116ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80116be:	4804      	ldr	r0, [pc, #16]	; (80116d0 <full_led_write+0x174>)
 80116c0:	f7f0 fe20 	bl	8002304 <HAL_GPIO_WritePin>
}
 80116c4:	bf00      	nop
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	40020400 	.word	0x40020400
 80116d0:	40020800 	.word	0x40020800

080116d4 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b08c      	sub	sp, #48	; 0x30
 80116d8:	af02      	add	r7, sp, #8

	int mode = 0;
 80116da:	2300      	movs	r3, #0
 80116dc:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 80116de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116e0:	4881      	ldr	r0, [pc, #516]	; (80118e8 <sensor_test+0x214>)
 80116e2:	f000 fccf 	bl	8012084 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	b2d8      	uxtb	r0, r3
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	f003 0302 	and.w	r3, r3, #2
 80116f8:	b2d9      	uxtb	r1, r3
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	f003 0304 	and.w	r3, r3, #4
 8011702:	b2db      	uxtb	r3, r3
 8011704:	461a      	mov	r2, r3
 8011706:	f7ff feef 	bl	80114e8 <led_write>
		  if(dist_r >= 20){
 801170a:	4b78      	ldr	r3, [pc, #480]	; (80118ec <sensor_test+0x218>)
 801170c:	edd3 7a00 	vldr	s15, [r3]
 8011710:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8011714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171c:	db0f      	blt.n	801173e <sensor_test+0x6a>
			  mode++;
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011720:	3301      	adds	r3, #1
 8011722:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011724:	4b71      	ldr	r3, [pc, #452]	; (80118ec <sensor_test+0x218>)
 8011726:	f04f 0200 	mov.w	r2, #0
 801172a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 801172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172e:	2b07      	cmp	r3, #7
 8011730:	dd01      	ble.n	8011736 <sensor_test+0x62>
				  mode = 0;
 8011732:	2300      	movs	r3, #0
 8011734:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011738:	486b      	ldr	r0, [pc, #428]	; (80118e8 <sensor_test+0x214>)
 801173a:	f000 fca3 	bl	8012084 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 801173e:	4b6b      	ldr	r3, [pc, #428]	; (80118ec <sensor_test+0x218>)
 8011740:	edd3 7a00 	vldr	s15, [r3]
 8011744:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8011748:	eef4 7ac7 	vcmpe.f32	s15, s14
 801174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011750:	d80f      	bhi.n	8011772 <sensor_test+0x9e>
			  mode--;
 8011752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011754:	3b01      	subs	r3, #1
 8011756:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011758:	4b64      	ldr	r3, [pc, #400]	; (80118ec <sensor_test+0x218>)
 801175a:	f04f 0200 	mov.w	r2, #0
 801175e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	2b00      	cmp	r3, #0
 8011764:	da01      	bge.n	801176a <sensor_test+0x96>
				  mode = 7;
 8011766:	2307      	movs	r3, #7
 8011768:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 801176a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801176c:	485e      	ldr	r0, [pc, #376]	; (80118e8 <sensor_test+0x214>)
 801176e:	f000 fc89 	bl	8012084 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8011772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011776:	485e      	ldr	r0, [pc, #376]	; (80118f0 <sensor_test+0x21c>)
 8011778:	f7f0 fdac 	bl	80022d4 <HAL_GPIO_ReadPin>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d1b1      	bne.n	80116e6 <sensor_test+0x12>
			  HAL_Delay(50);
 8011782:	2032      	movs	r0, #50	; 0x32
 8011784:	f7ef fc4a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8011788:	bf00      	nop
 801178a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801178e:	4858      	ldr	r0, [pc, #352]	; (80118f0 <sensor_test+0x21c>)
 8011790:	f7f0 fda0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d0f7      	beq.n	801178a <sensor_test+0xb6>

			  drive_ready();
 801179a:	f7f3 fa71 	bl	8004c80 <drive_ready>

			  switch(mode){
 801179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a0:	2b07      	cmp	r3, #7
 80117a2:	d8a0      	bhi.n	80116e6 <sensor_test+0x12>
 80117a4:	a201      	add	r2, pc, #4	; (adr r2, 80117ac <sensor_test+0xd8>)
 80117a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117aa:	bf00      	nop
 80117ac:	080117cd 	.word	0x080117cd
 80117b0:	080117d3 	.word	0x080117d3
 80117b4:	08011825 	.word	0x08011825
 80117b8:	080116e7 	.word	0x080116e7
 80117bc:	080116e7 	.word	0x080116e7
 80117c0:	080116e7 	.word	0x080116e7
 80117c4:	080116e7 	.word	0x080116e7
 80117c8:	080116e7 	.word	0x080116e7
				case 0:
					get_base();
 80117cc:	f7ff fe34 	bl	8011438 <get_base>
					break;
 80117d0:	e089      	b.n	80118e6 <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 80117d2:	4848      	ldr	r0, [pc, #288]	; (80118f4 <sensor_test+0x220>)
 80117d4:	f000 fcca 	bl	801216c <puts>
			  		  while(1){
			  			  get_wall_info();
 80117d8:	f7ff fe4c 	bl	8011474 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 80117dc:	4b46      	ldr	r3, [pc, #280]	; (80118f8 <sensor_test+0x224>)
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	f003 0311 	and.w	r3, r3, #17
 80117e4:	b2d8      	uxtb	r0, r3
 80117e6:	4b44      	ldr	r3, [pc, #272]	; (80118f8 <sensor_test+0x224>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80117ee:	b2d9      	uxtb	r1, r3
 80117f0:	4b41      	ldr	r3, [pc, #260]	; (80118f8 <sensor_test+0x224>)
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	461a      	mov	r2, r3
 80117fc:	f7ff fe74 	bl	80114e8 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8011800:	4b3e      	ldr	r3, [pc, #248]	; (80118fc <sensor_test+0x228>)
 8011802:	6819      	ldr	r1, [r3, #0]
 8011804:	4b3e      	ldr	r3, [pc, #248]	; (8011900 <sensor_test+0x22c>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	4b3e      	ldr	r3, [pc, #248]	; (8011904 <sensor_test+0x230>)
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	4b3e      	ldr	r3, [pc, #248]	; (8011908 <sensor_test+0x234>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	4603      	mov	r3, r0
 8011814:	483d      	ldr	r0, [pc, #244]	; (801190c <sensor_test+0x238>)
 8011816:	f000 fc35 	bl	8012084 <iprintf>
			  			  HAL_Delay(333);
 801181a:	f240 104d 	movw	r0, #333	; 0x14d
 801181e:	f7ef fbfd 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8011822:	e7d9      	b.n	80117d8 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8011824:	483a      	ldr	r0, [pc, #232]	; (8011910 <sensor_test+0x23c>)
 8011826:	f000 fca1 	bl	801216c <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 801182a:	f7fa fb93 	bl	800bf54 <accel_read_x>
 801182e:	eef0 7a40 	vmov.f32	s15, s0
 8011832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011836:	ee17 3a90 	vmov	r3, s15
 801183a:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 801183c:	f7fa fbb0 	bl	800bfa0 <accel_read_y>
 8011840:	eef0 7a40 	vmov.f32	s15, s0
 8011844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011848:	ee17 3a90 	vmov	r3, s15
 801184c:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 801184e:	f7fa fbcd 	bl	800bfec <accel_read_z>
 8011852:	eef0 7a40 	vmov.f32	s15, s0
 8011856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801185a:	ee17 3a90 	vmov	r3, s15
 801185e:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8011860:	f7fa fbee 	bl	800c040 <gyro_read_x>
 8011864:	eef0 7a40 	vmov.f32	s15, s0
 8011868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801186c:	ee17 3a90 	vmov	r3, s15
 8011870:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8011872:	f7fa fc21 	bl	800c0b8 <gyro_read_y>
 8011876:	eef0 7a40 	vmov.f32	s15, s0
 801187a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801187e:	ee17 3a90 	vmov	r3, s15
 8011882:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8011884:	f7fa fc54 	bl	800c130 <gyro_read_z>
 8011888:	eef0 7a40 	vmov.f32	s15, s0
 801188c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011890:	ee17 3a90 	vmov	r3, s15
 8011894:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8011896:	4b1f      	ldr	r3, [pc, #124]	; (8011914 <sensor_test+0x240>)
 8011898:	edd3 7a00 	vldr	s15, [r3]
 801189c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118a0:	ee17 3a90 	vmov	r3, s15
 80118a4:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 80118a6:	4b1c      	ldr	r3, [pc, #112]	; (8011918 <sensor_test+0x244>)
 80118a8:	edd3 7a00 	vldr	s15, [r3]
 80118ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118b0:	ee17 3a90 	vmov	r3, s15
 80118b4:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 80118b6:	4b19      	ldr	r3, [pc, #100]	; (801191c <sensor_test+0x248>)
 80118b8:	edd3 7a00 	vldr	s15, [r3]
 80118bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118c0:	ee17 3a90 	vmov	r3, s15
 80118c4:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	693a      	ldr	r2, [r7, #16]
 80118ca:	6979      	ldr	r1, [r7, #20]
 80118cc:	4814      	ldr	r0, [pc, #80]	; (8011920 <sensor_test+0x24c>)
 80118ce:	f000 fbd9 	bl	8012084 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	68b9      	ldr	r1, [r7, #8]
 80118d8:	4812      	ldr	r0, [pc, #72]	; (8011924 <sensor_test+0x250>)
 80118da:	f000 fbd3 	bl	8012084 <iprintf>
			  			  HAL_Delay(111);
 80118de:	206f      	movs	r0, #111	; 0x6f
 80118e0:	f7ef fb9c 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 80118e4:	e7a1      	b.n	801182a <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80118e6:	e6fe      	b.n	80116e6 <sensor_test+0x12>
 80118e8:	08013720 	.word	0x08013720
 80118ec:	20000aec 	.word	0x20000aec
 80118f0:	40020000 	.word	0x40020000
 80118f4:	0801372c 	.word	0x0801372c
 80118f8:	200002c8 	.word	0x200002c8
 80118fc:	20000afc 	.word	0x20000afc
 8011900:	20000d54 	.word	0x20000d54
 8011904:	20000c00 	.word	0x20000c00
 8011908:	20000f60 	.word	0x20000f60
 801190c:	08013740 	.word	0x08013740
 8011910:	08013770 	.word	0x08013770
 8011914:	20000450 	.word	0x20000450
 8011918:	20000f70 	.word	0x20000f70
 801191c:	20000b5c 	.word	0x20000b5c
 8011920:	08013784 	.word	0x08013784
 8011924:	080137a4 	.word	0x080137a4

08011928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801192e:	2300      	movs	r3, #0
 8011930:	607b      	str	r3, [r7, #4]
 8011932:	4b10      	ldr	r3, [pc, #64]	; (8011974 <HAL_MspInit+0x4c>)
 8011934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011936:	4a0f      	ldr	r2, [pc, #60]	; (8011974 <HAL_MspInit+0x4c>)
 8011938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801193c:	6453      	str	r3, [r2, #68]	; 0x44
 801193e:	4b0d      	ldr	r3, [pc, #52]	; (8011974 <HAL_MspInit+0x4c>)
 8011940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011946:	607b      	str	r3, [r7, #4]
 8011948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801194a:	2300      	movs	r3, #0
 801194c:	603b      	str	r3, [r7, #0]
 801194e:	4b09      	ldr	r3, [pc, #36]	; (8011974 <HAL_MspInit+0x4c>)
 8011950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011952:	4a08      	ldr	r2, [pc, #32]	; (8011974 <HAL_MspInit+0x4c>)
 8011954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011958:	6413      	str	r3, [r2, #64]	; 0x40
 801195a:	4b06      	ldr	r3, [pc, #24]	; (8011974 <HAL_MspInit+0x4c>)
 801195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011962:	603b      	str	r3, [r7, #0]
 8011964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011966:	bf00      	nop
 8011968:	370c      	adds	r7, #12
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr
 8011972:	bf00      	nop
 8011974:	40023800 	.word	0x40023800

08011978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b08a      	sub	sp, #40	; 0x28
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011980:	f107 0314 	add.w	r3, r7, #20
 8011984:	2200      	movs	r2, #0
 8011986:	601a      	str	r2, [r3, #0]
 8011988:	605a      	str	r2, [r3, #4]
 801198a:	609a      	str	r2, [r3, #8]
 801198c:	60da      	str	r2, [r3, #12]
 801198e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a17      	ldr	r2, [pc, #92]	; (80119f4 <HAL_ADC_MspInit+0x7c>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d127      	bne.n	80119ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801199a:	2300      	movs	r3, #0
 801199c:	613b      	str	r3, [r7, #16]
 801199e:	4b16      	ldr	r3, [pc, #88]	; (80119f8 <HAL_ADC_MspInit+0x80>)
 80119a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119a2:	4a15      	ldr	r2, [pc, #84]	; (80119f8 <HAL_ADC_MspInit+0x80>)
 80119a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119a8:	6453      	str	r3, [r2, #68]	; 0x44
 80119aa:	4b13      	ldr	r3, [pc, #76]	; (80119f8 <HAL_ADC_MspInit+0x80>)
 80119ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119b2:	613b      	str	r3, [r7, #16]
 80119b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119b6:	2300      	movs	r3, #0
 80119b8:	60fb      	str	r3, [r7, #12]
 80119ba:	4b0f      	ldr	r3, [pc, #60]	; (80119f8 <HAL_ADC_MspInit+0x80>)
 80119bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119be:	4a0e      	ldr	r2, [pc, #56]	; (80119f8 <HAL_ADC_MspInit+0x80>)
 80119c0:	f043 0301 	orr.w	r3, r3, #1
 80119c4:	6313      	str	r3, [r2, #48]	; 0x30
 80119c6:	4b0c      	ldr	r3, [pc, #48]	; (80119f8 <HAL_ADC_MspInit+0x80>)
 80119c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ca:	f003 0301 	and.w	r3, r3, #1
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80119d2:	230f      	movs	r3, #15
 80119d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80119d6:	2303      	movs	r3, #3
 80119d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119da:	2300      	movs	r3, #0
 80119dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80119de:	f107 0314 	add.w	r3, r7, #20
 80119e2:	4619      	mov	r1, r3
 80119e4:	4805      	ldr	r0, [pc, #20]	; (80119fc <HAL_ADC_MspInit+0x84>)
 80119e6:	f7f0 fadb 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80119ea:	bf00      	nop
 80119ec:	3728      	adds	r7, #40	; 0x28
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	40012000 	.word	0x40012000
 80119f8:	40023800 	.word	0x40023800
 80119fc:	40020000 	.word	0x40020000

08011a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b08a      	sub	sp, #40	; 0x28
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a08:	f107 0314 	add.w	r3, r7, #20
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	601a      	str	r2, [r3, #0]
 8011a10:	605a      	str	r2, [r3, #4]
 8011a12:	609a      	str	r2, [r3, #8]
 8011a14:	60da      	str	r2, [r3, #12]
 8011a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4a19      	ldr	r2, [pc, #100]	; (8011a84 <HAL_SPI_MspInit+0x84>)
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d12c      	bne.n	8011a7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011a22:	2300      	movs	r3, #0
 8011a24:	613b      	str	r3, [r7, #16]
 8011a26:	4b18      	ldr	r3, [pc, #96]	; (8011a88 <HAL_SPI_MspInit+0x88>)
 8011a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a2a:	4a17      	ldr	r2, [pc, #92]	; (8011a88 <HAL_SPI_MspInit+0x88>)
 8011a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a30:	6413      	str	r3, [r2, #64]	; 0x40
 8011a32:	4b15      	ldr	r3, [pc, #84]	; (8011a88 <HAL_SPI_MspInit+0x88>)
 8011a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a3a:	613b      	str	r3, [r7, #16]
 8011a3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60fb      	str	r3, [r7, #12]
 8011a42:	4b11      	ldr	r3, [pc, #68]	; (8011a88 <HAL_SPI_MspInit+0x88>)
 8011a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a46:	4a10      	ldr	r2, [pc, #64]	; (8011a88 <HAL_SPI_MspInit+0x88>)
 8011a48:	f043 0304 	orr.w	r3, r3, #4
 8011a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8011a4e:	4b0e      	ldr	r3, [pc, #56]	; (8011a88 <HAL_SPI_MspInit+0x88>)
 8011a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a52:	f003 0304 	and.w	r3, r3, #4
 8011a56:	60fb      	str	r3, [r7, #12]
 8011a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8011a5a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a60:	2302      	movs	r3, #2
 8011a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a64:	2300      	movs	r3, #0
 8011a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a68:	2303      	movs	r3, #3
 8011a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011a6c:	2306      	movs	r3, #6
 8011a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011a70:	f107 0314 	add.w	r3, r7, #20
 8011a74:	4619      	mov	r1, r3
 8011a76:	4805      	ldr	r0, [pc, #20]	; (8011a8c <HAL_SPI_MspInit+0x8c>)
 8011a78:	f7f0 fa92 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8011a7c:	bf00      	nop
 8011a7e:	3728      	adds	r7, #40	; 0x28
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	40003c00 	.word	0x40003c00
 8011a88:	40023800 	.word	0x40023800
 8011a8c:	40020800 	.word	0x40020800

08011a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aa0:	d10e      	bne.n	8011ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	617b      	str	r3, [r7, #20]
 8011aa6:	4b20      	ldr	r3, [pc, #128]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aaa:	4a1f      	ldr	r2, [pc, #124]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011aac:	f043 0301 	orr.w	r3, r3, #1
 8011ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8011ab2:	4b1d      	ldr	r3, [pc, #116]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab6:	f003 0301 	and.w	r3, r3, #1
 8011aba:	617b      	str	r3, [r7, #20]
 8011abc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8011abe:	e02e      	b.n	8011b1e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4a19      	ldr	r2, [pc, #100]	; (8011b2c <HAL_TIM_Base_MspInit+0x9c>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d10e      	bne.n	8011ae8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011aca:	2300      	movs	r3, #0
 8011acc:	613b      	str	r3, [r7, #16]
 8011ace:	4b16      	ldr	r3, [pc, #88]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ad2:	4a15      	ldr	r2, [pc, #84]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011ad4:	f043 0302 	orr.w	r3, r3, #2
 8011ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8011ada:	4b13      	ldr	r3, [pc, #76]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ade:	f003 0302 	and.w	r3, r3, #2
 8011ae2:	613b      	str	r3, [r7, #16]
 8011ae4:	693b      	ldr	r3, [r7, #16]
}
 8011ae6:	e01a      	b.n	8011b1e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4a10      	ldr	r2, [pc, #64]	; (8011b30 <HAL_TIM_Base_MspInit+0xa0>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d115      	bne.n	8011b1e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011af2:	2300      	movs	r3, #0
 8011af4:	60fb      	str	r3, [r7, #12]
 8011af6:	4b0c      	ldr	r3, [pc, #48]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011afa:	4a0b      	ldr	r2, [pc, #44]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011afc:	f043 0310 	orr.w	r3, r3, #16
 8011b00:	6413      	str	r3, [r2, #64]	; 0x40
 8011b02:	4b09      	ldr	r3, [pc, #36]	; (8011b28 <HAL_TIM_Base_MspInit+0x98>)
 8011b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b06:	f003 0310 	and.w	r3, r3, #16
 8011b0a:	60fb      	str	r3, [r7, #12]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8011b0e:	2200      	movs	r2, #0
 8011b10:	2100      	movs	r1, #0
 8011b12:	2036      	movs	r0, #54	; 0x36
 8011b14:	f7ef ff39 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011b18:	2036      	movs	r0, #54	; 0x36
 8011b1a:	f7ef ff52 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8011b1e:	bf00      	nop
 8011b20:	3718      	adds	r7, #24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	40023800 	.word	0x40023800
 8011b2c:	40000400 	.word	0x40000400
 8011b30:	40001000 	.word	0x40001000

08011b34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b08c      	sub	sp, #48	; 0x30
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b3c:	f107 031c 	add.w	r3, r7, #28
 8011b40:	2200      	movs	r2, #0
 8011b42:	601a      	str	r2, [r3, #0]
 8011b44:	605a      	str	r2, [r3, #4]
 8011b46:	609a      	str	r2, [r3, #8]
 8011b48:	60da      	str	r2, [r3, #12]
 8011b4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a32      	ldr	r2, [pc, #200]	; (8011c1c <HAL_TIM_Encoder_MspInit+0xe8>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d12c      	bne.n	8011bb0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011b56:	2300      	movs	r3, #0
 8011b58:	61bb      	str	r3, [r7, #24]
 8011b5a:	4b31      	ldr	r3, [pc, #196]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b5e:	4a30      	ldr	r2, [pc, #192]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b60:	f043 0304 	orr.w	r3, r3, #4
 8011b64:	6413      	str	r3, [r2, #64]	; 0x40
 8011b66:	4b2e      	ldr	r3, [pc, #184]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b6a:	f003 0304 	and.w	r3, r3, #4
 8011b6e:	61bb      	str	r3, [r7, #24]
 8011b70:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011b72:	2300      	movs	r3, #0
 8011b74:	617b      	str	r3, [r7, #20]
 8011b76:	4b2a      	ldr	r3, [pc, #168]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b7a:	4a29      	ldr	r2, [pc, #164]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b7c:	f043 0302 	orr.w	r3, r3, #2
 8011b80:	6313      	str	r3, [r2, #48]	; 0x30
 8011b82:	4b27      	ldr	r3, [pc, #156]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b86:	f003 0302 	and.w	r3, r3, #2
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011b8e:	23c0      	movs	r3, #192	; 0xc0
 8011b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b92:	2302      	movs	r3, #2
 8011b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b96:	2300      	movs	r3, #0
 8011b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8011b9e:	2302      	movs	r3, #2
 8011ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ba2:	f107 031c 	add.w	r3, r7, #28
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	481e      	ldr	r0, [pc, #120]	; (8011c24 <HAL_TIM_Encoder_MspInit+0xf0>)
 8011baa:	f7f0 f9f9 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8011bae:	e030      	b.n	8011c12 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4a1c      	ldr	r2, [pc, #112]	; (8011c28 <HAL_TIM_Encoder_MspInit+0xf4>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d12b      	bne.n	8011c12 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011bba:	2300      	movs	r3, #0
 8011bbc:	613b      	str	r3, [r7, #16]
 8011bbe:	4b18      	ldr	r3, [pc, #96]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bc2:	4a17      	ldr	r2, [pc, #92]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bc4:	f043 0302 	orr.w	r3, r3, #2
 8011bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8011bca:	4b15      	ldr	r3, [pc, #84]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bce:	f003 0302 	and.w	r3, r3, #2
 8011bd2:	613b      	str	r3, [r7, #16]
 8011bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	60fb      	str	r3, [r7, #12]
 8011bda:	4b11      	ldr	r3, [pc, #68]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bde:	4a10      	ldr	r2, [pc, #64]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011be0:	f043 0304 	orr.w	r3, r3, #4
 8011be4:	6313      	str	r3, [r2, #48]	; 0x30
 8011be6:	4b0e      	ldr	r3, [pc, #56]	; (8011c20 <HAL_TIM_Encoder_MspInit+0xec>)
 8011be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bea:	f003 0304 	and.w	r3, r3, #4
 8011bee:	60fb      	str	r3, [r7, #12]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011bf2:	23c0      	movs	r3, #192	; 0xc0
 8011bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011c02:	2303      	movs	r3, #3
 8011c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c06:	f107 031c 	add.w	r3, r7, #28
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	4807      	ldr	r0, [pc, #28]	; (8011c2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8011c0e:	f7f0 f9c7 	bl	8001fa0 <HAL_GPIO_Init>
}
 8011c12:	bf00      	nop
 8011c14:	3730      	adds	r7, #48	; 0x30
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	40000800 	.word	0x40000800
 8011c20:	40023800 	.word	0x40023800
 8011c24:	40020400 	.word	0x40020400
 8011c28:	40010400 	.word	0x40010400
 8011c2c:	40020800 	.word	0x40020800

08011c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08a      	sub	sp, #40	; 0x28
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c38:	f107 0314 	add.w	r3, r7, #20
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	601a      	str	r2, [r3, #0]
 8011c40:	605a      	str	r2, [r3, #4]
 8011c42:	609a      	str	r2, [r3, #8]
 8011c44:	60da      	str	r2, [r3, #12]
 8011c46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c50:	d13d      	bne.n	8011cce <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c52:	2300      	movs	r3, #0
 8011c54:	613b      	str	r3, [r7, #16]
 8011c56:	4b31      	ldr	r3, [pc, #196]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c5a:	4a30      	ldr	r2, [pc, #192]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011c5c:	f043 0301 	orr.w	r3, r3, #1
 8011c60:	6313      	str	r3, [r2, #48]	; 0x30
 8011c62:	4b2e      	ldr	r3, [pc, #184]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c66:	f003 0301 	and.w	r3, r3, #1
 8011c6a:	613b      	str	r3, [r7, #16]
 8011c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c6e:	2300      	movs	r3, #0
 8011c70:	60fb      	str	r3, [r7, #12]
 8011c72:	4b2a      	ldr	r3, [pc, #168]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c76:	4a29      	ldr	r2, [pc, #164]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011c78:	f043 0302 	orr.w	r3, r3, #2
 8011c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8011c7e:	4b27      	ldr	r3, [pc, #156]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c82:	f003 0302 	and.w	r3, r3, #2
 8011c86:	60fb      	str	r3, [r7, #12]
 8011c88:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011c8a:	2320      	movs	r3, #32
 8011c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c8e:	2302      	movs	r3, #2
 8011c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c92:	2300      	movs	r3, #0
 8011c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c96:	2300      	movs	r3, #0
 8011c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c9e:	f107 0314 	add.w	r3, r7, #20
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	481e      	ldr	r0, [pc, #120]	; (8011d20 <HAL_TIM_MspPostInit+0xf0>)
 8011ca6:	f7f0 f97b 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8011caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011cc0:	f107 0314 	add.w	r3, r7, #20
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4817      	ldr	r0, [pc, #92]	; (8011d24 <HAL_TIM_MspPostInit+0xf4>)
 8011cc8:	f7f0 f96a 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8011ccc:	e022      	b.n	8011d14 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4a15      	ldr	r2, [pc, #84]	; (8011d28 <HAL_TIM_MspPostInit+0xf8>)
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d11d      	bne.n	8011d14 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011cd8:	2300      	movs	r3, #0
 8011cda:	60bb      	str	r3, [r7, #8]
 8011cdc:	4b0f      	ldr	r3, [pc, #60]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ce0:	4a0e      	ldr	r2, [pc, #56]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011ce2:	f043 0302 	orr.w	r3, r3, #2
 8011ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8011ce8:	4b0c      	ldr	r3, [pc, #48]	; (8011d1c <HAL_TIM_MspPostInit+0xec>)
 8011cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cec:	f003 0302 	and.w	r3, r3, #2
 8011cf0:	60bb      	str	r3, [r7, #8]
 8011cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011cf4:	2320      	movs	r3, #32
 8011cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cf8:	2302      	movs	r3, #2
 8011cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d00:	2300      	movs	r3, #0
 8011d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8011d04:	2302      	movs	r3, #2
 8011d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d08:	f107 0314 	add.w	r3, r7, #20
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	4805      	ldr	r0, [pc, #20]	; (8011d24 <HAL_TIM_MspPostInit+0xf4>)
 8011d10:	f7f0 f946 	bl	8001fa0 <HAL_GPIO_Init>
}
 8011d14:	bf00      	nop
 8011d16:	3728      	adds	r7, #40	; 0x28
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	40023800 	.word	0x40023800
 8011d20:	40020000 	.word	0x40020000
 8011d24:	40020400 	.word	0x40020400
 8011d28:	40000400 	.word	0x40000400

08011d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b08a      	sub	sp, #40	; 0x28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d34:	f107 0314 	add.w	r3, r7, #20
 8011d38:	2200      	movs	r2, #0
 8011d3a:	601a      	str	r2, [r3, #0]
 8011d3c:	605a      	str	r2, [r3, #4]
 8011d3e:	609a      	str	r2, [r3, #8]
 8011d40:	60da      	str	r2, [r3, #12]
 8011d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4a19      	ldr	r2, [pc, #100]	; (8011db0 <HAL_UART_MspInit+0x84>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d12c      	bne.n	8011da8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011d4e:	2300      	movs	r3, #0
 8011d50:	613b      	str	r3, [r7, #16]
 8011d52:	4b18      	ldr	r3, [pc, #96]	; (8011db4 <HAL_UART_MspInit+0x88>)
 8011d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d56:	4a17      	ldr	r2, [pc, #92]	; (8011db4 <HAL_UART_MspInit+0x88>)
 8011d58:	f043 0310 	orr.w	r3, r3, #16
 8011d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8011d5e:	4b15      	ldr	r3, [pc, #84]	; (8011db4 <HAL_UART_MspInit+0x88>)
 8011d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d62:	f003 0310 	and.w	r3, r3, #16
 8011d66:	613b      	str	r3, [r7, #16]
 8011d68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	60fb      	str	r3, [r7, #12]
 8011d6e:	4b11      	ldr	r3, [pc, #68]	; (8011db4 <HAL_UART_MspInit+0x88>)
 8011d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d72:	4a10      	ldr	r2, [pc, #64]	; (8011db4 <HAL_UART_MspInit+0x88>)
 8011d74:	f043 0301 	orr.w	r3, r3, #1
 8011d78:	6313      	str	r3, [r2, #48]	; 0x30
 8011d7a:	4b0e      	ldr	r3, [pc, #56]	; (8011db4 <HAL_UART_MspInit+0x88>)
 8011d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d7e:	f003 0301 	and.w	r3, r3, #1
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8011d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d8c:	2302      	movs	r3, #2
 8011d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011d90:	2301      	movs	r3, #1
 8011d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d94:	2303      	movs	r3, #3
 8011d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011d98:	2307      	movs	r3, #7
 8011d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d9c:	f107 0314 	add.w	r3, r7, #20
 8011da0:	4619      	mov	r1, r3
 8011da2:	4805      	ldr	r0, [pc, #20]	; (8011db8 <HAL_UART_MspInit+0x8c>)
 8011da4:	f7f0 f8fc 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8011da8:	bf00      	nop
 8011daa:	3728      	adds	r7, #40	; 0x28
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	40011000 	.word	0x40011000
 8011db4:	40023800 	.word	0x40023800
 8011db8:	40020000 	.word	0x40020000

08011dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011dc0:	bf00      	nop
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011dca:	b480      	push	{r7}
 8011dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011dce:	e7fe      	b.n	8011dce <HardFault_Handler+0x4>

08011dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011dd4:	e7fe      	b.n	8011dd4 <MemManage_Handler+0x4>

08011dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011dd6:	b480      	push	{r7}
 8011dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011dda:	e7fe      	b.n	8011dda <BusFault_Handler+0x4>

08011ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011de0:	e7fe      	b.n	8011de0 <UsageFault_Handler+0x4>

08011de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011de2:	b480      	push	{r7}
 8011de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011de6:	bf00      	nop
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011df0:	b480      	push	{r7}
 8011df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011df4:	bf00      	nop
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr

08011dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011dfe:	b480      	push	{r7}
 8011e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011e02:	bf00      	nop
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr

08011e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011e10:	f7ef f8e4 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011e14:	bf00      	nop
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8011e1c:	4802      	ldr	r0, [pc, #8]	; (8011e28 <TIM6_DAC_IRQHandler+0x10>)
 8011e1e:	f7f1 fdcc 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011e22:	bf00      	nop
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	20000bb4 	.word	0x20000bb4

08011e2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e38:	2300      	movs	r3, #0
 8011e3a:	617b      	str	r3, [r7, #20]
 8011e3c:	e00a      	b.n	8011e54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011e3e:	f3af 8000 	nop.w
 8011e42:	4601      	mov	r1, r0
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	1c5a      	adds	r2, r3, #1
 8011e48:	60ba      	str	r2, [r7, #8]
 8011e4a:	b2ca      	uxtb	r2, r1
 8011e4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	3301      	adds	r3, #1
 8011e52:	617b      	str	r3, [r7, #20]
 8011e54:	697a      	ldr	r2, [r7, #20]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	dbf0      	blt.n	8011e3e <_read+0x12>
	}

return len;
 8011e5c:	687b      	ldr	r3, [r7, #4]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3718      	adds	r7, #24
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b086      	sub	sp, #24
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e72:	2300      	movs	r3, #0
 8011e74:	617b      	str	r3, [r7, #20]
 8011e76:	e009      	b.n	8011e8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	1c5a      	adds	r2, r3, #1
 8011e7c:	60ba      	str	r2, [r7, #8]
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fa f997 	bl	800c1b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	617b      	str	r3, [r7, #20]
 8011e8c:	697a      	ldr	r2, [r7, #20]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	dbf1      	blt.n	8011e78 <_write+0x12>
	}
	return len;
 8011e94:	687b      	ldr	r3, [r7, #4]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3718      	adds	r7, #24
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <_close>:

int _close(int file)
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
	return -1;
 8011ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011eb6:	b480      	push	{r7}
 8011eb8:	b083      	sub	sp, #12
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
 8011ebe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011ec6:	605a      	str	r2, [r3, #4]
	return 0;
 8011ec8:	2300      	movs	r3, #0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <_isatty>:

int _isatty(int file)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
	return 1;
 8011ede:	2301      	movs	r3, #1
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011eec:	b480      	push	{r7}
 8011eee:	b085      	sub	sp, #20
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
	return 0;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3714      	adds	r7, #20
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
	...

08011f08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011f10:	4b11      	ldr	r3, [pc, #68]	; (8011f58 <_sbrk+0x50>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d102      	bne.n	8011f1e <_sbrk+0x16>
		heap_end = &end;
 8011f18:	4b0f      	ldr	r3, [pc, #60]	; (8011f58 <_sbrk+0x50>)
 8011f1a:	4a10      	ldr	r2, [pc, #64]	; (8011f5c <_sbrk+0x54>)
 8011f1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011f1e:	4b0e      	ldr	r3, [pc, #56]	; (8011f58 <_sbrk+0x50>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011f24:	4b0c      	ldr	r3, [pc, #48]	; (8011f58 <_sbrk+0x50>)
 8011f26:	681a      	ldr	r2, [r3, #0]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	466a      	mov	r2, sp
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	d907      	bls.n	8011f42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8011f32:	f000 f875 	bl	8012020 <__errno>
 8011f36:	4602      	mov	r2, r0
 8011f38:	230c      	movs	r3, #12
 8011f3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f40:	e006      	b.n	8011f50 <_sbrk+0x48>
	}

	heap_end += incr;
 8011f42:	4b05      	ldr	r3, [pc, #20]	; (8011f58 <_sbrk+0x50>)
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4413      	add	r3, r2
 8011f4a:	4a03      	ldr	r2, [pc, #12]	; (8011f58 <_sbrk+0x50>)
 8011f4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3710      	adds	r7, #16
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	20000114 	.word	0x20000114
 8011f5c:	200015e0 	.word	0x200015e0

08011f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011f60:	b480      	push	{r7}
 8011f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011f64:	4b16      	ldr	r3, [pc, #88]	; (8011fc0 <SystemInit+0x60>)
 8011f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f6a:	4a15      	ldr	r2, [pc, #84]	; (8011fc0 <SystemInit+0x60>)
 8011f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011f74:	4b13      	ldr	r3, [pc, #76]	; (8011fc4 <SystemInit+0x64>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a12      	ldr	r2, [pc, #72]	; (8011fc4 <SystemInit+0x64>)
 8011f7a:	f043 0301 	orr.w	r3, r3, #1
 8011f7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011f80:	4b10      	ldr	r3, [pc, #64]	; (8011fc4 <SystemInit+0x64>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011f86:	4b0f      	ldr	r3, [pc, #60]	; (8011fc4 <SystemInit+0x64>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4a0e      	ldr	r2, [pc, #56]	; (8011fc4 <SystemInit+0x64>)
 8011f8c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011f96:	4b0b      	ldr	r3, [pc, #44]	; (8011fc4 <SystemInit+0x64>)
 8011f98:	4a0b      	ldr	r2, [pc, #44]	; (8011fc8 <SystemInit+0x68>)
 8011f9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011f9c:	4b09      	ldr	r3, [pc, #36]	; (8011fc4 <SystemInit+0x64>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4a08      	ldr	r2, [pc, #32]	; (8011fc4 <SystemInit+0x64>)
 8011fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011fa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011fa8:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <SystemInit+0x64>)
 8011faa:	2200      	movs	r2, #0
 8011fac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011fae:	4b04      	ldr	r3, [pc, #16]	; (8011fc0 <SystemInit+0x60>)
 8011fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011fb4:	609a      	str	r2, [r3, #8]
#endif
}
 8011fb6:	bf00      	nop
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	e000ed00 	.word	0xe000ed00
 8011fc4:	40023800 	.word	0x40023800
 8011fc8:	24003010 	.word	0x24003010

08011fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012004 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011fd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011fd2:	e003      	b.n	8011fdc <LoopCopyDataInit>

08011fd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011fd4:	4b0c      	ldr	r3, [pc, #48]	; (8012008 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011fd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011fd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011fda:	3104      	adds	r1, #4

08011fdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011fdc:	480b      	ldr	r0, [pc, #44]	; (801200c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011fde:	4b0c      	ldr	r3, [pc, #48]	; (8012010 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011fe0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011fe2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011fe4:	d3f6      	bcc.n	8011fd4 <CopyDataInit>
  ldr  r2, =_sbss
 8011fe6:	4a0b      	ldr	r2, [pc, #44]	; (8012014 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011fe8:	e002      	b.n	8011ff0 <LoopFillZerobss>

08011fea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011fea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011fec:	f842 3b04 	str.w	r3, [r2], #4

08011ff0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011ff0:	4b09      	ldr	r3, [pc, #36]	; (8012018 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011ff2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011ff4:	d3f9      	bcc.n	8011fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011ff6:	f7ff ffb3 	bl	8011f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011ffa:	f000 f817 	bl	801202c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011ffe:	f7fb fbfb 	bl	800d7f8 <main>
  bx  lr    
 8012002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012004:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8012008:	08013888 	.word	0x08013888
  ldr  r0, =_sdata
 801200c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012010:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8012014:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8012018:	200015dc 	.word	0x200015dc

0801201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801201c:	e7fe      	b.n	801201c <ADC_IRQHandler>
	...

08012020 <__errno>:
 8012020:	4b01      	ldr	r3, [pc, #4]	; (8012028 <__errno+0x8>)
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	20000084 	.word	0x20000084

0801202c <__libc_init_array>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	4e0d      	ldr	r6, [pc, #52]	; (8012064 <__libc_init_array+0x38>)
 8012030:	4c0d      	ldr	r4, [pc, #52]	; (8012068 <__libc_init_array+0x3c>)
 8012032:	1ba4      	subs	r4, r4, r6
 8012034:	10a4      	asrs	r4, r4, #2
 8012036:	2500      	movs	r5, #0
 8012038:	42a5      	cmp	r5, r4
 801203a:	d109      	bne.n	8012050 <__libc_init_array+0x24>
 801203c:	4e0b      	ldr	r6, [pc, #44]	; (801206c <__libc_init_array+0x40>)
 801203e:	4c0c      	ldr	r4, [pc, #48]	; (8012070 <__libc_init_array+0x44>)
 8012040:	f001 f932 	bl	80132a8 <_init>
 8012044:	1ba4      	subs	r4, r4, r6
 8012046:	10a4      	asrs	r4, r4, #2
 8012048:	2500      	movs	r5, #0
 801204a:	42a5      	cmp	r5, r4
 801204c:	d105      	bne.n	801205a <__libc_init_array+0x2e>
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012054:	4798      	blx	r3
 8012056:	3501      	adds	r5, #1
 8012058:	e7ee      	b.n	8012038 <__libc_init_array+0xc>
 801205a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801205e:	4798      	blx	r3
 8012060:	3501      	adds	r5, #1
 8012062:	e7f2      	b.n	801204a <__libc_init_array+0x1e>
 8012064:	08013880 	.word	0x08013880
 8012068:	08013880 	.word	0x08013880
 801206c:	08013880 	.word	0x08013880
 8012070:	08013884 	.word	0x08013884

08012074 <memset>:
 8012074:	4402      	add	r2, r0
 8012076:	4603      	mov	r3, r0
 8012078:	4293      	cmp	r3, r2
 801207a:	d100      	bne.n	801207e <memset+0xa>
 801207c:	4770      	bx	lr
 801207e:	f803 1b01 	strb.w	r1, [r3], #1
 8012082:	e7f9      	b.n	8012078 <memset+0x4>

08012084 <iprintf>:
 8012084:	b40f      	push	{r0, r1, r2, r3}
 8012086:	4b0a      	ldr	r3, [pc, #40]	; (80120b0 <iprintf+0x2c>)
 8012088:	b513      	push	{r0, r1, r4, lr}
 801208a:	681c      	ldr	r4, [r3, #0]
 801208c:	b124      	cbz	r4, 8012098 <iprintf+0x14>
 801208e:	69a3      	ldr	r3, [r4, #24]
 8012090:	b913      	cbnz	r3, 8012098 <iprintf+0x14>
 8012092:	4620      	mov	r0, r4
 8012094:	f000 fad8 	bl	8012648 <__sinit>
 8012098:	ab05      	add	r3, sp, #20
 801209a:	9a04      	ldr	r2, [sp, #16]
 801209c:	68a1      	ldr	r1, [r4, #8]
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 fc99 	bl	80129d8 <_vfiprintf_r>
 80120a6:	b002      	add	sp, #8
 80120a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120ac:	b004      	add	sp, #16
 80120ae:	4770      	bx	lr
 80120b0:	20000084 	.word	0x20000084

080120b4 <_puts_r>:
 80120b4:	b570      	push	{r4, r5, r6, lr}
 80120b6:	460e      	mov	r6, r1
 80120b8:	4605      	mov	r5, r0
 80120ba:	b118      	cbz	r0, 80120c4 <_puts_r+0x10>
 80120bc:	6983      	ldr	r3, [r0, #24]
 80120be:	b90b      	cbnz	r3, 80120c4 <_puts_r+0x10>
 80120c0:	f000 fac2 	bl	8012648 <__sinit>
 80120c4:	69ab      	ldr	r3, [r5, #24]
 80120c6:	68ac      	ldr	r4, [r5, #8]
 80120c8:	b913      	cbnz	r3, 80120d0 <_puts_r+0x1c>
 80120ca:	4628      	mov	r0, r5
 80120cc:	f000 fabc 	bl	8012648 <__sinit>
 80120d0:	4b23      	ldr	r3, [pc, #140]	; (8012160 <_puts_r+0xac>)
 80120d2:	429c      	cmp	r4, r3
 80120d4:	d117      	bne.n	8012106 <_puts_r+0x52>
 80120d6:	686c      	ldr	r4, [r5, #4]
 80120d8:	89a3      	ldrh	r3, [r4, #12]
 80120da:	071b      	lsls	r3, r3, #28
 80120dc:	d51d      	bpl.n	801211a <_puts_r+0x66>
 80120de:	6923      	ldr	r3, [r4, #16]
 80120e0:	b1db      	cbz	r3, 801211a <_puts_r+0x66>
 80120e2:	3e01      	subs	r6, #1
 80120e4:	68a3      	ldr	r3, [r4, #8]
 80120e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80120ea:	3b01      	subs	r3, #1
 80120ec:	60a3      	str	r3, [r4, #8]
 80120ee:	b9e9      	cbnz	r1, 801212c <_puts_r+0x78>
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	da2e      	bge.n	8012152 <_puts_r+0x9e>
 80120f4:	4622      	mov	r2, r4
 80120f6:	210a      	movs	r1, #10
 80120f8:	4628      	mov	r0, r5
 80120fa:	f000 f8f5 	bl	80122e8 <__swbuf_r>
 80120fe:	3001      	adds	r0, #1
 8012100:	d011      	beq.n	8012126 <_puts_r+0x72>
 8012102:	200a      	movs	r0, #10
 8012104:	e011      	b.n	801212a <_puts_r+0x76>
 8012106:	4b17      	ldr	r3, [pc, #92]	; (8012164 <_puts_r+0xb0>)
 8012108:	429c      	cmp	r4, r3
 801210a:	d101      	bne.n	8012110 <_puts_r+0x5c>
 801210c:	68ac      	ldr	r4, [r5, #8]
 801210e:	e7e3      	b.n	80120d8 <_puts_r+0x24>
 8012110:	4b15      	ldr	r3, [pc, #84]	; (8012168 <_puts_r+0xb4>)
 8012112:	429c      	cmp	r4, r3
 8012114:	bf08      	it	eq
 8012116:	68ec      	ldreq	r4, [r5, #12]
 8012118:	e7de      	b.n	80120d8 <_puts_r+0x24>
 801211a:	4621      	mov	r1, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f000 f935 	bl	801238c <__swsetup_r>
 8012122:	2800      	cmp	r0, #0
 8012124:	d0dd      	beq.n	80120e2 <_puts_r+0x2e>
 8012126:	f04f 30ff 	mov.w	r0, #4294967295
 801212a:	bd70      	pop	{r4, r5, r6, pc}
 801212c:	2b00      	cmp	r3, #0
 801212e:	da04      	bge.n	801213a <_puts_r+0x86>
 8012130:	69a2      	ldr	r2, [r4, #24]
 8012132:	429a      	cmp	r2, r3
 8012134:	dc06      	bgt.n	8012144 <_puts_r+0x90>
 8012136:	290a      	cmp	r1, #10
 8012138:	d004      	beq.n	8012144 <_puts_r+0x90>
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	1c5a      	adds	r2, r3, #1
 801213e:	6022      	str	r2, [r4, #0]
 8012140:	7019      	strb	r1, [r3, #0]
 8012142:	e7cf      	b.n	80120e4 <_puts_r+0x30>
 8012144:	4622      	mov	r2, r4
 8012146:	4628      	mov	r0, r5
 8012148:	f000 f8ce 	bl	80122e8 <__swbuf_r>
 801214c:	3001      	adds	r0, #1
 801214e:	d1c9      	bne.n	80120e4 <_puts_r+0x30>
 8012150:	e7e9      	b.n	8012126 <_puts_r+0x72>
 8012152:	6823      	ldr	r3, [r4, #0]
 8012154:	200a      	movs	r0, #10
 8012156:	1c5a      	adds	r2, r3, #1
 8012158:	6022      	str	r2, [r4, #0]
 801215a:	7018      	strb	r0, [r3, #0]
 801215c:	e7e5      	b.n	801212a <_puts_r+0x76>
 801215e:	bf00      	nop
 8012160:	08013800 	.word	0x08013800
 8012164:	08013820 	.word	0x08013820
 8012168:	080137e0 	.word	0x080137e0

0801216c <puts>:
 801216c:	4b02      	ldr	r3, [pc, #8]	; (8012178 <puts+0xc>)
 801216e:	4601      	mov	r1, r0
 8012170:	6818      	ldr	r0, [r3, #0]
 8012172:	f7ff bf9f 	b.w	80120b4 <_puts_r>
 8012176:	bf00      	nop
 8012178:	20000084 	.word	0x20000084

0801217c <setbuf>:
 801217c:	2900      	cmp	r1, #0
 801217e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012182:	bf0c      	ite	eq
 8012184:	2202      	moveq	r2, #2
 8012186:	2200      	movne	r2, #0
 8012188:	f000 b800 	b.w	801218c <setvbuf>

0801218c <setvbuf>:
 801218c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012190:	461d      	mov	r5, r3
 8012192:	4b51      	ldr	r3, [pc, #324]	; (80122d8 <setvbuf+0x14c>)
 8012194:	681e      	ldr	r6, [r3, #0]
 8012196:	4604      	mov	r4, r0
 8012198:	460f      	mov	r7, r1
 801219a:	4690      	mov	r8, r2
 801219c:	b126      	cbz	r6, 80121a8 <setvbuf+0x1c>
 801219e:	69b3      	ldr	r3, [r6, #24]
 80121a0:	b913      	cbnz	r3, 80121a8 <setvbuf+0x1c>
 80121a2:	4630      	mov	r0, r6
 80121a4:	f000 fa50 	bl	8012648 <__sinit>
 80121a8:	4b4c      	ldr	r3, [pc, #304]	; (80122dc <setvbuf+0x150>)
 80121aa:	429c      	cmp	r4, r3
 80121ac:	d152      	bne.n	8012254 <setvbuf+0xc8>
 80121ae:	6874      	ldr	r4, [r6, #4]
 80121b0:	f1b8 0f02 	cmp.w	r8, #2
 80121b4:	d006      	beq.n	80121c4 <setvbuf+0x38>
 80121b6:	f1b8 0f01 	cmp.w	r8, #1
 80121ba:	f200 8089 	bhi.w	80122d0 <setvbuf+0x144>
 80121be:	2d00      	cmp	r5, #0
 80121c0:	f2c0 8086 	blt.w	80122d0 <setvbuf+0x144>
 80121c4:	4621      	mov	r1, r4
 80121c6:	4630      	mov	r0, r6
 80121c8:	f000 f9d4 	bl	8012574 <_fflush_r>
 80121cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121ce:	b141      	cbz	r1, 80121e2 <setvbuf+0x56>
 80121d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121d4:	4299      	cmp	r1, r3
 80121d6:	d002      	beq.n	80121de <setvbuf+0x52>
 80121d8:	4630      	mov	r0, r6
 80121da:	f000 fb2b 	bl	8012834 <_free_r>
 80121de:	2300      	movs	r3, #0
 80121e0:	6363      	str	r3, [r4, #52]	; 0x34
 80121e2:	2300      	movs	r3, #0
 80121e4:	61a3      	str	r3, [r4, #24]
 80121e6:	6063      	str	r3, [r4, #4]
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	061b      	lsls	r3, r3, #24
 80121ec:	d503      	bpl.n	80121f6 <setvbuf+0x6a>
 80121ee:	6921      	ldr	r1, [r4, #16]
 80121f0:	4630      	mov	r0, r6
 80121f2:	f000 fb1f 	bl	8012834 <_free_r>
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80121fc:	f023 0303 	bic.w	r3, r3, #3
 8012200:	f1b8 0f02 	cmp.w	r8, #2
 8012204:	81a3      	strh	r3, [r4, #12]
 8012206:	d05d      	beq.n	80122c4 <setvbuf+0x138>
 8012208:	ab01      	add	r3, sp, #4
 801220a:	466a      	mov	r2, sp
 801220c:	4621      	mov	r1, r4
 801220e:	4630      	mov	r0, r6
 8012210:	f000 faa4 	bl	801275c <__swhatbuf_r>
 8012214:	89a3      	ldrh	r3, [r4, #12]
 8012216:	4318      	orrs	r0, r3
 8012218:	81a0      	strh	r0, [r4, #12]
 801221a:	bb2d      	cbnz	r5, 8012268 <setvbuf+0xdc>
 801221c:	9d00      	ldr	r5, [sp, #0]
 801221e:	4628      	mov	r0, r5
 8012220:	f000 fb00 	bl	8012824 <malloc>
 8012224:	4607      	mov	r7, r0
 8012226:	2800      	cmp	r0, #0
 8012228:	d14e      	bne.n	80122c8 <setvbuf+0x13c>
 801222a:	f8dd 9000 	ldr.w	r9, [sp]
 801222e:	45a9      	cmp	r9, r5
 8012230:	d13c      	bne.n	80122ac <setvbuf+0x120>
 8012232:	f04f 30ff 	mov.w	r0, #4294967295
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	f043 0302 	orr.w	r3, r3, #2
 801223c:	81a3      	strh	r3, [r4, #12]
 801223e:	2300      	movs	r3, #0
 8012240:	60a3      	str	r3, [r4, #8]
 8012242:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012246:	6023      	str	r3, [r4, #0]
 8012248:	6123      	str	r3, [r4, #16]
 801224a:	2301      	movs	r3, #1
 801224c:	6163      	str	r3, [r4, #20]
 801224e:	b003      	add	sp, #12
 8012250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012254:	4b22      	ldr	r3, [pc, #136]	; (80122e0 <setvbuf+0x154>)
 8012256:	429c      	cmp	r4, r3
 8012258:	d101      	bne.n	801225e <setvbuf+0xd2>
 801225a:	68b4      	ldr	r4, [r6, #8]
 801225c:	e7a8      	b.n	80121b0 <setvbuf+0x24>
 801225e:	4b21      	ldr	r3, [pc, #132]	; (80122e4 <setvbuf+0x158>)
 8012260:	429c      	cmp	r4, r3
 8012262:	bf08      	it	eq
 8012264:	68f4      	ldreq	r4, [r6, #12]
 8012266:	e7a3      	b.n	80121b0 <setvbuf+0x24>
 8012268:	2f00      	cmp	r7, #0
 801226a:	d0d8      	beq.n	801221e <setvbuf+0x92>
 801226c:	69b3      	ldr	r3, [r6, #24]
 801226e:	b913      	cbnz	r3, 8012276 <setvbuf+0xea>
 8012270:	4630      	mov	r0, r6
 8012272:	f000 f9e9 	bl	8012648 <__sinit>
 8012276:	f1b8 0f01 	cmp.w	r8, #1
 801227a:	bf08      	it	eq
 801227c:	89a3      	ldrheq	r3, [r4, #12]
 801227e:	6027      	str	r7, [r4, #0]
 8012280:	bf04      	itt	eq
 8012282:	f043 0301 	orreq.w	r3, r3, #1
 8012286:	81a3      	strheq	r3, [r4, #12]
 8012288:	89a3      	ldrh	r3, [r4, #12]
 801228a:	f013 0008 	ands.w	r0, r3, #8
 801228e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8012292:	d01b      	beq.n	80122cc <setvbuf+0x140>
 8012294:	f013 0001 	ands.w	r0, r3, #1
 8012298:	bf18      	it	ne
 801229a:	426d      	negne	r5, r5
 801229c:	f04f 0300 	mov.w	r3, #0
 80122a0:	bf1d      	ittte	ne
 80122a2:	60a3      	strne	r3, [r4, #8]
 80122a4:	61a5      	strne	r5, [r4, #24]
 80122a6:	4618      	movne	r0, r3
 80122a8:	60a5      	streq	r5, [r4, #8]
 80122aa:	e7d0      	b.n	801224e <setvbuf+0xc2>
 80122ac:	4648      	mov	r0, r9
 80122ae:	f000 fab9 	bl	8012824 <malloc>
 80122b2:	4607      	mov	r7, r0
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d0bc      	beq.n	8012232 <setvbuf+0xa6>
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122be:	81a3      	strh	r3, [r4, #12]
 80122c0:	464d      	mov	r5, r9
 80122c2:	e7d3      	b.n	801226c <setvbuf+0xe0>
 80122c4:	2000      	movs	r0, #0
 80122c6:	e7b6      	b.n	8012236 <setvbuf+0xaa>
 80122c8:	46a9      	mov	r9, r5
 80122ca:	e7f5      	b.n	80122b8 <setvbuf+0x12c>
 80122cc:	60a0      	str	r0, [r4, #8]
 80122ce:	e7be      	b.n	801224e <setvbuf+0xc2>
 80122d0:	f04f 30ff 	mov.w	r0, #4294967295
 80122d4:	e7bb      	b.n	801224e <setvbuf+0xc2>
 80122d6:	bf00      	nop
 80122d8:	20000084 	.word	0x20000084
 80122dc:	08013800 	.word	0x08013800
 80122e0:	08013820 	.word	0x08013820
 80122e4:	080137e0 	.word	0x080137e0

080122e8 <__swbuf_r>:
 80122e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ea:	460e      	mov	r6, r1
 80122ec:	4614      	mov	r4, r2
 80122ee:	4605      	mov	r5, r0
 80122f0:	b118      	cbz	r0, 80122fa <__swbuf_r+0x12>
 80122f2:	6983      	ldr	r3, [r0, #24]
 80122f4:	b90b      	cbnz	r3, 80122fa <__swbuf_r+0x12>
 80122f6:	f000 f9a7 	bl	8012648 <__sinit>
 80122fa:	4b21      	ldr	r3, [pc, #132]	; (8012380 <__swbuf_r+0x98>)
 80122fc:	429c      	cmp	r4, r3
 80122fe:	d12a      	bne.n	8012356 <__swbuf_r+0x6e>
 8012300:	686c      	ldr	r4, [r5, #4]
 8012302:	69a3      	ldr	r3, [r4, #24]
 8012304:	60a3      	str	r3, [r4, #8]
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	071a      	lsls	r2, r3, #28
 801230a:	d52e      	bpl.n	801236a <__swbuf_r+0x82>
 801230c:	6923      	ldr	r3, [r4, #16]
 801230e:	b363      	cbz	r3, 801236a <__swbuf_r+0x82>
 8012310:	6923      	ldr	r3, [r4, #16]
 8012312:	6820      	ldr	r0, [r4, #0]
 8012314:	1ac0      	subs	r0, r0, r3
 8012316:	6963      	ldr	r3, [r4, #20]
 8012318:	b2f6      	uxtb	r6, r6
 801231a:	4283      	cmp	r3, r0
 801231c:	4637      	mov	r7, r6
 801231e:	dc04      	bgt.n	801232a <__swbuf_r+0x42>
 8012320:	4621      	mov	r1, r4
 8012322:	4628      	mov	r0, r5
 8012324:	f000 f926 	bl	8012574 <_fflush_r>
 8012328:	bb28      	cbnz	r0, 8012376 <__swbuf_r+0x8e>
 801232a:	68a3      	ldr	r3, [r4, #8]
 801232c:	3b01      	subs	r3, #1
 801232e:	60a3      	str	r3, [r4, #8]
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	1c5a      	adds	r2, r3, #1
 8012334:	6022      	str	r2, [r4, #0]
 8012336:	701e      	strb	r6, [r3, #0]
 8012338:	6963      	ldr	r3, [r4, #20]
 801233a:	3001      	adds	r0, #1
 801233c:	4283      	cmp	r3, r0
 801233e:	d004      	beq.n	801234a <__swbuf_r+0x62>
 8012340:	89a3      	ldrh	r3, [r4, #12]
 8012342:	07db      	lsls	r3, r3, #31
 8012344:	d519      	bpl.n	801237a <__swbuf_r+0x92>
 8012346:	2e0a      	cmp	r6, #10
 8012348:	d117      	bne.n	801237a <__swbuf_r+0x92>
 801234a:	4621      	mov	r1, r4
 801234c:	4628      	mov	r0, r5
 801234e:	f000 f911 	bl	8012574 <_fflush_r>
 8012352:	b190      	cbz	r0, 801237a <__swbuf_r+0x92>
 8012354:	e00f      	b.n	8012376 <__swbuf_r+0x8e>
 8012356:	4b0b      	ldr	r3, [pc, #44]	; (8012384 <__swbuf_r+0x9c>)
 8012358:	429c      	cmp	r4, r3
 801235a:	d101      	bne.n	8012360 <__swbuf_r+0x78>
 801235c:	68ac      	ldr	r4, [r5, #8]
 801235e:	e7d0      	b.n	8012302 <__swbuf_r+0x1a>
 8012360:	4b09      	ldr	r3, [pc, #36]	; (8012388 <__swbuf_r+0xa0>)
 8012362:	429c      	cmp	r4, r3
 8012364:	bf08      	it	eq
 8012366:	68ec      	ldreq	r4, [r5, #12]
 8012368:	e7cb      	b.n	8012302 <__swbuf_r+0x1a>
 801236a:	4621      	mov	r1, r4
 801236c:	4628      	mov	r0, r5
 801236e:	f000 f80d 	bl	801238c <__swsetup_r>
 8012372:	2800      	cmp	r0, #0
 8012374:	d0cc      	beq.n	8012310 <__swbuf_r+0x28>
 8012376:	f04f 37ff 	mov.w	r7, #4294967295
 801237a:	4638      	mov	r0, r7
 801237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801237e:	bf00      	nop
 8012380:	08013800 	.word	0x08013800
 8012384:	08013820 	.word	0x08013820
 8012388:	080137e0 	.word	0x080137e0

0801238c <__swsetup_r>:
 801238c:	4b32      	ldr	r3, [pc, #200]	; (8012458 <__swsetup_r+0xcc>)
 801238e:	b570      	push	{r4, r5, r6, lr}
 8012390:	681d      	ldr	r5, [r3, #0]
 8012392:	4606      	mov	r6, r0
 8012394:	460c      	mov	r4, r1
 8012396:	b125      	cbz	r5, 80123a2 <__swsetup_r+0x16>
 8012398:	69ab      	ldr	r3, [r5, #24]
 801239a:	b913      	cbnz	r3, 80123a2 <__swsetup_r+0x16>
 801239c:	4628      	mov	r0, r5
 801239e:	f000 f953 	bl	8012648 <__sinit>
 80123a2:	4b2e      	ldr	r3, [pc, #184]	; (801245c <__swsetup_r+0xd0>)
 80123a4:	429c      	cmp	r4, r3
 80123a6:	d10f      	bne.n	80123c8 <__swsetup_r+0x3c>
 80123a8:	686c      	ldr	r4, [r5, #4]
 80123aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	0715      	lsls	r5, r2, #28
 80123b2:	d42c      	bmi.n	801240e <__swsetup_r+0x82>
 80123b4:	06d0      	lsls	r0, r2, #27
 80123b6:	d411      	bmi.n	80123dc <__swsetup_r+0x50>
 80123b8:	2209      	movs	r2, #9
 80123ba:	6032      	str	r2, [r6, #0]
 80123bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c0:	81a3      	strh	r3, [r4, #12]
 80123c2:	f04f 30ff 	mov.w	r0, #4294967295
 80123c6:	e03e      	b.n	8012446 <__swsetup_r+0xba>
 80123c8:	4b25      	ldr	r3, [pc, #148]	; (8012460 <__swsetup_r+0xd4>)
 80123ca:	429c      	cmp	r4, r3
 80123cc:	d101      	bne.n	80123d2 <__swsetup_r+0x46>
 80123ce:	68ac      	ldr	r4, [r5, #8]
 80123d0:	e7eb      	b.n	80123aa <__swsetup_r+0x1e>
 80123d2:	4b24      	ldr	r3, [pc, #144]	; (8012464 <__swsetup_r+0xd8>)
 80123d4:	429c      	cmp	r4, r3
 80123d6:	bf08      	it	eq
 80123d8:	68ec      	ldreq	r4, [r5, #12]
 80123da:	e7e6      	b.n	80123aa <__swsetup_r+0x1e>
 80123dc:	0751      	lsls	r1, r2, #29
 80123de:	d512      	bpl.n	8012406 <__swsetup_r+0x7a>
 80123e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123e2:	b141      	cbz	r1, 80123f6 <__swsetup_r+0x6a>
 80123e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123e8:	4299      	cmp	r1, r3
 80123ea:	d002      	beq.n	80123f2 <__swsetup_r+0x66>
 80123ec:	4630      	mov	r0, r6
 80123ee:	f000 fa21 	bl	8012834 <_free_r>
 80123f2:	2300      	movs	r3, #0
 80123f4:	6363      	str	r3, [r4, #52]	; 0x34
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123fc:	81a3      	strh	r3, [r4, #12]
 80123fe:	2300      	movs	r3, #0
 8012400:	6063      	str	r3, [r4, #4]
 8012402:	6923      	ldr	r3, [r4, #16]
 8012404:	6023      	str	r3, [r4, #0]
 8012406:	89a3      	ldrh	r3, [r4, #12]
 8012408:	f043 0308 	orr.w	r3, r3, #8
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	b94b      	cbnz	r3, 8012426 <__swsetup_r+0x9a>
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801241c:	d003      	beq.n	8012426 <__swsetup_r+0x9a>
 801241e:	4621      	mov	r1, r4
 8012420:	4630      	mov	r0, r6
 8012422:	f000 f9bf 	bl	80127a4 <__smakebuf_r>
 8012426:	89a2      	ldrh	r2, [r4, #12]
 8012428:	f012 0301 	ands.w	r3, r2, #1
 801242c:	d00c      	beq.n	8012448 <__swsetup_r+0xbc>
 801242e:	2300      	movs	r3, #0
 8012430:	60a3      	str	r3, [r4, #8]
 8012432:	6963      	ldr	r3, [r4, #20]
 8012434:	425b      	negs	r3, r3
 8012436:	61a3      	str	r3, [r4, #24]
 8012438:	6923      	ldr	r3, [r4, #16]
 801243a:	b953      	cbnz	r3, 8012452 <__swsetup_r+0xc6>
 801243c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012440:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012444:	d1ba      	bne.n	80123bc <__swsetup_r+0x30>
 8012446:	bd70      	pop	{r4, r5, r6, pc}
 8012448:	0792      	lsls	r2, r2, #30
 801244a:	bf58      	it	pl
 801244c:	6963      	ldrpl	r3, [r4, #20]
 801244e:	60a3      	str	r3, [r4, #8]
 8012450:	e7f2      	b.n	8012438 <__swsetup_r+0xac>
 8012452:	2000      	movs	r0, #0
 8012454:	e7f7      	b.n	8012446 <__swsetup_r+0xba>
 8012456:	bf00      	nop
 8012458:	20000084 	.word	0x20000084
 801245c:	08013800 	.word	0x08013800
 8012460:	08013820 	.word	0x08013820
 8012464:	080137e0 	.word	0x080137e0

08012468 <__sflush_r>:
 8012468:	898a      	ldrh	r2, [r1, #12]
 801246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801246e:	4605      	mov	r5, r0
 8012470:	0710      	lsls	r0, r2, #28
 8012472:	460c      	mov	r4, r1
 8012474:	d458      	bmi.n	8012528 <__sflush_r+0xc0>
 8012476:	684b      	ldr	r3, [r1, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	dc05      	bgt.n	8012488 <__sflush_r+0x20>
 801247c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801247e:	2b00      	cmp	r3, #0
 8012480:	dc02      	bgt.n	8012488 <__sflush_r+0x20>
 8012482:	2000      	movs	r0, #0
 8012484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801248a:	2e00      	cmp	r6, #0
 801248c:	d0f9      	beq.n	8012482 <__sflush_r+0x1a>
 801248e:	2300      	movs	r3, #0
 8012490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012494:	682f      	ldr	r7, [r5, #0]
 8012496:	6a21      	ldr	r1, [r4, #32]
 8012498:	602b      	str	r3, [r5, #0]
 801249a:	d032      	beq.n	8012502 <__sflush_r+0x9a>
 801249c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801249e:	89a3      	ldrh	r3, [r4, #12]
 80124a0:	075a      	lsls	r2, r3, #29
 80124a2:	d505      	bpl.n	80124b0 <__sflush_r+0x48>
 80124a4:	6863      	ldr	r3, [r4, #4]
 80124a6:	1ac0      	subs	r0, r0, r3
 80124a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80124aa:	b10b      	cbz	r3, 80124b0 <__sflush_r+0x48>
 80124ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80124ae:	1ac0      	subs	r0, r0, r3
 80124b0:	2300      	movs	r3, #0
 80124b2:	4602      	mov	r2, r0
 80124b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124b6:	6a21      	ldr	r1, [r4, #32]
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b0      	blx	r6
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	89a3      	ldrh	r3, [r4, #12]
 80124c0:	d106      	bne.n	80124d0 <__sflush_r+0x68>
 80124c2:	6829      	ldr	r1, [r5, #0]
 80124c4:	291d      	cmp	r1, #29
 80124c6:	d848      	bhi.n	801255a <__sflush_r+0xf2>
 80124c8:	4a29      	ldr	r2, [pc, #164]	; (8012570 <__sflush_r+0x108>)
 80124ca:	40ca      	lsrs	r2, r1
 80124cc:	07d6      	lsls	r6, r2, #31
 80124ce:	d544      	bpl.n	801255a <__sflush_r+0xf2>
 80124d0:	2200      	movs	r2, #0
 80124d2:	6062      	str	r2, [r4, #4]
 80124d4:	04d9      	lsls	r1, r3, #19
 80124d6:	6922      	ldr	r2, [r4, #16]
 80124d8:	6022      	str	r2, [r4, #0]
 80124da:	d504      	bpl.n	80124e6 <__sflush_r+0x7e>
 80124dc:	1c42      	adds	r2, r0, #1
 80124de:	d101      	bne.n	80124e4 <__sflush_r+0x7c>
 80124e0:	682b      	ldr	r3, [r5, #0]
 80124e2:	b903      	cbnz	r3, 80124e6 <__sflush_r+0x7e>
 80124e4:	6560      	str	r0, [r4, #84]	; 0x54
 80124e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124e8:	602f      	str	r7, [r5, #0]
 80124ea:	2900      	cmp	r1, #0
 80124ec:	d0c9      	beq.n	8012482 <__sflush_r+0x1a>
 80124ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124f2:	4299      	cmp	r1, r3
 80124f4:	d002      	beq.n	80124fc <__sflush_r+0x94>
 80124f6:	4628      	mov	r0, r5
 80124f8:	f000 f99c 	bl	8012834 <_free_r>
 80124fc:	2000      	movs	r0, #0
 80124fe:	6360      	str	r0, [r4, #52]	; 0x34
 8012500:	e7c0      	b.n	8012484 <__sflush_r+0x1c>
 8012502:	2301      	movs	r3, #1
 8012504:	4628      	mov	r0, r5
 8012506:	47b0      	blx	r6
 8012508:	1c41      	adds	r1, r0, #1
 801250a:	d1c8      	bne.n	801249e <__sflush_r+0x36>
 801250c:	682b      	ldr	r3, [r5, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d0c5      	beq.n	801249e <__sflush_r+0x36>
 8012512:	2b1d      	cmp	r3, #29
 8012514:	d001      	beq.n	801251a <__sflush_r+0xb2>
 8012516:	2b16      	cmp	r3, #22
 8012518:	d101      	bne.n	801251e <__sflush_r+0xb6>
 801251a:	602f      	str	r7, [r5, #0]
 801251c:	e7b1      	b.n	8012482 <__sflush_r+0x1a>
 801251e:	89a3      	ldrh	r3, [r4, #12]
 8012520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	e7ad      	b.n	8012484 <__sflush_r+0x1c>
 8012528:	690f      	ldr	r7, [r1, #16]
 801252a:	2f00      	cmp	r7, #0
 801252c:	d0a9      	beq.n	8012482 <__sflush_r+0x1a>
 801252e:	0793      	lsls	r3, r2, #30
 8012530:	680e      	ldr	r6, [r1, #0]
 8012532:	bf08      	it	eq
 8012534:	694b      	ldreq	r3, [r1, #20]
 8012536:	600f      	str	r7, [r1, #0]
 8012538:	bf18      	it	ne
 801253a:	2300      	movne	r3, #0
 801253c:	eba6 0807 	sub.w	r8, r6, r7
 8012540:	608b      	str	r3, [r1, #8]
 8012542:	f1b8 0f00 	cmp.w	r8, #0
 8012546:	dd9c      	ble.n	8012482 <__sflush_r+0x1a>
 8012548:	4643      	mov	r3, r8
 801254a:	463a      	mov	r2, r7
 801254c:	6a21      	ldr	r1, [r4, #32]
 801254e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012550:	4628      	mov	r0, r5
 8012552:	47b0      	blx	r6
 8012554:	2800      	cmp	r0, #0
 8012556:	dc06      	bgt.n	8012566 <__sflush_r+0xfe>
 8012558:	89a3      	ldrh	r3, [r4, #12]
 801255a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801255e:	81a3      	strh	r3, [r4, #12]
 8012560:	f04f 30ff 	mov.w	r0, #4294967295
 8012564:	e78e      	b.n	8012484 <__sflush_r+0x1c>
 8012566:	4407      	add	r7, r0
 8012568:	eba8 0800 	sub.w	r8, r8, r0
 801256c:	e7e9      	b.n	8012542 <__sflush_r+0xda>
 801256e:	bf00      	nop
 8012570:	20400001 	.word	0x20400001

08012574 <_fflush_r>:
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	690b      	ldr	r3, [r1, #16]
 8012578:	4605      	mov	r5, r0
 801257a:	460c      	mov	r4, r1
 801257c:	b1db      	cbz	r3, 80125b6 <_fflush_r+0x42>
 801257e:	b118      	cbz	r0, 8012588 <_fflush_r+0x14>
 8012580:	6983      	ldr	r3, [r0, #24]
 8012582:	b90b      	cbnz	r3, 8012588 <_fflush_r+0x14>
 8012584:	f000 f860 	bl	8012648 <__sinit>
 8012588:	4b0c      	ldr	r3, [pc, #48]	; (80125bc <_fflush_r+0x48>)
 801258a:	429c      	cmp	r4, r3
 801258c:	d109      	bne.n	80125a2 <_fflush_r+0x2e>
 801258e:	686c      	ldr	r4, [r5, #4]
 8012590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012594:	b17b      	cbz	r3, 80125b6 <_fflush_r+0x42>
 8012596:	4621      	mov	r1, r4
 8012598:	4628      	mov	r0, r5
 801259a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801259e:	f7ff bf63 	b.w	8012468 <__sflush_r>
 80125a2:	4b07      	ldr	r3, [pc, #28]	; (80125c0 <_fflush_r+0x4c>)
 80125a4:	429c      	cmp	r4, r3
 80125a6:	d101      	bne.n	80125ac <_fflush_r+0x38>
 80125a8:	68ac      	ldr	r4, [r5, #8]
 80125aa:	e7f1      	b.n	8012590 <_fflush_r+0x1c>
 80125ac:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <_fflush_r+0x50>)
 80125ae:	429c      	cmp	r4, r3
 80125b0:	bf08      	it	eq
 80125b2:	68ec      	ldreq	r4, [r5, #12]
 80125b4:	e7ec      	b.n	8012590 <_fflush_r+0x1c>
 80125b6:	2000      	movs	r0, #0
 80125b8:	bd38      	pop	{r3, r4, r5, pc}
 80125ba:	bf00      	nop
 80125bc:	08013800 	.word	0x08013800
 80125c0:	08013820 	.word	0x08013820
 80125c4:	080137e0 	.word	0x080137e0

080125c8 <std>:
 80125c8:	2300      	movs	r3, #0
 80125ca:	b510      	push	{r4, lr}
 80125cc:	4604      	mov	r4, r0
 80125ce:	e9c0 3300 	strd	r3, r3, [r0]
 80125d2:	6083      	str	r3, [r0, #8]
 80125d4:	8181      	strh	r1, [r0, #12]
 80125d6:	6643      	str	r3, [r0, #100]	; 0x64
 80125d8:	81c2      	strh	r2, [r0, #14]
 80125da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125de:	6183      	str	r3, [r0, #24]
 80125e0:	4619      	mov	r1, r3
 80125e2:	2208      	movs	r2, #8
 80125e4:	305c      	adds	r0, #92	; 0x5c
 80125e6:	f7ff fd45 	bl	8012074 <memset>
 80125ea:	4b05      	ldr	r3, [pc, #20]	; (8012600 <std+0x38>)
 80125ec:	6263      	str	r3, [r4, #36]	; 0x24
 80125ee:	4b05      	ldr	r3, [pc, #20]	; (8012604 <std+0x3c>)
 80125f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80125f2:	4b05      	ldr	r3, [pc, #20]	; (8012608 <std+0x40>)
 80125f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125f6:	4b05      	ldr	r3, [pc, #20]	; (801260c <std+0x44>)
 80125f8:	6224      	str	r4, [r4, #32]
 80125fa:	6323      	str	r3, [r4, #48]	; 0x30
 80125fc:	bd10      	pop	{r4, pc}
 80125fe:	bf00      	nop
 8012600:	08012f35 	.word	0x08012f35
 8012604:	08012f57 	.word	0x08012f57
 8012608:	08012f8f 	.word	0x08012f8f
 801260c:	08012fb3 	.word	0x08012fb3

08012610 <_cleanup_r>:
 8012610:	4901      	ldr	r1, [pc, #4]	; (8012618 <_cleanup_r+0x8>)
 8012612:	f000 b885 	b.w	8012720 <_fwalk_reent>
 8012616:	bf00      	nop
 8012618:	08012575 	.word	0x08012575

0801261c <__sfmoreglue>:
 801261c:	b570      	push	{r4, r5, r6, lr}
 801261e:	1e4a      	subs	r2, r1, #1
 8012620:	2568      	movs	r5, #104	; 0x68
 8012622:	4355      	muls	r5, r2
 8012624:	460e      	mov	r6, r1
 8012626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801262a:	f000 f951 	bl	80128d0 <_malloc_r>
 801262e:	4604      	mov	r4, r0
 8012630:	b140      	cbz	r0, 8012644 <__sfmoreglue+0x28>
 8012632:	2100      	movs	r1, #0
 8012634:	e9c0 1600 	strd	r1, r6, [r0]
 8012638:	300c      	adds	r0, #12
 801263a:	60a0      	str	r0, [r4, #8]
 801263c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012640:	f7ff fd18 	bl	8012074 <memset>
 8012644:	4620      	mov	r0, r4
 8012646:	bd70      	pop	{r4, r5, r6, pc}

08012648 <__sinit>:
 8012648:	6983      	ldr	r3, [r0, #24]
 801264a:	b510      	push	{r4, lr}
 801264c:	4604      	mov	r4, r0
 801264e:	bb33      	cbnz	r3, 801269e <__sinit+0x56>
 8012650:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012654:	6503      	str	r3, [r0, #80]	; 0x50
 8012656:	4b12      	ldr	r3, [pc, #72]	; (80126a0 <__sinit+0x58>)
 8012658:	4a12      	ldr	r2, [pc, #72]	; (80126a4 <__sinit+0x5c>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	6282      	str	r2, [r0, #40]	; 0x28
 801265e:	4298      	cmp	r0, r3
 8012660:	bf04      	itt	eq
 8012662:	2301      	moveq	r3, #1
 8012664:	6183      	streq	r3, [r0, #24]
 8012666:	f000 f81f 	bl	80126a8 <__sfp>
 801266a:	6060      	str	r0, [r4, #4]
 801266c:	4620      	mov	r0, r4
 801266e:	f000 f81b 	bl	80126a8 <__sfp>
 8012672:	60a0      	str	r0, [r4, #8]
 8012674:	4620      	mov	r0, r4
 8012676:	f000 f817 	bl	80126a8 <__sfp>
 801267a:	2200      	movs	r2, #0
 801267c:	60e0      	str	r0, [r4, #12]
 801267e:	2104      	movs	r1, #4
 8012680:	6860      	ldr	r0, [r4, #4]
 8012682:	f7ff ffa1 	bl	80125c8 <std>
 8012686:	2201      	movs	r2, #1
 8012688:	2109      	movs	r1, #9
 801268a:	68a0      	ldr	r0, [r4, #8]
 801268c:	f7ff ff9c 	bl	80125c8 <std>
 8012690:	2202      	movs	r2, #2
 8012692:	2112      	movs	r1, #18
 8012694:	68e0      	ldr	r0, [r4, #12]
 8012696:	f7ff ff97 	bl	80125c8 <std>
 801269a:	2301      	movs	r3, #1
 801269c:	61a3      	str	r3, [r4, #24]
 801269e:	bd10      	pop	{r4, pc}
 80126a0:	080137dc 	.word	0x080137dc
 80126a4:	08012611 	.word	0x08012611

080126a8 <__sfp>:
 80126a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126aa:	4b1b      	ldr	r3, [pc, #108]	; (8012718 <__sfp+0x70>)
 80126ac:	681e      	ldr	r6, [r3, #0]
 80126ae:	69b3      	ldr	r3, [r6, #24]
 80126b0:	4607      	mov	r7, r0
 80126b2:	b913      	cbnz	r3, 80126ba <__sfp+0x12>
 80126b4:	4630      	mov	r0, r6
 80126b6:	f7ff ffc7 	bl	8012648 <__sinit>
 80126ba:	3648      	adds	r6, #72	; 0x48
 80126bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126c0:	3b01      	subs	r3, #1
 80126c2:	d503      	bpl.n	80126cc <__sfp+0x24>
 80126c4:	6833      	ldr	r3, [r6, #0]
 80126c6:	b133      	cbz	r3, 80126d6 <__sfp+0x2e>
 80126c8:	6836      	ldr	r6, [r6, #0]
 80126ca:	e7f7      	b.n	80126bc <__sfp+0x14>
 80126cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126d0:	b16d      	cbz	r5, 80126ee <__sfp+0x46>
 80126d2:	3468      	adds	r4, #104	; 0x68
 80126d4:	e7f4      	b.n	80126c0 <__sfp+0x18>
 80126d6:	2104      	movs	r1, #4
 80126d8:	4638      	mov	r0, r7
 80126da:	f7ff ff9f 	bl	801261c <__sfmoreglue>
 80126de:	6030      	str	r0, [r6, #0]
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d1f1      	bne.n	80126c8 <__sfp+0x20>
 80126e4:	230c      	movs	r3, #12
 80126e6:	603b      	str	r3, [r7, #0]
 80126e8:	4604      	mov	r4, r0
 80126ea:	4620      	mov	r0, r4
 80126ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ee:	4b0b      	ldr	r3, [pc, #44]	; (801271c <__sfp+0x74>)
 80126f0:	6665      	str	r5, [r4, #100]	; 0x64
 80126f2:	e9c4 5500 	strd	r5, r5, [r4]
 80126f6:	60a5      	str	r5, [r4, #8]
 80126f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80126fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012700:	2208      	movs	r2, #8
 8012702:	4629      	mov	r1, r5
 8012704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012708:	f7ff fcb4 	bl	8012074 <memset>
 801270c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012714:	e7e9      	b.n	80126ea <__sfp+0x42>
 8012716:	bf00      	nop
 8012718:	080137dc 	.word	0x080137dc
 801271c:	ffff0001 	.word	0xffff0001

08012720 <_fwalk_reent>:
 8012720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012724:	4680      	mov	r8, r0
 8012726:	4689      	mov	r9, r1
 8012728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801272c:	2600      	movs	r6, #0
 801272e:	b914      	cbnz	r4, 8012736 <_fwalk_reent+0x16>
 8012730:	4630      	mov	r0, r6
 8012732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012736:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801273a:	3f01      	subs	r7, #1
 801273c:	d501      	bpl.n	8012742 <_fwalk_reent+0x22>
 801273e:	6824      	ldr	r4, [r4, #0]
 8012740:	e7f5      	b.n	801272e <_fwalk_reent+0xe>
 8012742:	89ab      	ldrh	r3, [r5, #12]
 8012744:	2b01      	cmp	r3, #1
 8012746:	d907      	bls.n	8012758 <_fwalk_reent+0x38>
 8012748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801274c:	3301      	adds	r3, #1
 801274e:	d003      	beq.n	8012758 <_fwalk_reent+0x38>
 8012750:	4629      	mov	r1, r5
 8012752:	4640      	mov	r0, r8
 8012754:	47c8      	blx	r9
 8012756:	4306      	orrs	r6, r0
 8012758:	3568      	adds	r5, #104	; 0x68
 801275a:	e7ee      	b.n	801273a <_fwalk_reent+0x1a>

0801275c <__swhatbuf_r>:
 801275c:	b570      	push	{r4, r5, r6, lr}
 801275e:	460e      	mov	r6, r1
 8012760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012764:	2900      	cmp	r1, #0
 8012766:	b096      	sub	sp, #88	; 0x58
 8012768:	4614      	mov	r4, r2
 801276a:	461d      	mov	r5, r3
 801276c:	da07      	bge.n	801277e <__swhatbuf_r+0x22>
 801276e:	2300      	movs	r3, #0
 8012770:	602b      	str	r3, [r5, #0]
 8012772:	89b3      	ldrh	r3, [r6, #12]
 8012774:	061a      	lsls	r2, r3, #24
 8012776:	d410      	bmi.n	801279a <__swhatbuf_r+0x3e>
 8012778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801277c:	e00e      	b.n	801279c <__swhatbuf_r+0x40>
 801277e:	466a      	mov	r2, sp
 8012780:	f000 fc3e 	bl	8013000 <_fstat_r>
 8012784:	2800      	cmp	r0, #0
 8012786:	dbf2      	blt.n	801276e <__swhatbuf_r+0x12>
 8012788:	9a01      	ldr	r2, [sp, #4]
 801278a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801278e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012792:	425a      	negs	r2, r3
 8012794:	415a      	adcs	r2, r3
 8012796:	602a      	str	r2, [r5, #0]
 8012798:	e7ee      	b.n	8012778 <__swhatbuf_r+0x1c>
 801279a:	2340      	movs	r3, #64	; 0x40
 801279c:	2000      	movs	r0, #0
 801279e:	6023      	str	r3, [r4, #0]
 80127a0:	b016      	add	sp, #88	; 0x58
 80127a2:	bd70      	pop	{r4, r5, r6, pc}

080127a4 <__smakebuf_r>:
 80127a4:	898b      	ldrh	r3, [r1, #12]
 80127a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127a8:	079d      	lsls	r5, r3, #30
 80127aa:	4606      	mov	r6, r0
 80127ac:	460c      	mov	r4, r1
 80127ae:	d507      	bpl.n	80127c0 <__smakebuf_r+0x1c>
 80127b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127b4:	6023      	str	r3, [r4, #0]
 80127b6:	6123      	str	r3, [r4, #16]
 80127b8:	2301      	movs	r3, #1
 80127ba:	6163      	str	r3, [r4, #20]
 80127bc:	b002      	add	sp, #8
 80127be:	bd70      	pop	{r4, r5, r6, pc}
 80127c0:	ab01      	add	r3, sp, #4
 80127c2:	466a      	mov	r2, sp
 80127c4:	f7ff ffca 	bl	801275c <__swhatbuf_r>
 80127c8:	9900      	ldr	r1, [sp, #0]
 80127ca:	4605      	mov	r5, r0
 80127cc:	4630      	mov	r0, r6
 80127ce:	f000 f87f 	bl	80128d0 <_malloc_r>
 80127d2:	b948      	cbnz	r0, 80127e8 <__smakebuf_r+0x44>
 80127d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d8:	059a      	lsls	r2, r3, #22
 80127da:	d4ef      	bmi.n	80127bc <__smakebuf_r+0x18>
 80127dc:	f023 0303 	bic.w	r3, r3, #3
 80127e0:	f043 0302 	orr.w	r3, r3, #2
 80127e4:	81a3      	strh	r3, [r4, #12]
 80127e6:	e7e3      	b.n	80127b0 <__smakebuf_r+0xc>
 80127e8:	4b0d      	ldr	r3, [pc, #52]	; (8012820 <__smakebuf_r+0x7c>)
 80127ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80127ec:	89a3      	ldrh	r3, [r4, #12]
 80127ee:	6020      	str	r0, [r4, #0]
 80127f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	9b00      	ldr	r3, [sp, #0]
 80127f8:	6163      	str	r3, [r4, #20]
 80127fa:	9b01      	ldr	r3, [sp, #4]
 80127fc:	6120      	str	r0, [r4, #16]
 80127fe:	b15b      	cbz	r3, 8012818 <__smakebuf_r+0x74>
 8012800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012804:	4630      	mov	r0, r6
 8012806:	f000 fc0d 	bl	8013024 <_isatty_r>
 801280a:	b128      	cbz	r0, 8012818 <__smakebuf_r+0x74>
 801280c:	89a3      	ldrh	r3, [r4, #12]
 801280e:	f023 0303 	bic.w	r3, r3, #3
 8012812:	f043 0301 	orr.w	r3, r3, #1
 8012816:	81a3      	strh	r3, [r4, #12]
 8012818:	89a3      	ldrh	r3, [r4, #12]
 801281a:	431d      	orrs	r5, r3
 801281c:	81a5      	strh	r5, [r4, #12]
 801281e:	e7cd      	b.n	80127bc <__smakebuf_r+0x18>
 8012820:	08012611 	.word	0x08012611

08012824 <malloc>:
 8012824:	4b02      	ldr	r3, [pc, #8]	; (8012830 <malloc+0xc>)
 8012826:	4601      	mov	r1, r0
 8012828:	6818      	ldr	r0, [r3, #0]
 801282a:	f000 b851 	b.w	80128d0 <_malloc_r>
 801282e:	bf00      	nop
 8012830:	20000084 	.word	0x20000084

08012834 <_free_r>:
 8012834:	b538      	push	{r3, r4, r5, lr}
 8012836:	4605      	mov	r5, r0
 8012838:	2900      	cmp	r1, #0
 801283a:	d045      	beq.n	80128c8 <_free_r+0x94>
 801283c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012840:	1f0c      	subs	r4, r1, #4
 8012842:	2b00      	cmp	r3, #0
 8012844:	bfb8      	it	lt
 8012846:	18e4      	addlt	r4, r4, r3
 8012848:	f000 fc0e 	bl	8013068 <__malloc_lock>
 801284c:	4a1f      	ldr	r2, [pc, #124]	; (80128cc <_free_r+0x98>)
 801284e:	6813      	ldr	r3, [r2, #0]
 8012850:	4610      	mov	r0, r2
 8012852:	b933      	cbnz	r3, 8012862 <_free_r+0x2e>
 8012854:	6063      	str	r3, [r4, #4]
 8012856:	6014      	str	r4, [r2, #0]
 8012858:	4628      	mov	r0, r5
 801285a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801285e:	f000 bc04 	b.w	801306a <__malloc_unlock>
 8012862:	42a3      	cmp	r3, r4
 8012864:	d90c      	bls.n	8012880 <_free_r+0x4c>
 8012866:	6821      	ldr	r1, [r4, #0]
 8012868:	1862      	adds	r2, r4, r1
 801286a:	4293      	cmp	r3, r2
 801286c:	bf04      	itt	eq
 801286e:	681a      	ldreq	r2, [r3, #0]
 8012870:	685b      	ldreq	r3, [r3, #4]
 8012872:	6063      	str	r3, [r4, #4]
 8012874:	bf04      	itt	eq
 8012876:	1852      	addeq	r2, r2, r1
 8012878:	6022      	streq	r2, [r4, #0]
 801287a:	6004      	str	r4, [r0, #0]
 801287c:	e7ec      	b.n	8012858 <_free_r+0x24>
 801287e:	4613      	mov	r3, r2
 8012880:	685a      	ldr	r2, [r3, #4]
 8012882:	b10a      	cbz	r2, 8012888 <_free_r+0x54>
 8012884:	42a2      	cmp	r2, r4
 8012886:	d9fa      	bls.n	801287e <_free_r+0x4a>
 8012888:	6819      	ldr	r1, [r3, #0]
 801288a:	1858      	adds	r0, r3, r1
 801288c:	42a0      	cmp	r0, r4
 801288e:	d10b      	bne.n	80128a8 <_free_r+0x74>
 8012890:	6820      	ldr	r0, [r4, #0]
 8012892:	4401      	add	r1, r0
 8012894:	1858      	adds	r0, r3, r1
 8012896:	4282      	cmp	r2, r0
 8012898:	6019      	str	r1, [r3, #0]
 801289a:	d1dd      	bne.n	8012858 <_free_r+0x24>
 801289c:	6810      	ldr	r0, [r2, #0]
 801289e:	6852      	ldr	r2, [r2, #4]
 80128a0:	605a      	str	r2, [r3, #4]
 80128a2:	4401      	add	r1, r0
 80128a4:	6019      	str	r1, [r3, #0]
 80128a6:	e7d7      	b.n	8012858 <_free_r+0x24>
 80128a8:	d902      	bls.n	80128b0 <_free_r+0x7c>
 80128aa:	230c      	movs	r3, #12
 80128ac:	602b      	str	r3, [r5, #0]
 80128ae:	e7d3      	b.n	8012858 <_free_r+0x24>
 80128b0:	6820      	ldr	r0, [r4, #0]
 80128b2:	1821      	adds	r1, r4, r0
 80128b4:	428a      	cmp	r2, r1
 80128b6:	bf04      	itt	eq
 80128b8:	6811      	ldreq	r1, [r2, #0]
 80128ba:	6852      	ldreq	r2, [r2, #4]
 80128bc:	6062      	str	r2, [r4, #4]
 80128be:	bf04      	itt	eq
 80128c0:	1809      	addeq	r1, r1, r0
 80128c2:	6021      	streq	r1, [r4, #0]
 80128c4:	605c      	str	r4, [r3, #4]
 80128c6:	e7c7      	b.n	8012858 <_free_r+0x24>
 80128c8:	bd38      	pop	{r3, r4, r5, pc}
 80128ca:	bf00      	nop
 80128cc:	20000118 	.word	0x20000118

080128d0 <_malloc_r>:
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	1ccd      	adds	r5, r1, #3
 80128d4:	f025 0503 	bic.w	r5, r5, #3
 80128d8:	3508      	adds	r5, #8
 80128da:	2d0c      	cmp	r5, #12
 80128dc:	bf38      	it	cc
 80128de:	250c      	movcc	r5, #12
 80128e0:	2d00      	cmp	r5, #0
 80128e2:	4606      	mov	r6, r0
 80128e4:	db01      	blt.n	80128ea <_malloc_r+0x1a>
 80128e6:	42a9      	cmp	r1, r5
 80128e8:	d903      	bls.n	80128f2 <_malloc_r+0x22>
 80128ea:	230c      	movs	r3, #12
 80128ec:	6033      	str	r3, [r6, #0]
 80128ee:	2000      	movs	r0, #0
 80128f0:	bd70      	pop	{r4, r5, r6, pc}
 80128f2:	f000 fbb9 	bl	8013068 <__malloc_lock>
 80128f6:	4a21      	ldr	r2, [pc, #132]	; (801297c <_malloc_r+0xac>)
 80128f8:	6814      	ldr	r4, [r2, #0]
 80128fa:	4621      	mov	r1, r4
 80128fc:	b991      	cbnz	r1, 8012924 <_malloc_r+0x54>
 80128fe:	4c20      	ldr	r4, [pc, #128]	; (8012980 <_malloc_r+0xb0>)
 8012900:	6823      	ldr	r3, [r4, #0]
 8012902:	b91b      	cbnz	r3, 801290c <_malloc_r+0x3c>
 8012904:	4630      	mov	r0, r6
 8012906:	f000 fb05 	bl	8012f14 <_sbrk_r>
 801290a:	6020      	str	r0, [r4, #0]
 801290c:	4629      	mov	r1, r5
 801290e:	4630      	mov	r0, r6
 8012910:	f000 fb00 	bl	8012f14 <_sbrk_r>
 8012914:	1c43      	adds	r3, r0, #1
 8012916:	d124      	bne.n	8012962 <_malloc_r+0x92>
 8012918:	230c      	movs	r3, #12
 801291a:	6033      	str	r3, [r6, #0]
 801291c:	4630      	mov	r0, r6
 801291e:	f000 fba4 	bl	801306a <__malloc_unlock>
 8012922:	e7e4      	b.n	80128ee <_malloc_r+0x1e>
 8012924:	680b      	ldr	r3, [r1, #0]
 8012926:	1b5b      	subs	r3, r3, r5
 8012928:	d418      	bmi.n	801295c <_malloc_r+0x8c>
 801292a:	2b0b      	cmp	r3, #11
 801292c:	d90f      	bls.n	801294e <_malloc_r+0x7e>
 801292e:	600b      	str	r3, [r1, #0]
 8012930:	50cd      	str	r5, [r1, r3]
 8012932:	18cc      	adds	r4, r1, r3
 8012934:	4630      	mov	r0, r6
 8012936:	f000 fb98 	bl	801306a <__malloc_unlock>
 801293a:	f104 000b 	add.w	r0, r4, #11
 801293e:	1d23      	adds	r3, r4, #4
 8012940:	f020 0007 	bic.w	r0, r0, #7
 8012944:	1ac3      	subs	r3, r0, r3
 8012946:	d0d3      	beq.n	80128f0 <_malloc_r+0x20>
 8012948:	425a      	negs	r2, r3
 801294a:	50e2      	str	r2, [r4, r3]
 801294c:	e7d0      	b.n	80128f0 <_malloc_r+0x20>
 801294e:	428c      	cmp	r4, r1
 8012950:	684b      	ldr	r3, [r1, #4]
 8012952:	bf16      	itet	ne
 8012954:	6063      	strne	r3, [r4, #4]
 8012956:	6013      	streq	r3, [r2, #0]
 8012958:	460c      	movne	r4, r1
 801295a:	e7eb      	b.n	8012934 <_malloc_r+0x64>
 801295c:	460c      	mov	r4, r1
 801295e:	6849      	ldr	r1, [r1, #4]
 8012960:	e7cc      	b.n	80128fc <_malloc_r+0x2c>
 8012962:	1cc4      	adds	r4, r0, #3
 8012964:	f024 0403 	bic.w	r4, r4, #3
 8012968:	42a0      	cmp	r0, r4
 801296a:	d005      	beq.n	8012978 <_malloc_r+0xa8>
 801296c:	1a21      	subs	r1, r4, r0
 801296e:	4630      	mov	r0, r6
 8012970:	f000 fad0 	bl	8012f14 <_sbrk_r>
 8012974:	3001      	adds	r0, #1
 8012976:	d0cf      	beq.n	8012918 <_malloc_r+0x48>
 8012978:	6025      	str	r5, [r4, #0]
 801297a:	e7db      	b.n	8012934 <_malloc_r+0x64>
 801297c:	20000118 	.word	0x20000118
 8012980:	2000011c 	.word	0x2000011c

08012984 <__sfputc_r>:
 8012984:	6893      	ldr	r3, [r2, #8]
 8012986:	3b01      	subs	r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	b410      	push	{r4}
 801298c:	6093      	str	r3, [r2, #8]
 801298e:	da08      	bge.n	80129a2 <__sfputc_r+0x1e>
 8012990:	6994      	ldr	r4, [r2, #24]
 8012992:	42a3      	cmp	r3, r4
 8012994:	db01      	blt.n	801299a <__sfputc_r+0x16>
 8012996:	290a      	cmp	r1, #10
 8012998:	d103      	bne.n	80129a2 <__sfputc_r+0x1e>
 801299a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801299e:	f7ff bca3 	b.w	80122e8 <__swbuf_r>
 80129a2:	6813      	ldr	r3, [r2, #0]
 80129a4:	1c58      	adds	r0, r3, #1
 80129a6:	6010      	str	r0, [r2, #0]
 80129a8:	7019      	strb	r1, [r3, #0]
 80129aa:	4608      	mov	r0, r1
 80129ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <__sfputs_r>:
 80129b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b4:	4606      	mov	r6, r0
 80129b6:	460f      	mov	r7, r1
 80129b8:	4614      	mov	r4, r2
 80129ba:	18d5      	adds	r5, r2, r3
 80129bc:	42ac      	cmp	r4, r5
 80129be:	d101      	bne.n	80129c4 <__sfputs_r+0x12>
 80129c0:	2000      	movs	r0, #0
 80129c2:	e007      	b.n	80129d4 <__sfputs_r+0x22>
 80129c4:	463a      	mov	r2, r7
 80129c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7ff ffda 	bl	8012984 <__sfputc_r>
 80129d0:	1c43      	adds	r3, r0, #1
 80129d2:	d1f3      	bne.n	80129bc <__sfputs_r+0xa>
 80129d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129d8 <_vfiprintf_r>:
 80129d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129dc:	460c      	mov	r4, r1
 80129de:	b09d      	sub	sp, #116	; 0x74
 80129e0:	4617      	mov	r7, r2
 80129e2:	461d      	mov	r5, r3
 80129e4:	4606      	mov	r6, r0
 80129e6:	b118      	cbz	r0, 80129f0 <_vfiprintf_r+0x18>
 80129e8:	6983      	ldr	r3, [r0, #24]
 80129ea:	b90b      	cbnz	r3, 80129f0 <_vfiprintf_r+0x18>
 80129ec:	f7ff fe2c 	bl	8012648 <__sinit>
 80129f0:	4b7c      	ldr	r3, [pc, #496]	; (8012be4 <_vfiprintf_r+0x20c>)
 80129f2:	429c      	cmp	r4, r3
 80129f4:	d158      	bne.n	8012aa8 <_vfiprintf_r+0xd0>
 80129f6:	6874      	ldr	r4, [r6, #4]
 80129f8:	89a3      	ldrh	r3, [r4, #12]
 80129fa:	0718      	lsls	r0, r3, #28
 80129fc:	d55e      	bpl.n	8012abc <_vfiprintf_r+0xe4>
 80129fe:	6923      	ldr	r3, [r4, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d05b      	beq.n	8012abc <_vfiprintf_r+0xe4>
 8012a04:	2300      	movs	r3, #0
 8012a06:	9309      	str	r3, [sp, #36]	; 0x24
 8012a08:	2320      	movs	r3, #32
 8012a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a0e:	2330      	movs	r3, #48	; 0x30
 8012a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a14:	9503      	str	r5, [sp, #12]
 8012a16:	f04f 0b01 	mov.w	fp, #1
 8012a1a:	46b8      	mov	r8, r7
 8012a1c:	4645      	mov	r5, r8
 8012a1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a22:	b10b      	cbz	r3, 8012a28 <_vfiprintf_r+0x50>
 8012a24:	2b25      	cmp	r3, #37	; 0x25
 8012a26:	d154      	bne.n	8012ad2 <_vfiprintf_r+0xfa>
 8012a28:	ebb8 0a07 	subs.w	sl, r8, r7
 8012a2c:	d00b      	beq.n	8012a46 <_vfiprintf_r+0x6e>
 8012a2e:	4653      	mov	r3, sl
 8012a30:	463a      	mov	r2, r7
 8012a32:	4621      	mov	r1, r4
 8012a34:	4630      	mov	r0, r6
 8012a36:	f7ff ffbc 	bl	80129b2 <__sfputs_r>
 8012a3a:	3001      	adds	r0, #1
 8012a3c:	f000 80c2 	beq.w	8012bc4 <_vfiprintf_r+0x1ec>
 8012a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a42:	4453      	add	r3, sl
 8012a44:	9309      	str	r3, [sp, #36]	; 0x24
 8012a46:	f898 3000 	ldrb.w	r3, [r8]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	f000 80ba 	beq.w	8012bc4 <_vfiprintf_r+0x1ec>
 8012a50:	2300      	movs	r3, #0
 8012a52:	f04f 32ff 	mov.w	r2, #4294967295
 8012a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a5a:	9304      	str	r3, [sp, #16]
 8012a5c:	9307      	str	r3, [sp, #28]
 8012a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a62:	931a      	str	r3, [sp, #104]	; 0x68
 8012a64:	46a8      	mov	r8, r5
 8012a66:	2205      	movs	r2, #5
 8012a68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012a6c:	485e      	ldr	r0, [pc, #376]	; (8012be8 <_vfiprintf_r+0x210>)
 8012a6e:	f7ed fbaf 	bl	80001d0 <memchr>
 8012a72:	9b04      	ldr	r3, [sp, #16]
 8012a74:	bb78      	cbnz	r0, 8012ad6 <_vfiprintf_r+0xfe>
 8012a76:	06d9      	lsls	r1, r3, #27
 8012a78:	bf44      	itt	mi
 8012a7a:	2220      	movmi	r2, #32
 8012a7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a80:	071a      	lsls	r2, r3, #28
 8012a82:	bf44      	itt	mi
 8012a84:	222b      	movmi	r2, #43	; 0x2b
 8012a86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a8a:	782a      	ldrb	r2, [r5, #0]
 8012a8c:	2a2a      	cmp	r2, #42	; 0x2a
 8012a8e:	d02a      	beq.n	8012ae6 <_vfiprintf_r+0x10e>
 8012a90:	9a07      	ldr	r2, [sp, #28]
 8012a92:	46a8      	mov	r8, r5
 8012a94:	2000      	movs	r0, #0
 8012a96:	250a      	movs	r5, #10
 8012a98:	4641      	mov	r1, r8
 8012a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a9e:	3b30      	subs	r3, #48	; 0x30
 8012aa0:	2b09      	cmp	r3, #9
 8012aa2:	d969      	bls.n	8012b78 <_vfiprintf_r+0x1a0>
 8012aa4:	b360      	cbz	r0, 8012b00 <_vfiprintf_r+0x128>
 8012aa6:	e024      	b.n	8012af2 <_vfiprintf_r+0x11a>
 8012aa8:	4b50      	ldr	r3, [pc, #320]	; (8012bec <_vfiprintf_r+0x214>)
 8012aaa:	429c      	cmp	r4, r3
 8012aac:	d101      	bne.n	8012ab2 <_vfiprintf_r+0xda>
 8012aae:	68b4      	ldr	r4, [r6, #8]
 8012ab0:	e7a2      	b.n	80129f8 <_vfiprintf_r+0x20>
 8012ab2:	4b4f      	ldr	r3, [pc, #316]	; (8012bf0 <_vfiprintf_r+0x218>)
 8012ab4:	429c      	cmp	r4, r3
 8012ab6:	bf08      	it	eq
 8012ab8:	68f4      	ldreq	r4, [r6, #12]
 8012aba:	e79d      	b.n	80129f8 <_vfiprintf_r+0x20>
 8012abc:	4621      	mov	r1, r4
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f7ff fc64 	bl	801238c <__swsetup_r>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d09d      	beq.n	8012a04 <_vfiprintf_r+0x2c>
 8012ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8012acc:	b01d      	add	sp, #116	; 0x74
 8012ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad2:	46a8      	mov	r8, r5
 8012ad4:	e7a2      	b.n	8012a1c <_vfiprintf_r+0x44>
 8012ad6:	4a44      	ldr	r2, [pc, #272]	; (8012be8 <_vfiprintf_r+0x210>)
 8012ad8:	1a80      	subs	r0, r0, r2
 8012ada:	fa0b f000 	lsl.w	r0, fp, r0
 8012ade:	4318      	orrs	r0, r3
 8012ae0:	9004      	str	r0, [sp, #16]
 8012ae2:	4645      	mov	r5, r8
 8012ae4:	e7be      	b.n	8012a64 <_vfiprintf_r+0x8c>
 8012ae6:	9a03      	ldr	r2, [sp, #12]
 8012ae8:	1d11      	adds	r1, r2, #4
 8012aea:	6812      	ldr	r2, [r2, #0]
 8012aec:	9103      	str	r1, [sp, #12]
 8012aee:	2a00      	cmp	r2, #0
 8012af0:	db01      	blt.n	8012af6 <_vfiprintf_r+0x11e>
 8012af2:	9207      	str	r2, [sp, #28]
 8012af4:	e004      	b.n	8012b00 <_vfiprintf_r+0x128>
 8012af6:	4252      	negs	r2, r2
 8012af8:	f043 0302 	orr.w	r3, r3, #2
 8012afc:	9207      	str	r2, [sp, #28]
 8012afe:	9304      	str	r3, [sp, #16]
 8012b00:	f898 3000 	ldrb.w	r3, [r8]
 8012b04:	2b2e      	cmp	r3, #46	; 0x2e
 8012b06:	d10e      	bne.n	8012b26 <_vfiprintf_r+0x14e>
 8012b08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8012b0e:	d138      	bne.n	8012b82 <_vfiprintf_r+0x1aa>
 8012b10:	9b03      	ldr	r3, [sp, #12]
 8012b12:	1d1a      	adds	r2, r3, #4
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	9203      	str	r2, [sp, #12]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	bfb8      	it	lt
 8012b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b20:	f108 0802 	add.w	r8, r8, #2
 8012b24:	9305      	str	r3, [sp, #20]
 8012b26:	4d33      	ldr	r5, [pc, #204]	; (8012bf4 <_vfiprintf_r+0x21c>)
 8012b28:	f898 1000 	ldrb.w	r1, [r8]
 8012b2c:	2203      	movs	r2, #3
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f7ed fb4e 	bl	80001d0 <memchr>
 8012b34:	b140      	cbz	r0, 8012b48 <_vfiprintf_r+0x170>
 8012b36:	2340      	movs	r3, #64	; 0x40
 8012b38:	1b40      	subs	r0, r0, r5
 8012b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8012b3e:	9b04      	ldr	r3, [sp, #16]
 8012b40:	4303      	orrs	r3, r0
 8012b42:	f108 0801 	add.w	r8, r8, #1
 8012b46:	9304      	str	r3, [sp, #16]
 8012b48:	f898 1000 	ldrb.w	r1, [r8]
 8012b4c:	482a      	ldr	r0, [pc, #168]	; (8012bf8 <_vfiprintf_r+0x220>)
 8012b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b52:	2206      	movs	r2, #6
 8012b54:	f108 0701 	add.w	r7, r8, #1
 8012b58:	f7ed fb3a 	bl	80001d0 <memchr>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d037      	beq.n	8012bd0 <_vfiprintf_r+0x1f8>
 8012b60:	4b26      	ldr	r3, [pc, #152]	; (8012bfc <_vfiprintf_r+0x224>)
 8012b62:	bb1b      	cbnz	r3, 8012bac <_vfiprintf_r+0x1d4>
 8012b64:	9b03      	ldr	r3, [sp, #12]
 8012b66:	3307      	adds	r3, #7
 8012b68:	f023 0307 	bic.w	r3, r3, #7
 8012b6c:	3308      	adds	r3, #8
 8012b6e:	9303      	str	r3, [sp, #12]
 8012b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b72:	444b      	add	r3, r9
 8012b74:	9309      	str	r3, [sp, #36]	; 0x24
 8012b76:	e750      	b.n	8012a1a <_vfiprintf_r+0x42>
 8012b78:	fb05 3202 	mla	r2, r5, r2, r3
 8012b7c:	2001      	movs	r0, #1
 8012b7e:	4688      	mov	r8, r1
 8012b80:	e78a      	b.n	8012a98 <_vfiprintf_r+0xc0>
 8012b82:	2300      	movs	r3, #0
 8012b84:	f108 0801 	add.w	r8, r8, #1
 8012b88:	9305      	str	r3, [sp, #20]
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	250a      	movs	r5, #10
 8012b8e:	4640      	mov	r0, r8
 8012b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b94:	3a30      	subs	r2, #48	; 0x30
 8012b96:	2a09      	cmp	r2, #9
 8012b98:	d903      	bls.n	8012ba2 <_vfiprintf_r+0x1ca>
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d0c3      	beq.n	8012b26 <_vfiprintf_r+0x14e>
 8012b9e:	9105      	str	r1, [sp, #20]
 8012ba0:	e7c1      	b.n	8012b26 <_vfiprintf_r+0x14e>
 8012ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	4680      	mov	r8, r0
 8012baa:	e7f0      	b.n	8012b8e <_vfiprintf_r+0x1b6>
 8012bac:	ab03      	add	r3, sp, #12
 8012bae:	9300      	str	r3, [sp, #0]
 8012bb0:	4622      	mov	r2, r4
 8012bb2:	4b13      	ldr	r3, [pc, #76]	; (8012c00 <_vfiprintf_r+0x228>)
 8012bb4:	a904      	add	r1, sp, #16
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f3af 8000 	nop.w
 8012bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012bc0:	4681      	mov	r9, r0
 8012bc2:	d1d5      	bne.n	8012b70 <_vfiprintf_r+0x198>
 8012bc4:	89a3      	ldrh	r3, [r4, #12]
 8012bc6:	065b      	lsls	r3, r3, #25
 8012bc8:	f53f af7e 	bmi.w	8012ac8 <_vfiprintf_r+0xf0>
 8012bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bce:	e77d      	b.n	8012acc <_vfiprintf_r+0xf4>
 8012bd0:	ab03      	add	r3, sp, #12
 8012bd2:	9300      	str	r3, [sp, #0]
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	4b0a      	ldr	r3, [pc, #40]	; (8012c00 <_vfiprintf_r+0x228>)
 8012bd8:	a904      	add	r1, sp, #16
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f000 f888 	bl	8012cf0 <_printf_i>
 8012be0:	e7ec      	b.n	8012bbc <_vfiprintf_r+0x1e4>
 8012be2:	bf00      	nop
 8012be4:	08013800 	.word	0x08013800
 8012be8:	08013840 	.word	0x08013840
 8012bec:	08013820 	.word	0x08013820
 8012bf0:	080137e0 	.word	0x080137e0
 8012bf4:	08013846 	.word	0x08013846
 8012bf8:	0801384a 	.word	0x0801384a
 8012bfc:	00000000 	.word	0x00000000
 8012c00:	080129b3 	.word	0x080129b3

08012c04 <_printf_common>:
 8012c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c08:	4691      	mov	r9, r2
 8012c0a:	461f      	mov	r7, r3
 8012c0c:	688a      	ldr	r2, [r1, #8]
 8012c0e:	690b      	ldr	r3, [r1, #16]
 8012c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c14:	4293      	cmp	r3, r2
 8012c16:	bfb8      	it	lt
 8012c18:	4613      	movlt	r3, r2
 8012c1a:	f8c9 3000 	str.w	r3, [r9]
 8012c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c22:	4606      	mov	r6, r0
 8012c24:	460c      	mov	r4, r1
 8012c26:	b112      	cbz	r2, 8012c2e <_printf_common+0x2a>
 8012c28:	3301      	adds	r3, #1
 8012c2a:	f8c9 3000 	str.w	r3, [r9]
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	0699      	lsls	r1, r3, #26
 8012c32:	bf42      	ittt	mi
 8012c34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012c38:	3302      	addmi	r3, #2
 8012c3a:	f8c9 3000 	strmi.w	r3, [r9]
 8012c3e:	6825      	ldr	r5, [r4, #0]
 8012c40:	f015 0506 	ands.w	r5, r5, #6
 8012c44:	d107      	bne.n	8012c56 <_printf_common+0x52>
 8012c46:	f104 0a19 	add.w	sl, r4, #25
 8012c4a:	68e3      	ldr	r3, [r4, #12]
 8012c4c:	f8d9 2000 	ldr.w	r2, [r9]
 8012c50:	1a9b      	subs	r3, r3, r2
 8012c52:	42ab      	cmp	r3, r5
 8012c54:	dc28      	bgt.n	8012ca8 <_printf_common+0xa4>
 8012c56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012c5a:	6822      	ldr	r2, [r4, #0]
 8012c5c:	3300      	adds	r3, #0
 8012c5e:	bf18      	it	ne
 8012c60:	2301      	movne	r3, #1
 8012c62:	0692      	lsls	r2, r2, #26
 8012c64:	d42d      	bmi.n	8012cc2 <_printf_common+0xbe>
 8012c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c6a:	4639      	mov	r1, r7
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	47c0      	blx	r8
 8012c70:	3001      	adds	r0, #1
 8012c72:	d020      	beq.n	8012cb6 <_printf_common+0xb2>
 8012c74:	6823      	ldr	r3, [r4, #0]
 8012c76:	68e5      	ldr	r5, [r4, #12]
 8012c78:	f8d9 2000 	ldr.w	r2, [r9]
 8012c7c:	f003 0306 	and.w	r3, r3, #6
 8012c80:	2b04      	cmp	r3, #4
 8012c82:	bf08      	it	eq
 8012c84:	1aad      	subeq	r5, r5, r2
 8012c86:	68a3      	ldr	r3, [r4, #8]
 8012c88:	6922      	ldr	r2, [r4, #16]
 8012c8a:	bf0c      	ite	eq
 8012c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c90:	2500      	movne	r5, #0
 8012c92:	4293      	cmp	r3, r2
 8012c94:	bfc4      	itt	gt
 8012c96:	1a9b      	subgt	r3, r3, r2
 8012c98:	18ed      	addgt	r5, r5, r3
 8012c9a:	f04f 0900 	mov.w	r9, #0
 8012c9e:	341a      	adds	r4, #26
 8012ca0:	454d      	cmp	r5, r9
 8012ca2:	d11a      	bne.n	8012cda <_printf_common+0xd6>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	e008      	b.n	8012cba <_printf_common+0xb6>
 8012ca8:	2301      	movs	r3, #1
 8012caa:	4652      	mov	r2, sl
 8012cac:	4639      	mov	r1, r7
 8012cae:	4630      	mov	r0, r6
 8012cb0:	47c0      	blx	r8
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	d103      	bne.n	8012cbe <_printf_common+0xba>
 8012cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8012cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cbe:	3501      	adds	r5, #1
 8012cc0:	e7c3      	b.n	8012c4a <_printf_common+0x46>
 8012cc2:	18e1      	adds	r1, r4, r3
 8012cc4:	1c5a      	adds	r2, r3, #1
 8012cc6:	2030      	movs	r0, #48	; 0x30
 8012cc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ccc:	4422      	add	r2, r4
 8012cce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012cd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012cd6:	3302      	adds	r3, #2
 8012cd8:	e7c5      	b.n	8012c66 <_printf_common+0x62>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	4622      	mov	r2, r4
 8012cde:	4639      	mov	r1, r7
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	47c0      	blx	r8
 8012ce4:	3001      	adds	r0, #1
 8012ce6:	d0e6      	beq.n	8012cb6 <_printf_common+0xb2>
 8012ce8:	f109 0901 	add.w	r9, r9, #1
 8012cec:	e7d8      	b.n	8012ca0 <_printf_common+0x9c>
	...

08012cf0 <_printf_i>:
 8012cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012cf4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012cf8:	460c      	mov	r4, r1
 8012cfa:	7e09      	ldrb	r1, [r1, #24]
 8012cfc:	b085      	sub	sp, #20
 8012cfe:	296e      	cmp	r1, #110	; 0x6e
 8012d00:	4617      	mov	r7, r2
 8012d02:	4606      	mov	r6, r0
 8012d04:	4698      	mov	r8, r3
 8012d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d08:	f000 80b3 	beq.w	8012e72 <_printf_i+0x182>
 8012d0c:	d822      	bhi.n	8012d54 <_printf_i+0x64>
 8012d0e:	2963      	cmp	r1, #99	; 0x63
 8012d10:	d036      	beq.n	8012d80 <_printf_i+0x90>
 8012d12:	d80a      	bhi.n	8012d2a <_printf_i+0x3a>
 8012d14:	2900      	cmp	r1, #0
 8012d16:	f000 80b9 	beq.w	8012e8c <_printf_i+0x19c>
 8012d1a:	2958      	cmp	r1, #88	; 0x58
 8012d1c:	f000 8083 	beq.w	8012e26 <_printf_i+0x136>
 8012d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012d28:	e032      	b.n	8012d90 <_printf_i+0xa0>
 8012d2a:	2964      	cmp	r1, #100	; 0x64
 8012d2c:	d001      	beq.n	8012d32 <_printf_i+0x42>
 8012d2e:	2969      	cmp	r1, #105	; 0x69
 8012d30:	d1f6      	bne.n	8012d20 <_printf_i+0x30>
 8012d32:	6820      	ldr	r0, [r4, #0]
 8012d34:	6813      	ldr	r3, [r2, #0]
 8012d36:	0605      	lsls	r5, r0, #24
 8012d38:	f103 0104 	add.w	r1, r3, #4
 8012d3c:	d52a      	bpl.n	8012d94 <_printf_i+0xa4>
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	6011      	str	r1, [r2, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	da03      	bge.n	8012d4e <_printf_i+0x5e>
 8012d46:	222d      	movs	r2, #45	; 0x2d
 8012d48:	425b      	negs	r3, r3
 8012d4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012d4e:	486f      	ldr	r0, [pc, #444]	; (8012f0c <_printf_i+0x21c>)
 8012d50:	220a      	movs	r2, #10
 8012d52:	e039      	b.n	8012dc8 <_printf_i+0xd8>
 8012d54:	2973      	cmp	r1, #115	; 0x73
 8012d56:	f000 809d 	beq.w	8012e94 <_printf_i+0x1a4>
 8012d5a:	d808      	bhi.n	8012d6e <_printf_i+0x7e>
 8012d5c:	296f      	cmp	r1, #111	; 0x6f
 8012d5e:	d020      	beq.n	8012da2 <_printf_i+0xb2>
 8012d60:	2970      	cmp	r1, #112	; 0x70
 8012d62:	d1dd      	bne.n	8012d20 <_printf_i+0x30>
 8012d64:	6823      	ldr	r3, [r4, #0]
 8012d66:	f043 0320 	orr.w	r3, r3, #32
 8012d6a:	6023      	str	r3, [r4, #0]
 8012d6c:	e003      	b.n	8012d76 <_printf_i+0x86>
 8012d6e:	2975      	cmp	r1, #117	; 0x75
 8012d70:	d017      	beq.n	8012da2 <_printf_i+0xb2>
 8012d72:	2978      	cmp	r1, #120	; 0x78
 8012d74:	d1d4      	bne.n	8012d20 <_printf_i+0x30>
 8012d76:	2378      	movs	r3, #120	; 0x78
 8012d78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d7c:	4864      	ldr	r0, [pc, #400]	; (8012f10 <_printf_i+0x220>)
 8012d7e:	e055      	b.n	8012e2c <_printf_i+0x13c>
 8012d80:	6813      	ldr	r3, [r2, #0]
 8012d82:	1d19      	adds	r1, r3, #4
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	6011      	str	r1, [r2, #0]
 8012d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d90:	2301      	movs	r3, #1
 8012d92:	e08c      	b.n	8012eae <_printf_i+0x1be>
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	6011      	str	r1, [r2, #0]
 8012d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d9c:	bf18      	it	ne
 8012d9e:	b21b      	sxthne	r3, r3
 8012da0:	e7cf      	b.n	8012d42 <_printf_i+0x52>
 8012da2:	6813      	ldr	r3, [r2, #0]
 8012da4:	6825      	ldr	r5, [r4, #0]
 8012da6:	1d18      	adds	r0, r3, #4
 8012da8:	6010      	str	r0, [r2, #0]
 8012daa:	0628      	lsls	r0, r5, #24
 8012dac:	d501      	bpl.n	8012db2 <_printf_i+0xc2>
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	e002      	b.n	8012db8 <_printf_i+0xc8>
 8012db2:	0668      	lsls	r0, r5, #25
 8012db4:	d5fb      	bpl.n	8012dae <_printf_i+0xbe>
 8012db6:	881b      	ldrh	r3, [r3, #0]
 8012db8:	4854      	ldr	r0, [pc, #336]	; (8012f0c <_printf_i+0x21c>)
 8012dba:	296f      	cmp	r1, #111	; 0x6f
 8012dbc:	bf14      	ite	ne
 8012dbe:	220a      	movne	r2, #10
 8012dc0:	2208      	moveq	r2, #8
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012dc8:	6865      	ldr	r5, [r4, #4]
 8012dca:	60a5      	str	r5, [r4, #8]
 8012dcc:	2d00      	cmp	r5, #0
 8012dce:	f2c0 8095 	blt.w	8012efc <_printf_i+0x20c>
 8012dd2:	6821      	ldr	r1, [r4, #0]
 8012dd4:	f021 0104 	bic.w	r1, r1, #4
 8012dd8:	6021      	str	r1, [r4, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d13d      	bne.n	8012e5a <_printf_i+0x16a>
 8012dde:	2d00      	cmp	r5, #0
 8012de0:	f040 808e 	bne.w	8012f00 <_printf_i+0x210>
 8012de4:	4665      	mov	r5, ip
 8012de6:	2a08      	cmp	r2, #8
 8012de8:	d10b      	bne.n	8012e02 <_printf_i+0x112>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	07db      	lsls	r3, r3, #31
 8012dee:	d508      	bpl.n	8012e02 <_printf_i+0x112>
 8012df0:	6923      	ldr	r3, [r4, #16]
 8012df2:	6862      	ldr	r2, [r4, #4]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	bfde      	ittt	le
 8012df8:	2330      	movle	r3, #48	; 0x30
 8012dfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012dfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e02:	ebac 0305 	sub.w	r3, ip, r5
 8012e06:	6123      	str	r3, [r4, #16]
 8012e08:	f8cd 8000 	str.w	r8, [sp]
 8012e0c:	463b      	mov	r3, r7
 8012e0e:	aa03      	add	r2, sp, #12
 8012e10:	4621      	mov	r1, r4
 8012e12:	4630      	mov	r0, r6
 8012e14:	f7ff fef6 	bl	8012c04 <_printf_common>
 8012e18:	3001      	adds	r0, #1
 8012e1a:	d14d      	bne.n	8012eb8 <_printf_i+0x1c8>
 8012e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e20:	b005      	add	sp, #20
 8012e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e26:	4839      	ldr	r0, [pc, #228]	; (8012f0c <_printf_i+0x21c>)
 8012e28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012e2c:	6813      	ldr	r3, [r2, #0]
 8012e2e:	6821      	ldr	r1, [r4, #0]
 8012e30:	1d1d      	adds	r5, r3, #4
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	6015      	str	r5, [r2, #0]
 8012e36:	060a      	lsls	r2, r1, #24
 8012e38:	d50b      	bpl.n	8012e52 <_printf_i+0x162>
 8012e3a:	07ca      	lsls	r2, r1, #31
 8012e3c:	bf44      	itt	mi
 8012e3e:	f041 0120 	orrmi.w	r1, r1, #32
 8012e42:	6021      	strmi	r1, [r4, #0]
 8012e44:	b91b      	cbnz	r3, 8012e4e <_printf_i+0x15e>
 8012e46:	6822      	ldr	r2, [r4, #0]
 8012e48:	f022 0220 	bic.w	r2, r2, #32
 8012e4c:	6022      	str	r2, [r4, #0]
 8012e4e:	2210      	movs	r2, #16
 8012e50:	e7b7      	b.n	8012dc2 <_printf_i+0xd2>
 8012e52:	064d      	lsls	r5, r1, #25
 8012e54:	bf48      	it	mi
 8012e56:	b29b      	uxthmi	r3, r3
 8012e58:	e7ef      	b.n	8012e3a <_printf_i+0x14a>
 8012e5a:	4665      	mov	r5, ip
 8012e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e60:	fb02 3311 	mls	r3, r2, r1, r3
 8012e64:	5cc3      	ldrb	r3, [r0, r3]
 8012e66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	2900      	cmp	r1, #0
 8012e6e:	d1f5      	bne.n	8012e5c <_printf_i+0x16c>
 8012e70:	e7b9      	b.n	8012de6 <_printf_i+0xf6>
 8012e72:	6813      	ldr	r3, [r2, #0]
 8012e74:	6825      	ldr	r5, [r4, #0]
 8012e76:	6961      	ldr	r1, [r4, #20]
 8012e78:	1d18      	adds	r0, r3, #4
 8012e7a:	6010      	str	r0, [r2, #0]
 8012e7c:	0628      	lsls	r0, r5, #24
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	d501      	bpl.n	8012e86 <_printf_i+0x196>
 8012e82:	6019      	str	r1, [r3, #0]
 8012e84:	e002      	b.n	8012e8c <_printf_i+0x19c>
 8012e86:	066a      	lsls	r2, r5, #25
 8012e88:	d5fb      	bpl.n	8012e82 <_printf_i+0x192>
 8012e8a:	8019      	strh	r1, [r3, #0]
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	6123      	str	r3, [r4, #16]
 8012e90:	4665      	mov	r5, ip
 8012e92:	e7b9      	b.n	8012e08 <_printf_i+0x118>
 8012e94:	6813      	ldr	r3, [r2, #0]
 8012e96:	1d19      	adds	r1, r3, #4
 8012e98:	6011      	str	r1, [r2, #0]
 8012e9a:	681d      	ldr	r5, [r3, #0]
 8012e9c:	6862      	ldr	r2, [r4, #4]
 8012e9e:	2100      	movs	r1, #0
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f7ed f995 	bl	80001d0 <memchr>
 8012ea6:	b108      	cbz	r0, 8012eac <_printf_i+0x1bc>
 8012ea8:	1b40      	subs	r0, r0, r5
 8012eaa:	6060      	str	r0, [r4, #4]
 8012eac:	6863      	ldr	r3, [r4, #4]
 8012eae:	6123      	str	r3, [r4, #16]
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012eb6:	e7a7      	b.n	8012e08 <_printf_i+0x118>
 8012eb8:	6923      	ldr	r3, [r4, #16]
 8012eba:	462a      	mov	r2, r5
 8012ebc:	4639      	mov	r1, r7
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	47c0      	blx	r8
 8012ec2:	3001      	adds	r0, #1
 8012ec4:	d0aa      	beq.n	8012e1c <_printf_i+0x12c>
 8012ec6:	6823      	ldr	r3, [r4, #0]
 8012ec8:	079b      	lsls	r3, r3, #30
 8012eca:	d413      	bmi.n	8012ef4 <_printf_i+0x204>
 8012ecc:	68e0      	ldr	r0, [r4, #12]
 8012ece:	9b03      	ldr	r3, [sp, #12]
 8012ed0:	4298      	cmp	r0, r3
 8012ed2:	bfb8      	it	lt
 8012ed4:	4618      	movlt	r0, r3
 8012ed6:	e7a3      	b.n	8012e20 <_printf_i+0x130>
 8012ed8:	2301      	movs	r3, #1
 8012eda:	464a      	mov	r2, r9
 8012edc:	4639      	mov	r1, r7
 8012ede:	4630      	mov	r0, r6
 8012ee0:	47c0      	blx	r8
 8012ee2:	3001      	adds	r0, #1
 8012ee4:	d09a      	beq.n	8012e1c <_printf_i+0x12c>
 8012ee6:	3501      	adds	r5, #1
 8012ee8:	68e3      	ldr	r3, [r4, #12]
 8012eea:	9a03      	ldr	r2, [sp, #12]
 8012eec:	1a9b      	subs	r3, r3, r2
 8012eee:	42ab      	cmp	r3, r5
 8012ef0:	dcf2      	bgt.n	8012ed8 <_printf_i+0x1e8>
 8012ef2:	e7eb      	b.n	8012ecc <_printf_i+0x1dc>
 8012ef4:	2500      	movs	r5, #0
 8012ef6:	f104 0919 	add.w	r9, r4, #25
 8012efa:	e7f5      	b.n	8012ee8 <_printf_i+0x1f8>
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d1ac      	bne.n	8012e5a <_printf_i+0x16a>
 8012f00:	7803      	ldrb	r3, [r0, #0]
 8012f02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f0a:	e76c      	b.n	8012de6 <_printf_i+0xf6>
 8012f0c:	08013851 	.word	0x08013851
 8012f10:	08013862 	.word	0x08013862

08012f14 <_sbrk_r>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	4c06      	ldr	r4, [pc, #24]	; (8012f30 <_sbrk_r+0x1c>)
 8012f18:	2300      	movs	r3, #0
 8012f1a:	4605      	mov	r5, r0
 8012f1c:	4608      	mov	r0, r1
 8012f1e:	6023      	str	r3, [r4, #0]
 8012f20:	f7fe fff2 	bl	8011f08 <_sbrk>
 8012f24:	1c43      	adds	r3, r0, #1
 8012f26:	d102      	bne.n	8012f2e <_sbrk_r+0x1a>
 8012f28:	6823      	ldr	r3, [r4, #0]
 8012f2a:	b103      	cbz	r3, 8012f2e <_sbrk_r+0x1a>
 8012f2c:	602b      	str	r3, [r5, #0]
 8012f2e:	bd38      	pop	{r3, r4, r5, pc}
 8012f30:	200015d8 	.word	0x200015d8

08012f34 <__sread>:
 8012f34:	b510      	push	{r4, lr}
 8012f36:	460c      	mov	r4, r1
 8012f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f3c:	f000 f896 	bl	801306c <_read_r>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	bfab      	itete	ge
 8012f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f46:	89a3      	ldrhlt	r3, [r4, #12]
 8012f48:	181b      	addge	r3, r3, r0
 8012f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f4e:	bfac      	ite	ge
 8012f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f52:	81a3      	strhlt	r3, [r4, #12]
 8012f54:	bd10      	pop	{r4, pc}

08012f56 <__swrite>:
 8012f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5a:	461f      	mov	r7, r3
 8012f5c:	898b      	ldrh	r3, [r1, #12]
 8012f5e:	05db      	lsls	r3, r3, #23
 8012f60:	4605      	mov	r5, r0
 8012f62:	460c      	mov	r4, r1
 8012f64:	4616      	mov	r6, r2
 8012f66:	d505      	bpl.n	8012f74 <__swrite+0x1e>
 8012f68:	2302      	movs	r3, #2
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f70:	f000 f868 	bl	8013044 <_lseek_r>
 8012f74:	89a3      	ldrh	r3, [r4, #12]
 8012f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f7e:	81a3      	strh	r3, [r4, #12]
 8012f80:	4632      	mov	r2, r6
 8012f82:	463b      	mov	r3, r7
 8012f84:	4628      	mov	r0, r5
 8012f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8a:	f000 b817 	b.w	8012fbc <_write_r>

08012f8e <__sseek>:
 8012f8e:	b510      	push	{r4, lr}
 8012f90:	460c      	mov	r4, r1
 8012f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f96:	f000 f855 	bl	8013044 <_lseek_r>
 8012f9a:	1c43      	adds	r3, r0, #1
 8012f9c:	89a3      	ldrh	r3, [r4, #12]
 8012f9e:	bf15      	itete	ne
 8012fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012faa:	81a3      	strheq	r3, [r4, #12]
 8012fac:	bf18      	it	ne
 8012fae:	81a3      	strhne	r3, [r4, #12]
 8012fb0:	bd10      	pop	{r4, pc}

08012fb2 <__sclose>:
 8012fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fb6:	f000 b813 	b.w	8012fe0 <_close_r>
	...

08012fbc <_write_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4c07      	ldr	r4, [pc, #28]	; (8012fdc <_write_r+0x20>)
 8012fc0:	4605      	mov	r5, r0
 8012fc2:	4608      	mov	r0, r1
 8012fc4:	4611      	mov	r1, r2
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	6022      	str	r2, [r4, #0]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	f7fe ff4b 	bl	8011e66 <_write>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d102      	bne.n	8012fda <_write_r+0x1e>
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	b103      	cbz	r3, 8012fda <_write_r+0x1e>
 8012fd8:	602b      	str	r3, [r5, #0]
 8012fda:	bd38      	pop	{r3, r4, r5, pc}
 8012fdc:	200015d8 	.word	0x200015d8

08012fe0 <_close_r>:
 8012fe0:	b538      	push	{r3, r4, r5, lr}
 8012fe2:	4c06      	ldr	r4, [pc, #24]	; (8012ffc <_close_r+0x1c>)
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4605      	mov	r5, r0
 8012fe8:	4608      	mov	r0, r1
 8012fea:	6023      	str	r3, [r4, #0]
 8012fec:	f7fe ff57 	bl	8011e9e <_close>
 8012ff0:	1c43      	adds	r3, r0, #1
 8012ff2:	d102      	bne.n	8012ffa <_close_r+0x1a>
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	b103      	cbz	r3, 8012ffa <_close_r+0x1a>
 8012ff8:	602b      	str	r3, [r5, #0]
 8012ffa:	bd38      	pop	{r3, r4, r5, pc}
 8012ffc:	200015d8 	.word	0x200015d8

08013000 <_fstat_r>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4c07      	ldr	r4, [pc, #28]	; (8013020 <_fstat_r+0x20>)
 8013004:	2300      	movs	r3, #0
 8013006:	4605      	mov	r5, r0
 8013008:	4608      	mov	r0, r1
 801300a:	4611      	mov	r1, r2
 801300c:	6023      	str	r3, [r4, #0]
 801300e:	f7fe ff52 	bl	8011eb6 <_fstat>
 8013012:	1c43      	adds	r3, r0, #1
 8013014:	d102      	bne.n	801301c <_fstat_r+0x1c>
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	b103      	cbz	r3, 801301c <_fstat_r+0x1c>
 801301a:	602b      	str	r3, [r5, #0]
 801301c:	bd38      	pop	{r3, r4, r5, pc}
 801301e:	bf00      	nop
 8013020:	200015d8 	.word	0x200015d8

08013024 <_isatty_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4c06      	ldr	r4, [pc, #24]	; (8013040 <_isatty_r+0x1c>)
 8013028:	2300      	movs	r3, #0
 801302a:	4605      	mov	r5, r0
 801302c:	4608      	mov	r0, r1
 801302e:	6023      	str	r3, [r4, #0]
 8013030:	f7fe ff51 	bl	8011ed6 <_isatty>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	d102      	bne.n	801303e <_isatty_r+0x1a>
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	b103      	cbz	r3, 801303e <_isatty_r+0x1a>
 801303c:	602b      	str	r3, [r5, #0]
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	200015d8 	.word	0x200015d8

08013044 <_lseek_r>:
 8013044:	b538      	push	{r3, r4, r5, lr}
 8013046:	4c07      	ldr	r4, [pc, #28]	; (8013064 <_lseek_r+0x20>)
 8013048:	4605      	mov	r5, r0
 801304a:	4608      	mov	r0, r1
 801304c:	4611      	mov	r1, r2
 801304e:	2200      	movs	r2, #0
 8013050:	6022      	str	r2, [r4, #0]
 8013052:	461a      	mov	r2, r3
 8013054:	f7fe ff4a 	bl	8011eec <_lseek>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_lseek_r+0x1e>
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	b103      	cbz	r3, 8013062 <_lseek_r+0x1e>
 8013060:	602b      	str	r3, [r5, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	200015d8 	.word	0x200015d8

08013068 <__malloc_lock>:
 8013068:	4770      	bx	lr

0801306a <__malloc_unlock>:
 801306a:	4770      	bx	lr

0801306c <_read_r>:
 801306c:	b538      	push	{r3, r4, r5, lr}
 801306e:	4c07      	ldr	r4, [pc, #28]	; (801308c <_read_r+0x20>)
 8013070:	4605      	mov	r5, r0
 8013072:	4608      	mov	r0, r1
 8013074:	4611      	mov	r1, r2
 8013076:	2200      	movs	r2, #0
 8013078:	6022      	str	r2, [r4, #0]
 801307a:	461a      	mov	r2, r3
 801307c:	f7fe fed6 	bl	8011e2c <_read>
 8013080:	1c43      	adds	r3, r0, #1
 8013082:	d102      	bne.n	801308a <_read_r+0x1e>
 8013084:	6823      	ldr	r3, [r4, #0]
 8013086:	b103      	cbz	r3, 801308a <_read_r+0x1e>
 8013088:	602b      	str	r3, [r5, #0]
 801308a:	bd38      	pop	{r3, r4, r5, pc}
 801308c:	200015d8 	.word	0x200015d8

08013090 <sqrt>:
 8013090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013094:	ed2d 8b02 	vpush	{d8}
 8013098:	b08b      	sub	sp, #44	; 0x2c
 801309a:	ec55 4b10 	vmov	r4, r5, d0
 801309e:	f000 f851 	bl	8013144 <__ieee754_sqrt>
 80130a2:	4b26      	ldr	r3, [pc, #152]	; (801313c <sqrt+0xac>)
 80130a4:	eeb0 8a40 	vmov.f32	s16, s0
 80130a8:	eef0 8a60 	vmov.f32	s17, s1
 80130ac:	f993 6000 	ldrsb.w	r6, [r3]
 80130b0:	1c73      	adds	r3, r6, #1
 80130b2:	d02a      	beq.n	801310a <sqrt+0x7a>
 80130b4:	4622      	mov	r2, r4
 80130b6:	462b      	mov	r3, r5
 80130b8:	4620      	mov	r0, r4
 80130ba:	4629      	mov	r1, r5
 80130bc:	f7ed fd2e 	bl	8000b1c <__aeabi_dcmpun>
 80130c0:	4607      	mov	r7, r0
 80130c2:	bb10      	cbnz	r0, 801310a <sqrt+0x7a>
 80130c4:	f04f 0800 	mov.w	r8, #0
 80130c8:	f04f 0900 	mov.w	r9, #0
 80130cc:	4642      	mov	r2, r8
 80130ce:	464b      	mov	r3, r9
 80130d0:	4620      	mov	r0, r4
 80130d2:	4629      	mov	r1, r5
 80130d4:	f7ed fcfa 	bl	8000acc <__aeabi_dcmplt>
 80130d8:	b1b8      	cbz	r0, 801310a <sqrt+0x7a>
 80130da:	2301      	movs	r3, #1
 80130dc:	9300      	str	r3, [sp, #0]
 80130de:	4b18      	ldr	r3, [pc, #96]	; (8013140 <sqrt+0xb0>)
 80130e0:	9301      	str	r3, [sp, #4]
 80130e2:	9708      	str	r7, [sp, #32]
 80130e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80130e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80130ec:	b9b6      	cbnz	r6, 801311c <sqrt+0x8c>
 80130ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80130f2:	4668      	mov	r0, sp
 80130f4:	f000 f8d6 	bl	80132a4 <matherr>
 80130f8:	b1d0      	cbz	r0, 8013130 <sqrt+0xa0>
 80130fa:	9b08      	ldr	r3, [sp, #32]
 80130fc:	b11b      	cbz	r3, 8013106 <sqrt+0x76>
 80130fe:	f7fe ff8f 	bl	8012020 <__errno>
 8013102:	9b08      	ldr	r3, [sp, #32]
 8013104:	6003      	str	r3, [r0, #0]
 8013106:	ed9d 8b06 	vldr	d8, [sp, #24]
 801310a:	eeb0 0a48 	vmov.f32	s0, s16
 801310e:	eef0 0a68 	vmov.f32	s1, s17
 8013112:	b00b      	add	sp, #44	; 0x2c
 8013114:	ecbd 8b02 	vpop	{d8}
 8013118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801311c:	4642      	mov	r2, r8
 801311e:	464b      	mov	r3, r9
 8013120:	4640      	mov	r0, r8
 8013122:	4649      	mov	r1, r9
 8013124:	f7ed fb8a 	bl	800083c <__aeabi_ddiv>
 8013128:	2e02      	cmp	r6, #2
 801312a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801312e:	d1e0      	bne.n	80130f2 <sqrt+0x62>
 8013130:	f7fe ff76 	bl	8012020 <__errno>
 8013134:	2321      	movs	r3, #33	; 0x21
 8013136:	6003      	str	r3, [r0, #0]
 8013138:	e7df      	b.n	80130fa <sqrt+0x6a>
 801313a:	bf00      	nop
 801313c:	200000e8 	.word	0x200000e8
 8013140:	08013873 	.word	0x08013873

08013144 <__ieee754_sqrt>:
 8013144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013148:	4955      	ldr	r1, [pc, #340]	; (80132a0 <__ieee754_sqrt+0x15c>)
 801314a:	ec55 4b10 	vmov	r4, r5, d0
 801314e:	43a9      	bics	r1, r5
 8013150:	462b      	mov	r3, r5
 8013152:	462a      	mov	r2, r5
 8013154:	d112      	bne.n	801317c <__ieee754_sqrt+0x38>
 8013156:	ee10 2a10 	vmov	r2, s0
 801315a:	ee10 0a10 	vmov	r0, s0
 801315e:	4629      	mov	r1, r5
 8013160:	f7ed fa42 	bl	80005e8 <__aeabi_dmul>
 8013164:	4602      	mov	r2, r0
 8013166:	460b      	mov	r3, r1
 8013168:	4620      	mov	r0, r4
 801316a:	4629      	mov	r1, r5
 801316c:	f7ed f886 	bl	800027c <__adddf3>
 8013170:	4604      	mov	r4, r0
 8013172:	460d      	mov	r5, r1
 8013174:	ec45 4b10 	vmov	d0, r4, r5
 8013178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801317c:	2d00      	cmp	r5, #0
 801317e:	ee10 0a10 	vmov	r0, s0
 8013182:	4621      	mov	r1, r4
 8013184:	dc0f      	bgt.n	80131a6 <__ieee754_sqrt+0x62>
 8013186:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801318a:	4330      	orrs	r0, r6
 801318c:	d0f2      	beq.n	8013174 <__ieee754_sqrt+0x30>
 801318e:	b155      	cbz	r5, 80131a6 <__ieee754_sqrt+0x62>
 8013190:	ee10 2a10 	vmov	r2, s0
 8013194:	4620      	mov	r0, r4
 8013196:	4629      	mov	r1, r5
 8013198:	f7ed f86e 	bl	8000278 <__aeabi_dsub>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	f7ed fb4c 	bl	800083c <__aeabi_ddiv>
 80131a4:	e7e4      	b.n	8013170 <__ieee754_sqrt+0x2c>
 80131a6:	151b      	asrs	r3, r3, #20
 80131a8:	d073      	beq.n	8013292 <__ieee754_sqrt+0x14e>
 80131aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80131ae:	07dd      	lsls	r5, r3, #31
 80131b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80131b4:	bf48      	it	mi
 80131b6:	0fc8      	lsrmi	r0, r1, #31
 80131b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80131bc:	bf44      	itt	mi
 80131be:	0049      	lslmi	r1, r1, #1
 80131c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80131c4:	2500      	movs	r5, #0
 80131c6:	1058      	asrs	r0, r3, #1
 80131c8:	0fcb      	lsrs	r3, r1, #31
 80131ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80131ce:	0049      	lsls	r1, r1, #1
 80131d0:	2316      	movs	r3, #22
 80131d2:	462c      	mov	r4, r5
 80131d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80131d8:	19a7      	adds	r7, r4, r6
 80131da:	4297      	cmp	r7, r2
 80131dc:	bfde      	ittt	le
 80131de:	19bc      	addle	r4, r7, r6
 80131e0:	1bd2      	suble	r2, r2, r7
 80131e2:	19ad      	addle	r5, r5, r6
 80131e4:	0fcf      	lsrs	r7, r1, #31
 80131e6:	3b01      	subs	r3, #1
 80131e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80131ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80131f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80131f4:	d1f0      	bne.n	80131d8 <__ieee754_sqrt+0x94>
 80131f6:	f04f 0c20 	mov.w	ip, #32
 80131fa:	469e      	mov	lr, r3
 80131fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013200:	42a2      	cmp	r2, r4
 8013202:	eb06 070e 	add.w	r7, r6, lr
 8013206:	dc02      	bgt.n	801320e <__ieee754_sqrt+0xca>
 8013208:	d112      	bne.n	8013230 <__ieee754_sqrt+0xec>
 801320a:	428f      	cmp	r7, r1
 801320c:	d810      	bhi.n	8013230 <__ieee754_sqrt+0xec>
 801320e:	2f00      	cmp	r7, #0
 8013210:	eb07 0e06 	add.w	lr, r7, r6
 8013214:	da42      	bge.n	801329c <__ieee754_sqrt+0x158>
 8013216:	f1be 0f00 	cmp.w	lr, #0
 801321a:	db3f      	blt.n	801329c <__ieee754_sqrt+0x158>
 801321c:	f104 0801 	add.w	r8, r4, #1
 8013220:	1b12      	subs	r2, r2, r4
 8013222:	428f      	cmp	r7, r1
 8013224:	bf88      	it	hi
 8013226:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801322a:	1bc9      	subs	r1, r1, r7
 801322c:	4433      	add	r3, r6
 801322e:	4644      	mov	r4, r8
 8013230:	0052      	lsls	r2, r2, #1
 8013232:	f1bc 0c01 	subs.w	ip, ip, #1
 8013236:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801323a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801323e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013242:	d1dd      	bne.n	8013200 <__ieee754_sqrt+0xbc>
 8013244:	430a      	orrs	r2, r1
 8013246:	d006      	beq.n	8013256 <__ieee754_sqrt+0x112>
 8013248:	1c5c      	adds	r4, r3, #1
 801324a:	bf13      	iteet	ne
 801324c:	3301      	addne	r3, #1
 801324e:	3501      	addeq	r5, #1
 8013250:	4663      	moveq	r3, ip
 8013252:	f023 0301 	bicne.w	r3, r3, #1
 8013256:	106a      	asrs	r2, r5, #1
 8013258:	085b      	lsrs	r3, r3, #1
 801325a:	07e9      	lsls	r1, r5, #31
 801325c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013260:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013264:	bf48      	it	mi
 8013266:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801326a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801326e:	461c      	mov	r4, r3
 8013270:	e780      	b.n	8013174 <__ieee754_sqrt+0x30>
 8013272:	0aca      	lsrs	r2, r1, #11
 8013274:	3815      	subs	r0, #21
 8013276:	0549      	lsls	r1, r1, #21
 8013278:	2a00      	cmp	r2, #0
 801327a:	d0fa      	beq.n	8013272 <__ieee754_sqrt+0x12e>
 801327c:	02d6      	lsls	r6, r2, #11
 801327e:	d50a      	bpl.n	8013296 <__ieee754_sqrt+0x152>
 8013280:	f1c3 0420 	rsb	r4, r3, #32
 8013284:	fa21 f404 	lsr.w	r4, r1, r4
 8013288:	1e5d      	subs	r5, r3, #1
 801328a:	4099      	lsls	r1, r3
 801328c:	4322      	orrs	r2, r4
 801328e:	1b43      	subs	r3, r0, r5
 8013290:	e78b      	b.n	80131aa <__ieee754_sqrt+0x66>
 8013292:	4618      	mov	r0, r3
 8013294:	e7f0      	b.n	8013278 <__ieee754_sqrt+0x134>
 8013296:	0052      	lsls	r2, r2, #1
 8013298:	3301      	adds	r3, #1
 801329a:	e7ef      	b.n	801327c <__ieee754_sqrt+0x138>
 801329c:	46a0      	mov	r8, r4
 801329e:	e7bf      	b.n	8013220 <__ieee754_sqrt+0xdc>
 80132a0:	7ff00000 	.word	0x7ff00000

080132a4 <matherr>:
 80132a4:	2000      	movs	r0, #0
 80132a6:	4770      	bx	lr

080132a8 <_init>:
 80132a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132aa:	bf00      	nop
 80132ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ae:	bc08      	pop	{r3}
 80132b0:	469e      	mov	lr, r3
 80132b2:	4770      	bx	lr

080132b4 <_fini>:
 80132b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b6:	bf00      	nop
 80132b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ba:	bc08      	pop	{r3}
 80132bc:	469e      	mov	lr, r3
 80132be:	4770      	bx	lr
