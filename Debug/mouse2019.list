
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800d6c8  0800d6c8  0001d6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db3c  0800db3c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800db3c  0800db3c  0001db3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db44  0800db44  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db44  0800db44  0001db44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800db4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dac  2000016c  0800dcb8  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f18  0800dcb8  00020f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ebe  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  0003605a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  000390a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003a400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224cb  00000000  00000000  0003b610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff55  00000000  00000000  0005dadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6f1d  00000000  00000000  0006da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013494d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  001349c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6b0 	.word	0x0800d6b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800d6b0 	.word	0x0800d6b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fd07 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f00a ff08 	bl	800bd30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd1f 	bl	800198e <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fce7 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000100 	.word	0x20000100
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	200001a0 	.word	0x200001a0

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001a0 	.word	0x200001a0

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f00a fea6 	bl	800bd80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fa92 	bl	800158c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0a5      	b.n	80011fe <HAL_ADC_Start+0x166>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_ADC_Start+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ADC_Start+0x178>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d179      	bne.n	80011fc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f023 0206 	bic.w	r2, r3, #6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_Start+0x180>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_ADC_Start+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x106>
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_Start+0x188>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d129      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_Start+0x17c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d823      	bhi.n	80011fc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11c      	bne.n	80011fc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e013      	b.n	80011fc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_ADC_Start+0x180>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000100 	.word	0x20000100
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d113      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d10b      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f043 0220 	orr.w	r2, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e05c      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800126a:	f7ff fea3 	bl	8000fb4 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	e01a      	b.n	80012a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d016      	beq.n	80012a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
 8001280:	f7ff fe98 	bl	8000fb4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d20b      	bcs.n	80012a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f043 0204 	orr.w	r2, r3, #4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e03d      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d1dd      	bne.n	8001272 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f06f 0212 	mvn.w	r2, #18
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d123      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e105      	b.n	8001570 <HAL_ADC_ConfigChannel+0x228>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_ADC_ConfigChannel+0x234>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d105      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d123      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x1e6>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d11b      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d111      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_ADC_ConfigChannel+0x23c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_ADC_ConfigChannel+0x240>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9a      	lsrs	r2, r3, #18
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001558:	e002      	b.n	8001560 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	20000100 	.word	0x20000100
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <ADC_Init+0x1f0>)
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <ADC_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00f      	b.n	800168a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001688:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	035a      	lsls	r2, r3, #13
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e007      	b.n	8001700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b01      	subs	r3, #1
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	029a      	lsls	r2, r3, #10
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019bc:	7e1b      	ldrb	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_FLASH_Program+0x1e>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e03b      	b.n	8001a3e <HAL_FLASH_Program+0x96>
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d0:	f000 f870 	bl	8001ab4 <FLASH_WaitForLastOperation>
 80019d4:	4603      	mov	r3, r0
 80019d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d12b      	bne.n	8001a36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019e4:	783b      	ldrb	r3, [r7, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 f917 	bl	8001c1c <FLASH_Program_Byte>
 80019ee:	e016      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019f6:	883b      	ldrh	r3, [r7, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f000 f8ea 	bl	8001bd4 <FLASH_Program_HalfWord>
 8001a00:	e00d      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d105      	bne.n	8001a14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f000 f8bf 	bl	8001b90 <FLASH_Program_Word>
 8001a12:	e004      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f000 f88b 	bl	8001b34 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a22:	f000 f847 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001a4 	.word	0x200001a4
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da0b      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_FLASH_Unlock+0x3c>)
 8001a66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_FLASH_Unlock+0x40>)
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da01      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	45670123 	.word	0x45670123
 8001a90:	cdef89ab 	.word	0xcdef89ab

08001a94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <FLASH_WaitForLastOperation+0x78>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac6:	f7ff fa75 	bl	8000fb4 <HAL_GetTick>
 8001aca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001acc:	e010      	b.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d00c      	beq.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <FLASH_WaitForLastOperation+0x38>
 8001adc:	f7ff fa6a 	bl	8000fb4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d201      	bcs.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e019      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e8      	bne.n	8001ace <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b1a:	f000 f8a1 	bl	8001c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
  
}  
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001a4 	.word	0x200001a4
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	0013      	movs	r3, r2
 8001b78:	2400      	movs	r4, #0
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc90      	pop	{r4, r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	801a      	strh	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	60da      	str	r2, [r3, #12]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	200001a4 	.word	0x200001a4

08001d0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_FLASHEx_Erase+0x1e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e058      	b.n	8001ddc <HAL_FLASHEx_Erase+0xd0>
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d34:	f7ff febe 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d148      	bne.n	8001dd4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d115      	bne.n	8001d7e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f844 	bl	8001dec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d68:	f7ff fea4 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6113      	str	r3, [r2, #16]
 8001d7c:	e028      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	e01c      	b.n	8001dc0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 f850 	bl	8001e34 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d98:	f7ff fe8c 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001daa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	601a      	str	r2, [r3, #0]
          break;
 8001db8:	e00a      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3da      	bcc.n	8001d86 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001dd0:	f000 f878 	bl	8001ec4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	761a      	strb	r2, [r3, #24]

  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200001a4 	.word	0x200001a4
 8001de8:	40023c00 	.word	0x40023c00

08001dec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6113      	str	r3, [r2, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e010      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d103      	bne.n	8001e5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e009      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d103      	bne.n	8001e6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	490f      	ldr	r1, [pc, #60]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6113      	str	r3, [r2, #16]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
  }
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e16b      	b.n	8002244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 815a 	bne.w	800223e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x4a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00b      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b4 	beq.w	800223e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x310>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x226>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x314>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x222>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x318>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x21e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x31c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x320>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x324>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x328>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_GPIO_Init+0x32c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x20a>
 8002156:	2307      	movs	r3, #7
 8002158:	e00e      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215a:	2308      	movs	r3, #8
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215e:	2306      	movs	r3, #6
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002176:	2300      	movs	r3, #0
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002188:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_GPIO_Init+0x30c>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ba:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_GPIO_Init+0x330>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f ae90 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800224c:	bf00      	nop
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e22d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4ba3      	ldr	r3, [pc, #652]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e208      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe08 	bl	8000fb4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fe04 	bl	8000fb4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1cd      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdf4 	bl	8000fb4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdf0 	bl	8000fb4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1b9      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e18d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fda9 	bl	8000fb4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fda5 	bl	8000fb4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e16e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd88 	bl	8000fb4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd84 	bl	8000fb4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e14d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd68 	bl	8000fb4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fd64 	bl	8000fb4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e12d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fd51 	bl	8000fb4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fd4d 	bl	8000fb4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e116      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fd13 	bl	8000fb4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
 80025a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd06 	bl	8000fb4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0cf      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025ca:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025e0:	4b60      	ldr	r3, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a5f      	ldr	r2, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fccb 	bl	8000fb4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fcc7 	bl	8000fb4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e08e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x33a>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fcb5 	bl	8000fb4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fcb1 	bl	8000fb4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e078      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d064      	beq.n	8002754 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc86 	bl	8000fb4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fc82 	bl	8000fb4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04b      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491d      	ldr	r1, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc5b 	bl	8000fb4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fc57 	bl	8000fb4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e020      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x41a>
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fc44 	bl	8000fb4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fc40 	bl	8000fb4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x448>
 800274e:	e001      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	40023800 	.word	0x40023800
 8002768:	42470060 	.word	0x42470060

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ca      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b6      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a51      	ldr	r2, [pc, #324]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e065      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4933      	ldr	r1, [pc, #204]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fbaa 	bl	8000fb4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fba6 	bl	8000fb4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e030      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4915      	ldr	r1, [pc, #84]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f81d 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fb0c 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	0800da88 	.word	0x0800da88
 800292c:	20000100 	.word	0x20000100

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d007      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x32>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d008      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x38>
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 808d 	bne.w	8002a76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800295e:	60bb      	str	r3, [r7, #8]
       break;
 8002960:	e08c      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	60bb      	str	r3, [r7, #8]
      break;
 8002966:	e089      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002968:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	f240 11ff 	movw	r1, #511	; 0x1ff
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea03 0501 	and.w	r5, r3, r1
 8002994:	ea04 0602 	and.w	r6, r4, r2
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 800299a:	fb02 f106 	mul.w	r1, r2, r6
 800299e:	2200      	movs	r2, #0
 80029a0:	fb02 f205 	mul.w	r2, r2, r5
 80029a4:	440a      	add	r2, r1
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a8:	fba5 0101 	umull	r0, r1, r5, r1
 80029ac:	1853      	adds	r3, r2, r1
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	f7fe f915 	bl	8000be8 <__aeabi_uldivmod>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e049      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	02a2      	lsls	r2, r4, #10
 8002a38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a3c:	0299      	lsls	r1, r3, #10
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fe f8ca 	bl	8000be8 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	3301      	adds	r3, #1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	60bb      	str	r3, [r7, #8]
      break;
 8002a74:	e002      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a78:	60bb      	str	r3, [r7, #8]
      break;
 8002a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000100 	.word	0x20000100

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	0800da98 	.word	0x0800da98

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800da98 	.word	0x0800da98

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e056      	b.n	8002bbc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f009 f96d 	bl	800be08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0104 	and.w	r1, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Transmit+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e11e      	b.n	8002e24 <HAL_SPI_Transmit+0x260>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bee:	f7fe f9e1 	bl	8000fb4 <HAL_GetTick>
 8002bf2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c08:	e103      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Transmit+0x52>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1a:	e0fa      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c62:	d107      	bne.n	8002c74 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d007      	beq.n	8002c92 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d14b      	bne.n	8002d34 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0xe6>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13e      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cce:	e02b      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d02:	e011      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7fe f956 	bl	8000fb4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x158>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x15e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d26:	e074      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ce      	bne.n	8002cd0 <HAL_SPI_Transmit+0x10c>
 8002d32:	e04c      	b.n	8002dce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x17e>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d140      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d68:	e02c      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9e:	e011      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da0:	f7fe f908 	bl	8000fb4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d803      	bhi.n	8002db8 <HAL_SPI_Transmit+0x1f4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x1fa>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc2:	e026      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cd      	bne.n	8002d6a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fba4 	bl	8003520 <SPI_EndRxTxTransaction>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e000      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d112      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10e      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2204      	movs	r2, #4
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8e9 	bl	800303e <HAL_SPI_TransmitReceive>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	e0e2      	b.n	8003036 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Receive+0x52>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0db      	b.n	8003036 <HAL_SPI_Receive+0x20a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fe f895 	bl	8000fb4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e9c:	e0c2      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Receive+0x7e>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eae:	e0b9      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d107      	bne.n	8002f08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d162      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f2e:	e02e      	b.n	8002f8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f103 020c 	add.w	r2, r3, #12
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe f823 	bl	8000fb4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Receive+0x156>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x15c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f8c:	e04a      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1cb      	bne.n	8002f30 <HAL_SPI_Receive+0x104>
 8002f98:	e031      	b.n	8002ffe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d113      	bne.n	8002fd0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e011      	b.n	8002ff4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fd fff0 	bl	8000fb4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Receive+0x1bc>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x1c2>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ff2:	e017      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cd      	bne.n	8002f9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fa27 	bl	8003456 <SPI_EndRxTransaction>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
 8003020:	e000      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08c      	sub	sp, #48	; 0x30
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x26>
 8003060:	2302      	movs	r3, #2
 8003062:	e18a      	b.n	800337a <HAL_SPI_TransmitReceive+0x33c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306c:	f7fd ffa2 	bl	8000fb4 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00f      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003094:	d107      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
 800309e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ac:	e15b      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030c6:	e14e      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	887a      	ldrh	r2, [r7, #2]
 80030f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d178      	bne.n	800322c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x10a>
 8003142:	8b7b      	ldrh	r3, [r7, #26]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d166      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800316c:	e053      	b.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d113      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d119      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d014      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	b292      	uxth	r2, r2
 80031d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	1c9a      	adds	r2, r3, #2
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f6:	f7fd fedd 	bl	8000fb4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	429a      	cmp	r2, r3
 8003204:	d807      	bhi.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d003      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003214:	e0a7      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1a6      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1a1      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 800322a:	e07c      	b.n	8003326 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_TransmitReceive+0x1fc>
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d16b      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	e057      	b.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11c      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d114      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ec:	f7fd fe62 	bl	8000fb4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d803      	bhi.n	8003304 <HAL_SPI_TransmitReceive+0x2c6>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d102      	bne.n	800330a <HAL_SPI_TransmitReceive+0x2cc>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003310:	e029      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1a2      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19d      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8f8 	bl	8003520 <SPI_EndRxTxTransaction>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003342:	e010      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	e000      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	e04c      	b.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d048      	beq.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800339c:	f7fd fe0a 	bl	8000fb4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d902      	bls.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d13d      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d004      	beq.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d107      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d10f      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e00f      	b.n	800344e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1a3      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346a:	d111      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d004      	beq.n	8003480 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347e:	d107      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003498:	d12a      	bne.n	80034f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d012      	beq.n	80034ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff67 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02d      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e026      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff54 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff41 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <SPI_EndRxTxTransaction+0x7c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <SPI_EndRxTxTransaction+0x80>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0d5b      	lsrs	r3, r3, #21
 8003538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d112      	bne.n	8003572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff13 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d0f2      	beq.n	8003572 <SPI_EndRxTxTransaction+0x52>
 800358c:	e000      	b.n	8003590 <SPI_EndRxTxTransaction+0x70>
        break;
 800358e:	bf00      	nop
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000100 	.word	0x20000100
 80035a0:	165e9f81 	.word	0x165e9f81

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f008 fc64 	bl	800be98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fc70 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d007      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e01d      	b.n	8003690 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f815 	bl	8003698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fc21 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 feec 	bl	800449c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_TIM_PWM_Start+0x74>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIM_PWM_Start+0x2c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_PWM_Start+0x78>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_PWM_Start+0x30>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_TIM_PWM_Start+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d007      	beq.n	8003714 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 feae 	bl	800449c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_TIM_PWM_Stop+0xa8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIM_PWM_Stop+0x2c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_TIM_PWM_Stop+0xac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_TIM_PWM_Stop+0x30>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_TIM_PWM_Stop+0x32>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	f241 1311 	movw	r3, #4369	; 0x1111
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_TIM_PWM_Stop+0x66>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	f240 4344 	movw	r3, #1092	; 0x444
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_TIM_PWM_Stop+0x66>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	f241 1311 	movw	r3, #4369	; 0x1111
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_TIM_PWM_Stop+0x96>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	f240 4344 	movw	r3, #1092	; 0x444
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_TIM_PWM_Stop+0x96>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e083      	b.n	80038f4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f008 fb9b 	bl	800bf3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381c:	f023 0307 	bic.w	r3, r3, #7
 8003820:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 fb4b 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	4313      	orrs	r3, r2
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003878:	f023 030c 	bic.w	r3, r3, #12
 800387c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003884:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	4313      	orrs	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	031b      	lsls	r3, r3, #12
 80038a8:	4313      	orrs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	4313      	orrs	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_TIM_Encoder_Start+0x16>
 800390c:	2b04      	cmp	r3, #4
 800390e:	d008      	beq.n	8003922 <HAL_TIM_Encoder_Start+0x26>
 8003910:	e00f      	b.n	8003932 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fdbe 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003920:	e016      	b.n	8003950 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	2104      	movs	r1, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fdb6 	bl	800449c <TIM_CCxChannelCmd>
      break;
 8003930:	e00e      	b.n	8003950 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdae 	bl	800449c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	2104      	movs	r1, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fda7 	bl	800449c <TIM_CCxChannelCmd>
      break;
 800394e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d122      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d11b      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0202 	mvn.w	r2, #2
 8003996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fa6c 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 80039b2:	e005      	b.n	80039c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fa5e 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa6f 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d122      	bne.n	8003a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d11b      	bne.n	8003a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0204 	mvn.w	r2, #4
 80039ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa42 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003a06:	e005      	b.n	8003a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa34 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa45 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d122      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11b      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0208 	mvn.w	r2, #8
 8003a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2204      	movs	r2, #4
 8003a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa18 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003a5a:	e005      	b.n	8003a68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fa0a 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa1b 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d122      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d11b      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0210 	mvn.w	r2, #16
 8003a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2208      	movs	r2, #8
 8003a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f9ee 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003aae:	e005      	b.n	8003abc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9e0 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9f1 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10e      	bne.n	8003aee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0201 	mvn.w	r2, #1
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f004 f9d1 	bl	8007e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d10e      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d107      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fd35 	bl	8004584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d10e      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f9b6 	bl	8003eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d10e      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0220 	mvn.w	r2, #32
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fcff 	bl	8004570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0b4      	b.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	f200 809f 	bhi.w	8003cec <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003ced 	.word	0x08003ced
 8003bbc:	08003ced 	.word	0x08003ced
 8003bc0:	08003ced 	.word	0x08003ced
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003ced 	.word	0x08003ced
 8003bcc:	08003ced 	.word	0x08003ced
 8003bd0:	08003ced 	.word	0x08003ced
 8003bd4:	08003c6b 	.word	0x08003c6b
 8003bd8:	08003ced 	.word	0x08003ced
 8003bdc:	08003ced 	.word	0x08003ced
 8003be0:	08003ced 	.word	0x08003ced
 8003be4:	08003cab 	.word	0x08003cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fa0a 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	619a      	str	r2, [r3, #24]
      break;
 8003c26:	e062      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fa5a 	bl	80040e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]
      break;
 8003c68:	e041      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 faaf 	bl	80041d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0208 	orr.w	r2, r2, #8
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0204 	bic.w	r2, r2, #4
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
      break;
 8003ca8:	e021      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fb03 	bl	80042bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	61da      	str	r2, [r3, #28]
      break;
 8003cea:	e000      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003cec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_ConfigClockSource+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0a6      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x166>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d067      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x120>
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d80b      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x6c>
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d073      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d802      	bhi.n	8003d6a <HAL_TIM_ConfigClockSource+0x62>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d06f      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d68:	e078      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d06c      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
 8003d6e:	2b30      	cmp	r3, #48	; 0x30
 8003d70:	d06a      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d72:	e073      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d74:	2b70      	cmp	r3, #112	; 0x70
 8003d76:	d00d      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0x8c>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d804      	bhi.n	8003d86 <HAL_TIM_ConfigClockSource+0x7e>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d033      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0xe0>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d041      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d84:	e06a      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	d066      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x152>
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d90:	d017      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d92:	e063      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f000 fb5a 	bl	800445c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e04c      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6899      	ldr	r1, [r3, #8]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f000 fb43 	bl	800445c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de4:	609a      	str	r2, [r3, #8]
      break;
 8003de6:	e039      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f000 fab7 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2150      	movs	r1, #80	; 0x50
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fb10 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e06:	e029      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	461a      	mov	r2, r3
 8003e16:	f000 fad6 	bl	80043c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2160      	movs	r1, #96	; 0x60
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fb00 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e26:	e019      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f000 fa97 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 faf0 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e46:	e009      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fae7 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3a      	ldr	r2, [pc, #232]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d02b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d027      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d023      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <TIM_Base_SetConfig+0x120>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a29      	ldr	r2, [pc, #164]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d017      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a28      	ldr	r2, [pc, #160]	; (8003ff0 <TIM_Base_SetConfig+0x128>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <TIM_Base_SetConfig+0x12c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00f      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <TIM_Base_SetConfig+0x130>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0x134>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <TIM_Base_SetConfig+0x138>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <TIM_Base_SetConfig+0x13c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d108      	bne.n	8003f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0xf8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <TIM_Base_SetConfig+0x124>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800
 8003ffc:	40001800 	.word	0x40001800
 8004000:	40001c00 	.word	0x40001c00
 8004004:	40002000 	.word	0x40002000

08004008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <TIM_OC1_SetConfig+0xd8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC1_SetConfig+0x64>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10c      	bne.n	8004086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0308 	bic.w	r3, r3, #8
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <TIM_OC1_SetConfig+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC1_SetConfig+0x8e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <TIM_OC1_SetConfig+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0320 	bic.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10d      	bne.n	800416c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a17      	ldr	r2, [pc, #92]	; (80041cc <TIM_OC2_SetConfig+0xe4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC2_SetConfig+0x94>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <TIM_OC2_SetConfig+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800421c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x66>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <TIM_OC3_SetConfig+0xe0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC3_SetConfig+0x92>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <TIM_OC3_SetConfig+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d113      	bne.n	800428e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010400 	.word	0x40010400

080042bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <TIM_OC4_SetConfig+0xa4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x68>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <TIM_OC4_SetConfig+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	f043 0307 	orr.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e032      	b.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e03f      	b.n	800462a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f007 fdb8 	bl	800c134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	; 0x24
 80045c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f90b 	bl	80047f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b088      	sub	sp, #32
 8004636:	af02      	add	r7, sp, #8
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	f040 8083 	bne.w	800475a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_UART_Transmit+0x2e>
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e07b      	b.n	800475c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_UART_Transmit+0x40>
 800466e:	2302      	movs	r3, #2
 8004670:	e074      	b.n	800475c <HAL_UART_Transmit+0x12a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2221      	movs	r2, #33	; 0x21
 8004684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004688:	f7fc fc94 	bl	8000fb4 <HAL_GetTick>
 800468c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800469a:	e042      	b.n	8004722 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d122      	bne.n	80046fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f850 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e046      	b.n	800475c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3302      	adds	r3, #2
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	e017      	b.n	8004722 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	e013      	b.n	8004722 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f82d 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e023      	b.n	800475c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	60ba      	str	r2, [r7, #8]
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1b7      	bne.n	800469c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f814 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e00a      	b.n	800475c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004774:	e02c      	b.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d028      	beq.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <UART_WaitOnFlagUntilTimeout+0x30>
 8004784:	f7fc fc16 	bl	8000fb4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d21d      	bcs.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e00f      	b.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d0c3      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004838:	f023 030c 	bic.w	r3, r3, #12
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	68f9      	ldr	r1, [r7, #12]
 8004842:	430b      	orrs	r3, r1
 8004844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	f040 80e4 	bne.w	8004a30 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4aab      	ldr	r2, [pc, #684]	; (8004b1c <UART_SetConfig+0x324>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <UART_SetConfig+0x84>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4aaa      	ldr	r2, [pc, #680]	; (8004b20 <UART_SetConfig+0x328>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d16c      	bne.n	8004956 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800487c:	f7fe f92a 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004880:	4602      	mov	r2, r0
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	4aa3      	ldr	r2, [pc, #652]	; (8004b24 <UART_SetConfig+0x32c>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	011c      	lsls	r4, r3, #4
 80048a0:	f7fe f918 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009a      	lsls	r2, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80048ba:	f7fe f90b 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	4a93      	ldr	r2, [pc, #588]	; (8004b24 <UART_SetConfig+0x32c>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2264      	movs	r2, #100	; 0x64
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	1aeb      	subs	r3, r5, r3
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	3332      	adds	r3, #50	; 0x32
 80048e8:	4a8e      	ldr	r2, [pc, #568]	; (8004b24 <UART_SetConfig+0x32c>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f6:	441c      	add	r4, r3
 80048f8:	f7fe f8ec 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009a      	lsls	r2, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004912:	f7fe f8df 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004916:	4602      	mov	r2, r0
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	4a7d      	ldr	r2, [pc, #500]	; (8004b24 <UART_SetConfig+0x32c>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	; 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1aeb      	subs	r3, r5, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	3332      	adds	r3, #50	; 0x32
 8004940:	4a78      	ldr	r2, [pc, #480]	; (8004b24 <UART_SetConfig+0x32c>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	f003 0207 	and.w	r2, r3, #7
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4422      	add	r2, r4
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	e154      	b.n	8004c00 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004956:	f7fe f8a9 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800495a:	4602      	mov	r2, r0
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	4a6c      	ldr	r2, [pc, #432]	; (8004b24 <UART_SetConfig+0x32c>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	011c      	lsls	r4, r3, #4
 800497a:	f7fe f897 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800497e:	4602      	mov	r2, r0
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fbb2 f5f3 	udiv	r5, r2, r3
 8004994:	f7fe f88a 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004998:	4602      	mov	r2, r0
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009a      	lsls	r2, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4a5d      	ldr	r2, [pc, #372]	; (8004b24 <UART_SetConfig+0x32c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2264      	movs	r2, #100	; 0x64
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	1aeb      	subs	r3, r5, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3332      	adds	r3, #50	; 0x32
 80049c2:	4a58      	ldr	r2, [pc, #352]	; (8004b24 <UART_SetConfig+0x32c>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d0:	441c      	add	r4, r3
 80049d2:	f7fe f86b 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80049ec:	f7fe f85e 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	4a47      	ldr	r2, [pc, #284]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2264      	movs	r2, #100	; 0x64
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	1aeb      	subs	r3, r5, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4422      	add	r2, r4
 8004a2c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a2e:	e0e7      	b.n	8004c00 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <UART_SetConfig+0x324>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <UART_SetConfig+0x24c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a38      	ldr	r2, [pc, #224]	; (8004b20 <UART_SetConfig+0x328>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d171      	bne.n	8004b28 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a44:	f7fe f846 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4a31      	ldr	r2, [pc, #196]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	011c      	lsls	r4, r3, #4
 8004a68:	f7fe f834 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009a      	lsls	r2, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a82:	f7fe f827 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009a      	lsls	r2, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <UART_SetConfig+0x32c>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1aeb      	subs	r3, r5, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	; 0x32
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <UART_SetConfig+0x32c>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abc:	441c      	add	r4, r3
 8004abe:	f7fe f809 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad8:	f7fd fffc 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009a      	lsls	r2, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	4a0c      	ldr	r2, [pc, #48]	; (8004b24 <UART_SetConfig+0x32c>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2264      	movs	r2, #100	; 0x64
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	1aeb      	subs	r3, r5, r3
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	3332      	adds	r3, #50	; 0x32
 8004b06:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <UART_SetConfig+0x32c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	f003 020f 	and.w	r2, r3, #15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4422      	add	r2, r4
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	e071      	b.n	8004c00 <UART_SetConfig+0x408>
 8004b1c:	40011000 	.word	0x40011000
 8004b20:	40011400 	.word	0x40011400
 8004b24:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b28:	f7fd ffc0 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a31      	ldr	r2, [pc, #196]	; (8004c08 <UART_SetConfig+0x410>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	011c      	lsls	r4, r3, #4
 8004b4c:	f7fd ffae 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009a      	lsls	r2, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b66:	f7fd ffa1 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009a      	lsls	r2, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <UART_SetConfig+0x410>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2264      	movs	r2, #100	; 0x64
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	1aeb      	subs	r3, r5, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <UART_SetConfig+0x410>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	441c      	add	r4, r3
 8004ba2:	f7fd ff83 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bbc:	f7fd ff76 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <UART_SetConfig+0x410>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	2264      	movs	r2, #100	; 0x64
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	1aeb      	subs	r3, r5, r3
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	3332      	adds	r3, #50	; 0x32
 8004bea:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <UART_SetConfig+0x410>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f003 020f 	and.w	r2, r3, #15
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4422      	add	r2, r4
 8004bfc:	609a      	str	r2, [r3, #8]
}
 8004bfe:	e7ff      	b.n	8004c00 <UART_SetConfig+0x408>
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bdb0      	pop	{r4, r5, r7, pc}
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <drive_init>:
//drive_init
//a走行系の変数の初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <drive_init+0x14>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000ee4 	.word	0x20000ee4

08004c24 <drive_ready>:
//drive_ready
//a走行前のLED点滅&ジャイロのドリフト計算
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c28:	e00f      	b.n	8004c4a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f006 fe5e 	bl	800b8f0 <led_write>
		  HAL_Delay(200);
 8004c34:	20c8      	movs	r0, #200	; 0xc8
 8004c36:	f7fc f9c9 	bl	8000fcc <HAL_Delay>
		  led_write(0, 0, 0);
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f006 fe56 	bl	800b8f0 <led_write>
		  HAL_Delay(200);
 8004c44:	20c8      	movs	r0, #200	; 0xc8
 8004c46:	f7fc f9c1 	bl	8000fcc <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <drive_ready+0x48>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b46      	cmp	r3, #70	; 0x46
 8004c50:	d9eb      	bls.n	8004c2a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <drive_ready+0x4c>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c5c:	f7fc f9b6 	bl	8000fcc <HAL_Delay>
	  degree_z = 0;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <drive_ready+0x50>)
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000cd4 	.word	0x20000cd4
 8004c70:	20000a1c 	.word	0x20000a1c
 8004c74:	20000ad8 	.word	0x20000ad8

08004c78 <drive_start>:
//drive_start
//a走行開始前に走行距離と機体角度を初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <drive_start+0x44>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <drive_start+0x48>)
 8004c86:	6013      	str	r3, [r2, #0]
//	degree_z = 0;				//機体角度の初期化
	if(H_accel_flag == 0) /*pulse_l = pulse_r = */target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <drive_start+0x4c>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <drive_start+0x24>
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <drive_start+0x50>)
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <drive_start+0x54>)
 8004c9a:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <drive_start+0x58>)
 8004c9e:	8813      	ldrh	r3, [r2, #0]
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <drive_start+0x58>)
 8004ca8:	8813      	ldrh	r3, [r2, #0]
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	8013      	strh	r3, [r2, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000a68 	.word	0x20000a68
 8004cc0:	20000f00 	.word	0x20000f00
 8004cc4:	20000345 	.word	0x20000345
 8004cc8:	20000220 	.word	0x20000220
 8004ccc:	20000b7c 	.word	0x20000b7c
 8004cd0:	20000ee4 	.word	0x20000ee4

08004cd4 <drive_stop>:
//a走行を終了する
//a（タイマを止めてタイマカウント値を0にリセットする）
//a引数1：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <drive_stop+0x3c>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <drive_stop+0x40>)
 8004ce2:	6013      	str	r3, [r2, #0]
//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <drive_stop+0x44>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <drive_stop+0x48>)
 8004cee:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <drive_stop+0x4c>)
 8004cf2:	8813      	ldrh	r3, [r2, #0]
 8004cf4:	f36f 0341 	bfc	r3, #1, #1
 8004cf8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <drive_stop+0x4c>)
 8004cfc:	8813      	ldrh	r3, [r2, #0]
 8004cfe:	f36f 0382 	bfc	r3, #2, #1
 8004d02:	8013      	strh	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000a68 	.word	0x20000a68
 8004d14:	20000f00 	.word	0x20000f00
 8004d18:	200006f8 	.word	0x200006f8
 8004d1c:	20000b24 	.word	0x20000b24
 8004d20:	20000ee4 	.word	0x20000ee4

08004d24 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <control_start+0x2c>)
 8004d2a:	8813      	ldrh	r3, [r2, #0]
 8004d2c:	f043 0308 	orr.w	r3, r3, #8
 8004d30:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d32:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <control_start+0x2c>)
 8004d34:	8813      	ldrh	r3, [r2, #0]
 8004d36:	f043 0310 	orr.w	r3, r3, #16
 8004d3a:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <control_start+0x30>)
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000ee4 	.word	0x20000ee4
 8004d54:	20000228 	.word	0x20000228

08004d58 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004d5c:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <control_stop+0x2c>)
 8004d5e:	8813      	ldrh	r3, [r2, #0]
 8004d60:	f36f 03c3 	bfc	r3, #3, #1
 8004d64:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004d66:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <control_stop+0x2c>)
 8004d68:	8813      	ldrh	r3, [r2, #0]
 8004d6a:	f36f 1304 	bfc	r3, #4, #1
 8004d6e:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <control_stop+0x30>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000ee4 	.word	0x20000ee4
 8004d88:	20000228 	.word	0x20000228

08004d8c <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
//a引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
//a戻り値: nothing
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	460a      	mov	r2, r1
 8004d96:	71fb      	strb	r3, [r7, #7]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d13e      	bne.n	8004e20 <drive_dir+0x94>
		if(dir == 0){
 8004da2:	79bb      	ldrb	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10f      	bne.n	8004dc8 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004da8:	2201      	movs	r2, #1
 8004daa:	2120      	movs	r1, #32
 8004dac:	483f      	ldr	r0, [pc, #252]	; (8004eac <drive_dir+0x120>)
 8004dae:	f7fd fa81 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004db2:	2200      	movs	r2, #0
 8004db4:	2110      	movs	r1, #16
 8004db6:	483d      	ldr	r0, [pc, #244]	; (8004eac <drive_dir+0x120>)
 8004db8:	f7fd fa7c 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	483b      	ldr	r0, [pc, #236]	; (8004eb0 <drive_dir+0x124>)
 8004dc2:	f7fd fa77 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dc6:	e06c      	b.n	8004ea2 <drive_dir+0x116>
		}else if(dir == 1){
 8004dc8:	79bb      	ldrb	r3, [r7, #6]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10f      	bne.n	8004dee <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2120      	movs	r1, #32
 8004dd2:	4836      	ldr	r0, [pc, #216]	; (8004eac <drive_dir+0x120>)
 8004dd4:	f7fd fa6e 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004dd8:	2201      	movs	r2, #1
 8004dda:	2110      	movs	r1, #16
 8004ddc:	4833      	ldr	r0, [pc, #204]	; (8004eac <drive_dir+0x120>)
 8004dde:	f7fd fa69 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004de2:	2201      	movs	r2, #1
 8004de4:	2101      	movs	r1, #1
 8004de6:	4832      	ldr	r0, [pc, #200]	; (8004eb0 <drive_dir+0x124>)
 8004de8:	f7fd fa64 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004dec:	e059      	b.n	8004ea2 <drive_dir+0x116>
		}else if(dir == 2){
 8004dee:	79bb      	ldrb	r3, [r7, #6]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d10f      	bne.n	8004e14 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004df4:	2201      	movs	r2, #1
 8004df6:	2120      	movs	r1, #32
 8004df8:	482c      	ldr	r0, [pc, #176]	; (8004eac <drive_dir+0x120>)
 8004dfa:	f7fd fa5b 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2110      	movs	r1, #16
 8004e02:	482a      	ldr	r0, [pc, #168]	; (8004eac <drive_dir+0x120>)
 8004e04:	f7fd fa56 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4828      	ldr	r0, [pc, #160]	; (8004eb0 <drive_dir+0x124>)
 8004e0e:	f7fd fa51 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e12:	e046      	b.n	8004ea2 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e14:	2200      	movs	r2, #0
 8004e16:	2101      	movs	r1, #1
 8004e18:	4825      	ldr	r0, [pc, #148]	; (8004eb0 <drive_dir+0x124>)
 8004e1a:	f7fd fa4b 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e1e:	e040      	b.n	8004ea2 <drive_dir+0x116>
		if(dir == 0){
 8004e20:	79bb      	ldrb	r3, [r7, #6]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d110      	bne.n	8004e48 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e26:	2201      	movs	r2, #1
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4821      	ldr	r0, [pc, #132]	; (8004eb0 <drive_dir+0x124>)
 8004e2c:	f7fd fa42 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e36:	481e      	ldr	r0, [pc, #120]	; (8004eb0 <drive_dir+0x124>)
 8004e38:	f7fd fa3c 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	2101      	movs	r1, #1
 8004e40:	481b      	ldr	r0, [pc, #108]	; (8004eb0 <drive_dir+0x124>)
 8004e42:	f7fd fa37 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e46:	e02c      	b.n	8004ea2 <drive_dir+0x116>
		}else if(dir == 1){
 8004e48:	79bb      	ldrb	r3, [r7, #6]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d110      	bne.n	8004e70 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2102      	movs	r1, #2
 8004e52:	4817      	ldr	r0, [pc, #92]	; (8004eb0 <drive_dir+0x124>)
 8004e54:	f7fd fa2e 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e5e:	4814      	ldr	r0, [pc, #80]	; (8004eb0 <drive_dir+0x124>)
 8004e60:	f7fd fa28 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e64:	2201      	movs	r2, #1
 8004e66:	2101      	movs	r1, #1
 8004e68:	4811      	ldr	r0, [pc, #68]	; (8004eb0 <drive_dir+0x124>)
 8004e6a:	f7fd fa23 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e6e:	e018      	b.n	8004ea2 <drive_dir+0x116>
		}else if(dir == 2){
 8004e70:	79bb      	ldrb	r3, [r7, #6]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d110      	bne.n	8004e98 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e76:	2201      	movs	r2, #1
 8004e78:	2102      	movs	r1, #2
 8004e7a:	480d      	ldr	r0, [pc, #52]	; (8004eb0 <drive_dir+0x124>)
 8004e7c:	f7fd fa1a 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e80:	2201      	movs	r2, #1
 8004e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e86:	480a      	ldr	r0, [pc, #40]	; (8004eb0 <drive_dir+0x124>)
 8004e88:	f7fd fa14 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4807      	ldr	r0, [pc, #28]	; (8004eb0 <drive_dir+0x124>)
 8004e92:	f7fd fa0f 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004e96:	e004      	b.n	8004ea2 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <drive_dir+0x124>)
 8004e9e:	f7fd fa09 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40020800 	.word	0x40020800
 8004eb0:	40020400 	.word	0x40020400

08004eb4 <driveA>:
//driveA
// a指定距離、指定加速度で加速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	80fb      	strh	r3, [r7, #6]
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	80bb      	strh	r3, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	807b      	strh	r3, [r7, #2]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <driveA+0xc0>)
 8004ede:	edc3 7a00 	vstr	s15, [r3]
 8004ee2:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <driveA+0xc4>)
 8004ee4:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <driveA+0xc8>)
 8004ef4:	edc3 7a00 	vstr	s15, [r3]
 8004ef8:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <driveA+0xcc>)
 8004efa:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <driveA+0xd0>)
 8004f0a:	edc3 7a00 	vstr	s15, [r3]
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <driveA+0xd4>)
 8004f10:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 0)target_speed_l = target_speed_r = speed_min_p;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <driveA+0xd8>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <driveA+0x7e>
 8004f1c:	88bb      	ldrh	r3, [r7, #4]
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <driveA+0xdc>)
 8004f28:	edc3 7a00 	vstr	s15, [r3]
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <driveA+0xe0>)
 8004f2e:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f32:	f7ff fea1 	bl	8004c78 <drive_start>

	//----a走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8004f36:	bf00      	nop
 8004f38:	883b      	ldrh	r3, [r7, #0]
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <driveA+0xe4>)
 8004f44:	edd3 7a00 	vldr	s15, [r3]
 8004f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f50:	dcf2      	bgt.n	8004f38 <driveA+0x84>
 8004f52:	883b      	ldrh	r3, [r7, #0]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <driveA+0xe8>)
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6a:	dce5      	bgt.n	8004f38 <driveA+0x84>

//	drive_stop();											//走行停止
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}
 8004f74:	20000ee8 	.word	0x20000ee8
 8004f78:	20000ad0 	.word	0x20000ad0
 8004f7c:	20000224 	.word	0x20000224
 8004f80:	200006f4 	.word	0x200006f4
 8004f84:	20000a60 	.word	0x20000a60
 8004f88:	20000cd8 	.word	0x20000cd8
 8004f8c:	20000345 	.word	0x20000345
 8004f90:	20000220 	.word	0x20000220
 8004f94:	20000b7c 	.word	0x20000b7c
 8004f98:	20000f00 	.word	0x20000f00
 8004f9c:	20000a68 	.word	0x20000a68

08004fa0 <driveD>:
//driveD
//a指定距離、指定減速度で減速走行する
//a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4623      	mov	r3, r4
 8004fb0:	80fb      	strh	r3, [r7, #6]
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80bb      	strh	r3, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	807b      	strh	r3, [r7, #2]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	803b      	strh	r3, [r7, #0]

	float speed_0 = speed_l;								//等速走行距離を計算するためにmain.cより参照
 8004fbe:	4b4e      	ldr	r3, [pc, #312]	; (80050f8 <driveD+0x158>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8004fc4:	88bb      	ldrh	r3, [r7, #4]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	4b4b      	ldr	r3, [pc, #300]	; (80050fc <driveD+0x15c>)
 8004fd0:	edc3 7a00 	vstr	s15, [r3]
 8004fd4:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <driveD+0x160>)
 8004fd6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe4:	4b47      	ldr	r3, [pc, #284]	; (8005104 <driveD+0x164>)
 8004fe6:	edc3 7a00 	vstr	s15, [r3]
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <driveD+0x168>)
 8004fec:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffc:	4b43      	ldr	r3, [pc, #268]	; (800510c <driveD+0x16c>)
 8004ffe:	edc3 7a00 	vstr	s15, [r3]
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <driveD+0x170>)
 8005004:	edc3 7a00 	vstr	s15, [r3]

//	drive_start();											//走行開始

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005008:	883b      	ldrh	r3, [r7, #0]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <driveD+0x160>)
 8005014:	edd3 6a00 	vldr	s13, [r3]
 8005018:	4b39      	ldr	r3, [pc, #228]	; (8005100 <driveD+0x160>)
 800501a:	edd3 7a00 	vldr	s15, [r3]
 800501e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	edd7 7a03 	vldr	s15, [r7, #12]
 800502a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800502e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <driveD+0x170>)
 8005034:	edd3 7a00 	vldr	s15, [r3]
 8005038:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800503c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005048:	ee17 3a90 	vmov	r3, s15
 800504c:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	4a2e      	ldr	r2, [pc, #184]	; (800510c <driveD+0x16c>)
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <driveD+0x170>)
 8005058:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800505a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800505e:	2b00      	cmp	r3, #0
 8005060:	dd1c      	ble.n	800509c <driveD+0xfc>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 8005062:	bf00      	nop
 8005064:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <driveD+0x174>)
 8005072:	edd3 7a00 	vldr	s15, [r3]
 8005076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507e:	dcf1      	bgt.n	8005064 <driveD+0xc4>
 8005080:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800508c:	4b22      	ldr	r3, [pc, #136]	; (8005118 <driveD+0x178>)
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	dce3      	bgt.n	8005064 <driveD+0xc4>
	}
	accel_l = accel_r = accel_p;
 800509c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a8:	4b18      	ldr	r3, [pc, #96]	; (800510c <driveD+0x16c>)
 80050aa:	edc3 7a00 	vstr	s15, [r3]
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <driveD+0x170>)
 80050b0:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80050b4:	bf00      	nop
 80050b6:	883b      	ldrh	r3, [r7, #0]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <driveD+0x174>)
 80050c2:	edd3 7a00 	vldr	s15, [r3]
 80050c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ce:	dcf2      	bgt.n	80050b6 <driveD+0x116>
 80050d0:	883b      	ldrh	r3, [r7, #0]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <driveD+0x178>)
 80050dc:	edd3 7a00 	vldr	s15, [r3]
 80050e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	dce5      	bgt.n	80050b6 <driveD+0x116>

	drive_stop();											//走行停止
 80050ea:	f7ff fdf3 	bl	8004cd4 <drive_stop>
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd90      	pop	{r4, r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000a6c 	.word	0x20000a6c
 80050fc:	20000ee8 	.word	0x20000ee8
 8005100:	20000ad0 	.word	0x20000ad0
 8005104:	20000224 	.word	0x20000224
 8005108:	200006f4 	.word	0x200006f4
 800510c:	20000a60 	.word	0x20000a60
 8005110:	20000cd8 	.word	0x20000cd8
 8005114:	20000f00 	.word	0x20000f00
 8005118:	20000a68 	.word	0x20000a68

0800511c <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	4a25      	ldr	r2, [pc, #148]	; (80051c0 <driveU+0xa4>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <driveU+0xa8>)
 8005130:	6013      	str	r3, [r2, #0]
//	drive_start();											//走行開始

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005132:	e024      	b.n	800517e <driveU+0x62>
		if(MF.FLAG.WEDGE == 1){
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <driveU+0xac>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	d11d      	bne.n	800517e <driveU+0x62>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <driveU+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b09      	cmp	r3, #9
 8005148:	d903      	bls.n	8005152 <driveU+0x36>
 800514a:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <driveU+0xb4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b1d      	cmp	r3, #29
 8005150:	d815      	bhi.n	800517e <driveU+0x62>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 8005152:	bf00      	nop
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <driveU+0xb8>)
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80051d8 <driveU+0xbc>
 800515e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005166:	d4f5      	bmi.n	8005154 <driveU+0x38>
 8005168:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <driveU+0xc0>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80051d8 <driveU+0xbc>
 8005172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	d4eb      	bmi.n	8005154 <driveU+0x38>
			break;
 800517c:	e019      	b.n	80051b2 <driveU+0x96>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <driveU+0xb8>)
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	dccd      	bgt.n	8005134 <driveU+0x18>
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051a2:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <driveU+0xc0>)
 80051a4:	edd3 7a00 	vldr	s15, [r3]
 80051a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b0:	dcc0      	bgt.n	8005134 <driveU+0x18>
			}
		}
	}

//	drive_stop();											//走行停止
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000a60 	.word	0x20000a60
 80051c4:	20000cd8 	.word	0x20000cd8
 80051c8:	20000ee4 	.word	0x20000ee4
 80051cc:	20000a78 	.word	0x20000a78
 80051d0:	20000ee0 	.word	0x20000ee0
 80051d4:	20000f00 	.word	0x20000f00
 80051d8:	428c0000 	.word	0x428c0000
 80051dc:	20000a68 	.word	0x20000a68

080051e0 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 80051ea:	4b19      	ldr	r3, [pc, #100]	; (8005250 <driveC+0x70>)
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <driveC+0x74>)
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <driveC+0x78>)
 80051f2:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <driveC+0x70>)
 80051f6:	4a19      	ldr	r2, [pc, #100]	; (800525c <driveC+0x7c>)
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4a19      	ldr	r2, [pc, #100]	; (8005260 <driveC+0x80>)
 80051fc:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	4a18      	ldr	r2, [pc, #96]	; (8005264 <driveC+0x84>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4a18      	ldr	r2, [pc, #96]	; (8005268 <driveC+0x88>)
 8005208:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800520a:	f7ff fd35 	bl	8004c78 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800520e:	bf00      	nop
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <driveC+0x8c>)
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005228:	dcf2      	bgt.n	8005210 <driveC+0x30>
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <driveC+0x90>)
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	dce5      	bgt.n	8005210 <driveC+0x30>

	drive_stop();											//走行停止
 8005244:	f7ff fd46 	bl	8004cd4 <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	43160000 	.word	0x43160000
 8005254:	20000ee8 	.word	0x20000ee8
 8005258:	20000ad0 	.word	0x20000ad0
 800525c:	20000224 	.word	0x20000224
 8005260:	200006f4 	.word	0x200006f4
 8005264:	20000a60 	.word	0x20000a60
 8005268:	20000cd8 	.word	0x20000cd8
 800526c:	20000f00 	.word	0x20000f00
 8005270:	20000a68 	.word	0x20000a68

08005274 <driveC2>:
//driveC2
// 指定距離分デフォルト逆回転速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <driveC2+0x74>)
 8005280:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <driveC2+0x78>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <driveC2+0x7c>)
 8005286:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 8005288:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <driveC2+0x74>)
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <driveC2+0x80>)
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <driveC2+0x84>)
 8005290:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//等速走行のため加速度は0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	4a19      	ldr	r2, [pc, #100]	; (80052fc <driveC2+0x88>)
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4a19      	ldr	r2, [pc, #100]	; (8005300 <driveC2+0x8c>)
 800529c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800529e:	f7ff fceb 	bl	8004c78 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//左右のモータが定速分の逆走距離以上進むまで待機
 80052a2:	bf00      	nop
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	425b      	negs	r3, r3
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b0:	4b14      	ldr	r3, [pc, #80]	; (8005304 <driveC2+0x90>)
 80052b2:	edd3 7a00 	vldr	s15, [r3]
 80052b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d4f1      	bmi.n	80052a4 <driveC2+0x30>
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	425b      	negs	r3, r3
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <driveC2+0x94>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052da:	d4e3      	bmi.n	80052a4 <driveC2+0x30>

	drive_stop();											//走行停止
 80052dc:	f7ff fcfa 	bl	8004cd4 <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	c37a0000 	.word	0xc37a0000
 80052ec:	20000ee8 	.word	0x20000ee8
 80052f0:	20000ad0 	.word	0x20000ad0
 80052f4:	20000224 	.word	0x20000224
 80052f8:	200006f4 	.word	0x200006f4
 80052fc:	20000a60 	.word	0x20000a60
 8005300:	20000cd8 	.word	0x20000cd8
 8005304:	20000f00 	.word	0x20000f00
 8005308:	20000a68 	.word	0x20000a68

0800530c <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //尻を当てる程度に後退。回転後に停止する
 8005310:	203c      	movs	r0, #60	; 0x3c
 8005312:	f7ff ffaf 	bl	8005274 <driveC2>
  driveC(SETPOS_SET);           //デフォルト速度で区画中心になる分回転。回転後に停止する
 8005316:	2023      	movs	r0, #35	; 0x23
 8005318:	f7ff ff62 	bl	80051e0 <driveC>
}
 800531c:	bf00      	nop
 800531e:	bd80      	pop	{r7, pc}

08005320 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0

	control_start();
 8005324:	f7ff fcfe 	bl	8004d24 <control_start>
	if(start_flag == 0){
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <start_sectionA+0x50>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <start_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START);					//スタート区画分加速しながら走行。走行後は停止しない
 8005332:	237d      	movs	r3, #125	; 0x7d
 8005334:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800533e:	f7ff fdb9 	bl	8004eb4 <driveA>
 8005342:	e007      	b.n	8005354 <start_sectionA+0x34>
	}else{
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005344:	235a      	movs	r3, #90	; 0x5a
 8005346:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800534a:	2164      	movs	r1, #100	; 0x64
 800534c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005350:	f7ff fdb0 	bl	8004eb4 <driveA>
	}
	start_flag = 1;
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <start_sectionA+0x50>)
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <start_sectionA+0x54>)
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <start_sectionA+0x4c>
 8005368:	f006 fa88 	bl	800b87c <get_wall_info>
}
 800536c:	bf00      	nop
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000f04 	.word	0x20000f04
 8005374:	20000ee4 	.word	0x20000ee4

08005378 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0

	control_start();
 800537c:	f7ff fcd2 	bl	8004d24 <control_start>
	driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005380:	235a      	movs	r3, #90	; 0x5a
 8005382:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800538c:	f7ff fd92 	bl	8004eb4 <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <half_sectionA+0x30>)
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <half_sectionA+0x2a>
 800539e:	f006 fa6d 	bl	800b87c <get_wall_info>
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000ee4 	.word	0x20000ee4

080053ac <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0

	control_start();
 80053b0:	f7ff fcb8 	bl	8004d24 <control_start>
	driveD(-4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 80053b4:	235a      	movs	r3, #90	; 0x5a
 80053b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053ba:	2164      	movs	r1, #100	; 0x64
 80053bc:	4802      	ldr	r0, [pc, #8]	; (80053c8 <half_sectionD+0x1c>)
 80053be:	f7ff fdef 	bl	8004fa0 <driveD>
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	fffff060 	.word	0xfffff060

080053cc <start_sectionA2>:
//start_sectionA2
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA2(void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0

	control_start();
 80053d0:	f7ff fca8 	bl	8004d24 <control_start>
	if(start_flag == 0){
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <start_sectionA2+0x50>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d108      	bne.n	80053f0 <start_sectionA2+0x24>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//スタート区画分加速しながら走行。走行後は停止しない
 80053de:	237d      	movs	r3, #125	; 0x7d
 80053e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80053e4:	2164      	movs	r1, #100	; 0x64
 80053e6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80053ea:	f7ff fd63 	bl	8004eb4 <driveA>
 80053ee:	e007      	b.n	8005400 <start_sectionA2+0x34>
	}else{
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 80053f0:	235a      	movs	r3, #90	; 0x5a
 80053f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80053fc:	f7ff fd5a 	bl	8004eb4 <driveA>
	}
	start_flag = 1;
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <start_sectionA2+0x50>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <start_sectionA2+0x54>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <start_sectionA2+0x4c>
 8005414:	f006 fa32 	bl	800b87c <get_wall_info>
}
 8005418:	bf00      	nop
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000f04 	.word	0x20000f04
 8005420:	20000ee4 	.word	0x20000ee4

08005424 <half_sectionA2>:
//half_sectionA2
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA2(void){
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
	full_led_write(1);
 8005428:	2001      	movs	r0, #1
 800542a:	f006 fa9b 	bl	800b964 <full_led_write>
	control_start();
 800542e:	f7ff fc79 	bl	8004d24 <control_start>
	driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005432:	235a      	movs	r3, #90	; 0x5a
 8005434:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005438:	2164      	movs	r1, #100	; 0x64
 800543a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800543e:	f7ff fd39 	bl	8004eb4 <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <half_sectionA2+0x34>)
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <half_sectionA2+0x30>
 8005450:	f006 fa14 	bl	800b87c <get_wall_info>
}
 8005454:	bf00      	nop
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000ee4 	.word	0x20000ee4

0800545c <half_sectionD2>:
//half_sectionD2
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD2(void){
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
	full_led_write(3);
 8005460:	2003      	movs	r0, #3
 8005462:	f006 fa7f 	bl	800b964 <full_led_write>
	control_start();
 8005466:	f7ff fc5d 	bl	8004d24 <control_start>
	driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 800546a:	235a      	movs	r3, #90	; 0x5a
 800546c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005470:	2164      	movs	r1, #100	; 0x64
 8005472:	4802      	ldr	r0, [pc, #8]	; (800547c <half_sectionD2+0x20>)
 8005474:	f7ff fd94 	bl	8004fa0 <driveD>
}
 8005478:	bf00      	nop
 800547a:	bd80      	pop	{r7, pc}
 800547c:	ffffe0c0 	.word	0xffffe0c0

08005480 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005484:	f7ff ff78 	bl	8005378 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005488:	f7ff ff90 	bl	80053ac <half_sectionD>
}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}

08005490 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	full_led_write(4);
 8005494:	2004      	movs	r0, #4
 8005496:	f006 fa65 	bl	800b964 <full_led_write>
	control_start();
 800549a:	f7ff fc43 	bl	8004d24 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <one_sectionA+0x40>)
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b21b      	sxth	r3, r3
 80054a4:	b298      	uxth	r0, r3
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <one_sectionA+0x44>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	23b4      	movs	r3, #180	; 0xb4
 80054b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80054b4:	f7ff fcfe 	bl	8004eb4 <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <one_sectionA+0x48>)
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <one_sectionA+0x3a>
 80054c6:	f006 f9d9 	bl	800b87c <get_wall_info>
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200003d0 	.word	0x200003d0
 80054d4:	20000ef8 	.word	0x20000ef8
 80054d8:	20000ee4 	.word	0x20000ee4

080054dc <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	full_led_write(2);
 80054e0:	2002      	movs	r0, #2
 80054e2:	f006 fa3f 	bl	800b964 <full_led_write>
	control_start();
 80054e6:	f7ff fc1d 	bl	8004d24 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <one_sectionD+0x44>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	425b      	negs	r3, r3
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b218      	sxth	r0, r3
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <one_sectionD+0x48>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b21b      	sxth	r3, r3
 80054fe:	b29a      	uxth	r2, r3
 8005500:	23b4      	movs	r3, #180	; 0xb4
 8005502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005506:	f7ff fd4b 	bl	8004fa0 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <one_sectionD+0x4c>)
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <one_sectionD+0x40>
 8005518:	f006 f9b0 	bl	800b87c <get_wall_info>
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200003d0 	.word	0x200003d0
 8005524:	20000ef8 	.word	0x20000ef8
 8005528:	20000ee4 	.word	0x20000ee4

0800552c <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
	full_led_write(7);
 8005530:	2007      	movs	r0, #7
 8005532:	f006 fa17 	bl	800b964 <full_led_write>
	control_start();
 8005536:	f7ff fbf5 	bl	8004d24 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 800553a:	20b4      	movs	r0, #180	; 0xb4
 800553c:	f7ff fdee 	bl	800511c <driveU>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <one_sectionU+0x2c>)
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <one_sectionU+0x26>
 800554e:	f006 f995 	bl	800b87c <get_wall_info>
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000ee4 	.word	0x20000ee4
 800555c:	00000000 	.word	0x00000000

08005560 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005560:	b598      	push	{r3, r4, r7, lr}
 8005562:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005564:	4b52      	ldr	r3, [pc, #328]	; (80056b0 <rotate_R90+0x150>)
 8005566:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <rotate_R90+0x154>)
 8005568:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 800556a:	4b53      	ldr	r3, [pc, #332]	; (80056b8 <rotate_R90+0x158>)
 800556c:	4a53      	ldr	r2, [pc, #332]	; (80056bc <rotate_R90+0x15c>)
 800556e:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <rotate_R90+0x160>)
 8005572:	4a54      	ldr	r2, [pc, #336]	; (80056c4 <rotate_R90+0x164>)
 8005574:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005576:	4b4e      	ldr	r3, [pc, #312]	; (80056b0 <rotate_R90+0x150>)
 8005578:	edd3 7a00 	vldr	s15, [r3]
 800557c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80056c8 <rotate_R90+0x168>
 8005580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005584:	ee16 0a90 	vmov	r0, s13
 8005588:	f7fa ffd6 	bl	8000538 <__aeabi_f2d>
 800558c:	a346      	add	r3, pc, #280	; (adr r3, 80056a8 <rotate_R90+0x148>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fb f829 	bl	80005e8 <__aeabi_dmul>
 8005596:	4603      	mov	r3, r0
 8005598:	460c      	mov	r4, r1
 800559a:	4618      	mov	r0, r3
 800559c:	4621      	mov	r1, r4
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <rotate_R90+0x16c>)
 80055a4:	f7fb f820 	bl	80005e8 <__aeabi_dmul>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	4618      	mov	r0, r3
 80055ae:	4621      	mov	r1, r4
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055b8:	f7fb f940 	bl	800083c <__aeabi_ddiv>
 80055bc:	4603      	mov	r3, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	4618      	mov	r0, r3
 80055c2:	4621      	mov	r1, r4
 80055c4:	f7fb fac0 	bl	8000b48 <__aeabi_d2f>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <rotate_R90+0x170>)
 80055cc:	601a      	str	r2, [r3, #0]
	speed_min_l = 0;
 80055ce:	4b41      	ldr	r3, [pc, #260]	; (80056d4 <rotate_R90+0x174>)
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	speed_max_r = 0;
 80055d6:	4b40      	ldr	r3, [pc, #256]	; (80056d8 <rotate_R90+0x178>)
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80055de:	4b34      	ldr	r3, [pc, #208]	; (80056b0 <rotate_R90+0x150>)
 80055e0:	edd3 7a00 	vldr	s15, [r3]
 80055e4:	eef1 7a67 	vneg.f32	s15, s15
 80055e8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80056c8 <rotate_R90+0x168>
 80055ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055f0:	ee16 0a90 	vmov	r0, s13
 80055f4:	f7fa ffa0 	bl	8000538 <__aeabi_f2d>
 80055f8:	a32b      	add	r3, pc, #172	; (adr r3, 80056a8 <rotate_R90+0x148>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fff3 	bl	80005e8 <__aeabi_dmul>
 8005602:	4603      	mov	r3, r0
 8005604:	460c      	mov	r4, r1
 8005606:	4618      	mov	r0, r3
 8005608:	4621      	mov	r1, r4
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	4b2f      	ldr	r3, [pc, #188]	; (80056cc <rotate_R90+0x16c>)
 8005610:	f7fa ffea 	bl	80005e8 <__aeabi_dmul>
 8005614:	4603      	mov	r3, r0
 8005616:	460c      	mov	r4, r1
 8005618:	4618      	mov	r0, r3
 800561a:	4621      	mov	r1, r4
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005624:	f7fb f90a 	bl	800083c <__aeabi_ddiv>
 8005628:	4603      	mov	r3, r0
 800562a:	460c      	mov	r4, r1
 800562c:	4618      	mov	r0, r3
 800562e:	4621      	mov	r1, r4
 8005630:	f7fb fa8a 	bl	8000b48 <__aeabi_d2f>
 8005634:	4602      	mov	r2, r0
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <rotate_R90+0x17c>)
 8005638:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800563a:	f7ff fb1d 	bl	8004c78 <drive_start>
	control_stop();
 800563e:	f7ff fb8b 	bl	8004d58 <control_stop>
	while(degree_z > target_degree_z-80);
 8005642:	bf00      	nop
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <rotate_R90+0x180>)
 8005646:	edd3 7a00 	vldr	s15, [r3]
 800564a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80056e4 <rotate_R90+0x184>
 800564e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005652:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <rotate_R90+0x188>)
 8005654:	edd3 7a00 	vldr	s15, [r3]
 8005658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005660:	d4f0      	bmi.n	8005644 <rotate_R90+0xe4>
//	drive_stop();

	accel_l = -30000;
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <rotate_R90+0x158>)
 8005664:	4a21      	ldr	r2, [pc, #132]	; (80056ec <rotate_R90+0x18c>)
 8005666:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005668:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <rotate_R90+0x160>)
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <rotate_R90+0x190>)
 800566c:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800566e:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <rotate_R90+0x174>)
 8005670:	4a20      	ldr	r2, [pc, #128]	; (80056f4 <rotate_R90+0x194>)
 8005672:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <rotate_R90+0x178>)
 8005676:	4a20      	ldr	r2, [pc, #128]	; (80056f8 <rotate_R90+0x198>)
 8005678:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
	while(degree_z > target_degree_z-90);
 800567a:	bf00      	nop
 800567c:	4b18      	ldr	r3, [pc, #96]	; (80056e0 <rotate_R90+0x180>)
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80056fc <rotate_R90+0x19c>
 8005686:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <rotate_R90+0x188>)
 800568c:	edd3 7a00 	vldr	s15, [r3]
 8005690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005698:	d4f0      	bmi.n	800567c <rotate_R90+0x11c>

	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800569a:	2001      	movs	r0, #1
 800569c:	f005 f880 	bl	800a7a0 <turn_dir>
	drive_stop();
 80056a0:	f7ff fb18 	bl	8004cd4 <drive_stop>
}
 80056a4:	bf00      	nop
 80056a6:	bd98      	pop	{r3, r4, r7, pc}
 80056a8:	54442d18 	.word	0x54442d18
 80056ac:	400921fb 	.word	0x400921fb
 80056b0:	20000228 	.word	0x20000228
 80056b4:	44480000 	.word	0x44480000
 80056b8:	20000cd8 	.word	0x20000cd8
 80056bc:	453b8000 	.word	0x453b8000
 80056c0:	20000a60 	.word	0x20000a60
 80056c4:	c53b8000 	.word	0xc53b8000
 80056c8:	43340000 	.word	0x43340000
 80056cc:	40508000 	.word	0x40508000
 80056d0:	200006f4 	.word	0x200006f4
 80056d4:	20000ad0 	.word	0x20000ad0
 80056d8:	20000224 	.word	0x20000224
 80056dc:	20000ee8 	.word	0x20000ee8
 80056e0:	20000b78 	.word	0x20000b78
 80056e4:	42a00000 	.word	0x42a00000
 80056e8:	20000ad8 	.word	0x20000ad8
 80056ec:	c6ea6000 	.word	0xc6ea6000
 80056f0:	46ea6000 	.word	0x46ea6000
 80056f4:	42c80000 	.word	0x42c80000
 80056f8:	c2c80000 	.word	0xc2c80000
 80056fc:	42b40000 	.word	0x42b40000

08005700 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8005700:	b598      	push	{r3, r4, r7, lr}
 8005702:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005704:	4b52      	ldr	r3, [pc, #328]	; (8005850 <rotate_L90+0x150>)
 8005706:	4a53      	ldr	r2, [pc, #332]	; (8005854 <rotate_L90+0x154>)
 8005708:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 800570a:	4b53      	ldr	r3, [pc, #332]	; (8005858 <rotate_L90+0x158>)
 800570c:	4a53      	ldr	r2, [pc, #332]	; (800585c <rotate_L90+0x15c>)
 800570e:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005710:	4b53      	ldr	r3, [pc, #332]	; (8005860 <rotate_L90+0x160>)
 8005712:	4a54      	ldr	r2, [pc, #336]	; (8005864 <rotate_L90+0x164>)
 8005714:	601a      	str	r2, [r3, #0]
	speed_max_l = 0;
 8005716:	4b54      	ldr	r3, [pc, #336]	; (8005868 <rotate_L90+0x168>)
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800571e:	4b4c      	ldr	r3, [pc, #304]	; (8005850 <rotate_L90+0x150>)
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	eef1 7a67 	vneg.f32	s15, s15
 8005728:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800586c <rotate_L90+0x16c>
 800572c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005730:	ee16 0a90 	vmov	r0, s13
 8005734:	f7fa ff00 	bl	8000538 <__aeabi_f2d>
 8005738:	a343      	add	r3, pc, #268	; (adr r3, 8005848 <rotate_L90+0x148>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff53 	bl	80005e8 <__aeabi_dmul>
 8005742:	4603      	mov	r3, r0
 8005744:	460c      	mov	r4, r1
 8005746:	4618      	mov	r0, r3
 8005748:	4621      	mov	r1, r4
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	4b48      	ldr	r3, [pc, #288]	; (8005870 <rotate_L90+0x170>)
 8005750:	f7fa ff4a 	bl	80005e8 <__aeabi_dmul>
 8005754:	4603      	mov	r3, r0
 8005756:	460c      	mov	r4, r1
 8005758:	4618      	mov	r0, r3
 800575a:	4621      	mov	r1, r4
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005764:	f7fb f86a 	bl	800083c <__aeabi_ddiv>
 8005768:	4603      	mov	r3, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4618      	mov	r0, r3
 800576e:	4621      	mov	r1, r4
 8005770:	f7fb f9ea 	bl	8000b48 <__aeabi_d2f>
 8005774:	4602      	mov	r2, r0
 8005776:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <rotate_L90+0x174>)
 8005778:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800577a:	4b35      	ldr	r3, [pc, #212]	; (8005850 <rotate_L90+0x150>)
 800577c:	edd3 7a00 	vldr	s15, [r3]
 8005780:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800586c <rotate_L90+0x16c>
 8005784:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005788:	ee16 0a90 	vmov	r0, s13
 800578c:	f7fa fed4 	bl	8000538 <__aeabi_f2d>
 8005790:	a32d      	add	r3, pc, #180	; (adr r3, 8005848 <rotate_L90+0x148>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa ff27 	bl	80005e8 <__aeabi_dmul>
 800579a:	4603      	mov	r3, r0
 800579c:	460c      	mov	r4, r1
 800579e:	4618      	mov	r0, r3
 80057a0:	4621      	mov	r1, r4
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	4b32      	ldr	r3, [pc, #200]	; (8005870 <rotate_L90+0x170>)
 80057a8:	f7fa ff1e 	bl	80005e8 <__aeabi_dmul>
 80057ac:	4603      	mov	r3, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	4618      	mov	r0, r3
 80057b2:	4621      	mov	r1, r4
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057bc:	f7fb f83e 	bl	800083c <__aeabi_ddiv>
 80057c0:	4603      	mov	r3, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	4618      	mov	r0, r3
 80057c6:	4621      	mov	r1, r4
 80057c8:	f7fb f9be 	bl	8000b48 <__aeabi_d2f>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <rotate_L90+0x178>)
 80057d0:	601a      	str	r2, [r3, #0]
	speed_min_r = 0;
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <rotate_L90+0x17c>)
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80057da:	f7ff fa4d 	bl	8004c78 <drive_start>
	control_stop();
 80057de:	f7ff fabb 	bl	8004d58 <control_stop>
	while(degree_z < target_degree_z+80);
 80057e2:	bf00      	nop
 80057e4:	4b26      	ldr	r3, [pc, #152]	; (8005880 <rotate_L90+0x180>)
 80057e6:	edd3 7a00 	vldr	s15, [r3]
 80057ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005884 <rotate_L90+0x184>
 80057ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057f2:	4b25      	ldr	r3, [pc, #148]	; (8005888 <rotate_L90+0x188>)
 80057f4:	edd3 7a00 	vldr	s15, [r3]
 80057f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005800:	dcf0      	bgt.n	80057e4 <rotate_L90+0xe4>
//	drive_stop();

	accel_l = 30000;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <rotate_L90+0x158>)
 8005804:	4a21      	ldr	r2, [pc, #132]	; (800588c <rotate_L90+0x18c>)
 8005806:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <rotate_L90+0x160>)
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <rotate_L90+0x190>)
 800580c:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 800580e:	4b16      	ldr	r3, [pc, #88]	; (8005868 <rotate_L90+0x168>)
 8005810:	4a20      	ldr	r2, [pc, #128]	; (8005894 <rotate_L90+0x194>)
 8005812:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8005814:	4b19      	ldr	r3, [pc, #100]	; (800587c <rotate_L90+0x17c>)
 8005816:	4a20      	ldr	r2, [pc, #128]	; (8005898 <rotate_L90+0x198>)
 8005818:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
	while(degree_z < target_degree_z+90);
 800581a:	bf00      	nop
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <rotate_L90+0x180>)
 800581e:	edd3 7a00 	vldr	s15, [r3]
 8005822:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800589c <rotate_L90+0x19c>
 8005826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800582a:	4b17      	ldr	r3, [pc, #92]	; (8005888 <rotate_L90+0x188>)
 800582c:	edd3 7a00 	vldr	s15, [r3]
 8005830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005838:	dcf0      	bgt.n	800581c <rotate_L90+0x11c>

	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 800583a:	20ff      	movs	r0, #255	; 0xff
 800583c:	f004 ffb0 	bl	800a7a0 <turn_dir>
	drive_stop();
 8005840:	f7ff fa48 	bl	8004cd4 <drive_stop>
}
 8005844:	bf00      	nop
 8005846:	bd98      	pop	{r3, r4, r7, pc}
 8005848:	54442d18 	.word	0x54442d18
 800584c:	400921fb 	.word	0x400921fb
 8005850:	20000228 	.word	0x20000228
 8005854:	44480000 	.word	0x44480000
 8005858:	20000cd8 	.word	0x20000cd8
 800585c:	c53b8000 	.word	0xc53b8000
 8005860:	20000a60 	.word	0x20000a60
 8005864:	453b8000 	.word	0x453b8000
 8005868:	200006f4 	.word	0x200006f4
 800586c:	43340000 	.word	0x43340000
 8005870:	40508000 	.word	0x40508000
 8005874:	20000ad0 	.word	0x20000ad0
 8005878:	20000224 	.word	0x20000224
 800587c:	20000ee8 	.word	0x20000ee8
 8005880:	20000b78 	.word	0x20000b78
 8005884:	42a00000 	.word	0x42a00000
 8005888:	20000ad8 	.word	0x20000ad8
 800588c:	46ea6000 	.word	0x46ea6000
 8005890:	c6ea6000 	.word	0xc6ea6000
 8005894:	c2c80000 	.word	0xc2c80000
 8005898:	42c80000 	.word	0x42c80000
 800589c:	42b40000 	.word	0x42b40000

080058a0 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80058a0:	b598      	push	{r3, r4, r7, lr}
 80058a2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80058a4:	4b52      	ldr	r3, [pc, #328]	; (80059f0 <rotate_180+0x150>)
 80058a6:	4a53      	ldr	r2, [pc, #332]	; (80059f4 <rotate_180+0x154>)
 80058a8:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80058aa:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <rotate_180+0x158>)
 80058ac:	4a53      	ldr	r2, [pc, #332]	; (80059fc <rotate_180+0x15c>)
 80058ae:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80058b0:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <rotate_180+0x160>)
 80058b2:	4a54      	ldr	r2, [pc, #336]	; (8005a04 <rotate_180+0x164>)
 80058b4:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80058b6:	4b4e      	ldr	r3, [pc, #312]	; (80059f0 <rotate_180+0x150>)
 80058b8:	edd3 7a00 	vldr	s15, [r3]
 80058bc:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005a08 <rotate_180+0x168>
 80058c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058c4:	ee16 0a90 	vmov	r0, s13
 80058c8:	f7fa fe36 	bl	8000538 <__aeabi_f2d>
 80058cc:	a346      	add	r3, pc, #280	; (adr r3, 80059e8 <rotate_180+0x148>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa fe89 	bl	80005e8 <__aeabi_dmul>
 80058d6:	4603      	mov	r3, r0
 80058d8:	460c      	mov	r4, r1
 80058da:	4618      	mov	r0, r3
 80058dc:	4621      	mov	r1, r4
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	4b4a      	ldr	r3, [pc, #296]	; (8005a0c <rotate_180+0x16c>)
 80058e4:	f7fa fe80 	bl	80005e8 <__aeabi_dmul>
 80058e8:	4603      	mov	r3, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4618      	mov	r0, r3
 80058ee:	4621      	mov	r1, r4
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058f8:	f7fa ffa0 	bl	800083c <__aeabi_ddiv>
 80058fc:	4603      	mov	r3, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	4618      	mov	r0, r3
 8005902:	4621      	mov	r1, r4
 8005904:	f7fb f920 	bl	8000b48 <__aeabi_d2f>
 8005908:	4602      	mov	r2, r0
 800590a:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <rotate_180+0x170>)
 800590c:	601a      	str	r2, [r3, #0]
	speed_min_l = 0;
 800590e:	4b41      	ldr	r3, [pc, #260]	; (8005a14 <rotate_180+0x174>)
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	speed_max_r = 0;
 8005916:	4b40      	ldr	r3, [pc, #256]	; (8005a18 <rotate_180+0x178>)
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800591e:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <rotate_180+0x150>)
 8005920:	edd3 7a00 	vldr	s15, [r3]
 8005924:	eef1 7a67 	vneg.f32	s15, s15
 8005928:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005a08 <rotate_180+0x168>
 800592c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005930:	ee16 0a90 	vmov	r0, s13
 8005934:	f7fa fe00 	bl	8000538 <__aeabi_f2d>
 8005938:	a32b      	add	r3, pc, #172	; (adr r3, 80059e8 <rotate_180+0x148>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fe53 	bl	80005e8 <__aeabi_dmul>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	4618      	mov	r0, r3
 8005948:	4621      	mov	r1, r4
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <rotate_180+0x16c>)
 8005950:	f7fa fe4a 	bl	80005e8 <__aeabi_dmul>
 8005954:	4603      	mov	r3, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4618      	mov	r0, r3
 800595a:	4621      	mov	r1, r4
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005964:	f7fa ff6a 	bl	800083c <__aeabi_ddiv>
 8005968:	4603      	mov	r3, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4618      	mov	r0, r3
 800596e:	4621      	mov	r1, r4
 8005970:	f7fb f8ea 	bl	8000b48 <__aeabi_d2f>
 8005974:	4602      	mov	r2, r0
 8005976:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <rotate_180+0x17c>)
 8005978:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800597a:	f7ff f97d 	bl	8004c78 <drive_start>
	control_stop();
 800597e:	f7ff f9eb 	bl	8004d58 <control_stop>
	while(degree_z > target_degree_z-170);
 8005982:	bf00      	nop
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <rotate_180+0x180>)
 8005986:	edd3 7a00 	vldr	s15, [r3]
 800598a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005a24 <rotate_180+0x184>
 800598e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005992:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <rotate_180+0x188>)
 8005994:	edd3 7a00 	vldr	s15, [r3]
 8005998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a0:	d4f0      	bmi.n	8005984 <rotate_180+0xe4>
//	drive_stop();

	accel_l = -30000;
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <rotate_180+0x158>)
 80059a4:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <rotate_180+0x18c>)
 80059a6:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 80059a8:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <rotate_180+0x160>)
 80059aa:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <rotate_180+0x190>)
 80059ac:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80059ae:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <rotate_180+0x174>)
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <rotate_180+0x194>)
 80059b2:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80059b4:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <rotate_180+0x178>)
 80059b6:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <rotate_180+0x198>)
 80059b8:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
	while(degree_z > target_degree_z-180);
 80059ba:	bf00      	nop
 80059bc:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <rotate_180+0x180>)
 80059be:	edd3 7a00 	vldr	s15, [r3]
 80059c2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005a08 <rotate_180+0x168>
 80059c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80059ca:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <rotate_180+0x188>)
 80059cc:	edd3 7a00 	vldr	s15, [r3]
 80059d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d8:	d4f0      	bmi.n	80059bc <rotate_180+0x11c>

	turn_dir(DIR_TURN_180);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 80059da:	2002      	movs	r0, #2
 80059dc:	f004 fee0 	bl	800a7a0 <turn_dir>
	drive_stop();
 80059e0:	f7ff f978 	bl	8004cd4 <drive_stop>
}
 80059e4:	bf00      	nop
 80059e6:	bd98      	pop	{r3, r4, r7, pc}
 80059e8:	54442d18 	.word	0x54442d18
 80059ec:	400921fb 	.word	0x400921fb
 80059f0:	20000228 	.word	0x20000228
 80059f4:	44480000 	.word	0x44480000
 80059f8:	20000cd8 	.word	0x20000cd8
 80059fc:	453b8000 	.word	0x453b8000
 8005a00:	20000a60 	.word	0x20000a60
 8005a04:	c53b8000 	.word	0xc53b8000
 8005a08:	43340000 	.word	0x43340000
 8005a0c:	40508000 	.word	0x40508000
 8005a10:	200006f4 	.word	0x200006f4
 8005a14:	20000ad0 	.word	0x20000ad0
 8005a18:	20000224 	.word	0x20000224
 8005a1c:	20000ee8 	.word	0x20000ee8
 8005a20:	20000b78 	.word	0x20000b78
 8005a24:	432a0000 	.word	0x432a0000
 8005a28:	20000ad8 	.word	0x20000ad8
 8005a2c:	c6ea6000 	.word	0xc6ea6000
 8005a30:	46ea6000 	.word	0x46ea6000
 8005a34:	42c80000 	.word	0x42c80000
 8005a38:	c2c80000 	.word	0xc2c80000

08005a3c <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
	full_led_write(5);
 8005a40:	2005      	movs	r0, #5
 8005a42:	f005 ff8f 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005a46:	4a5e      	ldr	r2, [pc, #376]	; (8005bc0 <slalom_R90+0x184>)
 8005a48:	8813      	ldrh	r3, [r2, #0]
 8005a4a:	f36f 2308 	bfc	r3, #8, #1
 8005a4e:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005a50:	4b5c      	ldr	r3, [pc, #368]	; (8005bc4 <slalom_R90+0x188>)
 8005a52:	4a5d      	ldr	r2, [pc, #372]	; (8005bc8 <slalom_R90+0x18c>)
 8005a54:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005a56:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <slalom_R90+0x190>)
 8005a58:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <slalom_R90+0x18c>)
 8005a5a:	601a      	str	r2, [r3, #0]
	speed_min_l = 400;
 8005a5c:	4b5c      	ldr	r3, [pc, #368]	; (8005bd0 <slalom_R90+0x194>)
 8005a5e:	4a5d      	ldr	r2, [pc, #372]	; (8005bd4 <slalom_R90+0x198>)
 8005a60:	601a      	str	r2, [r3, #0]
	speed_min_r = 400;
 8005a62:	4b5d      	ldr	r3, [pc, #372]	; (8005bd8 <slalom_R90+0x19c>)
 8005a64:	4a5b      	ldr	r2, [pc, #364]	; (8005bd4 <slalom_R90+0x198>)
 8005a66:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
	control_start();
 8005a68:	f7ff f95c 	bl	8004d24 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005a6c:	bf00      	nop
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <slalom_R90+0x1a0>)
 8005a70:	edd3 7a00 	vldr	s15, [r3]
 8005a74:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a80:	d509      	bpl.n	8005a96 <slalom_R90+0x5a>
 8005a82:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <slalom_R90+0x1a4>)
 8005a84:	edd3 7a00 	vldr	s15, [r3]
 8005a88:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a94:	d4eb      	bmi.n	8005a6e <slalom_R90+0x32>
	drive_stop();
 8005a96:	f7ff f91d 	bl	8004cd4 <drive_stop>
	control_stop();
 8005a9a:	f7ff f95d 	bl	8004d58 <control_stop>

	MF.FLAG.GYRO = 1;
 8005a9e:	4a48      	ldr	r2, [pc, #288]	; (8005bc0 <slalom_R90+0x184>)
 8005aa0:	8813      	ldrh	r3, [r2, #0]
 8005aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8005aa8:	4b4e      	ldr	r3, [pc, #312]	; (8005be4 <slalom_R90+0x1a8>)
 8005aaa:	4a4f      	ldr	r2, [pc, #316]	; (8005be8 <slalom_R90+0x1ac>)
 8005aac:	601a      	str	r2, [r3, #0]
	omega_max = 550;
 8005aae:	4b4f      	ldr	r3, [pc, #316]	; (8005bec <slalom_R90+0x1b0>)
 8005ab0:	4a4f      	ldr	r2, [pc, #316]	; (8005bf0 <slalom_R90+0x1b4>)
 8005ab2:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005ab4:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <slalom_R90+0x1b8>)
 8005ab6:	4a47      	ldr	r2, [pc, #284]	; (8005bd4 <slalom_R90+0x198>)
 8005ab8:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005aba:	4a41      	ldr	r2, [pc, #260]	; (8005bc0 <slalom_R90+0x184>)
 8005abc:	8813      	ldrh	r3, [r2, #0]
 8005abe:	f043 0302 	orr.w	r3, r3, #2
 8005ac2:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-38);
 8005ac4:	bf00      	nop
 8005ac6:	4b4c      	ldr	r3, [pc, #304]	; (8005bf8 <slalom_R90+0x1bc>)
 8005ac8:	edd3 7a00 	vldr	s15, [r3]
 8005acc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8005bfc <slalom_R90+0x1c0>
 8005ad0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <slalom_R90+0x1c4>)
 8005ad6:	edd3 7a00 	vldr	s15, [r3]
 8005ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae2:	d4f0      	bmi.n	8005ac6 <slalom_R90+0x8a>

//	MF.FLAG.GYRO = 1;

	target_degaccel_z = 0;
 8005ae4:	4b3f      	ldr	r3, [pc, #252]	; (8005be4 <slalom_R90+0x1a8>)
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
//	MF.FLAG.DRV = 1;
	while(degree_z > target_degree_z-65);
 8005aec:	bf00      	nop
 8005aee:	4b42      	ldr	r3, [pc, #264]	; (8005bf8 <slalom_R90+0x1bc>)
 8005af0:	edd3 7a00 	vldr	s15, [r3]
 8005af4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005c04 <slalom_R90+0x1c8>
 8005af8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005afc:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <slalom_R90+0x1c4>)
 8005afe:	edd3 7a00 	vldr	s15, [r3]
 8005b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	d4f0      	bmi.n	8005aee <slalom_R90+0xb2>

//	MF.FLAG.GYRO = 1;

	target_degaccel_z = -4000;
 8005b0c:	4b35      	ldr	r3, [pc, #212]	; (8005be4 <slalom_R90+0x1a8>)
 8005b0e:	4a3e      	ldr	r2, [pc, #248]	; (8005c08 <slalom_R90+0x1cc>)
 8005b10:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
//	MF.FLAG.DRV = 1;
	full_led_write(6);
 8005b12:	2006      	movs	r0, #6
 8005b14:	f005 ff26 	bl	800b964 <full_led_write>
	while(degree_z > target_degree_z-90);
 8005b18:	bf00      	nop
 8005b1a:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <slalom_R90+0x1bc>)
 8005b1c:	edd3 7a00 	vldr	s15, [r3]
 8005b20:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005c0c <slalom_R90+0x1d0>
 8005b24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005b28:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <slalom_R90+0x1c4>)
 8005b2a:	edd3 7a00 	vldr	s15, [r3]
 8005b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d4f0      	bmi.n	8005b1a <slalom_R90+0xde>
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f004 fe31 	bl	800a7a0 <turn_dir>

	MF.FLAG.GYRO = 0;
 8005b3e:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <slalom_R90+0x184>)
 8005b40:	8813      	ldrh	r3, [r2, #0]
 8005b42:	f36f 2308 	bfc	r3, #8, #1
 8005b46:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005b48:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <slalom_R90+0x188>)
 8005b4a:	4a31      	ldr	r2, [pc, #196]	; (8005c10 <slalom_R90+0x1d4>)
 8005b4c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005b4e:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <slalom_R90+0x190>)
 8005b50:	4a2f      	ldr	r2, [pc, #188]	; (8005c10 <slalom_R90+0x1d4>)
 8005b52:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005b54:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <slalom_R90+0x1d8>)
 8005b56:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <slalom_R90+0x198>)
 8005b58:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <slalom_R90+0x1dc>)
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <slalom_R90+0x198>)
 8005b5e:	601a      	str	r2, [r3, #0]
//	drive_start();											//走行開始
	dist_l = dist_r = 0;		//走行距離の初期化
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <slalom_R90+0x1a4>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <slalom_R90+0x1a0>)
 8005b6a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005b6c:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <slalom_R90+0x184>)
 8005b6e:	8813      	ldrh	r3, [r2, #0]
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	8013      	strh	r3, [r2, #0]

	control_start();
 8005b76:	f7ff f8d5 	bl	8004d24 <control_start>
	full_led_write(4);
 8005b7a:	2004      	movs	r0, #4
 8005b7c:	f005 fef2 	bl	800b964 <full_led_write>
	while(dist_l < 18 && dist_r < 18);
 8005b80:	bf00      	nop
 8005b82:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <slalom_R90+0x1a0>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b94:	d509      	bpl.n	8005baa <slalom_R90+0x16e>
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <slalom_R90+0x1a4>)
 8005b98:	edd3 7a00 	vldr	s15, [r3]
 8005b9c:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba8:	d4eb      	bmi.n	8005b82 <slalom_R90+0x146>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <slalom_R90+0x184>)
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <slalom_R90+0x180>
 8005bb8:	f005 fe60 	bl	800b87c <get_wall_info>
//	drive_stop();
}
 8005bbc:	bf00      	nop
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000ee4 	.word	0x20000ee4
 8005bc4:	20000cd8 	.word	0x20000cd8
 8005bc8:	c61c4000 	.word	0xc61c4000
 8005bcc:	20000a60 	.word	0x20000a60
 8005bd0:	20000ad0 	.word	0x20000ad0
 8005bd4:	43c80000 	.word	0x43c80000
 8005bd8:	20000ee8 	.word	0x20000ee8
 8005bdc:	20000f00 	.word	0x20000f00
 8005be0:	20000a68 	.word	0x20000a68
 8005be4:	20000ad4 	.word	0x20000ad4
 8005be8:	457a0000 	.word	0x457a0000
 8005bec:	20000a64 	.word	0x20000a64
 8005bf0:	44098000 	.word	0x44098000
 8005bf4:	20000a70 	.word	0x20000a70
 8005bf8:	20000b78 	.word	0x20000b78
 8005bfc:	42180000 	.word	0x42180000
 8005c00:	20000ad8 	.word	0x20000ad8
 8005c04:	42820000 	.word	0x42820000
 8005c08:	c57a0000 	.word	0xc57a0000
 8005c0c:	42b40000 	.word	0x42b40000
 8005c10:	461c4000 	.word	0x461c4000
 8005c14:	200006f4 	.word	0x200006f4
 8005c18:	20000224 	.word	0x20000224

08005c1c <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
	full_led_write(6);
 8005c20:	2006      	movs	r0, #6
 8005c22:	f005 fe9f 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005c26:	4a65      	ldr	r2, [pc, #404]	; (8005dbc <slalom_L90+0x1a0>)
 8005c28:	8813      	ldrh	r3, [r2, #0]
 8005c2a:	f36f 2308 	bfc	r3, #8, #1
 8005c2e:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005c30:	4b63      	ldr	r3, [pc, #396]	; (8005dc0 <slalom_L90+0x1a4>)
 8005c32:	4a64      	ldr	r2, [pc, #400]	; (8005dc4 <slalom_L90+0x1a8>)
 8005c34:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005c36:	4b64      	ldr	r3, [pc, #400]	; (8005dc8 <slalom_L90+0x1ac>)
 8005c38:	4a62      	ldr	r2, [pc, #392]	; (8005dc4 <slalom_L90+0x1a8>)
 8005c3a:	601a      	str	r2, [r3, #0]
	speed_min_l = 400;
 8005c3c:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <slalom_L90+0x1b0>)
 8005c3e:	4a64      	ldr	r2, [pc, #400]	; (8005dd0 <slalom_L90+0x1b4>)
 8005c40:	601a      	str	r2, [r3, #0]
	speed_min_r = 400;
 8005c42:	4b64      	ldr	r3, [pc, #400]	; (8005dd4 <slalom_L90+0x1b8>)
 8005c44:	4a62      	ldr	r2, [pc, #392]	; (8005dd0 <slalom_L90+0x1b4>)
 8005c46:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
	control_start();
 8005c48:	f7ff f86c 	bl	8004d24 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005c4c:	bf00      	nop
 8005c4e:	4b62      	ldr	r3, [pc, #392]	; (8005dd8 <slalom_L90+0x1bc>)
 8005c50:	edd3 7a00 	vldr	s15, [r3]
 8005c54:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c60:	d509      	bpl.n	8005c76 <slalom_L90+0x5a>
 8005c62:	4b5e      	ldr	r3, [pc, #376]	; (8005ddc <slalom_L90+0x1c0>)
 8005c64:	edd3 7a00 	vldr	s15, [r3]
 8005c68:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	d4eb      	bmi.n	8005c4e <slalom_L90+0x32>
	drive_stop();
 8005c76:	f7ff f82d 	bl	8004cd4 <drive_stop>
	control_stop();
 8005c7a:	f7ff f86d 	bl	8004d58 <control_stop>

	MF.FLAG.GYRO = 1;
 8005c7e:	4a4f      	ldr	r2, [pc, #316]	; (8005dbc <slalom_L90+0x1a0>)
 8005c80:	8813      	ldrh	r3, [r2, #0]
 8005c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c86:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005c88:	4b55      	ldr	r3, [pc, #340]	; (8005de0 <slalom_L90+0x1c4>)
 8005c8a:	4a56      	ldr	r2, [pc, #344]	; (8005de4 <slalom_L90+0x1c8>)
 8005c8c:	601a      	str	r2, [r3, #0]
	omega_min = -550;
 8005c8e:	4b56      	ldr	r3, [pc, #344]	; (8005de8 <slalom_L90+0x1cc>)
 8005c90:	4a56      	ldr	r2, [pc, #344]	; (8005dec <slalom_L90+0x1d0>)
 8005c92:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005c94:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <slalom_L90+0x1d4>)
 8005c96:	4a4e      	ldr	r2, [pc, #312]	; (8005dd0 <slalom_L90+0x1b4>)
 8005c98:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005c9a:	4a48      	ldr	r2, [pc, #288]	; (8005dbc <slalom_L90+0x1a0>)
 8005c9c:	8813      	ldrh	r3, [r2, #0]
 8005c9e:	f043 0302 	orr.w	r3, r3, #2
 8005ca2:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+38);
 8005ca4:	bf00      	nop
 8005ca6:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <slalom_L90+0x1d8>)
 8005ca8:	edd3 7a00 	vldr	s15, [r3]
 8005cac:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005df8 <slalom_L90+0x1dc>
 8005cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cb4:	4b51      	ldr	r3, [pc, #324]	; (8005dfc <slalom_L90+0x1e0>)
 8005cb6:	edd3 7a00 	vldr	s15, [r3]
 8005cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	dcf0      	bgt.n	8005ca6 <slalom_L90+0x8a>
//	drive_stop();

	MF.FLAG.GYRO = 1;
 8005cc4:	4a3d      	ldr	r2, [pc, #244]	; (8005dbc <slalom_L90+0x1a0>)
 8005cc6:	8813      	ldrh	r3, [r2, #0]
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005cce:	4b44      	ldr	r3, [pc, #272]	; (8005de0 <slalom_L90+0x1c4>)
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005cd6:	4a39      	ldr	r2, [pc, #228]	; (8005dbc <slalom_L90+0x1a0>)
 8005cd8:	8813      	ldrh	r3, [r2, #0]
 8005cda:	f043 0302 	orr.w	r3, r3, #2
 8005cde:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+65);
 8005ce0:	bf00      	nop
 8005ce2:	4b44      	ldr	r3, [pc, #272]	; (8005df4 <slalom_L90+0x1d8>)
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8005e00 <slalom_L90+0x1e4>
 8005cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf0:	4b42      	ldr	r3, [pc, #264]	; (8005dfc <slalom_L90+0x1e0>)
 8005cf2:	edd3 7a00 	vldr	s15, [r3]
 8005cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfe:	dcf0      	bgt.n	8005ce2 <slalom_L90+0xc6>
//	drive_stop();

	MF.FLAG.GYRO = 1;
 8005d00:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <slalom_L90+0x1a0>)
 8005d02:	8813      	ldrh	r3, [r2, #0]
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8005d0a:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <slalom_L90+0x1c4>)
 8005d0c:	4a3d      	ldr	r2, [pc, #244]	; (8005e04 <slalom_L90+0x1e8>)
 8005d0e:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005d10:	4a2a      	ldr	r2, [pc, #168]	; (8005dbc <slalom_L90+0x1a0>)
 8005d12:	8813      	ldrh	r3, [r2, #0]
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+90);
 8005d1a:	bf00      	nop
 8005d1c:	4b35      	ldr	r3, [pc, #212]	; (8005df4 <slalom_L90+0x1d8>)
 8005d1e:	edd3 7a00 	vldr	s15, [r3]
 8005d22:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005e08 <slalom_L90+0x1ec>
 8005d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d2a:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <slalom_L90+0x1e0>)
 8005d2c:	edd3 7a00 	vldr	s15, [r3]
 8005d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d38:	dcf0      	bgt.n	8005d1c <slalom_L90+0x100>
//	drive_stop();
	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8005d3a:	20ff      	movs	r0, #255	; 0xff
 8005d3c:	f004 fd30 	bl	800a7a0 <turn_dir>

	MF.FLAG.GYRO = 0;
 8005d40:	4a1e      	ldr	r2, [pc, #120]	; (8005dbc <slalom_L90+0x1a0>)
 8005d42:	8813      	ldrh	r3, [r2, #0]
 8005d44:	f36f 2308 	bfc	r3, #8, #1
 8005d48:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <slalom_L90+0x1a4>)
 8005d4c:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <slalom_L90+0x1f0>)
 8005d4e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005d50:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <slalom_L90+0x1ac>)
 8005d52:	4a2e      	ldr	r2, [pc, #184]	; (8005e0c <slalom_L90+0x1f0>)
 8005d54:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005d56:	4b2e      	ldr	r3, [pc, #184]	; (8005e10 <slalom_L90+0x1f4>)
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <slalom_L90+0x1b4>)
 8005d5a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <slalom_L90+0x1f8>)
 8005d5e:	4a1c      	ldr	r2, [pc, #112]	; (8005dd0 <slalom_L90+0x1b4>)
 8005d60:	601a      	str	r2, [r3, #0]
//	drive_start();											//走行開始
	dist_l = dist_r = 0;		//走行距離の初期化
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <slalom_L90+0x1c0>)
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <slalom_L90+0x1bc>)
 8005d6c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <slalom_L90+0x1a0>)
 8005d70:	8813      	ldrh	r3, [r2, #0]
 8005d72:	f043 0304 	orr.w	r3, r3, #4
 8005d76:	8013      	strh	r3, [r2, #0]
	control_start();
 8005d78:	f7fe ffd4 	bl	8004d24 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005d7c:	bf00      	nop
 8005d7e:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <slalom_L90+0x1bc>)
 8005d80:	edd3 7a00 	vldr	s15, [r3]
 8005d84:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d90:	d509      	bpl.n	8005da6 <slalom_L90+0x18a>
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <slalom_L90+0x1c0>)
 8005d94:	edd3 7a00 	vldr	s15, [r3]
 8005d98:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da4:	d4eb      	bmi.n	8005d7e <slalom_L90+0x162>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <slalom_L90+0x1a0>)
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <slalom_L90+0x19c>
 8005db4:	f005 fd62 	bl	800b87c <get_wall_info>
//	drive_stop();
}
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000ee4 	.word	0x20000ee4
 8005dc0:	20000cd8 	.word	0x20000cd8
 8005dc4:	c61c4000 	.word	0xc61c4000
 8005dc8:	20000a60 	.word	0x20000a60
 8005dcc:	20000ad0 	.word	0x20000ad0
 8005dd0:	43c80000 	.word	0x43c80000
 8005dd4:	20000ee8 	.word	0x20000ee8
 8005dd8:	20000f00 	.word	0x20000f00
 8005ddc:	20000a68 	.word	0x20000a68
 8005de0:	20000ad4 	.word	0x20000ad4
 8005de4:	c57a0000 	.word	0xc57a0000
 8005de8:	20000334 	.word	0x20000334
 8005dec:	c4098000 	.word	0xc4098000
 8005df0:	20000a70 	.word	0x20000a70
 8005df4:	20000b78 	.word	0x20000b78
 8005df8:	42180000 	.word	0x42180000
 8005dfc:	20000ad8 	.word	0x20000ad8
 8005e00:	42820000 	.word	0x42820000
 8005e04:	457a0000 	.word	0x457a0000
 8005e08:	42b40000 	.word	0x42b40000
 8005e0c:	461c4000 	.word	0x461c4000
 8005e10:	200006f4 	.word	0x200006f4
 8005e14:	20000224 	.word	0x20000224

08005e18 <slalom_R902>:
//slalom_R902
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R902(void){
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	MF.FLAG.GYRO = 0;
 8005e1c:	4a59      	ldr	r2, [pc, #356]	; (8005f84 <slalom_R902+0x16c>)
 8005e1e:	8813      	ldrh	r3, [r2, #0]
 8005e20:	f36f 2308 	bfc	r3, #8, #1
 8005e24:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005e26:	4b58      	ldr	r3, [pc, #352]	; (8005f88 <slalom_R902+0x170>)
 8005e28:	4a58      	ldr	r2, [pc, #352]	; (8005f8c <slalom_R902+0x174>)
 8005e2a:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005e2c:	4b58      	ldr	r3, [pc, #352]	; (8005f90 <slalom_R902+0x178>)
 8005e2e:	4a57      	ldr	r2, [pc, #348]	; (8005f8c <slalom_R902+0x174>)
 8005e30:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005e32:	4b58      	ldr	r3, [pc, #352]	; (8005f94 <slalom_R902+0x17c>)
 8005e34:	4a58      	ldr	r2, [pc, #352]	; (8005f98 <slalom_R902+0x180>)
 8005e36:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005e38:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <slalom_R902+0x184>)
 8005e3a:	4a57      	ldr	r2, [pc, #348]	; (8005f98 <slalom_R902+0x180>)
 8005e3c:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
//	control_start();
//	while(dist_l < 10 && dist_r < 10);
	drive_stop();
 8005e3e:	f7fe ff49 	bl	8004cd4 <drive_stop>
	control_stop();
 8005e42:	f7fe ff89 	bl	8004d58 <control_stop>

	MF.FLAG.GYRO = 1;
 8005e46:	4a4f      	ldr	r2, [pc, #316]	; (8005f84 <slalom_R902+0x16c>)
 8005e48:	8813      	ldrh	r3, [r2, #0]
 8005e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 20000;
 8005e50:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <slalom_R902+0x188>)
 8005e52:	4a54      	ldr	r2, [pc, #336]	; (8005fa4 <slalom_R902+0x18c>)
 8005e54:	601a      	str	r2, [r3, #0]
	omega_max = 800;
 8005e56:	4b54      	ldr	r3, [pc, #336]	; (8005fa8 <slalom_R902+0x190>)
 8005e58:	4a4f      	ldr	r2, [pc, #316]	; (8005f98 <slalom_R902+0x180>)
 8005e5a:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <slalom_R902+0x194>)
 8005e5e:	4a4e      	ldr	r2, [pc, #312]	; (8005f98 <slalom_R902+0x180>)
 8005e60:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005e62:	4a48      	ldr	r2, [pc, #288]	; (8005f84 <slalom_R902+0x16c>)
 8005e64:	8813      	ldrh	r3, [r2, #0]
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-32);
 8005e6c:	bf00      	nop
 8005e6e:	4b50      	ldr	r3, [pc, #320]	; (8005fb0 <slalom_R902+0x198>)
 8005e70:	edd3 7a00 	vldr	s15, [r3]
 8005e74:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005fb4 <slalom_R902+0x19c>
 8005e78:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e7c:	4b4e      	ldr	r3, [pc, #312]	; (8005fb8 <slalom_R902+0x1a0>)
 8005e7e:	edd3 7a00 	vldr	s15, [r3]
 8005e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8a:	d4f0      	bmi.n	8005e6e <slalom_R902+0x56>

	MF.FLAG.GYRO = 1;
 8005e8c:	4a3d      	ldr	r2, [pc, #244]	; (8005f84 <slalom_R902+0x16c>)
 8005e8e:	8813      	ldrh	r3, [r2, #0]
 8005e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e94:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005e96:	4b42      	ldr	r3, [pc, #264]	; (8005fa0 <slalom_R902+0x188>)
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005e9e:	4a39      	ldr	r2, [pc, #228]	; (8005f84 <slalom_R902+0x16c>)
 8005ea0:	8813      	ldrh	r3, [r2, #0]
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-66);
 8005ea8:	bf00      	nop
 8005eaa:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <slalom_R902+0x198>)
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005fbc <slalom_R902+0x1a4>
 8005eb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005eb8:	4b3f      	ldr	r3, [pc, #252]	; (8005fb8 <slalom_R902+0x1a0>)
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec6:	d4f0      	bmi.n	8005eaa <slalom_R902+0x92>

	MF.FLAG.GYRO = 1;
 8005ec8:	4a2e      	ldr	r2, [pc, #184]	; (8005f84 <slalom_R902+0x16c>)
 8005eca:	8813      	ldrh	r3, [r2, #0]
 8005ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed0:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -20000;
 8005ed2:	4b33      	ldr	r3, [pc, #204]	; (8005fa0 <slalom_R902+0x188>)
 8005ed4:	4a3a      	ldr	r2, [pc, #232]	; (8005fc0 <slalom_R902+0x1a8>)
 8005ed6:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8005ed8:	4a2a      	ldr	r2, [pc, #168]	; (8005f84 <slalom_R902+0x16c>)
 8005eda:	8813      	ldrh	r3, [r2, #0]
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	8013      	strh	r3, [r2, #0]
	while(degree_z > target_degree_z-80);
 8005ee2:	bf00      	nop
 8005ee4:	4b32      	ldr	r3, [pc, #200]	; (8005fb0 <slalom_R902+0x198>)
 8005ee6:	edd3 7a00 	vldr	s15, [r3]
 8005eea:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005fc4 <slalom_R902+0x1ac>
 8005eee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ef2:	4b31      	ldr	r3, [pc, #196]	; (8005fb8 <slalom_R902+0x1a0>)
 8005ef4:	edd3 7a00 	vldr	s15, [r3]
 8005ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f00:	d4f0      	bmi.n	8005ee4 <slalom_R902+0xcc>
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005f02:	2001      	movs	r0, #1
 8005f04:	f004 fc4c 	bl	800a7a0 <turn_dir>

	MF.FLAG.GYRO = 0;
 8005f08:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <slalom_R902+0x16c>)
 8005f0a:	8813      	ldrh	r3, [r2, #0]
 8005f0c:	f36f 2308 	bfc	r3, #8, #1
 8005f10:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <slalom_R902+0x170>)
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <slalom_R902+0x174>)
 8005f16:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005f18:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <slalom_R902+0x178>)
 8005f1a:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <slalom_R902+0x174>)
 8005f1c:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <slalom_R902+0x17c>)
 8005f20:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <slalom_R902+0x180>)
 8005f22:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <slalom_R902+0x184>)
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <slalom_R902+0x180>)
 8005f28:	601a      	str	r2, [r3, #0]
//	drive_start();											//走行開始
	dist_l = dist_r = 0;
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <slalom_R902+0x1b0>)
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <slalom_R902+0x1b4>)
 8005f34:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005f36:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <slalom_R902+0x16c>)
 8005f38:	8813      	ldrh	r3, [r2, #0]
 8005f3a:	f043 0304 	orr.w	r3, r3, #4
 8005f3e:	8013      	strh	r3, [r2, #0]
	control_start();
 8005f40:	f7fe fef0 	bl	8004d24 <control_start>
	while(dist_l < 34 && dist_r < 34);
 8005f44:	bf00      	nop
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <slalom_R902+0x1b4>)
 8005f48:	edd3 7a00 	vldr	s15, [r3]
 8005f4c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005fd0 <slalom_R902+0x1b8>
 8005f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	d509      	bpl.n	8005f6e <slalom_R902+0x156>
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <slalom_R902+0x1b0>)
 8005f5c:	edd3 7a00 	vldr	s15, [r3]
 8005f60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005fd0 <slalom_R902+0x1b8>
 8005f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6c:	d4eb      	bmi.n	8005f46 <slalom_R902+0x12e>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <slalom_R902+0x16c>)
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <slalom_R902+0x168>
 8005f7c:	f005 fc7e 	bl	800b87c <get_wall_info>
//	drive_stop();
}
 8005f80:	bf00      	nop
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000ee4 	.word	0x20000ee4
 8005f88:	20000cd8 	.word	0x20000cd8
 8005f8c:	461c4000 	.word	0x461c4000
 8005f90:	20000a60 	.word	0x20000a60
 8005f94:	200006f4 	.word	0x200006f4
 8005f98:	44480000 	.word	0x44480000
 8005f9c:	20000224 	.word	0x20000224
 8005fa0:	20000ad4 	.word	0x20000ad4
 8005fa4:	469c4000 	.word	0x469c4000
 8005fa8:	20000a64 	.word	0x20000a64
 8005fac:	20000a70 	.word	0x20000a70
 8005fb0:	20000b78 	.word	0x20000b78
 8005fb4:	42000000 	.word	0x42000000
 8005fb8:	20000ad8 	.word	0x20000ad8
 8005fbc:	42840000 	.word	0x42840000
 8005fc0:	c69c4000 	.word	0xc69c4000
 8005fc4:	42a00000 	.word	0x42a00000
 8005fc8:	20000a68 	.word	0x20000a68
 8005fcc:	20000f00 	.word	0x20000f00
 8005fd0:	42080000 	.word	0x42080000
 8005fd4:	00000000 	.word	0x00000000

08005fd8 <slalom_L902>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L902(void){
 8005fd8:	b5b0      	push	{r4, r5, r7, lr}
 8005fda:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8005fdc:	4a62      	ldr	r2, [pc, #392]	; (8006168 <slalom_L902+0x190>)
 8005fde:	8813      	ldrh	r3, [r2, #0]
 8005fe0:	f36f 2308 	bfc	r3, #8, #1
 8005fe4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005fe6:	4b61      	ldr	r3, [pc, #388]	; (800616c <slalom_L902+0x194>)
 8005fe8:	4a61      	ldr	r2, [pc, #388]	; (8006170 <slalom_L902+0x198>)
 8005fea:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005fec:	4b61      	ldr	r3, [pc, #388]	; (8006174 <slalom_L902+0x19c>)
 8005fee:	4a60      	ldr	r2, [pc, #384]	; (8006170 <slalom_L902+0x198>)
 8005ff0:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005ff2:	4b61      	ldr	r3, [pc, #388]	; (8006178 <slalom_L902+0x1a0>)
 8005ff4:	4a61      	ldr	r2, [pc, #388]	; (800617c <slalom_L902+0x1a4>)
 8005ff6:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005ff8:	4b61      	ldr	r3, [pc, #388]	; (8006180 <slalom_L902+0x1a8>)
 8005ffa:	4a60      	ldr	r2, [pc, #384]	; (800617c <slalom_L902+0x1a4>)
 8005ffc:	601a      	str	r2, [r3, #0]

//	drive_start();											//走行開始
//	control_start();
//	while(dist_l < 18.5 && dist_r < 18.5);
	drive_stop();
 8005ffe:	f7fe fe69 	bl	8004cd4 <drive_stop>
	control_stop();
 8006002:	f7fe fea9 	bl	8004d58 <control_stop>

	MF.FLAG.GYRO = 1;
 8006006:	4a58      	ldr	r2, [pc, #352]	; (8006168 <slalom_L902+0x190>)
 8006008:	8813      	ldrh	r3, [r2, #0]
 800600a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -20000;
 8006010:	4b5c      	ldr	r3, [pc, #368]	; (8006184 <slalom_L902+0x1ac>)
 8006012:	4a5d      	ldr	r2, [pc, #372]	; (8006188 <slalom_L902+0x1b0>)
 8006014:	601a      	str	r2, [r3, #0]
	omega_min = -800;
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <slalom_L902+0x1b4>)
 8006018:	4a5d      	ldr	r2, [pc, #372]	; (8006190 <slalom_L902+0x1b8>)
 800601a:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 800601c:	4b5d      	ldr	r3, [pc, #372]	; (8006194 <slalom_L902+0x1bc>)
 800601e:	4a57      	ldr	r2, [pc, #348]	; (800617c <slalom_L902+0x1a4>)
 8006020:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 8006022:	4a51      	ldr	r2, [pc, #324]	; (8006168 <slalom_L902+0x190>)
 8006024:	8813      	ldrh	r3, [r2, #0]
 8006026:	f043 0302 	orr.w	r3, r3, #2
 800602a:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+32);
 800602c:	bf00      	nop
 800602e:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <slalom_L902+0x1c0>)
 8006030:	edd3 7a00 	vldr	s15, [r3]
 8006034:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800619c <slalom_L902+0x1c4>
 8006038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800603c:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <slalom_L902+0x1c8>)
 800603e:	edd3 7a00 	vldr	s15, [r3]
 8006042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	dcf0      	bgt.n	800602e <slalom_L902+0x56>
//	drive_stop();

	MF.FLAG.GYRO = 1;
 800604c:	4a46      	ldr	r2, [pc, #280]	; (8006168 <slalom_L902+0x190>)
 800604e:	8813      	ldrh	r3, [r2, #0]
 8006050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006054:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8006056:	4b4b      	ldr	r3, [pc, #300]	; (8006184 <slalom_L902+0x1ac>)
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 800605e:	4a42      	ldr	r2, [pc, #264]	; (8006168 <slalom_L902+0x190>)
 8006060:	8813      	ldrh	r3, [r2, #0]
 8006062:	f043 0302 	orr.w	r3, r3, #2
 8006066:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+66.3);
 8006068:	bf00      	nop
 800606a:	4b4d      	ldr	r3, [pc, #308]	; (80061a0 <slalom_L902+0x1c8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fa fa62 	bl	8000538 <__aeabi_f2d>
 8006074:	4604      	mov	r4, r0
 8006076:	460d      	mov	r5, r1
 8006078:	4b47      	ldr	r3, [pc, #284]	; (8006198 <slalom_L902+0x1c0>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa fa5b 	bl	8000538 <__aeabi_f2d>
 8006082:	a337      	add	r3, pc, #220	; (adr r3, 8006160 <slalom_L902+0x188>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa f8f8 	bl	800027c <__adddf3>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4620      	mov	r0, r4
 8006092:	4629      	mov	r1, r5
 8006094:	f7fa fd1a 	bl	8000acc <__aeabi_dcmplt>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <slalom_L902+0x92>
//	drive_stop();

	MF.FLAG.GYRO = 1;
 800609e:	4a32      	ldr	r2, [pc, #200]	; (8006168 <slalom_L902+0x190>)
 80060a0:	8813      	ldrh	r3, [r2, #0]
 80060a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 20000;
 80060a8:	4b36      	ldr	r3, [pc, #216]	; (8006184 <slalom_L902+0x1ac>)
 80060aa:	4a3e      	ldr	r2, [pc, #248]	; (80061a4 <slalom_L902+0x1cc>)
 80060ac:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//機体角度の初期化
//	pulse_l = pulse_r = 0;		//モータ出力の初期化
	MF.FLAG.DRV = 1;
 80060ae:	4a2e      	ldr	r2, [pc, #184]	; (8006168 <slalom_L902+0x190>)
 80060b0:	8813      	ldrh	r3, [r2, #0]
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	8013      	strh	r3, [r2, #0]
	while(degree_z < target_degree_z+80);
 80060b8:	bf00      	nop
 80060ba:	4b37      	ldr	r3, [pc, #220]	; (8006198 <slalom_L902+0x1c0>)
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80061a8 <slalom_L902+0x1d0>
 80060c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c8:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <slalom_L902+0x1c8>)
 80060ca:	edd3 7a00 	vldr	s15, [r3]
 80060ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d6:	dcf0      	bgt.n	80060ba <slalom_L902+0xe2>
//	drive_stop();
	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80060d8:	20ff      	movs	r0, #255	; 0xff
 80060da:	f004 fb61 	bl	800a7a0 <turn_dir>

	MF.FLAG.GYRO = 0;
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <slalom_L902+0x190>)
 80060e0:	8813      	ldrh	r3, [r2, #0]
 80060e2:	f36f 2308 	bfc	r3, #8, #1
 80060e6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80060e8:	4b20      	ldr	r3, [pc, #128]	; (800616c <slalom_L902+0x194>)
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <slalom_L902+0x198>)
 80060ec:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80060ee:	4b21      	ldr	r3, [pc, #132]	; (8006174 <slalom_L902+0x19c>)
 80060f0:	4a1f      	ldr	r2, [pc, #124]	; (8006170 <slalom_L902+0x198>)
 80060f2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80060f4:	4b20      	ldr	r3, [pc, #128]	; (8006178 <slalom_L902+0x1a0>)
 80060f6:	4a21      	ldr	r2, [pc, #132]	; (800617c <slalom_L902+0x1a4>)
 80060f8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80060fa:	4b21      	ldr	r3, [pc, #132]	; (8006180 <slalom_L902+0x1a8>)
 80060fc:	4a1f      	ldr	r2, [pc, #124]	; (800617c <slalom_L902+0x1a4>)
 80060fe:	601a      	str	r2, [r3, #0]
//	drive_start();											//走行開始
	dist_l = dist_r = 0;
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	4a29      	ldr	r2, [pc, #164]	; (80061ac <slalom_L902+0x1d4>)
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	4a29      	ldr	r2, [pc, #164]	; (80061b0 <slalom_L902+0x1d8>)
 800610a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800610c:	4a16      	ldr	r2, [pc, #88]	; (8006168 <slalom_L902+0x190>)
 800610e:	8813      	ldrh	r3, [r2, #0]
 8006110:	f043 0304 	orr.w	r3, r3, #4
 8006114:	8013      	strh	r3, [r2, #0]
	control_start();
 8006116:	f7fe fe05 	bl	8004d24 <control_start>
	while(dist_l < 34 && dist_r < 34);
 800611a:	bf00      	nop
 800611c:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <slalom_L902+0x1d8>)
 800611e:	edd3 7a00 	vldr	s15, [r3]
 8006122:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80061b4 <slalom_L902+0x1dc>
 8006126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	d509      	bpl.n	8006144 <slalom_L902+0x16c>
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <slalom_L902+0x1d4>)
 8006132:	edd3 7a00 	vldr	s15, [r3]
 8006136:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80061b4 <slalom_L902+0x1dc>
 800613a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006142:	d4eb      	bmi.n	800611c <slalom_L902+0x144>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <slalom_L902+0x190>)
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <slalom_L902+0x17e>
 8006152:	f005 fb93 	bl	800b87c <get_wall_info>
//	drive_stop();
}
 8006156:	bf00      	nop
 8006158:	bdb0      	pop	{r4, r5, r7, pc}
 800615a:	bf00      	nop
 800615c:	f3af 8000 	nop.w
 8006160:	33333333 	.word	0x33333333
 8006164:	40509333 	.word	0x40509333
 8006168:	20000ee4 	.word	0x20000ee4
 800616c:	20000cd8 	.word	0x20000cd8
 8006170:	461c4000 	.word	0x461c4000
 8006174:	20000a60 	.word	0x20000a60
 8006178:	200006f4 	.word	0x200006f4
 800617c:	44480000 	.word	0x44480000
 8006180:	20000224 	.word	0x20000224
 8006184:	20000ad4 	.word	0x20000ad4
 8006188:	c69c4000 	.word	0xc69c4000
 800618c:	20000334 	.word	0x20000334
 8006190:	c4480000 	.word	0xc4480000
 8006194:	20000a70 	.word	0x20000a70
 8006198:	20000b78 	.word	0x20000b78
 800619c:	42000000 	.word	0x42000000
 80061a0:	20000ad8 	.word	0x20000ad8
 80061a4:	469c4000 	.word	0x469c4000
 80061a8:	42a00000 	.word	0x42a00000
 80061ac:	20000a68 	.word	0x20000a68
 80061b0:	20000f00 	.word	0x20000f00
 80061b4:	42080000 	.word	0x42080000

080061b8 <v_R45>:
//v_R45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	full_led_write(2);
 80061bc:	2002      	movs	r0, #2
 80061be:	f005 fbd1 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 0;
 80061c2:	4a53      	ldr	r2, [pc, #332]	; (8006310 <v_R45+0x158>)
 80061c4:	8813      	ldrh	r3, [r2, #0]
 80061c6:	f36f 2308 	bfc	r3, #8, #1
 80061ca:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 80061cc:	4b51      	ldr	r3, [pc, #324]	; (8006314 <v_R45+0x15c>)
 80061ce:	4a52      	ldr	r2, [pc, #328]	; (8006318 <v_R45+0x160>)
 80061d0:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 80061d2:	4b52      	ldr	r3, [pc, #328]	; (800631c <v_R45+0x164>)
 80061d4:	4a50      	ldr	r2, [pc, #320]	; (8006318 <v_R45+0x160>)
 80061d6:	601a      	str	r2, [r3, #0]
	speed_max_l = 600;
 80061d8:	4b51      	ldr	r3, [pc, #324]	; (8006320 <v_R45+0x168>)
 80061da:	4a52      	ldr	r2, [pc, #328]	; (8006324 <v_R45+0x16c>)
 80061dc:	601a      	str	r2, [r3, #0]
	speed_max_r = 600;
 80061de:	4b52      	ldr	r3, [pc, #328]	; (8006328 <v_R45+0x170>)
 80061e0:	4a50      	ldr	r2, [pc, #320]	; (8006324 <v_R45+0x16c>)
 80061e2:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80061e4:	f7fe fd48 	bl	8004c78 <drive_start>
//	control_start();
	while(dist_l < 25 && dist_r < 25);
 80061e8:	bf00      	nop
 80061ea:	4b50      	ldr	r3, [pc, #320]	; (800632c <v_R45+0x174>)
 80061ec:	edd3 7a00 	vldr	s15, [r3]
 80061f0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80061f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fc:	d509      	bpl.n	8006212 <v_R45+0x5a>
 80061fe:	4b4c      	ldr	r3, [pc, #304]	; (8006330 <v_R45+0x178>)
 8006200:	edd3 7a00 	vldr	s15, [r3]
 8006204:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006210:	d4eb      	bmi.n	80061ea <v_R45+0x32>
	drive_stop();
 8006212:	f7fe fd5f 	bl	8004cd4 <drive_stop>
	control_stop();
 8006216:	f7fe fd9f 	bl	8004d58 <control_stop>

	full_led_write(3);
 800621a:	2003      	movs	r0, #3
 800621c:	f005 fba2 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 1;
 8006220:	4a3b      	ldr	r2, [pc, #236]	; (8006310 <v_R45+0x158>)
 8006222:	8813      	ldrh	r3, [r2, #0]
 8006224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006228:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 6000;
 800622a:	4b42      	ldr	r3, [pc, #264]	; (8006334 <v_R45+0x17c>)
 800622c:	4a42      	ldr	r2, [pc, #264]	; (8006338 <v_R45+0x180>)
 800622e:	601a      	str	r2, [r3, #0]
	omega_max = 300;
 8006230:	4b42      	ldr	r3, [pc, #264]	; (800633c <v_R45+0x184>)
 8006232:	4a43      	ldr	r2, [pc, #268]	; (8006340 <v_R45+0x188>)
 8006234:	601a      	str	r2, [r3, #0]
	speed_G = 600;
 8006236:	4b43      	ldr	r3, [pc, #268]	; (8006344 <v_R45+0x18c>)
 8006238:	4a3a      	ldr	r2, [pc, #232]	; (8006324 <v_R45+0x16c>)
 800623a:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 800623c:	4b42      	ldr	r3, [pc, #264]	; (8006348 <v_R45+0x190>)
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	4a40      	ldr	r2, [pc, #256]	; (800634c <v_R45+0x194>)
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4a40      	ldr	r2, [pc, #256]	; (8006350 <v_R45+0x198>)
 800624e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8006250:	4a2f      	ldr	r2, [pc, #188]	; (8006310 <v_R45+0x158>)
 8006252:	8813      	ldrh	r3, [r2, #0]
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	8013      	strh	r3, [r2, #0]
	while(degree_z > -7.5);
 800625a:	bf00      	nop
 800625c:	4b3a      	ldr	r3, [pc, #232]	; (8006348 <v_R45+0x190>)
 800625e:	edd3 7a00 	vldr	s15, [r3]
 8006262:	eeb9 7a0e 	vmov.f32	s14, #158	; 0xc0f00000 -7.5
 8006266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800626a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626e:	dcf5      	bgt.n	800625c <v_R45+0xa4>

	full_led_write(4);
 8006270:	2004      	movs	r0, #4
 8006272:	f005 fb77 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 1;
 8006276:	4a26      	ldr	r2, [pc, #152]	; (8006310 <v_R45+0x158>)
 8006278:	8813      	ldrh	r3, [r2, #0]
 800627a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8006280:	4b2c      	ldr	r3, [pc, #176]	; (8006334 <v_R45+0x17c>)
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	4a2f      	ldr	r2, [pc, #188]	; (800634c <v_R45+0x194>)
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <v_R45+0x198>)
 8006292:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8006294:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <v_R45+0x158>)
 8006296:	8813      	ldrh	r3, [r2, #0]
 8006298:	f043 0302 	orr.w	r3, r3, #2
 800629c:	8013      	strh	r3, [r2, #0]
	while(degree_z > -37.5);
 800629e:	bf00      	nop
 80062a0:	4b29      	ldr	r3, [pc, #164]	; (8006348 <v_R45+0x190>)
 80062a2:	edd3 7a00 	vldr	s15, [r3]
 80062a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006354 <v_R45+0x19c>
 80062aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b2:	dcf5      	bgt.n	80062a0 <v_R45+0xe8>

	full_led_write(5);
 80062b4:	2005      	movs	r0, #5
 80062b6:	f005 fb55 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 1;
 80062ba:	4a15      	ldr	r2, [pc, #84]	; (8006310 <v_R45+0x158>)
 80062bc:	8813      	ldrh	r3, [r2, #0]
 80062be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c2:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -6000;
 80062c4:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <v_R45+0x17c>)
 80062c6:	4a24      	ldr	r2, [pc, #144]	; (8006358 <v_R45+0x1a0>)
 80062c8:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	4a1f      	ldr	r2, [pc, #124]	; (800634c <v_R45+0x194>)
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <v_R45+0x198>)
 80062d4:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 80062d6:	4a0e      	ldr	r2, [pc, #56]	; (8006310 <v_R45+0x158>)
 80062d8:	8813      	ldrh	r3, [r2, #0]
 80062da:	f043 0302 	orr.w	r3, r3, #2
 80062de:	8013      	strh	r3, [r2, #0]
	while(degree_z > -45);
 80062e0:	bf00      	nop
 80062e2:	4b19      	ldr	r3, [pc, #100]	; (8006348 <v_R45+0x190>)
 80062e4:	edd3 7a00 	vldr	s15, [r3]
 80062e8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800635c <v_R45+0x1a4>
 80062ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f4:	dcf5      	bgt.n	80062e2 <v_R45+0x12a>

	full_led_write(6);
 80062f6:	2006      	movs	r0, #6
 80062f8:	f005 fb34 	bl	800b964 <full_led_write>
	MF.FLAG.GYRO = 0;
 80062fc:	4a04      	ldr	r2, [pc, #16]	; (8006310 <v_R45+0x158>)
 80062fe:	8813      	ldrh	r3, [r2, #0]
 8006300:	f36f 2308 	bfc	r3, #8, #1
 8006304:	8013      	strh	r3, [r2, #0]
	drive_start();											//走行開始
	control_start();
	while(dist_l < 34 && dist_r < 34);
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
*/	drive_stop();
 8006306:	f7fe fce5 	bl	8004cd4 <drive_stop>
}
 800630a:	bf00      	nop
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000ee4 	.word	0x20000ee4
 8006314:	20000cd8 	.word	0x20000cd8
 8006318:	459c4000 	.word	0x459c4000
 800631c:	20000a60 	.word	0x20000a60
 8006320:	200006f4 	.word	0x200006f4
 8006324:	44160000 	.word	0x44160000
 8006328:	20000224 	.word	0x20000224
 800632c:	20000f00 	.word	0x20000f00
 8006330:	20000a68 	.word	0x20000a68
 8006334:	20000ad4 	.word	0x20000ad4
 8006338:	45bb8000 	.word	0x45bb8000
 800633c:	20000a64 	.word	0x20000a64
 8006340:	43960000 	.word	0x43960000
 8006344:	20000a70 	.word	0x20000a70
 8006348:	20000ad8 	.word	0x20000ad8
 800634c:	200006f8 	.word	0x200006f8
 8006350:	20000b24 	.word	0x20000b24
 8006354:	c2160000 	.word	0xc2160000
 8006358:	c5bb8000 	.word	0xc5bb8000
 800635c:	c2340000 	.word	0xc2340000

08006360 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
	int mode = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	483b      	ldr	r0, [pc, #236]	; (800645c <test_select+0xfc>)
 800636e:	f006 f88d 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	b2d8      	uxtb	r0, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	b2d9      	uxtb	r1, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	b2db      	uxtb	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	f005 faad 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 8006396:	4b32      	ldr	r3, [pc, #200]	; (8006460 <test_select+0x100>)
 8006398:	edd3 7a00 	vldr	s15, [r3]
 800639c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80063a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a8:	db0f      	blt.n	80063ca <test_select+0x6a>
			  mode++;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3301      	adds	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80063b0:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <test_select+0x100>)
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b07      	cmp	r3, #7
 80063bc:	dd01      	ble.n	80063c2 <test_select+0x62>
				  mode = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	4827      	ldr	r0, [pc, #156]	; (8006464 <test_select+0x104>)
 80063c6:	f006 f861 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80063ca:	4b25      	ldr	r3, [pc, #148]	; (8006460 <test_select+0x100>)
 80063cc:	edd3 7a00 	vldr	s15, [r3]
 80063d0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80063d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	d80f      	bhi.n	80063fe <test_select+0x9e>
			  mode--;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <test_select+0x100>)
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da01      	bge.n	80063f6 <test_select+0x96>
				  mode = 7;
 80063f2:	2307      	movs	r3, #7
 80063f4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	481a      	ldr	r0, [pc, #104]	; (8006464 <test_select+0x104>)
 80063fa:	f006 f847 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80063fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006402:	4819      	ldr	r0, [pc, #100]	; (8006468 <test_select+0x108>)
 8006404:	f7fb ff3e 	bl	8002284 <HAL_GPIO_ReadPin>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1b1      	bne.n	8006372 <test_select+0x12>
			  HAL_Delay(50);
 800640e:	2032      	movs	r0, #50	; 0x32
 8006410:	f7fa fddc 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006414:	bf00      	nop
 8006416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800641a:	4813      	ldr	r0, [pc, #76]	; (8006468 <test_select+0x108>)
 800641c:	f7fb ff32 	bl	8002284 <HAL_GPIO_ReadPin>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f7      	beq.n	8006416 <test_select+0xb6>
			  switch(mode){
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3b01      	subs	r3, #1
 800642a:	2b03      	cmp	r3, #3
 800642c:	d8a1      	bhi.n	8006372 <test_select+0x12>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <test_select+0xd4>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006445 	.word	0x08006445
 8006438:	0800644b 	.word	0x0800644b
 800643c:	08006451 	.word	0x08006451
 8006440:	08006457 	.word	0x08006457
				case 1:
					init_test();
 8006444:	f000 f812 	bl	800646c <init_test>
					break;
 8006448:	e007      	b.n	800645a <test_select+0xfa>

				case 2:
					slalom_test();
 800644a:	f000 f917 	bl	800667c <slalom_test>
					break;
 800644e:	e004      	b.n	800645a <test_select+0xfa>

				case 3:
					sample_course_run();
 8006450:	f000 fe1c 	bl	800708c <sample_course_run>
					break;
 8006454:	e001      	b.n	800645a <test_select+0xfa>
				case 4:
					v_test();
 8006456:	f000 fa81 	bl	800695c <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800645a:	e78a      	b.n	8006372 <test_select+0x12>
 800645c:	0800d6c8 	.word	0x0800d6c8
 8006460:	20000a68 	.word	0x20000a68
 8006464:	0800d6e0 	.word	0x0800d6e0
 8006468:	40020000 	.word	0x40020000

0800646c <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0

	int mode = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
	printf("Test Init Run, Mode : %d\n", mode);
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	4872      	ldr	r0, [pc, #456]	; (8006644 <init_test+0x1d8>)
 800647a:	f006 f807 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	b2d8      	uxtb	r0, r3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	b2d9      	uxtb	r1, r3
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	f005 fa27 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 80064a2:	4b69      	ldr	r3, [pc, #420]	; (8006648 <init_test+0x1dc>)
 80064a4:	edd3 7a00 	vldr	s15, [r3]
 80064a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80064ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b4:	db0f      	blt.n	80064d6 <init_test+0x6a>
			  mode++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
			  dist_r = 0;
 80064bc:	4b62      	ldr	r3, [pc, #392]	; (8006648 <init_test+0x1dc>)
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2b07      	cmp	r3, #7
 80064c8:	dd01      	ble.n	80064ce <init_test+0x62>
				  mode = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
			  }
			  printf("Mode : %d\n", mode);
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	485e      	ldr	r0, [pc, #376]	; (800664c <init_test+0x1e0>)
 80064d2:	f005 ffdb 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80064d6:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <init_test+0x1dc>)
 80064d8:	edd3 7a00 	vldr	s15, [r3]
 80064dc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80064e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e8:	d80f      	bhi.n	800650a <init_test+0x9e>
			  mode--;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	61fb      	str	r3, [r7, #28]
			  dist_r = 0;
 80064f0:	4b55      	ldr	r3, [pc, #340]	; (8006648 <init_test+0x1dc>)
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da01      	bge.n	8006502 <init_test+0x96>
				  mode = 7;
 80064fe:	2307      	movs	r3, #7
 8006500:	61fb      	str	r3, [r7, #28]
			  }
			  printf("Mode : %d\n", mode);
 8006502:	69f9      	ldr	r1, [r7, #28]
 8006504:	4851      	ldr	r0, [pc, #324]	; (800664c <init_test+0x1e0>)
 8006506:	f005 ffc1 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800650a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800650e:	4850      	ldr	r0, [pc, #320]	; (8006650 <init_test+0x1e4>)
 8006510:	f7fb feb8 	bl	8002284 <HAL_GPIO_ReadPin>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1b1      	bne.n	800647e <init_test+0x12>
			  HAL_Delay(50);
 800651a:	2032      	movs	r0, #50	; 0x32
 800651c:	f7fa fd56 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006520:	bf00      	nop
 8006522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006526:	484a      	ldr	r0, [pc, #296]	; (8006650 <init_test+0x1e4>)
 8006528:	f7fb feac 	bl	8002284 <HAL_GPIO_ReadPin>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f7      	beq.n	8006522 <init_test+0xb6>
			  drive_ready();
 8006532:	f7fe fb77 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b07      	cmp	r3, #7
 800653a:	d8a0      	bhi.n	800647e <init_test+0x12>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <init_test+0xd8>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	08006565 	.word	0x08006565
 8006548:	08006583 	.word	0x08006583
 800654c:	080065a3 	.word	0x080065a3
 8006550:	080065c1 	.word	0x080065c1
 8006554:	080065df 	.word	0x080065df
 8006558:	080065fd 	.word	0x080065fd
 800655c:	08006623 	.word	0x08006623
 8006560:	08006629 	.word	0x08006629
				case 0:
					//----right90度回転----
					printf("Rotate R90.\n");
 8006564:	483b      	ldr	r0, [pc, #236]	; (8006654 <init_test+0x1e8>)
 8006566:	f006 f805 	bl	800c574 <puts>
					for(int i = 0; i < 16; i++){
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e004      	b.n	800657a <init_test+0x10e>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8006570:	f7fe fff6 	bl	8005560 <rotate_R90>
					for(int i = 0; i < 16; i++){
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	3301      	adds	r3, #1
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b0f      	cmp	r3, #15
 800657e:	ddf7      	ble.n	8006570 <init_test+0x104>
					}
//					get_base();
					break;
 8006580:	e05f      	b.n	8006642 <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8006582:	4835      	ldr	r0, [pc, #212]	; (8006658 <init_test+0x1ec>)
 8006584:	f005 fff6 	bl	800c574 <puts>
					for(int i = 0; i < 1; i++){
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e005      	b.n	800659a <init_test+0x12e>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 800658e:	20b4      	movs	r0, #180	; 0xb4
 8006590:	f7fe fe26 	bl	80051e0 <driveC>
					for(int i = 0; i < 1; i++){
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3301      	adds	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	ddf6      	ble.n	800658e <init_test+0x122>
					}
					break;
 80065a0:	e04f      	b.n	8006642 <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 80065a2:	482c      	ldr	r0, [pc, #176]	; (8006654 <init_test+0x1e8>)
 80065a4:	f005 ffe6 	bl	800c574 <puts>
					for(int i = 0; i < 32; i++){
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e004      	b.n	80065b8 <init_test+0x14c>
						rotate_R90();				//16回右90度回転、つまり4周回転
 80065ae:	f7fe ffd7 	bl	8005560 <rotate_R90>
					for(int i = 0; i < 32; i++){
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3301      	adds	r3, #1
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2b1f      	cmp	r3, #31
 80065bc:	ddf7      	ble.n	80065ae <init_test+0x142>
					}
					break;
 80065be:	e040      	b.n	8006642 <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 80065c0:	4826      	ldr	r0, [pc, #152]	; (800665c <init_test+0x1f0>)
 80065c2:	f005 ffd7 	bl	800c574 <puts>
					for(int i = 0; i < 32; i++){
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e004      	b.n	80065d6 <init_test+0x16a>
						rotate_L90();				//16回左90度回転、つまり4周回転
 80065cc:	f7ff f898 	bl	8005700 <rotate_L90>
					for(int i = 0; i < 32; i++){
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b1f      	cmp	r3, #31
 80065da:	ddf7      	ble.n	80065cc <init_test+0x160>
					}
					break;
 80065dc:	e031      	b.n	8006642 <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 80065de:	4820      	ldr	r0, [pc, #128]	; (8006660 <init_test+0x1f4>)
 80065e0:	f005 ffc8 	bl	800c574 <puts>
					for(int i = 0; i < 16; i++){
 80065e4:	2300      	movs	r3, #0
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	e004      	b.n	80065f4 <init_test+0x188>
						rotate_180();				//8回右180度回転、つまり4周回転
 80065ea:	f7ff f959 	bl	80058a0 <rotate_180>
					for(int i = 0; i < 16; i++){
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	ddf7      	ble.n	80065ea <init_test+0x17e>
					}
					break;
 80065fa:	e022      	b.n	8006642 <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 80065fc:	4819      	ldr	r0, [pc, #100]	; (8006664 <init_test+0x1f8>)
 80065fe:	f005 ffb9 	bl	800c574 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8006602:	f7fe feb9 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	e004      	b.n	8006616 <init_test+0x1aa>
						one_sectionU();			//一区画のパルス分等速走行
 800660c:	f7fe ff8e 	bl	800552c <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3301      	adds	r3, #1
 8006614:	607b      	str	r3, [r7, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b04      	cmp	r3, #4
 800661a:	ddf7      	ble.n	800660c <init_test+0x1a0>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 800661c:	f7fe fec6 	bl	80053ac <half_sectionD>
					break;
 8006620:	e00f      	b.n	8006642 <init_test+0x1d6>
				case 6:
					set_position();
 8006622:	f7fe fe73 	bl	800530c <set_position>
					break;
 8006626:	e00c      	b.n	8006642 <init_test+0x1d6>
				case 7:
					target_degree_z = degree_z;
 8006628:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <init_test+0x1fc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a0f      	ldr	r2, [pc, #60]	; (800666c <init_test+0x200>)
 800662e:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <init_test+0x204>)
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <init_test+0x208>)
 8006634:	601a      	str	r2, [r3, #0]

					MF.FLAG.ENKAI = 1;
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <init_test+0x20c>)
 8006638:	8813      	ldrh	r3, [r2, #0]
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	8013      	strh	r3, [r2, #0]

					while(1);
 8006640:	e7fe      	b.n	8006640 <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006642:	e71c      	b.n	800647e <init_test+0x12>
 8006644:	0800d6ec 	.word	0x0800d6ec
 8006648:	20000a68 	.word	0x20000a68
 800664c:	0800d6e0 	.word	0x0800d6e0
 8006650:	40020000 	.word	0x40020000
 8006654:	0800d708 	.word	0x0800d708
 8006658:	0800d714 	.word	0x0800d714
 800665c:	0800d738 	.word	0x0800d738
 8006660:	0800d744 	.word	0x0800d744
 8006664:	0800d750 	.word	0x0800d750
 8006668:	20000ad8 	.word	0x20000ad8
 800666c:	20000b78 	.word	0x20000b78
 8006670:	20000cd8 	.word	0x20000cd8
 8006674:	459c4000 	.word	0x459c4000
 8006678:	20000ee4 	.word	0x20000ee4

0800667c <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	; 0x28
 8006680:	af00      	add	r7, sp, #0

	int mode = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Test Slalom Run, Mode : %d\n", mode);
 8006686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006688:	48aa      	ldr	r0, [pc, #680]	; (8006934 <slalom_test+0x2b8>)
 800668a:	f005 feff 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	b2d8      	uxtb	r0, r3
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	b2d9      	uxtb	r1, r3
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	f005 f91f 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 80066b2:	4ba1      	ldr	r3, [pc, #644]	; (8006938 <slalom_test+0x2bc>)
 80066b4:	edd3 7a00 	vldr	s15, [r3]
 80066b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80066bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	db0f      	blt.n	80066e6 <slalom_test+0x6a>
			  mode++;
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	3301      	adds	r3, #1
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 80066cc:	4b9a      	ldr	r3, [pc, #616]	; (8006938 <slalom_test+0x2bc>)
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	2b07      	cmp	r3, #7
 80066d8:	dd01      	ble.n	80066de <slalom_test+0x62>
				  mode = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 80066de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066e0:	4896      	ldr	r0, [pc, #600]	; (800693c <slalom_test+0x2c0>)
 80066e2:	f005 fed3 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80066e6:	4b94      	ldr	r3, [pc, #592]	; (8006938 <slalom_test+0x2bc>)
 80066e8:	edd3 7a00 	vldr	s15, [r3]
 80066ec:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80066f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f8:	d80f      	bhi.n	800671a <slalom_test+0x9e>
			  mode--;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	3b01      	subs	r3, #1
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8006700:	4b8d      	ldr	r3, [pc, #564]	; (8006938 <slalom_test+0x2bc>)
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	da01      	bge.n	8006712 <slalom_test+0x96>
				  mode = 7;
 800670e:	2307      	movs	r3, #7
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8006712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006714:	4889      	ldr	r0, [pc, #548]	; (800693c <slalom_test+0x2c0>)
 8006716:	f005 feb9 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800671a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800671e:	4888      	ldr	r0, [pc, #544]	; (8006940 <slalom_test+0x2c4>)
 8006720:	f7fb fdb0 	bl	8002284 <HAL_GPIO_ReadPin>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1b1      	bne.n	800668e <slalom_test+0x12>
			  HAL_Delay(50);
 800672a:	2032      	movs	r0, #50	; 0x32
 800672c:	f7fa fc4e 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006730:	bf00      	nop
 8006732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006736:	4882      	ldr	r0, [pc, #520]	; (8006940 <slalom_test+0x2c4>)
 8006738:	f7fb fda4 	bl	8002284 <HAL_GPIO_ReadPin>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f7      	beq.n	8006732 <slalom_test+0xb6>
			  drive_ready();
 8006742:	f7fe fa6f 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	2b07      	cmp	r3, #7
 800674a:	d8a0      	bhi.n	800668e <slalom_test+0x12>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <slalom_test+0xd8>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006775 	.word	0x08006775
 8006758:	0800677b 	.word	0x0800677b
 800675c:	080067a5 	.word	0x080067a5
 8006760:	080067cf 	.word	0x080067cf
 8006764:	08006857 	.word	0x08006857
 8006768:	0800687d 	.word	0x0800687d
 800676c:	080068b9 	.word	0x080068b9
 8006770:	080068f5 	.word	0x080068f5
				case 0:
					get_base();
 8006774:	f005 f864 	bl	800b840 <get_base>
					break;
 8006778:	e0da      	b.n	8006930 <slalom_test+0x2b4>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800677a:	4872      	ldr	r0, [pc, #456]	; (8006944 <slalom_test+0x2c8>)
 800677c:	f005 fefa 	bl	800c574 <puts>
					half_sectionA();
 8006780:	f7fe fdfa 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8006784:	2300      	movs	r3, #0
 8006786:	623b      	str	r3, [r7, #32]
 8006788:	e006      	b.n	8006798 <slalom_test+0x11c>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800678a:	f7ff f957 	bl	8005a3c <slalom_R90>
						one_sectionU();
 800678e:	f7fe fecd 	bl	800552c <one_sectionU>
					for(int i = 0; i < 32; i++){
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	3301      	adds	r3, #1
 8006796:	623b      	str	r3, [r7, #32]
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	2b1f      	cmp	r3, #31
 800679c:	ddf5      	ble.n	800678a <slalom_test+0x10e>
					}
					half_sectionD();
 800679e:	f7fe fe05 	bl	80053ac <half_sectionD>
					break;
 80067a2:	e0c5      	b.n	8006930 <slalom_test+0x2b4>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80067a4:	4868      	ldr	r0, [pc, #416]	; (8006948 <slalom_test+0x2cc>)
 80067a6:	f005 fee5 	bl	800c574 <puts>
					half_sectionA();
 80067aa:	f7fe fde5 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 32; i++){
 80067ae:	2300      	movs	r3, #0
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	e006      	b.n	80067c2 <slalom_test+0x146>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80067b4:	f7ff fa32 	bl	8005c1c <slalom_L90>
						one_sectionU();
 80067b8:	f7fe feb8 	bl	800552c <one_sectionU>
					for(int i = 0; i < 32; i++){
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b1f      	cmp	r3, #31
 80067c6:	ddf5      	ble.n	80067b4 <slalom_test+0x138>
					}
					half_sectionD();
 80067c8:	f7fe fdf0 	bl	80053ac <half_sectionD>
					break;
 80067cc:	e0b0      	b.n	8006930 <slalom_test+0x2b4>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 80067ce:	485d      	ldr	r0, [pc, #372]	; (8006944 <slalom_test+0x2c8>)
 80067d0:	f005 fed0 	bl	800c574 <puts>
					for(int i = 0; i < 1; i++){
 80067d4:	2300      	movs	r3, #0
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e008      	b.n	80067ec <slalom_test+0x170>
						half_sectionA();
 80067da:	f7fe fdcd 	bl	8005378 <half_sectionA>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80067de:	f7ff f92d 	bl	8005a3c <slalom_R90>
						half_sectionD();
 80067e2:	f7fe fde3 	bl	80053ac <half_sectionD>
					for(int i = 0; i < 1; i++){
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	3301      	adds	r3, #1
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	ddf3      	ble.n	80067da <slalom_test+0x15e>
					}
				//log print
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 80067f2:	bf00      	nop
 80067f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f8:	4851      	ldr	r0, [pc, #324]	; (8006940 <slalom_test+0x2c4>)
 80067fa:	f7fb fd43 	bl	8002284 <HAL_GPIO_ReadPin>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d0f7      	beq.n	80067f4 <slalom_test+0x178>

					for(int i=0; i<log_allay; i++){
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e00d      	b.n	8006826 <slalom_test+0x1aa>
						printf("l:	%d\n", get_speed_l[i]);
 800680a:	4a50      	ldr	r2, [pc, #320]	; (800694c <slalom_test+0x2d0>)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006812:	4619      	mov	r1, r3
 8006814:	484e      	ldr	r0, [pc, #312]	; (8006950 <slalom_test+0x2d4>)
 8006816:	f005 fe39 	bl	800c48c <iprintf>
						HAL_Delay(5);
 800681a:	2005      	movs	r0, #5
 800681c:	f7fa fbd6 	bl	8000fcc <HAL_Delay>
					for(int i=0; i<log_allay; i++){
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	3301      	adds	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2bc7      	cmp	r3, #199	; 0xc7
 800682a:	ddee      	ble.n	800680a <slalom_test+0x18e>
					}
					for(int i=0; i<log_allay; i++){
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	e00d      	b.n	800684e <slalom_test+0x1d2>
						printf("r:	%d\n", get_speed_r[i]);
 8006832:	4a48      	ldr	r2, [pc, #288]	; (8006954 <slalom_test+0x2d8>)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800683a:	4619      	mov	r1, r3
 800683c:	4846      	ldr	r0, [pc, #280]	; (8006958 <slalom_test+0x2dc>)
 800683e:	f005 fe25 	bl	800c48c <iprintf>
						HAL_Delay(5);
 8006842:	2005      	movs	r0, #5
 8006844:	f7fa fbc2 	bl	8000fcc <HAL_Delay>
					for(int i=0; i<log_allay; i++){
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3301      	adds	r3, #1
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2bc7      	cmp	r3, #199	; 0xc7
 8006852:	ddee      	ble.n	8006832 <slalom_test+0x1b6>
					}
					break;
 8006854:	e06c      	b.n	8006930 <slalom_test+0x2b4>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 8006856:	483c      	ldr	r0, [pc, #240]	; (8006948 <slalom_test+0x2cc>)
 8006858:	f005 fe8c 	bl	800c574 <puts>
					for(int i = 0; i < 8; i++){
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e008      	b.n	8006874 <slalom_test+0x1f8>
						half_sectionA();
 8006862:	f7fe fd89 	bl	8005378 <half_sectionA>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8006866:	f7ff f9d9 	bl	8005c1c <slalom_L90>
						half_sectionD();
 800686a:	f7fe fd9f 	bl	80053ac <half_sectionD>
					for(int i = 0; i < 8; i++){
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b07      	cmp	r3, #7
 8006878:	ddf3      	ble.n	8006862 <slalom_test+0x1e6>
					}
					break;
 800687a:	e059      	b.n	8006930 <slalom_test+0x2b4>
				case 5:
					//----slalom2右折----
					printf("slalom turn right .\n");
 800687c:	4831      	ldr	r0, [pc, #196]	; (8006944 <slalom_test+0x2c8>)
 800687e:	f005 fe79 	bl	800c574 <puts>
					half_sectionA2();
 8006882:	f7fe fdcf 	bl	8005424 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	e00c      	b.n	80068a6 <slalom_test+0x22a>
						full_led_write(1);
 800688c:	2001      	movs	r0, #1
 800688e:	f005 f869 	bl	800b964 <full_led_write>
						slalom_R902();	//一区画のパルス分デフォルトインターバルで走行
 8006892:	f7ff fac1 	bl	8005e18 <slalom_R902>
						full_led_write(2);
 8006896:	2002      	movs	r0, #2
 8006898:	f005 f864 	bl	800b964 <full_led_write>
						one_sectionU();
 800689c:	f7fe fe46 	bl	800552c <one_sectionU>
					for(int i = 0; i < 1; i++){
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	ddef      	ble.n	800688c <slalom_test+0x210>
					}
					full_led_write(3);
 80068ac:	2003      	movs	r0, #3
 80068ae:	f005 f859 	bl	800b964 <full_led_write>
					half_sectionD2();
 80068b2:	f7fe fdd3 	bl	800545c <half_sectionD2>
					break;
 80068b6:	e03b      	b.n	8006930 <slalom_test+0x2b4>
				case 6:
					//----slalom2右折----
					printf("slalom turn right .\n");
 80068b8:	4822      	ldr	r0, [pc, #136]	; (8006944 <slalom_test+0x2c8>)
 80068ba:	f005 fe5b 	bl	800c574 <puts>
					half_sectionA2();
 80068be:	f7fe fdb1 	bl	8005424 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	e00c      	b.n	80068e2 <slalom_test+0x266>
						full_led_write(1);
 80068c8:	2001      	movs	r0, #1
 80068ca:	f005 f84b 	bl	800b964 <full_led_write>
						slalom_R902();	//一区画のパルス分デフォルトインターバルで走行
 80068ce:	f7ff faa3 	bl	8005e18 <slalom_R902>
						full_led_write(2);
 80068d2:	2002      	movs	r0, #2
 80068d4:	f005 f846 	bl	800b964 <full_led_write>
						one_sectionU();
 80068d8:	f7fe fe28 	bl	800552c <one_sectionU>
					for(int i = 0; i < 16; i++){
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3301      	adds	r3, #1
 80068e0:	607b      	str	r3, [r7, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b0f      	cmp	r3, #15
 80068e6:	ddef      	ble.n	80068c8 <slalom_test+0x24c>
					}
					full_led_write(3);
 80068e8:	2003      	movs	r0, #3
 80068ea:	f005 f83b 	bl	800b964 <full_led_write>
					half_sectionD2();
 80068ee:	f7fe fdb5 	bl	800545c <half_sectionD2>
					break;
 80068f2:	e01d      	b.n	8006930 <slalom_test+0x2b4>
				case 7:
					//----slalom2左折----
					printf("slalom turn left .\n");
 80068f4:	4814      	ldr	r0, [pc, #80]	; (8006948 <slalom_test+0x2cc>)
 80068f6:	f005 fe3d 	bl	800c574 <puts>
					half_sectionA2();
 80068fa:	f7fe fd93 	bl	8005424 <half_sectionA2>
					for(int i = 0; i < 16; i++){
 80068fe:	2300      	movs	r3, #0
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	e00c      	b.n	800691e <slalom_test+0x2a2>
						full_led_write(1);
 8006904:	2001      	movs	r0, #1
 8006906:	f005 f82d 	bl	800b964 <full_led_write>
						slalom_L902();				//16回右90度回転、つまり4周回転
 800690a:	f7ff fb65 	bl	8005fd8 <slalom_L902>
						full_led_write(2);
 800690e:	2002      	movs	r0, #2
 8006910:	f005 f828 	bl	800b964 <full_led_write>
						one_sectionU();
 8006914:	f7fe fe0a 	bl	800552c <one_sectionU>
					for(int i = 0; i < 16; i++){
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	3301      	adds	r3, #1
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b0f      	cmp	r3, #15
 8006922:	ddef      	ble.n	8006904 <slalom_test+0x288>
					}
					full_led_write(3);
 8006924:	2003      	movs	r0, #3
 8006926:	f005 f81d 	bl	800b964 <full_led_write>
					half_sectionD2();
 800692a:	f7fe fd97 	bl	800545c <half_sectionD2>
					break;
 800692e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006930:	e6ad      	b.n	800668e <slalom_test+0x12>
 8006932:	bf00      	nop
 8006934:	0800d770 	.word	0x0800d770
 8006938:	20000a68 	.word	0x20000a68
 800693c:	0800d6e0 	.word	0x0800d6e0
 8006940:	40020000 	.word	0x40020000
 8006944:	0800d78c 	.word	0x0800d78c
 8006948:	0800d7a0 	.word	0x0800d7a0
 800694c:	200006fc 	.word	0x200006fc
 8006950:	0800d7b4 	.word	0x0800d7b4
 8006954:	200003d4 	.word	0x200003d4
 8006958:	0800d7bc 	.word	0x0800d7bc

0800695c <v_test>:
//v_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0

	int mode = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
	printf("Test V Run, Mode : %d\n", mode);
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	484a      	ldr	r0, [pc, #296]	; (8006a94 <v_test+0x138>)
 800696a:	f005 fd8f 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	b2d8      	uxtb	r0, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	b2d9      	uxtb	r1, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	b2db      	uxtb	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	f004 ffaf 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 8006992:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <v_test+0x13c>)
 8006994:	edd3 7a00 	vldr	s15, [r3]
 8006998:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800699c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a4:	db0f      	blt.n	80069c6 <v_test+0x6a>
			  mode++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3301      	adds	r3, #1
 80069aa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80069ac:	4b3a      	ldr	r3, [pc, #232]	; (8006a98 <v_test+0x13c>)
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b07      	cmp	r3, #7
 80069b8:	dd01      	ble.n	80069be <v_test+0x62>
				  mode = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4836      	ldr	r0, [pc, #216]	; (8006a9c <v_test+0x140>)
 80069c2:	f005 fd63 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80069c6:	4b34      	ldr	r3, [pc, #208]	; (8006a98 <v_test+0x13c>)
 80069c8:	edd3 7a00 	vldr	s15, [r3]
 80069cc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80069d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d8:	d80f      	bhi.n	80069fa <v_test+0x9e>
			  mode--;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3b01      	subs	r3, #1
 80069de:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80069e0:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <v_test+0x13c>)
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da01      	bge.n	80069f2 <v_test+0x96>
				  mode = 7;
 80069ee:	2307      	movs	r3, #7
 80069f0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4829      	ldr	r0, [pc, #164]	; (8006a9c <v_test+0x140>)
 80069f6:	f005 fd49 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80069fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069fe:	4828      	ldr	r0, [pc, #160]	; (8006aa0 <v_test+0x144>)
 8006a00:	f7fb fc40 	bl	8002284 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1b1      	bne.n	800696e <v_test+0x12>
			  HAL_Delay(50);
 8006a0a:	2032      	movs	r0, #50	; 0x32
 8006a0c:	f7fa fade 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006a10:	bf00      	nop
 8006a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a16:	4822      	ldr	r0, [pc, #136]	; (8006aa0 <v_test+0x144>)
 8006a18:	f7fb fc34 	bl	8002284 <HAL_GPIO_ReadPin>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f7      	beq.n	8006a12 <v_test+0xb6>
			  drive_ready();
 8006a22:	f7fe f8ff 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b07      	cmp	r3, #7
 8006a2a:	d8a0      	bhi.n	800696e <v_test+0x12>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <v_test+0xd8>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a55 	.word	0x08006a55
 8006a38:	08006a5b 	.word	0x08006a5b
 8006a3c:	0800696f 	.word	0x0800696f
 8006a40:	0800696f 	.word	0x0800696f
 8006a44:	0800696f 	.word	0x0800696f
 8006a48:	0800696f 	.word	0x0800696f
 8006a4c:	0800696f 	.word	0x0800696f
 8006a50:	0800696f 	.word	0x0800696f
				case 0:
					get_base();
 8006a54:	f004 fef4 	bl	800b840 <get_base>
					break;
 8006a58:	e01a      	b.n	8006a90 <v_test+0x134>
				case 1:
					//----V左45----
					printf("V 45 right .\n");
 8006a5a:	4812      	ldr	r0, [pc, #72]	; (8006aa4 <v_test+0x148>)
 8006a5c:	f005 fd8a 	bl	800c574 <puts>
					full_led_write(7);
 8006a60:	2007      	movs	r0, #7
 8006a62:	f004 ff7f 	bl	800b964 <full_led_write>
					half_sectionA();
 8006a66:	f7fe fc87 	bl	8005378 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	603b      	str	r3, [r7, #0]
 8006a6e:	e006      	b.n	8006a7e <v_test+0x122>
						v_R45();
 8006a70:	f7ff fba2 	bl	80061b8 <v_R45>
						v_R45();
 8006a74:	f7ff fba0 	bl	80061b8 <v_R45>
					for(int i = 0; i < 1; i++){
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	ddf5      	ble.n	8006a70 <v_test+0x114>
					}
					full_led_write(7);
 8006a84:	2007      	movs	r0, #7
 8006a86:	f004 ff6d 	bl	800b964 <full_led_write>
					half_sectionD();
 8006a8a:	f7fe fc8f 	bl	80053ac <half_sectionD>
					break;
 8006a8e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006a90:	e76d      	b.n	800696e <v_test+0x12>
 8006a92:	bf00      	nop
 8006a94:	0800d7c4 	.word	0x0800d7c4
 8006a98:	20000a68 	.word	0x20000a68
 8006a9c:	0800d6e0 	.word	0x0800d6e0
 8006aa0:	40020000 	.word	0x40020000
 8006aa4:	0800d7dc 	.word	0x0800d7dc

08006aa8 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0

	int mode = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	4874      	ldr	r0, [pc, #464]	; (8006c88 <simple_run+0x1e0>)
 8006ab6:	f005 fce9 	bl	800c48c <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	b2d8      	uxtb	r0, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	b2d9      	uxtb	r1, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f004 ff09 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 8006ade:	4b6b      	ldr	r3, [pc, #428]	; (8006c8c <simple_run+0x1e4>)
 8006ae0:	edd3 7a00 	vldr	s15, [r3]
 8006ae4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	db0f      	blt.n	8006b12 <simple_run+0x6a>
			  mode++;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3301      	adds	r3, #1
 8006af6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006af8:	4b64      	ldr	r3, [pc, #400]	; (8006c8c <simple_run+0x1e4>)
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b07      	cmp	r3, #7
 8006b04:	dd01      	ble.n	8006b0a <simple_run+0x62>
				  mode = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4860      	ldr	r0, [pc, #384]	; (8006c90 <simple_run+0x1e8>)
 8006b0e:	f005 fcbd 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006b12:	4b5e      	ldr	r3, [pc, #376]	; (8006c8c <simple_run+0x1e4>)
 8006b14:	edd3 7a00 	vldr	s15, [r3]
 8006b18:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b24:	d80f      	bhi.n	8006b46 <simple_run+0x9e>
			  mode--;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006b2c:	4b57      	ldr	r3, [pc, #348]	; (8006c8c <simple_run+0x1e4>)
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da01      	bge.n	8006b3e <simple_run+0x96>
				  mode = 7;
 8006b3a:	2307      	movs	r3, #7
 8006b3c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4853      	ldr	r0, [pc, #332]	; (8006c90 <simple_run+0x1e8>)
 8006b42:	f005 fca3 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b4a:	4852      	ldr	r0, [pc, #328]	; (8006c94 <simple_run+0x1ec>)
 8006b4c:	f7fb fb9a 	bl	8002284 <HAL_GPIO_ReadPin>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1b1      	bne.n	8006aba <simple_run+0x12>
			  HAL_Delay(50);
 8006b56:	2032      	movs	r0, #50	; 0x32
 8006b58:	f7fa fa38 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006b5c:	bf00      	nop
 8006b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b62:	484c      	ldr	r0, [pc, #304]	; (8006c94 <simple_run+0x1ec>)
 8006b64:	f7fb fb8e 	bl	8002284 <HAL_GPIO_ReadPin>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f7      	beq.n	8006b5e <simple_run+0xb6>
			  drive_ready();
 8006b6e:	f7fe f859 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b07      	cmp	r3, #7
 8006b76:	d8a0      	bhi.n	8006aba <simple_run+0x12>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <simple_run+0xd8>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006abb 	.word	0x08006abb
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006c39 	.word	0x08006c39
 8006b90:	08006abb 	.word	0x08006abb
 8006b94:	08006abb 	.word	0x08006abb
 8006b98:	08006abb 	.word	0x08006abb
 8006b9c:	08006abb 	.word	0x08006abb

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 8006ba0:	483d      	ldr	r0, [pc, #244]	; (8006c98 <simple_run+0x1f0>)
 8006ba2:	f005 fce7 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 8006ba6:	4a3d      	ldr	r2, [pc, #244]	; (8006c9c <simple_run+0x1f4>)
 8006ba8:	8813      	ldrh	r3, [r2, #0]
 8006baa:	f36f 1345 	bfc	r3, #5, #1
 8006bae:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	; (8006ca0 <simple_run+0x1f8>)
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <simple_run+0x1fc>)
 8006bb8:	2206      	movs	r2, #6
 8006bba:	701a      	strb	r2, [r3, #0]

					get_base();
 8006bbc:	f004 fe40 	bl	800b840 <get_base>

					searchA();
 8006bc0:	f002 ff36 	bl	8009a30 <searchA>
					HAL_Delay(500);
 8006bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bc8:	f7fa fa00 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006bcc:	4b35      	ldr	r3, [pc, #212]	; (8006ca4 <simple_run+0x1fc>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <simple_run+0x1fc>)
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	4b32      	ldr	r3, [pc, #200]	; (8006ca0 <simple_run+0x1f8>)
 8006bd8:	701a      	strb	r2, [r3, #0]
					searchA();
 8006bda:	f002 ff29 	bl	8009a30 <searchA>

					goal_x = GOAL_X;
 8006bde:	4b30      	ldr	r3, [pc, #192]	; (8006ca0 <simple_run+0x1f8>)
 8006be0:	2203      	movs	r2, #3
 8006be2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006be4:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <simple_run+0x1fc>)
 8006be6:	2206      	movs	r2, #6
 8006be8:	701a      	strb	r2, [r3, #0]

					break;
 8006bea:	e04b      	b.n	8006c84 <simple_run+0x1dc>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8006bec:	482e      	ldr	r0, [pc, #184]	; (8006ca8 <simple_run+0x200>)
 8006bee:	f005 fcc1 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <simple_run+0x1f4>)
 8006bf4:	8813      	ldrh	r3, [r2, #0]
 8006bf6:	f36f 1345 	bfc	r3, #5, #1
 8006bfa:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006bfc:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <simple_run+0x1f8>)
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006c02:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <simple_run+0x1fc>)
 8006c04:	2206      	movs	r2, #6
 8006c06:	701a      	strb	r2, [r3, #0]

					get_base();
 8006c08:	f004 fe1a 	bl	800b840 <get_base>

					searchB();
 8006c0c:	f002 ff92 	bl	8009b34 <searchB>
					HAL_Delay(500);
 8006c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c14:	f7fa f9da 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006c18:	4b22      	ldr	r3, [pc, #136]	; (8006ca4 <simple_run+0x1fc>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	4b21      	ldr	r3, [pc, #132]	; (8006ca4 <simple_run+0x1fc>)
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <simple_run+0x1f8>)
 8006c24:	701a      	strb	r2, [r3, #0]
					searchB();
 8006c26:	f002 ff85 	bl	8009b34 <searchB>

					goal_x = GOAL_X;
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <simple_run+0x1f8>)
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006c30:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <simple_run+0x1fc>)
 8006c32:	2206      	movs	r2, #6
 8006c34:	701a      	strb	r2, [r3, #0]

					break;
 8006c36:	e025      	b.n	8006c84 <simple_run+0x1dc>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8006c38:	481c      	ldr	r0, [pc, #112]	; (8006cac <simple_run+0x204>)
 8006c3a:	f005 fc9b 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8006c3e:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <simple_run+0x1f4>)
 8006c40:	8813      	ldrh	r3, [r2, #0]
 8006c42:	f043 0320 	orr.w	r3, r3, #32
 8006c46:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <simple_run+0x1f8>)
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <simple_run+0x1fc>)
 8006c50:	2206      	movs	r2, #6
 8006c52:	701a      	strb	r2, [r3, #0]

					get_base();
 8006c54:	f004 fdf4 	bl	800b840 <get_base>

					searchB();
 8006c58:	f002 ff6c 	bl	8009b34 <searchB>
					HAL_Delay(500);
 8006c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c60:	f7fa f9b4 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <simple_run+0x1fc>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <simple_run+0x1fc>)
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <simple_run+0x1f8>)
 8006c70:	701a      	strb	r2, [r3, #0]
					searchB();
 8006c72:	f002 ff5f 	bl	8009b34 <searchB>

					goal_x = GOAL_X;
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <simple_run+0x1f8>)
 8006c78:	2203      	movs	r2, #3
 8006c7a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <simple_run+0x1fc>)
 8006c7e:	2206      	movs	r2, #6
 8006c80:	701a      	strb	r2, [r3, #0]

					break;
 8006c82:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006c84:	e719      	b.n	8006aba <simple_run+0x12>
 8006c86:	bf00      	nop
 8006c88:	0800d7ec 	.word	0x0800d7ec
 8006c8c:	20000a68 	.word	0x20000a68
 8006c90:	0800d6e0 	.word	0x0800d6e0
 8006c94:	40020000 	.word	0x40020000
 8006c98:	0800d804 	.word	0x0800d804
 8006c9c:	20000ee4 	.word	0x20000ee4
 8006ca0:	20000b2d 	.word	0x20000b2d
 8006ca4:	20000ac8 	.word	0x20000ac8
 8006ca8:	0800d810 	.word	0x0800d810
 8006cac:	0800d828 	.word	0x0800d828

08006cb0 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0

	int mode = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	48b1      	ldr	r0, [pc, #708]	; (8006f84 <slalom_run+0x2d4>)
 8006cbe:	f005 fbe5 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	b2d8      	uxtb	r0, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	b2d9      	uxtb	r1, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f004 fe05 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 8006ce6:	4ba8      	ldr	r3, [pc, #672]	; (8006f88 <slalom_run+0x2d8>)
 8006ce8:	edd3 7a00 	vldr	s15, [r3]
 8006cec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	db0f      	blt.n	8006d1a <slalom_run+0x6a>
			  mode++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006d00:	4ba1      	ldr	r3, [pc, #644]	; (8006f88 <slalom_run+0x2d8>)
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	dd01      	ble.n	8006d12 <slalom_run+0x62>
				  mode = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	489d      	ldr	r0, [pc, #628]	; (8006f8c <slalom_run+0x2dc>)
 8006d16:	f005 fbb9 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006d1a:	4b9b      	ldr	r3, [pc, #620]	; (8006f88 <slalom_run+0x2d8>)
 8006d1c:	edd3 7a00 	vldr	s15, [r3]
 8006d20:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2c:	d80f      	bhi.n	8006d4e <slalom_run+0x9e>
			  mode--;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006d34:	4b94      	ldr	r3, [pc, #592]	; (8006f88 <slalom_run+0x2d8>)
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	da01      	bge.n	8006d46 <slalom_run+0x96>
				  mode = 7;
 8006d42:	2307      	movs	r3, #7
 8006d44:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4890      	ldr	r0, [pc, #576]	; (8006f8c <slalom_run+0x2dc>)
 8006d4a:	f005 fb9f 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d52:	488f      	ldr	r0, [pc, #572]	; (8006f90 <slalom_run+0x2e0>)
 8006d54:	f7fb fa96 	bl	8002284 <HAL_GPIO_ReadPin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1b1      	bne.n	8006cc2 <slalom_run+0x12>
			  HAL_Delay(50);
 8006d5e:	2032      	movs	r0, #50	; 0x32
 8006d60:	f7fa f934 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006d64:	bf00      	nop
 8006d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d6a:	4889      	ldr	r0, [pc, #548]	; (8006f90 <slalom_run+0x2e0>)
 8006d6c:	f7fb fa8a 	bl	8002284 <HAL_GPIO_ReadPin>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f7      	beq.n	8006d66 <slalom_run+0xb6>
			  drive_ready();
 8006d76:	f7fd ff55 	bl	8004c24 <drive_ready>

			  switch(mode){
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b07      	cmp	r3, #7
 8006d7e:	d8a0      	bhi.n	8006cc2 <slalom_run+0x12>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <slalom_run+0xd8>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006dfb 	.word	0x08006dfb
 8006d90:	08006e4d 	.word	0x08006e4d
 8006d94:	08006eb9 	.word	0x08006eb9
 8006d98:	08006f1f 	.word	0x08006f1f
 8006d9c:	08006fb9 	.word	0x08006fb9
 8006da0:	0800701d 	.word	0x0800701d
 8006da4:	08006cc3 	.word	0x08006cc3

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8006da8:	487a      	ldr	r0, [pc, #488]	; (8006f94 <slalom_run+0x2e4>)
 8006daa:	f005 fbe3 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 8006dae:	4a7a      	ldr	r2, [pc, #488]	; (8006f98 <slalom_run+0x2e8>)
 8006db0:	8813      	ldrh	r3, [r2, #0]
 8006db2:	f36f 1345 	bfc	r3, #5, #1
 8006db6:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006db8:	4b78      	ldr	r3, [pc, #480]	; (8006f9c <slalom_run+0x2ec>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006dbe:	4b78      	ldr	r3, [pc, #480]	; (8006fa0 <slalom_run+0x2f0>)
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006dc4:	4b77      	ldr	r3, [pc, #476]	; (8006fa4 <slalom_run+0x2f4>)
 8006dc6:	2206      	movs	r2, #6
 8006dc8:	701a      	strb	r2, [r3, #0]

					get_base();
 8006dca:	f004 fd39 	bl	800b840 <get_base>

					searchC();
 8006dce:	f002 ff3b 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8006dd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006dd6:	f7fa f8f9 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006dda:	4b72      	ldr	r3, [pc, #456]	; (8006fa4 <slalom_run+0x2f4>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	4b70      	ldr	r3, [pc, #448]	; (8006fa4 <slalom_run+0x2f4>)
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	4b6e      	ldr	r3, [pc, #440]	; (8006fa0 <slalom_run+0x2f0>)
 8006de6:	701a      	strb	r2, [r3, #0]
					searchC();
 8006de8:	f002 ff2e 	bl	8009c48 <searchC>

					goal_x = GOAL_X;
 8006dec:	4b6c      	ldr	r3, [pc, #432]	; (8006fa0 <slalom_run+0x2f0>)
 8006dee:	2203      	movs	r2, #3
 8006df0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006df2:	4b6c      	ldr	r3, [pc, #432]	; (8006fa4 <slalom_run+0x2f4>)
 8006df4:	2206      	movs	r2, #6
 8006df6:	701a      	strb	r2, [r3, #0]
					break;
 8006df8:	e13d      	b.n	8007076 <slalom_run+0x3c6>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8006dfa:	486b      	ldr	r0, [pc, #428]	; (8006fa8 <slalom_run+0x2f8>)
 8006dfc:	f005 fbba 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8006e00:	4a65      	ldr	r2, [pc, #404]	; (8006f98 <slalom_run+0x2e8>)
 8006e02:	8813      	ldrh	r3, [r2, #0]
 8006e04:	f043 0320 	orr.w	r3, r3, #32
 8006e08:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006e0a:	4b64      	ldr	r3, [pc, #400]	; (8006f9c <slalom_run+0x2ec>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006e10:	4b63      	ldr	r3, [pc, #396]	; (8006fa0 <slalom_run+0x2f0>)
 8006e12:	2203      	movs	r2, #3
 8006e14:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e16:	4b63      	ldr	r3, [pc, #396]	; (8006fa4 <slalom_run+0x2f4>)
 8006e18:	2206      	movs	r2, #6
 8006e1a:	701a      	strb	r2, [r3, #0]

					get_base();
 8006e1c:	f004 fd10 	bl	800b840 <get_base>

					searchC();
 8006e20:	f002 ff12 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8006e24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e28:	f7fa f8d0 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006e2c:	4b5d      	ldr	r3, [pc, #372]	; (8006fa4 <slalom_run+0x2f4>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	4b5c      	ldr	r3, [pc, #368]	; (8006fa4 <slalom_run+0x2f4>)
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	4b5a      	ldr	r3, [pc, #360]	; (8006fa0 <slalom_run+0x2f0>)
 8006e38:	701a      	strb	r2, [r3, #0]
					searchC();
 8006e3a:	f002 ff05 	bl	8009c48 <searchC>

					goal_x = GOAL_X;
 8006e3e:	4b58      	ldr	r3, [pc, #352]	; (8006fa0 <slalom_run+0x2f0>)
 8006e40:	2203      	movs	r2, #3
 8006e42:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e44:	4b57      	ldr	r3, [pc, #348]	; (8006fa4 <slalom_run+0x2f4>)
 8006e46:	2206      	movs	r2, #6
 8006e48:	701a      	strb	r2, [r3, #0]
					break;
 8006e4a:	e114      	b.n	8007076 <slalom_run+0x3c6>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006e4c:	4857      	ldr	r0, [pc, #348]	; (8006fac <slalom_run+0x2fc>)
 8006e4e:	f005 fb91 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8006e52:	4a51      	ldr	r2, [pc, #324]	; (8006f98 <slalom_run+0x2e8>)
 8006e54:	8813      	ldrh	r3, [r2, #0]
 8006e56:	f043 0320 	orr.w	r3, r3, #32
 8006e5a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006e5c:	4a4e      	ldr	r2, [pc, #312]	; (8006f98 <slalom_run+0x2e8>)
 8006e5e:	8813      	ldrh	r3, [r2, #0]
 8006e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e64:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006e66:	4b4d      	ldr	r3, [pc, #308]	; (8006f9c <slalom_run+0x2ec>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8006e6c:	4b50      	ldr	r3, [pc, #320]	; (8006fb0 <slalom_run+0x300>)
 8006e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e72:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8006e74:	4b4f      	ldr	r3, [pc, #316]	; (8006fb4 <slalom_run+0x304>)
 8006e76:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006e7a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006e7c:	4b48      	ldr	r3, [pc, #288]	; (8006fa0 <slalom_run+0x2f0>)
 8006e7e:	2203      	movs	r2, #3
 8006e80:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e82:	4b48      	ldr	r3, [pc, #288]	; (8006fa4 <slalom_run+0x2f4>)
 8006e84:	2206      	movs	r2, #6
 8006e86:	701a      	strb	r2, [r3, #0]

					get_base();
 8006e88:	f004 fcda 	bl	800b840 <get_base>

					searchD();
 8006e8c:	f003 f82e 	bl	8009eec <searchD>
					HAL_Delay(500);
 8006e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e94:	f7fa f89a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006e98:	4b42      	ldr	r3, [pc, #264]	; (8006fa4 <slalom_run+0x2f4>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	4b41      	ldr	r3, [pc, #260]	; (8006fa4 <slalom_run+0x2f4>)
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	4b3f      	ldr	r3, [pc, #252]	; (8006fa0 <slalom_run+0x2f0>)
 8006ea4:	701a      	strb	r2, [r3, #0]
					searchD();
 8006ea6:	f003 f821 	bl	8009eec <searchD>

					goal_x = GOAL_X;
 8006eaa:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <slalom_run+0x2f0>)
 8006eac:	2203      	movs	r2, #3
 8006eae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006eb0:	4b3c      	ldr	r3, [pc, #240]	; (8006fa4 <slalom_run+0x2f4>)
 8006eb2:	2206      	movs	r2, #6
 8006eb4:	701a      	strb	r2, [r3, #0]
					break;
 8006eb6:	e0de      	b.n	8007076 <slalom_run+0x3c6>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006eb8:	483c      	ldr	r0, [pc, #240]	; (8006fac <slalom_run+0x2fc>)
 8006eba:	f005 fb5b 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8006ebe:	4a36      	ldr	r2, [pc, #216]	; (8006f98 <slalom_run+0x2e8>)
 8006ec0:	8813      	ldrh	r3, [r2, #0]
 8006ec2:	f043 0320 	orr.w	r3, r3, #32
 8006ec6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006ec8:	4a33      	ldr	r2, [pc, #204]	; (8006f98 <slalom_run+0x2e8>)
 8006eca:	8813      	ldrh	r3, [r2, #0]
 8006ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ed0:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8006ed2:	4b37      	ldr	r3, [pc, #220]	; (8006fb0 <slalom_run+0x300>)
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8006eda:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <slalom_run+0x304>)
 8006edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ee0:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <slalom_run+0x2f0>)
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006ee8:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <slalom_run+0x2f4>)
 8006eea:	2206      	movs	r2, #6
 8006eec:	701a      	strb	r2, [r3, #0]

					get_base();
 8006eee:	f004 fca7 	bl	800b840 <get_base>

					searchD();
 8006ef2:	f002 fffb 	bl	8009eec <searchD>
					HAL_Delay(500);
 8006ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006efa:	f7fa f867 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006efe:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <slalom_run+0x2f4>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <slalom_run+0x2f4>)
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <slalom_run+0x2f0>)
 8006f0a:	701a      	strb	r2, [r3, #0]
					searchD();
 8006f0c:	f002 ffee 	bl	8009eec <searchD>

					goal_x = GOAL_X;
 8006f10:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <slalom_run+0x2f0>)
 8006f12:	2203      	movs	r2, #3
 8006f14:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f16:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <slalom_run+0x2f4>)
 8006f18:	2206      	movs	r2, #6
 8006f1a:	701a      	strb	r2, [r3, #0]
					break;
 8006f1c:	e0ab      	b.n	8007076 <slalom_run+0x3c6>

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006f1e:	4823      	ldr	r0, [pc, #140]	; (8006fac <slalom_run+0x2fc>)
 8006f20:	f005 fb28 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8006f24:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <slalom_run+0x2e8>)
 8006f26:	8813      	ldrh	r3, [r2, #0]
 8006f28:	f043 0320 	orr.w	r3, r3, #32
 8006f2c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006f2e:	4a1a      	ldr	r2, [pc, #104]	; (8006f98 <slalom_run+0x2e8>)
 8006f30:	8813      	ldrh	r3, [r2, #0]
 8006f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f36:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <slalom_run+0x300>)
 8006f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 8006f40:	4b1c      	ldr	r3, [pc, #112]	; (8006fb4 <slalom_run+0x304>)
 8006f42:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006f46:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <slalom_run+0x2f0>)
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <slalom_run+0x2f4>)
 8006f50:	2206      	movs	r2, #6
 8006f52:	701a      	strb	r2, [r3, #0]

					get_base();
 8006f54:	f004 fc74 	bl	800b840 <get_base>

					searchD();
 8006f58:	f002 ffc8 	bl	8009eec <searchD>
					HAL_Delay(500);
 8006f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f60:	f7fa f834 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <slalom_run+0x2f4>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <slalom_run+0x2f4>)
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <slalom_run+0x2f0>)
 8006f70:	701a      	strb	r2, [r3, #0]
					searchD();
 8006f72:	f002 ffbb 	bl	8009eec <searchD>

					goal_x = GOAL_X;
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <slalom_run+0x2f0>)
 8006f78:	2203      	movs	r2, #3
 8006f7a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <slalom_run+0x2f4>)
 8006f7e:	2206      	movs	r2, #6
 8006f80:	701a      	strb	r2, [r3, #0]
					break;
 8006f82:	e078      	b.n	8007076 <slalom_run+0x3c6>
 8006f84:	0800d844 	.word	0x0800d844
 8006f88:	20000a68 	.word	0x20000a68
 8006f8c:	0800d6e0 	.word	0x0800d6e0
 8006f90:	40020000 	.word	0x40020000
 8006f94:	0800d85c 	.word	0x0800d85c
 8006f98:	20000ee4 	.word	0x20000ee4
 8006f9c:	20000f04 	.word	0x20000f04
 8006fa0:	20000b2d 	.word	0x20000b2d
 8006fa4:	20000ac8 	.word	0x20000ac8
 8006fa8:	0800d870 	.word	0x0800d870
 8006fac:	0800d888 	.word	0x0800d888
 8006fb0:	200003d0 	.word	0x200003d0
 8006fb4:	20000ef8 	.word	0x20000ef8

				case 5:
					//----二次走行+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8006fb8:	482f      	ldr	r0, [pc, #188]	; (8007078 <slalom_run+0x3c8>)
 8006fba:	f005 fadb 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <slalom_run+0x3cc>)
 8006fc0:	8813      	ldrh	r3, [r2, #0]
 8006fc2:	f043 0320 	orr.w	r3, r3, #32
 8006fc6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <slalom_run+0x3cc>)
 8006fca:	8813      	ldrh	r3, [r2, #0]
 8006fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fd0:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006fd2:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <slalom_run+0x3d0>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <slalom_run+0x3d4>)
 8006fda:	2203      	movs	r2, #3
 8006fdc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006fde:	4b2a      	ldr	r3, [pc, #168]	; (8007088 <slalom_run+0x3d8>)
 8006fe0:	2206      	movs	r2, #6
 8006fe2:	701a      	strb	r2, [r3, #0]

					get_base();
 8006fe4:	f004 fc2c 	bl	800b840 <get_base>

					HAL_Delay(5000);
 8006fe8:	f241 3088 	movw	r0, #5000	; 0x1388
 8006fec:	f7f9 ffee 	bl	8000fcc <HAL_Delay>
					searchC();
 8006ff0:	f002 fe2a 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8006ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ff8:	f7f9 ffe8 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006ffc:	4b22      	ldr	r3, [pc, #136]	; (8007088 <slalom_run+0x3d8>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	4b21      	ldr	r3, [pc, #132]	; (8007088 <slalom_run+0x3d8>)
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	4b1f      	ldr	r3, [pc, #124]	; (8007084 <slalom_run+0x3d4>)
 8007008:	701a      	strb	r2, [r3, #0]
					searchC();
 800700a:	f002 fe1d 	bl	8009c48 <searchC>

					goal_x = GOAL_X;
 800700e:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <slalom_run+0x3d4>)
 8007010:	2203      	movs	r2, #3
 8007012:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007014:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <slalom_run+0x3d8>)
 8007016:	2206      	movs	r2, #6
 8007018:	701a      	strb	r2, [r3, #0]
					break;
 800701a:	e02c      	b.n	8007076 <slalom_run+0x3c6>

				case 6:
					//----二次走行+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800701c:	4816      	ldr	r0, [pc, #88]	; (8007078 <slalom_run+0x3c8>)
 800701e:	f005 faa9 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8007022:	4a16      	ldr	r2, [pc, #88]	; (800707c <slalom_run+0x3cc>)
 8007024:	8813      	ldrh	r3, [r2, #0]
 8007026:	f043 0320 	orr.w	r3, r3, #32
 800702a:	8013      	strh	r3, [r2, #0]
//					MF.FLAG.STRAIGHT = 1;
					start_flag = 0;
 800702c:	4b14      	ldr	r3, [pc, #80]	; (8007080 <slalom_run+0x3d0>)
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8007032:	4b14      	ldr	r3, [pc, #80]	; (8007084 <slalom_run+0x3d4>)
 8007034:	2203      	movs	r2, #3
 8007036:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <slalom_run+0x3d8>)
 800703a:	2206      	movs	r2, #6
 800703c:	701a      	strb	r2, [r3, #0]

					get_base();
 800703e:	f004 fbff 	bl	800b840 <get_base>

					HAL_Delay(5000);
 8007042:	f241 3088 	movw	r0, #5000	; 0x1388
 8007046:	f7f9 ffc1 	bl	8000fcc <HAL_Delay>
					searchC2();
 800704a:	f002 fea9 	bl	8009da0 <searchC2>
					HAL_Delay(500);
 800704e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007052:	f7f9 ffbb 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <slalom_run+0x3d8>)
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <slalom_run+0x3d8>)
 800705e:	781a      	ldrb	r2, [r3, #0]
 8007060:	4b08      	ldr	r3, [pc, #32]	; (8007084 <slalom_run+0x3d4>)
 8007062:	701a      	strb	r2, [r3, #0]
					searchC2();
 8007064:	f002 fe9c 	bl	8009da0 <searchC2>

					goal_x = GOAL_X;
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <slalom_run+0x3d4>)
 800706a:	2203      	movs	r2, #3
 800706c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <slalom_run+0x3d8>)
 8007070:	2206      	movs	r2, #6
 8007072:	701a      	strb	r2, [r3, #0]
					break;
 8007074:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007076:	e624      	b.n	8006cc2 <slalom_run+0x12>
 8007078:	0800d8a4 	.word	0x0800d8a4
 800707c:	20000ee4 	.word	0x20000ee4
 8007080:	20000f04 	.word	0x20000f04
 8007084:	20000b2d 	.word	0x20000b2d
 8007088:	20000ac8 	.word	0x20000ac8

0800708c <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0

	int mode = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	487a      	ldr	r0, [pc, #488]	; (8007284 <sample_course_run+0x1f8>)
 800709a:	f005 f9f7 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	b2d8      	uxtb	r0, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	b2d9      	uxtb	r1, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	f004 fc17 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 80070c2:	4b71      	ldr	r3, [pc, #452]	; (8007288 <sample_course_run+0x1fc>)
 80070c4:	edd3 7a00 	vldr	s15, [r3]
 80070c8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80070cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d4:	db0f      	blt.n	80070f6 <sample_course_run+0x6a>
			  mode++;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3301      	adds	r3, #1
 80070da:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80070dc:	4b6a      	ldr	r3, [pc, #424]	; (8007288 <sample_course_run+0x1fc>)
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b07      	cmp	r3, #7
 80070e8:	dd01      	ble.n	80070ee <sample_course_run+0x62>
				  mode = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4866      	ldr	r0, [pc, #408]	; (800728c <sample_course_run+0x200>)
 80070f2:	f005 f9cb 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80070f6:	4b64      	ldr	r3, [pc, #400]	; (8007288 <sample_course_run+0x1fc>)
 80070f8:	edd3 7a00 	vldr	s15, [r3]
 80070fc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007108:	d80f      	bhi.n	800712a <sample_course_run+0x9e>
			  mode--;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3b01      	subs	r3, #1
 800710e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007110:	4b5d      	ldr	r3, [pc, #372]	; (8007288 <sample_course_run+0x1fc>)
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	da01      	bge.n	8007122 <sample_course_run+0x96>
				  mode = 7;
 800711e:	2307      	movs	r3, #7
 8007120:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4859      	ldr	r0, [pc, #356]	; (800728c <sample_course_run+0x200>)
 8007126:	f005 f9b1 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800712a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800712e:	4858      	ldr	r0, [pc, #352]	; (8007290 <sample_course_run+0x204>)
 8007130:	f7fb f8a8 	bl	8002284 <HAL_GPIO_ReadPin>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1b1      	bne.n	800709e <sample_course_run+0x12>
			  HAL_Delay(50);
 800713a:	2032      	movs	r0, #50	; 0x32
 800713c:	f7f9 ff46 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007140:	bf00      	nop
 8007142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007146:	4852      	ldr	r0, [pc, #328]	; (8007290 <sample_course_run+0x204>)
 8007148:	f7fb f89c 	bl	8002284 <HAL_GPIO_ReadPin>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f7      	beq.n	8007142 <sample_course_run+0xb6>
			  drive_ready();
 8007152:	f7fd fd67 	bl	8004c24 <drive_ready>

			  switch(mode){
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b07      	cmp	r3, #7
 800715a:	d8a0      	bhi.n	800709e <sample_course_run+0x12>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <sample_course_run+0xd8>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007185 	.word	0x08007185
 8007168:	0800718b 	.word	0x0800718b
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071cf 	.word	0x080071cf
 8007174:	0800709f 	.word	0x0800709f
 8007178:	080071e1 	.word	0x080071e1
 800717c:	08007231 	.word	0x08007231
 8007180:	0800709f 	.word	0x0800709f
				case 0:
					get_base();
 8007184:	f004 fb5c 	bl	800b840 <get_base>
					break;
 8007188:	e07a      	b.n	8007280 <sample_course_run+0x1f4>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800718a:	f7fe f8f5 	bl	8005378 <half_sectionA>
					half_sectionD();
 800718e:	f7fe f90d 	bl	80053ac <half_sectionD>
					rotate_R90();
 8007192:	f7fe f9e5 	bl	8005560 <rotate_R90>
					half_sectionA();
 8007196:	f7fe f8ef 	bl	8005378 <half_sectionA>
					half_sectionD();
 800719a:	f7fe f907 	bl	80053ac <half_sectionD>
					rotate_R90();
 800719e:	f7fe f9df 	bl	8005560 <rotate_R90>
					half_sectionA();
 80071a2:	f7fe f8e9 	bl	8005378 <half_sectionA>
					half_sectionD();
 80071a6:	f7fe f901 	bl	80053ac <half_sectionD>
					break;
 80071aa:	e069      	b.n	8007280 <sample_course_run+0x1f4>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 80071ac:	f7fe f8e4 	bl	8005378 <half_sectionA>
					half_sectionD();
 80071b0:	f7fe f8fc 	bl	80053ac <half_sectionD>
					rotate_L90();
 80071b4:	f7fe faa4 	bl	8005700 <rotate_L90>
					half_sectionA();
 80071b8:	f7fe f8de 	bl	8005378 <half_sectionA>
					half_sectionD();
 80071bc:	f7fe f8f6 	bl	80053ac <half_sectionD>
					rotate_L90();
 80071c0:	f7fe fa9e 	bl	8005700 <rotate_L90>
					half_sectionA();
 80071c4:	f7fe f8d8 	bl	8005378 <half_sectionA>
					half_sectionD();
 80071c8:	f7fe f8f0 	bl	80053ac <half_sectionD>
					break;
 80071cc:	e058      	b.n	8007280 <sample_course_run+0x1f4>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 80071ce:	f7fe f8d3 	bl	8005378 <half_sectionA>
					slalom_R90();
 80071d2:	f7fe fc33 	bl	8005a3c <slalom_R90>
					slalom_R90();
 80071d6:	f7fe fc31 	bl	8005a3c <slalom_R90>
					half_sectionD();
 80071da:	f7fe f8e7 	bl	80053ac <half_sectionD>
					break;
 80071de:	e04f      	b.n	8007280 <sample_course_run+0x1f4>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 80071e0:	482c      	ldr	r0, [pc, #176]	; (8007294 <sample_course_run+0x208>)
 80071e2:	f005 f9c7 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 80071e6:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <sample_course_run+0x20c>)
 80071e8:	8813      	ldrh	r3, [r2, #0]
 80071ea:	f36f 1345 	bfc	r3, #5, #1
 80071ee:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 80071f0:	4b2a      	ldr	r3, [pc, #168]	; (800729c <sample_course_run+0x210>)
 80071f2:	2203      	movs	r2, #3
 80071f4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80071f6:	4b2a      	ldr	r3, [pc, #168]	; (80072a0 <sample_course_run+0x214>)
 80071f8:	2206      	movs	r2, #6
 80071fa:	701a      	strb	r2, [r3, #0]

					get_base();
 80071fc:	f004 fb20 	bl	800b840 <get_base>

					searchC();
 8007200:	f002 fd22 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8007204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007208:	f7f9 fee0 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800720c:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <sample_course_run+0x214>)
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	4b23      	ldr	r3, [pc, #140]	; (80072a0 <sample_course_run+0x214>)
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	4b21      	ldr	r3, [pc, #132]	; (800729c <sample_course_run+0x210>)
 8007218:	701a      	strb	r2, [r3, #0]
					searchE();
 800721a:	f003 f837 	bl	800a28c <searchE>

					searchC();
 800721e:	f002 fd13 	bl	8009c48 <searchC>
					goal_x = GOAL_X;
 8007222:	4b1e      	ldr	r3, [pc, #120]	; (800729c <sample_course_run+0x210>)
 8007224:	2203      	movs	r2, #3
 8007226:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <sample_course_run+0x214>)
 800722a:	2206      	movs	r2, #6
 800722c:	701a      	strb	r2, [r3, #0]

					break;
 800722e:	e027      	b.n	8007280 <sample_course_run+0x1f4>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8007230:	4818      	ldr	r0, [pc, #96]	; (8007294 <sample_course_run+0x208>)
 8007232:	f005 f99f 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 8007236:	4a18      	ldr	r2, [pc, #96]	; (8007298 <sample_course_run+0x20c>)
 8007238:	8813      	ldrh	r3, [r2, #0]
 800723a:	f36f 1345 	bfc	r3, #5, #1
 800723e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8007240:	4b16      	ldr	r3, [pc, #88]	; (800729c <sample_course_run+0x210>)
 8007242:	2207      	movs	r2, #7
 8007244:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007246:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <sample_course_run+0x214>)
 8007248:	2207      	movs	r2, #7
 800724a:	701a      	strb	r2, [r3, #0]

					get_base();
 800724c:	f004 faf8 	bl	800b840 <get_base>

					searchC();
 8007250:	f002 fcfa 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8007254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007258:	f7f9 feb8 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800725c:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <sample_course_run+0x214>)
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <sample_course_run+0x214>)
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <sample_course_run+0x210>)
 8007268:	701a      	strb	r2, [r3, #0]
					searchE();
 800726a:	f003 f80f 	bl	800a28c <searchE>

					searchC();
 800726e:	f002 fceb 	bl	8009c48 <searchC>
					goal_x = 7;
 8007272:	4b0a      	ldr	r3, [pc, #40]	; (800729c <sample_course_run+0x210>)
 8007274:	2207      	movs	r2, #7
 8007276:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007278:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <sample_course_run+0x214>)
 800727a:	2207      	movs	r2, #7
 800727c:	701a      	strb	r2, [r3, #0]

					break;
 800727e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007280:	e70d      	b.n	800709e <sample_course_run+0x12>
 8007282:	bf00      	nop
 8007284:	0800d8c0 	.word	0x0800d8c0
 8007288:	20000a68 	.word	0x20000a68
 800728c:	0800d6e0 	.word	0x0800d6e0
 8007290:	40020000 	.word	0x40020000
 8007294:	0800d8e0 	.word	0x0800d8e0
 8007298:	20000ee4 	.word	0x20000ee4
 800729c:	20000b2d 	.word	0x20000b2d
 80072a0:	20000ac8 	.word	0x20000ac8

080072a4 <perfect_run>:
//perfect_run
// 本番用走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0

	int mode = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4892      	ldr	r0, [pc, #584]	; (80074fc <perfect_run+0x258>)
 80072b2:	f005 f8eb 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	b2d8      	uxtb	r0, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	b2d9      	uxtb	r1, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	f004 fb0b 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 80072da:	4b89      	ldr	r3, [pc, #548]	; (8007500 <perfect_run+0x25c>)
 80072dc:	edd3 7a00 	vldr	s15, [r3]
 80072e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80072e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	db0f      	blt.n	800730e <perfect_run+0x6a>
			  mode++;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3301      	adds	r3, #1
 80072f2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80072f4:	4b82      	ldr	r3, [pc, #520]	; (8007500 <perfect_run+0x25c>)
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b07      	cmp	r3, #7
 8007300:	dd01      	ble.n	8007306 <perfect_run+0x62>
				  mode = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	487e      	ldr	r0, [pc, #504]	; (8007504 <perfect_run+0x260>)
 800730a:	f005 f8bf 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800730e:	4b7c      	ldr	r3, [pc, #496]	; (8007500 <perfect_run+0x25c>)
 8007310:	edd3 7a00 	vldr	s15, [r3]
 8007314:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800731c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007320:	d80f      	bhi.n	8007342 <perfect_run+0x9e>
			  mode--;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007328:	4b75      	ldr	r3, [pc, #468]	; (8007500 <perfect_run+0x25c>)
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	da01      	bge.n	800733a <perfect_run+0x96>
				  mode = 7;
 8007336:	2307      	movs	r3, #7
 8007338:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4871      	ldr	r0, [pc, #452]	; (8007504 <perfect_run+0x260>)
 800733e:	f005 f8a5 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007346:	4870      	ldr	r0, [pc, #448]	; (8007508 <perfect_run+0x264>)
 8007348:	f7fa ff9c 	bl	8002284 <HAL_GPIO_ReadPin>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1b1      	bne.n	80072b6 <perfect_run+0x12>
			  HAL_Delay(50);
 8007352:	2032      	movs	r0, #50	; 0x32
 8007354:	f7f9 fe3a 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007358:	bf00      	nop
 800735a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800735e:	486a      	ldr	r0, [pc, #424]	; (8007508 <perfect_run+0x264>)
 8007360:	f7fa ff90 	bl	8002284 <HAL_GPIO_ReadPin>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f7      	beq.n	800735a <perfect_run+0xb6>
			  switch(mode){
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b07      	cmp	r3, #7
 800736e:	d8a2      	bhi.n	80072b6 <perfect_run+0x12>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <perfect_run+0xd4>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	080072b7 	.word	0x080072b7
 800737c:	08007399 	.word	0x08007399
 8007380:	080073e5 	.word	0x080073e5
 8007384:	08007431 	.word	0x08007431
 8007388:	0800747d 	.word	0x0800747d
 800738c:	080072b7 	.word	0x080072b7
 8007390:	080072b7 	.word	0x080072b7
 8007394:	080074c9 	.word	0x080074c9
				case 0:
					break;

				case 1:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8007398:	485c      	ldr	r0, [pc, #368]	; (800750c <perfect_run+0x268>)
 800739a:	f005 f8eb 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 800739e:	4a5c      	ldr	r2, [pc, #368]	; (8007510 <perfect_run+0x26c>)
 80073a0:	8813      	ldrh	r3, [r2, #0]
 80073a2:	f36f 1345 	bfc	r3, #5, #1
 80073a6:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80073a8:	4b5a      	ldr	r3, [pc, #360]	; (8007514 <perfect_run+0x270>)
 80073aa:	2207      	movs	r2, #7
 80073ac:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80073ae:	4b5a      	ldr	r3, [pc, #360]	; (8007518 <perfect_run+0x274>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	701a      	strb	r2, [r3, #0]

					get_base();
 80073b4:	f004 fa44 	bl	800b840 <get_base>

					searchB();
 80073b8:	f002 fbbc 	bl	8009b34 <searchB>
					HAL_Delay(500);
 80073bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073c0:	f7f9 fe04 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80073c4:	4b54      	ldr	r3, [pc, #336]	; (8007518 <perfect_run+0x274>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	4b53      	ldr	r3, [pc, #332]	; (8007518 <perfect_run+0x274>)
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	4b51      	ldr	r3, [pc, #324]	; (8007514 <perfect_run+0x270>)
 80073d0:	701a      	strb	r2, [r3, #0]
					searchB();
 80073d2:	f002 fbaf 	bl	8009b34 <searchB>

					goal_x = 7;
 80073d6:	4b4f      	ldr	r3, [pc, #316]	; (8007514 <perfect_run+0x270>)
 80073d8:	2207      	movs	r2, #7
 80073da:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80073dc:	4b4e      	ldr	r3, [pc, #312]	; (8007518 <perfect_run+0x274>)
 80073de:	2207      	movs	r2, #7
 80073e0:	701a      	strb	r2, [r3, #0]

					break;
 80073e2:	e089      	b.n	80074f8 <perfect_run+0x254>

				case 2:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 80073e4:	484d      	ldr	r0, [pc, #308]	; (800751c <perfect_run+0x278>)
 80073e6:	f005 f8c5 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 80073ea:	4a49      	ldr	r2, [pc, #292]	; (8007510 <perfect_run+0x26c>)
 80073ec:	8813      	ldrh	r3, [r2, #0]
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80073f4:	4b47      	ldr	r3, [pc, #284]	; (8007514 <perfect_run+0x270>)
 80073f6:	2207      	movs	r2, #7
 80073f8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80073fa:	4b47      	ldr	r3, [pc, #284]	; (8007518 <perfect_run+0x274>)
 80073fc:	2207      	movs	r2, #7
 80073fe:	701a      	strb	r2, [r3, #0]

					get_base();
 8007400:	f004 fa1e 	bl	800b840 <get_base>

					searchB();
 8007404:	f002 fb96 	bl	8009b34 <searchB>
					HAL_Delay(500);
 8007408:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800740c:	f7f9 fdde 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007410:	4b41      	ldr	r3, [pc, #260]	; (8007518 <perfect_run+0x274>)
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	4b40      	ldr	r3, [pc, #256]	; (8007518 <perfect_run+0x274>)
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <perfect_run+0x270>)
 800741c:	701a      	strb	r2, [r3, #0]
					searchB();
 800741e:	f002 fb89 	bl	8009b34 <searchB>

					goal_x = 7;
 8007422:	4b3c      	ldr	r3, [pc, #240]	; (8007514 <perfect_run+0x270>)
 8007424:	2207      	movs	r2, #7
 8007426:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007428:	4b3b      	ldr	r3, [pc, #236]	; (8007518 <perfect_run+0x274>)
 800742a:	2207      	movs	r2, #7
 800742c:	701a      	strb	r2, [r3, #0]

					break;
 800742e:	e063      	b.n	80074f8 <perfect_run+0x254>

				case 3:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8007430:	483b      	ldr	r0, [pc, #236]	; (8007520 <perfect_run+0x27c>)
 8007432:	f005 f89f 	bl	800c574 <puts>

					MF.FLAG.SCND = 0;
 8007436:	4a36      	ldr	r2, [pc, #216]	; (8007510 <perfect_run+0x26c>)
 8007438:	8813      	ldrh	r3, [r2, #0]
 800743a:	f36f 1345 	bfc	r3, #5, #1
 800743e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8007440:	4b34      	ldr	r3, [pc, #208]	; (8007514 <perfect_run+0x270>)
 8007442:	2207      	movs	r2, #7
 8007444:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007446:	4b34      	ldr	r3, [pc, #208]	; (8007518 <perfect_run+0x274>)
 8007448:	2207      	movs	r2, #7
 800744a:	701a      	strb	r2, [r3, #0]

					get_base();
 800744c:	f004 f9f8 	bl	800b840 <get_base>

					searchC();
 8007450:	f002 fbfa 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8007454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007458:	f7f9 fdb8 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800745c:	4b2e      	ldr	r3, [pc, #184]	; (8007518 <perfect_run+0x274>)
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	4b2d      	ldr	r3, [pc, #180]	; (8007518 <perfect_run+0x274>)
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <perfect_run+0x270>)
 8007468:	701a      	strb	r2, [r3, #0]
					searchC();
 800746a:	f002 fbed 	bl	8009c48 <searchC>

					goal_x = 7;
 800746e:	4b29      	ldr	r3, [pc, #164]	; (8007514 <perfect_run+0x270>)
 8007470:	2207      	movs	r2, #7
 8007472:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007474:	4b28      	ldr	r3, [pc, #160]	; (8007518 <perfect_run+0x274>)
 8007476:	2207      	movs	r2, #7
 8007478:	701a      	strb	r2, [r3, #0]

					break;
 800747a:	e03d      	b.n	80074f8 <perfect_run+0x254>

				case 4:
					//---二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800747c:	4829      	ldr	r0, [pc, #164]	; (8007524 <perfect_run+0x280>)
 800747e:	f005 f879 	bl	800c574 <puts>

					MF.FLAG.SCND = 1;
 8007482:	4a23      	ldr	r2, [pc, #140]	; (8007510 <perfect_run+0x26c>)
 8007484:	8813      	ldrh	r3, [r2, #0]
 8007486:	f043 0320 	orr.w	r3, r3, #32
 800748a:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <perfect_run+0x270>)
 800748e:	2207      	movs	r2, #7
 8007490:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007492:	4b21      	ldr	r3, [pc, #132]	; (8007518 <perfect_run+0x274>)
 8007494:	2207      	movs	r2, #7
 8007496:	701a      	strb	r2, [r3, #0]

					get_base();
 8007498:	f004 f9d2 	bl	800b840 <get_base>

					searchC();
 800749c:	f002 fbd4 	bl	8009c48 <searchC>
					HAL_Delay(500);
 80074a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074a4:	f7f9 fd92 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80074a8:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <perfect_run+0x274>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <perfect_run+0x274>)
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <perfect_run+0x270>)
 80074b4:	701a      	strb	r2, [r3, #0]
					searchC();
 80074b6:	f002 fbc7 	bl	8009c48 <searchC>

					goal_x = 7;
 80074ba:	4b16      	ldr	r3, [pc, #88]	; (8007514 <perfect_run+0x270>)
 80074bc:	2207      	movs	r2, #7
 80074be:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80074c0:	4b15      	ldr	r3, [pc, #84]	; (8007518 <perfect_run+0x274>)
 80074c2:	2207      	movs	r2, #7
 80074c4:	701a      	strb	r2, [r3, #0]

					break;
 80074c6:	e017      	b.n	80074f8 <perfect_run+0x254>
					break;

				case 6:
					break;
				case 7:
			  		  for(int i=0; i<m_select; i++){
 80074c8:	2300      	movs	r3, #0
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	e00e      	b.n	80074ec <perfect_run+0x248>
			  			  buzzer(mario_select[i][0], mario_select[i][1]);
 80074ce:	4a16      	ldr	r2, [pc, #88]	; (8007528 <perfect_run+0x284>)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80074d6:	4a14      	ldr	r2, [pc, #80]	; (8007528 <perfect_run+0x284>)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	4619      	mov	r1, r3
 80074e2:	f002 fa19 	bl	8009918 <buzzer>
			  		  for(int i=0; i<m_select; i++){
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	3301      	adds	r3, #1
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	dded      	ble.n	80074ce <perfect_run+0x22a>
			  		  }
					perfect_slalom();
 80074f2:	f000 f81b 	bl	800752c <perfect_slalom>
					break;
 80074f6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80074f8:	e6dd      	b.n	80072b6 <perfect_run+0x12>
 80074fa:	bf00      	nop
 80074fc:	0800d8fc 	.word	0x0800d8fc
 8007500:	20000a68 	.word	0x20000a68
 8007504:	0800d6e0 	.word	0x0800d6e0
 8007508:	40020000 	.word	0x40020000
 800750c:	0800d810 	.word	0x0800d810
 8007510:	20000ee4 	.word	0x20000ee4
 8007514:	20000b2d 	.word	0x20000b2d
 8007518:	20000ac8 	.word	0x20000ac8
 800751c:	0800d828 	.word	0x0800d828
 8007520:	0800d85c 	.word	0x0800d85c
 8007524:	0800d870 	.word	0x0800d870
 8007528:	20000040 	.word	0x20000040

0800752c <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0

	int mode = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]
	printf("Perfect Slalom, Mode : %d\n", mode);
 8007536:	6979      	ldr	r1, [r7, #20]
 8007538:	48b4      	ldr	r0, [pc, #720]	; (800780c <perfect_slalom+0x2e0>)
 800753a:	f004 ffa7 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	b2d8      	uxtb	r0, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	b2d9      	uxtb	r1, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	f004 f9c7 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 8007562:	4bab      	ldr	r3, [pc, #684]	; (8007810 <perfect_slalom+0x2e4>)
 8007564:	edd3 7a00 	vldr	s15, [r3]
 8007568:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800756c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	db24      	blt.n	80075c0 <perfect_slalom+0x94>
			  mode++;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	3301      	adds	r3, #1
 800757a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800757c:	4ba4      	ldr	r3, [pc, #656]	; (8007810 <perfect_slalom+0x2e4>)
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b07      	cmp	r3, #7
 8007588:	dd01      	ble.n	800758e <perfect_slalom+0x62>
				  mode = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800758e:	6979      	ldr	r1, [r7, #20]
 8007590:	48a0      	ldr	r0, [pc, #640]	; (8007814 <perfect_slalom+0x2e8>)
 8007592:	f004 ff7b 	bl	800c48c <iprintf>
	  		  for(int i=0; i<m_select; i++){
 8007596:	2300      	movs	r3, #0
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	e00e      	b.n	80075ba <perfect_slalom+0x8e>
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
 800759c:	4a9e      	ldr	r2, [pc, #632]	; (8007818 <perfect_slalom+0x2ec>)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80075a4:	4a9c      	ldr	r2, [pc, #624]	; (8007818 <perfect_slalom+0x2ec>)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	4413      	add	r3, r2
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	f002 f9b2 	bl	8009918 <buzzer>
	  		  for(int i=0; i<m_select; i++){
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	3301      	adds	r3, #1
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	dded      	ble.n	800759c <perfect_slalom+0x70>
	  		  }
		  }
		  if(dist_r <= -20){
 80075c0:	4b93      	ldr	r3, [pc, #588]	; (8007810 <perfect_slalom+0x2e4>)
 80075c2:	edd3 7a00 	vldr	s15, [r3]
 80075c6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80075ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	d824      	bhi.n	800761e <perfect_slalom+0xf2>
			  mode--;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80075da:	4b8d      	ldr	r3, [pc, #564]	; (8007810 <perfect_slalom+0x2e4>)
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da01      	bge.n	80075ec <perfect_slalom+0xc0>
				  mode = 7;
 80075e8:	2307      	movs	r3, #7
 80075ea:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80075ec:	6979      	ldr	r1, [r7, #20]
 80075ee:	4889      	ldr	r0, [pc, #548]	; (8007814 <perfect_slalom+0x2e8>)
 80075f0:	f004 ff4c 	bl	800c48c <iprintf>
	  		  for(int i=0; i<m_select; i++){
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e00e      	b.n	8007618 <perfect_slalom+0xec>
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
 80075fa:	4a87      	ldr	r2, [pc, #540]	; (8007818 <perfect_slalom+0x2ec>)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007602:	4a85      	ldr	r2, [pc, #532]	; (8007818 <perfect_slalom+0x2ec>)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4619      	mov	r1, r3
 800760e:	f002 f983 	bl	8009918 <buzzer>
	  		  for(int i=0; i<m_select; i++){
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b01      	cmp	r3, #1
 800761c:	dded      	ble.n	80075fa <perfect_slalom+0xce>
	  		  }
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800761e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007622:	487e      	ldr	r0, [pc, #504]	; (800781c <perfect_slalom+0x2f0>)
 8007624:	f7fa fe2e 	bl	8002284 <HAL_GPIO_ReadPin>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d187      	bne.n	800753e <perfect_slalom+0x12>
			  HAL_Delay(50);
 800762e:	2032      	movs	r0, #50	; 0x32
 8007630:	f7f9 fccc 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007634:	bf00      	nop
 8007636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800763a:	4878      	ldr	r0, [pc, #480]	; (800781c <perfect_slalom+0x2f0>)
 800763c:	f7fa fe22 	bl	8002284 <HAL_GPIO_ReadPin>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0f7      	beq.n	8007636 <perfect_slalom+0x10a>
			  for(int i=0; i<m_ok; i++){
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
 800764a:	e00e      	b.n	800766a <perfect_slalom+0x13e>
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
 800764c:	4a74      	ldr	r2, [pc, #464]	; (8007820 <perfect_slalom+0x2f4>)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007654:	4a72      	ldr	r2, [pc, #456]	; (8007820 <perfect_slalom+0x2f4>)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4413      	add	r3, r2
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4619      	mov	r1, r3
 8007660:	f002 f95a 	bl	8009918 <buzzer>
			  for(int i=0; i<m_ok; i++){
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	3301      	adds	r3, #1
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b06      	cmp	r3, #6
 800766e:	dded      	ble.n	800764c <perfect_slalom+0x120>
	  		  }

			  drive_ready();
 8007670:	f7fd fad8 	bl	8004c24 <drive_ready>
	  		  for(int i=0; i<m_start; i++){
 8007674:	2300      	movs	r3, #0
 8007676:	607b      	str	r3, [r7, #4]
 8007678:	e011      	b.n	800769e <perfect_slalom+0x172>
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
 800767a:	4a6a      	ldr	r2, [pc, #424]	; (8007824 <perfect_slalom+0x2f8>)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007682:	4a68      	ldr	r2, [pc, #416]	; (8007824 <perfect_slalom+0x2f8>)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	4619      	mov	r1, r3
 800768e:	f002 f943 	bl	8009918 <buzzer>
	  			  full_led_write(1);
 8007692:	2001      	movs	r0, #1
 8007694:	f004 f966 	bl	800b964 <full_led_write>
	  		  for(int i=0; i<m_start; i++){
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3301      	adds	r3, #1
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b06      	cmp	r3, #6
 80076a2:	ddea      	ble.n	800767a <perfect_slalom+0x14e>
	  		  }

			  switch(mode){
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b07      	cmp	r3, #7
 80076a8:	f63f af49 	bhi.w	800753e <perfect_slalom+0x12>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <perfect_slalom+0x188>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	0800753f 	.word	0x0800753f
 80076b8:	080076d5 	.word	0x080076d5
 80076bc:	0800772b 	.word	0x0800772b
 80076c0:	0800779b 	.word	0x0800779b
 80076c4:	08007849 	.word	0x08007849
 80076c8:	080078b9 	.word	0x080078b9
 80076cc:	08007919 	.word	0x08007919
 80076d0:	08007989 	.word	0x08007989
				case 0:
					break;

				case 1:
					//----一次探索スラローム走行----
					printf("First Run.\n");
 80076d4:	4854      	ldr	r0, [pc, #336]	; (8007828 <perfect_slalom+0x2fc>)
 80076d6:	f004 ff4d 	bl	800c574 <puts>
					MF.FLAG.SCND = 0;
 80076da:	4a54      	ldr	r2, [pc, #336]	; (800782c <perfect_slalom+0x300>)
 80076dc:	8813      	ldrh	r3, [r2, #0]
 80076de:	f36f 1345 	bfc	r3, #5, #1
 80076e2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 80076e4:	4a51      	ldr	r2, [pc, #324]	; (800782c <perfect_slalom+0x300>)
 80076e6:	8813      	ldrh	r3, [r2, #0]
 80076e8:	f36f 2349 	bfc	r3, #9, #1
 80076ec:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 80076ee:	4b50      	ldr	r3, [pc, #320]	; (8007830 <perfect_slalom+0x304>)
 80076f0:	2207      	movs	r2, #7
 80076f2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80076f4:	4b4f      	ldr	r3, [pc, #316]	; (8007834 <perfect_slalom+0x308>)
 80076f6:	2207      	movs	r2, #7
 80076f8:	701a      	strb	r2, [r3, #0]

					get_base();
 80076fa:	f004 f8a1 	bl	800b840 <get_base>

					searchC();
 80076fe:	f002 faa3 	bl	8009c48 <searchC>
					HAL_Delay(500);
 8007702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007706:	f7f9 fc61 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800770a:	4b4a      	ldr	r3, [pc, #296]	; (8007834 <perfect_slalom+0x308>)
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	4b48      	ldr	r3, [pc, #288]	; (8007834 <perfect_slalom+0x308>)
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	4b46      	ldr	r3, [pc, #280]	; (8007830 <perfect_slalom+0x304>)
 8007716:	701a      	strb	r2, [r3, #0]
					searchC();
 8007718:	f002 fa96 	bl	8009c48 <searchC>

					goal_x = 7;
 800771c:	4b44      	ldr	r3, [pc, #272]	; (8007830 <perfect_slalom+0x304>)
 800771e:	2207      	movs	r2, #7
 8007720:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007722:	4b44      	ldr	r3, [pc, #272]	; (8007834 <perfect_slalom+0x308>)
 8007724:	2207      	movs	r2, #7
 8007726:	701a      	strb	r2, [r3, #0]
					break;
 8007728:	e166      	b.n	80079f8 <perfect_slalom+0x4cc>

				case 2:
					//----二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800772a:	4843      	ldr	r0, [pc, #268]	; (8007838 <perfect_slalom+0x30c>)
 800772c:	f004 ff22 	bl	800c574 <puts>
					MF.FLAG.SCND = 1;
 8007730:	4a3e      	ldr	r2, [pc, #248]	; (800782c <perfect_slalom+0x300>)
 8007732:	8813      	ldrh	r3, [r2, #0]
 8007734:	f043 0320 	orr.w	r3, r3, #32
 8007738:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800773a:	4a3c      	ldr	r2, [pc, #240]	; (800782c <perfect_slalom+0x300>)
 800773c:	8813      	ldrh	r3, [r2, #0]
 800773e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007742:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8007744:	4a39      	ldr	r2, [pc, #228]	; (800782c <perfect_slalom+0x300>)
 8007746:	8813      	ldrh	r3, [r2, #0]
 8007748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800774c:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800774e:	4b3b      	ldr	r3, [pc, #236]	; (800783c <perfect_slalom+0x310>)
 8007750:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007754:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8007756:	4b3a      	ldr	r3, [pc, #232]	; (8007840 <perfect_slalom+0x314>)
 8007758:	f44f 7216 	mov.w	r2, #600	; 0x258
 800775c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800775e:	4b34      	ldr	r3, [pc, #208]	; (8007830 <perfect_slalom+0x304>)
 8007760:	2207      	movs	r2, #7
 8007762:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007764:	4b33      	ldr	r3, [pc, #204]	; (8007834 <perfect_slalom+0x308>)
 8007766:	2207      	movs	r2, #7
 8007768:	701a      	strb	r2, [r3, #0]

					get_base();
 800776a:	f004 f869 	bl	800b840 <get_base>

					searchD();
 800776e:	f002 fbbd 	bl	8009eec <searchD>
					HAL_Delay(500);
 8007772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007776:	f7f9 fc29 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800777a:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <perfect_slalom+0x308>)
 800777c:	2200      	movs	r2, #0
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <perfect_slalom+0x308>)
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <perfect_slalom+0x304>)
 8007786:	701a      	strb	r2, [r3, #0]
					searchD();
 8007788:	f002 fbb0 	bl	8009eec <searchD>

					goal_x = 7;
 800778c:	4b28      	ldr	r3, [pc, #160]	; (8007830 <perfect_slalom+0x304>)
 800778e:	2207      	movs	r2, #7
 8007790:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007792:	4b28      	ldr	r3, [pc, #160]	; (8007834 <perfect_slalom+0x308>)
 8007794:	2207      	movs	r2, #7
 8007796:	701a      	strb	r2, [r3, #0]
					break;
 8007798:	e12e      	b.n	80079f8 <perfect_slalom+0x4cc>

				case 3:
					//----二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800779a:	482a      	ldr	r0, [pc, #168]	; (8007844 <perfect_slalom+0x318>)
 800779c:	f004 feea 	bl	800c574 <puts>
					MF.FLAG.SCND = 1;
 80077a0:	4a22      	ldr	r2, [pc, #136]	; (800782c <perfect_slalom+0x300>)
 80077a2:	8813      	ldrh	r3, [r2, #0]
 80077a4:	f043 0320 	orr.w	r3, r3, #32
 80077a8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80077aa:	4a20      	ldr	r2, [pc, #128]	; (800782c <perfect_slalom+0x300>)
 80077ac:	8813      	ldrh	r3, [r2, #0]
 80077ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80077b4:	4a1d      	ldr	r2, [pc, #116]	; (800782c <perfect_slalom+0x300>)
 80077b6:	8813      	ldrh	r3, [r2, #0]
 80077b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077bc:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80077be:	4b1f      	ldr	r3, [pc, #124]	; (800783c <perfect_slalom+0x310>)
 80077c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80077c4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <perfect_slalom+0x314>)
 80077c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077cc:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80077ce:	4b18      	ldr	r3, [pc, #96]	; (8007830 <perfect_slalom+0x304>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <perfect_slalom+0x308>)
 80077d6:	2207      	movs	r2, #7
 80077d8:	701a      	strb	r2, [r3, #0]

					get_base();
 80077da:	f004 f831 	bl	800b840 <get_base>

					searchD();
 80077de:	f002 fb85 	bl	8009eec <searchD>
					HAL_Delay(500);
 80077e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077e6:	f7f9 fbf1 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80077ea:	4b12      	ldr	r3, [pc, #72]	; (8007834 <perfect_slalom+0x308>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
 80077f0:	4b10      	ldr	r3, [pc, #64]	; (8007834 <perfect_slalom+0x308>)
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <perfect_slalom+0x304>)
 80077f6:	701a      	strb	r2, [r3, #0]
					searchD();
 80077f8:	f002 fb78 	bl	8009eec <searchD>

					goal_x = 7;
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <perfect_slalom+0x304>)
 80077fe:	2207      	movs	r2, #7
 8007800:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <perfect_slalom+0x308>)
 8007804:	2207      	movs	r2, #7
 8007806:	701a      	strb	r2, [r3, #0]
					break;
 8007808:	e0f6      	b.n	80079f8 <perfect_slalom+0x4cc>
 800780a:	bf00      	nop
 800780c:	0800d914 	.word	0x0800d914
 8007810:	20000a68 	.word	0x20000a68
 8007814:	0800d6e0 	.word	0x0800d6e0
 8007818:	20000040 	.word	0x20000040
 800781c:	40020000 	.word	0x40020000
 8007820:	20000050 	.word	0x20000050
 8007824:	20000008 	.word	0x20000008
 8007828:	0800d804 	.word	0x0800d804
 800782c:	20000ee4 	.word	0x20000ee4
 8007830:	20000b2d 	.word	0x20000b2d
 8007834:	20000ac8 	.word	0x20000ac8
 8007838:	0800d810 	.word	0x0800d810
 800783c:	200003d0 	.word	0x200003d0
 8007840:	20000ef8 	.word	0x20000ef8
 8007844:	0800d828 	.word	0x0800d828

				case 4:
					//----二次探索スラローム+既知区間加速走行 speed3----
					printf("First Run. (Slalom)\n");
 8007848:	486c      	ldr	r0, [pc, #432]	; (80079fc <perfect_slalom+0x4d0>)
 800784a:	f004 fe93 	bl	800c574 <puts>
					MF.FLAG.SCND = 1;
 800784e:	4a6c      	ldr	r2, [pc, #432]	; (8007a00 <perfect_slalom+0x4d4>)
 8007850:	8813      	ldrh	r3, [r2, #0]
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007858:	4a69      	ldr	r2, [pc, #420]	; (8007a00 <perfect_slalom+0x4d4>)
 800785a:	8813      	ldrh	r3, [r2, #0]
 800785c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007860:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8007862:	4a67      	ldr	r2, [pc, #412]	; (8007a00 <perfect_slalom+0x4d4>)
 8007864:	8813      	ldrh	r3, [r2, #0]
 8007866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800786a:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800786c:	4b65      	ldr	r3, [pc, #404]	; (8007a04 <perfect_slalom+0x4d8>)
 800786e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007872:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8007874:	4b64      	ldr	r3, [pc, #400]	; (8007a08 <perfect_slalom+0x4dc>)
 8007876:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800787a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800787c:	4b63      	ldr	r3, [pc, #396]	; (8007a0c <perfect_slalom+0x4e0>)
 800787e:	2207      	movs	r2, #7
 8007880:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007882:	4b63      	ldr	r3, [pc, #396]	; (8007a10 <perfect_slalom+0x4e4>)
 8007884:	2207      	movs	r2, #7
 8007886:	701a      	strb	r2, [r3, #0]

					get_base();
 8007888:	f003 ffda 	bl	800b840 <get_base>

					searchD();
 800788c:	f002 fb2e 	bl	8009eec <searchD>
					HAL_Delay(500);
 8007890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007894:	f7f9 fb9a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007898:	4b5d      	ldr	r3, [pc, #372]	; (8007a10 <perfect_slalom+0x4e4>)
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	4b5c      	ldr	r3, [pc, #368]	; (8007a10 <perfect_slalom+0x4e4>)
 80078a0:	781a      	ldrb	r2, [r3, #0]
 80078a2:	4b5a      	ldr	r3, [pc, #360]	; (8007a0c <perfect_slalom+0x4e0>)
 80078a4:	701a      	strb	r2, [r3, #0]
					searchD();
 80078a6:	f002 fb21 	bl	8009eec <searchD>

					goal_x = 7;
 80078aa:	4b58      	ldr	r3, [pc, #352]	; (8007a0c <perfect_slalom+0x4e0>)
 80078ac:	2207      	movs	r2, #7
 80078ae:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80078b0:	4b57      	ldr	r3, [pc, #348]	; (8007a10 <perfect_slalom+0x4e4>)
 80078b2:	2207      	movs	r2, #7
 80078b4:	701a      	strb	r2, [r3, #0]
					break;
 80078b6:	e09f      	b.n	80079f8 <perfect_slalom+0x4cc>

				case 5:
					//----二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 80078b8:	4856      	ldr	r0, [pc, #344]	; (8007a14 <perfect_slalom+0x4e8>)
 80078ba:	f004 fe5b 	bl	800c574 <puts>
					MF.FLAG.SCND = 1;
 80078be:	4a50      	ldr	r2, [pc, #320]	; (8007a00 <perfect_slalom+0x4d4>)
 80078c0:	8813      	ldrh	r3, [r2, #0]
 80078c2:	f043 0320 	orr.w	r3, r3, #32
 80078c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 80078c8:	4a4d      	ldr	r2, [pc, #308]	; (8007a00 <perfect_slalom+0x4d4>)
 80078ca:	8813      	ldrh	r3, [r2, #0]
 80078cc:	f36f 2349 	bfc	r3, #9, #1
 80078d0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80078d2:	4a4b      	ldr	r2, [pc, #300]	; (8007a00 <perfect_slalom+0x4d4>)
 80078d4:	8813      	ldrh	r3, [r2, #0]
 80078d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078da:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 80078dc:	4b4b      	ldr	r3, [pc, #300]	; (8007a0c <perfect_slalom+0x4e0>)
 80078de:	2207      	movs	r2, #7
 80078e0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80078e2:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <perfect_slalom+0x4e4>)
 80078e4:	2207      	movs	r2, #7
 80078e6:	701a      	strb	r2, [r3, #0]

					get_base();
 80078e8:	f003 ffaa 	bl	800b840 <get_base>

					searchC2();
 80078ec:	f002 fa58 	bl	8009da0 <searchC2>
					HAL_Delay(500);
 80078f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078f4:	f7f9 fb6a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80078f8:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <perfect_slalom+0x4e4>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	4b44      	ldr	r3, [pc, #272]	; (8007a10 <perfect_slalom+0x4e4>)
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	4b42      	ldr	r3, [pc, #264]	; (8007a0c <perfect_slalom+0x4e0>)
 8007904:	701a      	strb	r2, [r3, #0]
					searchC2();
 8007906:	f002 fa4b 	bl	8009da0 <searchC2>

					goal_x = 7;
 800790a:	4b40      	ldr	r3, [pc, #256]	; (8007a0c <perfect_slalom+0x4e0>)
 800790c:	2207      	movs	r2, #7
 800790e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007910:	4b3f      	ldr	r3, [pc, #252]	; (8007a10 <perfect_slalom+0x4e4>)
 8007912:	2207      	movs	r2, #7
 8007914:	701a      	strb	r2, [r3, #0]
					break;
 8007916:	e06f      	b.n	80079f8 <perfect_slalom+0x4cc>

				case 6:
					//----二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 8007918:	483e      	ldr	r0, [pc, #248]	; (8007a14 <perfect_slalom+0x4e8>)
 800791a:	f004 fe2b 	bl	800c574 <puts>
					MF.FLAG.SCND = 1;
 800791e:	4a38      	ldr	r2, [pc, #224]	; (8007a00 <perfect_slalom+0x4d4>)
 8007920:	8813      	ldrh	r3, [r2, #0]
 8007922:	f043 0320 	orr.w	r3, r3, #32
 8007926:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007928:	4a35      	ldr	r2, [pc, #212]	; (8007a00 <perfect_slalom+0x4d4>)
 800792a:	8813      	ldrh	r3, [r2, #0]
 800792c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007930:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8007932:	4a33      	ldr	r2, [pc, #204]	; (8007a00 <perfect_slalom+0x4d4>)
 8007934:	8813      	ldrh	r3, [r2, #0]
 8007936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800793a:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800793c:	4b31      	ldr	r3, [pc, #196]	; (8007a04 <perfect_slalom+0x4d8>)
 800793e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007942:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8007944:	4b30      	ldr	r3, [pc, #192]	; (8007a08 <perfect_slalom+0x4dc>)
 8007946:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800794a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800794c:	4b2f      	ldr	r3, [pc, #188]	; (8007a0c <perfect_slalom+0x4e0>)
 800794e:	2207      	movs	r2, #7
 8007950:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007952:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <perfect_slalom+0x4e4>)
 8007954:	2207      	movs	r2, #7
 8007956:	701a      	strb	r2, [r3, #0]

					get_base();
 8007958:	f003 ff72 	bl	800b840 <get_base>

					searchD2();
 800795c:	f002 fbae 	bl	800a0bc <searchD2>
					HAL_Delay(500);
 8007960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007964:	f7f9 fb32 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007968:	4b29      	ldr	r3, [pc, #164]	; (8007a10 <perfect_slalom+0x4e4>)
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	4b28      	ldr	r3, [pc, #160]	; (8007a10 <perfect_slalom+0x4e4>)
 8007970:	781a      	ldrb	r2, [r3, #0]
 8007972:	4b26      	ldr	r3, [pc, #152]	; (8007a0c <perfect_slalom+0x4e0>)
 8007974:	701a      	strb	r2, [r3, #0]
					searchD2();
 8007976:	f002 fba1 	bl	800a0bc <searchD2>

					goal_x = 7;
 800797a:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <perfect_slalom+0x4e0>)
 800797c:	2207      	movs	r2, #7
 800797e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007980:	4b23      	ldr	r3, [pc, #140]	; (8007a10 <perfect_slalom+0x4e4>)
 8007982:	2207      	movs	r2, #7
 8007984:	701a      	strb	r2, [r3, #0]
					break;
 8007986:	e037      	b.n	80079f8 <perfect_slalom+0x4cc>

				case 7:
					//----二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8007988:	4822      	ldr	r0, [pc, #136]	; (8007a14 <perfect_slalom+0x4e8>)
 800798a:	f004 fdf3 	bl	800c574 <puts>
					MF.FLAG.SCND = 1;
 800798e:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <perfect_slalom+0x4d4>)
 8007990:	8813      	ldrh	r3, [r2, #0]
 8007992:	f043 0320 	orr.w	r3, r3, #32
 8007996:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007998:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <perfect_slalom+0x4d4>)
 800799a:	8813      	ldrh	r3, [r2, #0]
 800799c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80079a2:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <perfect_slalom+0x4d4>)
 80079a4:	8813      	ldrh	r3, [r2, #0]
 80079a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079aa:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80079ac:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <perfect_slalom+0x4d8>)
 80079ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80079b2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 80079b4:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <perfect_slalom+0x4dc>)
 80079b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80079ba:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80079bc:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <perfect_slalom+0x4e0>)
 80079be:	2207      	movs	r2, #7
 80079c0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <perfect_slalom+0x4e4>)
 80079c4:	2207      	movs	r2, #7
 80079c6:	701a      	strb	r2, [r3, #0]

					get_base();
 80079c8:	f003 ff3a 	bl	800b840 <get_base>

					searchD2();
 80079cc:	f002 fb76 	bl	800a0bc <searchD2>
					HAL_Delay(500);
 80079d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079d4:	f7f9 fafa 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <perfect_slalom+0x4e4>)
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <perfect_slalom+0x4e4>)
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <perfect_slalom+0x4e0>)
 80079e4:	701a      	strb	r2, [r3, #0]
					searchD2();
 80079e6:	f002 fb69 	bl	800a0bc <searchD2>

					goal_x = 7;
 80079ea:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <perfect_slalom+0x4e0>)
 80079ec:	2207      	movs	r2, #7
 80079ee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <perfect_slalom+0x4e4>)
 80079f2:	2207      	movs	r2, #7
 80079f4:	701a      	strb	r2, [r3, #0]
					break;
 80079f6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80079f8:	e5a1      	b.n	800753e <perfect_slalom+0x12>
 80079fa:	bf00      	nop
 80079fc:	0800d85c 	.word	0x0800d85c
 8007a00:	20000ee4 	.word	0x20000ee4
 8007a04:	200003d0 	.word	0x200003d0
 8007a08:	20000ef8 	.word	0x20000ef8
 8007a0c:	20000b2d 	.word	0x20000b2d
 8007a10:	20000ac8 	.word	0x20000ac8
 8007a14:	0800d870 	.word	0x0800d870

08007a18 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 8007a26:	230b      	movs	r3, #11
 8007a28:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 8007a32:	f7fa f80d 	bl	8001a50 <HAL_FLASH_Unlock>
 8007a36:	4603      	mov	r3, r0
 8007a38:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 8007a3a:	7ffb      	ldrb	r3, [r7, #31]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <eeprom_enable_write+0x2c>
 8007a40:	7ffb      	ldrb	r3, [r7, #31]
 8007a42:	e009      	b.n	8007a58 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8007a44:	1d3a      	adds	r2, r7, #4
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fa f95d 	bl	8001d0c <HAL_FLASHEx_Erase>
 8007a52:	4603      	mov	r3, r0
 8007a54:	77fb      	strb	r3, [r7, #31]
  return status;
 8007a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 8007a64:	f7fa f816 	bl	8001a94 <HAL_FLASH_Lock>
 8007a68:	4603      	mov	r3, r0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 8007a6e:	b590      	push	{r4, r7, lr}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8007a80:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	f04f 0400 	mov.w	r4, #0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4623      	mov	r3, r4
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	2001      	movs	r0, #1
 8007a96:	f7f9 ff87 	bl	80019a8 <HAL_FLASH_Program>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd90      	pop	{r4, r7, pc}

08007aa8 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8007aba:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	81fb      	strh	r3, [r7, #14]
  return val;
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 8007ade:	2064      	movs	r0, #100	; 0x64
 8007ae0:	f7f9 fa74 	bl	8000fcc <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 8007ae4:	2075      	movs	r0, #117	; 0x75
 8007ae6:	f000 f82f 	bl	8007b48 <read_byte>
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	4619      	mov	r1, r3
 8007af2:	4813      	ldr	r0, [pc, #76]	; (8007b40 <gyro_init+0x68>)
 8007af4:	f004 fcca 	bl	800c48c <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b98      	cmp	r3, #152	; 0x98
 8007afc:	d003      	beq.n	8007b06 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 8007afe:	4811      	ldr	r0, [pc, #68]	; (8007b44 <gyro_init+0x6c>)
 8007b00:	f004 fcc4 	bl	800c48c <iprintf>
 8007b04:	e7fb      	b.n	8007afe <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 8007b06:	2032      	movs	r0, #50	; 0x32
 8007b08:	f7f9 fa60 	bl	8000fcc <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	206b      	movs	r0, #107	; 0x6b
 8007b10:	f000 f846 	bl	8007ba0 <write_byte>

  HAL_Delay(50);
 8007b14:	2032      	movs	r0, #50	; 0x32
 8007b16:	f7f9 fa59 	bl	8000fcc <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	201a      	movs	r0, #26
 8007b1e:	f000 f83f 	bl	8007ba0 <write_byte>

  HAL_Delay(50);
 8007b22:	2032      	movs	r0, #50	; 0x32
 8007b24:	f7f9 fa52 	bl	8000fcc <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 8007b28:	2118      	movs	r1, #24
 8007b2a:	201b      	movs	r0, #27
 8007b2c:	f000 f838 	bl	8007ba0 <write_byte>

  HAL_Delay(50);
 8007b30:	2032      	movs	r0, #50	; 0x32
 8007b32:	f7f9 fa4b 	bl	8000fcc <HAL_Delay>
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	0800d930 	.word	0x0800d930
 8007b44:	0800d938 	.word	0x0800d938

08007b48 <read_byte>:


uint8_t read_byte(uint8_t reg){
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 8007b52:	2200      	movs	r2, #0
 8007b54:	2104      	movs	r1, #4
 8007b56:	4810      	ldr	r0, [pc, #64]	; (8007b98 <read_byte+0x50>)
 8007b58:	f7fa fbac 	bl	80022b4 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8007b66:	f107 010f 	add.w	r1, r7, #15
 8007b6a:	2364      	movs	r3, #100	; 0x64
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	480b      	ldr	r0, [pc, #44]	; (8007b9c <read_byte+0x54>)
 8007b70:	f7fb f828 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 8007b74:	f107 010e 	add.w	r1, r7, #14
 8007b78:	2364      	movs	r3, #100	; 0x64
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4807      	ldr	r0, [pc, #28]	; (8007b9c <read_byte+0x54>)
 8007b7e:	f7fb f955 	bl	8002e2c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 8007b82:	2201      	movs	r2, #1
 8007b84:	2104      	movs	r1, #4
 8007b86:	4804      	ldr	r0, [pc, #16]	; (8007b98 <read_byte+0x50>)
 8007b88:	f7fa fb94 	bl	80022b4 <HAL_GPIO_WritePin>
  return val;
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40020c00 	.word	0x40020c00
 8007b9c:	200001c4 	.word	0x200001c4

08007ba0 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	460a      	mov	r2, r1
 8007baa:	71fb      	strb	r3, [r7, #7]
 8007bac:	4613      	mov	r3, r2
 8007bae:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2104      	movs	r1, #4
 8007bbe:	480c      	ldr	r0, [pc, #48]	; (8007bf0 <write_byte+0x50>)
 8007bc0:	f7fa fb78 	bl	80022b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8007bc4:	f107 010f 	add.w	r1, r7, #15
 8007bc8:	2364      	movs	r3, #100	; 0x64
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4809      	ldr	r0, [pc, #36]	; (8007bf4 <write_byte+0x54>)
 8007bce:	f7fa fff9 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 8007bd2:	1db9      	adds	r1, r7, #6
 8007bd4:	2364      	movs	r3, #100	; 0x64
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4806      	ldr	r0, [pc, #24]	; (8007bf4 <write_byte+0x54>)
 8007bda:	f7fa fff3 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 8007bde:	2201      	movs	r2, #1
 8007be0:	2104      	movs	r1, #4
 8007be2:	4803      	ldr	r0, [pc, #12]	; (8007bf0 <write_byte+0x50>)
 8007be4:	f7fa fb66 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40020c00 	.word	0x40020c00
 8007bf4:	200001c4 	.word	0x200001c4

08007bf8 <accel_read_x>:


float accel_read_x(void){
 8007bf8:	b590      	push	{r4, r7, lr}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 8007bfe:	203b      	movs	r0, #59	; 0x3b
 8007c00:	f7ff ffa2 	bl	8007b48 <read_byte>
 8007c04:	4603      	mov	r3, r0
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	b21c      	sxth	r4, r3
 8007c0a:	203c      	movs	r0, #60	; 0x3c
 8007c0c:	f7ff ff9c 	bl	8007b48 <read_byte>
 8007c10:	4603      	mov	r3, r0
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	4323      	orrs	r3, r4
 8007c16:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 8007c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	da01      	bge.n	8007c24 <accel_read_x+0x2c>
 8007c20:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007c24:	12db      	asrs	r3, r3, #11
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c30:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	ee07 3a90 	vmov	s15, r3
}
 8007c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd90      	pop	{r4, r7, pc}

08007c44 <accel_read_y>:


float accel_read_y(void){
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 8007c4a:	203d      	movs	r0, #61	; 0x3d
 8007c4c:	f7ff ff7c 	bl	8007b48 <read_byte>
 8007c50:	4603      	mov	r3, r0
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	b21c      	sxth	r4, r3
 8007c56:	203e      	movs	r0, #62	; 0x3e
 8007c58:	f7ff ff76 	bl	8007b48 <read_byte>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	b21b      	sxth	r3, r3
 8007c60:	4323      	orrs	r3, r4
 8007c62:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 8007c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da01      	bge.n	8007c70 <accel_read_y+0x2c>
 8007c6c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007c70:	12db      	asrs	r3, r3, #11
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	ee07 3a90 	vmov	s15, r3
 8007c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c7c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	ee07 3a90 	vmov	s15, r3
}
 8007c86:	eeb0 0a67 	vmov.f32	s0, s15
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd90      	pop	{r4, r7, pc}

08007c90 <accel_read_z>:


float accel_read_z(void){
 8007c90:	b590      	push	{r4, r7, lr}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 8007c96:	203f      	movs	r0, #63	; 0x3f
 8007c98:	f7ff ff56 	bl	8007b48 <read_byte>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	b21c      	sxth	r4, r3
 8007ca2:	2040      	movs	r0, #64	; 0x40
 8007ca4:	f7ff ff50 	bl	8007b48 <read_byte>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	b21b      	sxth	r3, r3
 8007cac:	4323      	orrs	r3, r4
 8007cae:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 8007cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da01      	bge.n	8007cbc <accel_read_z+0x2c>
 8007cb8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007cbc:	12db      	asrs	r3, r3, #11
 8007cbe:	b21b      	sxth	r3, r3
 8007cc0:	3b07      	subs	r3, #7
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cca:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	ee07 3a90 	vmov	s15, r3
}
 8007cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd90      	pop	{r4, r7, pc}
	...

08007ce0 <gyro_read_x>:


float gyro_read_x(void){
 8007ce0:	b590      	push	{r4, r7, lr}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 8007ce6:	2043      	movs	r0, #67	; 0x43
 8007ce8:	f7ff ff2e 	bl	8007b48 <read_byte>
 8007cec:	4603      	mov	r3, r0
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	b21c      	sxth	r4, r3
 8007cf2:	2044      	movs	r0, #68	; 0x44
 8007cf4:	f7ff ff28 	bl	8007b48 <read_byte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	4323      	orrs	r3, r4
 8007cfe:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 8007d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7f8 fc05 	bl	8000514 <__aeabi_i2d>
 8007d0a:	a30f      	add	r3, pc, #60	; (adr r3, 8007d48 <gyro_read_x+0x68>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fd94 	bl	800083c <__aeabi_ddiv>
 8007d14:	4603      	mov	r3, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	4618      	mov	r0, r3
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	a30c      	add	r3, pc, #48	; (adr r3, 8007d50 <gyro_read_x+0x70>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f8 faab 	bl	800027c <__adddf3>
 8007d26:	4603      	mov	r3, r0
 8007d28:	460c      	mov	r4, r1
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	f7f8 ff0b 	bl	8000b48 <__aeabi_d2f>
 8007d32:	4603      	mov	r3, r0
 8007d34:	603b      	str	r3, [r7, #0]
  return omega;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	ee07 3a90 	vmov	s15, r3
}
 8007d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}
 8007d46:	bf00      	nop
 8007d48:	66666666 	.word	0x66666666
 8007d4c:	40306666 	.word	0x40306666
 8007d50:	66666666 	.word	0x66666666
 8007d54:	3ff66666 	.word	0x3ff66666

08007d58 <gyro_read_y>:


float gyro_read_y(void){
 8007d58:	b590      	push	{r4, r7, lr}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 8007d5e:	2045      	movs	r0, #69	; 0x45
 8007d60:	f7ff fef2 	bl	8007b48 <read_byte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	b21c      	sxth	r4, r3
 8007d6a:	2046      	movs	r0, #70	; 0x46
 8007d6c:	f7ff feec 	bl	8007b48 <read_byte>
 8007d70:	4603      	mov	r3, r0
 8007d72:	b21b      	sxth	r3, r3
 8007d74:	4323      	orrs	r3, r4
 8007d76:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 8007d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7f8 fbc9 	bl	8000514 <__aeabi_i2d>
 8007d82:	a310      	add	r3, pc, #64	; (adr r3, 8007dc4 <gyro_read_y+0x6c>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fd58 	bl	800083c <__aeabi_ddiv>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	4618      	mov	r0, r3
 8007d92:	4621      	mov	r1, r4
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <gyro_read_y+0x68>)
 8007d9a:	f7f8 fa6d 	bl	8000278 <__aeabi_dsub>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	460c      	mov	r4, r1
 8007da2:	4618      	mov	r0, r3
 8007da4:	4621      	mov	r1, r4
 8007da6:	f7f8 fecf 	bl	8000b48 <__aeabi_d2f>
 8007daa:	4603      	mov	r3, r0
 8007dac:	603b      	str	r3, [r7, #0]
  return omega;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	ee07 3a90 	vmov	s15, r3
}
 8007db4:	eeb0 0a67 	vmov.f32	s0, s15
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd90      	pop	{r4, r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	3fe80000 	.word	0x3fe80000
 8007dc4:	66666666 	.word	0x66666666
 8007dc8:	40306666 	.word	0x40306666
 8007dcc:	00000000 	.word	0x00000000

08007dd0 <gyro_read_z>:


float gyro_read_z(void){
 8007dd0:	b5b0      	push	{r4, r5, r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 8007dd6:	2047      	movs	r0, #71	; 0x47
 8007dd8:	f7ff feb6 	bl	8007b48 <read_byte>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	b21c      	sxth	r4, r3
 8007de2:	2048      	movs	r0, #72	; 0x48
 8007de4:	f7ff feb0 	bl	8007b48 <read_byte>
 8007de8:	4603      	mov	r3, r0
 8007dea:	b21b      	sxth	r3, r3
 8007dec:	4323      	orrs	r3, r4
 8007dee:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 8007df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f8 fb8d 	bl	8000514 <__aeabi_i2d>
 8007dfa:	a314      	add	r3, pc, #80	; (adr r3, 8007e4c <gyro_read_z+0x7c>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f7f8 fd1c 	bl	800083c <__aeabi_ddiv>
 8007e04:	4603      	mov	r3, r0
 8007e06:	460c      	mov	r4, r1
 8007e08:	4625      	mov	r5, r4
 8007e0a:	461c      	mov	r4, r3
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <gyro_read_z+0x78>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7f8 fb91 	bl	8000538 <__aeabi_f2d>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fa2b 	bl	8000278 <__aeabi_dsub>
 8007e22:	4603      	mov	r3, r0
 8007e24:	460c      	mov	r4, r1
 8007e26:	4618      	mov	r0, r3
 8007e28:	4621      	mov	r1, r4
 8007e2a:	f7f8 fe8d 	bl	8000b48 <__aeabi_d2f>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	603b      	str	r3, [r7, #0]
  return omega;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	ee07 3a90 	vmov	s15, r3
}
 8007e38:	eeb0 0a67 	vmov.f32	s0, s15
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bdb0      	pop	{r4, r5, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	f3af 8000 	nop.w
 8007e48:	20000b70 	.word	0x20000b70
 8007e4c:	66666666 	.word	0x66666666
 8007e50:	40306666 	.word	0x40306666

08007e54 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b0a      	cmp	r3, #10
 8007e60:	d108      	bne.n	8007e74 <__io_putchar+0x20>
    int _c = '\r';
 8007e62:	230d      	movs	r3, #13
 8007e64:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8007e66:	f107 010c 	add.w	r1, r7, #12
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	4807      	ldr	r0, [pc, #28]	; (8007e8c <__io_putchar+0x38>)
 8007e70:	f7fc fbdf 	bl	8004632 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8007e74:	1d39      	adds	r1, r7, #4
 8007e76:	2301      	movs	r3, #1
 8007e78:	2201      	movs	r2, #1
 8007e7a:	4804      	ldr	r0, [pc, #16]	; (8007e8c <__io_putchar+0x38>)
 8007e7c:	f7fc fbd9 	bl	8004632 <HAL_UART_Transmit>
  return 0;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000ae0 	.word	0x20000ae0

08007e90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e90:	b5b0      	push	{r4, r5, r7, lr}
 8007e92:	ed2d 8b02 	vpush	{d8}
 8007e96:	b08c      	sub	sp, #48	; 0x30
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e9c:	2360      	movs	r3, #96	; 0x60
 8007e9e:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4ab5      	ldr	r2, [pc, #724]	; (8008180 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	f041 8032 	bne.w	8008f16 <HAL_TIM_PeriodElapsedCallback+0x1086>
		cnt_l = TIM4 -> CNT;
 8007eb2:	4bb4      	ldr	r3, [pc, #720]	; (8008184 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	4bb2      	ldr	r3, [pc, #712]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007ec0:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 8007ec4:	4bb1      	ldr	r3, [pc, #708]	; (800818c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed0:	4baf      	ldr	r3, [pc, #700]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007ed2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;
 8007ed6:	4bac      	ldr	r3, [pc, #688]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007ed8:	edd3 7a00 	vldr	s15, [r3]
 8007edc:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8008194 <HAL_TIM_PeriodElapsedCallback+0x304>
 8007ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee8:	dd09      	ble.n	8007efe <HAL_TIM_PeriodElapsedCallback+0x6e>
 8007eea:	4ba7      	ldr	r3, [pc, #668]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007eec:	edd3 7a00 	vldr	s15, [r3]
 8007ef0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8008198 <HAL_TIM_PeriodElapsedCallback+0x308>
 8007ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ef8:	4ba3      	ldr	r3, [pc, #652]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007efa:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;
 8007efe:	4ba4      	ldr	r3, [pc, #656]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f00:	edd3 7a00 	vldr	s15, [r3]
 8007f04:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8008194 <HAL_TIM_PeriodElapsedCallback+0x304>
 8007f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f10:	dd09      	ble.n	8007f26 <HAL_TIM_PeriodElapsedCallback+0x96>
 8007f12:	4b9f      	ldr	r3, [pc, #636]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f14:	edd3 7a00 	vldr	s15, [r3]
 8007f18:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8008198 <HAL_TIM_PeriodElapsedCallback+0x308>
 8007f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f20:	4b9b      	ldr	r3, [pc, #620]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f22:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;
 8007f26:	4b9a      	ldr	r3, [pc, #616]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f28:	edd3 7a00 	vldr	s15, [r3]
 8007f2c:	eef1 7a67 	vneg.f32	s15, s15
 8007f30:	4b97      	ldr	r3, [pc, #604]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f32:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8007f36:	4b99      	ldr	r3, [pc, #612]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7f8 fafc 	bl	8000538 <__aeabi_f2d>
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	4b90      	ldr	r3, [pc, #576]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7f8 faf5 	bl	8000538 <__aeabi_f2d>
 8007f4e:	a388      	add	r3, pc, #544	; (adr r3, 8008170 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 fb48 	bl	80005e8 <__aeabi_dmul>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7f8 f98c 	bl	800027c <__adddf3>
 8007f64:	4603      	mov	r3, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4618      	mov	r0, r3
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f7f8 fdec 	bl	8000b48 <__aeabi_d2f>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b8a      	ldr	r3, [pc, #552]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8007f74:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8007f76:	4b8a      	ldr	r3, [pc, #552]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7f8 fadc 	bl	8000538 <__aeabi_f2d>
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	4b82      	ldr	r3, [pc, #520]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7f8 fad5 	bl	8000538 <__aeabi_f2d>
 8007f8e:	a378      	add	r3, pc, #480	; (adr r3, 8008170 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 fb28 	bl	80005e8 <__aeabi_dmul>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 f96c 	bl	800027c <__adddf3>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	4618      	mov	r0, r3
 8007faa:	4621      	mov	r1, r4
 8007fac:	f7f8 fdcc 	bl	8000b48 <__aeabi_d2f>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	4b7b      	ldr	r3, [pc, #492]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8007fb4:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8007fb6:	4b74      	ldr	r3, [pc, #464]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7f8 fabc 	bl	8000538 <__aeabi_f2d>
 8007fc0:	a36b      	add	r3, pc, #428	; (adr r3, 8008170 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 fb0f 	bl	80005e8 <__aeabi_dmul>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	4618      	mov	r0, r3
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	a369      	add	r3, pc, #420	; (adr r3, 8008178 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f7f8 fc30 	bl	800083c <__aeabi_ddiv>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	f7f8 fdb0 	bl	8000b48 <__aeabi_d2f>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	4b6e      	ldr	r3, [pc, #440]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8007fec:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8007fee:	4b68      	ldr	r3, [pc, #416]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 faa0 	bl	8000538 <__aeabi_f2d>
 8007ff8:	a35d      	add	r3, pc, #372	; (adr r3, 8008170 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 faf3 	bl	80005e8 <__aeabi_dmul>
 8008002:	4603      	mov	r3, r0
 8008004:	460c      	mov	r4, r1
 8008006:	4618      	mov	r0, r3
 8008008:	4621      	mov	r1, r4
 800800a:	a35b      	add	r3, pc, #364	; (adr r3, 8008178 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 fc14 	bl	800083c <__aeabi_ddiv>
 8008014:	4603      	mov	r3, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4618      	mov	r0, r3
 800801a:	4621      	mov	r1, r4
 800801c:	f7f8 fd94 	bl	8000b48 <__aeabi_d2f>
 8008020:	4602      	mov	r2, r0
 8008022:	4b61      	ldr	r3, [pc, #388]	; (80081a8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8008024:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8008026:	4b57      	ldr	r3, [pc, #348]	; (8008184 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8008028:	2200      	movs	r2, #0
 800802a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800802c:	4b57      	ldr	r3, [pc, #348]	; (800818c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800802e:	2200      	movs	r2, #0
 8008030:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 8008032:	4b5e      	ldr	r3, [pc, #376]	; (80081ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80fe 	beq.w	800823e <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 8008042:	4b5b      	ldr	r3, [pc, #364]	; (80081b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 fa76 	bl	8000538 <__aeabi_f2d>
 800804c:	a34a      	add	r3, pc, #296	; (adr r3, 8008178 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f7f8 fac9 	bl	80005e8 <__aeabi_dmul>
 8008056:	4603      	mov	r3, r0
 8008058:	460c      	mov	r4, r1
 800805a:	4625      	mov	r5, r4
 800805c:	461c      	mov	r4, r3
 800805e:	4b55      	ldr	r3, [pc, #340]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f7f8 fa68 	bl	8000538 <__aeabi_f2d>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4620      	mov	r0, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 f904 	bl	800027c <__adddf3>
 8008074:	4603      	mov	r3, r0
 8008076:	460c      	mov	r4, r1
 8008078:	4618      	mov	r0, r3
 800807a:	4621      	mov	r1, r4
 800807c:	f7f8 fd64 	bl	8000b48 <__aeabi_d2f>
 8008080:	4602      	mov	r2, r0
 8008082:	4b4c      	ldr	r3, [pc, #304]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8008084:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 8008086:	4b4b      	ldr	r3, [pc, #300]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8008088:	ed93 7a00 	vldr	s14, [r3]
 800808c:	4b4a      	ldr	r3, [pc, #296]	; (80081b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800808e:	edd3 7a00 	vldr	s15, [r3]
 8008092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809a:	dd03      	ble.n	80080a4 <HAL_TIM_PeriodElapsedCallback+0x214>
 800809c:	4b46      	ldr	r3, [pc, #280]	; (80081b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800809e:	edd3 7a00 	vldr	s15, [r3]
 80080a2:	e002      	b.n	80080aa <HAL_TIM_PeriodElapsedCallback+0x21a>
 80080a4:	4b43      	ldr	r3, [pc, #268]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80080a6:	edd3 7a00 	vldr	s15, [r3]
 80080aa:	4b44      	ldr	r3, [pc, #272]	; (80081bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80080ac:	ed93 7a00 	vldr	s14, [r3]
 80080b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b8:	dd10      	ble.n	80080dc <HAL_TIM_PeriodElapsedCallback+0x24c>
 80080ba:	4b3e      	ldr	r3, [pc, #248]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80080bc:	ed93 7a00 	vldr	s14, [r3]
 80080c0:	4b3d      	ldr	r3, [pc, #244]	; (80081b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80080c2:	edd3 7a00 	vldr	s15, [r3]
 80080c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ce:	dd02      	ble.n	80080d6 <HAL_TIM_PeriodElapsedCallback+0x246>
 80080d0:	4b39      	ldr	r3, [pc, #228]	; (80081b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	e004      	b.n	80080e0 <HAL_TIM_PeriodElapsedCallback+0x250>
 80080d6:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	e001      	b.n	80080e0 <HAL_TIM_PeriodElapsedCallback+0x250>
 80080dc:	4b37      	ldr	r3, [pc, #220]	; (80081bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a34      	ldr	r2, [pc, #208]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80080e2:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 80080e4:	4b33      	ldr	r3, [pc, #204]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80080e6:	ed93 7a00 	vldr	s14, [r3]
 80080ea:	4b2e      	ldr	r3, [pc, #184]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80080ec:	edd3 7a00 	vldr	s15, [r3]
 80080f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080f4:	4b32      	ldr	r3, [pc, #200]	; (80081c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80080f6:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80080fc:	edd3 7a00 	vldr	s15, [r3]
 8008100:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008108:	4b2e      	ldr	r3, [pc, #184]	; (80081c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800810a:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800810e:	4b2e      	ldr	r3, [pc, #184]	; (80081c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7f8 fa10 	bl	8000538 <__aeabi_f2d>
 8008118:	a317      	add	r3, pc, #92	; (adr r3, 8008178 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 fa63 	bl	80005e8 <__aeabi_dmul>
 8008122:	4603      	mov	r3, r0
 8008124:	460c      	mov	r4, r1
 8008126:	4625      	mov	r5, r4
 8008128:	461c      	mov	r4, r3
 800812a:	4b28      	ldr	r3, [pc, #160]	; (80081cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f7f8 fa02 	bl	8000538 <__aeabi_f2d>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	f7f8 f89e 	bl	800027c <__adddf3>
 8008140:	4603      	mov	r3, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4618      	mov	r0, r3
 8008146:	4621      	mov	r1, r4
 8008148:	f7f8 fcfe 	bl	8000b48 <__aeabi_d2f>
 800814c:	4602      	mov	r2, r0
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8008150:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 8008152:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8008154:	ed93 7a00 	vldr	s14, [r3]
 8008158:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800815a:	edd3 7a00 	vldr	s15, [r3]
 800815e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008166:	dd35      	ble.n	80081d4 <HAL_TIM_PeriodElapsedCallback+0x344>
 8008168:	4b19      	ldr	r3, [pc, #100]	; (80081d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800816a:	edd3 7a00 	vldr	s15, [r3]
 800816e:	e034      	b.n	80081da <HAL_TIM_PeriodElapsedCallback+0x34a>
 8008170:	775e3793 	.word	0x775e3793
 8008174:	3f552a9e 	.word	0x3f552a9e
 8008178:	d2f1a9fc 	.word	0xd2f1a9fc
 800817c:	3f50624d 	.word	0x3f50624d
 8008180:	20000b30 	.word	0x20000b30
 8008184:	40000800 	.word	0x40000800
 8008188:	2000032c 	.word	0x2000032c
 800818c:	40010400 	.word	0x40010400
 8008190:	20000b28 	.word	0x20000b28
 8008194:	471c4000 	.word	0x471c4000
 8008198:	477fff00 	.word	0x477fff00
 800819c:	20000f00 	.word	0x20000f00
 80081a0:	20000a68 	.word	0x20000a68
 80081a4:	20000a6c 	.word	0x20000a6c
 80081a8:	20000338 	.word	0x20000338
 80081ac:	20000ee4 	.word	0x20000ee4
 80081b0:	20000cd8 	.word	0x20000cd8
 80081b4:	20000b7c 	.word	0x20000b7c
 80081b8:	200006f4 	.word	0x200006f4
 80081bc:	20000ad0 	.word	0x20000ad0
 80081c0:	20000adc 	.word	0x20000adc
 80081c4:	20000b24 	.word	0x20000b24
 80081c8:	20000a60 	.word	0x20000a60
 80081cc:	20000220 	.word	0x20000220
 80081d0:	20000224 	.word	0x20000224
 80081d4:	4b9a      	ldr	r3, [pc, #616]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80081d6:	edd3 7a00 	vldr	s15, [r3]
 80081da:	4b9a      	ldr	r3, [pc, #616]	; (8008444 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80081dc:	ed93 7a00 	vldr	s14, [r3]
 80081e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e8:	dd10      	ble.n	800820c <HAL_TIM_PeriodElapsedCallback+0x37c>
 80081ea:	4b95      	ldr	r3, [pc, #596]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80081ec:	ed93 7a00 	vldr	s14, [r3]
 80081f0:	4b95      	ldr	r3, [pc, #596]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80081f2:	edd3 7a00 	vldr	s15, [r3]
 80081f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fe:	dd02      	ble.n	8008206 <HAL_TIM_PeriodElapsedCallback+0x376>
 8008200:	4b91      	ldr	r3, [pc, #580]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	e004      	b.n	8008210 <HAL_TIM_PeriodElapsedCallback+0x380>
 8008206:	4b8e      	ldr	r3, [pc, #568]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	e001      	b.n	8008210 <HAL_TIM_PeriodElapsedCallback+0x380>
 800820c:	4b8d      	ldr	r3, [pc, #564]	; (8008444 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a8b      	ldr	r2, [pc, #556]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008212:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 8008214:	4b8a      	ldr	r3, [pc, #552]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8008216:	ed93 7a00 	vldr	s14, [r3]
 800821a:	4b8c      	ldr	r3, [pc, #560]	; (800844c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800821c:	edd3 7a00 	vldr	s15, [r3]
 8008220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008224:	4b8a      	ldr	r3, [pc, #552]	; (8008450 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8008226:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800822a:	4b89      	ldr	r3, [pc, #548]	; (8008450 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800822c:	edd3 7a00 	vldr	s15, [r3]
 8008230:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008238:	4b86      	ldr	r3, [pc, #536]	; (8008454 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800823a:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800823e:	4b86      	ldr	r3, [pc, #536]	; (8008458 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a84      	ldr	r2, [pc, #528]	; (8008458 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8008246:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 8008248:	4b83      	ldr	r3, [pc, #524]	; (8008458 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b04      	cmp	r3, #4
 800824e:	dd2a      	ble.n	80082a6 <HAL_TIM_PeriodElapsedCallback+0x416>
 8008250:	4b82      	ldr	r3, [pc, #520]	; (800845c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d023      	beq.n	80082a6 <HAL_TIM_PeriodElapsedCallback+0x416>
			log_cnt = 0;
 800825e:	4b7e      	ldr	r3, [pc, #504]	; (8008458 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 8008264:	4b7e      	ldr	r3, [pc, #504]	; (8008460 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2bc7      	cmp	r3, #199	; 0xc7
 800826a:	dc1c      	bgt.n	80082a6 <HAL_TIM_PeriodElapsedCallback+0x416>
				get_speed_l[get_cnt] = speed_l;
 800826c:	4b7d      	ldr	r3, [pc, #500]	; (8008464 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800826e:	edd3 7a00 	vldr	s15, [r3]
 8008272:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800827a:	ee17 1a90 	vmov	r1, s15
 800827e:	4a7a      	ldr	r2, [pc, #488]	; (8008468 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8008280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 8008284:	4b71      	ldr	r3, [pc, #452]	; (800844c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8008286:	edd3 7a00 	vldr	s15, [r3]
 800828a:	4b75      	ldr	r3, [pc, #468]	; (8008460 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008292:	ee17 1a90 	vmov	r1, s15
 8008296:	4a75      	ldr	r2, [pc, #468]	; (800846c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8008298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800829c:	4b70      	ldr	r3, [pc, #448]	; (8008460 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	4a6f      	ldr	r2, [pc, #444]	; (8008460 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80082a4:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 80082a6:	f7ff fd93 	bl	8007dd0 <gyro_read_z>
 80082aa:	ee10 3a10 	vmov	r3, s0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7f8 f942 	bl	8000538 <__aeabi_f2d>
 80082b4:	a35e      	add	r3, pc, #376	; (adr r3, 8008430 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f8 f995 	bl	80005e8 <__aeabi_dmul>
 80082be:	4603      	mov	r3, r0
 80082c0:	460c      	mov	r4, r1
 80082c2:	4625      	mov	r5, r4
 80082c4:	461c      	mov	r4, r3
 80082c6:	4b6a      	ldr	r3, [pc, #424]	; (8008470 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7f8 f934 	bl	8000538 <__aeabi_f2d>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4620      	mov	r0, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	f7f7 ffd0 	bl	800027c <__adddf3>
 80082dc:	4603      	mov	r3, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4618      	mov	r0, r3
 80082e2:	4621      	mov	r1, r4
 80082e4:	f7f8 fc30 	bl	8000b48 <__aeabi_d2f>
 80082e8:	4602      	mov	r2, r0
 80082ea:	4b61      	ldr	r3, [pc, #388]	; (8008470 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80082ec:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag == 1){
 80082ee:	4b61      	ldr	r3, [pc, #388]	; (8008474 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d14b      	bne.n	8008390 <HAL_TIM_PeriodElapsedCallback+0x500>
			gyro_cnt ++;
 80082f8:	4b5f      	ldr	r3, [pc, #380]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	4a5e      	ldr	r2, [pc, #376]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008300:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 8008302:	4b5d      	ldr	r3, [pc, #372]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b01      	cmp	r3, #1
 8008308:	dd10      	ble.n	800832c <HAL_TIM_PeriodElapsedCallback+0x49c>
 800830a:	4b5c      	ldr	r3, [pc, #368]	; (800847c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800830c:	ed93 8a00 	vldr	s16, [r3]
 8008310:	f7ff fd5e 	bl	8007dd0 <gyro_read_z>
 8008314:	eef0 7a40 	vmov.f32	s15, s0
 8008318:	ee38 7a67 	vsub.f32	s14, s16, s15
 800831c:	4b58      	ldr	r3, [pc, #352]	; (8008480 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800831e:	edd3 7a00 	vldr	s15, [r3]
 8008322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008326:	4b56      	ldr	r3, [pc, #344]	; (8008480 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8008328:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800832c:	f7ff fd50 	bl	8007dd0 <gyro_read_z>
 8008330:	eef0 7a40 	vmov.f32	s15, s0
 8008334:	4b51      	ldr	r3, [pc, #324]	; (800847c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8008336:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(6);
 800833a:	2006      	movs	r0, #6
 800833c:	f003 fb12 	bl	800b964 <full_led_write>
			if(gyro_cnt >= 1001) {
 8008340:	4b4d      	ldr	r3, [pc, #308]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008348:	dd1a      	ble.n	8008380 <HAL_TIM_PeriodElapsedCallback+0x4f0>
				gyro_drift_flag = 0;
 800834a:	4b4a      	ldr	r3, [pc, #296]	; (8008474 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 8008350:	4b4b      	ldr	r3, [pc, #300]	; (8008480 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8008352:	edd3 6a00 	vldr	s13, [r3]
 8008356:	4b48      	ldr	r3, [pc, #288]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800836a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800836e:	4b45      	ldr	r3, [pc, #276]	; (8008484 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8008370:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 8008374:	4b40      	ldr	r3, [pc, #256]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
				full_led_write(4);
 800837a:	2004      	movs	r0, #4
 800837c:	f003 faf2 	bl	800b964 <full_led_write>
			}
			degree_z = 0;
 8008380:	4b3b      	ldr	r3, [pc, #236]	; (8008470 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8008382:	f04f 0200 	mov.w	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 8008388:	4b3f      	ldr	r3, [pc, #252]	; (8008488 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800838a:	f04f 0200 	mov.w	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
		}


		if(MF.FLAG.ENKAI){
 8008390:	4b32      	ldr	r3, [pc, #200]	; (800845c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80d3 	beq.w	8008546 <HAL_TIM_PeriodElapsedCallback+0x6b6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 80083a0:	4b33      	ldr	r3, [pc, #204]	; (8008470 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80083a2:	ed93 7a00 	vldr	s14, [r3]
 80083a6:	4b38      	ldr	r3, [pc, #224]	; (8008488 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80083a8:	edd3 7a00 	vldr	s15, [r3]
 80083ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083b0:	ee17 0a90 	vmov	r0, s15
 80083b4:	f7f8 f8c0 	bl	8000538 <__aeabi_f2d>
 80083b8:	a31f      	add	r3, pc, #124	; (adr r3, 8008438 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 f913 	bl	80005e8 <__aeabi_dmul>
 80083c2:	4603      	mov	r3, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	4618      	mov	r0, r3
 80083c8:	4621      	mov	r1, r4
 80083ca:	f7f8 fbbd 	bl	8000b48 <__aeabi_d2f>
 80083ce:	4602      	mov	r2, r0
 80083d0:	4b2e      	ldr	r3, [pc, #184]	; (800848c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80083d2:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 80083d4:	4b2d      	ldr	r3, [pc, #180]	; (800848c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80083d6:	edd3 7a00 	vldr	s15, [r3]
 80083da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e2:	dd59      	ble.n	8008498 <HAL_TIM_PeriodElapsedCallback+0x608>
				target_speed_l = sqrt(2*accel_l*target_dist);
 80083e4:	4b2a      	ldr	r3, [pc, #168]	; (8008490 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80083e6:	edd3 7a00 	vldr	s15, [r3]
 80083ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80083ee:	4b27      	ldr	r3, [pc, #156]	; (800848c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80083f0:	edd3 7a00 	vldr	s15, [r3]
 80083f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f8:	ee17 0a90 	vmov	r0, s15
 80083fc:	f7f8 f89c 	bl	8000538 <__aeabi_f2d>
 8008400:	4603      	mov	r3, r0
 8008402:	460c      	mov	r4, r1
 8008404:	ec44 3b10 	vmov	d0, r3, r4
 8008408:	f005 f846 	bl	800d498 <sqrt>
 800840c:	ec54 3b10 	vmov	r3, r4, d0
 8008410:	4618      	mov	r0, r3
 8008412:	4621      	mov	r1, r4
 8008414:	f7f8 fb98 	bl	8000b48 <__aeabi_d2f>
 8008418:	4602      	mov	r2, r0
 800841a:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800841c:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800841e:	4b1d      	ldr	r3, [pc, #116]	; (8008494 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8008420:	edd3 7a00 	vldr	s15, [r3]
 8008424:	eef1 7a67 	vneg.f32	s15, s15
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800842a:	edc3 7a00 	vstr	s15, [r3]
 800842e:	e060      	b.n	80084f2 <HAL_TIM_PeriodElapsedCallback+0x662>
 8008430:	d2f1a9fc 	.word	0xd2f1a9fc
 8008434:	3f50624d 	.word	0x3f50624d
 8008438:	d7653223 	.word	0xd7653223
 800843c:	3fe26e40 	.word	0x3fe26e40
 8008440:	20000220 	.word	0x20000220
 8008444:	20000ee8 	.word	0x20000ee8
 8008448:	20000224 	.word	0x20000224
 800844c:	20000338 	.word	0x20000338
 8008450:	20000b88 	.word	0x20000b88
 8008454:	200006f8 	.word	0x200006f8
 8008458:	20000188 	.word	0x20000188
 800845c:	20000ee4 	.word	0x20000ee4
 8008460:	20000190 	.word	0x20000190
 8008464:	20000a6c 	.word	0x20000a6c
 8008468:	200006fc 	.word	0x200006fc
 800846c:	200003d4 	.word	0x200003d4
 8008470:	20000ad8 	.word	0x20000ad8
 8008474:	20000a1c 	.word	0x20000a1c
 8008478:	2000018c 	.word	0x2000018c
 800847c:	20000f08 	.word	0x20000f08
 8008480:	20000b20 	.word	0x20000b20
 8008484:	20000b70 	.word	0x20000b70
 8008488:	20000b78 	.word	0x20000b78
 800848c:	20000ef4 	.word	0x20000ef4
 8008490:	20000cd8 	.word	0x20000cd8
 8008494:	20000b7c 	.word	0x20000b7c
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 8008498:	4bcb      	ldr	r3, [pc, #812]	; (80087c8 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800849a:	edd3 7a00 	vldr	s15, [r3]
 800849e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80084a2:	4bca      	ldr	r3, [pc, #808]	; (80087cc <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80084a4:	edd3 7a00 	vldr	s15, [r3]
 80084a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ac:	eef1 7a67 	vneg.f32	s15, s15
 80084b0:	ee17 3a90 	vmov	r3, s15
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f8 f83f 	bl	8000538 <__aeabi_f2d>
 80084ba:	4603      	mov	r3, r0
 80084bc:	460c      	mov	r4, r1
 80084be:	ec44 3b10 	vmov	d0, r3, r4
 80084c2:	f004 ffe9 	bl	800d498 <sqrt>
 80084c6:	ec54 3b10 	vmov	r3, r4, d0
 80084ca:	4618      	mov	r0, r3
 80084cc:	4621      	mov	r1, r4
 80084ce:	f7f8 fb3b 	bl	8000b48 <__aeabi_d2f>
 80084d2:	4603      	mov	r3, r0
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	eef1 7a67 	vneg.f32	s15, s15
 80084dc:	4bbc      	ldr	r3, [pc, #752]	; (80087d0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80084de:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 80084e2:	4bbb      	ldr	r3, [pc, #748]	; (80087d0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80084e4:	edd3 7a00 	vldr	s15, [r3]
 80084e8:	eef1 7a67 	vneg.f32	s15, s15
 80084ec:	4bb9      	ldr	r3, [pc, #740]	; (80087d4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 80084ee:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 80084f2:	4bb7      	ldr	r3, [pc, #732]	; (80087d0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80084f4:	ed93 7a00 	vldr	s14, [r3]
 80084f8:	4bb7      	ldr	r3, [pc, #732]	; (80087d8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008502:	4bb6      	ldr	r3, [pc, #728]	; (80087dc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8008504:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8008508:	4bb4      	ldr	r3, [pc, #720]	; (80087dc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800850a:	edd3 7a00 	vldr	s15, [r3]
 800850e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008516:	4bb2      	ldr	r3, [pc, #712]	; (80087e0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008518:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800851c:	4bad      	ldr	r3, [pc, #692]	; (80087d4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800851e:	ed93 7a00 	vldr	s14, [r3]
 8008522:	4bb0      	ldr	r3, [pc, #704]	; (80087e4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8008524:	edd3 7a00 	vldr	s15, [r3]
 8008528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800852c:	4bae      	ldr	r3, [pc, #696]	; (80087e8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800852e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8008532:	4bad      	ldr	r3, [pc, #692]	; (80087e8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8008534:	edd3 7a00 	vldr	s15, [r3]
 8008538:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800853c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008540:	4baa      	ldr	r3, [pc, #680]	; (80087ec <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8008542:	edc3 7a00 	vstr	s15, [r3]
		}

		if(MF.FLAG.GYRO){
 8008546:	4baa      	ldr	r3, [pc, #680]	; (80087f0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 80ed 	beq.w	8008730 <HAL_TIM_PeriodElapsedCallback+0x8a0>
			target_omega_z += target_degaccel_z * 0.001;
 8008556:	4ba7      	ldr	r3, [pc, #668]	; (80087f4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4618      	mov	r0, r3
 800855c:	f7f7 ffec 	bl	8000538 <__aeabi_f2d>
 8008560:	a395      	add	r3, pc, #596	; (adr r3, 80087b8 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f8 f83f 	bl	80005e8 <__aeabi_dmul>
 800856a:	4603      	mov	r3, r0
 800856c:	460c      	mov	r4, r1
 800856e:	4625      	mov	r5, r4
 8008570:	461c      	mov	r4, r3
 8008572:	4ba1      	ldr	r3, [pc, #644]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7f7 ffde 	bl	8000538 <__aeabi_f2d>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	f7f7 fe7a 	bl	800027c <__adddf3>
 8008588:	4603      	mov	r3, r0
 800858a:	460c      	mov	r4, r1
 800858c:	4618      	mov	r0, r3
 800858e:	4621      	mov	r1, r4
 8008590:	f7f8 fada 	bl	8000b48 <__aeabi_d2f>
 8008594:	4602      	mov	r2, r0
 8008596:	4b98      	ldr	r3, [pc, #608]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008598:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800859a:	4b97      	ldr	r3, [pc, #604]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800859c:	ed93 7a00 	vldr	s14, [r3]
 80085a0:	4b96      	ldr	r3, [pc, #600]	; (80087fc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80085a2:	edd3 7a00 	vldr	s15, [r3]
 80085a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ae:	dd03      	ble.n	80085b8 <HAL_TIM_PeriodElapsedCallback+0x728>
 80085b0:	4b92      	ldr	r3, [pc, #584]	; (80087fc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80085b2:	edd3 7a00 	vldr	s15, [r3]
 80085b6:	e002      	b.n	80085be <HAL_TIM_PeriodElapsedCallback+0x72e>
 80085b8:	4b8f      	ldr	r3, [pc, #572]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80085ba:	edd3 7a00 	vldr	s15, [r3]
 80085be:	4b90      	ldr	r3, [pc, #576]	; (8008800 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80085c0:	ed93 7a00 	vldr	s14, [r3]
 80085c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	dd10      	ble.n	80085f0 <HAL_TIM_PeriodElapsedCallback+0x760>
 80085ce:	4b8a      	ldr	r3, [pc, #552]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80085d0:	ed93 7a00 	vldr	s14, [r3]
 80085d4:	4b89      	ldr	r3, [pc, #548]	; (80087fc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80085d6:	edd3 7a00 	vldr	s15, [r3]
 80085da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e2:	dd02      	ble.n	80085ea <HAL_TIM_PeriodElapsedCallback+0x75a>
 80085e4:	4b85      	ldr	r3, [pc, #532]	; (80087fc <HAL_TIM_PeriodElapsedCallback+0x96c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	e004      	b.n	80085f4 <HAL_TIM_PeriodElapsedCallback+0x764>
 80085ea:	4b83      	ldr	r3, [pc, #524]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	e001      	b.n	80085f4 <HAL_TIM_PeriodElapsedCallback+0x764>
 80085f0:	4b83      	ldr	r3, [pc, #524]	; (8008800 <HAL_TIM_PeriodElapsedCallback+0x970>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a80      	ldr	r2, [pc, #512]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 80085f6:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 80085f8:	4b82      	ldr	r3, [pc, #520]	; (8008804 <HAL_TIM_PeriodElapsedCallback+0x974>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f7 ff9b 	bl	8000538 <__aeabi_f2d>
 8008602:	4604      	mov	r4, r0
 8008604:	460d      	mov	r5, r1
 8008606:	4b7c      	ldr	r3, [pc, #496]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008608:	edd3 7a00 	vldr	s15, [r3]
 800860c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008808 <HAL_TIM_PeriodElapsedCallback+0x978>
 8008610:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008614:	ee16 0a90 	vmov	r0, s13
 8008618:	f7f7 ff8e 	bl	8000538 <__aeabi_f2d>
 800861c:	a368      	add	r3, pc, #416	; (adr r3, 80087c0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 ffe1 	bl	80005e8 <__aeabi_dmul>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	f04f 0200 	mov.w	r2, #0
 8008632:	4b76      	ldr	r3, [pc, #472]	; (800880c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8008634:	f7f7 ffd8 	bl	80005e8 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4610      	mov	r0, r2
 800863e:	4619      	mov	r1, r3
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008648:	f7f8 f8f8 	bl	800083c <__aeabi_ddiv>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4620      	mov	r0, r4
 8008652:	4629      	mov	r1, r5
 8008654:	f7f7 fe12 	bl	800027c <__adddf3>
 8008658:	4603      	mov	r3, r0
 800865a:	460c      	mov	r4, r1
 800865c:	4618      	mov	r0, r3
 800865e:	4621      	mov	r1, r4
 8008660:	f7f8 fa72 	bl	8000b48 <__aeabi_d2f>
 8008664:	4602      	mov	r2, r0
 8008666:	4b5a      	ldr	r3, [pc, #360]	; (80087d0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8008668:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 800866a:	4b66      	ldr	r3, [pc, #408]	; (8008804 <HAL_TIM_PeriodElapsedCallback+0x974>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f7f7 ff62 	bl	8000538 <__aeabi_f2d>
 8008674:	4604      	mov	r4, r0
 8008676:	460d      	mov	r5, r1
 8008678:	4b5f      	ldr	r3, [pc, #380]	; (80087f8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800867a:	edd3 7a00 	vldr	s15, [r3]
 800867e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8008808 <HAL_TIM_PeriodElapsedCallback+0x978>
 8008682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008686:	ee16 0a90 	vmov	r0, s13
 800868a:	f7f7 ff55 	bl	8000538 <__aeabi_f2d>
 800868e:	a34c      	add	r3, pc, #304	; (adr r3, 80087c0 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f7f7 ffa8 	bl	80005e8 <__aeabi_dmul>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4610      	mov	r0, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	4b59      	ldr	r3, [pc, #356]	; (800880c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80086a6:	f7f7 ff9f 	bl	80005e8 <__aeabi_dmul>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4610      	mov	r0, r2
 80086b0:	4619      	mov	r1, r3
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ba:	f7f8 f8bf 	bl	800083c <__aeabi_ddiv>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f7 fdd7 	bl	8000278 <__aeabi_dsub>
 80086ca:	4603      	mov	r3, r0
 80086cc:	460c      	mov	r4, r1
 80086ce:	4618      	mov	r0, r3
 80086d0:	4621      	mov	r1, r4
 80086d2:	f7f8 fa39 	bl	8000b48 <__aeabi_d2f>
 80086d6:	4602      	mov	r2, r0
 80086d8:	4b3e      	ldr	r3, [pc, #248]	; (80087d4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 80086da:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 80086dc:	4b3c      	ldr	r3, [pc, #240]	; (80087d0 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80086de:	ed93 7a00 	vldr	s14, [r3]
 80086e2:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <HAL_TIM_PeriodElapsedCallback+0x948>)
 80086e4:	edd3 7a00 	vldr	s15, [r3]
 80086e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086ec:	4b3b      	ldr	r3, [pc, #236]	; (80087dc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 80086ee:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 80086f2:	4b3a      	ldr	r3, [pc, #232]	; (80087dc <HAL_TIM_PeriodElapsedCallback+0x94c>)
 80086f4:	edd3 7a00 	vldr	s15, [r3]
 80086f8:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80086fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008700:	4b37      	ldr	r3, [pc, #220]	; (80087e0 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008702:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 8008706:	4b33      	ldr	r3, [pc, #204]	; (80087d4 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8008708:	ed93 7a00 	vldr	s14, [r3]
 800870c:	4b35      	ldr	r3, [pc, #212]	; (80087e4 <HAL_TIM_PeriodElapsedCallback+0x954>)
 800870e:	edd3 7a00 	vldr	s15, [r3]
 8008712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008716:	4b34      	ldr	r3, [pc, #208]	; (80087e8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8008718:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800871c:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <HAL_TIM_PeriodElapsedCallback+0x958>)
 800871e:	edd3 7a00 	vldr	s15, [r3]
 8008722:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800872a:	4b30      	ldr	r3, [pc, #192]	; (80087ec <HAL_TIM_PeriodElapsedCallback+0x95c>)
 800872c:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 8008730:	4b37      	ldr	r3, [pc, #220]	; (8008810 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	4b37      	ldr	r3, [pc, #220]	; (8008814 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8008738:	fb83 3102 	smull	r3, r1, r3, r2
 800873c:	17d3      	asrs	r3, r2, #31
 800873e:	1ac9      	subs	r1, r1, r3
 8008740:	460b      	mov	r3, r1
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	440b      	add	r3, r1
 8008746:	1ad1      	subs	r1, r2, r3
 8008748:	b2ca      	uxtb	r2, r1
 800874a:	4b31      	ldr	r3, [pc, #196]	; (8008810 <HAL_TIM_PeriodElapsedCallback+0x980>)
 800874c:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800874e:	4b30      	ldr	r3, [pc, #192]	; (8008810 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d07f      	beq.n	8008856 <HAL_TIM_PeriodElapsedCallback+0x9c6>
 8008756:	2b02      	cmp	r3, #2
 8008758:	f000 80bc 	beq.w	80088d4 <HAL_TIM_PeriodElapsedCallback+0xa44>
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 81f3 	bne.w	8008b48 <HAL_TIM_PeriodElapsedCallback+0xcb8>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 8008762:	2201      	movs	r2, #1
 8008764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008768:	482b      	ldr	r0, [pc, #172]	; (8008818 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800876a:	f7f9 fda3 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800876e:	2300      	movs	r3, #0
 8008770:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008772:	e002      	b.n	800877a <HAL_TIM_PeriodElapsedCallback+0x8ea>
 8008774:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008776:	3301      	adds	r3, #1
 8008778:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800877a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800877c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008780:	4293      	cmp	r3, r2
 8008782:	d9f7      	bls.n	8008774 <HAL_TIM_PeriodElapsedCallback+0x8e4>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 8008784:	2103      	movs	r1, #3
 8008786:	4825      	ldr	r0, [pc, #148]	; (800881c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8008788:	f001 f906 	bl	8009998 <get_adc_value>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	4b23      	ldr	r3, [pc, #140]	; (8008820 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8008792:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008794:	2200      	movs	r2, #0
 8008796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800879a:	481f      	ldr	r0, [pc, #124]	; (8008818 <HAL_TIM_PeriodElapsedCallback+0x988>)
 800879c:	f7f9 fd8a 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 80087a0:	2201      	movs	r2, #1
 80087a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087a6:	481f      	ldr	r0, [pc, #124]	; (8008824 <HAL_TIM_PeriodElapsedCallback+0x994>)
 80087a8:	f7f9 fd84 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80087ac:	2300      	movs	r3, #0
 80087ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087b0:	e03d      	b.n	800882e <HAL_TIM_PeriodElapsedCallback+0x99e>
 80087b2:	bf00      	nop
 80087b4:	f3af 8000 	nop.w
 80087b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80087bc:	3f50624d 	.word	0x3f50624d
 80087c0:	54442d18 	.word	0x54442d18
 80087c4:	400921fb 	.word	0x400921fb
 80087c8:	20000cd8 	.word	0x20000cd8
 80087cc:	20000ef4 	.word	0x20000ef4
 80087d0:	20000b7c 	.word	0x20000b7c
 80087d4:	20000220 	.word	0x20000220
 80087d8:	20000a6c 	.word	0x20000a6c
 80087dc:	20000adc 	.word	0x20000adc
 80087e0:	20000b24 	.word	0x20000b24
 80087e4:	20000338 	.word	0x20000338
 80087e8:	20000b88 	.word	0x20000b88
 80087ec:	200006f8 	.word	0x200006f8
 80087f0:	20000ee4 	.word	0x20000ee4
 80087f4:	20000ad4 	.word	0x20000ad4
 80087f8:	20000228 	.word	0x20000228
 80087fc:	20000a64 	.word	0x20000a64
 8008800:	20000334 	.word	0x20000334
 8008804:	20000a70 	.word	0x20000a70
 8008808:	43340000 	.word	0x43340000
 800880c:	40508000 	.word	0x40508000
 8008810:	20000efb 	.word	0x20000efb
 8008814:	55555556 	.word	0x55555556
 8008818:	40020800 	.word	0x40020800
 800881c:	20000a7c 	.word	0x20000a7c
 8008820:	20000a78 	.word	0x20000a78
 8008824:	40020000 	.word	0x40020000
 8008828:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800882a:	3301      	adds	r3, #1
 800882c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800882e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008830:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008834:	4293      	cmp	r3, r2
 8008836:	d9f7      	bls.n	8008828 <HAL_TIM_PeriodElapsedCallback+0x998>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 8008838:	2101      	movs	r1, #1
 800883a:	48aa      	ldr	r0, [pc, #680]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800883c:	f001 f8ac 	bl	8009998 <get_adc_value>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	4ba8      	ldr	r3, [pc, #672]	; (8008ae8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8008846:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8008848:	2200      	movs	r2, #0
 800884a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800884e:	48a7      	ldr	r0, [pc, #668]	; (8008aec <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8008850:	f7f9 fd30 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 8008854:	e178      	b.n	8008b48 <HAL_TIM_PeriodElapsedCallback+0xcb8>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 8008856:	2201      	movs	r2, #1
 8008858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800885c:	48a4      	ldr	r0, [pc, #656]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800885e:	f7f9 fd29 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 8008862:	2300      	movs	r3, #0
 8008864:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008866:	e002      	b.n	800886e <HAL_TIM_PeriodElapsedCallback+0x9de>
 8008868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800886a:	3301      	adds	r3, #1
 800886c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800886e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008870:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008874:	4293      	cmp	r3, r2
 8008876:	d9f7      	bls.n	8008868 <HAL_TIM_PeriodElapsedCallback+0x9d8>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 8008878:	2102      	movs	r1, #2
 800887a:	489a      	ldr	r0, [pc, #616]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 800887c:	f001 f88c 	bl	8009998 <get_adc_value>
 8008880:	4603      	mov	r3, r0
 8008882:	461a      	mov	r2, r3
 8008884:	4b9b      	ldr	r3, [pc, #620]	; (8008af4 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 8008886:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8008888:	2200      	movs	r2, #0
 800888a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800888e:	4898      	ldr	r0, [pc, #608]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8008890:	f7f9 fd10 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 8008894:	2201      	movs	r2, #1
 8008896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800889a:	4895      	ldr	r0, [pc, #596]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800889c:	f7f9 fd0a 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80088a0:	2300      	movs	r3, #0
 80088a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80088a4:	e002      	b.n	80088ac <HAL_TIM_PeriodElapsedCallback+0xa1c>
 80088a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088a8:	3301      	adds	r3, #1
 80088aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80088ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088ae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d9f7      	bls.n	80088a6 <HAL_TIM_PeriodElapsedCallback+0xa16>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 80088b6:	2100      	movs	r1, #0
 80088b8:	488a      	ldr	r0, [pc, #552]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80088ba:	f001 f86d 	bl	8009998 <get_adc_value>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	4b8d      	ldr	r3, [pc, #564]	; (8008af8 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 80088c4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80088c6:	2200      	movs	r2, #0
 80088c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088cc:	4888      	ldr	r0, [pc, #544]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80088ce:	f7f9 fcf1 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 80088d2:	e139      	b.n	8008b48 <HAL_TIM_PeriodElapsedCallback+0xcb8>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 80088d4:	4b89      	ldr	r3, [pc, #548]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 80088d6:	881b      	ldrh	r3, [r3, #0]
 80088d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 80b7 	beq.w	8008a52 <HAL_TIM_PeriodElapsedCallback+0xbc2>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80088e8:	2300      	movs	r3, #0
 80088ea:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 80088ec:	4b84      	ldr	r3, [pc, #528]	; (8008b00 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4b84      	ldr	r3, [pc, #528]	; (8008b04 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	b21a      	sxth	r2, r3
 80088fc:	4b82      	ldr	r3, [pc, #520]	; (8008b08 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 80088fe:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 8008900:	4b79      	ldr	r3, [pc, #484]	; (8008ae8 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b29a      	uxth	r2, r3
 8008906:	4b81      	ldr	r3, [pc, #516]	; (8008b0c <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	b29b      	uxth	r3, r3
 800890e:	b21a      	sxth	r2, r3
 8008910:	4b7f      	ldr	r3, [pc, #508]	; (8008b10 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8008912:	801a      	strh	r2, [r3, #0]

					if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 8008914:	4b7c      	ldr	r3, [pc, #496]	; (8008b08 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8008916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800891a:	2b0a      	cmp	r3, #10
 800891c:	dc04      	bgt.n	8008928 <HAL_TIM_PeriodElapsedCallback+0xa98>
 800891e:	4b7c      	ldr	r3, [pc, #496]	; (8008b10 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8008920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008924:	2b0a      	cmp	r3, #10
 8008926:	dd6e      	ble.n	8008a06 <HAL_TIM_PeriodElapsedCallback+0xb76>
						if(CTRL_BASE_L < dif_l){
 8008928:	4b77      	ldr	r3, [pc, #476]	; (8008b08 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800892a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800892e:	2b0a      	cmp	r3, #10
 8008930:	dd30      	ble.n	8008994 <HAL_TIM_PeriodElapsedCallback+0xb04>
							dwl_tmp += CTRL_CONT_W * dif_l;				//a比例制御値を決定
 8008932:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800893e:	4b72      	ldr	r3, [pc, #456]	; (8008b08 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8008940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800894c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008950:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800895c:	ee17 3a90 	vmov	r3, s15
 8008960:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += -1 * CTRL_CONT_W * dif_l;		//a比例制御値を決定
 8008962:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800896e:	4b66      	ldr	r3, [pc, #408]	; (8008b08 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8008970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800897c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8008980:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800898c:	ee17 3a90 	vmov	r3, s15
 8008990:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008992:	e034      	b.n	80089fe <HAL_TIM_PeriodElapsedCallback+0xb6e>
						}
						else if(CTRL_BASE_R < dif_r){
 8008994:	4b5e      	ldr	r3, [pc, #376]	; (8008b10 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 8008996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800899a:	2b0a      	cmp	r3, #10
 800899c:	dd2f      	ble.n	80089fe <HAL_TIM_PeriodElapsedCallback+0xb6e>
							dwl_tmp += -1 * CTRL_CONT_W * dif_r;		//a比例制御値を決定
 800899e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089aa:	4b59      	ldr	r3, [pc, #356]	; (8008b10 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80089ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b0:	ee07 3a90 	vmov	s15, r3
 80089b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089b8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80089bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089c8:	ee17 3a90 	vmov	r3, s15
 80089cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += CTRL_CONT_W * dif_r;				//a比例制御値を決定
 80089ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089da:	4b4d      	ldr	r3, [pc, #308]	; (8008b10 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 80089dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80089ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089f8:	ee17 3a90 	vmov	r3, s15
 80089fc:	857b      	strh	r3, [r7, #42]	; 0x2a
						}
						W_G_flag = 1;
 80089fe:	4b45      	ldr	r3, [pc, #276]	; (8008b14 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e002      	b.n	8008a0c <HAL_TIM_PeriodElapsedCallback+0xb7c>
					}else{
						W_G_flag = 0;
 8008a06:	4b43      	ldr	r3, [pc, #268]	; (8008b14 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 8008a0c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008a10:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008a14:	dd08      	ble.n	8008a28 <HAL_TIM_PeriodElapsedCallback+0xb98>
 8008a16:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008a1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a1e:	bfa8      	it	ge
 8008a20:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8008a24:	b21b      	sxth	r3, r3
 8008a26:	e000      	b.n	8008a2a <HAL_TIM_PeriodElapsedCallback+0xb9a>
 8008a28:	4b3b      	ldr	r3, [pc, #236]	; (8008b18 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8008a2a:	4a3c      	ldr	r2, [pc, #240]	; (8008b1c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8008a2c:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 8008a2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008a32:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008a36:	dd08      	ble.n	8008a4a <HAL_TIM_PeriodElapsedCallback+0xbba>
 8008a38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008a3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a40:	bfa8      	it	ge
 8008a42:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8008a46:	b21b      	sxth	r3, r3
 8008a48:	e000      	b.n	8008a4c <HAL_TIM_PeriodElapsedCallback+0xbbc>
 8008a4a:	4b33      	ldr	r3, [pc, #204]	; (8008b18 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8008a4c:	4a34      	ldr	r2, [pc, #208]	; (8008b20 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8008a4e:	8013      	strh	r3, [r2, #0]
 8008a50:	e006      	b.n	8008a60 <HAL_TIM_PeriodElapsedCallback+0xbd0>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 8008a52:	2100      	movs	r1, #0
 8008a54:	4b32      	ldr	r3, [pc, #200]	; (8008b20 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 8008a56:	460a      	mov	r2, r1
 8008a58:	801a      	strh	r2, [r3, #0]
 8008a5a:	4b30      	ldr	r3, [pc, #192]	; (8008b1c <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d064      	beq.n	8008b38 <HAL_TIM_PeriodElapsedCallback+0xca8>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (degree_z - target_degree_z);		//角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 8008a6e:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <HAL_TIM_PeriodElapsedCallback+0xc94>)
 8008a70:	ed93 7a00 	vldr	s14, [r3]
 8008a74:	4b2c      	ldr	r3, [pc, #176]	; (8008b28 <HAL_TIM_PeriodElapsedCallback+0xc98>)
 8008a76:	edd3 7a00 	vldr	s15, [r3]
 8008a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a82:	ee17 3a90 	vmov	r3, s15
 8008a86:	b21a      	sxth	r2, r3
 8008a88:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008a8a:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 8008a8c:	4b27      	ldr	r3, [pc, #156]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b21b      	sxth	r3, r3
 8008a92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a96:	da05      	bge.n	8008aa4 <HAL_TIM_PeriodElapsedCallback+0xc14>
 8008a98:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b21b      	sxth	r3, r3
 8008a9e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008aa2:	dd0c      	ble.n	8008abe <HAL_TIM_PeriodElapsedCallback+0xc2e>
 8008aa4:	4b21      	ldr	r3, [pc, #132]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b21b      	sxth	r3, r3
 8008aaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008aae:	da03      	bge.n	8008ab8 <HAL_TIM_PeriodElapsedCallback+0xc28>
 8008ab0:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b21b      	sxth	r3, r3
 8008ab6:	e003      	b.n	8008ac0 <HAL_TIM_PeriodElapsedCallback+0xc30>
 8008ab8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008abc:	e000      	b.n	8008ac0 <HAL_TIM_PeriodElapsedCallback+0xc30>
 8008abe:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 8008ac0:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008ac2:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 8008ac4:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	b21a      	sxth	r2, r3
 8008aca:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 8008acc:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 8008ace:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <HAL_TIM_PeriodElapsedCallback+0xc9c>)
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	b21b      	sxth	r3, r3
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	425b      	negs	r3, r3
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b21a      	sxth	r2, r3
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 8008ade:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}

				break;
 8008ae0:	e031      	b.n	8008b46 <HAL_TIM_PeriodElapsedCallback+0xcb6>
 8008ae2:	bf00      	nop
 8008ae4:	20000a7c 	.word	0x20000a7c
 8008ae8:	20000ee0 	.word	0x20000ee0
 8008aec:	40020000 	.word	0x40020000
 8008af0:	40020800 	.word	0x40020800
 8008af4:	20000cd4 	.word	0x20000cd4
 8008af8:	20000b80 	.word	0x20000b80
 8008afc:	20000ee4 	.word	0x20000ee4
 8008b00:	20000a78 	.word	0x20000a78
 8008b04:	200003c8 	.word	0x200003c8
 8008b08:	20000acc 	.word	0x20000acc
 8008b0c:	2000033c 	.word	0x2000033c
 8008b10:	20000b2e 	.word	0x20000b2e
 8008b14:	20000b74 	.word	0x20000b74
 8008b18:	fffff830 	.word	0xfffff830
 8008b1c:	20000a74 	.word	0x20000a74
 8008b20:	20000ef0 	.word	0x20000ef0
 8008b24:	20000ad8 	.word	0x20000ad8
 8008b28:	20000b78 	.word	0x20000b78
 8008b2c:	20000b90 	.word	0x20000b90
 8008b30:	2000021c 	.word	0x2000021c
 8008b34:	20000aca 	.word	0x20000aca
					dgl = dgr = 0;
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4bba      	ldr	r3, [pc, #744]	; (8008e24 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b3c:	460a      	mov	r2, r1
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	4bb9      	ldr	r3, [pc, #740]	; (8008e28 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8008b42:	460a      	mov	r2, r1
 8008b44:	801a      	strh	r2, [r3, #0]
				break;
 8008b46:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 8008b48:	4bb8      	ldr	r3, [pc, #736]	; (8008e2c <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 8142 	beq.w	8008ddc <HAL_TIM_PeriodElapsedCallback+0xf4c>
			if(W_G_flag == 0){
 8008b58:	4bb5      	ldr	r3, [pc, #724]	; (8008e30 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d130      	bne.n	8008bc2 <HAL_TIM_PeriodElapsedCallback+0xd32>
				pulse_l = pulse_l + dgl + dwl;
 8008b60:	4bb1      	ldr	r3, [pc, #708]	; (8008e28 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b21b      	sxth	r3, r3
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b6e:	4bb1      	ldr	r3, [pc, #708]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008b70:	edd3 7a00 	vldr	s15, [r3]
 8008b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b78:	4baf      	ldr	r3, [pc, #700]	; (8008e38 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b8a:	4baa      	ldr	r3, [pc, #680]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008b8c:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 8008b90:	4ba4      	ldr	r3, [pc, #656]	; (8008e24 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b21b      	sxth	r3, r3
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b9e:	4ba7      	ldr	r3, [pc, #668]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008ba0:	edd3 7a00 	vldr	s15, [r3]
 8008ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ba8:	4ba5      	ldr	r3, [pc, #660]	; (8008e40 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b21b      	sxth	r3, r3
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bba:	4ba0      	ldr	r3, [pc, #640]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008bbc:	edc3 7a00 	vstr	s15, [r3]
 8008bc0:	e01d      	b.n	8008bfe <HAL_TIM_PeriodElapsedCallback+0xd6e>
			}else{
				pulse_l = pulse_l + dwl;
 8008bc2:	4b9d      	ldr	r3, [pc, #628]	; (8008e38 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b21b      	sxth	r3, r3
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bd0:	4b98      	ldr	r3, [pc, #608]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008bd2:	edd3 7a00 	vldr	s15, [r3]
 8008bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bda:	4b96      	ldr	r3, [pc, #600]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008bdc:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 8008be0:	4b97      	ldr	r3, [pc, #604]	; (8008e40 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b21b      	sxth	r3, r3
 8008be6:	ee07 3a90 	vmov	s15, r3
 8008bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bee:	4b93      	ldr	r3, [pc, #588]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008bf0:	edd3 7a00 	vldr	s15, [r3]
 8008bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bf8:	4b90      	ldr	r3, [pc, #576]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008bfa:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 8008bfe:	4b8d      	ldr	r3, [pc, #564]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008c00:	edd3 7a00 	vldr	s15, [r3]
 8008c04:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8008e44 <HAL_TIM_PeriodElapsedCallback+0xfb4>
 8008c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c10:	bfcc      	ite	gt
 8008c12:	2301      	movgt	r3, #1
 8008c14:	2300      	movle	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f083 0301 	eor.w	r3, r3, #1
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d111      	bne.n	8008c46 <HAL_TIM_PeriodElapsedCallback+0xdb6>
 8008c22:	4b84      	ldr	r3, [pc, #528]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008c24:	edd3 7a00 	vldr	s15, [r3]
 8008c28:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8008e48 <HAL_TIM_PeriodElapsedCallback+0xfb8>
 8008c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	bfcc      	ite	gt
 8008c36:	2301      	movgt	r3, #1
 8008c38:	2300      	movle	r3, #0
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f083 0301 	eor.w	r3, r3, #1
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <HAL_TIM_PeriodElapsedCallback+0xdd4>
 8008c46:	4b7b      	ldr	r3, [pc, #492]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008c48:	edd3 7a00 	vldr	s15, [r3]
 8008c4c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008e44 <HAL_TIM_PeriodElapsedCallback+0xfb4>
 8008c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c58:	dd02      	ble.n	8008c60 <HAL_TIM_PeriodElapsedCallback+0xdd0>
 8008c5a:	4b76      	ldr	r3, [pc, #472]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	e002      	b.n	8008c66 <HAL_TIM_PeriodElapsedCallback+0xdd6>
 8008c60:	4b7a      	ldr	r3, [pc, #488]	; (8008e4c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8008c62:	e000      	b.n	8008c66 <HAL_TIM_PeriodElapsedCallback+0xdd6>
 8008c64:	4b7a      	ldr	r3, [pc, #488]	; (8008e50 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8008c66:	4a73      	ldr	r2, [pc, #460]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008c68:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 8008c6a:	4b74      	ldr	r3, [pc, #464]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008c6c:	edd3 7a00 	vldr	s15, [r3]
 8008c70:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008e44 <HAL_TIM_PeriodElapsedCallback+0xfb4>
 8008c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7c:	bfcc      	ite	gt
 8008c7e:	2301      	movgt	r3, #1
 8008c80:	2300      	movle	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f083 0301 	eor.w	r3, r3, #1
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d111      	bne.n	8008cb2 <HAL_TIM_PeriodElapsedCallback+0xe22>
 8008c8e:	4b6b      	ldr	r3, [pc, #428]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008c90:	edd3 7a00 	vldr	s15, [r3]
 8008c94:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008e48 <HAL_TIM_PeriodElapsedCallback+0xfb8>
 8008c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca0:	bfcc      	ite	gt
 8008ca2:	2301      	movgt	r3, #1
 8008ca4:	2300      	movle	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f083 0301 	eor.w	r3, r3, #1
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00e      	beq.n	8008cd0 <HAL_TIM_PeriodElapsedCallback+0xe40>
 8008cb2:	4b62      	ldr	r3, [pc, #392]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008cb4:	edd3 7a00 	vldr	s15, [r3]
 8008cb8:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8008e44 <HAL_TIM_PeriodElapsedCallback+0xfb4>
 8008cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc4:	dd02      	ble.n	8008ccc <HAL_TIM_PeriodElapsedCallback+0xe3c>
 8008cc6:	4b5d      	ldr	r3, [pc, #372]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	e002      	b.n	8008cd2 <HAL_TIM_PeriodElapsedCallback+0xe42>
 8008ccc:	4b5f      	ldr	r3, [pc, #380]	; (8008e4c <HAL_TIM_PeriodElapsedCallback+0xfbc>)
 8008cce:	e000      	b.n	8008cd2 <HAL_TIM_PeriodElapsedCallback+0xe42>
 8008cd0:	4b5f      	ldr	r3, [pc, #380]	; (8008e50 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8008cd2:	4a5a      	ldr	r2, [pc, #360]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008cd4:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 8008cd6:	4b57      	ldr	r3, [pc, #348]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008cd8:	edd3 7a00 	vldr	s15, [r3]
 8008cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce4:	dd17      	ble.n	8008d16 <HAL_TIM_PeriodElapsedCallback+0xe86>
				drive_dir(0, 0);
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	2000      	movs	r0, #0
 8008cea:	f7fc f84f 	bl	8004d8c <drive_dir>
				ConfigOC.Pulse = pulse_l;
 8008cee:	4b51      	ldr	r3, [pc, #324]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008cf0:	edd3 7a00 	vldr	s15, [r3]
 8008cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf8:	ee17 3a90 	vmov	r3, s15
 8008cfc:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8008cfe:	f107 030c 	add.w	r3, r7, #12
 8008d02:	2200      	movs	r2, #0
 8008d04:	4619      	mov	r1, r3
 8008d06:	4853      	ldr	r0, [pc, #332]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008d08:	f7fa ff38 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4851      	ldr	r0, [pc, #324]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008d10:	f7fa fccc 	bl	80036ac <HAL_TIM_PWM_Start>
 8008d14:	e020      	b.n	8008d58 <HAL_TIM_PeriodElapsedCallback+0xec8>
			}
			else if(pulse_l < 0){
 8008d16:	4b47      	ldr	r3, [pc, #284]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008d18:	edd3 7a00 	vldr	s15, [r3]
 8008d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d24:	d518      	bpl.n	8008d58 <HAL_TIM_PeriodElapsedCallback+0xec8>
				drive_dir(0, 1);
 8008d26:	2101      	movs	r1, #1
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f7fc f82f 	bl	8004d8c <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 8008d2e:	4b41      	ldr	r3, [pc, #260]	; (8008e34 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008d30:	edd3 7a00 	vldr	s15, [r3]
 8008d34:	eef1 7a67 	vneg.f32	s15, s15
 8008d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d3c:	ee17 3a90 	vmov	r3, s15
 8008d40:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	2200      	movs	r2, #0
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4842      	ldr	r0, [pc, #264]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008d4c:	f7fa ff16 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8008d50:	2100      	movs	r1, #0
 8008d52:	4840      	ldr	r0, [pc, #256]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008d54:	f7fa fcaa 	bl	80036ac <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 8008d58:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008d5a:	edd3 7a00 	vldr	s15, [r3]
 8008d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d66:	dd17      	ble.n	8008d98 <HAL_TIM_PeriodElapsedCallback+0xf08>
				drive_dir(1, 0);
 8008d68:	2100      	movs	r1, #0
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	f7fc f80e 	bl	8004d8c <drive_dir>
				ConfigOC.Pulse = pulse_r;
 8008d70:	4b32      	ldr	r3, [pc, #200]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008d72:	edd3 7a00 	vldr	s15, [r3]
 8008d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d7a:	ee17 3a90 	vmov	r3, s15
 8008d7e:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8008d80:	f107 030c 	add.w	r3, r7, #12
 8008d84:	220c      	movs	r2, #12
 8008d86:	4619      	mov	r1, r3
 8008d88:	4832      	ldr	r0, [pc, #200]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008d8a:	f7fa fef7 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8008d8e:	210c      	movs	r1, #12
 8008d90:	4830      	ldr	r0, [pc, #192]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008d92:	f7fa fc8b 	bl	80036ac <HAL_TIM_PWM_Start>
 8008d96:	e029      	b.n	8008dec <HAL_TIM_PeriodElapsedCallback+0xf5c>
			}
			else if(pulse_r < 0){
 8008d98:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008d9a:	edd3 7a00 	vldr	s15, [r3]
 8008d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da6:	d521      	bpl.n	8008dec <HAL_TIM_PeriodElapsedCallback+0xf5c>
				drive_dir(1, 1);
 8008da8:	2101      	movs	r1, #1
 8008daa:	2001      	movs	r0, #1
 8008dac:	f7fb ffee 	bl	8004d8c <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 8008db0:	4b22      	ldr	r3, [pc, #136]	; (8008e3c <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8008db2:	edd3 7a00 	vldr	s15, [r3]
 8008db6:	eef1 7a67 	vneg.f32	s15, s15
 8008dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dbe:	ee17 3a90 	vmov	r3, s15
 8008dc2:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 8008dc4:	f107 030c 	add.w	r3, r7, #12
 8008dc8:	220c      	movs	r2, #12
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4821      	ldr	r0, [pc, #132]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008dce:	f7fa fed5 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8008dd2:	210c      	movs	r1, #12
 8008dd4:	481f      	ldr	r0, [pc, #124]	; (8008e54 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8008dd6:	f7fa fc69 	bl	80036ac <HAL_TIM_PWM_Start>
 8008dda:	e007      	b.n	8008dec <HAL_TIM_PeriodElapsedCallback+0xf5c>
			}
		}else{
			drive_dir(0, 2);
 8008ddc:	2102      	movs	r1, #2
 8008dde:	2000      	movs	r0, #0
 8008de0:	f7fb ffd4 	bl	8004d8c <drive_dir>
			drive_dir(1, 2);
 8008de4:	2102      	movs	r1, #2
 8008de6:	2001      	movs	r0, #1
 8008de8:	f7fb ffd0 	bl	8004d8c <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 8008dec:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b28      	cmp	r3, #40	; 0x28
 8008df2:	d906      	bls.n	8008e02 <HAL_TIM_PeriodElapsedCallback+0xf72>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8008df4:	2201      	movs	r2, #1
 8008df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dfa:	4818      	ldr	r0, [pc, #96]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8008dfc:	f7f9 fa5a 	bl	80022b4 <HAL_GPIO_WritePin>
 8008e00:	e005      	b.n	8008e0e <HAL_TIM_PeriodElapsedCallback+0xf7e>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8008e02:	2200      	movs	r2, #0
 8008e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e08:	4814      	ldr	r0, [pc, #80]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8008e0a:	f7f9 fa53 	bl	80022b4 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 8008e0e:	4b14      	ldr	r3, [pc, #80]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b28      	cmp	r3, #40	; 0x28
 8008e14:	d928      	bls.n	8008e68 <HAL_TIM_PeriodElapsedCallback+0xfd8>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8008e16:	2201      	movs	r2, #1
 8008e18:	2104      	movs	r1, #4
 8008e1a:	4812      	ldr	r0, [pc, #72]	; (8008e64 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8008e1c:	f7f9 fa4a 	bl	80022b4 <HAL_GPIO_WritePin>
 8008e20:	e027      	b.n	8008e72 <HAL_TIM_PeriodElapsedCallback+0xfe2>
 8008e22:	bf00      	nop
 8008e24:	20000aca 	.word	0x20000aca
 8008e28:	2000021c 	.word	0x2000021c
 8008e2c:	20000ee4 	.word	0x20000ee4
 8008e30:	20000b74 	.word	0x20000b74
 8008e34:	20000b24 	.word	0x20000b24
 8008e38:	20000a74 	.word	0x20000a74
 8008e3c:	200006f8 	.word	0x200006f8
 8008e40:	20000ef0 	.word	0x20000ef0
 8008e44:	c47a0000 	.word	0xc47a0000
 8008e48:	447a0000 	.word	0x447a0000
 8008e4c:	c47a0000 	.word	0xc47a0000
 8008e50:	447a0000 	.word	0x447a0000
 8008e54:	20000b94 	.word	0x20000b94
 8008e58:	20000ee0 	.word	0x20000ee0
 8008e5c:	40020400 	.word	0x40020400
 8008e60:	20000a78 	.word	0x20000a78
 8008e64:	40020800 	.word	0x40020800
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2104      	movs	r1, #4
 8008e6c:	482d      	ldr	r0, [pc, #180]	; (8008f24 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8008e6e:	f7f9 fa21 	bl	80022b4 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 8008e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e76:	482c      	ldr	r0, [pc, #176]	; (8008f28 <HAL_TIM_PeriodElapsedCallback+0x1098>)
 8008e78:	f7f9 fa04 	bl	8002284 <HAL_GPIO_ReadPin>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d105      	bne.n	8008e8e <HAL_TIM_PeriodElapsedCallback+0xffe>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8008e82:	2201      	movs	r2, #1
 8008e84:	2108      	movs	r1, #8
 8008e86:	4827      	ldr	r0, [pc, #156]	; (8008f24 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8008e88:	f7f9 fa14 	bl	80022b4 <HAL_GPIO_WritePin>
 8008e8c:	e004      	b.n	8008e98 <HAL_TIM_PeriodElapsedCallback+0x1008>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2108      	movs	r1, #8
 8008e92:	4824      	ldr	r0, [pc, #144]	; (8008f24 <HAL_TIM_PeriodElapsedCallback+0x1094>)
 8008e94:	f7f9 fa0e 	bl	80022b4 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+360 || degree_z <= target_degree_z-360 || dist_r >= 360 || dist_l >= 360){	//360度以上回転発生でFail Safe
 8008e98:	4b24      	ldr	r3, [pc, #144]	; (8008f2c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 8008e9a:	edd3 7a00 	vldr	s15, [r3]
 8008e9e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8008f30 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8008ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ea6:	4b23      	ldr	r3, [pc, #140]	; (8008f34 <HAL_TIM_PeriodElapsedCallback+0x10a4>)
 8008ea8:	edd3 7a00 	vldr	s15, [r3]
 8008eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb4:	d923      	bls.n	8008efe <HAL_TIM_PeriodElapsedCallback+0x106e>
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	; (8008f2c <HAL_TIM_PeriodElapsedCallback+0x109c>)
 8008eb8:	edd3 7a00 	vldr	s15, [r3]
 8008ebc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008f30 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8008ec0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008ec4:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <HAL_TIM_PeriodElapsedCallback+0x10a4>)
 8008ec6:	edd3 7a00 	vldr	s15, [r3]
 8008eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed2:	da14      	bge.n	8008efe <HAL_TIM_PeriodElapsedCallback+0x106e>
 8008ed4:	4b18      	ldr	r3, [pc, #96]	; (8008f38 <HAL_TIM_PeriodElapsedCallback+0x10a8>)
 8008ed6:	edd3 7a00 	vldr	s15, [r3]
 8008eda:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008f30 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8008ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee6:	da0a      	bge.n	8008efe <HAL_TIM_PeriodElapsedCallback+0x106e>
 8008ee8:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <HAL_TIM_PeriodElapsedCallback+0x10ac>)
 8008eea:	edd3 7a00 	vldr	s15, [r3]
 8008eee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008f30 <HAL_TIM_PeriodElapsedCallback+0x10a0>
 8008ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efa:	da00      	bge.n	8008efe <HAL_TIM_PeriodElapsedCallback+0x106e>
			   drive_dir(1, 2);
			   full_led_write(1);
		   }
		}
	}
}
 8008efc:	e00b      	b.n	8008f16 <HAL_TIM_PeriodElapsedCallback+0x1086>
			   drive_dir(0, 2);
 8008efe:	2102      	movs	r1, #2
 8008f00:	2000      	movs	r0, #0
 8008f02:	f7fb ff43 	bl	8004d8c <drive_dir>
			   drive_dir(1, 2);
 8008f06:	2102      	movs	r1, #2
 8008f08:	2001      	movs	r0, #1
 8008f0a:	f7fb ff3f 	bl	8004d8c <drive_dir>
			   full_led_write(1);
 8008f0e:	2001      	movs	r0, #1
 8008f10:	f002 fd28 	bl	800b964 <full_led_write>
			   drive_dir(0, 2);
 8008f14:	e7f3      	b.n	8008efe <HAL_TIM_PeriodElapsedCallback+0x106e>
}
 8008f16:	bf00      	nop
 8008f18:	3730      	adds	r7, #48	; 0x30
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	ecbd 8b02 	vpop	{d8}
 8008f20:	bdb0      	pop	{r4, r5, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	40020800 	.word	0x40020800
 8008f28:	40020400 	.word	0x40020400
 8008f2c:	20000b78 	.word	0x20000b78
 8008f30:	43b40000 	.word	0x43b40000
 8008f34:	20000ad8 	.word	0x20000ad8
 8008f38:	20000a68 	.word	0x20000a68
 8008f3c:	20000f00 	.word	0x20000f00

08008f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008f46:	f7f7 ffcf 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008f4a:	f000 f933 	bl	80091b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008f4e:	f000 fc25 	bl	800979c <MX_GPIO_Init>
  MX_ADC1_Init();
 8008f52:	f000 f999 	bl	8009288 <MX_ADC1_Init>
  MX_TIM2_Init();
 8008f56:	f000 fa1f 	bl	8009398 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008f5a:	f000 fa9d 	bl	8009498 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008f5e:	f000 fb11 	bl	8009584 <MX_TIM4_Init>
  MX_TIM6_Init();
 8008f62:	f000 fb63 	bl	800962c <MX_TIM6_Init>
  MX_TIM8_Init();
 8008f66:	f000 fb97 	bl	8009698 <MX_TIM8_Init>
  MX_SPI3_Init();
 8008f6a:	f000 f9df 	bl	800932c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8008f6e:	f000 fbeb 	bl	8009748 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 8008f72:	f7fb fe4b 	bl	8004c0c <drive_init>
  gyro_init();
 8008f76:	f7fe fdaf 	bl	8007ad8 <gyro_init>
  search_init();
 8008f7a:	f000 fd3d 	bl	80099f8 <search_init>
  sensor_init();
 8008f7e:	f002 fc31 	bl	800b7e4 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 8008f82:	487c      	ldr	r0, [pc, #496]	; (8009174 <main+0x234>)
 8008f84:	f003 faf6 	bl	800c574 <puts>

  setbuf(stdout, NULL);
 8008f88:	4b7b      	ldr	r3, [pc, #492]	; (8009178 <main+0x238>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f003 faf7 	bl	800c584 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8008f96:	213c      	movs	r1, #60	; 0x3c
 8008f98:	4878      	ldr	r0, [pc, #480]	; (800917c <main+0x23c>)
 8008f9a:	f7fa fcaf 	bl	80038fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8008f9e:	213c      	movs	r1, #60	; 0x3c
 8008fa0:	4877      	ldr	r0, [pc, #476]	; (8009180 <main+0x240>)
 8008fa2:	f7fa fcab 	bl	80038fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8008fa6:	4877      	ldr	r0, [pc, #476]	; (8009184 <main+0x244>)
 8008fa8:	f7fa fb27 	bl	80035fa <HAL_TIM_Base_Start_IT>

  int mode = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
  printf("Mode : %d\n", mode);
 8008fb0:	68f9      	ldr	r1, [r7, #12]
 8008fb2:	4875      	ldr	r0, [pc, #468]	; (8009188 <main+0x248>)
 8008fb4:	f003 fa6a 	bl	800c48c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	b2d8      	uxtb	r0, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	b2d9      	uxtb	r1, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f002 fc8a 	bl	800b8f0 <led_write>
	  if(dist_r >= 20){
 8008fdc:	4b6b      	ldr	r3, [pc, #428]	; (800918c <main+0x24c>)
 8008fde:	edd3 7a00 	vldr	s15, [r3]
 8008fe2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fee:	db0f      	blt.n	8009010 <main+0xd0>
		  mode++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]
		  dist_r = 0;
 8008ff6:	4b65      	ldr	r3, [pc, #404]	; (800918c <main+0x24c>)
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b07      	cmp	r3, #7
 8009002:	dd01      	ble.n	8009008 <main+0xc8>
			  mode = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
		  }
		  printf("Mode : %d\n", mode);
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	485f      	ldr	r0, [pc, #380]	; (8009188 <main+0x248>)
 800900c:	f003 fa3e 	bl	800c48c <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 8009010:	4b5e      	ldr	r3, [pc, #376]	; (800918c <main+0x24c>)
 8009012:	edd3 7a00 	vldr	s15, [r3]
 8009016:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800901a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009022:	d80f      	bhi.n	8009044 <main+0x104>
		  mode--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3b01      	subs	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
		  dist_r = 0;
 800902a:	4b58      	ldr	r3, [pc, #352]	; (800918c <main+0x24c>)
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da01      	bge.n	800903c <main+0xfc>
			  mode = 7;
 8009038:	2307      	movs	r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
		  }
		  printf("Mode : %d\n", mode);
 800903c:	68f9      	ldr	r1, [r7, #12]
 800903e:	4852      	ldr	r0, [pc, #328]	; (8009188 <main+0x248>)
 8009040:	f003 fa24 	bl	800c48c <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009048:	4851      	ldr	r0, [pc, #324]	; (8009190 <main+0x250>)
 800904a:	f7f9 f91b 	bl	8002284 <HAL_GPIO_ReadPin>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1b1      	bne.n	8008fb8 <main+0x78>
		  HAL_Delay(50);
 8009054:	2032      	movs	r0, #50	; 0x32
 8009056:	f7f7 ffb9 	bl	8000fcc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800905a:	bf00      	nop
 800905c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009060:	484b      	ldr	r0, [pc, #300]	; (8009190 <main+0x250>)
 8009062:	f7f9 f90f 	bl	8002284 <HAL_GPIO_ReadPin>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0f7      	beq.n	800905c <main+0x11c>
		  switch(mode){
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b07      	cmp	r3, #7
 8009070:	d8a2      	bhi.n	8008fb8 <main+0x78>
 8009072:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <main+0x138>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	08009099 	.word	0x08009099
 800907c:	080090a3 	.word	0x080090a3
 8009080:	080090af 	.word	0x080090af
 8009084:	080090bb 	.word	0x080090bb
 8009088:	080090cd 	.word	0x080090cd
 800908c:	080090d3 	.word	0x080090d3
 8009090:	080090ff 	.word	0x080090ff
 8009094:	08009141 	.word	0x08009141

		  	  case 0:
		  		  HAL_Delay(5000);
 8009098:	f241 3088 	movw	r0, #5000	; 0x1388
 800909c:	f7f7 ff96 	bl	8000fcc <HAL_Delay>
		  		  break;
 80090a0:	e066      	b.n	8009170 <main+0x230>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 80090a2:	483c      	ldr	r0, [pc, #240]	; (8009194 <main+0x254>)
 80090a4:	f003 fa66 	bl	800c574 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 80090a8:	f7fd fcfe 	bl	8006aa8 <simple_run>
		  		  break;
 80090ac:	e060      	b.n	8009170 <main+0x230>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 80090ae:	483a      	ldr	r0, [pc, #232]	; (8009198 <main+0x258>)
 80090b0:	f003 fa60 	bl	800c574 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 80090b4:	f7fd fdfc 	bl	8006cb0 <slalom_run>
		  		  break;
 80090b8:	e05a      	b.n	8009170 <main+0x230>

		  	  case 3:
		  		  //----flash 動作確認----
		  		  printf("eprom start \n");
 80090ba:	4838      	ldr	r0, [pc, #224]	; (800919c <main+0x25c>)
 80090bc:	f003 fa5a 	bl	800c574 <puts>
		  		  store_map_in_eeprom();
 80090c0:	f002 fb2a 	bl	800b718 <store_map_in_eeprom>
		  		  printf("eprom fin \n");
 80090c4:	4836      	ldr	r0, [pc, #216]	; (80091a0 <main+0x260>)
 80090c6:	f003 fa55 	bl	800c574 <puts>
		  		  break;
 80090ca:	e051      	b.n	8009170 <main+0x230>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 80090cc:	f7fd f948 	bl	8006360 <test_select>
		  		  break;
 80090d0:	e04e      	b.n	8009170 <main+0x230>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 80090d2:	4834      	ldr	r0, [pc, #208]	; (80091a4 <main+0x264>)
 80090d4:	f003 fa4e 	bl	800c574 <puts>
		  		  sensor_test();
 80090d8:	f002 fd00 	bl	800badc <sensor_test>
		  		  break;
 80090dc:	e048      	b.n	8009170 <main+0x230>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 80090de:	2201      	movs	r2, #1
 80090e0:	2101      	movs	r1, #1
 80090e2:	2001      	movs	r0, #1
 80090e4:	f002 fc04 	bl	800b8f0 <led_write>
					  HAL_Delay(200);
 80090e8:	20c8      	movs	r0, #200	; 0xc8
 80090ea:	f7f7 ff6f 	bl	8000fcc <HAL_Delay>
					  led_write(0, 0, 0);
 80090ee:	2200      	movs	r2, #0
 80090f0:	2100      	movs	r1, #0
 80090f2:	2000      	movs	r0, #0
 80090f4:	f002 fbfc 	bl	800b8f0 <led_write>
					  HAL_Delay(200);
 80090f8:	20c8      	movs	r0, #200	; 0xc8
 80090fa:	f7f7 ff67 	bl	8000fcc <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 80090fe:	4b2a      	ldr	r3, [pc, #168]	; (80091a8 <main+0x268>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b46      	cmp	r3, #70	; 0x46
 8009104:	d9eb      	bls.n	80090de <main+0x19e>
				  }
				  HAL_Delay(200);
 8009106:	20c8      	movs	r0, #200	; 0xc8
 8009108:	f7f7 ff60 	bl	8000fcc <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800910c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009110:	f7f7 ff5c 	bl	8000fcc <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]
 8009118:	e00e      	b.n	8009138 <main+0x1f8>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800911a:	4a24      	ldr	r2, [pc, #144]	; (80091ac <main+0x26c>)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009122:	4a22      	ldr	r2, [pc, #136]	; (80091ac <main+0x26c>)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	4413      	add	r3, r2
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4619      	mov	r1, r3
 800912e:	f000 fbf3 	bl	8009918 <buzzer>
				  for(int i=0; i<m_goal; i++){
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	3301      	adds	r3, #1
 8009136:	60bb      	str	r3, [r7, #8]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b0e      	cmp	r3, #14
 800913c:	dded      	ble.n	800911a <main+0x1da>
		  		  }
		  		  break;
 800913e:	e017      	b.n	8009170 <main+0x230>

		  	  case 7:
		  		  //----a本番走行用----
		  		  //MF.FLAG.WEDGE = 1;
		  		  for(int i=0; i<m_select; i++){
 8009140:	2300      	movs	r3, #0
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	e00e      	b.n	8009164 <main+0x224>
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
 8009146:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <main+0x270>)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800914e:	4a18      	ldr	r2, [pc, #96]	; (80091b0 <main+0x270>)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	4619      	mov	r1, r3
 800915a:	f000 fbdd 	bl	8009918 <buzzer>
		  		  for(int i=0; i<m_select; i++){
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3301      	adds	r3, #1
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b01      	cmp	r3, #1
 8009168:	dded      	ble.n	8009146 <main+0x206>
		  		  }
		  		  perfect_run();
 800916a:	f7fe f89b 	bl	80072a4 <perfect_run>
		  		  break;
 800916e:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009170:	e722      	b.n	8008fb8 <main+0x78>
 8009172:	bf00      	nop
 8009174:	0800d944 	.word	0x0800d944
 8009178:	20000104 	.word	0x20000104
 800917c:	20000388 	.word	0x20000388
 8009180:	20000348 	.word	0x20000348
 8009184:	20000b30 	.word	0x20000b30
 8009188:	0800d960 	.word	0x0800d960
 800918c:	20000a68 	.word	0x20000a68
 8009190:	40020000 	.word	0x40020000
 8009194:	0800d96c 	.word	0x0800d96c
 8009198:	0800d978 	.word	0x0800d978
 800919c:	0800d984 	.word	0x0800d984
 80091a0:	0800d994 	.word	0x0800d994
 80091a4:	0800d9a0 	.word	0x0800d9a0
 80091a8:	20000cd4 	.word	0x20000cd4
 80091ac:	20000088 	.word	0x20000088
 80091b0:	20000040 	.word	0x20000040

080091b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b094      	sub	sp, #80	; 0x50
 80091b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091ba:	f107 0320 	add.w	r3, r7, #32
 80091be:	2230      	movs	r2, #48	; 0x30
 80091c0:	2100      	movs	r1, #0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f003 f95a 	bl	800c47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	605a      	str	r2, [r3, #4]
 80091d2:	609a      	str	r2, [r3, #8]
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80091d8:	2300      	movs	r3, #0
 80091da:	60bb      	str	r3, [r7, #8]
 80091dc:	4b28      	ldr	r3, [pc, #160]	; (8009280 <SystemClock_Config+0xcc>)
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	4a27      	ldr	r2, [pc, #156]	; (8009280 <SystemClock_Config+0xcc>)
 80091e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e6:	6413      	str	r3, [r2, #64]	; 0x40
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <SystemClock_Config+0xcc>)
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091f4:	2300      	movs	r3, #0
 80091f6:	607b      	str	r3, [r7, #4]
 80091f8:	4b22      	ldr	r3, [pc, #136]	; (8009284 <SystemClock_Config+0xd0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a21      	ldr	r2, [pc, #132]	; (8009284 <SystemClock_Config+0xd0>)
 80091fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	4b1f      	ldr	r3, [pc, #124]	; (8009284 <SystemClock_Config+0xd0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920c:	607b      	str	r3, [r7, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009210:	2302      	movs	r3, #2
 8009212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009214:	2301      	movs	r3, #1
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009218:	2310      	movs	r3, #16
 800921a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800921c:	2302      	movs	r3, #2
 800921e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009224:	2308      	movs	r3, #8
 8009226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009228:	23a8      	movs	r3, #168	; 0xa8
 800922a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800922c:	2302      	movs	r3, #2
 800922e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009230:	2304      	movs	r3, #4
 8009232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009234:	f107 0320 	add.w	r3, r7, #32
 8009238:	4618      	mov	r0, r3
 800923a:	f7f9 f855 	bl	80022e8 <HAL_RCC_OscConfig>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009244:	f000 fbd1 	bl	80099ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009248:	230f      	movs	r3, #15
 800924a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800924c:	2302      	movs	r3, #2
 800924e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800925a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800925e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009260:	f107 030c 	add.w	r3, r7, #12
 8009264:	2105      	movs	r1, #5
 8009266:	4618      	mov	r0, r3
 8009268:	f7f9 fa80 	bl	800276c <HAL_RCC_ClockConfig>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009272:	f000 fbba 	bl	80099ea <Error_Handler>
  }
}
 8009276:	bf00      	nop
 8009278:	3750      	adds	r7, #80	; 0x50
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	40023800 	.word	0x40023800
 8009284:	40007000 	.word	0x40007000

08009288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800928e:	463b      	mov	r3, r7
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	609a      	str	r2, [r3, #8]
 8009298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800929a:	4b21      	ldr	r3, [pc, #132]	; (8009320 <MX_ADC1_Init+0x98>)
 800929c:	4a21      	ldr	r2, [pc, #132]	; (8009324 <MX_ADC1_Init+0x9c>)
 800929e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80092a0:	4b1f      	ldr	r3, [pc, #124]	; (8009320 <MX_ADC1_Init+0x98>)
 80092a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80092a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80092a8:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <MX_ADC1_Init+0x98>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80092ae:	4b1c      	ldr	r3, [pc, #112]	; (8009320 <MX_ADC1_Init+0x98>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80092b4:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <MX_ADC1_Init+0x98>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80092ba:	4b19      	ldr	r3, [pc, #100]	; (8009320 <MX_ADC1_Init+0x98>)
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80092c2:	4b17      	ldr	r3, [pc, #92]	; (8009320 <MX_ADC1_Init+0x98>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80092c8:	4b15      	ldr	r3, [pc, #84]	; (8009320 <MX_ADC1_Init+0x98>)
 80092ca:	4a17      	ldr	r2, [pc, #92]	; (8009328 <MX_ADC1_Init+0xa0>)
 80092cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <MX_ADC1_Init+0x98>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80092d4:	4b12      	ldr	r3, [pc, #72]	; (8009320 <MX_ADC1_Init+0x98>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <MX_ADC1_Init+0x98>)
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80092e2:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <MX_ADC1_Init+0x98>)
 80092e4:	2201      	movs	r2, #1
 80092e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80092e8:	480d      	ldr	r0, [pc, #52]	; (8009320 <MX_ADC1_Init+0x98>)
 80092ea:	f7f7 fe91 	bl	8001010 <HAL_ADC_Init>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80092f4:	f000 fb79 	bl	80099ea <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80092fc:	2301      	movs	r3, #1
 80092fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009300:	2300      	movs	r3, #0
 8009302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009304:	463b      	mov	r3, r7
 8009306:	4619      	mov	r1, r3
 8009308:	4805      	ldr	r0, [pc, #20]	; (8009320 <MX_ADC1_Init+0x98>)
 800930a:	f7f8 f81d 	bl	8001348 <HAL_ADC_ConfigChannel>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009314:	f000 fb69 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009318:	bf00      	nop
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20000a7c 	.word	0x20000a7c
 8009324:	40012000 	.word	0x40012000
 8009328:	0f000001 	.word	0x0f000001

0800932c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8009330:	4b17      	ldr	r3, [pc, #92]	; (8009390 <MX_SPI3_Init+0x64>)
 8009332:	4a18      	ldr	r2, [pc, #96]	; (8009394 <MX_SPI3_Init+0x68>)
 8009334:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <MX_SPI3_Init+0x64>)
 8009338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800933c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800933e:	4b14      	ldr	r3, [pc, #80]	; (8009390 <MX_SPI3_Init+0x64>)
 8009340:	2200      	movs	r2, #0
 8009342:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009344:	4b12      	ldr	r3, [pc, #72]	; (8009390 <MX_SPI3_Init+0x64>)
 8009346:	2200      	movs	r2, #0
 8009348:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800934a:	4b11      	ldr	r3, [pc, #68]	; (8009390 <MX_SPI3_Init+0x64>)
 800934c:	2200      	movs	r2, #0
 800934e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <MX_SPI3_Init+0x64>)
 8009352:	2200      	movs	r2, #0
 8009354:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009356:	4b0e      	ldr	r3, [pc, #56]	; (8009390 <MX_SPI3_Init+0x64>)
 8009358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800935c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800935e:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <MX_SPI3_Init+0x64>)
 8009360:	2218      	movs	r2, #24
 8009362:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009364:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <MX_SPI3_Init+0x64>)
 8009366:	2200      	movs	r2, #0
 8009368:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <MX_SPI3_Init+0x64>)
 800936c:	2200      	movs	r2, #0
 800936e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <MX_SPI3_Init+0x64>)
 8009372:	2200      	movs	r2, #0
 8009374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009376:	4b06      	ldr	r3, [pc, #24]	; (8009390 <MX_SPI3_Init+0x64>)
 8009378:	220a      	movs	r2, #10
 800937a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800937c:	4804      	ldr	r0, [pc, #16]	; (8009390 <MX_SPI3_Init+0x64>)
 800937e:	f7f9 fbbd 	bl	8002afc <HAL_SPI_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009388:	f000 fb2f 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800938c:	bf00      	nop
 800938e:	bd80      	pop	{r7, pc}
 8009390:	200001c4 	.word	0x200001c4
 8009394:	40003c00 	.word	0x40003c00

08009398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08e      	sub	sp, #56	; 0x38
 800939c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800939e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	605a      	str	r2, [r3, #4]
 80093a8:	609a      	str	r2, [r3, #8]
 80093aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093ac:	f107 0320 	add.w	r3, r7, #32
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	609a      	str	r2, [r3, #8]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	611a      	str	r2, [r3, #16]
 80093c4:	615a      	str	r2, [r3, #20]
 80093c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80093c8:	4b32      	ldr	r3, [pc, #200]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80093ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80093d0:	4b30      	ldr	r3, [pc, #192]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093d6:	4b2f      	ldr	r3, [pc, #188]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093d8:	2200      	movs	r2, #0
 80093da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80093dc:	4b2d      	ldr	r3, [pc, #180]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80093e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093e4:	4b2b      	ldr	r3, [pc, #172]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80093ea:	4b2a      	ldr	r3, [pc, #168]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80093f0:	4828      	ldr	r0, [pc, #160]	; (8009494 <MX_TIM2_Init+0xfc>)
 80093f2:	f7fa f8d7 	bl	80035a4 <HAL_TIM_Base_Init>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80093fc:	f000 faf5 	bl	80099ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009404:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800940a:	4619      	mov	r1, r3
 800940c:	4821      	ldr	r0, [pc, #132]	; (8009494 <MX_TIM2_Init+0xfc>)
 800940e:	f7fa fc7b 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009418:	f000 fae7 	bl	80099ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800941c:	481d      	ldr	r0, [pc, #116]	; (8009494 <MX_TIM2_Init+0xfc>)
 800941e:	f7fa f910 	bl	8003642 <HAL_TIM_PWM_Init>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009428:	f000 fadf 	bl	80099ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800942c:	2300      	movs	r3, #0
 800942e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009430:	2300      	movs	r3, #0
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009434:	f107 0320 	add.w	r3, r7, #32
 8009438:	4619      	mov	r1, r3
 800943a:	4816      	ldr	r0, [pc, #88]	; (8009494 <MX_TIM2_Init+0xfc>)
 800943c:	f7fb f853 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009446:	f000 fad0 	bl	80099ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800944a:	2360      	movs	r3, #96	; 0x60
 800944c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800945a:	1d3b      	adds	r3, r7, #4
 800945c:	2200      	movs	r2, #0
 800945e:	4619      	mov	r1, r3
 8009460:	480c      	ldr	r0, [pc, #48]	; (8009494 <MX_TIM2_Init+0xfc>)
 8009462:	f7fa fb8b 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800946c:	f000 fabd 	bl	80099ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009470:	1d3b      	adds	r3, r7, #4
 8009472:	220c      	movs	r2, #12
 8009474:	4619      	mov	r1, r3
 8009476:	4807      	ldr	r0, [pc, #28]	; (8009494 <MX_TIM2_Init+0xfc>)
 8009478:	f7fa fb80 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8009482:	f000 fab2 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009486:	4803      	ldr	r0, [pc, #12]	; (8009494 <MX_TIM2_Init+0xfc>)
 8009488:	f002 fdd6 	bl	800c038 <HAL_TIM_MspPostInit>

}
 800948c:	bf00      	nop
 800948e:	3738      	adds	r7, #56	; 0x38
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20000b94 	.word	0x20000b94

08009498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	; 0x38
 800949c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800949e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	605a      	str	r2, [r3, #4]
 80094a8:	609a      	str	r2, [r3, #8]
 80094aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094ac:	f107 0320 	add.w	r3, r7, #32
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094b6:	1d3b      	adds	r3, r7, #4
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	605a      	str	r2, [r3, #4]
 80094be:	609a      	str	r2, [r3, #8]
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	611a      	str	r2, [r3, #16]
 80094c4:	615a      	str	r2, [r3, #20]
 80094c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80094c8:	4b2c      	ldr	r3, [pc, #176]	; (800957c <MX_TIM3_Init+0xe4>)
 80094ca:	4a2d      	ldr	r2, [pc, #180]	; (8009580 <MX_TIM3_Init+0xe8>)
 80094cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80094ce:	4b2b      	ldr	r3, [pc, #172]	; (800957c <MX_TIM3_Init+0xe4>)
 80094d0:	223f      	movs	r2, #63	; 0x3f
 80094d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094d4:	4b29      	ldr	r3, [pc, #164]	; (800957c <MX_TIM3_Init+0xe4>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80094da:	4b28      	ldr	r3, [pc, #160]	; (800957c <MX_TIM3_Init+0xe4>)
 80094dc:	2200      	movs	r2, #0
 80094de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094e0:	4b26      	ldr	r3, [pc, #152]	; (800957c <MX_TIM3_Init+0xe4>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094e6:	4b25      	ldr	r3, [pc, #148]	; (800957c <MX_TIM3_Init+0xe4>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80094ec:	4823      	ldr	r0, [pc, #140]	; (800957c <MX_TIM3_Init+0xe4>)
 80094ee:	f7fa f859 	bl	80035a4 <HAL_TIM_Base_Init>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80094f8:	f000 fa77 	bl	80099ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009506:	4619      	mov	r1, r3
 8009508:	481c      	ldr	r0, [pc, #112]	; (800957c <MX_TIM3_Init+0xe4>)
 800950a:	f7fa fbfd 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8009514:	f000 fa69 	bl	80099ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009518:	4818      	ldr	r0, [pc, #96]	; (800957c <MX_TIM3_Init+0xe4>)
 800951a:	f7fa f892 	bl	8003642 <HAL_TIM_PWM_Init>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8009524:	f000 fa61 	bl	80099ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009528:	2300      	movs	r3, #0
 800952a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800952c:	2300      	movs	r3, #0
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009530:	f107 0320 	add.w	r3, r7, #32
 8009534:	4619      	mov	r1, r3
 8009536:	4811      	ldr	r0, [pc, #68]	; (800957c <MX_TIM3_Init+0xe4>)
 8009538:	f7fa ffd5 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8009542:	f000 fa52 	bl	80099ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009546:	2360      	movs	r3, #96	; 0x60
 8009548:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009556:	1d3b      	adds	r3, r7, #4
 8009558:	2204      	movs	r2, #4
 800955a:	4619      	mov	r1, r3
 800955c:	4807      	ldr	r0, [pc, #28]	; (800957c <MX_TIM3_Init+0xe4>)
 800955e:	f7fa fb0d 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8009568:	f000 fa3f 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800956c:	4803      	ldr	r0, [pc, #12]	; (800957c <MX_TIM3_Init+0xe4>)
 800956e:	f002 fd63 	bl	800c038 <HAL_TIM_MspPostInit>

}
 8009572:	bf00      	nop
 8009574:	3738      	adds	r7, #56	; 0x38
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000a20 	.word	0x20000a20
 8009580:	40000400 	.word	0x40000400

08009584 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08c      	sub	sp, #48	; 0x30
 8009588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800958a:	f107 030c 	add.w	r3, r7, #12
 800958e:	2224      	movs	r2, #36	; 0x24
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f002 ff72 	bl	800c47c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80095a0:	4b20      	ldr	r3, [pc, #128]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095a2:	4a21      	ldr	r2, [pc, #132]	; (8009628 <MX_TIM4_Init+0xa4>)
 80095a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80095a6:	4b1f      	ldr	r3, [pc, #124]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095ac:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095ba:	4b1a      	ldr	r3, [pc, #104]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095bc:	2200      	movs	r2, #0
 80095be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095c0:	4b18      	ldr	r3, [pc, #96]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80095c6:	2303      	movs	r3, #3
 80095c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80095ca:	2300      	movs	r3, #0
 80095cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80095ce:	2301      	movs	r3, #1
 80095d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80095d2:	2300      	movs	r3, #0
 80095d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80095da:	2300      	movs	r3, #0
 80095dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80095de:	2301      	movs	r3, #1
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80095e2:	2300      	movs	r3, #0
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80095ea:	f107 030c 	add.w	r3, r7, #12
 80095ee:	4619      	mov	r1, r3
 80095f0:	480c      	ldr	r0, [pc, #48]	; (8009624 <MX_TIM4_Init+0xa0>)
 80095f2:	f7fa f8f1 	bl	80037d8 <HAL_TIM_Encoder_Init>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80095fc:	f000 f9f5 	bl	80099ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009600:	2300      	movs	r3, #0
 8009602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009604:	2300      	movs	r3, #0
 8009606:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009608:	1d3b      	adds	r3, r7, #4
 800960a:	4619      	mov	r1, r3
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <MX_TIM4_Init+0xa0>)
 800960e:	f7fa ff6a 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8009618:	f000 f9e7 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800961c:	bf00      	nop
 800961e:	3730      	adds	r7, #48	; 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20000388 	.word	0x20000388
 8009628:	40000800 	.word	0x40000800

0800962c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009632:	463b      	mov	r3, r7
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800963a:	4b15      	ldr	r3, [pc, #84]	; (8009690 <MX_TIM6_Init+0x64>)
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <MX_TIM6_Init+0x68>)
 800963e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8009640:	4b13      	ldr	r3, [pc, #76]	; (8009690 <MX_TIM6_Init+0x64>)
 8009642:	2253      	movs	r2, #83	; 0x53
 8009644:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <MX_TIM6_Init+0x64>)
 8009648:	2200      	movs	r2, #0
 800964a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800964c:	4b10      	ldr	r3, [pc, #64]	; (8009690 <MX_TIM6_Init+0x64>)
 800964e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009652:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009654:	4b0e      	ldr	r3, [pc, #56]	; (8009690 <MX_TIM6_Init+0x64>)
 8009656:	2200      	movs	r2, #0
 8009658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800965a:	480d      	ldr	r0, [pc, #52]	; (8009690 <MX_TIM6_Init+0x64>)
 800965c:	f7f9 ffa2 	bl	80035a4 <HAL_TIM_Base_Init>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8009666:	f000 f9c0 	bl	80099ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800966a:	2300      	movs	r3, #0
 800966c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800966e:	2300      	movs	r3, #0
 8009670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009672:	463b      	mov	r3, r7
 8009674:	4619      	mov	r1, r3
 8009676:	4806      	ldr	r0, [pc, #24]	; (8009690 <MX_TIM6_Init+0x64>)
 8009678:	f7fa ff35 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8009682:	f000 f9b2 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009686:	bf00      	nop
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000b30 	.word	0x20000b30
 8009694:	40001000 	.word	0x40001000

08009698 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08c      	sub	sp, #48	; 0x30
 800969c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800969e:	f107 030c 	add.w	r3, r7, #12
 80096a2:	2224      	movs	r2, #36	; 0x24
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f002 fee8 	bl	800c47c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096ac:	1d3b      	adds	r3, r7, #4
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80096b4:	4b22      	ldr	r3, [pc, #136]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096b6:	4a23      	ldr	r2, [pc, #140]	; (8009744 <MX_TIM8_Init+0xac>)
 80096b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80096ba:	4b21      	ldr	r3, [pc, #132]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096bc:	2200      	movs	r2, #0
 80096be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096c0:	4b1f      	ldr	r3, [pc, #124]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80096c6:	4b1e      	ldr	r3, [pc, #120]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80096ce:	4b1c      	ldr	r3, [pc, #112]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80096d4:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096da:	4b19      	ldr	r3, [pc, #100]	; (8009740 <MX_TIM8_Init+0xa8>)
 80096dc:	2200      	movs	r2, #0
 80096de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80096e0:	2303      	movs	r3, #3
 80096e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80096e4:	2300      	movs	r3, #0
 80096e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80096f4:	2300      	movs	r3, #0
 80096f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80096f8:	2301      	movs	r3, #1
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80096fc:	2300      	movs	r3, #0
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	4619      	mov	r1, r3
 800970a:	480d      	ldr	r0, [pc, #52]	; (8009740 <MX_TIM8_Init+0xa8>)
 800970c:	f7fa f864 	bl	80037d8 <HAL_TIM_Encoder_Init>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8009716:	f000 f968 	bl	80099ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800971a:	2300      	movs	r3, #0
 800971c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800971e:	2300      	movs	r3, #0
 8009720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009722:	1d3b      	adds	r3, r7, #4
 8009724:	4619      	mov	r1, r3
 8009726:	4806      	ldr	r0, [pc, #24]	; (8009740 <MX_TIM8_Init+0xa8>)
 8009728:	f7fa fedd 	bl	80044e6 <HAL_TIMEx_MasterConfigSynchronization>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8009732:	f000 f95a 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009736:	bf00      	nop
 8009738:	3730      	adds	r7, #48	; 0x30
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000348 	.word	0x20000348
 8009744:	40010400 	.word	0x40010400

08009748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800974c:	4b11      	ldr	r3, [pc, #68]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 800974e:	4a12      	ldr	r2, [pc, #72]	; (8009798 <MX_USART1_UART_Init+0x50>)
 8009750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8009752:	4b10      	ldr	r3, [pc, #64]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 8009754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800975a:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 800975c:	2200      	movs	r2, #0
 800975e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009760:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 8009762:	2200      	movs	r2, #0
 8009764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 8009768:	2200      	movs	r2, #0
 800976a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800976c:	4b09      	ldr	r3, [pc, #36]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 800976e:	220c      	movs	r2, #12
 8009770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009772:	4b08      	ldr	r3, [pc, #32]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 8009774:	2200      	movs	r2, #0
 8009776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 800977a:	2200      	movs	r2, #0
 800977c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800977e:	4805      	ldr	r0, [pc, #20]	; (8009794 <MX_USART1_UART_Init+0x4c>)
 8009780:	f7fa ff0a 	bl	8004598 <HAL_UART_Init>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800978a:	f000 f92e 	bl	80099ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800978e:	bf00      	nop
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000ae0 	.word	0x20000ae0
 8009798:	40011000 	.word	0x40011000

0800979c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	; 0x28
 80097a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097a2:	f107 0314 	add.w	r3, r7, #20
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	605a      	str	r2, [r3, #4]
 80097ac:	609a      	str	r2, [r3, #8]
 80097ae:	60da      	str	r2, [r3, #12]
 80097b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097b2:	2300      	movs	r3, #0
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	4b53      	ldr	r3, [pc, #332]	; (8009904 <MX_GPIO_Init+0x168>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	4a52      	ldr	r2, [pc, #328]	; (8009904 <MX_GPIO_Init+0x168>)
 80097bc:	f043 0304 	orr.w	r3, r3, #4
 80097c0:	6313      	str	r3, [r2, #48]	; 0x30
 80097c2:	4b50      	ldr	r3, [pc, #320]	; (8009904 <MX_GPIO_Init+0x168>)
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	4b4c      	ldr	r3, [pc, #304]	; (8009904 <MX_GPIO_Init+0x168>)
 80097d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d6:	4a4b      	ldr	r2, [pc, #300]	; (8009904 <MX_GPIO_Init+0x168>)
 80097d8:	f043 0301 	orr.w	r3, r3, #1
 80097dc:	6313      	str	r3, [r2, #48]	; 0x30
 80097de:	4b49      	ldr	r3, [pc, #292]	; (8009904 <MX_GPIO_Init+0x168>)
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097ea:	2300      	movs	r3, #0
 80097ec:	60bb      	str	r3, [r7, #8]
 80097ee:	4b45      	ldr	r3, [pc, #276]	; (8009904 <MX_GPIO_Init+0x168>)
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	4a44      	ldr	r2, [pc, #272]	; (8009904 <MX_GPIO_Init+0x168>)
 80097f4:	f043 0302 	orr.w	r3, r3, #2
 80097f8:	6313      	str	r3, [r2, #48]	; 0x30
 80097fa:	4b42      	ldr	r3, [pc, #264]	; (8009904 <MX_GPIO_Init+0x168>)
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	60bb      	str	r3, [r7, #8]
 8009804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009806:	2300      	movs	r3, #0
 8009808:	607b      	str	r3, [r7, #4]
 800980a:	4b3e      	ldr	r3, [pc, #248]	; (8009904 <MX_GPIO_Init+0x168>)
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	4a3d      	ldr	r2, [pc, #244]	; (8009904 <MX_GPIO_Init+0x168>)
 8009810:	f043 0308 	orr.w	r3, r3, #8
 8009814:	6313      	str	r3, [r2, #48]	; 0x30
 8009816:	4b3b      	ldr	r3, [pc, #236]	; (8009904 <MX_GPIO_Init+0x168>)
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	607b      	str	r3, [r7, #4]
 8009820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 8009822:	2200      	movs	r2, #0
 8009824:	f24e 213c 	movw	r1, #57916	; 0xe23c
 8009828:	4837      	ldr	r0, [pc, #220]	; (8009908 <MX_GPIO_Init+0x16c>)
 800982a:	f7f8 fd43 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800982e:	2200      	movs	r2, #0
 8009830:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8009834:	4835      	ldr	r0, [pc, #212]	; (800990c <MX_GPIO_Init+0x170>)
 8009836:	f7f8 fd3d 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800983a:	2200      	movs	r2, #0
 800983c:	f242 7103 	movw	r1, #9987	; 0x2703
 8009840:	4833      	ldr	r0, [pc, #204]	; (8009910 <MX_GPIO_Init+0x174>)
 8009842:	f7f8 fd37 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8009846:	2200      	movs	r2, #0
 8009848:	2104      	movs	r1, #4
 800984a:	4832      	ldr	r0, [pc, #200]	; (8009914 <MX_GPIO_Init+0x178>)
 800984c:	f7f8 fd32 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 8009850:	f24e 233c 	movw	r3, #57916	; 0xe23c
 8009854:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009856:	2301      	movs	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985a:	2300      	movs	r3, #0
 800985c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800985e:	2300      	movs	r3, #0
 8009860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009862:	f107 0314 	add.w	r3, r7, #20
 8009866:	4619      	mov	r1, r3
 8009868:	4827      	ldr	r0, [pc, #156]	; (8009908 <MX_GPIO_Init+0x16c>)
 800986a:	f7f8 fb71 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800986e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8009872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009874:	2301      	movs	r3, #1
 8009876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800987c:	2300      	movs	r3, #0
 800987e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009880:	f107 0314 	add.w	r3, r7, #20
 8009884:	4619      	mov	r1, r3
 8009886:	4821      	ldr	r0, [pc, #132]	; (800990c <MX_GPIO_Init+0x170>)
 8009888:	f7f8 fb62 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800988c:	f242 7303 	movw	r3, #9987	; 0x2703
 8009890:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009892:	2301      	movs	r3, #1
 8009894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800989a:	2300      	movs	r3, #0
 800989c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800989e:	f107 0314 	add.w	r3, r7, #20
 80098a2:	4619      	mov	r1, r3
 80098a4:	481a      	ldr	r0, [pc, #104]	; (8009910 <MX_GPIO_Init+0x174>)
 80098a6:	f7f8 fb53 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80098aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098b4:	2301      	movs	r3, #1
 80098b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098b8:	f107 0314 	add.w	r3, r7, #20
 80098bc:	4619      	mov	r1, r3
 80098be:	4814      	ldr	r0, [pc, #80]	; (8009910 <MX_GPIO_Init+0x174>)
 80098c0:	f7f8 fb46 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80098c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098d2:	f107 0314 	add.w	r3, r7, #20
 80098d6:	4619      	mov	r1, r3
 80098d8:	480c      	ldr	r0, [pc, #48]	; (800990c <MX_GPIO_Init+0x170>)
 80098da:	f7f8 fb39 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80098de:	2304      	movs	r3, #4
 80098e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098e2:	2301      	movs	r3, #1
 80098e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098ea:	2300      	movs	r3, #0
 80098ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80098ee:	f107 0314 	add.w	r3, r7, #20
 80098f2:	4619      	mov	r1, r3
 80098f4:	4807      	ldr	r0, [pc, #28]	; (8009914 <MX_GPIO_Init+0x178>)
 80098f6:	f7f8 fb2b 	bl	8001f50 <HAL_GPIO_Init>

}
 80098fa:	bf00      	nop
 80098fc:	3728      	adds	r7, #40	; 0x28
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	40023800 	.word	0x40023800
 8009908:	40020800 	.word	0x40020800
 800990c:	40020000 	.word	0x40020000
 8009910:	40020400 	.word	0x40020400
 8009914:	40020c00 	.word	0x40020c00

08009918 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009922:	2360      	movs	r3, #96	; 0x60
 8009924:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800992e:	4a15      	ldr	r2, [pc, #84]	; (8009984 <buzzer+0x6c>)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	fb92 f3f3 	sdiv	r3, r2, r3
 8009936:	4a14      	ldr	r2, [pc, #80]	; (8009988 <buzzer+0x70>)
 8009938:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <buzzer+0x70>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b13      	ldr	r3, [pc, #76]	; (800998c <buzzer+0x74>)
 8009940:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 8009942:	4b11      	ldr	r3, [pc, #68]	; (8009988 <buzzer+0x70>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a12      	ldr	r2, [pc, #72]	; (8009990 <buzzer+0x78>)
 8009948:	fb82 1203 	smull	r1, r2, r2, r3
 800994c:	1092      	asrs	r2, r2, #2
 800994e:	17db      	asrs	r3, r3, #31
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 8009954:	f107 030c 	add.w	r3, r7, #12
 8009958:	2204      	movs	r2, #4
 800995a:	4619      	mov	r1, r3
 800995c:	480d      	ldr	r0, [pc, #52]	; (8009994 <buzzer+0x7c>)
 800995e:	f7fa f90d 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8009962:	2104      	movs	r1, #4
 8009964:	480b      	ldr	r0, [pc, #44]	; (8009994 <buzzer+0x7c>)
 8009966:	f7f9 fea1 	bl	80036ac <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f7f7 fb2d 	bl	8000fcc <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8009972:	2104      	movs	r1, #4
 8009974:	4807      	ldr	r0, [pc, #28]	; (8009994 <buzzer+0x7c>)
 8009976:	f7f9 fed7 	bl	8003728 <HAL_TIM_PWM_Stop>
}
 800997a:	bf00      	nop
 800997c:	3728      	adds	r7, #40	; 0x28
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	000f4240 	.word	0x000f4240
 8009988:	20000340 	.word	0x20000340
 800998c:	40000400 	.word	0x40000400
 8009990:	66666667 	.word	0x66666667
 8009994:	20000a20 	.word	0x20000a20

08009998 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 80099a2:	f107 0308 	add.w	r3, r7, #8
 80099a6:	2200      	movs	r2, #0
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	605a      	str	r2, [r3, #4]
 80099ac:	609a      	str	r2, [r3, #8]
 80099ae:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80099b4:	2301      	movs	r3, #1
 80099b6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 80099c0:	f107 0308 	add.w	r3, r7, #8
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7f7 fcbe 	bl	8001348 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7f7 fb63 	bl	8001098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 80099d2:	2164      	movs	r1, #100	; 0x64
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7f7 fc25 	bl	8001224 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f7 fca6 	bl	800132c <HAL_ADC_GetValue>
 80099e0:	4603      	mov	r3, r0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80099ea:	b480      	push	{r7}
 80099ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80099ee:	bf00      	nop
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <search_init>:

#include "global.h"

void search_init(void){
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <search_init+0x2c>)
 80099fe:	2203      	movs	r2, #3
 8009a00:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <search_init+0x30>)
 8009a04:	2206      	movs	r2, #6
 8009a06:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 8009a08:	f000 fd36 	bl	800a478 <map_Init>
	mouse.x = 0;
 8009a0c:	4b07      	ldr	r3, [pc, #28]	; (8009a2c <search_init+0x34>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <search_init+0x34>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <search_init+0x34>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	709a      	strb	r2, [r3, #2]
}
 8009a1e:	bf00      	nop
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000b2d 	.word	0x20000b2d
 8009a28:	20000ac8 	.word	0x20000ac8
 8009a2c:	20000b8c 	.word	0x20000b8c

08009a30 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009a34:	4b37      	ldr	r3, [pc, #220]	; (8009b14 <searchA+0xe4>)
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <searchA+0x16>
		load_map_from_eeprom();
 8009a42:	f001 fea3 	bl	800b78c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009a46:	f001 ff19 	bl	800b87c <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009a4a:	4b33      	ldr	r3, [pc, #204]	; (8009b18 <searchA+0xe8>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	4b30      	ldr	r3, [pc, #192]	; (8009b18 <searchA+0xe8>)
 8009a56:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 8009a58:	f000 fd7a 	bl	800a550 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 8009a5c:	4b2f      	ldr	r3, [pc, #188]	; (8009b1c <searchA+0xec>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009a62:	f000 fee3 	bl	800a82c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009a66:	f001 fa19 	bl	800ae9c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009a6a:	4b2c      	ldr	r3, [pc, #176]	; (8009b1c <searchA+0xec>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	b2d1      	uxtb	r1, r2
 8009a72:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <searchA+0xec>)
 8009a74:	7011      	strb	r1, [r2, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b29      	ldr	r3, [pc, #164]	; (8009b20 <searchA+0xf0>)
 8009a7a:	5c9b      	ldrb	r3, [r3, r2]
 8009a7c:	2b22      	cmp	r3, #34	; 0x22
 8009a7e:	d00b      	beq.n	8009a98 <searchA+0x68>
 8009a80:	2b22      	cmp	r3, #34	; 0x22
 8009a82:	dc02      	bgt.n	8009a8a <searchA+0x5a>
 8009a84:	2b11      	cmp	r3, #17
 8009a86:	d012      	beq.n	8009aae <searchA+0x7e>
 8009a88:	e015      	b.n	8009ab6 <searchA+0x86>
 8009a8a:	2b44      	cmp	r3, #68	; 0x44
 8009a8c:	d001      	beq.n	8009a92 <searchA+0x62>
 8009a8e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 8009a90:	e011      	b.n	8009ab6 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 8009a92:	f7fb fd65 	bl	8005560 <rotate_R90>
				break;
 8009a96:	e00e      	b.n	8009ab6 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 8009a98:	f7fb ff02 	bl	80058a0 <rotate_180>
				if(wall_info & 0x88){
 8009a9c:	4b1e      	ldr	r3, [pc, #120]	; (8009b18 <searchA+0xe8>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <searchA+0x84>
					set_position();
 8009aa8:	f7fb fc30 	bl	800530c <set_position>
				}
				break;
 8009aac:	e002      	b.n	8009ab4 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 8009aae:	f7fb fe27 	bl	8005700 <rotate_L90>
				break;
 8009ab2:	e000      	b.n	8009ab6 <searchA+0x86>
				break;
 8009ab4:	bf00      	nop
		}

		drive_wait();
 8009ab6:	2032      	movs	r0, #50	; 0x32
 8009ab8:	f7f7 fa88 	bl	8000fcc <HAL_Delay>
		one_section();										//a前進する
 8009abc:	f7fb fce0 	bl	8005480 <one_section>
		drive_wait();
 8009ac0:	2032      	movs	r0, #50	; 0x32
 8009ac2:	f7f7 fa83 	bl	8000fcc <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 8009ac6:	f000 fc7f 	bl	800a3c8 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 8009aca:	f000 fcb7 	bl	800a43c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 8009ace:	4b15      	ldr	r3, [pc, #84]	; (8009b24 <searchA+0xf4>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <searchA+0xf8>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d1c6      	bne.n	8009a6a <searchA+0x3a>
 8009adc:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <searchA+0xf4>)
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <searchA+0xfc>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d1bf      	bne.n	8009a6a <searchA+0x3a>

	printf("goal\n");
 8009aea:	4811      	ldr	r0, [pc, #68]	; (8009b30 <searchA+0x100>)
 8009aec:	f002 fd42 	bl	800c574 <puts>
	HAL_Delay(2000);										//aスタートでは***2秒以上***停止しなくてはならない
 8009af0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009af4:	f7f7 fa6a 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009af8:	f7fb fed2 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <searchA+0xe4>)
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <searchA+0xde>
		store_map_in_eeprom();
 8009b0a:	f001 fe05 	bl	800b718 <store_map_in_eeprom>
	}
}
 8009b0e:	bf00      	nop
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000ee4 	.word	0x20000ee4
 8009b18:	20000344 	.word	0x20000344
 8009b1c:	20000f0c 	.word	0x20000f0c
 8009b20:	20000bd4 	.word	0x20000bd4
 8009b24:	20000b8c 	.word	0x20000b8c
 8009b28:	20000b2d 	.word	0x20000b2d
 8009b2c:	20000ac8 	.word	0x20000ac8
 8009b30:	0800d9b0 	.word	0x0800d9b0

08009b34 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009b38:	4b3c      	ldr	r3, [pc, #240]	; (8009c2c <searchB+0xf8>)
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <searchB+0x16>
		load_map_from_eeprom();
 8009b46:	f001 fe21 	bl	800b78c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009b4a:	f001 fe97 	bl	800b87c <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009b4e:	4b38      	ldr	r3, [pc, #224]	; (8009c30 <searchB+0xfc>)
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	4b35      	ldr	r3, [pc, #212]	; (8009c30 <searchB+0xfc>)
 8009b5a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 8009b5c:	f000 fcf8 	bl	800a550 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	half_sectionA();
 8009b60:	f7fb fc0a 	bl	8005378 <half_sectionA>
	adv_pos();
 8009b64:	f000 fc30 	bl	800a3c8 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 8009b68:	f000 fcf2 	bl	800a550 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009b6c:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <searchB+0x100>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009b72:	f000 fe5b 	bl	800a82c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009b76:	f001 f991 	bl	800ae9c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <searchB+0x100>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	b2d1      	uxtb	r1, r2
 8009b82:	4a2c      	ldr	r2, [pc, #176]	; (8009c34 <searchB+0x100>)
 8009b84:	7011      	strb	r1, [r2, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	4b2b      	ldr	r3, [pc, #172]	; (8009c38 <searchB+0x104>)
 8009b8a:	5c9b      	ldrb	r3, [r3, r2]
 8009b8c:	2b22      	cmp	r3, #34	; 0x22
 8009b8e:	d012      	beq.n	8009bb6 <searchB+0x82>
 8009b90:	2b22      	cmp	r3, #34	; 0x22
 8009b92:	dc02      	bgt.n	8009b9a <searchB+0x66>
 8009b94:	2b11      	cmp	r3, #17
 8009b96:	d01d      	beq.n	8009bd4 <searchB+0xa0>
 8009b98:	e023      	b.n	8009be2 <searchB+0xae>
 8009b9a:	2b44      	cmp	r3, #68	; 0x44
 8009b9c:	d004      	beq.n	8009ba8 <searchB+0x74>
 8009b9e:	2b88      	cmp	r3, #136	; 0x88
 8009ba0:	d11f      	bne.n	8009be2 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 8009ba2:	f7fb fcc3 	bl	800552c <one_sectionU>
				break;
 8009ba6:	e01c      	b.n	8009be2 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 8009ba8:	f7fb fc00 	bl	80053ac <half_sectionD>
				rotate_R90();
 8009bac:	f7fb fcd8 	bl	8005560 <rotate_R90>
				half_sectionA();
 8009bb0:	f7fb fbe2 	bl	8005378 <half_sectionA>
				break;
 8009bb4:	e015      	b.n	8009be2 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009bb6:	f7fb fbf9 	bl	80053ac <half_sectionD>
				rotate_180();
 8009bba:	f7fb fe71 	bl	80058a0 <rotate_180>
				if(wall_info & 0x88){
 8009bbe:	4b1c      	ldr	r3, [pc, #112]	; (8009c30 <searchB+0xfc>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <searchB+0x9a>
					set_position();
 8009bca:	f7fb fb9f 	bl	800530c <set_position>
				}
				half_sectionA();
 8009bce:	f7fb fbd3 	bl	8005378 <half_sectionA>
				break;
 8009bd2:	e006      	b.n	8009be2 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 8009bd4:	f7fb fbea 	bl	80053ac <half_sectionD>
				rotate_L90();
 8009bd8:	f7fb fd92 	bl	8005700 <rotate_L90>
				half_sectionA();
 8009bdc:	f7fb fbcc 	bl	8005378 <half_sectionA>
				break;
 8009be0:	bf00      	nop
		}
		adv_pos();
 8009be2:	f000 fbf1 	bl	800a3c8 <adv_pos>
		conf_route();
 8009be6:	f000 fc29 	bl	800a43c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009bea:	4b14      	ldr	r3, [pc, #80]	; (8009c3c <searchB+0x108>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <searchB+0x10c>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d1c0      	bne.n	8009b7a <searchB+0x46>
 8009bf8:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <searchB+0x108>)
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <searchB+0x110>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d1b9      	bne.n	8009b7a <searchB+0x46>

	half_sectionD();
 8009c06:	f7fb fbd1 	bl	80053ac <half_sectionD>

	HAL_Delay(2000);
 8009c0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c0e:	f7f7 f9dd 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009c12:	f7fb fe45 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 8009c16:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <searchB+0xf8>)
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <searchB+0xf4>
		store_map_in_eeprom();
 8009c24:	f001 fd78 	bl	800b718 <store_map_in_eeprom>
	}
}
 8009c28:	bf00      	nop
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000ee4 	.word	0x20000ee4
 8009c30:	20000344 	.word	0x20000344
 8009c34:	20000f0c 	.word	0x20000f0c
 8009c38:	20000bd4 	.word	0x20000bd4
 8009c3c:	20000b8c 	.word	0x20000b8c
 8009c40:	20000b2d 	.word	0x20000b2d
 8009c44:	20000ac8 	.word	0x20000ac8

08009c48 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009c4c:	4b4d      	ldr	r3, [pc, #308]	; (8009d84 <searchC+0x13c>)
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <searchC+0x16>
		load_map_from_eeprom();
 8009c5a:	f001 fd97 	bl	800b78c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009c5e:	4b49      	ldr	r3, [pc, #292]	; (8009d84 <searchC+0x13c>)
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <searchC+0x28>
 8009c6c:	f001 fe06 	bl	800b87c <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009c70:	4b44      	ldr	r3, [pc, #272]	; (8009d84 <searchC+0x13c>)
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <searchC+0x44>
 8009c7e:	4b42      	ldr	r3, [pc, #264]	; (8009d88 <searchC+0x140>)
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	4b3f      	ldr	r3, [pc, #252]	; (8009d88 <searchC+0x140>)
 8009c8a:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009c8c:	4b3d      	ldr	r3, [pc, #244]	; (8009d84 <searchC+0x13c>)
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <searchC+0x56>
 8009c9a:	f000 fc59 	bl	800a550 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 8009c9e:	f7fb fb3f 	bl	8005320 <start_sectionA>
	adv_pos();
 8009ca2:	f000 fb91 	bl	800a3c8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009ca6:	4b37      	ldr	r3, [pc, #220]	; (8009d84 <searchC+0x13c>)
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <searchC+0x70>
 8009cb4:	f000 fc4c 	bl	800a550 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009cb8:	4b34      	ldr	r3, [pc, #208]	; (8009d8c <searchC+0x144>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009cbe:	f000 fdb5 	bl	800a82c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009cc2:	f001 f8eb 	bl	800ae9c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009cc6:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <searchC+0x144>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	b2d1      	uxtb	r1, r2
 8009cce:	4a2f      	ldr	r2, [pc, #188]	; (8009d8c <searchC+0x144>)
 8009cd0:	7011      	strb	r1, [r2, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	4b2e      	ldr	r3, [pc, #184]	; (8009d90 <searchC+0x148>)
 8009cd6:	5c9b      	ldrb	r3, [r3, r2]
 8009cd8:	2b22      	cmp	r3, #34	; 0x22
 8009cda:	d00e      	beq.n	8009cfa <searchC+0xb2>
 8009cdc:	2b22      	cmp	r3, #34	; 0x22
 8009cde:	dc02      	bgt.n	8009ce6 <searchC+0x9e>
 8009ce0:	2b11      	cmp	r3, #17
 8009ce2:	d020      	beq.n	8009d26 <searchC+0xde>
 8009ce4:	e022      	b.n	8009d2c <searchC+0xe4>
 8009ce6:	2b44      	cmp	r3, #68	; 0x44
 8009ce8:	d004      	beq.n	8009cf4 <searchC+0xac>
 8009cea:	2b88      	cmp	r3, #136	; 0x88
 8009cec:	d11e      	bne.n	8009d2c <searchC+0xe4>
			//----a前進----
			case 0x88:
				one_sectionU();
 8009cee:	f7fb fc1d 	bl	800552c <one_sectionU>
				break;
 8009cf2:	e01b      	b.n	8009d2c <searchC+0xe4>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 8009cf4:	f7fb fea2 	bl	8005a3c <slalom_R90>

				break;
 8009cf8:	e018      	b.n	8009d2c <searchC+0xe4>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009cfa:	f7fb fb57 	bl	80053ac <half_sectionD>
				rotate_180();
 8009cfe:	f7fb fdcf 	bl	80058a0 <rotate_180>
				if(wall_info & 0x88 && MF.FLAG.SCND == 0){
 8009d02:	4b21      	ldr	r3, [pc, #132]	; (8009d88 <searchC+0x140>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d008      	beq.n	8009d20 <searchC+0xd8>
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <searchC+0x13c>)
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <searchC+0xd8>
					set_position();
 8009d1c:	f7fb faf6 	bl	800530c <set_position>
				}
				half_sectionA();
 8009d20:	f7fb fb2a 	bl	8005378 <half_sectionA>
				break;
 8009d24:	e002      	b.n	8009d2c <searchC+0xe4>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 8009d26:	f7fb ff79 	bl	8005c1c <slalom_L90>
				break;
 8009d2a:	bf00      	nop
		}
		adv_pos();
 8009d2c:	f000 fb4c 	bl	800a3c8 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 8009d30:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <searchC+0x13c>)
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <searchC+0xfa>
 8009d3e:	f000 fb7d 	bl	800a43c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009d42:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <searchC+0x14c>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <searchC+0x150>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d1ba      	bne.n	8009cc6 <searchC+0x7e>
 8009d50:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <searchC+0x14c>)
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <searchC+0x154>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d1b3      	bne.n	8009cc6 <searchC+0x7e>

	half_sectionD();
 8009d5e:	f7fb fb25 	bl	80053ac <half_sectionD>

	HAL_Delay(2000);
 8009d62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d66:	f7f7 f931 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009d6a:	f7fb fd99 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 8009d6e:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <searchC+0x13c>)
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <searchC+0x138>
		store_map_in_eeprom();
 8009d7c:	f001 fccc 	bl	800b718 <store_map_in_eeprom>
	}
}
 8009d80:	bf00      	nop
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20000ee4 	.word	0x20000ee4
 8009d88:	20000344 	.word	0x20000344
 8009d8c:	20000f0c 	.word	0x20000f0c
 8009d90:	20000bd4 	.word	0x20000bd4
 8009d94:	20000b8c 	.word	0x20000b8c
 8009d98:	20000b2d 	.word	0x20000b2d
 8009d9c:	20000ac8 	.word	0x20000ac8

08009da0 <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009da4:	4b4a      	ldr	r3, [pc, #296]	; (8009ed0 <searchC2+0x130>)
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <searchC2+0x16>
		load_map_from_eeprom();
 8009db2:	f001 fceb 	bl	800b78c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009db6:	4b46      	ldr	r3, [pc, #280]	; (8009ed0 <searchC2+0x130>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <searchC2+0x28>
 8009dc4:	f001 fd5a 	bl	800b87c <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009dc8:	4b41      	ldr	r3, [pc, #260]	; (8009ed0 <searchC2+0x130>)
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <searchC2+0x44>
 8009dd6:	4b3f      	ldr	r3, [pc, #252]	; (8009ed4 <searchC2+0x134>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	4b3c      	ldr	r3, [pc, #240]	; (8009ed4 <searchC2+0x134>)
 8009de2:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009de4:	4b3a      	ldr	r3, [pc, #232]	; (8009ed0 <searchC2+0x130>)
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <searchC2+0x56>
 8009df2:	f000 fbad 	bl	800a550 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 8009df6:	f7fb fae9 	bl	80053cc <start_sectionA2>
	adv_pos();
 8009dfa:	f000 fae5 	bl	800a3c8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009dfe:	4b34      	ldr	r3, [pc, #208]	; (8009ed0 <searchC2+0x130>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <searchC2+0x70>
 8009e0c:	f000 fba0 	bl	800a550 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009e10:	4b31      	ldr	r3, [pc, #196]	; (8009ed8 <searchC2+0x138>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009e16:	f000 fd09 	bl	800a82c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009e1a:	f001 f83f 	bl	800ae9c <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009e1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ed8 <searchC2+0x138>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	b2d1      	uxtb	r1, r2
 8009e26:	4a2c      	ldr	r2, [pc, #176]	; (8009ed8 <searchC2+0x138>)
 8009e28:	7011      	strb	r1, [r2, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	4b2b      	ldr	r3, [pc, #172]	; (8009edc <searchC2+0x13c>)
 8009e2e:	5c9b      	ldrb	r3, [r3, r2]
 8009e30:	2b22      	cmp	r3, #34	; 0x22
 8009e32:	d00e      	beq.n	8009e52 <searchC2+0xb2>
 8009e34:	2b22      	cmp	r3, #34	; 0x22
 8009e36:	dc02      	bgt.n	8009e3e <searchC2+0x9e>
 8009e38:	2b11      	cmp	r3, #17
 8009e3a:	d019      	beq.n	8009e70 <searchC2+0xd0>
 8009e3c:	e01b      	b.n	8009e76 <searchC2+0xd6>
 8009e3e:	2b44      	cmp	r3, #68	; 0x44
 8009e40:	d004      	beq.n	8009e4c <searchC2+0xac>
 8009e42:	2b88      	cmp	r3, #136	; 0x88
 8009e44:	d117      	bne.n	8009e76 <searchC2+0xd6>
			//----a前進----
			case 0x88:
				one_sectionU();
 8009e46:	f7fb fb71 	bl	800552c <one_sectionU>
				break;
 8009e4a:	e014      	b.n	8009e76 <searchC2+0xd6>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 8009e4c:	f7fb ffe4 	bl	8005e18 <slalom_R902>

				break;
 8009e50:	e011      	b.n	8009e76 <searchC2+0xd6>
			//----180回転----
			case 0x22:
				half_sectionD2();
 8009e52:	f7fb fb03 	bl	800545c <half_sectionD2>
				rotate_180();
 8009e56:	f7fb fd23 	bl	80058a0 <rotate_180>
				if(wall_info & 0x88){
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <searchC2+0x134>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <searchC2+0xca>
					set_position();
 8009e66:	f7fb fa51 	bl	800530c <set_position>
				}
				half_sectionA2();
 8009e6a:	f7fb fadb 	bl	8005424 <half_sectionA2>
				break;
 8009e6e:	e002      	b.n	8009e76 <searchC2+0xd6>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 8009e70:	f7fc f8b2 	bl	8005fd8 <slalom_L902>
				break;
 8009e74:	bf00      	nop
		}
		adv_pos();
 8009e76:	f000 faa7 	bl	800a3c8 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 8009e7a:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <searchC2+0x130>)
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <searchC2+0xec>
 8009e88:	f000 fad8 	bl	800a43c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009e8c:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <searchC2+0x140>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <searchC2+0x144>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d1c1      	bne.n	8009e1e <searchC2+0x7e>
 8009e9a:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <searchC2+0x140>)
 8009e9c:	785b      	ldrb	r3, [r3, #1]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <searchC2+0x148>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d1ba      	bne.n	8009e1e <searchC2+0x7e>

	half_sectionD2();
 8009ea8:	f7fb fad8 	bl	800545c <half_sectionD2>

	HAL_Delay(2000);
 8009eac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009eb0:	f7f7 f88c 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009eb4:	f7fb fcf4 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <searchC2+0x130>)
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <searchC2+0x12a>
		store_map_in_eeprom();
 8009ec6:	f001 fc27 	bl	800b718 <store_map_in_eeprom>
	}
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000ee4 	.word	0x20000ee4
 8009ed4:	20000344 	.word	0x20000344
 8009ed8:	20000f0c 	.word	0x20000f0c
 8009edc:	20000bd4 	.word	0x20000bd4
 8009ee0:	20000b8c 	.word	0x20000b8c
 8009ee4:	20000b2d 	.word	0x20000b2d
 8009ee8:	20000ac8 	.word	0x20000ac8

08009eec <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009ef0:	4b6a      	ldr	r3, [pc, #424]	; (800a09c <searchD+0x1b0>)
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <searchD+0x16>
		load_map_from_eeprom();
 8009efe:	f001 fc45 	bl	800b78c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009f02:	4b66      	ldr	r3, [pc, #408]	; (800a09c <searchD+0x1b0>)
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <searchD+0x28>
 8009f10:	f001 fcb4 	bl	800b87c <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 8009f14:	4b61      	ldr	r3, [pc, #388]	; (800a09c <searchD+0x1b0>)
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <searchD+0x44>
 8009f22:	4b5f      	ldr	r3, [pc, #380]	; (800a0a0 <searchD+0x1b4>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	4b5c      	ldr	r3, [pc, #368]	; (800a0a0 <searchD+0x1b4>)
 8009f2e:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009f30:	4b5a      	ldr	r3, [pc, #360]	; (800a09c <searchD+0x1b0>)
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <searchD+0x56>
 8009f3e:	f000 fb07 	bl	800a550 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 8009f42:	f7fb f9ed 	bl	8005320 <start_sectionA>
	adv_pos();
 8009f46:	f000 fa3f 	bl	800a3c8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 8009f4a:	4b54      	ldr	r3, [pc, #336]	; (800a09c <searchD+0x1b0>)
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <searchD+0x70>
 8009f58:	f000 fafa 	bl	800a550 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 8009f5c:	4b51      	ldr	r3, [pc, #324]	; (800a0a4 <searchD+0x1b8>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 8009f62:	f000 fc63 	bl	800a82c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8009f66:	f000 ff99 	bl	800ae9c <make_route>

	H_accel_flag = 0;
 8009f6a:	4b4f      	ldr	r3, [pc, #316]	; (800a0a8 <searchD+0x1bc>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8009f70:	4b4c      	ldr	r3, [pc, #304]	; (800a0a4 <searchD+0x1b8>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	b2d1      	uxtb	r1, r2
 8009f78:	4a4a      	ldr	r2, [pc, #296]	; (800a0a4 <searchD+0x1b8>)
 8009f7a:	7011      	strb	r1, [r2, #0]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	4b4b      	ldr	r3, [pc, #300]	; (800a0ac <searchD+0x1c0>)
 8009f80:	5c9b      	ldrb	r3, [r3, r2]
 8009f82:	2b22      	cmp	r3, #34	; 0x22
 8009f84:	d053      	beq.n	800a02e <searchD+0x142>
 8009f86:	2b22      	cmp	r3, #34	; 0x22
 8009f88:	dc02      	bgt.n	8009f90 <searchD+0xa4>
 8009f8a:	2b11      	cmp	r3, #17
 8009f8c:	d056      	beq.n	800a03c <searchD+0x150>
 8009f8e:	e058      	b.n	800a042 <searchD+0x156>
 8009f90:	2b44      	cmp	r3, #68	; 0x44
 8009f92:	d049      	beq.n	800a028 <searchD+0x13c>
 8009f94:	2b88      	cmp	r3, #136	; 0x88
 8009f96:	d154      	bne.n	800a042 <searchD+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 8009f98:	4b40      	ldr	r3, [pc, #256]	; (800a09c <searchD+0x1b0>)
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d13c      	bne.n	800a020 <searchD+0x134>
 8009fa6:	4b3d      	ldr	r3, [pc, #244]	; (800a09c <searchD+0x1b0>)
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d135      	bne.n	800a020 <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 8009fb4:	4b3b      	ldr	r3, [pc, #236]	; (800a0a4 <searchD+0x1b8>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	4a3c      	ldr	r2, [pc, #240]	; (800a0ac <searchD+0x1c0>)
 8009fbc:	5cd2      	ldrb	r2, [r2, r3]
 8009fbe:	4b39      	ldr	r3, [pc, #228]	; (800a0a4 <searchD+0x1b8>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4b39      	ldr	r3, [pc, #228]	; (800a0ac <searchD+0x1c0>)
 8009fc6:	5c5b      	ldrb	r3, [r3, r1]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b88      	cmp	r3, #136	; 0x88
 8009fce:	d110      	bne.n	8009ff2 <searchD+0x106>
 8009fd0:	4b34      	ldr	r3, [pc, #208]	; (800a0a4 <searchD+0x1b8>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	4b35      	ldr	r3, [pc, #212]	; (800a0ac <searchD+0x1c0>)
 8009fd8:	5c9b      	ldrb	r3, [r3, r2]
 8009fda:	2bff      	cmp	r3, #255	; 0xff
 8009fdc:	d009      	beq.n	8009ff2 <searchD+0x106>
 8009fde:	4b32      	ldr	r3, [pc, #200]	; (800a0a8 <searchD+0x1bc>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d105      	bne.n	8009ff2 <searchD+0x106>
						one_sectionA();
 8009fe6:	f7fb fa53 	bl	8005490 <one_sectionA>
						H_accel_flag = 1;
 8009fea:	4b2f      	ldr	r3, [pc, #188]	; (800a0a8 <searchD+0x1bc>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	e015      	b.n	800a01e <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 8009ff2:	4b2c      	ldr	r3, [pc, #176]	; (800a0a4 <searchD+0x1b8>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4b2c      	ldr	r3, [pc, #176]	; (800a0ac <searchD+0x1c0>)
 8009ffa:	5c9b      	ldrb	r3, [r3, r2]
 8009ffc:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800a000:	2b00      	cmp	r3, #0
 800a002:	d009      	beq.n	800a018 <searchD+0x12c>
 800a004:	4b28      	ldr	r3, [pc, #160]	; (800a0a8 <searchD+0x1bc>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d105      	bne.n	800a018 <searchD+0x12c>
						one_sectionD();
 800a00c:	f7fb fa66 	bl	80054dc <one_sectionD>
						H_accel_flag = 0;
 800a010:	4b25      	ldr	r3, [pc, #148]	; (800a0a8 <searchD+0x1bc>)
 800a012:	2200      	movs	r2, #0
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	e002      	b.n	800a01e <searchD+0x132>
					}else{
						one_sectionU();
 800a018:	f7fb fa88 	bl	800552c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800a01c:	e003      	b.n	800a026 <searchD+0x13a>
 800a01e:	e002      	b.n	800a026 <searchD+0x13a>
					}
				}else{
					one_sectionU();
 800a020:	f7fb fa84 	bl	800552c <one_sectionU>
				}
				break;
 800a024:	e00d      	b.n	800a042 <searchD+0x156>
 800a026:	e00c      	b.n	800a042 <searchD+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800a028:	f7fb fd08 	bl	8005a3c <slalom_R90>

				break;
 800a02c:	e009      	b.n	800a042 <searchD+0x156>
			//----180回転----
			case 0x22:
				half_sectionD();
 800a02e:	f7fb f9bd 	bl	80053ac <half_sectionD>
				rotate_180();
 800a032:	f7fb fc35 	bl	80058a0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 800a036:	f7fb f99f 	bl	8005378 <half_sectionA>
				break;
 800a03a:	e002      	b.n	800a042 <searchD+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800a03c:	f7fb fdee 	bl	8005c1c <slalom_L90>
				break;
 800a040:	bf00      	nop
		}
		adv_pos();
 800a042:	f000 f9c1 	bl	800a3c8 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800a046:	4b15      	ldr	r3, [pc, #84]	; (800a09c <searchD+0x1b0>)
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <searchD+0x16c>
 800a054:	f000 f9f2 	bl	800a43c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <searchD+0x1c4>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <searchD+0x1c8>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d184      	bne.n	8009f70 <searchD+0x84>
 800a066:	4b12      	ldr	r3, [pc, #72]	; (800a0b0 <searchD+0x1c4>)
 800a068:	785b      	ldrb	r3, [r3, #1]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <searchD+0x1cc>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	f47f af7d 	bne.w	8009f70 <searchD+0x84>

	half_sectionD();
 800a076:	f7fb f999 	bl	80053ac <half_sectionD>

	HAL_Delay(2000);
 800a07a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a07e:	f7f6 ffa5 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800a082:	f7fb fc0d 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 800a086:	4b05      	ldr	r3, [pc, #20]	; (800a09c <searchD+0x1b0>)
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <searchD+0x1ac>
		store_map_in_eeprom();
 800a094:	f001 fb40 	bl	800b718 <store_map_in_eeprom>
	}
}
 800a098:	bf00      	nop
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000ee4 	.word	0x20000ee4
 800a0a0:	20000344 	.word	0x20000344
 800a0a4:	20000f0c 	.word	0x20000f0c
 800a0a8:	20000345 	.word	0x20000345
 800a0ac:	20000bd4 	.word	0x20000bd4
 800a0b0:	20000b8c 	.word	0x20000b8c
 800a0b4:	20000b2d 	.word	0x20000b2d
 800a0b8:	20000ac8 	.word	0x20000ac8

0800a0bc <searchD2>:
//searchD2
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD2(){
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800a0c0:	4b6a      	ldr	r3, [pc, #424]	; (800a26c <searchD2+0x1b0>)
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <searchD2+0x16>
		load_map_from_eeprom();
 800a0ce:	f001 fb5d 	bl	800b78c <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(MF.FLAG.SCND == 0)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800a0d2:	4b66      	ldr	r3, [pc, #408]	; (800a26c <searchD2+0x1b0>)
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <searchD2+0x28>
 800a0e0:	f001 fbcc 	bl	800b87c <get_wall_info>
	if(MF.FLAG.SCND == 0)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800a0e4:	4b61      	ldr	r3, [pc, #388]	; (800a26c <searchD2+0x1b0>)
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <searchD2+0x44>
 800a0f2:	4b5f      	ldr	r3, [pc, #380]	; (800a270 <searchD2+0x1b4>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	4b5c      	ldr	r3, [pc, #368]	; (800a270 <searchD2+0x1b4>)
 800a0fe:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800a100:	4b5a      	ldr	r3, [pc, #360]	; (800a26c <searchD2+0x1b0>)
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <searchD2+0x56>
 800a10e:	f000 fa1f 	bl	800a550 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800a112:	f7fb f95b 	bl	80053cc <start_sectionA2>
	adv_pos();
 800a116:	f000 f957 	bl	800a3c8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(MF.FLAG.SCND == 0)write_map();											//a壁情報を地図に記入
 800a11a:	4b54      	ldr	r3, [pc, #336]	; (800a26c <searchD2+0x1b0>)
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <searchD2+0x70>
 800a128:	f000 fa12 	bl	800a550 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800a12c:	4b51      	ldr	r3, [pc, #324]	; (800a274 <searchD2+0x1b8>)
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800a132:	f000 fb7b 	bl	800a82c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800a136:	f000 feb1 	bl	800ae9c <make_route>

	H_accel_flag = 0;
 800a13a:	4b4f      	ldr	r3, [pc, #316]	; (800a278 <searchD2+0x1bc>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800a140:	4b4c      	ldr	r3, [pc, #304]	; (800a274 <searchD2+0x1b8>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	b2d1      	uxtb	r1, r2
 800a148:	4a4a      	ldr	r2, [pc, #296]	; (800a274 <searchD2+0x1b8>)
 800a14a:	7011      	strb	r1, [r2, #0]
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b4b      	ldr	r3, [pc, #300]	; (800a27c <searchD2+0x1c0>)
 800a150:	5c9b      	ldrb	r3, [r3, r2]
 800a152:	2b22      	cmp	r3, #34	; 0x22
 800a154:	d053      	beq.n	800a1fe <searchD2+0x142>
 800a156:	2b22      	cmp	r3, #34	; 0x22
 800a158:	dc02      	bgt.n	800a160 <searchD2+0xa4>
 800a15a:	2b11      	cmp	r3, #17
 800a15c:	d056      	beq.n	800a20c <searchD2+0x150>
 800a15e:	e058      	b.n	800a212 <searchD2+0x156>
 800a160:	2b44      	cmp	r3, #68	; 0x44
 800a162:	d049      	beq.n	800a1f8 <searchD2+0x13c>
 800a164:	2b88      	cmp	r3, #136	; 0x88
 800a166:	d154      	bne.n	800a212 <searchD2+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800a168:	4b40      	ldr	r3, [pc, #256]	; (800a26c <searchD2+0x1b0>)
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b01      	cmp	r3, #1
 800a174:	d13c      	bne.n	800a1f0 <searchD2+0x134>
 800a176:	4b3d      	ldr	r3, [pc, #244]	; (800a26c <searchD2+0x1b0>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	d135      	bne.n	800a1f0 <searchD2+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800a184:	4b3b      	ldr	r3, [pc, #236]	; (800a274 <searchD2+0x1b8>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	3b01      	subs	r3, #1
 800a18a:	4a3c      	ldr	r2, [pc, #240]	; (800a27c <searchD2+0x1c0>)
 800a18c:	5cd2      	ldrb	r2, [r2, r3]
 800a18e:	4b39      	ldr	r3, [pc, #228]	; (800a274 <searchD2+0x1b8>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	4619      	mov	r1, r3
 800a194:	4b39      	ldr	r3, [pc, #228]	; (800a27c <searchD2+0x1c0>)
 800a196:	5c5b      	ldrb	r3, [r3, r1]
 800a198:	4013      	ands	r3, r2
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b88      	cmp	r3, #136	; 0x88
 800a19e:	d110      	bne.n	800a1c2 <searchD2+0x106>
 800a1a0:	4b34      	ldr	r3, [pc, #208]	; (800a274 <searchD2+0x1b8>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4b35      	ldr	r3, [pc, #212]	; (800a27c <searchD2+0x1c0>)
 800a1a8:	5c9b      	ldrb	r3, [r3, r2]
 800a1aa:	2bff      	cmp	r3, #255	; 0xff
 800a1ac:	d009      	beq.n	800a1c2 <searchD2+0x106>
 800a1ae:	4b32      	ldr	r3, [pc, #200]	; (800a278 <searchD2+0x1bc>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <searchD2+0x106>
						one_sectionA();
 800a1b6:	f7fb f96b 	bl	8005490 <one_sectionA>
						H_accel_flag = 1;
 800a1ba:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <searchD2+0x1bc>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	e015      	b.n	800a1ee <searchD2+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800a1c2:	4b2c      	ldr	r3, [pc, #176]	; (800a274 <searchD2+0x1b8>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4b2c      	ldr	r3, [pc, #176]	; (800a27c <searchD2+0x1c0>)
 800a1ca:	5c9b      	ldrb	r3, [r3, r2]
 800a1cc:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d009      	beq.n	800a1e8 <searchD2+0x12c>
 800a1d4:	4b28      	ldr	r3, [pc, #160]	; (800a278 <searchD2+0x1bc>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d105      	bne.n	800a1e8 <searchD2+0x12c>
						one_sectionD();
 800a1dc:	f7fb f97e 	bl	80054dc <one_sectionD>
						H_accel_flag = 0;
 800a1e0:	4b25      	ldr	r3, [pc, #148]	; (800a278 <searchD2+0x1bc>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
 800a1e6:	e002      	b.n	800a1ee <searchD2+0x132>
					}else{
						one_sectionU();
 800a1e8:	f7fb f9a0 	bl	800552c <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800a1ec:	e003      	b.n	800a1f6 <searchD2+0x13a>
 800a1ee:	e002      	b.n	800a1f6 <searchD2+0x13a>
					}
				}else{
					one_sectionU();
 800a1f0:	f7fb f99c 	bl	800552c <one_sectionU>
				}
				break;
 800a1f4:	e00d      	b.n	800a212 <searchD2+0x156>
 800a1f6:	e00c      	b.n	800a212 <searchD2+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800a1f8:	f7fb fe0e 	bl	8005e18 <slalom_R902>

				break;
 800a1fc:	e009      	b.n	800a212 <searchD2+0x156>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800a1fe:	f7fb f92d 	bl	800545c <half_sectionD2>
				rotate_180();
 800a202:	f7fb fb4d 	bl	80058a0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA2();
 800a206:	f7fb f90d 	bl	8005424 <half_sectionA2>
				break;
 800a20a:	e002      	b.n	800a212 <searchD2+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800a20c:	f7fb fee4 	bl	8005fd8 <slalom_L902>
				break;
 800a210:	bf00      	nop
		}
		adv_pos();
 800a212:	f000 f8d9 	bl	800a3c8 <adv_pos>
		if(MF.FLAG.SCND == 0)conf_route();
 800a216:	4b15      	ldr	r3, [pc, #84]	; (800a26c <searchD2+0x1b0>)
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <searchD2+0x16c>
 800a224:	f000 f90a 	bl	800a43c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800a228:	4b15      	ldr	r3, [pc, #84]	; (800a280 <searchD2+0x1c4>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	4b15      	ldr	r3, [pc, #84]	; (800a284 <searchD2+0x1c8>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d184      	bne.n	800a140 <searchD2+0x84>
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <searchD2+0x1c4>)
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	4b12      	ldr	r3, [pc, #72]	; (800a288 <searchD2+0x1cc>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	f47f af7d 	bne.w	800a140 <searchD2+0x84>

	half_sectionD2();
 800a246:	f7fb f909 	bl	800545c <half_sectionD2>

	HAL_Delay(2000);
 800a24a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a24e:	f7f6 febd 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800a252:	f7fb fb25 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <searchD2+0x1b0>)
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <searchD2+0x1ac>
		store_map_in_eeprom();
 800a264:	f001 fa58 	bl	800b718 <store_map_in_eeprom>
	}
}
 800a268:	bf00      	nop
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000ee4 	.word	0x20000ee4
 800a270:	20000344 	.word	0x20000344
 800a274:	20000f0c 	.word	0x20000f0c
 800a278:	20000345 	.word	0x20000345
 800a27c:	20000bd4 	.word	0x20000bd4
 800a280:	20000b8c 	.word	0x20000b8c
 800a284:	20000b2d 	.word	0x20000b2d
 800a288:	20000ac8 	.word	0x20000ac8

0800a28c <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0

	int i = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	607b      	str	r3, [r7, #4]
	int j = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d111      	bne.n	800a2c4 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800a2a0:	f7fb f86a 	bl	8005378 <half_sectionA>
			adv_pos();
 800a2a4:	f000 f890 	bl	800a3c8 <adv_pos>
			write_map();														//地図の初期化
 800a2a8:	f000 f952 	bl	800a550 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800a2ac:	4b3e      	ldr	r3, [pc, #248]	; (800a3a8 <searchE+0x11c>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
 800a2b2:	4b3e      	ldr	r3, [pc, #248]	; (800a3ac <searchE+0x120>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800a2b8:	f000 ff1e 	bl	800b0f8 <find_pregoal>
			make_smap2();
 800a2bc:	f001 f908 	bl	800b4d0 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800a2c0:	f000 fdec 	bl	800ae9c <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800a2c4:	4b38      	ldr	r3, [pc, #224]	; (800a3a8 <searchE+0x11c>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	b2d1      	uxtb	r1, r2
 800a2cc:	4a36      	ldr	r2, [pc, #216]	; (800a3a8 <searchE+0x11c>)
 800a2ce:	7011      	strb	r1, [r2, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b37      	ldr	r3, [pc, #220]	; (800a3b0 <searchE+0x124>)
 800a2d4:	5c9b      	ldrb	r3, [r3, r2]
 800a2d6:	2b22      	cmp	r3, #34	; 0x22
 800a2d8:	d00e      	beq.n	800a2f8 <searchE+0x6c>
 800a2da:	2b22      	cmp	r3, #34	; 0x22
 800a2dc:	dc02      	bgt.n	800a2e4 <searchE+0x58>
 800a2de:	2b11      	cmp	r3, #17
 800a2e0:	d011      	beq.n	800a306 <searchE+0x7a>
 800a2e2:	e013      	b.n	800a30c <searchE+0x80>
 800a2e4:	2b44      	cmp	r3, #68	; 0x44
 800a2e6:	d004      	beq.n	800a2f2 <searchE+0x66>
 800a2e8:	2b88      	cmp	r3, #136	; 0x88
 800a2ea:	d10f      	bne.n	800a30c <searchE+0x80>
				//----a前進----
			case 0x88:
				one_sectionU();
 800a2ec:	f7fb f91e 	bl	800552c <one_sectionU>
				break;
 800a2f0:	e00c      	b.n	800a30c <searchE+0x80>
				//----a右折----
			case 0x44:
				slalom_R90();
 800a2f2:	f7fb fba3 	bl	8005a3c <slalom_R90>
				break;
 800a2f6:	e009      	b.n	800a30c <searchE+0x80>
				//----180回転----
			case 0x22:
				half_sectionD();
 800a2f8:	f7fb f858 	bl	80053ac <half_sectionD>
				rotate_180();
 800a2fc:	f7fb fad0 	bl	80058a0 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 800a300:	f7fb f83a 	bl	8005378 <half_sectionA>
				break;
 800a304:	e002      	b.n	800a30c <searchE+0x80>
				//----a左折----
			case 0x11:
				slalom_L90();
 800a306:	f7fb fc89 	bl	8005c1c <slalom_L90>
				break;
 800a30a:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800a30c:	f000 f85c 	bl	800a3c8 <adv_pos>
			j++;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	3301      	adds	r3, #1
 800a314:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b96      	cmp	r3, #150	; 0x96
 800a31a:	dc0e      	bgt.n	800a33a <searchE+0xae>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800a31c:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <searchE+0x128>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	b2da      	uxtb	r2, r3
 800a322:	4b25      	ldr	r3, [pc, #148]	; (800a3b8 <searchE+0x12c>)
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d1cc      	bne.n	800a2c4 <searchE+0x38>
 800a32a:	4b22      	ldr	r3, [pc, #136]	; (800a3b4 <searchE+0x128>)
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	4b22      	ldr	r3, [pc, #136]	; (800a3bc <searchE+0x130>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d1c5      	bne.n	800a2c4 <searchE+0x38>
 800a338:	e000      	b.n	800a33c <searchE+0xb0>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800a33a:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800a33c:	f001 fa9e 	bl	800b87c <get_wall_info>
		write_map();														//a地図の初期化
 800a340:	f000 f906 	bl	800a550 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800a344:	4b18      	ldr	r3, [pc, #96]	; (800a3a8 <searchE+0x11c>)
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
 800a34a:	4b18      	ldr	r3, [pc, #96]	; (800a3ac <searchE+0x120>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800a350:	f000 fed2 	bl	800b0f8 <find_pregoal>
		if (allmap_comp_flag) {
 800a354:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <searchE+0x134>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <searchE+0xd6>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800a35c:	f7fb f826 	bl	80053ac <half_sectionD>
			break;
 800a360:	e00e      	b.n	800a380 <searchE+0xf4>
		}
		make_smap2();
 800a362:	f001 f8b5 	bl	800b4d0 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800a366:	f000 fd99 	bl	800ae9c <make_route>

		if (j > 150) {
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b96      	cmp	r3, #150	; 0x96
 800a36e:	dc06      	bgt.n	800a37e <searchE+0xf2>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	3301      	adds	r3, #1
 800a374:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b95      	cmp	r3, #149	; 0x95
 800a37a:	dd8e      	ble.n	800a29a <searchE+0xe>
 800a37c:	e000      	b.n	800a380 <searchE+0xf4>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800a37e:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(2000);
 800a380:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a384:	f7f6 fe22 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800a388:	f7fb fa8a 	bl	80058a0 <rotate_180>

	if(!MF.FLAG.SCND){
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <searchE+0x138>)
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <searchE+0x112>
		store_map_in_eeprom();
 800a39a:	f001 f9bd 	bl	800b718 <store_map_in_eeprom>
	}
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20000f0c 	.word	0x20000f0c
 800a3ac:	200003ca 	.word	0x200003ca
 800a3b0:	20000bd4 	.word	0x20000bd4
 800a3b4:	20000b8c 	.word	0x20000b8c
 800a3b8:	20000cdc 	.word	0x20000cdc
 800a3bc:	20000efc 	.word	0x20000efc
 800a3c0:	20000b2c 	.word	0x20000b2c
 800a3c4:	20000ee4 	.word	0x20000ee4

0800a3c8 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <adv_pos+0x70>)
 800a3ce:	789b      	ldrb	r3, [r3, #2]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d82a      	bhi.n	800a42c <adv_pos+0x64>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <adv_pos+0x14>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3ed 	.word	0x0800a3ed
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a40d 	.word	0x0800a40d
 800a3e8:	0800a41d 	.word	0x0800a41d
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800a3ec:	4b12      	ldr	r3, [pc, #72]	; (800a438 <adv_pos+0x70>)
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	4b10      	ldr	r3, [pc, #64]	; (800a438 <adv_pos+0x70>)
 800a3f8:	705a      	strb	r2, [r3, #1]
		break;
 800a3fa:	e017      	b.n	800a42c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <adv_pos+0x70>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	3301      	adds	r3, #1
 800a404:	b2da      	uxtb	r2, r3
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <adv_pos+0x70>)
 800a408:	701a      	strb	r2, [r3, #0]
		break;
 800a40a:	e00f      	b.n	800a42c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <adv_pos+0x70>)
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	b2da      	uxtb	r2, r3
 800a416:	4b08      	ldr	r3, [pc, #32]	; (800a438 <adv_pos+0x70>)
 800a418:	705a      	strb	r2, [r3, #1]
		break;
 800a41a:	e007      	b.n	800a42c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <adv_pos+0x70>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b2db      	uxtb	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b2da      	uxtb	r2, r3
 800a426:	4b04      	ldr	r3, [pc, #16]	; (800a438 <adv_pos+0x70>)
 800a428:	701a      	strb	r2, [r3, #0]
		break;
 800a42a:	bf00      	nop
	}
}
 800a42c:	bf00      	nop
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000b8c 	.word	0x20000b8c

0800a43c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800a440:	f000 f886 	bl	800a550 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800a444:	4b09      	ldr	r3, [pc, #36]	; (800a46c <conf_route+0x30>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	461a      	mov	r2, r3
 800a44a:	4b09      	ldr	r3, [pc, #36]	; (800a470 <conf_route+0x34>)
 800a44c:	5c9a      	ldrb	r2, [r3, r2]
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <conf_route+0x38>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	4013      	ands	r3, r2
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d006      	beq.n	800a468 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800a45a:	f000 f9e7 	bl	800a82c <make_smap>
		make_route();										//a最短経路を更新
 800a45e:	f000 fd1d 	bl	800ae9c <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800a462:	4b02      	ldr	r3, [pc, #8]	; (800a46c <conf_route+0x30>)
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
	}
}
 800a468:	bf00      	nop
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000f0c 	.word	0x20000f0c
 800a470:	20000bd4 	.word	0x20000bd4
 800a474:	20000344 	.word	0x20000344

0800a478 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a47e:	2300      	movs	r3, #0
 800a480:	71bb      	strb	r3, [r7, #6]
 800a482:	e013      	b.n	800a4ac <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a484:	2300      	movs	r3, #0
 800a486:	71fb      	strb	r3, [r7, #7]
 800a488:	e00a      	b.n	800a4a0 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800a48a:	79ba      	ldrb	r2, [r7, #6]
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	492f      	ldr	r1, [pc, #188]	; (800a54c <map_Init+0xd4>)
 800a490:	0112      	lsls	r2, r2, #4
 800a492:	440a      	add	r2, r1
 800a494:	4413      	add	r3, r2
 800a496:	22f0      	movs	r2, #240	; 0xf0
 800a498:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	3301      	adds	r3, #1
 800a49e:	71fb      	strb	r3, [r7, #7]
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b0f      	cmp	r3, #15
 800a4a4:	d9f1      	bls.n	800a48a <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a4a6:	79bb      	ldrb	r3, [r7, #6]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	71bb      	strb	r3, [r7, #6]
 800a4ac:	79bb      	ldrb	r3, [r7, #6]
 800a4ae:	2b0f      	cmp	r3, #15
 800a4b0:	d9e8      	bls.n	800a484 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	71bb      	strb	r3, [r7, #6]
 800a4b6:	e020      	b.n	800a4fa <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800a4b8:	79bb      	ldrb	r3, [r7, #6]
 800a4ba:	4a24      	ldr	r2, [pc, #144]	; (800a54c <map_Init+0xd4>)
 800a4bc:	011b      	lsls	r3, r3, #4
 800a4be:	4413      	add	r3, r2
 800a4c0:	781a      	ldrb	r2, [r3, #0]
 800a4c2:	79bb      	ldrb	r3, [r7, #6]
 800a4c4:	f062 020e 	orn	r2, r2, #14
 800a4c8:	b2d1      	uxtb	r1, r2
 800a4ca:	4a20      	ldr	r2, [pc, #128]	; (800a54c <map_Init+0xd4>)
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	4413      	add	r3, r2
 800a4d0:	460a      	mov	r2, r1
 800a4d2:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800a4d4:	79bb      	ldrb	r3, [r7, #6]
 800a4d6:	4a1d      	ldr	r2, [pc, #116]	; (800a54c <map_Init+0xd4>)
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	4413      	add	r3, r2
 800a4dc:	330f      	adds	r3, #15
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	79bb      	ldrb	r3, [r7, #6]
 800a4e2:	f062 020b 	orn	r2, r2, #11
 800a4e6:	b2d1      	uxtb	r1, r2
 800a4e8:	4a18      	ldr	r2, [pc, #96]	; (800a54c <map_Init+0xd4>)
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	4413      	add	r3, r2
 800a4ee:	330f      	adds	r3, #15
 800a4f0:	460a      	mov	r2, r1
 800a4f2:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a4f4:	79bb      	ldrb	r3, [r7, #6]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	71bb      	strb	r3, [r7, #6]
 800a4fa:	79bb      	ldrb	r3, [r7, #6]
 800a4fc:	2b0f      	cmp	r3, #15
 800a4fe:	d9db      	bls.n	800a4b8 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800a500:	2300      	movs	r3, #0
 800a502:	71fb      	strb	r3, [r7, #7]
 800a504:	e019      	b.n	800a53a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	4a10      	ldr	r2, [pc, #64]	; (800a54c <map_Init+0xd4>)
 800a50a:	5cd2      	ldrb	r2, [r2, r3]
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	f062 020d 	orn	r2, r2, #13
 800a512:	b2d1      	uxtb	r1, r2
 800a514:	4a0d      	ldr	r2, [pc, #52]	; (800a54c <map_Init+0xd4>)
 800a516:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800a518:	79fb      	ldrb	r3, [r7, #7]
 800a51a:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <map_Init+0xd4>)
 800a51c:	4413      	add	r3, r2
 800a51e:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	f062 0207 	orn	r2, r2, #7
 800a528:	b2d1      	uxtb	r1, r2
 800a52a:	4a08      	ldr	r2, [pc, #32]	; (800a54c <map_Init+0xd4>)
 800a52c:	4413      	add	r3, r2
 800a52e:	460a      	mov	r2, r1
 800a530:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	3301      	adds	r3, #1
 800a538:	71fb      	strb	r3, [r7, #7]
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	2b0f      	cmp	r3, #15
 800a53e:	d9e2      	bls.n	800a506 <map_Init+0x8e>
	}
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	2000022c 	.word	0x2000022c

0800a550 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800a550:	b490      	push	{r4, r7}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800a556:	4b8f      	ldr	r3, [pc, #572]	; (800a794 <write_map+0x244>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	4b8e      	ldr	r3, [pc, #568]	; (800a798 <write_map+0x248>)
 800a55e:	789b      	ldrb	r3, [r3, #2]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	fa42 f303 	asr.w	r3, r2, r3
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 030f 	and.w	r3, r3, #15
 800a56c:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	b25a      	sxtb	r2, r3
 800a574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a578:	4313      	orrs	r3, r2
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800a57e:	4b86      	ldr	r3, [pc, #536]	; (800a798 <write_map+0x248>)
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	4618      	mov	r0, r3
 800a586:	4b84      	ldr	r3, [pc, #528]	; (800a798 <write_map+0x248>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	4619      	mov	r1, r3
 800a58e:	4a83      	ldr	r2, [pc, #524]	; (800a79c <write_map+0x24c>)
 800a590:	0103      	lsls	r3, r0, #4
 800a592:	4413      	add	r3, r2
 800a594:	440b      	add	r3, r1
 800a596:	79fa      	ldrb	r2, [r7, #7]
 800a598:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800a59a:	4b7f      	ldr	r3, [pc, #508]	; (800a798 <write_map+0x248>)
 800a59c:	785b      	ldrb	r3, [r3, #1]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b0f      	cmp	r3, #15
 800a5a2:	d039      	beq.n	800a618 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d01a      	beq.n	800a5e4 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800a5ae:	4b7a      	ldr	r3, [pc, #488]	; (800a798 <write_map+0x248>)
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	b2d8      	uxtb	r0, r3
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	4a77      	ldr	r2, [pc, #476]	; (800a798 <write_map+0x248>)
 800a5ba:	7812      	ldrb	r2, [r2, #0]
 800a5bc:	b2d1      	uxtb	r1, r2
 800a5be:	460c      	mov	r4, r1
 800a5c0:	4a76      	ldr	r2, [pc, #472]	; (800a79c <write_map+0x24c>)
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4423      	add	r3, r4
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800a5d4:	b2d1      	uxtb	r1, r2
 800a5d6:	4a71      	ldr	r2, [pc, #452]	; (800a79c <write_map+0x24c>)
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	4413      	add	r3, r2
 800a5dc:	4403      	add	r3, r0
 800a5de:	460a      	mov	r2, r1
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	e019      	b.n	800a618 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800a5e4:	4b6c      	ldr	r3, [pc, #432]	; (800a798 <write_map+0x248>)
 800a5e6:	785b      	ldrb	r3, [r3, #1]
 800a5e8:	b2d8      	uxtb	r0, r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	4a6a      	ldr	r2, [pc, #424]	; (800a798 <write_map+0x248>)
 800a5f0:	7812      	ldrb	r2, [r2, #0]
 800a5f2:	b2d1      	uxtb	r1, r2
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	4a69      	ldr	r2, [pc, #420]	; (800a79c <write_map+0x24c>)
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	4413      	add	r3, r2
 800a5fc:	4423      	add	r3, r4
 800a5fe:	781a      	ldrb	r2, [r3, #0]
 800a600:	4603      	mov	r3, r0
 800a602:	3301      	adds	r3, #1
 800a604:	4608      	mov	r0, r1
 800a606:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a60a:	b2d1      	uxtb	r1, r2
 800a60c:	4a63      	ldr	r2, [pc, #396]	; (800a79c <write_map+0x24c>)
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	4413      	add	r3, r2
 800a612:	4403      	add	r3, r0
 800a614:	460a      	mov	r2, r1
 800a616:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800a618:	4b5f      	ldr	r3, [pc, #380]	; (800a798 <write_map+0x248>)
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b0f      	cmp	r3, #15
 800a620:	d037      	beq.n	800a692 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d019      	beq.n	800a660 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800a62c:	4b5a      	ldr	r3, [pc, #360]	; (800a798 <write_map+0x248>)
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	b2dc      	uxtb	r4, r3
 800a632:	4622      	mov	r2, r4
 800a634:	4b58      	ldr	r3, [pc, #352]	; (800a798 <write_map+0x248>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b2d8      	uxtb	r0, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	3301      	adds	r3, #1
 800a63e:	4957      	ldr	r1, [pc, #348]	; (800a79c <write_map+0x24c>)
 800a640:	0112      	lsls	r2, r2, #4
 800a642:	440a      	add	r2, r1
 800a644:	4413      	add	r3, r2
 800a646:	781a      	ldrb	r2, [r3, #0]
 800a648:	4603      	mov	r3, r0
 800a64a:	3301      	adds	r3, #1
 800a64c:	f042 0211 	orr.w	r2, r2, #17
 800a650:	b2d0      	uxtb	r0, r2
 800a652:	4952      	ldr	r1, [pc, #328]	; (800a79c <write_map+0x24c>)
 800a654:	0122      	lsls	r2, r4, #4
 800a656:	440a      	add	r2, r1
 800a658:	4413      	add	r3, r2
 800a65a:	4602      	mov	r2, r0
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	e018      	b.n	800a692 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800a660:	4b4d      	ldr	r3, [pc, #308]	; (800a798 <write_map+0x248>)
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	b2dc      	uxtb	r4, r3
 800a666:	4622      	mov	r2, r4
 800a668:	4b4b      	ldr	r3, [pc, #300]	; (800a798 <write_map+0x248>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b2d8      	uxtb	r0, r3
 800a66e:	4603      	mov	r3, r0
 800a670:	3301      	adds	r3, #1
 800a672:	494a      	ldr	r1, [pc, #296]	; (800a79c <write_map+0x24c>)
 800a674:	0112      	lsls	r2, r2, #4
 800a676:	440a      	add	r2, r1
 800a678:	4413      	add	r3, r2
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	4603      	mov	r3, r0
 800a67e:	3301      	adds	r3, #1
 800a680:	f022 0211 	bic.w	r2, r2, #17
 800a684:	b2d0      	uxtb	r0, r2
 800a686:	4945      	ldr	r1, [pc, #276]	; (800a79c <write_map+0x24c>)
 800a688:	0122      	lsls	r2, r4, #4
 800a68a:	440a      	add	r2, r1
 800a68c:	4413      	add	r3, r2
 800a68e:	4602      	mov	r2, r0
 800a690:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800a692:	4b41      	ldr	r3, [pc, #260]	; (800a798 <write_map+0x248>)
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d039      	beq.n	800a710 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800a69c:	79fb      	ldrb	r3, [r7, #7]
 800a69e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d01a      	beq.n	800a6dc <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800a6a6:	4b3c      	ldr	r3, [pc, #240]	; (800a798 <write_map+0x248>)
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	b2d8      	uxtb	r0, r3
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	4a39      	ldr	r2, [pc, #228]	; (800a798 <write_map+0x248>)
 800a6b2:	7812      	ldrb	r2, [r2, #0]
 800a6b4:	b2d1      	uxtb	r1, r2
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	4a38      	ldr	r2, [pc, #224]	; (800a79c <write_map+0x24c>)
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	4413      	add	r3, r2
 800a6be:	4423      	add	r3, r4
 800a6c0:	781a      	ldrb	r2, [r3, #0]
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	f062 0277 	orn	r2, r2, #119	; 0x77
 800a6cc:	b2d1      	uxtb	r1, r2
 800a6ce:	4a33      	ldr	r2, [pc, #204]	; (800a79c <write_map+0x24c>)
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	4413      	add	r3, r2
 800a6d4:	4403      	add	r3, r0
 800a6d6:	460a      	mov	r2, r1
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	e019      	b.n	800a710 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800a6dc:	4b2e      	ldr	r3, [pc, #184]	; (800a798 <write_map+0x248>)
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	b2d8      	uxtb	r0, r3
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	4a2c      	ldr	r2, [pc, #176]	; (800a798 <write_map+0x248>)
 800a6e8:	7812      	ldrb	r2, [r2, #0]
 800a6ea:	b2d1      	uxtb	r1, r2
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	4a2b      	ldr	r2, [pc, #172]	; (800a79c <write_map+0x24c>)
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	4413      	add	r3, r2
 800a6f4:	4423      	add	r3, r4
 800a6f6:	781a      	ldrb	r2, [r3, #0]
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800a702:	b2d1      	uxtb	r1, r2
 800a704:	4a25      	ldr	r2, [pc, #148]	; (800a79c <write_map+0x24c>)
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	4413      	add	r3, r2
 800a70a:	4403      	add	r3, r0
 800a70c:	460a      	mov	r2, r1
 800a70e:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800a710:	4b21      	ldr	r3, [pc, #132]	; (800a798 <write_map+0x248>)
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d037      	beq.n	800a78a <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	f003 0311 	and.w	r3, r3, #17
 800a720:	2b00      	cmp	r3, #0
 800a722:	d019      	beq.n	800a758 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800a724:	4b1c      	ldr	r3, [pc, #112]	; (800a798 <write_map+0x248>)
 800a726:	785b      	ldrb	r3, [r3, #1]
 800a728:	b2dc      	uxtb	r4, r3
 800a72a:	4622      	mov	r2, r4
 800a72c:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <write_map+0x248>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	b2d8      	uxtb	r0, r3
 800a732:	4603      	mov	r3, r0
 800a734:	3b01      	subs	r3, #1
 800a736:	4919      	ldr	r1, [pc, #100]	; (800a79c <write_map+0x24c>)
 800a738:	0112      	lsls	r2, r2, #4
 800a73a:	440a      	add	r2, r1
 800a73c:	4413      	add	r3, r2
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	4603      	mov	r3, r0
 800a742:	3b01      	subs	r3, #1
 800a744:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800a748:	b2d0      	uxtb	r0, r2
 800a74a:	4914      	ldr	r1, [pc, #80]	; (800a79c <write_map+0x24c>)
 800a74c:	0122      	lsls	r2, r4, #4
 800a74e:	440a      	add	r2, r1
 800a750:	4413      	add	r3, r2
 800a752:	4602      	mov	r2, r0
 800a754:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800a756:	e018      	b.n	800a78a <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800a758:	4b0f      	ldr	r3, [pc, #60]	; (800a798 <write_map+0x248>)
 800a75a:	785b      	ldrb	r3, [r3, #1]
 800a75c:	b2dc      	uxtb	r4, r3
 800a75e:	4622      	mov	r2, r4
 800a760:	4b0d      	ldr	r3, [pc, #52]	; (800a798 <write_map+0x248>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	b2d8      	uxtb	r0, r3
 800a766:	4603      	mov	r3, r0
 800a768:	3b01      	subs	r3, #1
 800a76a:	490c      	ldr	r1, [pc, #48]	; (800a79c <write_map+0x24c>)
 800a76c:	0112      	lsls	r2, r2, #4
 800a76e:	440a      	add	r2, r1
 800a770:	4413      	add	r3, r2
 800a772:	781a      	ldrb	r2, [r3, #0]
 800a774:	4603      	mov	r3, r0
 800a776:	3b01      	subs	r3, #1
 800a778:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800a77c:	b2d0      	uxtb	r0, r2
 800a77e:	4907      	ldr	r1, [pc, #28]	; (800a79c <write_map+0x24c>)
 800a780:	0122      	lsls	r2, r4, #4
 800a782:	440a      	add	r2, r1
 800a784:	4413      	add	r3, r2
 800a786:	4602      	mov	r2, r0
 800a788:	701a      	strb	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bc90      	pop	{r4, r7}
 800a792:	4770      	bx	lr
 800a794:	20000344 	.word	0x20000344
 800a798:	20000b8c 	.word	0x20000b8c
 800a79c:	2000022c 	.word	0x2000022c

0800a7a0 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat){
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	71fb      	strb	r3, [r7, #7]

	//====a方向を変更====
	mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800a7aa:	4b1c      	ldr	r3, [pc, #112]	; (800a81c <turn_dir+0x7c>)
 800a7ac:	789b      	ldrb	r3, [r3, #2]
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	4b17      	ldr	r3, [pc, #92]	; (800a81c <turn_dir+0x7c>)
 800a7be:	709a      	strb	r2, [r3, #2]
	if(t_pat == 0x01) target_degree_z -= 90.5;				//目標角度+右90度
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d109      	bne.n	800a7da <turn_dir+0x3a>
 800a7c6:	4b16      	ldr	r3, [pc, #88]	; (800a820 <turn_dir+0x80>)
 800a7c8:	edd3 7a00 	vldr	s15, [r3]
 800a7cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a824 <turn_dir+0x84>
 800a7d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7d4:	4b12      	ldr	r3, [pc, #72]	; (800a820 <turn_dir+0x80>)
 800a7d6:	edc3 7a00 	vstr	s15, [r3]
	if(t_pat == 0xff) target_degree_z += 90.5;				//目標角度+左90度
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	2bff      	cmp	r3, #255	; 0xff
 800a7de:	d109      	bne.n	800a7f4 <turn_dir+0x54>
 800a7e0:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <turn_dir+0x80>)
 800a7e2:	edd3 7a00 	vldr	s15, [r3]
 800a7e6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a824 <turn_dir+0x84>
 800a7ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <turn_dir+0x80>)
 800a7f0:	edc3 7a00 	vstr	s15, [r3]
	if(t_pat == 0x02) target_degree_z -= 181;				//目標角度+右180度
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d109      	bne.n	800a80e <turn_dir+0x6e>
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <turn_dir+0x80>)
 800a7fc:	edd3 7a00 	vldr	s15, [r3]
 800a800:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a828 <turn_dir+0x88>
 800a804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <turn_dir+0x80>)
 800a80a:	edc3 7a00 	vstr	s15, [r3]
}
 800a80e:	bf00      	nop
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	20000b8c 	.word	0x20000b8c
 800a820:	20000b78 	.word	0x20000b78
 800a824:	42b50000 	.word	0x42b50000
 800a828:	43350000 	.word	0x43350000

0800a82c <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800a82c:	b490      	push	{r4, r7}
 800a82e:	b08c      	sub	sp, #48	; 0x30
 800a830:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a832:	2300      	movs	r3, #0
 800a834:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a838:	e01c      	b.n	800a874 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a83a:	2300      	movs	r3, #0
 800a83c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a840:	e00f      	b.n	800a862 <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800a842:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a84a:	499b      	ldr	r1, [pc, #620]	; (800aab8 <make_smap+0x28c>)
 800a84c:	0112      	lsls	r2, r2, #4
 800a84e:	4413      	add	r3, r2
 800a850:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a854:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a85c:	3301      	adds	r3, #1
 800a85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a866:	2b0f      	cmp	r3, #15
 800a868:	d9eb      	bls.n	800a842 <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a86a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a86e:	3301      	adds	r3, #1
 800a870:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a878:	2b0f      	cmp	r3, #15
 800a87a:	d9de      	bls.n	800a83a <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800a87c:	4b8f      	ldr	r3, [pc, #572]	; (800aabc <make_smap+0x290>)
 800a87e:	2200      	movs	r2, #0
 800a880:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800a882:	4b8f      	ldr	r3, [pc, #572]	; (800aac0 <make_smap+0x294>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	4b8e      	ldr	r3, [pc, #568]	; (800aac4 <make_smap+0x298>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	4619      	mov	r1, r3
 800a88e:	4a8a      	ldr	r2, [pc, #552]	; (800aab8 <make_smap+0x28c>)
 800a890:	0103      	lsls	r3, r0, #4
 800a892:	440b      	add	r3, r1
 800a894:	2100      	movs	r1, #0
 800a896:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800a89a:	2303      	movs	r3, #3
 800a89c:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 800a89e:	2305      	movs	r3, #5
 800a8a0:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a8a8:	e2cb      	b.n	800ae42 <make_smap+0x616>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a8b0:	e2bd      	b.n	800ae2e <make_smap+0x602>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800a8b2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8ba:	497f      	ldr	r1, [pc, #508]	; (800aab8 <make_smap+0x28c>)
 800a8bc:	0112      	lsls	r2, r2, #4
 800a8be:	4413      	add	r3, r2
 800a8c0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800a8c4:	4b7d      	ldr	r3, [pc, #500]	; (800aabc <make_smap+0x290>)
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	f040 82ab 	bne.w	800ae24 <make_smap+0x5f8>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800a8ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8d6:	497c      	ldr	r1, [pc, #496]	; (800aac8 <make_smap+0x29c>)
 800a8d8:	0112      	lsls	r2, r2, #4
 800a8da:	440a      	add	r2, r1
 800a8dc:	4413      	add	r3, r2
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800a8e4:	4b79      	ldr	r3, [pc, #484]	; (800aacc <make_smap+0x2a0>)
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800a8f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a8f6:	091b      	lsrs	r3, r3, #4
 800a8f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800a8fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b00      	cmp	r3, #0
 800a906:	f040 809c 	bne.w	800aa42 <make_smap+0x216>
 800a90a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a90e:	2b0f      	cmp	r3, #15
 800a910:	f000 8097 	beq.w	800aa42 <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800a914:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a91e:	4966      	ldr	r1, [pc, #408]	; (800aab8 <make_smap+0x28c>)
 800a920:	0112      	lsls	r2, r2, #4
 800a922:	4413      	add	r3, r2
 800a924:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a92c:	4293      	cmp	r3, r2
 800a92e:	f040 8088 	bne.w	800aa42 <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800a932:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a93a:	495f      	ldr	r1, [pc, #380]	; (800aab8 <make_smap+0x28c>)
 800a93c:	0112      	lsls	r2, r2, #4
 800a93e:	4413      	add	r3, r2
 800a940:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	b299      	uxth	r1, r3
 800a948:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a952:	4401      	add	r1, r0
 800a954:	b288      	uxth	r0, r1
 800a956:	4958      	ldr	r1, [pc, #352]	; (800aab8 <make_smap+0x28c>)
 800a958:	0112      	lsls	r2, r2, #4
 800a95a:	4413      	add	r3, r2
 800a95c:	4602      	mov	r2, r0
 800a95e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800a962:	4b5a      	ldr	r3, [pc, #360]	; (800aacc <make_smap+0x2a0>)
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d068      	beq.n	800aa42 <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800a970:	2301      	movs	r3, #1
 800a972:	62bb      	str	r3, [r7, #40]	; 0x28
 800a974:	e05e      	b.n	800aa34 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800a976:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	441a      	add	r2, r3
 800a97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a982:	4951      	ldr	r1, [pc, #324]	; (800aac8 <make_smap+0x29c>)
 800a984:	0112      	lsls	r2, r2, #4
 800a986:	440a      	add	r2, r1
 800a988:	4413      	add	r3, r2
 800a98a:	7819      	ldrb	r1, [r3, #0]
 800a98c:	1d3a      	adds	r2, r7, #4
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	4413      	add	r3, r2
 800a992:	460a      	mov	r2, r1
 800a994:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800a996:	4b4d      	ldr	r3, [pc, #308]	; (800aacc <make_smap+0x2a0>)
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00a      	beq.n	800a9ba <make_smap+0x18e>
 800a9a4:	1d3a      	adds	r2, r7, #4
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	4413      	add	r3, r2
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	091b      	lsrs	r3, r3, #4
 800a9ae:	b2d9      	uxtb	r1, r3
 800a9b0:	1d3a      	adds	r2, r7, #4
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	4413      	add	r3, r2
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800a9ba:	1d3a      	adds	r2, r7, #4
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d13b      	bne.n	800aa42 <make_smap+0x216>
 800a9ca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d0:	4413      	add	r3, r2
 800a9d2:	2b0f      	cmp	r3, #15
 800a9d4:	d035      	beq.n	800aa42 <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800a9d6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	4413      	add	r3, r2
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9e4:	4934      	ldr	r1, [pc, #208]	; (800aab8 <make_smap+0x28c>)
 800a9e6:	0112      	lsls	r2, r2, #4
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a9ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d11b      	bne.n	800aa2e <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800a9f6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	441a      	add	r2, r3
 800a9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa02:	492d      	ldr	r1, [pc, #180]	; (800aab8 <make_smap+0x28c>)
 800aa04:	0112      	lsls	r2, r2, #4
 800aa06:	4413      	add	r3, r2
 800aa08:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	b299      	uxth	r1, r3
 800aa10:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	4413      	add	r3, r2
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa1e:	4401      	add	r1, r0
 800aa20:	b288      	uxth	r0, r1
 800aa22:	4925      	ldr	r1, [pc, #148]	; (800aab8 <make_smap+0x28c>)
 800aa24:	0112      	lsls	r2, r2, #4
 800aa26:	4413      	add	r3, r2
 800aa28:	4602      	mov	r2, r0
 800aa2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	3301      	adds	r3, #1
 800aa32:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa38:	f1c3 0310 	rsb	r3, r3, #16
 800aa3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	db99      	blt.n	800a976 <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800aa42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800aa46:	f003 0304 	and.w	r3, r3, #4
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f040 80a6 	bne.w	800ab9c <make_smap+0x370>
 800aa50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa54:	2b0f      	cmp	r3, #15
 800aa56:	f000 80a1 	beq.w	800ab9c <make_smap+0x370>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800aa5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa62:	3301      	adds	r3, #1
 800aa64:	4914      	ldr	r1, [pc, #80]	; (800aab8 <make_smap+0x28c>)
 800aa66:	0112      	lsls	r2, r2, #4
 800aa68:	4413      	add	r3, r2
 800aa6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aa6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aa72:	4293      	cmp	r3, r2
 800aa74:	f040 8092 	bne.w	800ab9c <make_smap+0x370>
							smap[y][x+1] = smap[y][x] + 1;	//a次の歩数を書き込む
 800aa78:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa80:	490d      	ldr	r1, [pc, #52]	; (800aab8 <make_smap+0x28c>)
 800aa82:	0112      	lsls	r2, r2, #4
 800aa84:	4413      	add	r3, r2
 800aa86:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800aa8a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa92:	3301      	adds	r3, #1
 800aa94:	3101      	adds	r1, #1
 800aa96:	b288      	uxth	r0, r1
 800aa98:	4907      	ldr	r1, [pc, #28]	; (800aab8 <make_smap+0x28c>)
 800aa9a:	0112      	lsls	r2, r2, #4
 800aa9c:	4413      	add	r3, r2
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800aaa4:	4b09      	ldr	r3, [pc, #36]	; (800aacc <make_smap+0x2a0>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d074      	beq.n	800ab9c <make_smap+0x370>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800aab2:	2301      	movs	r3, #1
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
 800aab6:	e06a      	b.n	800ab8e <make_smap+0x362>
 800aab8:	20000ce0 	.word	0x20000ce0
 800aabc:	200003ca 	.word	0x200003ca
 800aac0:	20000ac8 	.word	0x20000ac8
 800aac4:	20000b2d 	.word	0x20000b2d
 800aac8:	2000022c 	.word	0x2000022c
 800aacc:	20000ee4 	.word	0x20000ee4
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800aad0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aad4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	440b      	add	r3, r1
 800aadc:	499c      	ldr	r1, [pc, #624]	; (800ad50 <make_smap+0x524>)
 800aade:	0112      	lsls	r2, r2, #4
 800aae0:	440a      	add	r2, r1
 800aae2:	4413      	add	r3, r2
 800aae4:	7819      	ldrb	r1, [r3, #0]
 800aae6:	1d3a      	adds	r2, r7, #4
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	4413      	add	r3, r2
 800aaec:	460a      	mov	r2, r1
 800aaee:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800aaf0:	4b98      	ldr	r3, [pc, #608]	; (800ad54 <make_smap+0x528>)
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <make_smap+0x2e8>
 800aafe:	1d3a      	adds	r2, r7, #4
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	4413      	add	r3, r2
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	091b      	lsrs	r3, r3, #4
 800ab08:	b2d9      	uxtb	r1, r3
 800ab0a:	1d3a      	adds	r2, r7, #4
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	4413      	add	r3, r2
 800ab10:	460a      	mov	r2, r1
 800ab12:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800ab14:	1d3a      	adds	r2, r7, #4
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	4413      	add	r3, r2
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d13b      	bne.n	800ab9c <make_smap+0x370>
 800ab24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	4413      	add	r3, r2
 800ab2c:	2b0f      	cmp	r3, #15
 800ab2e:	d035      	beq.n	800ab9c <make_smap+0x370>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800ab30:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab34:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	440b      	add	r3, r1
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	4986      	ldr	r1, [pc, #536]	; (800ad58 <make_smap+0x52c>)
 800ab40:	0112      	lsls	r2, r2, #4
 800ab42:	4413      	add	r3, r2
 800ab44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab48:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d11b      	bne.n	800ab88 <make_smap+0x35c>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ab50:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab54:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	440b      	add	r3, r1
 800ab5c:	497e      	ldr	r1, [pc, #504]	; (800ad58 <make_smap+0x52c>)
 800ab5e:	0112      	lsls	r2, r2, #4
 800ab60:	4413      	add	r3, r2
 800ab62:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	b299      	uxth	r1, r3
 800ab6a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab6e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	4423      	add	r3, r4
 800ab76:	3301      	adds	r3, #1
 800ab78:	4401      	add	r1, r0
 800ab7a:	b288      	uxth	r0, r1
 800ab7c:	4976      	ldr	r1, [pc, #472]	; (800ad58 <make_smap+0x52c>)
 800ab7e:	0112      	lsls	r2, r2, #4
 800ab80:	4413      	add	r3, r2
 800ab82:	4602      	mov	r2, r0
 800ab84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab92:	f1c3 0310 	rsb	r3, r3, #16
 800ab96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	db99      	blt.n	800aad0 <make_smap+0x2a4>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800ab9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800aba0:	f003 0302 	and.w	r3, r3, #2
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f040 8098 	bne.w	800acda <make_smap+0x4ae>
 800abaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 8093 	beq.w	800acda <make_smap+0x4ae>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800abb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abb8:	1e5a      	subs	r2, r3, #1
 800abba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abbe:	4966      	ldr	r1, [pc, #408]	; (800ad58 <make_smap+0x52c>)
 800abc0:	0112      	lsls	r2, r2, #4
 800abc2:	4413      	add	r3, r2
 800abc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800abc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800abcc:	4293      	cmp	r3, r2
 800abce:	f040 8084 	bne.w	800acda <make_smap+0x4ae>
							smap[y-1][x] = smap[y][x] + 1;	//a次の歩数を書き込む
 800abd2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800abd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abda:	495f      	ldr	r1, [pc, #380]	; (800ad58 <make_smap+0x52c>)
 800abdc:	0112      	lsls	r2, r2, #4
 800abde:	4413      	add	r3, r2
 800abe0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800abe4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abe8:	1e5a      	subs	r2, r3, #1
 800abea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abee:	3101      	adds	r1, #1
 800abf0:	b288      	uxth	r0, r1
 800abf2:	4959      	ldr	r1, [pc, #356]	; (800ad58 <make_smap+0x52c>)
 800abf4:	0112      	lsls	r2, r2, #4
 800abf6:	4413      	add	r3, r2
 800abf8:	4602      	mov	r2, r0
 800abfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800abfe:	4b55      	ldr	r3, [pc, #340]	; (800ad54 <make_smap+0x528>)
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d066      	beq.n	800acda <make_smap+0x4ae>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	623b      	str	r3, [r7, #32]
 800ac10:	e05e      	b.n	800acd0 <make_smap+0x4a4>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800ac12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	1ad2      	subs	r2, r2, r3
 800ac1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac1e:	494c      	ldr	r1, [pc, #304]	; (800ad50 <make_smap+0x524>)
 800ac20:	0112      	lsls	r2, r2, #4
 800ac22:	440a      	add	r2, r1
 800ac24:	4413      	add	r3, r2
 800ac26:	7819      	ldrb	r1, [r3, #0]
 800ac28:	1d3a      	adds	r2, r7, #4
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	460a      	mov	r2, r1
 800ac30:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800ac32:	4b48      	ldr	r3, [pc, #288]	; (800ad54 <make_smap+0x528>)
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00a      	beq.n	800ac56 <make_smap+0x42a>
 800ac40:	1d3a      	adds	r2, r7, #4
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	4413      	add	r3, r2
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	091b      	lsrs	r3, r3, #4
 800ac4a:	b2d9      	uxtb	r1, r3
 800ac4c:	1d3a      	adds	r2, r7, #4
 800ac4e:	6a3b      	ldr	r3, [r7, #32]
 800ac50:	4413      	add	r3, r2
 800ac52:	460a      	mov	r2, r1
 800ac54:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800ac56:	1d3a      	adds	r2, r7, #4
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d139      	bne.n	800acda <make_smap+0x4ae>
 800ac66:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	2b0f      	cmp	r3, #15
 800ac70:	d033      	beq.n	800acda <make_smap+0x4ae>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800ac72:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	1e5a      	subs	r2, r3, #1
 800ac7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac80:	4935      	ldr	r1, [pc, #212]	; (800ad58 <make_smap+0x52c>)
 800ac82:	0112      	lsls	r2, r2, #4
 800ac84:	4413      	add	r3, r2
 800ac86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ac8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d11b      	bne.n	800acca <make_smap+0x49e>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ac92:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	1ad2      	subs	r2, r2, r3
 800ac9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac9e:	492e      	ldr	r1, [pc, #184]	; (800ad58 <make_smap+0x52c>)
 800aca0:	0112      	lsls	r2, r2, #4
 800aca2:	4413      	add	r3, r2
 800aca4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	b299      	uxth	r1, r3
 800acac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acba:	4401      	add	r1, r0
 800acbc:	b288      	uxth	r0, r1
 800acbe:	4926      	ldr	r1, [pc, #152]	; (800ad58 <make_smap+0x52c>)
 800acc0:	0112      	lsls	r2, r2, #4
 800acc2:	4413      	add	r3, r2
 800acc4:	4602      	mov	r2, r0
 800acc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	3301      	adds	r3, #1
 800acce:	623b      	str	r3, [r7, #32]
 800acd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acd4:	6a3a      	ldr	r2, [r7, #32]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	db9b      	blt.n	800ac12 <make_smap+0x3e6>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800acda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f040 809e 	bne.w	800ae24 <make_smap+0x5f8>
 800ace8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 8099 	beq.w	800ae24 <make_smap+0x5f8>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800acf2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800acf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acfa:	3b01      	subs	r3, #1
 800acfc:	4916      	ldr	r1, [pc, #88]	; (800ad58 <make_smap+0x52c>)
 800acfe:	0112      	lsls	r2, r2, #4
 800ad00:	4413      	add	r3, r2
 800ad02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ad06:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	f040 808a 	bne.w	800ae24 <make_smap+0x5f8>
							smap[y][x-1] = smap[y][x] + 1;	//a次の歩数を書き込む
 800ad10:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ad14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad18:	490f      	ldr	r1, [pc, #60]	; (800ad58 <make_smap+0x52c>)
 800ad1a:	0112      	lsls	r2, r2, #4
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800ad22:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ad26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	3101      	adds	r1, #1
 800ad2e:	b288      	uxth	r0, r1
 800ad30:	4909      	ldr	r1, [pc, #36]	; (800ad58 <make_smap+0x52c>)
 800ad32:	0112      	lsls	r2, r2, #4
 800ad34:	4413      	add	r3, r2
 800ad36:	4602      	mov	r2, r0
 800ad38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <make_smap+0x528>)
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d06c      	beq.n	800ae24 <make_smap+0x5f8>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	e064      	b.n	800ae1a <make_smap+0x5ee>
 800ad50:	2000022c 	.word	0x2000022c
 800ad54:	20000ee4 	.word	0x20000ee4
 800ad58:	20000ce0 	.word	0x20000ce0
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800ad5c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ad60:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	1acb      	subs	r3, r1, r3
 800ad68:	4947      	ldr	r1, [pc, #284]	; (800ae88 <make_smap+0x65c>)
 800ad6a:	0112      	lsls	r2, r2, #4
 800ad6c:	440a      	add	r2, r1
 800ad6e:	4413      	add	r3, r2
 800ad70:	7819      	ldrb	r1, [r3, #0]
 800ad72:	1d3a      	adds	r2, r7, #4
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	4413      	add	r3, r2
 800ad78:	460a      	mov	r2, r1
 800ad7a:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800ad7c:	4b43      	ldr	r3, [pc, #268]	; (800ae8c <make_smap+0x660>)
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <make_smap+0x574>
 800ad8a:	1d3a      	adds	r2, r7, #4
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	4413      	add	r3, r2
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	091b      	lsrs	r3, r3, #4
 800ad94:	b2d9      	uxtb	r1, r3
 800ad96:	1d3a      	adds	r2, r7, #4
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	460a      	mov	r2, r1
 800ad9e:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800ada0:	1d3a      	adds	r2, r7, #4
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4413      	add	r3, r2
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d139      	bne.n	800ae24 <make_smap+0x5f8>
 800adb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	2b0f      	cmp	r3, #15
 800adba:	d033      	beq.n	800ae24 <make_smap+0x5f8>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800adbc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800adc0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	1acb      	subs	r3, r1, r3
 800adc8:	3b01      	subs	r3, #1
 800adca:	4931      	ldr	r1, [pc, #196]	; (800ae90 <make_smap+0x664>)
 800adcc:	0112      	lsls	r2, r2, #4
 800adce:	4413      	add	r3, r2
 800add0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800add4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800add8:	4293      	cmp	r3, r2
 800adda:	d11b      	bne.n	800ae14 <make_smap+0x5e8>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800addc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ade0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	1acb      	subs	r3, r1, r3
 800ade8:	4929      	ldr	r1, [pc, #164]	; (800ae90 <make_smap+0x664>)
 800adea:	0112      	lsls	r2, r2, #4
 800adec:	4413      	add	r3, r2
 800adee:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	b299      	uxth	r1, r3
 800adf6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800adfa:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	1ae3      	subs	r3, r4, r3
 800ae02:	3b01      	subs	r3, #1
 800ae04:	4401      	add	r1, r0
 800ae06:	b288      	uxth	r0, r1
 800ae08:	4921      	ldr	r1, [pc, #132]	; (800ae90 <make_smap+0x664>)
 800ae0a:	0112      	lsls	r2, r2, #4
 800ae0c:	4413      	add	r3, r2
 800ae0e:	4602      	mov	r2, r0
 800ae10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	3301      	adds	r3, #1
 800ae18:	61fb      	str	r3, [r7, #28]
 800ae1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	db9b      	blt.n	800ad5c <make_smap+0x530>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800ae24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae28:	3301      	adds	r3, #1
 800ae2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ae2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae32:	2b0f      	cmp	r3, #15
 800ae34:	f67f ad3d 	bls.w	800a8b2 <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800ae38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ae42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ae46:	2b0f      	cmp	r3, #15
 800ae48:	f67f ad2f 	bls.w	800a8aa <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <make_smap+0x668>)
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	3301      	adds	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <make_smap+0x668>)
 800ae56:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800ae58:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <make_smap+0x66c>)
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	4618      	mov	r0, r3
 800ae60:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <make_smap+0x66c>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	4619      	mov	r1, r3
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <make_smap+0x664>)
 800ae6a:	0103      	lsls	r3, r0, #4
 800ae6c:	440b      	add	r3, r1
 800ae6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae72:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae76:	4293      	cmp	r3, r2
 800ae78:	f43f ad13 	beq.w	800a8a2 <make_smap+0x76>
}
 800ae7c:	bf00      	nop
 800ae7e:	3730      	adds	r7, #48	; 0x30
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bc90      	pop	{r4, r7}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	2000022c 	.word	0x2000022c
 800ae8c:	20000ee4 	.word	0x20000ee4
 800ae90:	20000ce0 	.word	0x20000ce0
 800ae94:	200003ca 	.word	0x200003ca
 800ae98:	20000b8c 	.word	0x20000b8c

0800ae9c <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800aea2:	4b90      	ldr	r3, [pc, #576]	; (800b0e4 <make_route+0x248>)
 800aea4:	789b      	ldrb	r3, [r3, #2]
 800aea6:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800aea8:	2300      	movs	r3, #0
 800aeaa:	80bb      	strh	r3, [r7, #4]
 800aeac:	e006      	b.n	800aebc <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800aeae:	88bb      	ldrh	r3, [r7, #4]
 800aeb0:	4a8d      	ldr	r2, [pc, #564]	; (800b0e8 <make_route+0x24c>)
 800aeb2:	21ff      	movs	r1, #255	; 0xff
 800aeb4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800aeb6:	88bb      	ldrh	r3, [r7, #4]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	80bb      	strh	r3, [r7, #4]
 800aebc:	88bb      	ldrh	r3, [r7, #4]
 800aebe:	2bff      	cmp	r3, #255	; 0xff
 800aec0:	d9f5      	bls.n	800aeae <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800aec2:	4b88      	ldr	r3, [pc, #544]	; (800b0e4 <make_route+0x248>)
 800aec4:	785b      	ldrb	r3, [r3, #1]
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	4618      	mov	r0, r3
 800aeca:	4b86      	ldr	r3, [pc, #536]	; (800b0e4 <make_route+0x248>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	4619      	mov	r1, r3
 800aed2:	4a86      	ldr	r2, [pc, #536]	; (800b0ec <make_route+0x250>)
 800aed4:	0103      	lsls	r3, r0, #4
 800aed6:	440b      	add	r3, r1
 800aed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aedc:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800aede:	4b81      	ldr	r3, [pc, #516]	; (800b0e4 <make_route+0x248>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800aee4:	4b7f      	ldr	r3, [pc, #508]	; (800b0e4 <make_route+0x248>)
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	i = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	80bb      	strh	r3, [r7, #4]
	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800aeee:	79ba      	ldrb	r2, [r7, #6]
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	497f      	ldr	r1, [pc, #508]	; (800b0f0 <make_route+0x254>)
 800aef4:	0112      	lsls	r2, r2, #4
 800aef6:	440a      	add	r2, r1
 800aef8:	4413      	add	r3, r2
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800aefe:	4b7d      	ldr	r3, [pc, #500]	; (800b0f4 <make_route+0x258>)
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <make_route+0x76>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800af0c:	787b      	ldrb	r3, [r7, #1]
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800af12:	787b      	ldrb	r3, [r7, #1]
 800af14:	f003 0308 	and.w	r3, r3, #8
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d122      	bne.n	800af62 <make_route+0xc6>
 800af1c:	79bb      	ldrb	r3, [r7, #6]
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	4972      	ldr	r1, [pc, #456]	; (800b0ec <make_route+0x250>)
 800af24:	0112      	lsls	r2, r2, #4
 800af26:	4413      	add	r3, r2
 800af28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af2c:	887a      	ldrh	r2, [r7, #2]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d917      	bls.n	800af62 <make_route+0xc6>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800af32:	4b6c      	ldr	r3, [pc, #432]	; (800b0e4 <make_route+0x248>)
 800af34:	789b      	ldrb	r3, [r3, #2]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	425b      	negs	r3, r3
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	88bb      	ldrh	r3, [r7, #4]
 800af3e:	f002 0203 	and.w	r2, r2, #3
 800af42:	b2d1      	uxtb	r1, r2
 800af44:	4a68      	ldr	r2, [pc, #416]	; (800b0e8 <make_route+0x24c>)
 800af46:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800af48:	79bb      	ldrb	r3, [r7, #6]
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	4967      	ldr	r1, [pc, #412]	; (800b0ec <make_route+0x250>)
 800af50:	0112      	lsls	r2, r2, #4
 800af52:	4413      	add	r3, r2
 800af54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af58:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800af5a:	79bb      	ldrb	r3, [r7, #6]
 800af5c:	3301      	adds	r3, #1
 800af5e:	71bb      	strb	r3, [r7, #6]
 800af60:	e079      	b.n	800b056 <make_route+0x1ba>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800af62:	787b      	ldrb	r3, [r7, #1]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d123      	bne.n	800afb4 <make_route+0x118>
 800af6c:	79ba      	ldrb	r2, [r7, #6]
 800af6e:	79fb      	ldrb	r3, [r7, #7]
 800af70:	3301      	adds	r3, #1
 800af72:	495e      	ldr	r1, [pc, #376]	; (800b0ec <make_route+0x250>)
 800af74:	0112      	lsls	r2, r2, #4
 800af76:	4413      	add	r3, r2
 800af78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800af7c:	887a      	ldrh	r2, [r7, #2]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d918      	bls.n	800afb4 <make_route+0x118>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800af82:	4b58      	ldr	r3, [pc, #352]	; (800b0e4 <make_route+0x248>)
 800af84:	789b      	ldrb	r3, [r3, #2]
 800af86:	b2db      	uxtb	r3, r3
 800af88:	f1c3 0301 	rsb	r3, r3, #1
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	88bb      	ldrh	r3, [r7, #4]
 800af90:	f002 0203 	and.w	r2, r2, #3
 800af94:	b2d1      	uxtb	r1, r2
 800af96:	4a54      	ldr	r2, [pc, #336]	; (800b0e8 <make_route+0x24c>)
 800af98:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800af9a:	79ba      	ldrb	r2, [r7, #6]
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	3301      	adds	r3, #1
 800afa0:	4952      	ldr	r1, [pc, #328]	; (800b0ec <make_route+0x250>)
 800afa2:	0112      	lsls	r2, r2, #4
 800afa4:	4413      	add	r3, r2
 800afa6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800afaa:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	3301      	adds	r3, #1
 800afb0:	71fb      	strb	r3, [r7, #7]
 800afb2:	e050      	b.n	800b056 <make_route+0x1ba>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800afb4:	787b      	ldrb	r3, [r7, #1]
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d123      	bne.n	800b006 <make_route+0x16a>
 800afbe:	79bb      	ldrb	r3, [r7, #6]
 800afc0:	1e5a      	subs	r2, r3, #1
 800afc2:	79fb      	ldrb	r3, [r7, #7]
 800afc4:	4949      	ldr	r1, [pc, #292]	; (800b0ec <make_route+0x250>)
 800afc6:	0112      	lsls	r2, r2, #4
 800afc8:	4413      	add	r3, r2
 800afca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800afce:	887a      	ldrh	r2, [r7, #2]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d918      	bls.n	800b006 <make_route+0x16a>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800afd4:	4b43      	ldr	r3, [pc, #268]	; (800b0e4 <make_route+0x248>)
 800afd6:	789b      	ldrb	r3, [r3, #2]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	f1c3 0302 	rsb	r3, r3, #2
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	88bb      	ldrh	r3, [r7, #4]
 800afe2:	f002 0203 	and.w	r2, r2, #3
 800afe6:	b2d1      	uxtb	r1, r2
 800afe8:	4a3f      	ldr	r2, [pc, #252]	; (800b0e8 <make_route+0x24c>)
 800afea:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800afec:	79bb      	ldrb	r3, [r7, #6]
 800afee:	1e5a      	subs	r2, r3, #1
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	493e      	ldr	r1, [pc, #248]	; (800b0ec <make_route+0x250>)
 800aff4:	0112      	lsls	r2, r2, #4
 800aff6:	4413      	add	r3, r2
 800aff8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800affc:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800affe:	79bb      	ldrb	r3, [r7, #6]
 800b000:	3b01      	subs	r3, #1
 800b002:	71bb      	strb	r3, [r7, #6]
 800b004:	e027      	b.n	800b056 <make_route+0x1ba>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800b006:	787b      	ldrb	r3, [r7, #1]
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d122      	bne.n	800b056 <make_route+0x1ba>
 800b010:	79ba      	ldrb	r2, [r7, #6]
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	3b01      	subs	r3, #1
 800b016:	4935      	ldr	r1, [pc, #212]	; (800b0ec <make_route+0x250>)
 800b018:	0112      	lsls	r2, r2, #4
 800b01a:	4413      	add	r3, r2
 800b01c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b020:	887a      	ldrh	r2, [r7, #2]
 800b022:	429a      	cmp	r2, r3
 800b024:	d917      	bls.n	800b056 <make_route+0x1ba>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800b026:	4b2f      	ldr	r3, [pc, #188]	; (800b0e4 <make_route+0x248>)
 800b028:	789b      	ldrb	r3, [r3, #2]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	f1c3 0303 	rsb	r3, r3, #3
 800b030:	b2da      	uxtb	r2, r3
 800b032:	88bb      	ldrh	r3, [r7, #4]
 800b034:	f002 0203 	and.w	r2, r2, #3
 800b038:	b2d1      	uxtb	r1, r2
 800b03a:	4a2b      	ldr	r2, [pc, #172]	; (800b0e8 <make_route+0x24c>)
 800b03c:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800b03e:	79ba      	ldrb	r2, [r7, #6]
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	3b01      	subs	r3, #1
 800b044:	4929      	ldr	r1, [pc, #164]	; (800b0ec <make_route+0x250>)
 800b046:	0112      	lsls	r2, r2, #4
 800b048:	4413      	add	r3, r2
 800b04a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b04e:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	3b01      	subs	r3, #1
 800b054:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800b056:	88bb      	ldrh	r3, [r7, #4]
 800b058:	4a23      	ldr	r2, [pc, #140]	; (800b0e8 <make_route+0x24c>)
 800b05a:	5cd3      	ldrb	r3, [r2, r3]
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d828      	bhi.n	800b0b2 <make_route+0x216>
 800b060:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <make_route+0x1cc>)
 800b062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b066:	bf00      	nop
 800b068:	0800b079 	.word	0x0800b079
 800b06c:	0800b083 	.word	0x0800b083
 800b070:	0800b093 	.word	0x0800b093
 800b074:	0800b0a3 	.word	0x0800b0a3
		case 0x00:												//a前進する場合
			route[i] = 0x88;									//a格納データ形式を変更
 800b078:	88bb      	ldrh	r3, [r7, #4]
 800b07a:	4a1b      	ldr	r2, [pc, #108]	; (800b0e8 <make_route+0x24c>)
 800b07c:	2188      	movs	r1, #136	; 0x88
 800b07e:	54d1      	strb	r1, [r2, r3]
			break;
 800b080:	e01c      	b.n	800b0bc <make_route+0x220>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90);								//a内部情報の方向を90度右回転
 800b082:	2001      	movs	r0, #1
 800b084:	f7ff fb8c 	bl	800a7a0 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800b088:	88bb      	ldrh	r3, [r7, #4]
 800b08a:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <make_route+0x24c>)
 800b08c:	2144      	movs	r1, #68	; 0x44
 800b08e:	54d1      	strb	r1, [r2, r3]
			break;
 800b090:	e014      	b.n	800b0bc <make_route+0x220>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180);								//a内部情報の方向を180度回転
 800b092:	2002      	movs	r0, #2
 800b094:	f7ff fb84 	bl	800a7a0 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800b098:	88bb      	ldrh	r3, [r7, #4]
 800b09a:	4a13      	ldr	r2, [pc, #76]	; (800b0e8 <make_route+0x24c>)
 800b09c:	2122      	movs	r1, #34	; 0x22
 800b09e:	54d1      	strb	r1, [r2, r3]
			break;
 800b0a0:	e00c      	b.n	800b0bc <make_route+0x220>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90);								//a内部情報の方向を90度右回転
 800b0a2:	20ff      	movs	r0, #255	; 0xff
 800b0a4:	f7ff fb7c 	bl	800a7a0 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800b0a8:	88bb      	ldrh	r3, [r7, #4]
 800b0aa:	4a0f      	ldr	r2, [pc, #60]	; (800b0e8 <make_route+0x24c>)
 800b0ac:	2111      	movs	r1, #17
 800b0ae:	54d1      	strb	r1, [r2, r3]
			break;
 800b0b0:	e004      	b.n	800b0bc <make_route+0x220>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800b0b2:	88bb      	ldrh	r3, [r7, #4]
 800b0b4:	4a0c      	ldr	r2, [pc, #48]	; (800b0e8 <make_route+0x24c>)
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	54d1      	strb	r1, [r2, r3]
			break;
 800b0ba:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800b0bc:	88bb      	ldrh	r3, [r7, #4]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800b0c2:	79ba      	ldrb	r2, [r7, #6]
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	4909      	ldr	r1, [pc, #36]	; (800b0ec <make_route+0x250>)
 800b0c8:	0112      	lsls	r2, r2, #4
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f47f af0c 	bne.w	800aeee <make_route+0x52>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800b0d6:	4a03      	ldr	r2, [pc, #12]	; (800b0e4 <make_route+0x248>)
 800b0d8:	783b      	ldrb	r3, [r7, #0]
 800b0da:	7093      	strb	r3, [r2, #2]
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20000b8c 	.word	0x20000b8c
 800b0e8:	20000bd4 	.word	0x20000bd4
 800b0ec:	20000ce0 	.word	0x20000ce0
 800b0f0:	2000022c 	.word	0x2000022c
 800b0f4:	20000ee4 	.word	0x20000ee4

0800b0f8 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800b0fe:	2300      	movs	r3, #0
 800b100:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b102:	2300      	movs	r3, #0
 800b104:	73bb      	strb	r3, [r7, #14]
 800b106:	e014      	b.n	800b132 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b108:	2300      	movs	r3, #0
 800b10a:	73fb      	strb	r3, [r7, #15]
 800b10c:	e00b      	b.n	800b126 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800b10e:	7bba      	ldrb	r2, [r7, #14]
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	499f      	ldr	r1, [pc, #636]	; (800b390 <find_pregoal+0x298>)
 800b114:	0112      	lsls	r2, r2, #4
 800b116:	4413      	add	r3, r2
 800b118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b11c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	3301      	adds	r3, #1
 800b124:	73fb      	strb	r3, [r7, #15]
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	2b0f      	cmp	r3, #15
 800b12a:	d9f0      	bls.n	800b10e <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	3301      	adds	r3, #1
 800b130:	73bb      	strb	r3, [r7, #14]
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	2b0f      	cmp	r3, #15
 800b136:	d9e7      	bls.n	800b108 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800b138:	4b96      	ldr	r3, [pc, #600]	; (800b394 <find_pregoal+0x29c>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800b13e:	4b96      	ldr	r3, [pc, #600]	; (800b398 <find_pregoal+0x2a0>)
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	4618      	mov	r0, r3
 800b146:	4b94      	ldr	r3, [pc, #592]	; (800b398 <find_pregoal+0x2a0>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	4619      	mov	r1, r3
 800b14e:	4a90      	ldr	r2, [pc, #576]	; (800b390 <find_pregoal+0x298>)
 800b150:	0103      	lsls	r3, r0, #4
 800b152:	440b      	add	r3, r1
 800b154:	2100      	movs	r1, #0
 800b156:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800b15a:	4b90      	ldr	r3, [pc, #576]	; (800b39c <find_pregoal+0x2a4>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800b160:	2303      	movs	r3, #3
 800b162:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800b164:	2301      	movs	r3, #1
 800b166:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b168:	2300      	movs	r3, #0
 800b16a:	73bb      	strb	r3, [r7, #14]
 800b16c:	e180      	b.n	800b470 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
 800b172:	e173      	b.n	800b45c <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800b174:	7bba      	ldrb	r2, [r7, #14]
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	4985      	ldr	r1, [pc, #532]	; (800b390 <find_pregoal+0x298>)
 800b17a:	0112      	lsls	r2, r2, #4
 800b17c:	4413      	add	r3, r2
 800b17e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b182:	4b86      	ldr	r3, [pc, #536]	; (800b39c <find_pregoal+0x2a4>)
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	f040 8165 	bne.w	800b456 <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800b18c:	7bba      	ldrb	r2, [r7, #14]
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	4983      	ldr	r1, [pc, #524]	; (800b3a0 <find_pregoal+0x2a8>)
 800b192:	0112      	lsls	r2, r2, #4
 800b194:	440a      	add	r2, r1
 800b196:	4413      	add	r3, r2
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	f003 0308 	and.w	r3, r3, #8
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d14d      	bne.n	800b242 <find_pregoal+0x14a>
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b0f      	cmp	r3, #15
 800b1aa:	d04a      	beq.n	800b242 <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	4977      	ldr	r1, [pc, #476]	; (800b390 <find_pregoal+0x298>)
 800b1b4:	0112      	lsls	r2, r2, #4
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b1bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d13e      	bne.n	800b242 <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b1c4:	7bba      	ldrb	r2, [r7, #14]
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
 800b1c8:	4971      	ldr	r1, [pc, #452]	; (800b390 <find_pregoal+0x298>)
 800b1ca:	0112      	lsls	r2, r2, #4
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	b299      	uxth	r1, r3
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	4401      	add	r1, r0
 800b1de:	b288      	uxth	r0, r1
 800b1e0:	496b      	ldr	r1, [pc, #428]	; (800b390 <find_pregoal+0x298>)
 800b1e2:	0112      	lsls	r2, r2, #4
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	496b      	ldr	r1, [pc, #428]	; (800b3a0 <find_pregoal+0x2a8>)
 800b1f4:	0112      	lsls	r2, r2, #4
 800b1f6:	440a      	add	r2, r1
 800b1f8:	4413      	add	r3, r2
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	011b      	lsls	r3, r3, #4
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	7bbb      	ldrb	r3, [r7, #14]
 800b202:	1c59      	adds	r1, r3, #1
 800b204:	7bfb      	ldrb	r3, [r7, #15]
 800b206:	4866      	ldr	r0, [pc, #408]	; (800b3a0 <find_pregoal+0x2a8>)
 800b208:	0109      	lsls	r1, r1, #4
 800b20a:	4401      	add	r1, r0
 800b20c:	440b      	add	r3, r1
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b214:	429a      	cmp	r2, r3
 800b216:	d014      	beq.n	800b242 <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b218:	2301      	movs	r3, #1
 800b21a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	495b      	ldr	r1, [pc, #364]	; (800b390 <find_pregoal+0x298>)
 800b224:	0112      	lsls	r2, r2, #4
 800b226:	4413      	add	r3, r2
 800b228:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b22c:	4b5d      	ldr	r3, [pc, #372]	; (800b3a4 <find_pregoal+0x2ac>)
 800b22e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800b230:	4a5d      	ldr	r2, [pc, #372]	; (800b3a8 <find_pregoal+0x2b0>)
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	3301      	adds	r3, #1
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	4b5b      	ldr	r3, [pc, #364]	; (800b3ac <find_pregoal+0x2b4>)
 800b23e:	701a      	strb	r2, [r3, #0]
								break;
 800b240:	e110      	b.n	800b464 <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	f003 0304 	and.w	r3, r3, #4
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d14d      	bne.n	800b2e8 <find_pregoal+0x1f0>
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	2b0f      	cmp	r3, #15
 800b250:	d04a      	beq.n	800b2e8 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800b252:	7bba      	ldrb	r2, [r7, #14]
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	3301      	adds	r3, #1
 800b258:	494d      	ldr	r1, [pc, #308]	; (800b390 <find_pregoal+0x298>)
 800b25a:	0112      	lsls	r2, r2, #4
 800b25c:	4413      	add	r3, r2
 800b25e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b262:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b266:	4293      	cmp	r3, r2
 800b268:	d13e      	bne.n	800b2e8 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b26a:	7bba      	ldrb	r2, [r7, #14]
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	4948      	ldr	r1, [pc, #288]	; (800b390 <find_pregoal+0x298>)
 800b270:	0112      	lsls	r2, r2, #4
 800b272:	4413      	add	r3, r2
 800b274:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	b299      	uxth	r1, r3
 800b27c:	7bba      	ldrb	r2, [r7, #14]
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	3301      	adds	r3, #1
 800b282:	4401      	add	r1, r0
 800b284:	b288      	uxth	r0, r1
 800b286:	4942      	ldr	r1, [pc, #264]	; (800b390 <find_pregoal+0x298>)
 800b288:	0112      	lsls	r2, r2, #4
 800b28a:	4413      	add	r3, r2
 800b28c:	4602      	mov	r2, r0
 800b28e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b292:	7bba      	ldrb	r2, [r7, #14]
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	3301      	adds	r3, #1
 800b298:	4941      	ldr	r1, [pc, #260]	; (800b3a0 <find_pregoal+0x2a8>)
 800b29a:	0112      	lsls	r2, r2, #4
 800b29c:	440a      	add	r2, r1
 800b29e:	4413      	add	r3, r2
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	7bb9      	ldrb	r1, [r7, #14]
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	483c      	ldr	r0, [pc, #240]	; (800b3a0 <find_pregoal+0x2a8>)
 800b2ae:	0109      	lsls	r1, r1, #4
 800b2b0:	4401      	add	r1, r0
 800b2b2:	440b      	add	r3, r1
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d014      	beq.n	800b2e8 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b2be:	2301      	movs	r3, #1
 800b2c0:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800b2c2:	7bba      	ldrb	r2, [r7, #14]
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	4931      	ldr	r1, [pc, #196]	; (800b390 <find_pregoal+0x298>)
 800b2ca:	0112      	lsls	r2, r2, #4
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b2d2:	4b34      	ldr	r3, [pc, #208]	; (800b3a4 <find_pregoal+0x2ac>)
 800b2d4:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b32      	ldr	r3, [pc, #200]	; (800b3a8 <find_pregoal+0x2b0>)
 800b2de:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800b2e0:	4a32      	ldr	r2, [pc, #200]	; (800b3ac <find_pregoal+0x2b4>)
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	7013      	strb	r3, [r2, #0]
								break;
 800b2e6:	e0bd      	b.n	800b464 <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800b2e8:	78fb      	ldrb	r3, [r7, #3]
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d15e      	bne.n	800b3b0 <find_pregoal+0x2b8>
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d05b      	beq.n	800b3b0 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	1e5a      	subs	r2, r3, #1
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	4924      	ldr	r1, [pc, #144]	; (800b390 <find_pregoal+0x298>)
 800b300:	0112      	lsls	r2, r2, #4
 800b302:	4413      	add	r3, r2
 800b304:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d14f      	bne.n	800b3b0 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b310:	7bba      	ldrb	r2, [r7, #14]
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	491e      	ldr	r1, [pc, #120]	; (800b390 <find_pregoal+0x298>)
 800b316:	0112      	lsls	r2, r2, #4
 800b318:	4413      	add	r3, r2
 800b31a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	b299      	uxth	r1, r3
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	1e5a      	subs	r2, r3, #1
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	4401      	add	r1, r0
 800b32a:	b288      	uxth	r0, r1
 800b32c:	4918      	ldr	r1, [pc, #96]	; (800b390 <find_pregoal+0x298>)
 800b32e:	0112      	lsls	r2, r2, #4
 800b330:	4413      	add	r3, r2
 800b332:	4602      	mov	r2, r0
 800b334:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	1e5a      	subs	r2, r3, #1
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	4918      	ldr	r1, [pc, #96]	; (800b3a0 <find_pregoal+0x2a8>)
 800b340:	0112      	lsls	r2, r2, #4
 800b342:	440a      	add	r2, r1
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	011b      	lsls	r3, r3, #4
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	1e59      	subs	r1, r3, #1
 800b350:	7bfb      	ldrb	r3, [r7, #15]
 800b352:	4813      	ldr	r0, [pc, #76]	; (800b3a0 <find_pregoal+0x2a8>)
 800b354:	0109      	lsls	r1, r1, #4
 800b356:	4401      	add	r1, r0
 800b358:	440b      	add	r3, r1
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b360:	429a      	cmp	r2, r3
 800b362:	d025      	beq.n	800b3b0 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b364:	2301      	movs	r3, #1
 800b366:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800b368:	7bbb      	ldrb	r3, [r7, #14]
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	4908      	ldr	r1, [pc, #32]	; (800b390 <find_pregoal+0x298>)
 800b370:	0112      	lsls	r2, r2, #4
 800b372:	4413      	add	r3, r2
 800b374:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <find_pregoal+0x2ac>)
 800b37a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800b37c:	4a0a      	ldr	r2, [pc, #40]	; (800b3a8 <find_pregoal+0x2b0>)
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	3b01      	subs	r3, #1
 800b386:	b2da      	uxtb	r2, r3
 800b388:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <find_pregoal+0x2b4>)
 800b38a:	701a      	strb	r2, [r3, #0]
								break;
 800b38c:	e06a      	b.n	800b464 <find_pregoal+0x36c>
 800b38e:	bf00      	nop
 800b390:	20000ce0 	.word	0x20000ce0
 800b394:	20000b2c 	.word	0x20000b2c
 800b398:	20000b8c 	.word	0x20000b8c
 800b39c:	200003ca 	.word	0x200003ca
 800b3a0:	2000022c 	.word	0x2000022c
 800b3a4:	20000b84 	.word	0x20000b84
 800b3a8:	20000cdc 	.word	0x20000cdc
 800b3ac:	20000efc 	.word	0x20000efc
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d14d      	bne.n	800b456 <find_pregoal+0x35e>
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d04a      	beq.n	800b456 <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800b3c0:	7bba      	ldrb	r2, [r7, #14]
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	493b      	ldr	r1, [pc, #236]	; (800b4b4 <find_pregoal+0x3bc>)
 800b3c8:	0112      	lsls	r2, r2, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b3d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d13e      	bne.n	800b456 <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800b3d8:	7bba      	ldrb	r2, [r7, #14]
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	4935      	ldr	r1, [pc, #212]	; (800b4b4 <find_pregoal+0x3bc>)
 800b3de:	0112      	lsls	r2, r2, #4
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	b299      	uxth	r1, r3
 800b3ea:	7bba      	ldrb	r2, [r7, #14]
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	4401      	add	r1, r0
 800b3f2:	b288      	uxth	r0, r1
 800b3f4:	492f      	ldr	r1, [pc, #188]	; (800b4b4 <find_pregoal+0x3bc>)
 800b3f6:	0112      	lsls	r2, r2, #4
 800b3f8:	4413      	add	r3, r2
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800b400:	7bba      	ldrb	r2, [r7, #14]
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	3b01      	subs	r3, #1
 800b406:	492c      	ldr	r1, [pc, #176]	; (800b4b8 <find_pregoal+0x3c0>)
 800b408:	0112      	lsls	r2, r2, #4
 800b40a:	440a      	add	r2, r1
 800b40c:	4413      	add	r3, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	011b      	lsls	r3, r3, #4
 800b412:	b2da      	uxtb	r2, r3
 800b414:	7bb9      	ldrb	r1, [r7, #14]
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	3b01      	subs	r3, #1
 800b41a:	4827      	ldr	r0, [pc, #156]	; (800b4b8 <find_pregoal+0x3c0>)
 800b41c:	0109      	lsls	r1, r1, #4
 800b41e:	4401      	add	r1, r0
 800b420:	440b      	add	r3, r1
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b428:	429a      	cmp	r2, r3
 800b42a:	d014      	beq.n	800b456 <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800b42c:	2301      	movs	r3, #1
 800b42e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800b430:	7bba      	ldrb	r2, [r7, #14]
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	3b01      	subs	r3, #1
 800b436:	491f      	ldr	r1, [pc, #124]	; (800b4b4 <find_pregoal+0x3bc>)
 800b438:	0112      	lsls	r2, r2, #4
 800b43a:	4413      	add	r3, r2
 800b43c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b440:	4b1e      	ldr	r3, [pc, #120]	; (800b4bc <find_pregoal+0x3c4>)
 800b442:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	3b01      	subs	r3, #1
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <find_pregoal+0x3c8>)
 800b44c:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800b44e:	4a1d      	ldr	r2, [pc, #116]	; (800b4c4 <find_pregoal+0x3cc>)
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	7013      	strb	r3, [r2, #0]
								break;							}
 800b454:	e006      	b.n	800b464 <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	3301      	adds	r3, #1
 800b45a:	73fb      	strb	r3, [r7, #15]
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b0f      	cmp	r3, #15
 800b460:	f67f ae88 	bls.w	800b174 <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800b464:	7b7b      	ldrb	r3, [r7, #13]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d107      	bne.n	800b47a <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	3301      	adds	r3, #1
 800b46e:	73bb      	strb	r3, [r7, #14]
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2b0f      	cmp	r3, #15
 800b474:	f67f ae7b 	bls.w	800b16e <find_pregoal+0x76>
 800b478:	e000      	b.n	800b47c <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800b47a:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800b47c:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <find_pregoal+0x3d0>)
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	3301      	adds	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	4b10      	ldr	r3, [pc, #64]	; (800b4c8 <find_pregoal+0x3d0>)
 800b486:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800b488:	4b0f      	ldr	r3, [pc, #60]	; (800b4c8 <find_pregoal+0x3d0>)
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b490:	d902      	bls.n	800b498 <find_pregoal+0x3a0>
 800b492:	4b0e      	ldr	r3, [pc, #56]	; (800b4cc <find_pregoal+0x3d4>)
 800b494:	2201      	movs	r2, #1
 800b496:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800b498:	7b7b      	ldrb	r3, [r7, #13]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d104      	bne.n	800b4a8 <find_pregoal+0x3b0>
 800b49e:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <find_pregoal+0x3d4>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	f47f ae60 	bne.w	800b168 <find_pregoal+0x70>
}
 800b4a8:	bf00      	nop
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	20000ce0 	.word	0x20000ce0
 800b4b8:	2000022c 	.word	0x2000022c
 800b4bc:	20000b84 	.word	0x20000b84
 800b4c0:	20000cdc 	.word	0x20000cdc
 800b4c4:	20000efc 	.word	0x20000efc
 800b4c8:	200003ca 	.word	0x200003ca
 800b4cc:	20000b2c 	.word	0x20000b2c

0800b4d0 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73bb      	strb	r3, [r7, #14]
 800b4da:	e014      	b.n	800b506 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]
 800b4e0:	e00b      	b.n	800b4fa <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800b4e2:	7bba      	ldrb	r2, [r7, #14]
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	4986      	ldr	r1, [pc, #536]	; (800b700 <make_smap2+0x230>)
 800b4e8:	0112      	lsls	r2, r2, #4
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	73fb      	strb	r3, [r7, #15]
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
 800b4fc:	2b0f      	cmp	r3, #15
 800b4fe:	d9f0      	bls.n	800b4e2 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	3301      	adds	r3, #1
 800b504:	73bb      	strb	r3, [r7, #14]
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	2b0f      	cmp	r3, #15
 800b50a:	d9e7      	bls.n	800b4dc <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800b50c:	4b7d      	ldr	r3, [pc, #500]	; (800b704 <make_smap2+0x234>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	4618      	mov	r0, r3
 800b512:	4b7d      	ldr	r3, [pc, #500]	; (800b708 <make_smap2+0x238>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	4619      	mov	r1, r3
 800b518:	4a79      	ldr	r2, [pc, #484]	; (800b700 <make_smap2+0x230>)
 800b51a:	0103      	lsls	r3, r0, #4
 800b51c:	440b      	add	r3, r1
 800b51e:	2100      	movs	r1, #0
 800b520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800b524:	4b79      	ldr	r3, [pc, #484]	; (800b70c <make_smap2+0x23c>)
 800b526:	2200      	movs	r2, #0
 800b528:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800b52a:	2303      	movs	r3, #3
 800b52c:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800b52e:	2305      	movs	r3, #5
 800b530:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b532:	2300      	movs	r3, #0
 800b534:	73bb      	strb	r3, [r7, #14]
 800b536:	e0c0      	b.n	800b6ba <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]
 800b53c:	e0b6      	b.n	800b6ac <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800b53e:	7bba      	ldrb	r2, [r7, #14]
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	496f      	ldr	r1, [pc, #444]	; (800b700 <make_smap2+0x230>)
 800b544:	0112      	lsls	r2, r2, #4
 800b546:	4413      	add	r3, r2
 800b548:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800b54c:	4b6f      	ldr	r3, [pc, #444]	; (800b70c <make_smap2+0x23c>)
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	429a      	cmp	r2, r3
 800b552:	f040 80a8 	bne.w	800b6a6 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800b556:	7bba      	ldrb	r2, [r7, #14]
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	496d      	ldr	r1, [pc, #436]	; (800b710 <make_smap2+0x240>)
 800b55c:	0112      	lsls	r2, r2, #4
 800b55e:	440a      	add	r2, r1
 800b560:	4413      	add	r3, r2
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	f003 0308 	and.w	r3, r3, #8
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d122      	bne.n	800b5b6 <make_smap2+0xe6>
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	2b0f      	cmp	r3, #15
 800b574:	d01f      	beq.n	800b5b6 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800b576:	7bbb      	ldrb	r3, [r7, #14]
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	4960      	ldr	r1, [pc, #384]	; (800b700 <make_smap2+0x230>)
 800b57e:	0112      	lsls	r2, r2, #4
 800b580:	4413      	add	r3, r2
 800b582:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d113      	bne.n	800b5b6 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b58e:	7bba      	ldrb	r2, [r7, #14]
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	495b      	ldr	r1, [pc, #364]	; (800b700 <make_smap2+0x230>)
 800b594:	0112      	lsls	r2, r2, #4
 800b596:	4413      	add	r3, r2
 800b598:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	b299      	uxth	r1, r3
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	4401      	add	r1, r0
 800b5a8:	b288      	uxth	r0, r1
 800b5aa:	4955      	ldr	r1, [pc, #340]	; (800b700 <make_smap2+0x230>)
 800b5ac:	0112      	lsls	r2, r2, #4
 800b5ae:	4413      	add	r3, r2
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800b5b6:	78fb      	ldrb	r3, [r7, #3]
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d122      	bne.n	800b606 <make_smap2+0x136>
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b0f      	cmp	r3, #15
 800b5c4:	d01f      	beq.n	800b606 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800b5c6:	7bba      	ldrb	r2, [r7, #14]
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	494c      	ldr	r1, [pc, #304]	; (800b700 <make_smap2+0x230>)
 800b5ce:	0112      	lsls	r2, r2, #4
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b5d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d113      	bne.n	800b606 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b5de:	7bba      	ldrb	r2, [r7, #14]
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	4947      	ldr	r1, [pc, #284]	; (800b700 <make_smap2+0x230>)
 800b5e4:	0112      	lsls	r2, r2, #4
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	b299      	uxth	r1, r3
 800b5f0:	7bba      	ldrb	r2, [r7, #14]
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	4401      	add	r1, r0
 800b5f8:	b288      	uxth	r0, r1
 800b5fa:	4941      	ldr	r1, [pc, #260]	; (800b700 <make_smap2+0x230>)
 800b5fc:	0112      	lsls	r2, r2, #4
 800b5fe:	4413      	add	r3, r2
 800b600:	4602      	mov	r2, r0
 800b602:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d122      	bne.n	800b656 <make_smap2+0x186>
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d01f      	beq.n	800b656 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	4938      	ldr	r1, [pc, #224]	; (800b700 <make_smap2+0x230>)
 800b61e:	0112      	lsls	r2, r2, #4
 800b620:	4413      	add	r3, r2
 800b622:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d113      	bne.n	800b656 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800b62e:	7bba      	ldrb	r2, [r7, #14]
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	4933      	ldr	r1, [pc, #204]	; (800b700 <make_smap2+0x230>)
 800b634:	0112      	lsls	r2, r2, #4
 800b636:	4413      	add	r3, r2
 800b638:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	b299      	uxth	r1, r3
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	1e5a      	subs	r2, r3, #1
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	4401      	add	r1, r0
 800b648:	b288      	uxth	r0, r1
 800b64a:	492d      	ldr	r1, [pc, #180]	; (800b700 <make_smap2+0x230>)
 800b64c:	0112      	lsls	r2, r2, #4
 800b64e:	4413      	add	r3, r2
 800b650:	4602      	mov	r2, r0
 800b652:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d122      	bne.n	800b6a6 <make_smap2+0x1d6>
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d01f      	beq.n	800b6a6 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800b666:	7bba      	ldrb	r2, [r7, #14]
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4924      	ldr	r1, [pc, #144]	; (800b700 <make_smap2+0x230>)
 800b66e:	0112      	lsls	r2, r2, #4
 800b670:	4413      	add	r3, r2
 800b672:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b676:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d113      	bne.n	800b6a6 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800b67e:	7bba      	ldrb	r2, [r7, #14]
 800b680:	7bfb      	ldrb	r3, [r7, #15]
 800b682:	491f      	ldr	r1, [pc, #124]	; (800b700 <make_smap2+0x230>)
 800b684:	0112      	lsls	r2, r2, #4
 800b686:	4413      	add	r3, r2
 800b688:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	b299      	uxth	r1, r3
 800b690:	7bba      	ldrb	r2, [r7, #14]
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	3b01      	subs	r3, #1
 800b696:	4401      	add	r1, r0
 800b698:	b288      	uxth	r0, r1
 800b69a:	4919      	ldr	r1, [pc, #100]	; (800b700 <make_smap2+0x230>)
 800b69c:	0112      	lsls	r2, r2, #4
 800b69e:	4413      	add	r3, r2
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	73fb      	strb	r3, [r7, #15]
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	2b0f      	cmp	r3, #15
 800b6b0:	f67f af45 	bls.w	800b53e <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	73bb      	strb	r3, [r7, #14]
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	2b0f      	cmp	r3, #15
 800b6be:	f67f af3b 	bls.w	800b538 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800b6c2:	4b12      	ldr	r3, [pc, #72]	; (800b70c <make_smap2+0x23c>)
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	4b10      	ldr	r3, [pc, #64]	; (800b70c <make_smap2+0x23c>)
 800b6cc:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800b6ce:	4b11      	ldr	r3, [pc, #68]	; (800b714 <make_smap2+0x244>)
 800b6d0:	785b      	ldrb	r3, [r3, #1]
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <make_smap2+0x244>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4a08      	ldr	r2, [pc, #32]	; (800b700 <make_smap2+0x230>)
 800b6e0:	0103      	lsls	r3, r0, #4
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	f43f af20 	beq.w	800b532 <make_smap2+0x62>
}
 800b6f2:	bf00      	nop
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20000ce0 	.word	0x20000ce0
 800b704:	20000efc 	.word	0x20000efc
 800b708:	20000cdc 	.word	0x20000cdc
 800b70c:	200003ca 	.word	0x200003ca
 800b710:	2000022c 	.word	0x2000022c
 800b714:	20000b8c 	.word	0x20000b8c

0800b718 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800b71e:	4818      	ldr	r0, [pc, #96]	; (800b780 <store_map_in_eeprom+0x68>)
 800b720:	f000 ff28 	bl	800c574 <puts>
	eeprom_enable_write();
 800b724:	f7fc f978 	bl	8007a18 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800b728:	4816      	ldr	r0, [pc, #88]	; (800b784 <store_map_in_eeprom+0x6c>)
 800b72a:	f000 ff23 	bl	800c574 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800b72e:	2300      	movs	r3, #0
 800b730:	607b      	str	r3, [r7, #4]
 800b732:	e01b      	b.n	800b76c <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800b734:	2300      	movs	r3, #0
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	e012      	b.n	800b760 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	011a      	lsls	r2, r3, #4
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	4413      	add	r3, r2
 800b742:	4618      	mov	r0, r3
 800b744:	4a10      	ldr	r2, [pc, #64]	; (800b788 <store_map_in_eeprom+0x70>)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	441a      	add	r2, r3
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	4413      	add	r3, r2
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	b29b      	uxth	r3, r3
 800b754:	4619      	mov	r1, r3
 800b756:	f7fc f98a 	bl	8007a6e <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	3301      	adds	r3, #1
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	2b0f      	cmp	r3, #15
 800b764:	dde9      	ble.n	800b73a <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	3301      	adds	r3, #1
 800b76a:	607b      	str	r3, [r7, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b0f      	cmp	r3, #15
 800b770:	dde0      	ble.n	800b734 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800b772:	f7fc f975 	bl	8007a60 <eeprom_disable_write>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	0800d9b8 	.word	0x0800d9b8
 800b784:	0800d9cc 	.word	0x0800d9cc
 800b788:	2000022c 	.word	0x2000022c

0800b78c <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800b792:	2300      	movs	r3, #0
 800b794:	607b      	str	r3, [r7, #4]
 800b796:	e01c      	b.n	800b7d2 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800b798:	2300      	movs	r3, #0
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	e013      	b.n	800b7c6 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	011a      	lsls	r2, r3, #4
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fc f97e 	bl	8007aa8 <eeprom_read_halfword>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	b2d9      	uxtb	r1, r3
 800b7b0:	4a0b      	ldr	r2, [pc, #44]	; (800b7e0 <load_map_from_eeprom+0x54>)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	441a      	add	r2, r3
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	460a      	mov	r2, r1
 800b7be:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	603b      	str	r3, [r7, #0]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b0f      	cmp	r3, #15
 800b7ca:	dde8      	ble.n	800b79e <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	607b      	str	r3, [r7, #4]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b0f      	cmp	r3, #15
 800b7d6:	dddf      	ble.n	800b798 <load_map_from_eeprom+0xc>
		}
	}
}
 800b7d8:	bf00      	nop
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	2000022c 	.word	0x2000022c

0800b7e4 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800b7e4:	b480      	push	{r7}
 800b7e6:	af00      	add	r7, sp, #0
	tp = 0;
 800b7e8:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <sensor_init+0x40>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800b7ee:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <sensor_init+0x44>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <sensor_init+0x44>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a0c      	ldr	r2, [pc, #48]	; (800b82c <sensor_init+0x48>)
 800b7fa:	6013      	str	r3, [r2, #0]
 800b7fc:	4b0b      	ldr	r3, [pc, #44]	; (800b82c <sensor_init+0x48>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a0b      	ldr	r2, [pc, #44]	; (800b830 <sensor_init+0x4c>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <sensor_init+0x4c>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a0a      	ldr	r2, [pc, #40]	; (800b834 <sensor_init+0x50>)
 800b80a:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800b80c:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <sensor_init+0x54>)
 800b80e:	2200      	movs	r2, #0
 800b810:	801a      	strh	r2, [r3, #0]
 800b812:	4b09      	ldr	r3, [pc, #36]	; (800b838 <sensor_init+0x54>)
 800b814:	881a      	ldrh	r2, [r3, #0]
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <sensor_init+0x58>)
 800b818:	801a      	strh	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	20000efb 	.word	0x20000efb
 800b828:	20000cd4 	.word	0x20000cd4
 800b82c:	20000b80 	.word	0x20000b80
 800b830:	20000ee0 	.word	0x20000ee0
 800b834:	20000a78 	.word	0x20000a78
 800b838:	2000033c 	.word	0x2000033c
 800b83c:	200003c8 	.word	0x200003c8

0800b840 <get_base>:


uint8_t get_base(){
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800b846:	2301      	movs	r3, #1
 800b848:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800b84a:	4b08      	ldr	r3, [pc, #32]	; (800b86c <get_base+0x2c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	b29a      	uxth	r2, r3
 800b850:	4b07      	ldr	r3, [pc, #28]	; (800b870 <get_base+0x30>)
 800b852:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800b854:	4b07      	ldr	r3, [pc, #28]	; (800b874 <get_base+0x34>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	4b07      	ldr	r3, [pc, #28]	; (800b878 <get_base+0x38>)
 800b85c:	801a      	strh	r2, [r3, #0]

	return res;											//
 800b85e:	79fb      	ldrb	r3, [r7, #7]
}
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20000a78 	.word	0x20000a78
 800b870:	200003c8 	.word	0x200003c8
 800b874:	20000ee0 	.word	0x20000ee0
 800b878:	2000033c 	.word	0x2000033c

0800b87c <get_wall_info>:


void get_wall_info(){
 800b87c:	b480      	push	{r7}
 800b87e:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800b880:	4b16      	ldr	r3, [pc, #88]	; (800b8dc <get_wall_info+0x60>)
 800b882:	2200      	movs	r2, #0
 800b884:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800b886:	4b16      	ldr	r3, [pc, #88]	; (800b8e0 <get_wall_info+0x64>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b1e      	cmp	r3, #30
 800b88c:	d803      	bhi.n	800b896 <get_wall_info+0x1a>
 800b88e:	4b15      	ldr	r3, [pc, #84]	; (800b8e4 <get_wall_info+0x68>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b46      	cmp	r3, #70	; 0x46
 800b894:	d906      	bls.n	800b8a4 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800b896:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <get_wall_info+0x60>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f063 0377 	orn	r3, r3, #119	; 0x77
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <get_wall_info+0x60>)
 800b8a2:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <get_wall_info+0x6c>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b28      	cmp	r3, #40	; 0x28
 800b8aa:	d906      	bls.n	800b8ba <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <get_wall_info+0x60>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	4b09      	ldr	r3, [pc, #36]	; (800b8dc <get_wall_info+0x60>)
 800b8b8:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800b8ba:	4b0c      	ldr	r3, [pc, #48]	; (800b8ec <get_wall_info+0x70>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b28      	cmp	r3, #40	; 0x28
 800b8c0:	d906      	bls.n	800b8d0 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800b8c2:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <get_wall_info+0x60>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	f043 0311 	orr.w	r3, r3, #17
 800b8ca:	b2da      	uxtb	r2, r3
 800b8cc:	4b03      	ldr	r3, [pc, #12]	; (800b8dc <get_wall_info+0x60>)
 800b8ce:	701a      	strb	r2, [r3, #0]
	}
}
 800b8d0:	bf00      	nop
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20000344 	.word	0x20000344
 800b8e0:	20000b80 	.word	0x20000b80
 800b8e4:	20000cd4 	.word	0x20000cd4
 800b8e8:	20000ee0 	.word	0x20000ee0
 800b8ec:	20000a78 	.word	0x20000a78

0800b8f0 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	71fb      	strb	r3, [r7, #7]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	71bb      	strb	r3, [r7, #6]
 800b8fe:	4613      	mov	r3, r2
 800b900:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d005      	beq.n	800b914 <led_write+0x24>
 800b908:	2201      	movs	r2, #1
 800b90a:	2110      	movs	r1, #16
 800b90c:	4814      	ldr	r0, [pc, #80]	; (800b960 <led_write+0x70>)
 800b90e:	f7f6 fcd1 	bl	80022b4 <HAL_GPIO_WritePin>
 800b912:	e004      	b.n	800b91e <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800b914:	2200      	movs	r2, #0
 800b916:	2110      	movs	r1, #16
 800b918:	4811      	ldr	r0, [pc, #68]	; (800b960 <led_write+0x70>)
 800b91a:	f7f6 fccb 	bl	80022b4 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800b91e:	79bb      	ldrb	r3, [r7, #6]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <led_write+0x40>
 800b924:	2201      	movs	r2, #1
 800b926:	2140      	movs	r1, #64	; 0x40
 800b928:	480d      	ldr	r0, [pc, #52]	; (800b960 <led_write+0x70>)
 800b92a:	f7f6 fcc3 	bl	80022b4 <HAL_GPIO_WritePin>
 800b92e:	e004      	b.n	800b93a <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800b930:	2200      	movs	r2, #0
 800b932:	2140      	movs	r1, #64	; 0x40
 800b934:	480a      	ldr	r0, [pc, #40]	; (800b960 <led_write+0x70>)
 800b936:	f7f6 fcbd 	bl	80022b4 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800b93a:	797b      	ldrb	r3, [r7, #5]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d005      	beq.n	800b94c <led_write+0x5c>
 800b940:	2201      	movs	r2, #1
 800b942:	2180      	movs	r1, #128	; 0x80
 800b944:	4806      	ldr	r0, [pc, #24]	; (800b960 <led_write+0x70>)
 800b946:	f7f6 fcb5 	bl	80022b4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800b94a:	e004      	b.n	800b956 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800b94c:	2200      	movs	r2, #0
 800b94e:	2180      	movs	r1, #128	; 0x80
 800b950:	4803      	ldr	r0, [pc, #12]	; (800b960 <led_write+0x70>)
 800b952:	f7f6 fcaf 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	40020000 	.word	0x40020000

0800b964 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d112      	bne.n	800b99a <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b974:	2201      	movs	r2, #1
 800b976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b97a:	4856      	ldr	r0, [pc, #344]	; (800bad4 <full_led_write+0x170>)
 800b97c:	f7f6 fc9a 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b980:	2201      	movs	r2, #1
 800b982:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b986:	4853      	ldr	r0, [pc, #332]	; (800bad4 <full_led_write+0x170>)
 800b988:	f7f6 fc94 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b98c:	2201      	movs	r2, #1
 800b98e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b992:	4851      	ldr	r0, [pc, #324]	; (800bad8 <full_led_write+0x174>)
 800b994:	f7f6 fc8e 	bl	80022b4 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800b998:	e098      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 1){
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d112      	bne.n	800b9c6 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9a6:	484b      	ldr	r0, [pc, #300]	; (800bad4 <full_led_write+0x170>)
 800b9a8:	f7f6 fc84 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9b2:	4848      	ldr	r0, [pc, #288]	; (800bad4 <full_led_write+0x170>)
 800b9b4:	f7f6 fc7e 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b9be:	4846      	ldr	r0, [pc, #280]	; (800bad8 <full_led_write+0x174>)
 800b9c0:	f7f6 fc78 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b9c4:	e082      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 2){
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d112      	bne.n	800b9f2 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9d2:	4840      	ldr	r0, [pc, #256]	; (800bad4 <full_led_write+0x170>)
 800b9d4:	f7f6 fc6e 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9de:	483d      	ldr	r0, [pc, #244]	; (800bad4 <full_led_write+0x170>)
 800b9e0:	f7f6 fc68 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b9ea:	483b      	ldr	r0, [pc, #236]	; (800bad8 <full_led_write+0x174>)
 800b9ec:	f7f6 fc62 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b9f0:	e06c      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 3){
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d112      	bne.n	800ba1e <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9fe:	4835      	ldr	r0, [pc, #212]	; (800bad4 <full_led_write+0x170>)
 800ba00:	f7f6 fc58 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ba04:	2201      	movs	r2, #1
 800ba06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba0a:	4832      	ldr	r0, [pc, #200]	; (800bad4 <full_led_write+0x170>)
 800ba0c:	f7f6 fc52 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800ba10:	2201      	movs	r2, #1
 800ba12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba16:	4830      	ldr	r0, [pc, #192]	; (800bad8 <full_led_write+0x174>)
 800ba18:	f7f6 fc4c 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba1c:	e056      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 4){
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	2b04      	cmp	r3, #4
 800ba22:	d112      	bne.n	800ba4a <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ba24:	2200      	movs	r2, #0
 800ba26:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba2a:	482a      	ldr	r0, [pc, #168]	; (800bad4 <full_led_write+0x170>)
 800ba2c:	f7f6 fc42 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ba30:	2200      	movs	r2, #0
 800ba32:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba36:	4827      	ldr	r0, [pc, #156]	; (800bad4 <full_led_write+0x170>)
 800ba38:	f7f6 fc3c 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba42:	4825      	ldr	r0, [pc, #148]	; (800bad8 <full_led_write+0x174>)
 800ba44:	f7f6 fc36 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba48:	e040      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 5){
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	2b05      	cmp	r3, #5
 800ba4e:	d112      	bne.n	800ba76 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800ba50:	2200      	movs	r2, #0
 800ba52:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba56:	481f      	ldr	r0, [pc, #124]	; (800bad4 <full_led_write+0x170>)
 800ba58:	f7f6 fc2c 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba62:	481c      	ldr	r0, [pc, #112]	; (800bad4 <full_led_write+0x170>)
 800ba64:	f7f6 fc26 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba6e:	481a      	ldr	r0, [pc, #104]	; (800bad8 <full_led_write+0x174>)
 800ba70:	f7f6 fc20 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800ba74:	e02a      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 6){
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	2b06      	cmp	r3, #6
 800ba7a:	d112      	bne.n	800baa2 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba82:	4814      	ldr	r0, [pc, #80]	; (800bad4 <full_led_write+0x170>)
 800ba84:	f7f6 fc16 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba8e:	4811      	ldr	r0, [pc, #68]	; (800bad4 <full_led_write+0x170>)
 800ba90:	f7f6 fc10 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800ba94:	2200      	movs	r2, #0
 800ba96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba9a:	480f      	ldr	r0, [pc, #60]	; (800bad8 <full_led_write+0x174>)
 800ba9c:	f7f6 fc0a 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800baa0:	e014      	b.n	800bacc <full_led_write+0x168>
	else if(fulled == 7){
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	d111      	bne.n	800bacc <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800baa8:	2200      	movs	r2, #0
 800baaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baae:	4809      	ldr	r0, [pc, #36]	; (800bad4 <full_led_write+0x170>)
 800bab0:	f7f6 fc00 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800bab4:	2200      	movs	r2, #0
 800bab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800baba:	4806      	ldr	r0, [pc, #24]	; (800bad4 <full_led_write+0x170>)
 800babc:	f7f6 fbfa 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800bac0:	2200      	movs	r2, #0
 800bac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bac6:	4804      	ldr	r0, [pc, #16]	; (800bad8 <full_led_write+0x174>)
 800bac8:	f7f6 fbf4 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	40020400 	.word	0x40020400
 800bad8:	40020800 	.word	0x40020800

0800badc <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af02      	add	r7, sp, #8

	int mode = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800bae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bae8:	4881      	ldr	r0, [pc, #516]	; (800bcf0 <sensor_test+0x214>)
 800baea:	f000 fccf 	bl	800c48c <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	b2d8      	uxtb	r0, r3
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	b2d9      	uxtb	r1, r3
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	f003 0304 	and.w	r3, r3, #4
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f7ff feef 	bl	800b8f0 <led_write>
		  if(dist_r >= 20){
 800bb12:	4b78      	ldr	r3, [pc, #480]	; (800bcf4 <sensor_test+0x218>)
 800bb14:	edd3 7a00 	vldr	s15, [r3]
 800bb18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bb1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	db0f      	blt.n	800bb46 <sensor_test+0x6a>
			  mode++;
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	3301      	adds	r3, #1
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800bb2c:	4b71      	ldr	r3, [pc, #452]	; (800bcf4 <sensor_test+0x218>)
 800bb2e:	f04f 0200 	mov.w	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	2b07      	cmp	r3, #7
 800bb38:	dd01      	ble.n	800bb3e <sensor_test+0x62>
				  mode = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800bb3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb40:	486b      	ldr	r0, [pc, #428]	; (800bcf0 <sensor_test+0x214>)
 800bb42:	f000 fca3 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800bb46:	4b6b      	ldr	r3, [pc, #428]	; (800bcf4 <sensor_test+0x218>)
 800bb48:	edd3 7a00 	vldr	s15, [r3]
 800bb4c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800bb50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb58:	d80f      	bhi.n	800bb7a <sensor_test+0x9e>
			  mode--;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800bb60:	4b64      	ldr	r3, [pc, #400]	; (800bcf4 <sensor_test+0x218>)
 800bb62:	f04f 0200 	mov.w	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da01      	bge.n	800bb72 <sensor_test+0x96>
				  mode = 7;
 800bb6e:	2307      	movs	r3, #7
 800bb70:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800bb72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb74:	485e      	ldr	r0, [pc, #376]	; (800bcf0 <sensor_test+0x214>)
 800bb76:	f000 fc89 	bl	800c48c <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800bb7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb7e:	485e      	ldr	r0, [pc, #376]	; (800bcf8 <sensor_test+0x21c>)
 800bb80:	f7f6 fb80 	bl	8002284 <HAL_GPIO_ReadPin>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1b1      	bne.n	800baee <sensor_test+0x12>
			  HAL_Delay(50);
 800bb8a:	2032      	movs	r0, #50	; 0x32
 800bb8c:	f7f5 fa1e 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800bb90:	bf00      	nop
 800bb92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb96:	4858      	ldr	r0, [pc, #352]	; (800bcf8 <sensor_test+0x21c>)
 800bb98:	f7f6 fb74 	bl	8002284 <HAL_GPIO_ReadPin>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d0f7      	beq.n	800bb92 <sensor_test+0xb6>

			  drive_ready();
 800bba2:	f7f9 f83f 	bl	8004c24 <drive_ready>

			  switch(mode){
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	2b07      	cmp	r3, #7
 800bbaa:	d8a0      	bhi.n	800baee <sensor_test+0x12>
 800bbac:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <sensor_test+0xd8>)
 800bbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb2:	bf00      	nop
 800bbb4:	0800bbd5 	.word	0x0800bbd5
 800bbb8:	0800bbdb 	.word	0x0800bbdb
 800bbbc:	0800bc2d 	.word	0x0800bc2d
 800bbc0:	0800baef 	.word	0x0800baef
 800bbc4:	0800baef 	.word	0x0800baef
 800bbc8:	0800baef 	.word	0x0800baef
 800bbcc:	0800baef 	.word	0x0800baef
 800bbd0:	0800baef 	.word	0x0800baef
				case 0:
					get_base();
 800bbd4:	f7ff fe34 	bl	800b840 <get_base>
					break;
 800bbd8:	e089      	b.n	800bcee <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 800bbda:	4848      	ldr	r0, [pc, #288]	; (800bcfc <sensor_test+0x220>)
 800bbdc:	f000 fcca 	bl	800c574 <puts>
			  		  while(1){
			  			  get_wall_info();
 800bbe0:	f7ff fe4c 	bl	800b87c <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 800bbe4:	4b46      	ldr	r3, [pc, #280]	; (800bd00 <sensor_test+0x224>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	f003 0311 	and.w	r3, r3, #17
 800bbec:	b2d8      	uxtb	r0, r3
 800bbee:	4b44      	ldr	r3, [pc, #272]	; (800bd00 <sensor_test+0x224>)
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bbf6:	b2d9      	uxtb	r1, r3
 800bbf8:	4b41      	ldr	r3, [pc, #260]	; (800bd00 <sensor_test+0x224>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	461a      	mov	r2, r3
 800bc04:	f7ff fe74 	bl	800b8f0 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 800bc08:	4b3e      	ldr	r3, [pc, #248]	; (800bd04 <sensor_test+0x228>)
 800bc0a:	6819      	ldr	r1, [r3, #0]
 800bc0c:	4b3e      	ldr	r3, [pc, #248]	; (800bd08 <sensor_test+0x22c>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	4b3e      	ldr	r3, [pc, #248]	; (800bd0c <sensor_test+0x230>)
 800bc12:	6818      	ldr	r0, [r3, #0]
 800bc14:	4b3e      	ldr	r3, [pc, #248]	; (800bd10 <sensor_test+0x234>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	483d      	ldr	r0, [pc, #244]	; (800bd14 <sensor_test+0x238>)
 800bc1e:	f000 fc35 	bl	800c48c <iprintf>
			  			  HAL_Delay(333);
 800bc22:	f240 104d 	movw	r0, #333	; 0x14d
 800bc26:	f7f5 f9d1 	bl	8000fcc <HAL_Delay>
			  			  get_wall_info();
 800bc2a:	e7d9      	b.n	800bbe0 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 800bc2c:	483a      	ldr	r0, [pc, #232]	; (800bd18 <sensor_test+0x23c>)
 800bc2e:	f000 fca1 	bl	800c574 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 800bc32:	f7fb ffe1 	bl	8007bf8 <accel_read_x>
 800bc36:	eef0 7a40 	vmov.f32	s15, s0
 800bc3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc3e:	ee17 3a90 	vmov	r3, s15
 800bc42:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 800bc44:	f7fb fffe 	bl	8007c44 <accel_read_y>
 800bc48:	eef0 7a40 	vmov.f32	s15, s0
 800bc4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc50:	ee17 3a90 	vmov	r3, s15
 800bc54:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 800bc56:	f7fc f81b 	bl	8007c90 <accel_read_z>
 800bc5a:	eef0 7a40 	vmov.f32	s15, s0
 800bc5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc62:	ee17 3a90 	vmov	r3, s15
 800bc66:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 800bc68:	f7fc f83a 	bl	8007ce0 <gyro_read_x>
 800bc6c:	eef0 7a40 	vmov.f32	s15, s0
 800bc70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc74:	ee17 3a90 	vmov	r3, s15
 800bc78:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 800bc7a:	f7fc f86d 	bl	8007d58 <gyro_read_y>
 800bc7e:	eef0 7a40 	vmov.f32	s15, s0
 800bc82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc86:	ee17 3a90 	vmov	r3, s15
 800bc8a:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 800bc8c:	f7fc f8a0 	bl	8007dd0 <gyro_read_z>
 800bc90:	eef0 7a40 	vmov.f32	s15, s0
 800bc94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc98:	ee17 3a90 	vmov	r3, s15
 800bc9c:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 800bc9e:	4b1f      	ldr	r3, [pc, #124]	; (800bd1c <sensor_test+0x240>)
 800bca0:	edd3 7a00 	vldr	s15, [r3]
 800bca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bca8:	ee17 3a90 	vmov	r3, s15
 800bcac:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 800bcae:	4b1c      	ldr	r3, [pc, #112]	; (800bd20 <sensor_test+0x244>)
 800bcb0:	edd3 7a00 	vldr	s15, [r3]
 800bcb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcb8:	ee17 3a90 	vmov	r3, s15
 800bcbc:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 800bcbe:	4b19      	ldr	r3, [pc, #100]	; (800bd24 <sensor_test+0x248>)
 800bcc0:	edd3 7a00 	vldr	s15, [r3]
 800bcc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcc8:	ee17 3a90 	vmov	r3, s15
 800bccc:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	6979      	ldr	r1, [r7, #20]
 800bcd4:	4814      	ldr	r0, [pc, #80]	; (800bd28 <sensor_test+0x24c>)
 800bcd6:	f000 fbd9 	bl	800c48c <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	68b9      	ldr	r1, [r7, #8]
 800bce0:	4812      	ldr	r0, [pc, #72]	; (800bd2c <sensor_test+0x250>)
 800bce2:	f000 fbd3 	bl	800c48c <iprintf>
			  			  HAL_Delay(111);
 800bce6:	206f      	movs	r0, #111	; 0x6f
 800bce8:	f7f5 f970 	bl	8000fcc <HAL_Delay>
			  			  accel_x = accel_read_x();
 800bcec:	e7a1      	b.n	800bc32 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bcee:	e6fe      	b.n	800baee <sensor_test+0x12>
 800bcf0:	0800d9e4 	.word	0x0800d9e4
 800bcf4:	20000a68 	.word	0x20000a68
 800bcf8:	40020000 	.word	0x40020000
 800bcfc:	0800d9f0 	.word	0x0800d9f0
 800bd00:	20000344 	.word	0x20000344
 800bd04:	20000a78 	.word	0x20000a78
 800bd08:	20000cd4 	.word	0x20000cd4
 800bd0c:	20000b80 	.word	0x20000b80
 800bd10:	20000ee0 	.word	0x20000ee0
 800bd14:	0800da04 	.word	0x0800da04
 800bd18:	0800da34 	.word	0x0800da34
 800bd1c:	200003cc 	.word	0x200003cc
 800bd20:	20000eec 	.word	0x20000eec
 800bd24:	20000ad8 	.word	0x20000ad8
 800bd28:	0800da48 	.word	0x0800da48
 800bd2c:	0800da68 	.word	0x0800da68

0800bd30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd36:	2300      	movs	r3, #0
 800bd38:	607b      	str	r3, [r7, #4]
 800bd3a:	4b10      	ldr	r3, [pc, #64]	; (800bd7c <HAL_MspInit+0x4c>)
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3e:	4a0f      	ldr	r2, [pc, #60]	; (800bd7c <HAL_MspInit+0x4c>)
 800bd40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd44:	6453      	str	r3, [r2, #68]	; 0x44
 800bd46:	4b0d      	ldr	r3, [pc, #52]	; (800bd7c <HAL_MspInit+0x4c>)
 800bd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd4e:	607b      	str	r3, [r7, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd52:	2300      	movs	r3, #0
 800bd54:	603b      	str	r3, [r7, #0]
 800bd56:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <HAL_MspInit+0x4c>)
 800bd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5a:	4a08      	ldr	r2, [pc, #32]	; (800bd7c <HAL_MspInit+0x4c>)
 800bd5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd60:	6413      	str	r3, [r2, #64]	; 0x40
 800bd62:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <HAL_MspInit+0x4c>)
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	40023800 	.word	0x40023800

0800bd80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08a      	sub	sp, #40	; 0x28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd88:	f107 0314 	add.w	r3, r7, #20
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	605a      	str	r2, [r3, #4]
 800bd92:	609a      	str	r2, [r3, #8]
 800bd94:	60da      	str	r2, [r3, #12]
 800bd96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a17      	ldr	r2, [pc, #92]	; (800bdfc <HAL_ADC_MspInit+0x7c>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d127      	bne.n	800bdf2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bda2:	2300      	movs	r3, #0
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	4b16      	ldr	r3, [pc, #88]	; (800be00 <HAL_ADC_MspInit+0x80>)
 800bda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdaa:	4a15      	ldr	r2, [pc, #84]	; (800be00 <HAL_ADC_MspInit+0x80>)
 800bdac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdb0:	6453      	str	r3, [r2, #68]	; 0x44
 800bdb2:	4b13      	ldr	r3, [pc, #76]	; (800be00 <HAL_ADC_MspInit+0x80>)
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdba:	613b      	str	r3, [r7, #16]
 800bdbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
 800bdc2:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <HAL_ADC_MspInit+0x80>)
 800bdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc6:	4a0e      	ldr	r2, [pc, #56]	; (800be00 <HAL_ADC_MspInit+0x80>)
 800bdc8:	f043 0301 	orr.w	r3, r3, #1
 800bdcc:	6313      	str	r3, [r2, #48]	; 0x30
 800bdce:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <HAL_ADC_MspInit+0x80>)
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800bdda:	230f      	movs	r3, #15
 800bddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bdde:	2303      	movs	r3, #3
 800bde0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bde6:	f107 0314 	add.w	r3, r7, #20
 800bdea:	4619      	mov	r1, r3
 800bdec:	4805      	ldr	r0, [pc, #20]	; (800be04 <HAL_ADC_MspInit+0x84>)
 800bdee:	f7f6 f8af 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800bdf2:	bf00      	nop
 800bdf4:	3728      	adds	r7, #40	; 0x28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40012000 	.word	0x40012000
 800be00:	40023800 	.word	0x40023800
 800be04:	40020000 	.word	0x40020000

0800be08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	; 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be10:	f107 0314 	add.w	r3, r7, #20
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	609a      	str	r2, [r3, #8]
 800be1c:	60da      	str	r2, [r3, #12]
 800be1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a19      	ldr	r2, [pc, #100]	; (800be8c <HAL_SPI_MspInit+0x84>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d12c      	bne.n	800be84 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800be2a:	2300      	movs	r3, #0
 800be2c:	613b      	str	r3, [r7, #16]
 800be2e:	4b18      	ldr	r3, [pc, #96]	; (800be90 <HAL_SPI_MspInit+0x88>)
 800be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be32:	4a17      	ldr	r2, [pc, #92]	; (800be90 <HAL_SPI_MspInit+0x88>)
 800be34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be38:	6413      	str	r3, [r2, #64]	; 0x40
 800be3a:	4b15      	ldr	r3, [pc, #84]	; (800be90 <HAL_SPI_MspInit+0x88>)
 800be3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be42:	613b      	str	r3, [r7, #16]
 800be44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	4b11      	ldr	r3, [pc, #68]	; (800be90 <HAL_SPI_MspInit+0x88>)
 800be4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4e:	4a10      	ldr	r2, [pc, #64]	; (800be90 <HAL_SPI_MspInit+0x88>)
 800be50:	f043 0304 	orr.w	r3, r3, #4
 800be54:	6313      	str	r3, [r2, #48]	; 0x30
 800be56:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <HAL_SPI_MspInit+0x88>)
 800be58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800be62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800be66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be68:	2302      	movs	r3, #2
 800be6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be6c:	2300      	movs	r3, #0
 800be6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be70:	2303      	movs	r3, #3
 800be72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800be74:	2306      	movs	r3, #6
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be78:	f107 0314 	add.w	r3, r7, #20
 800be7c:	4619      	mov	r1, r3
 800be7e:	4805      	ldr	r0, [pc, #20]	; (800be94 <HAL_SPI_MspInit+0x8c>)
 800be80:	f7f6 f866 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800be84:	bf00      	nop
 800be86:	3728      	adds	r7, #40	; 0x28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	40003c00 	.word	0x40003c00
 800be90:	40023800 	.word	0x40023800
 800be94:	40020800 	.word	0x40020800

0800be98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea8:	d10e      	bne.n	800bec8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800beaa:	2300      	movs	r3, #0
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	4b20      	ldr	r3, [pc, #128]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	4a1f      	ldr	r2, [pc, #124]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800beb4:	f043 0301 	orr.w	r3, r3, #1
 800beb8:	6413      	str	r3, [r2, #64]	; 0x40
 800beba:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800bec6:	e02e      	b.n	800bf26 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a19      	ldr	r2, [pc, #100]	; (800bf34 <HAL_TIM_Base_MspInit+0x9c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d10e      	bne.n	800bef0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bed2:	2300      	movs	r3, #0
 800bed4:	613b      	str	r3, [r7, #16]
 800bed6:	4b16      	ldr	r3, [pc, #88]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	4a15      	ldr	r2, [pc, #84]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bedc:	f043 0302 	orr.w	r3, r3, #2
 800bee0:	6413      	str	r3, [r2, #64]	; 0x40
 800bee2:	4b13      	ldr	r3, [pc, #76]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	613b      	str	r3, [r7, #16]
 800beec:	693b      	ldr	r3, [r7, #16]
}
 800beee:	e01a      	b.n	800bf26 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a10      	ldr	r2, [pc, #64]	; (800bf38 <HAL_TIM_Base_MspInit+0xa0>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d115      	bne.n	800bf26 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800befa:	2300      	movs	r3, #0
 800befc:	60fb      	str	r3, [r7, #12]
 800befe:	4b0c      	ldr	r3, [pc, #48]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bf00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf02:	4a0b      	ldr	r2, [pc, #44]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bf04:	f043 0310 	orr.w	r3, r3, #16
 800bf08:	6413      	str	r3, [r2, #64]	; 0x40
 800bf0a:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <HAL_TIM_Base_MspInit+0x98>)
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	f003 0310 	and.w	r3, r3, #16
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800bf16:	2200      	movs	r2, #0
 800bf18:	2100      	movs	r1, #0
 800bf1a:	2036      	movs	r0, #54	; 0x36
 800bf1c:	f7f5 fd0d 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bf20:	2036      	movs	r0, #54	; 0x36
 800bf22:	f7f5 fd26 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 800bf26:	bf00      	nop
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	40023800 	.word	0x40023800
 800bf34:	40000400 	.word	0x40000400
 800bf38:	40001000 	.word	0x40001000

0800bf3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	; 0x30
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf44:	f107 031c 	add.w	r3, r7, #28
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	605a      	str	r2, [r3, #4]
 800bf4e:	609a      	str	r2, [r3, #8]
 800bf50:	60da      	str	r2, [r3, #12]
 800bf52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a32      	ldr	r2, [pc, #200]	; (800c024 <HAL_TIM_Encoder_MspInit+0xe8>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d12c      	bne.n	800bfb8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800bf5e:	2300      	movs	r3, #0
 800bf60:	61bb      	str	r3, [r7, #24]
 800bf62:	4b31      	ldr	r3, [pc, #196]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf66:	4a30      	ldr	r2, [pc, #192]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf68:	f043 0304 	orr.w	r3, r3, #4
 800bf6c:	6413      	str	r3, [r2, #64]	; 0x40
 800bf6e:	4b2e      	ldr	r3, [pc, #184]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf72:	f003 0304 	and.w	r3, r3, #4
 800bf76:	61bb      	str	r3, [r7, #24]
 800bf78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]
 800bf7e:	4b2a      	ldr	r3, [pc, #168]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf82:	4a29      	ldr	r2, [pc, #164]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf84:	f043 0302 	orr.w	r3, r3, #2
 800bf88:	6313      	str	r3, [r2, #48]	; 0x30
 800bf8a:	4b27      	ldr	r3, [pc, #156]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8e:	f003 0302 	and.w	r3, r3, #2
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bf96:	23c0      	movs	r3, #192	; 0xc0
 800bf98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfaa:	f107 031c 	add.w	r3, r7, #28
 800bfae:	4619      	mov	r1, r3
 800bfb0:	481e      	ldr	r0, [pc, #120]	; (800c02c <HAL_TIM_Encoder_MspInit+0xf0>)
 800bfb2:	f7f5 ffcd 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800bfb6:	e030      	b.n	800c01a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a1c      	ldr	r2, [pc, #112]	; (800c030 <HAL_TIM_Encoder_MspInit+0xf4>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d12b      	bne.n	800c01a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	613b      	str	r3, [r7, #16]
 800bfc6:	4b18      	ldr	r3, [pc, #96]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfca:	4a17      	ldr	r2, [pc, #92]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfcc:	f043 0302 	orr.w	r3, r3, #2
 800bfd0:	6453      	str	r3, [r2, #68]	; 0x44
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	613b      	str	r3, [r7, #16]
 800bfdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	4b11      	ldr	r3, [pc, #68]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe6:	4a10      	ldr	r2, [pc, #64]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bfe8:	f043 0304 	orr.w	r3, r3, #4
 800bfec:	6313      	str	r3, [r2, #48]	; 0x30
 800bfee:	4b0e      	ldr	r3, [pc, #56]	; (800c028 <HAL_TIM_Encoder_MspInit+0xec>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f003 0304 	and.w	r3, r3, #4
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bffa:	23c0      	movs	r3, #192	; 0xc0
 800bffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bffe:	2302      	movs	r3, #2
 800c000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c002:	2300      	movs	r3, #0
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c006:	2300      	movs	r3, #0
 800c008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c00a:	2303      	movs	r3, #3
 800c00c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c00e:	f107 031c 	add.w	r3, r7, #28
 800c012:	4619      	mov	r1, r3
 800c014:	4807      	ldr	r0, [pc, #28]	; (800c034 <HAL_TIM_Encoder_MspInit+0xf8>)
 800c016:	f7f5 ff9b 	bl	8001f50 <HAL_GPIO_Init>
}
 800c01a:	bf00      	nop
 800c01c:	3730      	adds	r7, #48	; 0x30
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	40000800 	.word	0x40000800
 800c028:	40023800 	.word	0x40023800
 800c02c:	40020400 	.word	0x40020400
 800c030:	40010400 	.word	0x40010400
 800c034:	40020800 	.word	0x40020800

0800c038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08a      	sub	sp, #40	; 0x28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c040:	f107 0314 	add.w	r3, r7, #20
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	605a      	str	r2, [r3, #4]
 800c04a:	609a      	str	r2, [r3, #8]
 800c04c:	60da      	str	r2, [r3, #12]
 800c04e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c058:	d13d      	bne.n	800c0d6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c05a:	2300      	movs	r3, #0
 800c05c:	613b      	str	r3, [r7, #16]
 800c05e:	4b31      	ldr	r3, [pc, #196]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	4a30      	ldr	r2, [pc, #192]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c064:	f043 0301 	orr.w	r3, r3, #1
 800c068:	6313      	str	r3, [r2, #48]	; 0x30
 800c06a:	4b2e      	ldr	r3, [pc, #184]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	613b      	str	r3, [r7, #16]
 800c074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c076:	2300      	movs	r3, #0
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	4b2a      	ldr	r3, [pc, #168]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07e:	4a29      	ldr	r2, [pc, #164]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c080:	f043 0302 	orr.w	r3, r3, #2
 800c084:	6313      	str	r3, [r2, #48]	; 0x30
 800c086:	4b27      	ldr	r3, [pc, #156]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c092:	2320      	movs	r3, #32
 800c094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c096:	2302      	movs	r3, #2
 800c098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0a6:	f107 0314 	add.w	r3, r7, #20
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	481e      	ldr	r0, [pc, #120]	; (800c128 <HAL_TIM_MspPostInit+0xf0>)
 800c0ae:	f7f5 ff4f 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c0b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0c8:	f107 0314 	add.w	r3, r7, #20
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4817      	ldr	r0, [pc, #92]	; (800c12c <HAL_TIM_MspPostInit+0xf4>)
 800c0d0:	f7f5 ff3e 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c0d4:	e022      	b.n	800c11c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a15      	ldr	r2, [pc, #84]	; (800c130 <HAL_TIM_MspPostInit+0xf8>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d11d      	bne.n	800c11c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60bb      	str	r3, [r7, #8]
 800c0e4:	4b0f      	ldr	r3, [pc, #60]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	4a0e      	ldr	r2, [pc, #56]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c0ea:	f043 0302 	orr.w	r3, r3, #2
 800c0ee:	6313      	str	r3, [r2, #48]	; 0x30
 800c0f0:	4b0c      	ldr	r3, [pc, #48]	; (800c124 <HAL_TIM_MspPostInit+0xec>)
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	f003 0302 	and.w	r3, r3, #2
 800c0f8:	60bb      	str	r3, [r7, #8]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800c0fc:	2320      	movs	r3, #32
 800c0fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c100:	2302      	movs	r3, #2
 800c102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c108:	2300      	movs	r3, #0
 800c10a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c10c:	2302      	movs	r3, #2
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c110:	f107 0314 	add.w	r3, r7, #20
 800c114:	4619      	mov	r1, r3
 800c116:	4805      	ldr	r0, [pc, #20]	; (800c12c <HAL_TIM_MspPostInit+0xf4>)
 800c118:	f7f5 ff1a 	bl	8001f50 <HAL_GPIO_Init>
}
 800c11c:	bf00      	nop
 800c11e:	3728      	adds	r7, #40	; 0x28
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	40023800 	.word	0x40023800
 800c128:	40020000 	.word	0x40020000
 800c12c:	40020400 	.word	0x40020400
 800c130:	40000400 	.word	0x40000400

0800c134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08a      	sub	sp, #40	; 0x28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c13c:	f107 0314 	add.w	r3, r7, #20
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	605a      	str	r2, [r3, #4]
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	60da      	str	r2, [r3, #12]
 800c14a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a19      	ldr	r2, [pc, #100]	; (800c1b8 <HAL_UART_MspInit+0x84>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d12c      	bne.n	800c1b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c156:	2300      	movs	r3, #0
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	4b18      	ldr	r3, [pc, #96]	; (800c1bc <HAL_UART_MspInit+0x88>)
 800c15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15e:	4a17      	ldr	r2, [pc, #92]	; (800c1bc <HAL_UART_MspInit+0x88>)
 800c160:	f043 0310 	orr.w	r3, r3, #16
 800c164:	6453      	str	r3, [r2, #68]	; 0x44
 800c166:	4b15      	ldr	r3, [pc, #84]	; (800c1bc <HAL_UART_MspInit+0x88>)
 800c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16a:	f003 0310 	and.w	r3, r3, #16
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	4b11      	ldr	r3, [pc, #68]	; (800c1bc <HAL_UART_MspInit+0x88>)
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	4a10      	ldr	r2, [pc, #64]	; (800c1bc <HAL_UART_MspInit+0x88>)
 800c17c:	f043 0301 	orr.w	r3, r3, #1
 800c180:	6313      	str	r3, [r2, #48]	; 0x30
 800c182:	4b0e      	ldr	r3, [pc, #56]	; (800c1bc <HAL_UART_MspInit+0x88>)
 800c184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	60fb      	str	r3, [r7, #12]
 800c18c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c18e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c194:	2302      	movs	r3, #2
 800c196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c198:	2301      	movs	r3, #1
 800c19a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c19c:	2303      	movs	r3, #3
 800c19e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c1a0:	2307      	movs	r3, #7
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1a4:	f107 0314 	add.w	r3, r7, #20
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4805      	ldr	r0, [pc, #20]	; (800c1c0 <HAL_UART_MspInit+0x8c>)
 800c1ac:	f7f5 fed0 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c1b0:	bf00      	nop
 800c1b2:	3728      	adds	r7, #40	; 0x28
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	40011000 	.word	0x40011000
 800c1bc:	40023800 	.word	0x40023800
 800c1c0:	40020000 	.word	0x40020000

0800c1c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c1c8:	bf00      	nop
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c1d6:	e7fe      	b.n	800c1d6 <HardFault_Handler+0x4>

0800c1d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c1dc:	e7fe      	b.n	800c1dc <MemManage_Handler+0x4>

0800c1de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c1e2:	e7fe      	b.n	800c1e2 <BusFault_Handler+0x4>

0800c1e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c1e8:	e7fe      	b.n	800c1e8 <UsageFault_Handler+0x4>

0800c1ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c1ee:	bf00      	nop
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c1fc:	bf00      	nop
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c206:	b480      	push	{r7}
 800c208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c20a:	bf00      	nop
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c218:	f7f4 feb8 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c21c:	bf00      	nop
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c224:	4802      	ldr	r0, [pc, #8]	; (800c230 <TIM6_DAC_IRQHandler+0x10>)
 800c226:	f7f7 fba0 	bl	800396a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c22a:	bf00      	nop
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000b30 	.word	0x20000b30

0800c234 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c240:	2300      	movs	r3, #0
 800c242:	617b      	str	r3, [r7, #20]
 800c244:	e00a      	b.n	800c25c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c246:	f3af 8000 	nop.w
 800c24a:	4601      	mov	r1, r0
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	60ba      	str	r2, [r7, #8]
 800c252:	b2ca      	uxtb	r2, r1
 800c254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	3301      	adds	r3, #1
 800c25a:	617b      	str	r3, [r7, #20]
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	429a      	cmp	r2, r3
 800c262:	dbf0      	blt.n	800c246 <_read+0x12>
	}

return len;
 800c264:	687b      	ldr	r3, [r7, #4]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b086      	sub	sp, #24
 800c272:	af00      	add	r7, sp, #0
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
 800c27e:	e009      	b.n	800c294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	60ba      	str	r2, [r7, #8]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fb fde3 	bl	8007e54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	3301      	adds	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	429a      	cmp	r2, r3
 800c29a:	dbf1      	blt.n	800c280 <_write+0x12>
	}
	return len;
 800c29c:	687b      	ldr	r3, [r7, #4]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <_close>:

int _close(int file)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b083      	sub	sp, #12
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
	return -1;
 800c2ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b083      	sub	sp, #12
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c2ce:	605a      	str	r2, [r3, #4]
	return 0;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <_isatty>:

int _isatty(int file)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
	return 1;
 800c2e6:	2301      	movs	r3, #1
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
	return 0;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
	...

0800c310 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c318:	4b11      	ldr	r3, [pc, #68]	; (800c360 <_sbrk+0x50>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <_sbrk+0x16>
		heap_end = &end;
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <_sbrk+0x50>)
 800c322:	4a10      	ldr	r2, [pc, #64]	; (800c364 <_sbrk+0x54>)
 800c324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c326:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <_sbrk+0x50>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c32c:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <_sbrk+0x50>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4413      	add	r3, r2
 800c334:	466a      	mov	r2, sp
 800c336:	4293      	cmp	r3, r2
 800c338:	d907      	bls.n	800c34a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c33a:	f000 f875 	bl	800c428 <__errno>
 800c33e:	4602      	mov	r2, r0
 800c340:	230c      	movs	r3, #12
 800c342:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c344:	f04f 33ff 	mov.w	r3, #4294967295
 800c348:	e006      	b.n	800c358 <_sbrk+0x48>
	}

	heap_end += incr;
 800c34a:	4b05      	ldr	r3, [pc, #20]	; (800c360 <_sbrk+0x50>)
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4413      	add	r3, r2
 800c352:	4a03      	ldr	r2, [pc, #12]	; (800c360 <_sbrk+0x50>)
 800c354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c356:	68fb      	ldr	r3, [r7, #12]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20000194 	.word	0x20000194
 800c364:	20000f18 	.word	0x20000f18

0800c368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c368:	b480      	push	{r7}
 800c36a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c36c:	4b16      	ldr	r3, [pc, #88]	; (800c3c8 <SystemInit+0x60>)
 800c36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c372:	4a15      	ldr	r2, [pc, #84]	; (800c3c8 <SystemInit+0x60>)
 800c374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c37c:	4b13      	ldr	r3, [pc, #76]	; (800c3cc <SystemInit+0x64>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a12      	ldr	r2, [pc, #72]	; (800c3cc <SystemInit+0x64>)
 800c382:	f043 0301 	orr.w	r3, r3, #1
 800c386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c388:	4b10      	ldr	r3, [pc, #64]	; (800c3cc <SystemInit+0x64>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c38e:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <SystemInit+0x64>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a0e      	ldr	r2, [pc, #56]	; (800c3cc <SystemInit+0x64>)
 800c394:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c39c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c39e:	4b0b      	ldr	r3, [pc, #44]	; (800c3cc <SystemInit+0x64>)
 800c3a0:	4a0b      	ldr	r2, [pc, #44]	; (800c3d0 <SystemInit+0x68>)
 800c3a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c3a4:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <SystemInit+0x64>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a08      	ldr	r2, [pc, #32]	; (800c3cc <SystemInit+0x64>)
 800c3aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c3b0:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <SystemInit+0x64>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c3b6:	4b04      	ldr	r3, [pc, #16]	; (800c3c8 <SystemInit+0x60>)
 800c3b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c3bc:	609a      	str	r2, [r3, #8]
#endif
}
 800c3be:	bf00      	nop
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	e000ed00 	.word	0xe000ed00
 800c3cc:	40023800 	.word	0x40023800
 800c3d0:	24003010 	.word	0x24003010

0800c3d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c3d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c40c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c3d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c3da:	e003      	b.n	800c3e4 <LoopCopyDataInit>

0800c3dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c3dc:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c3de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c3e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c3e2:	3104      	adds	r1, #4

0800c3e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c3e4:	480b      	ldr	r0, [pc, #44]	; (800c414 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c3e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c3ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c3ec:	d3f6      	bcc.n	800c3dc <CopyDataInit>
  ldr  r2, =_sbss
 800c3ee:	4a0b      	ldr	r2, [pc, #44]	; (800c41c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c3f0:	e002      	b.n	800c3f8 <LoopFillZerobss>

0800c3f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c3f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c3f4:	f842 3b04 	str.w	r3, [r2], #4

0800c3f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c3f8:	4b09      	ldr	r3, [pc, #36]	; (800c420 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c3fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c3fc:	d3f9      	bcc.n	800c3f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c3fe:	f7ff ffb3 	bl	800c368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c402:	f000 f817 	bl	800c434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c406:	f7fc fd9b 	bl	8008f40 <main>
  bx  lr    
 800c40a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c40c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c410:	0800db4c 	.word	0x0800db4c
  ldr  r0, =_sdata
 800c414:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c418:	2000016c 	.word	0x2000016c
  ldr  r2, =_sbss
 800c41c:	2000016c 	.word	0x2000016c
  ldr  r3, = _ebss
 800c420:	20000f18 	.word	0x20000f18

0800c424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c424:	e7fe      	b.n	800c424 <ADC_IRQHandler>
	...

0800c428 <__errno>:
 800c428:	4b01      	ldr	r3, [pc, #4]	; (800c430 <__errno+0x8>)
 800c42a:	6818      	ldr	r0, [r3, #0]
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	20000104 	.word	0x20000104

0800c434 <__libc_init_array>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	4e0d      	ldr	r6, [pc, #52]	; (800c46c <__libc_init_array+0x38>)
 800c438:	4c0d      	ldr	r4, [pc, #52]	; (800c470 <__libc_init_array+0x3c>)
 800c43a:	1ba4      	subs	r4, r4, r6
 800c43c:	10a4      	asrs	r4, r4, #2
 800c43e:	2500      	movs	r5, #0
 800c440:	42a5      	cmp	r5, r4
 800c442:	d109      	bne.n	800c458 <__libc_init_array+0x24>
 800c444:	4e0b      	ldr	r6, [pc, #44]	; (800c474 <__libc_init_array+0x40>)
 800c446:	4c0c      	ldr	r4, [pc, #48]	; (800c478 <__libc_init_array+0x44>)
 800c448:	f001 f932 	bl	800d6b0 <_init>
 800c44c:	1ba4      	subs	r4, r4, r6
 800c44e:	10a4      	asrs	r4, r4, #2
 800c450:	2500      	movs	r5, #0
 800c452:	42a5      	cmp	r5, r4
 800c454:	d105      	bne.n	800c462 <__libc_init_array+0x2e>
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c45c:	4798      	blx	r3
 800c45e:	3501      	adds	r5, #1
 800c460:	e7ee      	b.n	800c440 <__libc_init_array+0xc>
 800c462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c466:	4798      	blx	r3
 800c468:	3501      	adds	r5, #1
 800c46a:	e7f2      	b.n	800c452 <__libc_init_array+0x1e>
 800c46c:	0800db44 	.word	0x0800db44
 800c470:	0800db44 	.word	0x0800db44
 800c474:	0800db44 	.word	0x0800db44
 800c478:	0800db48 	.word	0x0800db48

0800c47c <memset>:
 800c47c:	4402      	add	r2, r0
 800c47e:	4603      	mov	r3, r0
 800c480:	4293      	cmp	r3, r2
 800c482:	d100      	bne.n	800c486 <memset+0xa>
 800c484:	4770      	bx	lr
 800c486:	f803 1b01 	strb.w	r1, [r3], #1
 800c48a:	e7f9      	b.n	800c480 <memset+0x4>

0800c48c <iprintf>:
 800c48c:	b40f      	push	{r0, r1, r2, r3}
 800c48e:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <iprintf+0x2c>)
 800c490:	b513      	push	{r0, r1, r4, lr}
 800c492:	681c      	ldr	r4, [r3, #0]
 800c494:	b124      	cbz	r4, 800c4a0 <iprintf+0x14>
 800c496:	69a3      	ldr	r3, [r4, #24]
 800c498:	b913      	cbnz	r3, 800c4a0 <iprintf+0x14>
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fad8 	bl	800ca50 <__sinit>
 800c4a0:	ab05      	add	r3, sp, #20
 800c4a2:	9a04      	ldr	r2, [sp, #16]
 800c4a4:	68a1      	ldr	r1, [r4, #8]
 800c4a6:	9301      	str	r3, [sp, #4]
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fc99 	bl	800cde0 <_vfiprintf_r>
 800c4ae:	b002      	add	sp, #8
 800c4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b4:	b004      	add	sp, #16
 800c4b6:	4770      	bx	lr
 800c4b8:	20000104 	.word	0x20000104

0800c4bc <_puts_r>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	460e      	mov	r6, r1
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	b118      	cbz	r0, 800c4cc <_puts_r+0x10>
 800c4c4:	6983      	ldr	r3, [r0, #24]
 800c4c6:	b90b      	cbnz	r3, 800c4cc <_puts_r+0x10>
 800c4c8:	f000 fac2 	bl	800ca50 <__sinit>
 800c4cc:	69ab      	ldr	r3, [r5, #24]
 800c4ce:	68ac      	ldr	r4, [r5, #8]
 800c4d0:	b913      	cbnz	r3, 800c4d8 <_puts_r+0x1c>
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f000 fabc 	bl	800ca50 <__sinit>
 800c4d8:	4b23      	ldr	r3, [pc, #140]	; (800c568 <_puts_r+0xac>)
 800c4da:	429c      	cmp	r4, r3
 800c4dc:	d117      	bne.n	800c50e <_puts_r+0x52>
 800c4de:	686c      	ldr	r4, [r5, #4]
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	071b      	lsls	r3, r3, #28
 800c4e4:	d51d      	bpl.n	800c522 <_puts_r+0x66>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	b1db      	cbz	r3, 800c522 <_puts_r+0x66>
 800c4ea:	3e01      	subs	r6, #1
 800c4ec:	68a3      	ldr	r3, [r4, #8]
 800c4ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	60a3      	str	r3, [r4, #8]
 800c4f6:	b9e9      	cbnz	r1, 800c534 <_puts_r+0x78>
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	da2e      	bge.n	800c55a <_puts_r+0x9e>
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	210a      	movs	r1, #10
 800c500:	4628      	mov	r0, r5
 800c502:	f000 f8f5 	bl	800c6f0 <__swbuf_r>
 800c506:	3001      	adds	r0, #1
 800c508:	d011      	beq.n	800c52e <_puts_r+0x72>
 800c50a:	200a      	movs	r0, #10
 800c50c:	e011      	b.n	800c532 <_puts_r+0x76>
 800c50e:	4b17      	ldr	r3, [pc, #92]	; (800c56c <_puts_r+0xb0>)
 800c510:	429c      	cmp	r4, r3
 800c512:	d101      	bne.n	800c518 <_puts_r+0x5c>
 800c514:	68ac      	ldr	r4, [r5, #8]
 800c516:	e7e3      	b.n	800c4e0 <_puts_r+0x24>
 800c518:	4b15      	ldr	r3, [pc, #84]	; (800c570 <_puts_r+0xb4>)
 800c51a:	429c      	cmp	r4, r3
 800c51c:	bf08      	it	eq
 800c51e:	68ec      	ldreq	r4, [r5, #12]
 800c520:	e7de      	b.n	800c4e0 <_puts_r+0x24>
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f000 f935 	bl	800c794 <__swsetup_r>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0dd      	beq.n	800c4ea <_puts_r+0x2e>
 800c52e:	f04f 30ff 	mov.w	r0, #4294967295
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	2b00      	cmp	r3, #0
 800c536:	da04      	bge.n	800c542 <_puts_r+0x86>
 800c538:	69a2      	ldr	r2, [r4, #24]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	dc06      	bgt.n	800c54c <_puts_r+0x90>
 800c53e:	290a      	cmp	r1, #10
 800c540:	d004      	beq.n	800c54c <_puts_r+0x90>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	1c5a      	adds	r2, r3, #1
 800c546:	6022      	str	r2, [r4, #0]
 800c548:	7019      	strb	r1, [r3, #0]
 800c54a:	e7cf      	b.n	800c4ec <_puts_r+0x30>
 800c54c:	4622      	mov	r2, r4
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 f8ce 	bl	800c6f0 <__swbuf_r>
 800c554:	3001      	adds	r0, #1
 800c556:	d1c9      	bne.n	800c4ec <_puts_r+0x30>
 800c558:	e7e9      	b.n	800c52e <_puts_r+0x72>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	200a      	movs	r0, #10
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	6022      	str	r2, [r4, #0]
 800c562:	7018      	strb	r0, [r3, #0]
 800c564:	e7e5      	b.n	800c532 <_puts_r+0x76>
 800c566:	bf00      	nop
 800c568:	0800dac4 	.word	0x0800dac4
 800c56c:	0800dae4 	.word	0x0800dae4
 800c570:	0800daa4 	.word	0x0800daa4

0800c574 <puts>:
 800c574:	4b02      	ldr	r3, [pc, #8]	; (800c580 <puts+0xc>)
 800c576:	4601      	mov	r1, r0
 800c578:	6818      	ldr	r0, [r3, #0]
 800c57a:	f7ff bf9f 	b.w	800c4bc <_puts_r>
 800c57e:	bf00      	nop
 800c580:	20000104 	.word	0x20000104

0800c584 <setbuf>:
 800c584:	2900      	cmp	r1, #0
 800c586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58a:	bf0c      	ite	eq
 800c58c:	2202      	moveq	r2, #2
 800c58e:	2200      	movne	r2, #0
 800c590:	f000 b800 	b.w	800c594 <setvbuf>

0800c594 <setvbuf>:
 800c594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c598:	461d      	mov	r5, r3
 800c59a:	4b51      	ldr	r3, [pc, #324]	; (800c6e0 <setvbuf+0x14c>)
 800c59c:	681e      	ldr	r6, [r3, #0]
 800c59e:	4604      	mov	r4, r0
 800c5a0:	460f      	mov	r7, r1
 800c5a2:	4690      	mov	r8, r2
 800c5a4:	b126      	cbz	r6, 800c5b0 <setvbuf+0x1c>
 800c5a6:	69b3      	ldr	r3, [r6, #24]
 800c5a8:	b913      	cbnz	r3, 800c5b0 <setvbuf+0x1c>
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f000 fa50 	bl	800ca50 <__sinit>
 800c5b0:	4b4c      	ldr	r3, [pc, #304]	; (800c6e4 <setvbuf+0x150>)
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	d152      	bne.n	800c65c <setvbuf+0xc8>
 800c5b6:	6874      	ldr	r4, [r6, #4]
 800c5b8:	f1b8 0f02 	cmp.w	r8, #2
 800c5bc:	d006      	beq.n	800c5cc <setvbuf+0x38>
 800c5be:	f1b8 0f01 	cmp.w	r8, #1
 800c5c2:	f200 8089 	bhi.w	800c6d8 <setvbuf+0x144>
 800c5c6:	2d00      	cmp	r5, #0
 800c5c8:	f2c0 8086 	blt.w	800c6d8 <setvbuf+0x144>
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f000 f9d4 	bl	800c97c <_fflush_r>
 800c5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d6:	b141      	cbz	r1, 800c5ea <setvbuf+0x56>
 800c5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5dc:	4299      	cmp	r1, r3
 800c5de:	d002      	beq.n	800c5e6 <setvbuf+0x52>
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f000 fb2b 	bl	800cc3c <_free_r>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	61a3      	str	r3, [r4, #24]
 800c5ee:	6063      	str	r3, [r4, #4]
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	061b      	lsls	r3, r3, #24
 800c5f4:	d503      	bpl.n	800c5fe <setvbuf+0x6a>
 800c5f6:	6921      	ldr	r1, [r4, #16]
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f000 fb1f 	bl	800cc3c <_free_r>
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c604:	f023 0303 	bic.w	r3, r3, #3
 800c608:	f1b8 0f02 	cmp.w	r8, #2
 800c60c:	81a3      	strh	r3, [r4, #12]
 800c60e:	d05d      	beq.n	800c6cc <setvbuf+0x138>
 800c610:	ab01      	add	r3, sp, #4
 800c612:	466a      	mov	r2, sp
 800c614:	4621      	mov	r1, r4
 800c616:	4630      	mov	r0, r6
 800c618:	f000 faa4 	bl	800cb64 <__swhatbuf_r>
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	4318      	orrs	r0, r3
 800c620:	81a0      	strh	r0, [r4, #12]
 800c622:	bb2d      	cbnz	r5, 800c670 <setvbuf+0xdc>
 800c624:	9d00      	ldr	r5, [sp, #0]
 800c626:	4628      	mov	r0, r5
 800c628:	f000 fb00 	bl	800cc2c <malloc>
 800c62c:	4607      	mov	r7, r0
 800c62e:	2800      	cmp	r0, #0
 800c630:	d14e      	bne.n	800c6d0 <setvbuf+0x13c>
 800c632:	f8dd 9000 	ldr.w	r9, [sp]
 800c636:	45a9      	cmp	r9, r5
 800c638:	d13c      	bne.n	800c6b4 <setvbuf+0x120>
 800c63a:	f04f 30ff 	mov.w	r0, #4294967295
 800c63e:	89a3      	ldrh	r3, [r4, #12]
 800c640:	f043 0302 	orr.w	r3, r3, #2
 800c644:	81a3      	strh	r3, [r4, #12]
 800c646:	2300      	movs	r3, #0
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c64e:	6023      	str	r3, [r4, #0]
 800c650:	6123      	str	r3, [r4, #16]
 800c652:	2301      	movs	r3, #1
 800c654:	6163      	str	r3, [r4, #20]
 800c656:	b003      	add	sp, #12
 800c658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c65c:	4b22      	ldr	r3, [pc, #136]	; (800c6e8 <setvbuf+0x154>)
 800c65e:	429c      	cmp	r4, r3
 800c660:	d101      	bne.n	800c666 <setvbuf+0xd2>
 800c662:	68b4      	ldr	r4, [r6, #8]
 800c664:	e7a8      	b.n	800c5b8 <setvbuf+0x24>
 800c666:	4b21      	ldr	r3, [pc, #132]	; (800c6ec <setvbuf+0x158>)
 800c668:	429c      	cmp	r4, r3
 800c66a:	bf08      	it	eq
 800c66c:	68f4      	ldreq	r4, [r6, #12]
 800c66e:	e7a3      	b.n	800c5b8 <setvbuf+0x24>
 800c670:	2f00      	cmp	r7, #0
 800c672:	d0d8      	beq.n	800c626 <setvbuf+0x92>
 800c674:	69b3      	ldr	r3, [r6, #24]
 800c676:	b913      	cbnz	r3, 800c67e <setvbuf+0xea>
 800c678:	4630      	mov	r0, r6
 800c67a:	f000 f9e9 	bl	800ca50 <__sinit>
 800c67e:	f1b8 0f01 	cmp.w	r8, #1
 800c682:	bf08      	it	eq
 800c684:	89a3      	ldrheq	r3, [r4, #12]
 800c686:	6027      	str	r7, [r4, #0]
 800c688:	bf04      	itt	eq
 800c68a:	f043 0301 	orreq.w	r3, r3, #1
 800c68e:	81a3      	strheq	r3, [r4, #12]
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f013 0008 	ands.w	r0, r3, #8
 800c696:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800c69a:	d01b      	beq.n	800c6d4 <setvbuf+0x140>
 800c69c:	f013 0001 	ands.w	r0, r3, #1
 800c6a0:	bf18      	it	ne
 800c6a2:	426d      	negne	r5, r5
 800c6a4:	f04f 0300 	mov.w	r3, #0
 800c6a8:	bf1d      	ittte	ne
 800c6aa:	60a3      	strne	r3, [r4, #8]
 800c6ac:	61a5      	strne	r5, [r4, #24]
 800c6ae:	4618      	movne	r0, r3
 800c6b0:	60a5      	streq	r5, [r4, #8]
 800c6b2:	e7d0      	b.n	800c656 <setvbuf+0xc2>
 800c6b4:	4648      	mov	r0, r9
 800c6b6:	f000 fab9 	bl	800cc2c <malloc>
 800c6ba:	4607      	mov	r7, r0
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d0bc      	beq.n	800c63a <setvbuf+0xa6>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	464d      	mov	r5, r9
 800c6ca:	e7d3      	b.n	800c674 <setvbuf+0xe0>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e7b6      	b.n	800c63e <setvbuf+0xaa>
 800c6d0:	46a9      	mov	r9, r5
 800c6d2:	e7f5      	b.n	800c6c0 <setvbuf+0x12c>
 800c6d4:	60a0      	str	r0, [r4, #8]
 800c6d6:	e7be      	b.n	800c656 <setvbuf+0xc2>
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6dc:	e7bb      	b.n	800c656 <setvbuf+0xc2>
 800c6de:	bf00      	nop
 800c6e0:	20000104 	.word	0x20000104
 800c6e4:	0800dac4 	.word	0x0800dac4
 800c6e8:	0800dae4 	.word	0x0800dae4
 800c6ec:	0800daa4 	.word	0x0800daa4

0800c6f0 <__swbuf_r>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	460e      	mov	r6, r1
 800c6f4:	4614      	mov	r4, r2
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	b118      	cbz	r0, 800c702 <__swbuf_r+0x12>
 800c6fa:	6983      	ldr	r3, [r0, #24]
 800c6fc:	b90b      	cbnz	r3, 800c702 <__swbuf_r+0x12>
 800c6fe:	f000 f9a7 	bl	800ca50 <__sinit>
 800c702:	4b21      	ldr	r3, [pc, #132]	; (800c788 <__swbuf_r+0x98>)
 800c704:	429c      	cmp	r4, r3
 800c706:	d12a      	bne.n	800c75e <__swbuf_r+0x6e>
 800c708:	686c      	ldr	r4, [r5, #4]
 800c70a:	69a3      	ldr	r3, [r4, #24]
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	071a      	lsls	r2, r3, #28
 800c712:	d52e      	bpl.n	800c772 <__swbuf_r+0x82>
 800c714:	6923      	ldr	r3, [r4, #16]
 800c716:	b363      	cbz	r3, 800c772 <__swbuf_r+0x82>
 800c718:	6923      	ldr	r3, [r4, #16]
 800c71a:	6820      	ldr	r0, [r4, #0]
 800c71c:	1ac0      	subs	r0, r0, r3
 800c71e:	6963      	ldr	r3, [r4, #20]
 800c720:	b2f6      	uxtb	r6, r6
 800c722:	4283      	cmp	r3, r0
 800c724:	4637      	mov	r7, r6
 800c726:	dc04      	bgt.n	800c732 <__swbuf_r+0x42>
 800c728:	4621      	mov	r1, r4
 800c72a:	4628      	mov	r0, r5
 800c72c:	f000 f926 	bl	800c97c <_fflush_r>
 800c730:	bb28      	cbnz	r0, 800c77e <__swbuf_r+0x8e>
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	3b01      	subs	r3, #1
 800c736:	60a3      	str	r3, [r4, #8]
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	6022      	str	r2, [r4, #0]
 800c73e:	701e      	strb	r6, [r3, #0]
 800c740:	6963      	ldr	r3, [r4, #20]
 800c742:	3001      	adds	r0, #1
 800c744:	4283      	cmp	r3, r0
 800c746:	d004      	beq.n	800c752 <__swbuf_r+0x62>
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	07db      	lsls	r3, r3, #31
 800c74c:	d519      	bpl.n	800c782 <__swbuf_r+0x92>
 800c74e:	2e0a      	cmp	r6, #10
 800c750:	d117      	bne.n	800c782 <__swbuf_r+0x92>
 800c752:	4621      	mov	r1, r4
 800c754:	4628      	mov	r0, r5
 800c756:	f000 f911 	bl	800c97c <_fflush_r>
 800c75a:	b190      	cbz	r0, 800c782 <__swbuf_r+0x92>
 800c75c:	e00f      	b.n	800c77e <__swbuf_r+0x8e>
 800c75e:	4b0b      	ldr	r3, [pc, #44]	; (800c78c <__swbuf_r+0x9c>)
 800c760:	429c      	cmp	r4, r3
 800c762:	d101      	bne.n	800c768 <__swbuf_r+0x78>
 800c764:	68ac      	ldr	r4, [r5, #8]
 800c766:	e7d0      	b.n	800c70a <__swbuf_r+0x1a>
 800c768:	4b09      	ldr	r3, [pc, #36]	; (800c790 <__swbuf_r+0xa0>)
 800c76a:	429c      	cmp	r4, r3
 800c76c:	bf08      	it	eq
 800c76e:	68ec      	ldreq	r4, [r5, #12]
 800c770:	e7cb      	b.n	800c70a <__swbuf_r+0x1a>
 800c772:	4621      	mov	r1, r4
 800c774:	4628      	mov	r0, r5
 800c776:	f000 f80d 	bl	800c794 <__swsetup_r>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d0cc      	beq.n	800c718 <__swbuf_r+0x28>
 800c77e:	f04f 37ff 	mov.w	r7, #4294967295
 800c782:	4638      	mov	r0, r7
 800c784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c786:	bf00      	nop
 800c788:	0800dac4 	.word	0x0800dac4
 800c78c:	0800dae4 	.word	0x0800dae4
 800c790:	0800daa4 	.word	0x0800daa4

0800c794 <__swsetup_r>:
 800c794:	4b32      	ldr	r3, [pc, #200]	; (800c860 <__swsetup_r+0xcc>)
 800c796:	b570      	push	{r4, r5, r6, lr}
 800c798:	681d      	ldr	r5, [r3, #0]
 800c79a:	4606      	mov	r6, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	b125      	cbz	r5, 800c7aa <__swsetup_r+0x16>
 800c7a0:	69ab      	ldr	r3, [r5, #24]
 800c7a2:	b913      	cbnz	r3, 800c7aa <__swsetup_r+0x16>
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 f953 	bl	800ca50 <__sinit>
 800c7aa:	4b2e      	ldr	r3, [pc, #184]	; (800c864 <__swsetup_r+0xd0>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	d10f      	bne.n	800c7d0 <__swsetup_r+0x3c>
 800c7b0:	686c      	ldr	r4, [r5, #4]
 800c7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	0715      	lsls	r5, r2, #28
 800c7ba:	d42c      	bmi.n	800c816 <__swsetup_r+0x82>
 800c7bc:	06d0      	lsls	r0, r2, #27
 800c7be:	d411      	bmi.n	800c7e4 <__swsetup_r+0x50>
 800c7c0:	2209      	movs	r2, #9
 800c7c2:	6032      	str	r2, [r6, #0]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ce:	e03e      	b.n	800c84e <__swsetup_r+0xba>
 800c7d0:	4b25      	ldr	r3, [pc, #148]	; (800c868 <__swsetup_r+0xd4>)
 800c7d2:	429c      	cmp	r4, r3
 800c7d4:	d101      	bne.n	800c7da <__swsetup_r+0x46>
 800c7d6:	68ac      	ldr	r4, [r5, #8]
 800c7d8:	e7eb      	b.n	800c7b2 <__swsetup_r+0x1e>
 800c7da:	4b24      	ldr	r3, [pc, #144]	; (800c86c <__swsetup_r+0xd8>)
 800c7dc:	429c      	cmp	r4, r3
 800c7de:	bf08      	it	eq
 800c7e0:	68ec      	ldreq	r4, [r5, #12]
 800c7e2:	e7e6      	b.n	800c7b2 <__swsetup_r+0x1e>
 800c7e4:	0751      	lsls	r1, r2, #29
 800c7e6:	d512      	bpl.n	800c80e <__swsetup_r+0x7a>
 800c7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7ea:	b141      	cbz	r1, 800c7fe <__swsetup_r+0x6a>
 800c7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	d002      	beq.n	800c7fa <__swsetup_r+0x66>
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f000 fa21 	bl	800cc3c <_free_r>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c804:	81a3      	strh	r3, [r4, #12]
 800c806:	2300      	movs	r3, #0
 800c808:	6063      	str	r3, [r4, #4]
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f043 0308 	orr.w	r3, r3, #8
 800c814:	81a3      	strh	r3, [r4, #12]
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	b94b      	cbnz	r3, 800c82e <__swsetup_r+0x9a>
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c824:	d003      	beq.n	800c82e <__swsetup_r+0x9a>
 800c826:	4621      	mov	r1, r4
 800c828:	4630      	mov	r0, r6
 800c82a:	f000 f9bf 	bl	800cbac <__smakebuf_r>
 800c82e:	89a2      	ldrh	r2, [r4, #12]
 800c830:	f012 0301 	ands.w	r3, r2, #1
 800c834:	d00c      	beq.n	800c850 <__swsetup_r+0xbc>
 800c836:	2300      	movs	r3, #0
 800c838:	60a3      	str	r3, [r4, #8]
 800c83a:	6963      	ldr	r3, [r4, #20]
 800c83c:	425b      	negs	r3, r3
 800c83e:	61a3      	str	r3, [r4, #24]
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	b953      	cbnz	r3, 800c85a <__swsetup_r+0xc6>
 800c844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c848:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c84c:	d1ba      	bne.n	800c7c4 <__swsetup_r+0x30>
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	0792      	lsls	r2, r2, #30
 800c852:	bf58      	it	pl
 800c854:	6963      	ldrpl	r3, [r4, #20]
 800c856:	60a3      	str	r3, [r4, #8]
 800c858:	e7f2      	b.n	800c840 <__swsetup_r+0xac>
 800c85a:	2000      	movs	r0, #0
 800c85c:	e7f7      	b.n	800c84e <__swsetup_r+0xba>
 800c85e:	bf00      	nop
 800c860:	20000104 	.word	0x20000104
 800c864:	0800dac4 	.word	0x0800dac4
 800c868:	0800dae4 	.word	0x0800dae4
 800c86c:	0800daa4 	.word	0x0800daa4

0800c870 <__sflush_r>:
 800c870:	898a      	ldrh	r2, [r1, #12]
 800c872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c876:	4605      	mov	r5, r0
 800c878:	0710      	lsls	r0, r2, #28
 800c87a:	460c      	mov	r4, r1
 800c87c:	d458      	bmi.n	800c930 <__sflush_r+0xc0>
 800c87e:	684b      	ldr	r3, [r1, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	dc05      	bgt.n	800c890 <__sflush_r+0x20>
 800c884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	dc02      	bgt.n	800c890 <__sflush_r+0x20>
 800c88a:	2000      	movs	r0, #0
 800c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c892:	2e00      	cmp	r6, #0
 800c894:	d0f9      	beq.n	800c88a <__sflush_r+0x1a>
 800c896:	2300      	movs	r3, #0
 800c898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c89c:	682f      	ldr	r7, [r5, #0]
 800c89e:	6a21      	ldr	r1, [r4, #32]
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	d032      	beq.n	800c90a <__sflush_r+0x9a>
 800c8a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	075a      	lsls	r2, r3, #29
 800c8aa:	d505      	bpl.n	800c8b8 <__sflush_r+0x48>
 800c8ac:	6863      	ldr	r3, [r4, #4]
 800c8ae:	1ac0      	subs	r0, r0, r3
 800c8b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8b2:	b10b      	cbz	r3, 800c8b8 <__sflush_r+0x48>
 800c8b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8b6:	1ac0      	subs	r0, r0, r3
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8be:	6a21      	ldr	r1, [r4, #32]
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b0      	blx	r6
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	d106      	bne.n	800c8d8 <__sflush_r+0x68>
 800c8ca:	6829      	ldr	r1, [r5, #0]
 800c8cc:	291d      	cmp	r1, #29
 800c8ce:	d848      	bhi.n	800c962 <__sflush_r+0xf2>
 800c8d0:	4a29      	ldr	r2, [pc, #164]	; (800c978 <__sflush_r+0x108>)
 800c8d2:	40ca      	lsrs	r2, r1
 800c8d4:	07d6      	lsls	r6, r2, #31
 800c8d6:	d544      	bpl.n	800c962 <__sflush_r+0xf2>
 800c8d8:	2200      	movs	r2, #0
 800c8da:	6062      	str	r2, [r4, #4]
 800c8dc:	04d9      	lsls	r1, r3, #19
 800c8de:	6922      	ldr	r2, [r4, #16]
 800c8e0:	6022      	str	r2, [r4, #0]
 800c8e2:	d504      	bpl.n	800c8ee <__sflush_r+0x7e>
 800c8e4:	1c42      	adds	r2, r0, #1
 800c8e6:	d101      	bne.n	800c8ec <__sflush_r+0x7c>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b903      	cbnz	r3, 800c8ee <__sflush_r+0x7e>
 800c8ec:	6560      	str	r0, [r4, #84]	; 0x54
 800c8ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8f0:	602f      	str	r7, [r5, #0]
 800c8f2:	2900      	cmp	r1, #0
 800c8f4:	d0c9      	beq.n	800c88a <__sflush_r+0x1a>
 800c8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8fa:	4299      	cmp	r1, r3
 800c8fc:	d002      	beq.n	800c904 <__sflush_r+0x94>
 800c8fe:	4628      	mov	r0, r5
 800c900:	f000 f99c 	bl	800cc3c <_free_r>
 800c904:	2000      	movs	r0, #0
 800c906:	6360      	str	r0, [r4, #52]	; 0x34
 800c908:	e7c0      	b.n	800c88c <__sflush_r+0x1c>
 800c90a:	2301      	movs	r3, #1
 800c90c:	4628      	mov	r0, r5
 800c90e:	47b0      	blx	r6
 800c910:	1c41      	adds	r1, r0, #1
 800c912:	d1c8      	bne.n	800c8a6 <__sflush_r+0x36>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0c5      	beq.n	800c8a6 <__sflush_r+0x36>
 800c91a:	2b1d      	cmp	r3, #29
 800c91c:	d001      	beq.n	800c922 <__sflush_r+0xb2>
 800c91e:	2b16      	cmp	r3, #22
 800c920:	d101      	bne.n	800c926 <__sflush_r+0xb6>
 800c922:	602f      	str	r7, [r5, #0]
 800c924:	e7b1      	b.n	800c88a <__sflush_r+0x1a>
 800c926:	89a3      	ldrh	r3, [r4, #12]
 800c928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c92c:	81a3      	strh	r3, [r4, #12]
 800c92e:	e7ad      	b.n	800c88c <__sflush_r+0x1c>
 800c930:	690f      	ldr	r7, [r1, #16]
 800c932:	2f00      	cmp	r7, #0
 800c934:	d0a9      	beq.n	800c88a <__sflush_r+0x1a>
 800c936:	0793      	lsls	r3, r2, #30
 800c938:	680e      	ldr	r6, [r1, #0]
 800c93a:	bf08      	it	eq
 800c93c:	694b      	ldreq	r3, [r1, #20]
 800c93e:	600f      	str	r7, [r1, #0]
 800c940:	bf18      	it	ne
 800c942:	2300      	movne	r3, #0
 800c944:	eba6 0807 	sub.w	r8, r6, r7
 800c948:	608b      	str	r3, [r1, #8]
 800c94a:	f1b8 0f00 	cmp.w	r8, #0
 800c94e:	dd9c      	ble.n	800c88a <__sflush_r+0x1a>
 800c950:	4643      	mov	r3, r8
 800c952:	463a      	mov	r2, r7
 800c954:	6a21      	ldr	r1, [r4, #32]
 800c956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c958:	4628      	mov	r0, r5
 800c95a:	47b0      	blx	r6
 800c95c:	2800      	cmp	r0, #0
 800c95e:	dc06      	bgt.n	800c96e <__sflush_r+0xfe>
 800c960:	89a3      	ldrh	r3, [r4, #12]
 800c962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c966:	81a3      	strh	r3, [r4, #12]
 800c968:	f04f 30ff 	mov.w	r0, #4294967295
 800c96c:	e78e      	b.n	800c88c <__sflush_r+0x1c>
 800c96e:	4407      	add	r7, r0
 800c970:	eba8 0800 	sub.w	r8, r8, r0
 800c974:	e7e9      	b.n	800c94a <__sflush_r+0xda>
 800c976:	bf00      	nop
 800c978:	20400001 	.word	0x20400001

0800c97c <_fflush_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	690b      	ldr	r3, [r1, #16]
 800c980:	4605      	mov	r5, r0
 800c982:	460c      	mov	r4, r1
 800c984:	b1db      	cbz	r3, 800c9be <_fflush_r+0x42>
 800c986:	b118      	cbz	r0, 800c990 <_fflush_r+0x14>
 800c988:	6983      	ldr	r3, [r0, #24]
 800c98a:	b90b      	cbnz	r3, 800c990 <_fflush_r+0x14>
 800c98c:	f000 f860 	bl	800ca50 <__sinit>
 800c990:	4b0c      	ldr	r3, [pc, #48]	; (800c9c4 <_fflush_r+0x48>)
 800c992:	429c      	cmp	r4, r3
 800c994:	d109      	bne.n	800c9aa <_fflush_r+0x2e>
 800c996:	686c      	ldr	r4, [r5, #4]
 800c998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99c:	b17b      	cbz	r3, 800c9be <_fflush_r+0x42>
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a6:	f7ff bf63 	b.w	800c870 <__sflush_r>
 800c9aa:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <_fflush_r+0x4c>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	d101      	bne.n	800c9b4 <_fflush_r+0x38>
 800c9b0:	68ac      	ldr	r4, [r5, #8]
 800c9b2:	e7f1      	b.n	800c998 <_fflush_r+0x1c>
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <_fflush_r+0x50>)
 800c9b6:	429c      	cmp	r4, r3
 800c9b8:	bf08      	it	eq
 800c9ba:	68ec      	ldreq	r4, [r5, #12]
 800c9bc:	e7ec      	b.n	800c998 <_fflush_r+0x1c>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	bd38      	pop	{r3, r4, r5, pc}
 800c9c2:	bf00      	nop
 800c9c4:	0800dac4 	.word	0x0800dac4
 800c9c8:	0800dae4 	.word	0x0800dae4
 800c9cc:	0800daa4 	.word	0x0800daa4

0800c9d0 <std>:
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c9da:	6083      	str	r3, [r0, #8]
 800c9dc:	8181      	strh	r1, [r0, #12]
 800c9de:	6643      	str	r3, [r0, #100]	; 0x64
 800c9e0:	81c2      	strh	r2, [r0, #14]
 800c9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9e6:	6183      	str	r3, [r0, #24]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	2208      	movs	r2, #8
 800c9ec:	305c      	adds	r0, #92	; 0x5c
 800c9ee:	f7ff fd45 	bl	800c47c <memset>
 800c9f2:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <std+0x38>)
 800c9f4:	6263      	str	r3, [r4, #36]	; 0x24
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <std+0x3c>)
 800c9f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9fa:	4b05      	ldr	r3, [pc, #20]	; (800ca10 <std+0x40>)
 800c9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9fe:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <std+0x44>)
 800ca00:	6224      	str	r4, [r4, #32]
 800ca02:	6323      	str	r3, [r4, #48]	; 0x30
 800ca04:	bd10      	pop	{r4, pc}
 800ca06:	bf00      	nop
 800ca08:	0800d33d 	.word	0x0800d33d
 800ca0c:	0800d35f 	.word	0x0800d35f
 800ca10:	0800d397 	.word	0x0800d397
 800ca14:	0800d3bb 	.word	0x0800d3bb

0800ca18 <_cleanup_r>:
 800ca18:	4901      	ldr	r1, [pc, #4]	; (800ca20 <_cleanup_r+0x8>)
 800ca1a:	f000 b885 	b.w	800cb28 <_fwalk_reent>
 800ca1e:	bf00      	nop
 800ca20:	0800c97d 	.word	0x0800c97d

0800ca24 <__sfmoreglue>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	1e4a      	subs	r2, r1, #1
 800ca28:	2568      	movs	r5, #104	; 0x68
 800ca2a:	4355      	muls	r5, r2
 800ca2c:	460e      	mov	r6, r1
 800ca2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca32:	f000 f951 	bl	800ccd8 <_malloc_r>
 800ca36:	4604      	mov	r4, r0
 800ca38:	b140      	cbz	r0, 800ca4c <__sfmoreglue+0x28>
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	e9c0 1600 	strd	r1, r6, [r0]
 800ca40:	300c      	adds	r0, #12
 800ca42:	60a0      	str	r0, [r4, #8]
 800ca44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca48:	f7ff fd18 	bl	800c47c <memset>
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}

0800ca50 <__sinit>:
 800ca50:	6983      	ldr	r3, [r0, #24]
 800ca52:	b510      	push	{r4, lr}
 800ca54:	4604      	mov	r4, r0
 800ca56:	bb33      	cbnz	r3, 800caa6 <__sinit+0x56>
 800ca58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ca5c:	6503      	str	r3, [r0, #80]	; 0x50
 800ca5e:	4b12      	ldr	r3, [pc, #72]	; (800caa8 <__sinit+0x58>)
 800ca60:	4a12      	ldr	r2, [pc, #72]	; (800caac <__sinit+0x5c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6282      	str	r2, [r0, #40]	; 0x28
 800ca66:	4298      	cmp	r0, r3
 800ca68:	bf04      	itt	eq
 800ca6a:	2301      	moveq	r3, #1
 800ca6c:	6183      	streq	r3, [r0, #24]
 800ca6e:	f000 f81f 	bl	800cab0 <__sfp>
 800ca72:	6060      	str	r0, [r4, #4]
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 f81b 	bl	800cab0 <__sfp>
 800ca7a:	60a0      	str	r0, [r4, #8]
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 f817 	bl	800cab0 <__sfp>
 800ca82:	2200      	movs	r2, #0
 800ca84:	60e0      	str	r0, [r4, #12]
 800ca86:	2104      	movs	r1, #4
 800ca88:	6860      	ldr	r0, [r4, #4]
 800ca8a:	f7ff ffa1 	bl	800c9d0 <std>
 800ca8e:	2201      	movs	r2, #1
 800ca90:	2109      	movs	r1, #9
 800ca92:	68a0      	ldr	r0, [r4, #8]
 800ca94:	f7ff ff9c 	bl	800c9d0 <std>
 800ca98:	2202      	movs	r2, #2
 800ca9a:	2112      	movs	r1, #18
 800ca9c:	68e0      	ldr	r0, [r4, #12]
 800ca9e:	f7ff ff97 	bl	800c9d0 <std>
 800caa2:	2301      	movs	r3, #1
 800caa4:	61a3      	str	r3, [r4, #24]
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	0800daa0 	.word	0x0800daa0
 800caac:	0800ca19 	.word	0x0800ca19

0800cab0 <__sfp>:
 800cab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab2:	4b1b      	ldr	r3, [pc, #108]	; (800cb20 <__sfp+0x70>)
 800cab4:	681e      	ldr	r6, [r3, #0]
 800cab6:	69b3      	ldr	r3, [r6, #24]
 800cab8:	4607      	mov	r7, r0
 800caba:	b913      	cbnz	r3, 800cac2 <__sfp+0x12>
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff ffc7 	bl	800ca50 <__sinit>
 800cac2:	3648      	adds	r6, #72	; 0x48
 800cac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cac8:	3b01      	subs	r3, #1
 800caca:	d503      	bpl.n	800cad4 <__sfp+0x24>
 800cacc:	6833      	ldr	r3, [r6, #0]
 800cace:	b133      	cbz	r3, 800cade <__sfp+0x2e>
 800cad0:	6836      	ldr	r6, [r6, #0]
 800cad2:	e7f7      	b.n	800cac4 <__sfp+0x14>
 800cad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cad8:	b16d      	cbz	r5, 800caf6 <__sfp+0x46>
 800cada:	3468      	adds	r4, #104	; 0x68
 800cadc:	e7f4      	b.n	800cac8 <__sfp+0x18>
 800cade:	2104      	movs	r1, #4
 800cae0:	4638      	mov	r0, r7
 800cae2:	f7ff ff9f 	bl	800ca24 <__sfmoreglue>
 800cae6:	6030      	str	r0, [r6, #0]
 800cae8:	2800      	cmp	r0, #0
 800caea:	d1f1      	bne.n	800cad0 <__sfp+0x20>
 800caec:	230c      	movs	r3, #12
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	4604      	mov	r4, r0
 800caf2:	4620      	mov	r0, r4
 800caf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <__sfp+0x74>)
 800caf8:	6665      	str	r5, [r4, #100]	; 0x64
 800cafa:	e9c4 5500 	strd	r5, r5, [r4]
 800cafe:	60a5      	str	r5, [r4, #8]
 800cb00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cb04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb10:	f7ff fcb4 	bl	800c47c <memset>
 800cb14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb1c:	e7e9      	b.n	800caf2 <__sfp+0x42>
 800cb1e:	bf00      	nop
 800cb20:	0800daa0 	.word	0x0800daa0
 800cb24:	ffff0001 	.word	0xffff0001

0800cb28 <_fwalk_reent>:
 800cb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	4689      	mov	r9, r1
 800cb30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb34:	2600      	movs	r6, #0
 800cb36:	b914      	cbnz	r4, 800cb3e <_fwalk_reent+0x16>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cb42:	3f01      	subs	r7, #1
 800cb44:	d501      	bpl.n	800cb4a <_fwalk_reent+0x22>
 800cb46:	6824      	ldr	r4, [r4, #0]
 800cb48:	e7f5      	b.n	800cb36 <_fwalk_reent+0xe>
 800cb4a:	89ab      	ldrh	r3, [r5, #12]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d907      	bls.n	800cb60 <_fwalk_reent+0x38>
 800cb50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb54:	3301      	adds	r3, #1
 800cb56:	d003      	beq.n	800cb60 <_fwalk_reent+0x38>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4640      	mov	r0, r8
 800cb5c:	47c8      	blx	r9
 800cb5e:	4306      	orrs	r6, r0
 800cb60:	3568      	adds	r5, #104	; 0x68
 800cb62:	e7ee      	b.n	800cb42 <_fwalk_reent+0x1a>

0800cb64 <__swhatbuf_r>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	460e      	mov	r6, r1
 800cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	b096      	sub	sp, #88	; 0x58
 800cb70:	4614      	mov	r4, r2
 800cb72:	461d      	mov	r5, r3
 800cb74:	da07      	bge.n	800cb86 <__swhatbuf_r+0x22>
 800cb76:	2300      	movs	r3, #0
 800cb78:	602b      	str	r3, [r5, #0]
 800cb7a:	89b3      	ldrh	r3, [r6, #12]
 800cb7c:	061a      	lsls	r2, r3, #24
 800cb7e:	d410      	bmi.n	800cba2 <__swhatbuf_r+0x3e>
 800cb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb84:	e00e      	b.n	800cba4 <__swhatbuf_r+0x40>
 800cb86:	466a      	mov	r2, sp
 800cb88:	f000 fc3e 	bl	800d408 <_fstat_r>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	dbf2      	blt.n	800cb76 <__swhatbuf_r+0x12>
 800cb90:	9a01      	ldr	r2, [sp, #4]
 800cb92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb9a:	425a      	negs	r2, r3
 800cb9c:	415a      	adcs	r2, r3
 800cb9e:	602a      	str	r2, [r5, #0]
 800cba0:	e7ee      	b.n	800cb80 <__swhatbuf_r+0x1c>
 800cba2:	2340      	movs	r3, #64	; 0x40
 800cba4:	2000      	movs	r0, #0
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	b016      	add	sp, #88	; 0x58
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}

0800cbac <__smakebuf_r>:
 800cbac:	898b      	ldrh	r3, [r1, #12]
 800cbae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbb0:	079d      	lsls	r5, r3, #30
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	d507      	bpl.n	800cbc8 <__smakebuf_r+0x1c>
 800cbb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	6123      	str	r3, [r4, #16]
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	6163      	str	r3, [r4, #20]
 800cbc4:	b002      	add	sp, #8
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	ab01      	add	r3, sp, #4
 800cbca:	466a      	mov	r2, sp
 800cbcc:	f7ff ffca 	bl	800cb64 <__swhatbuf_r>
 800cbd0:	9900      	ldr	r1, [sp, #0]
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f000 f87f 	bl	800ccd8 <_malloc_r>
 800cbda:	b948      	cbnz	r0, 800cbf0 <__smakebuf_r+0x44>
 800cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe0:	059a      	lsls	r2, r3, #22
 800cbe2:	d4ef      	bmi.n	800cbc4 <__smakebuf_r+0x18>
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	f043 0302 	orr.w	r3, r3, #2
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	e7e3      	b.n	800cbb8 <__smakebuf_r+0xc>
 800cbf0:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <__smakebuf_r+0x7c>)
 800cbf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	6020      	str	r0, [r4, #0]
 800cbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	9b00      	ldr	r3, [sp, #0]
 800cc00:	6163      	str	r3, [r4, #20]
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	6120      	str	r0, [r4, #16]
 800cc06:	b15b      	cbz	r3, 800cc20 <__smakebuf_r+0x74>
 800cc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f000 fc0d 	bl	800d42c <_isatty_r>
 800cc12:	b128      	cbz	r0, 800cc20 <__smakebuf_r+0x74>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f023 0303 	bic.w	r3, r3, #3
 800cc1a:	f043 0301 	orr.w	r3, r3, #1
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	431d      	orrs	r5, r3
 800cc24:	81a5      	strh	r5, [r4, #12]
 800cc26:	e7cd      	b.n	800cbc4 <__smakebuf_r+0x18>
 800cc28:	0800ca19 	.word	0x0800ca19

0800cc2c <malloc>:
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <malloc+0xc>)
 800cc2e:	4601      	mov	r1, r0
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	f000 b851 	b.w	800ccd8 <_malloc_r>
 800cc36:	bf00      	nop
 800cc38:	20000104 	.word	0x20000104

0800cc3c <_free_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4605      	mov	r5, r0
 800cc40:	2900      	cmp	r1, #0
 800cc42:	d045      	beq.n	800ccd0 <_free_r+0x94>
 800cc44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc48:	1f0c      	subs	r4, r1, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bfb8      	it	lt
 800cc4e:	18e4      	addlt	r4, r4, r3
 800cc50:	f000 fc0e 	bl	800d470 <__malloc_lock>
 800cc54:	4a1f      	ldr	r2, [pc, #124]	; (800ccd4 <_free_r+0x98>)
 800cc56:	6813      	ldr	r3, [r2, #0]
 800cc58:	4610      	mov	r0, r2
 800cc5a:	b933      	cbnz	r3, 800cc6a <_free_r+0x2e>
 800cc5c:	6063      	str	r3, [r4, #4]
 800cc5e:	6014      	str	r4, [r2, #0]
 800cc60:	4628      	mov	r0, r5
 800cc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc66:	f000 bc04 	b.w	800d472 <__malloc_unlock>
 800cc6a:	42a3      	cmp	r3, r4
 800cc6c:	d90c      	bls.n	800cc88 <_free_r+0x4c>
 800cc6e:	6821      	ldr	r1, [r4, #0]
 800cc70:	1862      	adds	r2, r4, r1
 800cc72:	4293      	cmp	r3, r2
 800cc74:	bf04      	itt	eq
 800cc76:	681a      	ldreq	r2, [r3, #0]
 800cc78:	685b      	ldreq	r3, [r3, #4]
 800cc7a:	6063      	str	r3, [r4, #4]
 800cc7c:	bf04      	itt	eq
 800cc7e:	1852      	addeq	r2, r2, r1
 800cc80:	6022      	streq	r2, [r4, #0]
 800cc82:	6004      	str	r4, [r0, #0]
 800cc84:	e7ec      	b.n	800cc60 <_free_r+0x24>
 800cc86:	4613      	mov	r3, r2
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	b10a      	cbz	r2, 800cc90 <_free_r+0x54>
 800cc8c:	42a2      	cmp	r2, r4
 800cc8e:	d9fa      	bls.n	800cc86 <_free_r+0x4a>
 800cc90:	6819      	ldr	r1, [r3, #0]
 800cc92:	1858      	adds	r0, r3, r1
 800cc94:	42a0      	cmp	r0, r4
 800cc96:	d10b      	bne.n	800ccb0 <_free_r+0x74>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	4401      	add	r1, r0
 800cc9c:	1858      	adds	r0, r3, r1
 800cc9e:	4282      	cmp	r2, r0
 800cca0:	6019      	str	r1, [r3, #0]
 800cca2:	d1dd      	bne.n	800cc60 <_free_r+0x24>
 800cca4:	6810      	ldr	r0, [r2, #0]
 800cca6:	6852      	ldr	r2, [r2, #4]
 800cca8:	605a      	str	r2, [r3, #4]
 800ccaa:	4401      	add	r1, r0
 800ccac:	6019      	str	r1, [r3, #0]
 800ccae:	e7d7      	b.n	800cc60 <_free_r+0x24>
 800ccb0:	d902      	bls.n	800ccb8 <_free_r+0x7c>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	e7d3      	b.n	800cc60 <_free_r+0x24>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	1821      	adds	r1, r4, r0
 800ccbc:	428a      	cmp	r2, r1
 800ccbe:	bf04      	itt	eq
 800ccc0:	6811      	ldreq	r1, [r2, #0]
 800ccc2:	6852      	ldreq	r2, [r2, #4]
 800ccc4:	6062      	str	r2, [r4, #4]
 800ccc6:	bf04      	itt	eq
 800ccc8:	1809      	addeq	r1, r1, r0
 800ccca:	6021      	streq	r1, [r4, #0]
 800cccc:	605c      	str	r4, [r3, #4]
 800ccce:	e7c7      	b.n	800cc60 <_free_r+0x24>
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20000198 	.word	0x20000198

0800ccd8 <_malloc_r>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	1ccd      	adds	r5, r1, #3
 800ccdc:	f025 0503 	bic.w	r5, r5, #3
 800cce0:	3508      	adds	r5, #8
 800cce2:	2d0c      	cmp	r5, #12
 800cce4:	bf38      	it	cc
 800cce6:	250c      	movcc	r5, #12
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	4606      	mov	r6, r0
 800ccec:	db01      	blt.n	800ccf2 <_malloc_r+0x1a>
 800ccee:	42a9      	cmp	r1, r5
 800ccf0:	d903      	bls.n	800ccfa <_malloc_r+0x22>
 800ccf2:	230c      	movs	r3, #12
 800ccf4:	6033      	str	r3, [r6, #0]
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
 800ccfa:	f000 fbb9 	bl	800d470 <__malloc_lock>
 800ccfe:	4a21      	ldr	r2, [pc, #132]	; (800cd84 <_malloc_r+0xac>)
 800cd00:	6814      	ldr	r4, [r2, #0]
 800cd02:	4621      	mov	r1, r4
 800cd04:	b991      	cbnz	r1, 800cd2c <_malloc_r+0x54>
 800cd06:	4c20      	ldr	r4, [pc, #128]	; (800cd88 <_malloc_r+0xb0>)
 800cd08:	6823      	ldr	r3, [r4, #0]
 800cd0a:	b91b      	cbnz	r3, 800cd14 <_malloc_r+0x3c>
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f000 fb05 	bl	800d31c <_sbrk_r>
 800cd12:	6020      	str	r0, [r4, #0]
 800cd14:	4629      	mov	r1, r5
 800cd16:	4630      	mov	r0, r6
 800cd18:	f000 fb00 	bl	800d31c <_sbrk_r>
 800cd1c:	1c43      	adds	r3, r0, #1
 800cd1e:	d124      	bne.n	800cd6a <_malloc_r+0x92>
 800cd20:	230c      	movs	r3, #12
 800cd22:	6033      	str	r3, [r6, #0]
 800cd24:	4630      	mov	r0, r6
 800cd26:	f000 fba4 	bl	800d472 <__malloc_unlock>
 800cd2a:	e7e4      	b.n	800ccf6 <_malloc_r+0x1e>
 800cd2c:	680b      	ldr	r3, [r1, #0]
 800cd2e:	1b5b      	subs	r3, r3, r5
 800cd30:	d418      	bmi.n	800cd64 <_malloc_r+0x8c>
 800cd32:	2b0b      	cmp	r3, #11
 800cd34:	d90f      	bls.n	800cd56 <_malloc_r+0x7e>
 800cd36:	600b      	str	r3, [r1, #0]
 800cd38:	50cd      	str	r5, [r1, r3]
 800cd3a:	18cc      	adds	r4, r1, r3
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f000 fb98 	bl	800d472 <__malloc_unlock>
 800cd42:	f104 000b 	add.w	r0, r4, #11
 800cd46:	1d23      	adds	r3, r4, #4
 800cd48:	f020 0007 	bic.w	r0, r0, #7
 800cd4c:	1ac3      	subs	r3, r0, r3
 800cd4e:	d0d3      	beq.n	800ccf8 <_malloc_r+0x20>
 800cd50:	425a      	negs	r2, r3
 800cd52:	50e2      	str	r2, [r4, r3]
 800cd54:	e7d0      	b.n	800ccf8 <_malloc_r+0x20>
 800cd56:	428c      	cmp	r4, r1
 800cd58:	684b      	ldr	r3, [r1, #4]
 800cd5a:	bf16      	itet	ne
 800cd5c:	6063      	strne	r3, [r4, #4]
 800cd5e:	6013      	streq	r3, [r2, #0]
 800cd60:	460c      	movne	r4, r1
 800cd62:	e7eb      	b.n	800cd3c <_malloc_r+0x64>
 800cd64:	460c      	mov	r4, r1
 800cd66:	6849      	ldr	r1, [r1, #4]
 800cd68:	e7cc      	b.n	800cd04 <_malloc_r+0x2c>
 800cd6a:	1cc4      	adds	r4, r0, #3
 800cd6c:	f024 0403 	bic.w	r4, r4, #3
 800cd70:	42a0      	cmp	r0, r4
 800cd72:	d005      	beq.n	800cd80 <_malloc_r+0xa8>
 800cd74:	1a21      	subs	r1, r4, r0
 800cd76:	4630      	mov	r0, r6
 800cd78:	f000 fad0 	bl	800d31c <_sbrk_r>
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d0cf      	beq.n	800cd20 <_malloc_r+0x48>
 800cd80:	6025      	str	r5, [r4, #0]
 800cd82:	e7db      	b.n	800cd3c <_malloc_r+0x64>
 800cd84:	20000198 	.word	0x20000198
 800cd88:	2000019c 	.word	0x2000019c

0800cd8c <__sfputc_r>:
 800cd8c:	6893      	ldr	r3, [r2, #8]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	b410      	push	{r4}
 800cd94:	6093      	str	r3, [r2, #8]
 800cd96:	da08      	bge.n	800cdaa <__sfputc_r+0x1e>
 800cd98:	6994      	ldr	r4, [r2, #24]
 800cd9a:	42a3      	cmp	r3, r4
 800cd9c:	db01      	blt.n	800cda2 <__sfputc_r+0x16>
 800cd9e:	290a      	cmp	r1, #10
 800cda0:	d103      	bne.n	800cdaa <__sfputc_r+0x1e>
 800cda2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cda6:	f7ff bca3 	b.w	800c6f0 <__swbuf_r>
 800cdaa:	6813      	ldr	r3, [r2, #0]
 800cdac:	1c58      	adds	r0, r3, #1
 800cdae:	6010      	str	r0, [r2, #0]
 800cdb0:	7019      	strb	r1, [r3, #0]
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <__sfputs_r>:
 800cdba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	460f      	mov	r7, r1
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	18d5      	adds	r5, r2, r3
 800cdc4:	42ac      	cmp	r4, r5
 800cdc6:	d101      	bne.n	800cdcc <__sfputs_r+0x12>
 800cdc8:	2000      	movs	r0, #0
 800cdca:	e007      	b.n	800cddc <__sfputs_r+0x22>
 800cdcc:	463a      	mov	r2, r7
 800cdce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff ffda 	bl	800cd8c <__sfputc_r>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	d1f3      	bne.n	800cdc4 <__sfputs_r+0xa>
 800cddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cde0 <_vfiprintf_r>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	460c      	mov	r4, r1
 800cde6:	b09d      	sub	sp, #116	; 0x74
 800cde8:	4617      	mov	r7, r2
 800cdea:	461d      	mov	r5, r3
 800cdec:	4606      	mov	r6, r0
 800cdee:	b118      	cbz	r0, 800cdf8 <_vfiprintf_r+0x18>
 800cdf0:	6983      	ldr	r3, [r0, #24]
 800cdf2:	b90b      	cbnz	r3, 800cdf8 <_vfiprintf_r+0x18>
 800cdf4:	f7ff fe2c 	bl	800ca50 <__sinit>
 800cdf8:	4b7c      	ldr	r3, [pc, #496]	; (800cfec <_vfiprintf_r+0x20c>)
 800cdfa:	429c      	cmp	r4, r3
 800cdfc:	d158      	bne.n	800ceb0 <_vfiprintf_r+0xd0>
 800cdfe:	6874      	ldr	r4, [r6, #4]
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	0718      	lsls	r0, r3, #28
 800ce04:	d55e      	bpl.n	800cec4 <_vfiprintf_r+0xe4>
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d05b      	beq.n	800cec4 <_vfiprintf_r+0xe4>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce10:	2320      	movs	r3, #32
 800ce12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce16:	2330      	movs	r3, #48	; 0x30
 800ce18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce1c:	9503      	str	r5, [sp, #12]
 800ce1e:	f04f 0b01 	mov.w	fp, #1
 800ce22:	46b8      	mov	r8, r7
 800ce24:	4645      	mov	r5, r8
 800ce26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce2a:	b10b      	cbz	r3, 800ce30 <_vfiprintf_r+0x50>
 800ce2c:	2b25      	cmp	r3, #37	; 0x25
 800ce2e:	d154      	bne.n	800ceda <_vfiprintf_r+0xfa>
 800ce30:	ebb8 0a07 	subs.w	sl, r8, r7
 800ce34:	d00b      	beq.n	800ce4e <_vfiprintf_r+0x6e>
 800ce36:	4653      	mov	r3, sl
 800ce38:	463a      	mov	r2, r7
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7ff ffbc 	bl	800cdba <__sfputs_r>
 800ce42:	3001      	adds	r0, #1
 800ce44:	f000 80c2 	beq.w	800cfcc <_vfiprintf_r+0x1ec>
 800ce48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4a:	4453      	add	r3, sl
 800ce4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce4e:	f898 3000 	ldrb.w	r3, [r8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 80ba 	beq.w	800cfcc <_vfiprintf_r+0x1ec>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	9307      	str	r3, [sp, #28]
 800ce66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce6c:	46a8      	mov	r8, r5
 800ce6e:	2205      	movs	r2, #5
 800ce70:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ce74:	485e      	ldr	r0, [pc, #376]	; (800cff0 <_vfiprintf_r+0x210>)
 800ce76:	f7f3 f9ab 	bl	80001d0 <memchr>
 800ce7a:	9b04      	ldr	r3, [sp, #16]
 800ce7c:	bb78      	cbnz	r0, 800cede <_vfiprintf_r+0xfe>
 800ce7e:	06d9      	lsls	r1, r3, #27
 800ce80:	bf44      	itt	mi
 800ce82:	2220      	movmi	r2, #32
 800ce84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce88:	071a      	lsls	r2, r3, #28
 800ce8a:	bf44      	itt	mi
 800ce8c:	222b      	movmi	r2, #43	; 0x2b
 800ce8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce92:	782a      	ldrb	r2, [r5, #0]
 800ce94:	2a2a      	cmp	r2, #42	; 0x2a
 800ce96:	d02a      	beq.n	800ceee <_vfiprintf_r+0x10e>
 800ce98:	9a07      	ldr	r2, [sp, #28]
 800ce9a:	46a8      	mov	r8, r5
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	250a      	movs	r5, #10
 800cea0:	4641      	mov	r1, r8
 800cea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea6:	3b30      	subs	r3, #48	; 0x30
 800cea8:	2b09      	cmp	r3, #9
 800ceaa:	d969      	bls.n	800cf80 <_vfiprintf_r+0x1a0>
 800ceac:	b360      	cbz	r0, 800cf08 <_vfiprintf_r+0x128>
 800ceae:	e024      	b.n	800cefa <_vfiprintf_r+0x11a>
 800ceb0:	4b50      	ldr	r3, [pc, #320]	; (800cff4 <_vfiprintf_r+0x214>)
 800ceb2:	429c      	cmp	r4, r3
 800ceb4:	d101      	bne.n	800ceba <_vfiprintf_r+0xda>
 800ceb6:	68b4      	ldr	r4, [r6, #8]
 800ceb8:	e7a2      	b.n	800ce00 <_vfiprintf_r+0x20>
 800ceba:	4b4f      	ldr	r3, [pc, #316]	; (800cff8 <_vfiprintf_r+0x218>)
 800cebc:	429c      	cmp	r4, r3
 800cebe:	bf08      	it	eq
 800cec0:	68f4      	ldreq	r4, [r6, #12]
 800cec2:	e79d      	b.n	800ce00 <_vfiprintf_r+0x20>
 800cec4:	4621      	mov	r1, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff fc64 	bl	800c794 <__swsetup_r>
 800cecc:	2800      	cmp	r0, #0
 800cece:	d09d      	beq.n	800ce0c <_vfiprintf_r+0x2c>
 800ced0:	f04f 30ff 	mov.w	r0, #4294967295
 800ced4:	b01d      	add	sp, #116	; 0x74
 800ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceda:	46a8      	mov	r8, r5
 800cedc:	e7a2      	b.n	800ce24 <_vfiprintf_r+0x44>
 800cede:	4a44      	ldr	r2, [pc, #272]	; (800cff0 <_vfiprintf_r+0x210>)
 800cee0:	1a80      	subs	r0, r0, r2
 800cee2:	fa0b f000 	lsl.w	r0, fp, r0
 800cee6:	4318      	orrs	r0, r3
 800cee8:	9004      	str	r0, [sp, #16]
 800ceea:	4645      	mov	r5, r8
 800ceec:	e7be      	b.n	800ce6c <_vfiprintf_r+0x8c>
 800ceee:	9a03      	ldr	r2, [sp, #12]
 800cef0:	1d11      	adds	r1, r2, #4
 800cef2:	6812      	ldr	r2, [r2, #0]
 800cef4:	9103      	str	r1, [sp, #12]
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	db01      	blt.n	800cefe <_vfiprintf_r+0x11e>
 800cefa:	9207      	str	r2, [sp, #28]
 800cefc:	e004      	b.n	800cf08 <_vfiprintf_r+0x128>
 800cefe:	4252      	negs	r2, r2
 800cf00:	f043 0302 	orr.w	r3, r3, #2
 800cf04:	9207      	str	r2, [sp, #28]
 800cf06:	9304      	str	r3, [sp, #16]
 800cf08:	f898 3000 	ldrb.w	r3, [r8]
 800cf0c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf0e:	d10e      	bne.n	800cf2e <_vfiprintf_r+0x14e>
 800cf10:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cf14:	2b2a      	cmp	r3, #42	; 0x2a
 800cf16:	d138      	bne.n	800cf8a <_vfiprintf_r+0x1aa>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	1d1a      	adds	r2, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	9203      	str	r2, [sp, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfb8      	it	lt
 800cf24:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf28:	f108 0802 	add.w	r8, r8, #2
 800cf2c:	9305      	str	r3, [sp, #20]
 800cf2e:	4d33      	ldr	r5, [pc, #204]	; (800cffc <_vfiprintf_r+0x21c>)
 800cf30:	f898 1000 	ldrb.w	r1, [r8]
 800cf34:	2203      	movs	r2, #3
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7f3 f94a 	bl	80001d0 <memchr>
 800cf3c:	b140      	cbz	r0, 800cf50 <_vfiprintf_r+0x170>
 800cf3e:	2340      	movs	r3, #64	; 0x40
 800cf40:	1b40      	subs	r0, r0, r5
 800cf42:	fa03 f000 	lsl.w	r0, r3, r0
 800cf46:	9b04      	ldr	r3, [sp, #16]
 800cf48:	4303      	orrs	r3, r0
 800cf4a:	f108 0801 	add.w	r8, r8, #1
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	f898 1000 	ldrb.w	r1, [r8]
 800cf54:	482a      	ldr	r0, [pc, #168]	; (800d000 <_vfiprintf_r+0x220>)
 800cf56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf5a:	2206      	movs	r2, #6
 800cf5c:	f108 0701 	add.w	r7, r8, #1
 800cf60:	f7f3 f936 	bl	80001d0 <memchr>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d037      	beq.n	800cfd8 <_vfiprintf_r+0x1f8>
 800cf68:	4b26      	ldr	r3, [pc, #152]	; (800d004 <_vfiprintf_r+0x224>)
 800cf6a:	bb1b      	cbnz	r3, 800cfb4 <_vfiprintf_r+0x1d4>
 800cf6c:	9b03      	ldr	r3, [sp, #12]
 800cf6e:	3307      	adds	r3, #7
 800cf70:	f023 0307 	bic.w	r3, r3, #7
 800cf74:	3308      	adds	r3, #8
 800cf76:	9303      	str	r3, [sp, #12]
 800cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7a:	444b      	add	r3, r9
 800cf7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7e:	e750      	b.n	800ce22 <_vfiprintf_r+0x42>
 800cf80:	fb05 3202 	mla	r2, r5, r2, r3
 800cf84:	2001      	movs	r0, #1
 800cf86:	4688      	mov	r8, r1
 800cf88:	e78a      	b.n	800cea0 <_vfiprintf_r+0xc0>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f108 0801 	add.w	r8, r8, #1
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	4619      	mov	r1, r3
 800cf94:	250a      	movs	r5, #10
 800cf96:	4640      	mov	r0, r8
 800cf98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9c:	3a30      	subs	r2, #48	; 0x30
 800cf9e:	2a09      	cmp	r2, #9
 800cfa0:	d903      	bls.n	800cfaa <_vfiprintf_r+0x1ca>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0c3      	beq.n	800cf2e <_vfiprintf_r+0x14e>
 800cfa6:	9105      	str	r1, [sp, #20]
 800cfa8:	e7c1      	b.n	800cf2e <_vfiprintf_r+0x14e>
 800cfaa:	fb05 2101 	mla	r1, r5, r1, r2
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4680      	mov	r8, r0
 800cfb2:	e7f0      	b.n	800cf96 <_vfiprintf_r+0x1b6>
 800cfb4:	ab03      	add	r3, sp, #12
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	4622      	mov	r2, r4
 800cfba:	4b13      	ldr	r3, [pc, #76]	; (800d008 <_vfiprintf_r+0x228>)
 800cfbc:	a904      	add	r1, sp, #16
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f3af 8000 	nop.w
 800cfc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cfc8:	4681      	mov	r9, r0
 800cfca:	d1d5      	bne.n	800cf78 <_vfiprintf_r+0x198>
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	065b      	lsls	r3, r3, #25
 800cfd0:	f53f af7e 	bmi.w	800ced0 <_vfiprintf_r+0xf0>
 800cfd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfd6:	e77d      	b.n	800ced4 <_vfiprintf_r+0xf4>
 800cfd8:	ab03      	add	r3, sp, #12
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	4622      	mov	r2, r4
 800cfde:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <_vfiprintf_r+0x228>)
 800cfe0:	a904      	add	r1, sp, #16
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f000 f888 	bl	800d0f8 <_printf_i>
 800cfe8:	e7ec      	b.n	800cfc4 <_vfiprintf_r+0x1e4>
 800cfea:	bf00      	nop
 800cfec:	0800dac4 	.word	0x0800dac4
 800cff0:	0800db04 	.word	0x0800db04
 800cff4:	0800dae4 	.word	0x0800dae4
 800cff8:	0800daa4 	.word	0x0800daa4
 800cffc:	0800db0a 	.word	0x0800db0a
 800d000:	0800db0e 	.word	0x0800db0e
 800d004:	00000000 	.word	0x00000000
 800d008:	0800cdbb 	.word	0x0800cdbb

0800d00c <_printf_common>:
 800d00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d010:	4691      	mov	r9, r2
 800d012:	461f      	mov	r7, r3
 800d014:	688a      	ldr	r2, [r1, #8]
 800d016:	690b      	ldr	r3, [r1, #16]
 800d018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d01c:	4293      	cmp	r3, r2
 800d01e:	bfb8      	it	lt
 800d020:	4613      	movlt	r3, r2
 800d022:	f8c9 3000 	str.w	r3, [r9]
 800d026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d02a:	4606      	mov	r6, r0
 800d02c:	460c      	mov	r4, r1
 800d02e:	b112      	cbz	r2, 800d036 <_printf_common+0x2a>
 800d030:	3301      	adds	r3, #1
 800d032:	f8c9 3000 	str.w	r3, [r9]
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	0699      	lsls	r1, r3, #26
 800d03a:	bf42      	ittt	mi
 800d03c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d040:	3302      	addmi	r3, #2
 800d042:	f8c9 3000 	strmi.w	r3, [r9]
 800d046:	6825      	ldr	r5, [r4, #0]
 800d048:	f015 0506 	ands.w	r5, r5, #6
 800d04c:	d107      	bne.n	800d05e <_printf_common+0x52>
 800d04e:	f104 0a19 	add.w	sl, r4, #25
 800d052:	68e3      	ldr	r3, [r4, #12]
 800d054:	f8d9 2000 	ldr.w	r2, [r9]
 800d058:	1a9b      	subs	r3, r3, r2
 800d05a:	42ab      	cmp	r3, r5
 800d05c:	dc28      	bgt.n	800d0b0 <_printf_common+0xa4>
 800d05e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d062:	6822      	ldr	r2, [r4, #0]
 800d064:	3300      	adds	r3, #0
 800d066:	bf18      	it	ne
 800d068:	2301      	movne	r3, #1
 800d06a:	0692      	lsls	r2, r2, #26
 800d06c:	d42d      	bmi.n	800d0ca <_printf_common+0xbe>
 800d06e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d072:	4639      	mov	r1, r7
 800d074:	4630      	mov	r0, r6
 800d076:	47c0      	blx	r8
 800d078:	3001      	adds	r0, #1
 800d07a:	d020      	beq.n	800d0be <_printf_common+0xb2>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	68e5      	ldr	r5, [r4, #12]
 800d080:	f8d9 2000 	ldr.w	r2, [r9]
 800d084:	f003 0306 	and.w	r3, r3, #6
 800d088:	2b04      	cmp	r3, #4
 800d08a:	bf08      	it	eq
 800d08c:	1aad      	subeq	r5, r5, r2
 800d08e:	68a3      	ldr	r3, [r4, #8]
 800d090:	6922      	ldr	r2, [r4, #16]
 800d092:	bf0c      	ite	eq
 800d094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d098:	2500      	movne	r5, #0
 800d09a:	4293      	cmp	r3, r2
 800d09c:	bfc4      	itt	gt
 800d09e:	1a9b      	subgt	r3, r3, r2
 800d0a0:	18ed      	addgt	r5, r5, r3
 800d0a2:	f04f 0900 	mov.w	r9, #0
 800d0a6:	341a      	adds	r4, #26
 800d0a8:	454d      	cmp	r5, r9
 800d0aa:	d11a      	bne.n	800d0e2 <_printf_common+0xd6>
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	e008      	b.n	800d0c2 <_printf_common+0xb6>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	47c0      	blx	r8
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d103      	bne.n	800d0c6 <_printf_common+0xba>
 800d0be:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c6:	3501      	adds	r5, #1
 800d0c8:	e7c3      	b.n	800d052 <_printf_common+0x46>
 800d0ca:	18e1      	adds	r1, r4, r3
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	2030      	movs	r0, #48	; 0x30
 800d0d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0d4:	4422      	add	r2, r4
 800d0d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0de:	3302      	adds	r3, #2
 800d0e0:	e7c5      	b.n	800d06e <_printf_common+0x62>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	47c0      	blx	r8
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d0e6      	beq.n	800d0be <_printf_common+0xb2>
 800d0f0:	f109 0901 	add.w	r9, r9, #1
 800d0f4:	e7d8      	b.n	800d0a8 <_printf_common+0x9c>
	...

0800d0f8 <_printf_i>:
 800d0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d100:	460c      	mov	r4, r1
 800d102:	7e09      	ldrb	r1, [r1, #24]
 800d104:	b085      	sub	sp, #20
 800d106:	296e      	cmp	r1, #110	; 0x6e
 800d108:	4617      	mov	r7, r2
 800d10a:	4606      	mov	r6, r0
 800d10c:	4698      	mov	r8, r3
 800d10e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d110:	f000 80b3 	beq.w	800d27a <_printf_i+0x182>
 800d114:	d822      	bhi.n	800d15c <_printf_i+0x64>
 800d116:	2963      	cmp	r1, #99	; 0x63
 800d118:	d036      	beq.n	800d188 <_printf_i+0x90>
 800d11a:	d80a      	bhi.n	800d132 <_printf_i+0x3a>
 800d11c:	2900      	cmp	r1, #0
 800d11e:	f000 80b9 	beq.w	800d294 <_printf_i+0x19c>
 800d122:	2958      	cmp	r1, #88	; 0x58
 800d124:	f000 8083 	beq.w	800d22e <_printf_i+0x136>
 800d128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d12c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d130:	e032      	b.n	800d198 <_printf_i+0xa0>
 800d132:	2964      	cmp	r1, #100	; 0x64
 800d134:	d001      	beq.n	800d13a <_printf_i+0x42>
 800d136:	2969      	cmp	r1, #105	; 0x69
 800d138:	d1f6      	bne.n	800d128 <_printf_i+0x30>
 800d13a:	6820      	ldr	r0, [r4, #0]
 800d13c:	6813      	ldr	r3, [r2, #0]
 800d13e:	0605      	lsls	r5, r0, #24
 800d140:	f103 0104 	add.w	r1, r3, #4
 800d144:	d52a      	bpl.n	800d19c <_printf_i+0xa4>
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6011      	str	r1, [r2, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	da03      	bge.n	800d156 <_printf_i+0x5e>
 800d14e:	222d      	movs	r2, #45	; 0x2d
 800d150:	425b      	negs	r3, r3
 800d152:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d156:	486f      	ldr	r0, [pc, #444]	; (800d314 <_printf_i+0x21c>)
 800d158:	220a      	movs	r2, #10
 800d15a:	e039      	b.n	800d1d0 <_printf_i+0xd8>
 800d15c:	2973      	cmp	r1, #115	; 0x73
 800d15e:	f000 809d 	beq.w	800d29c <_printf_i+0x1a4>
 800d162:	d808      	bhi.n	800d176 <_printf_i+0x7e>
 800d164:	296f      	cmp	r1, #111	; 0x6f
 800d166:	d020      	beq.n	800d1aa <_printf_i+0xb2>
 800d168:	2970      	cmp	r1, #112	; 0x70
 800d16a:	d1dd      	bne.n	800d128 <_printf_i+0x30>
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	f043 0320 	orr.w	r3, r3, #32
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	e003      	b.n	800d17e <_printf_i+0x86>
 800d176:	2975      	cmp	r1, #117	; 0x75
 800d178:	d017      	beq.n	800d1aa <_printf_i+0xb2>
 800d17a:	2978      	cmp	r1, #120	; 0x78
 800d17c:	d1d4      	bne.n	800d128 <_printf_i+0x30>
 800d17e:	2378      	movs	r3, #120	; 0x78
 800d180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d184:	4864      	ldr	r0, [pc, #400]	; (800d318 <_printf_i+0x220>)
 800d186:	e055      	b.n	800d234 <_printf_i+0x13c>
 800d188:	6813      	ldr	r3, [r2, #0]
 800d18a:	1d19      	adds	r1, r3, #4
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6011      	str	r1, [r2, #0]
 800d190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d198:	2301      	movs	r3, #1
 800d19a:	e08c      	b.n	800d2b6 <_printf_i+0x1be>
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6011      	str	r1, [r2, #0]
 800d1a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1a4:	bf18      	it	ne
 800d1a6:	b21b      	sxthne	r3, r3
 800d1a8:	e7cf      	b.n	800d14a <_printf_i+0x52>
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	6825      	ldr	r5, [r4, #0]
 800d1ae:	1d18      	adds	r0, r3, #4
 800d1b0:	6010      	str	r0, [r2, #0]
 800d1b2:	0628      	lsls	r0, r5, #24
 800d1b4:	d501      	bpl.n	800d1ba <_printf_i+0xc2>
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	e002      	b.n	800d1c0 <_printf_i+0xc8>
 800d1ba:	0668      	lsls	r0, r5, #25
 800d1bc:	d5fb      	bpl.n	800d1b6 <_printf_i+0xbe>
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	4854      	ldr	r0, [pc, #336]	; (800d314 <_printf_i+0x21c>)
 800d1c2:	296f      	cmp	r1, #111	; 0x6f
 800d1c4:	bf14      	ite	ne
 800d1c6:	220a      	movne	r2, #10
 800d1c8:	2208      	moveq	r2, #8
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1d0:	6865      	ldr	r5, [r4, #4]
 800d1d2:	60a5      	str	r5, [r4, #8]
 800d1d4:	2d00      	cmp	r5, #0
 800d1d6:	f2c0 8095 	blt.w	800d304 <_printf_i+0x20c>
 800d1da:	6821      	ldr	r1, [r4, #0]
 800d1dc:	f021 0104 	bic.w	r1, r1, #4
 800d1e0:	6021      	str	r1, [r4, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d13d      	bne.n	800d262 <_printf_i+0x16a>
 800d1e6:	2d00      	cmp	r5, #0
 800d1e8:	f040 808e 	bne.w	800d308 <_printf_i+0x210>
 800d1ec:	4665      	mov	r5, ip
 800d1ee:	2a08      	cmp	r2, #8
 800d1f0:	d10b      	bne.n	800d20a <_printf_i+0x112>
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	07db      	lsls	r3, r3, #31
 800d1f6:	d508      	bpl.n	800d20a <_printf_i+0x112>
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	6862      	ldr	r2, [r4, #4]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	bfde      	ittt	le
 800d200:	2330      	movle	r3, #48	; 0x30
 800d202:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d206:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d20a:	ebac 0305 	sub.w	r3, ip, r5
 800d20e:	6123      	str	r3, [r4, #16]
 800d210:	f8cd 8000 	str.w	r8, [sp]
 800d214:	463b      	mov	r3, r7
 800d216:	aa03      	add	r2, sp, #12
 800d218:	4621      	mov	r1, r4
 800d21a:	4630      	mov	r0, r6
 800d21c:	f7ff fef6 	bl	800d00c <_printf_common>
 800d220:	3001      	adds	r0, #1
 800d222:	d14d      	bne.n	800d2c0 <_printf_i+0x1c8>
 800d224:	f04f 30ff 	mov.w	r0, #4294967295
 800d228:	b005      	add	sp, #20
 800d22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d22e:	4839      	ldr	r0, [pc, #228]	; (800d314 <_printf_i+0x21c>)
 800d230:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d234:	6813      	ldr	r3, [r2, #0]
 800d236:	6821      	ldr	r1, [r4, #0]
 800d238:	1d1d      	adds	r5, r3, #4
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6015      	str	r5, [r2, #0]
 800d23e:	060a      	lsls	r2, r1, #24
 800d240:	d50b      	bpl.n	800d25a <_printf_i+0x162>
 800d242:	07ca      	lsls	r2, r1, #31
 800d244:	bf44      	itt	mi
 800d246:	f041 0120 	orrmi.w	r1, r1, #32
 800d24a:	6021      	strmi	r1, [r4, #0]
 800d24c:	b91b      	cbnz	r3, 800d256 <_printf_i+0x15e>
 800d24e:	6822      	ldr	r2, [r4, #0]
 800d250:	f022 0220 	bic.w	r2, r2, #32
 800d254:	6022      	str	r2, [r4, #0]
 800d256:	2210      	movs	r2, #16
 800d258:	e7b7      	b.n	800d1ca <_printf_i+0xd2>
 800d25a:	064d      	lsls	r5, r1, #25
 800d25c:	bf48      	it	mi
 800d25e:	b29b      	uxthmi	r3, r3
 800d260:	e7ef      	b.n	800d242 <_printf_i+0x14a>
 800d262:	4665      	mov	r5, ip
 800d264:	fbb3 f1f2 	udiv	r1, r3, r2
 800d268:	fb02 3311 	mls	r3, r2, r1, r3
 800d26c:	5cc3      	ldrb	r3, [r0, r3]
 800d26e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d272:	460b      	mov	r3, r1
 800d274:	2900      	cmp	r1, #0
 800d276:	d1f5      	bne.n	800d264 <_printf_i+0x16c>
 800d278:	e7b9      	b.n	800d1ee <_printf_i+0xf6>
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	6825      	ldr	r5, [r4, #0]
 800d27e:	6961      	ldr	r1, [r4, #20]
 800d280:	1d18      	adds	r0, r3, #4
 800d282:	6010      	str	r0, [r2, #0]
 800d284:	0628      	lsls	r0, r5, #24
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	d501      	bpl.n	800d28e <_printf_i+0x196>
 800d28a:	6019      	str	r1, [r3, #0]
 800d28c:	e002      	b.n	800d294 <_printf_i+0x19c>
 800d28e:	066a      	lsls	r2, r5, #25
 800d290:	d5fb      	bpl.n	800d28a <_printf_i+0x192>
 800d292:	8019      	strh	r1, [r3, #0]
 800d294:	2300      	movs	r3, #0
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	4665      	mov	r5, ip
 800d29a:	e7b9      	b.n	800d210 <_printf_i+0x118>
 800d29c:	6813      	ldr	r3, [r2, #0]
 800d29e:	1d19      	adds	r1, r3, #4
 800d2a0:	6011      	str	r1, [r2, #0]
 800d2a2:	681d      	ldr	r5, [r3, #0]
 800d2a4:	6862      	ldr	r2, [r4, #4]
 800d2a6:	2100      	movs	r1, #0
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7f2 ff91 	bl	80001d0 <memchr>
 800d2ae:	b108      	cbz	r0, 800d2b4 <_printf_i+0x1bc>
 800d2b0:	1b40      	subs	r0, r0, r5
 800d2b2:	6060      	str	r0, [r4, #4]
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	6123      	str	r3, [r4, #16]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2be:	e7a7      	b.n	800d210 <_printf_i+0x118>
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	47c0      	blx	r8
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d0aa      	beq.n	800d224 <_printf_i+0x12c>
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	079b      	lsls	r3, r3, #30
 800d2d2:	d413      	bmi.n	800d2fc <_printf_i+0x204>
 800d2d4:	68e0      	ldr	r0, [r4, #12]
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	4298      	cmp	r0, r3
 800d2da:	bfb8      	it	lt
 800d2dc:	4618      	movlt	r0, r3
 800d2de:	e7a3      	b.n	800d228 <_printf_i+0x130>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	464a      	mov	r2, r9
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	47c0      	blx	r8
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	d09a      	beq.n	800d224 <_printf_i+0x12c>
 800d2ee:	3501      	adds	r5, #1
 800d2f0:	68e3      	ldr	r3, [r4, #12]
 800d2f2:	9a03      	ldr	r2, [sp, #12]
 800d2f4:	1a9b      	subs	r3, r3, r2
 800d2f6:	42ab      	cmp	r3, r5
 800d2f8:	dcf2      	bgt.n	800d2e0 <_printf_i+0x1e8>
 800d2fa:	e7eb      	b.n	800d2d4 <_printf_i+0x1dc>
 800d2fc:	2500      	movs	r5, #0
 800d2fe:	f104 0919 	add.w	r9, r4, #25
 800d302:	e7f5      	b.n	800d2f0 <_printf_i+0x1f8>
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1ac      	bne.n	800d262 <_printf_i+0x16a>
 800d308:	7803      	ldrb	r3, [r0, #0]
 800d30a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d30e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d312:	e76c      	b.n	800d1ee <_printf_i+0xf6>
 800d314:	0800db15 	.word	0x0800db15
 800d318:	0800db26 	.word	0x0800db26

0800d31c <_sbrk_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4c06      	ldr	r4, [pc, #24]	; (800d338 <_sbrk_r+0x1c>)
 800d320:	2300      	movs	r3, #0
 800d322:	4605      	mov	r5, r0
 800d324:	4608      	mov	r0, r1
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	f7fe fff2 	bl	800c310 <_sbrk>
 800d32c:	1c43      	adds	r3, r0, #1
 800d32e:	d102      	bne.n	800d336 <_sbrk_r+0x1a>
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	b103      	cbz	r3, 800d336 <_sbrk_r+0x1a>
 800d334:	602b      	str	r3, [r5, #0]
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	20000f14 	.word	0x20000f14

0800d33c <__sread>:
 800d33c:	b510      	push	{r4, lr}
 800d33e:	460c      	mov	r4, r1
 800d340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d344:	f000 f896 	bl	800d474 <_read_r>
 800d348:	2800      	cmp	r0, #0
 800d34a:	bfab      	itete	ge
 800d34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d34e:	89a3      	ldrhlt	r3, [r4, #12]
 800d350:	181b      	addge	r3, r3, r0
 800d352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d356:	bfac      	ite	ge
 800d358:	6563      	strge	r3, [r4, #84]	; 0x54
 800d35a:	81a3      	strhlt	r3, [r4, #12]
 800d35c:	bd10      	pop	{r4, pc}

0800d35e <__swrite>:
 800d35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d362:	461f      	mov	r7, r3
 800d364:	898b      	ldrh	r3, [r1, #12]
 800d366:	05db      	lsls	r3, r3, #23
 800d368:	4605      	mov	r5, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	4616      	mov	r6, r2
 800d36e:	d505      	bpl.n	800d37c <__swrite+0x1e>
 800d370:	2302      	movs	r3, #2
 800d372:	2200      	movs	r2, #0
 800d374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d378:	f000 f868 	bl	800d44c <_lseek_r>
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	4632      	mov	r2, r6
 800d38a:	463b      	mov	r3, r7
 800d38c:	4628      	mov	r0, r5
 800d38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d392:	f000 b817 	b.w	800d3c4 <_write_r>

0800d396 <__sseek>:
 800d396:	b510      	push	{r4, lr}
 800d398:	460c      	mov	r4, r1
 800d39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39e:	f000 f855 	bl	800d44c <_lseek_r>
 800d3a2:	1c43      	adds	r3, r0, #1
 800d3a4:	89a3      	ldrh	r3, [r4, #12]
 800d3a6:	bf15      	itete	ne
 800d3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3b2:	81a3      	strheq	r3, [r4, #12]
 800d3b4:	bf18      	it	ne
 800d3b6:	81a3      	strhne	r3, [r4, #12]
 800d3b8:	bd10      	pop	{r4, pc}

0800d3ba <__sclose>:
 800d3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3be:	f000 b813 	b.w	800d3e8 <_close_r>
	...

0800d3c4 <_write_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4c07      	ldr	r4, [pc, #28]	; (800d3e4 <_write_r+0x20>)
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	4608      	mov	r0, r1
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	6022      	str	r2, [r4, #0]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	f7fe ff4b 	bl	800c26e <_write>
 800d3d8:	1c43      	adds	r3, r0, #1
 800d3da:	d102      	bne.n	800d3e2 <_write_r+0x1e>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	b103      	cbz	r3, 800d3e2 <_write_r+0x1e>
 800d3e0:	602b      	str	r3, [r5, #0]
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}
 800d3e4:	20000f14 	.word	0x20000f14

0800d3e8 <_close_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4c06      	ldr	r4, [pc, #24]	; (800d404 <_close_r+0x1c>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	f7fe ff57 	bl	800c2a6 <_close>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_close_r+0x1a>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_close_r+0x1a>
 800d400:	602b      	str	r3, [r5, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	20000f14 	.word	0x20000f14

0800d408 <_fstat_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4c07      	ldr	r4, [pc, #28]	; (800d428 <_fstat_r+0x20>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4605      	mov	r5, r0
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	f7fe ff52 	bl	800c2be <_fstat>
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	d102      	bne.n	800d424 <_fstat_r+0x1c>
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	b103      	cbz	r3, 800d424 <_fstat_r+0x1c>
 800d422:	602b      	str	r3, [r5, #0]
 800d424:	bd38      	pop	{r3, r4, r5, pc}
 800d426:	bf00      	nop
 800d428:	20000f14 	.word	0x20000f14

0800d42c <_isatty_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4c06      	ldr	r4, [pc, #24]	; (800d448 <_isatty_r+0x1c>)
 800d430:	2300      	movs	r3, #0
 800d432:	4605      	mov	r5, r0
 800d434:	4608      	mov	r0, r1
 800d436:	6023      	str	r3, [r4, #0]
 800d438:	f7fe ff51 	bl	800c2de <_isatty>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d102      	bne.n	800d446 <_isatty_r+0x1a>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	b103      	cbz	r3, 800d446 <_isatty_r+0x1a>
 800d444:	602b      	str	r3, [r5, #0]
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	20000f14 	.word	0x20000f14

0800d44c <_lseek_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4c07      	ldr	r4, [pc, #28]	; (800d46c <_lseek_r+0x20>)
 800d450:	4605      	mov	r5, r0
 800d452:	4608      	mov	r0, r1
 800d454:	4611      	mov	r1, r2
 800d456:	2200      	movs	r2, #0
 800d458:	6022      	str	r2, [r4, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	f7fe ff4a 	bl	800c2f4 <_lseek>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_lseek_r+0x1e>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	b103      	cbz	r3, 800d46a <_lseek_r+0x1e>
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	20000f14 	.word	0x20000f14

0800d470 <__malloc_lock>:
 800d470:	4770      	bx	lr

0800d472 <__malloc_unlock>:
 800d472:	4770      	bx	lr

0800d474 <_read_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4c07      	ldr	r4, [pc, #28]	; (800d494 <_read_r+0x20>)
 800d478:	4605      	mov	r5, r0
 800d47a:	4608      	mov	r0, r1
 800d47c:	4611      	mov	r1, r2
 800d47e:	2200      	movs	r2, #0
 800d480:	6022      	str	r2, [r4, #0]
 800d482:	461a      	mov	r2, r3
 800d484:	f7fe fed6 	bl	800c234 <_read>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_read_r+0x1e>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_read_r+0x1e>
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	20000f14 	.word	0x20000f14

0800d498 <sqrt>:
 800d498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d49c:	ed2d 8b02 	vpush	{d8}
 800d4a0:	b08b      	sub	sp, #44	; 0x2c
 800d4a2:	ec55 4b10 	vmov	r4, r5, d0
 800d4a6:	f000 f851 	bl	800d54c <__ieee754_sqrt>
 800d4aa:	4b26      	ldr	r3, [pc, #152]	; (800d544 <sqrt+0xac>)
 800d4ac:	eeb0 8a40 	vmov.f32	s16, s0
 800d4b0:	eef0 8a60 	vmov.f32	s17, s1
 800d4b4:	f993 6000 	ldrsb.w	r6, [r3]
 800d4b8:	1c73      	adds	r3, r6, #1
 800d4ba:	d02a      	beq.n	800d512 <sqrt+0x7a>
 800d4bc:	4622      	mov	r2, r4
 800d4be:	462b      	mov	r3, r5
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	f7f3 fb2a 	bl	8000b1c <__aeabi_dcmpun>
 800d4c8:	4607      	mov	r7, r0
 800d4ca:	bb10      	cbnz	r0, 800d512 <sqrt+0x7a>
 800d4cc:	f04f 0800 	mov.w	r8, #0
 800d4d0:	f04f 0900 	mov.w	r9, #0
 800d4d4:	4642      	mov	r2, r8
 800d4d6:	464b      	mov	r3, r9
 800d4d8:	4620      	mov	r0, r4
 800d4da:	4629      	mov	r1, r5
 800d4dc:	f7f3 faf6 	bl	8000acc <__aeabi_dcmplt>
 800d4e0:	b1b8      	cbz	r0, 800d512 <sqrt+0x7a>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	4b18      	ldr	r3, [pc, #96]	; (800d548 <sqrt+0xb0>)
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	9708      	str	r7, [sp, #32]
 800d4ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d4f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d4f4:	b9b6      	cbnz	r6, 800d524 <sqrt+0x8c>
 800d4f6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d4fa:	4668      	mov	r0, sp
 800d4fc:	f000 f8d6 	bl	800d6ac <matherr>
 800d500:	b1d0      	cbz	r0, 800d538 <sqrt+0xa0>
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	b11b      	cbz	r3, 800d50e <sqrt+0x76>
 800d506:	f7fe ff8f 	bl	800c428 <__errno>
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	6003      	str	r3, [r0, #0]
 800d50e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d512:	eeb0 0a48 	vmov.f32	s0, s16
 800d516:	eef0 0a68 	vmov.f32	s1, s17
 800d51a:	b00b      	add	sp, #44	; 0x2c
 800d51c:	ecbd 8b02 	vpop	{d8}
 800d520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d524:	4642      	mov	r2, r8
 800d526:	464b      	mov	r3, r9
 800d528:	4640      	mov	r0, r8
 800d52a:	4649      	mov	r1, r9
 800d52c:	f7f3 f986 	bl	800083c <__aeabi_ddiv>
 800d530:	2e02      	cmp	r6, #2
 800d532:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d536:	d1e0      	bne.n	800d4fa <sqrt+0x62>
 800d538:	f7fe ff76 	bl	800c428 <__errno>
 800d53c:	2321      	movs	r3, #33	; 0x21
 800d53e:	6003      	str	r3, [r0, #0]
 800d540:	e7df      	b.n	800d502 <sqrt+0x6a>
 800d542:	bf00      	nop
 800d544:	20000168 	.word	0x20000168
 800d548:	0800db37 	.word	0x0800db37

0800d54c <__ieee754_sqrt>:
 800d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	4955      	ldr	r1, [pc, #340]	; (800d6a8 <__ieee754_sqrt+0x15c>)
 800d552:	ec55 4b10 	vmov	r4, r5, d0
 800d556:	43a9      	bics	r1, r5
 800d558:	462b      	mov	r3, r5
 800d55a:	462a      	mov	r2, r5
 800d55c:	d112      	bne.n	800d584 <__ieee754_sqrt+0x38>
 800d55e:	ee10 2a10 	vmov	r2, s0
 800d562:	ee10 0a10 	vmov	r0, s0
 800d566:	4629      	mov	r1, r5
 800d568:	f7f3 f83e 	bl	80005e8 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	f7f2 fe82 	bl	800027c <__adddf3>
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	ec45 4b10 	vmov	d0, r4, r5
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	2d00      	cmp	r5, #0
 800d586:	ee10 0a10 	vmov	r0, s0
 800d58a:	4621      	mov	r1, r4
 800d58c:	dc0f      	bgt.n	800d5ae <__ieee754_sqrt+0x62>
 800d58e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d592:	4330      	orrs	r0, r6
 800d594:	d0f2      	beq.n	800d57c <__ieee754_sqrt+0x30>
 800d596:	b155      	cbz	r5, 800d5ae <__ieee754_sqrt+0x62>
 800d598:	ee10 2a10 	vmov	r2, s0
 800d59c:	4620      	mov	r0, r4
 800d59e:	4629      	mov	r1, r5
 800d5a0:	f7f2 fe6a 	bl	8000278 <__aeabi_dsub>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	f7f3 f948 	bl	800083c <__aeabi_ddiv>
 800d5ac:	e7e4      	b.n	800d578 <__ieee754_sqrt+0x2c>
 800d5ae:	151b      	asrs	r3, r3, #20
 800d5b0:	d073      	beq.n	800d69a <__ieee754_sqrt+0x14e>
 800d5b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d5b6:	07dd      	lsls	r5, r3, #31
 800d5b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d5bc:	bf48      	it	mi
 800d5be:	0fc8      	lsrmi	r0, r1, #31
 800d5c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d5c4:	bf44      	itt	mi
 800d5c6:	0049      	lslmi	r1, r1, #1
 800d5c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d5cc:	2500      	movs	r5, #0
 800d5ce:	1058      	asrs	r0, r3, #1
 800d5d0:	0fcb      	lsrs	r3, r1, #31
 800d5d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d5d6:	0049      	lsls	r1, r1, #1
 800d5d8:	2316      	movs	r3, #22
 800d5da:	462c      	mov	r4, r5
 800d5dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d5e0:	19a7      	adds	r7, r4, r6
 800d5e2:	4297      	cmp	r7, r2
 800d5e4:	bfde      	ittt	le
 800d5e6:	19bc      	addle	r4, r7, r6
 800d5e8:	1bd2      	suble	r2, r2, r7
 800d5ea:	19ad      	addle	r5, r5, r6
 800d5ec:	0fcf      	lsrs	r7, r1, #31
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d5f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d5fc:	d1f0      	bne.n	800d5e0 <__ieee754_sqrt+0x94>
 800d5fe:	f04f 0c20 	mov.w	ip, #32
 800d602:	469e      	mov	lr, r3
 800d604:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d608:	42a2      	cmp	r2, r4
 800d60a:	eb06 070e 	add.w	r7, r6, lr
 800d60e:	dc02      	bgt.n	800d616 <__ieee754_sqrt+0xca>
 800d610:	d112      	bne.n	800d638 <__ieee754_sqrt+0xec>
 800d612:	428f      	cmp	r7, r1
 800d614:	d810      	bhi.n	800d638 <__ieee754_sqrt+0xec>
 800d616:	2f00      	cmp	r7, #0
 800d618:	eb07 0e06 	add.w	lr, r7, r6
 800d61c:	da42      	bge.n	800d6a4 <__ieee754_sqrt+0x158>
 800d61e:	f1be 0f00 	cmp.w	lr, #0
 800d622:	db3f      	blt.n	800d6a4 <__ieee754_sqrt+0x158>
 800d624:	f104 0801 	add.w	r8, r4, #1
 800d628:	1b12      	subs	r2, r2, r4
 800d62a:	428f      	cmp	r7, r1
 800d62c:	bf88      	it	hi
 800d62e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d632:	1bc9      	subs	r1, r1, r7
 800d634:	4433      	add	r3, r6
 800d636:	4644      	mov	r4, r8
 800d638:	0052      	lsls	r2, r2, #1
 800d63a:	f1bc 0c01 	subs.w	ip, ip, #1
 800d63e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d642:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d646:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d64a:	d1dd      	bne.n	800d608 <__ieee754_sqrt+0xbc>
 800d64c:	430a      	orrs	r2, r1
 800d64e:	d006      	beq.n	800d65e <__ieee754_sqrt+0x112>
 800d650:	1c5c      	adds	r4, r3, #1
 800d652:	bf13      	iteet	ne
 800d654:	3301      	addne	r3, #1
 800d656:	3501      	addeq	r5, #1
 800d658:	4663      	moveq	r3, ip
 800d65a:	f023 0301 	bicne.w	r3, r3, #1
 800d65e:	106a      	asrs	r2, r5, #1
 800d660:	085b      	lsrs	r3, r3, #1
 800d662:	07e9      	lsls	r1, r5, #31
 800d664:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d668:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d66c:	bf48      	it	mi
 800d66e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d672:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d676:	461c      	mov	r4, r3
 800d678:	e780      	b.n	800d57c <__ieee754_sqrt+0x30>
 800d67a:	0aca      	lsrs	r2, r1, #11
 800d67c:	3815      	subs	r0, #21
 800d67e:	0549      	lsls	r1, r1, #21
 800d680:	2a00      	cmp	r2, #0
 800d682:	d0fa      	beq.n	800d67a <__ieee754_sqrt+0x12e>
 800d684:	02d6      	lsls	r6, r2, #11
 800d686:	d50a      	bpl.n	800d69e <__ieee754_sqrt+0x152>
 800d688:	f1c3 0420 	rsb	r4, r3, #32
 800d68c:	fa21 f404 	lsr.w	r4, r1, r4
 800d690:	1e5d      	subs	r5, r3, #1
 800d692:	4099      	lsls	r1, r3
 800d694:	4322      	orrs	r2, r4
 800d696:	1b43      	subs	r3, r0, r5
 800d698:	e78b      	b.n	800d5b2 <__ieee754_sqrt+0x66>
 800d69a:	4618      	mov	r0, r3
 800d69c:	e7f0      	b.n	800d680 <__ieee754_sqrt+0x134>
 800d69e:	0052      	lsls	r2, r2, #1
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	e7ef      	b.n	800d684 <__ieee754_sqrt+0x138>
 800d6a4:	46a0      	mov	r8, r4
 800d6a6:	e7bf      	b.n	800d628 <__ieee754_sqrt+0xdc>
 800d6a8:	7ff00000 	.word	0x7ff00000

0800d6ac <matherr>:
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	4770      	bx	lr

0800d6b0 <_init>:
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b2:	bf00      	nop
 800d6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b6:	bc08      	pop	{r3}
 800d6b8:	469e      	mov	lr, r3
 800d6ba:	4770      	bx	lr

0800d6bc <_fini>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	bf00      	nop
 800d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c2:	bc08      	pop	{r3}
 800d6c4:	469e      	mov	lr, r3
 800d6c6:	4770      	bx	lr
